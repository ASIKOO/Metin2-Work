; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CFlyTrace@@QAE@XZ				; CFlyTrace::CFlyTrace
PUBLIC	??1CFlyTrace@@UAE@XZ				; CFlyTrace::~CFlyTrace
PUBLIC	?Destroy@CFlyTrace@@QAEXXZ			; CFlyTrace::Destroy
PUBLIC	?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z ; CFlyTrace::Create
PUBLIC	?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z ; CFlyTrace::UpdateNewPosition
PUBLIC	?Update@CFlyTrace@@QAEXXZ			; CFlyTrace::Update
PUBLIC	?Render@CFlyTrace@@QAEXXZ			; CFlyTrace::Render
PUBLIC	?__Initialize@CFlyTrace@@IAEXXZ			; CFlyTrace::__Initialize
PUBLIC	??0?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
PUBLIC	?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front
PUBLIC	??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
PUBLIC	?begin@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::begin
PUBLIC	?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::end
PUBLIC	?_Unchecked_end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Unchecked_end
PUBLIC	?back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEAAU?$pair@MUD3DXVECTOR3@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::back
PUBLIC	?pop_back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::pop_back
PUBLIC	?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
PUBLIC	?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
PUBLIC	?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >
PUBLIC	?DestroySystem@CFlyTrace@@SAXXZ			; CFlyTrace::DestroySystem
PUBLIC	?New@CFlyTrace@@SAPAV1@XZ			; CFlyTrace::New
PUBLIC	?Delete@CFlyTrace@@SAXPAV1@@Z			; CFlyTrace::Delete
PUBLIC	??_GCFlyTrace@@UAEPAXI@Z			; CFlyTrace::`scalar deleting destructor'
PUBLIC	??0?$CDynamicPool@VCFlyTrace@@@@QAE@XZ		; CDynamicPool<CFlyTrace>::CDynamicPool<CFlyTrace>
PUBLIC	??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
PUBLIC	?Destroy@?$CDynamicPool@VCFlyTrace@@@@QAEXXZ	; CDynamicPool<CFlyTrace>::Destroy
PUBLIC	?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ ; CDynamicPool<CFlyTrace>::Alloc
PUBLIC	?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z ; CDynamicPool<CFlyTrace>::Delete
PUBLIC	?deallocate@?$allocator@PAVCFlyTrace@@@std@@QAEXQAPAVCFlyTrace@@I@Z ; std::allocator<CFlyTrace *>::deallocate
PUBLIC	?clear@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::clear
PUBLIC	?_Destroy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXPAPAVCFlyTrace@@0@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@ABEII@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXQAPAVCFlyTrace@@II@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Change_array
PUBLIC	?_Tidy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Tidy
PUBLIC	?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength
PUBLIC	??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z	; CDynamicPool<CFlyTrace>::`scalar deleting destructor'
PUBLIC	??0TFlyVertexSet@@QAE@PAUTFlyVertex@@@Z		; TFlyVertexSet::TFlyVertexSet
PUBLIC	?deallocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXQAU?$pair@MUTFlyVertexSet@@@2@I@Z ; std::allocator<std::pair<float,TFlyVertexSet> >::deallocate
PUBLIC	??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
PUBLIC	?_Destroy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@ABEII@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXQAU?$pair@MUTFlyVertexSet@@@2@II@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
PUBLIC	??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=
PUBLIC	??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=
PUBLIC	??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
PUBLIC	?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > > >
PUBLIC	??$_Const_cast@$$CBU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PBU10@@Z ; std::_Const_cast<std::pair<float,TFlyVertexSet> const >
PUBLIC	??$emplace_back@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEX$$QAU?$pair@MUTFlyVertexSet@@@1@@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::emplace_back<std::pair<float,TFlyVertexSet> >
PUBLIC	??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >
PUBLIC	??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@P6AXPAVCFlyTrace@@@Z@std@@YAP6AXPAVCFlyTrace@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@1P6AX0@Z@Z ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >,void (__cdecl*)(CFlyTrace *)>
PUBLIC	??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$emplace_back@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::emplace_back<CFlyTrace * const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXABQAVCFlyTrace@@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_back_with_unused_capacity<CFlyTrace * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>
PUBLIC	??$_Destroy_in_place@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAXAAPAU?$pair@MUD3DXVECTOR3@@@0@@Z ; std::_Destroy_in_place<std::pair<float,D3DXVECTOR3> *>
PUBLIC	??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
PUBLIC	??$_Destroy_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@@Z ; std::_Destroy_range<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Destroy_range@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@QAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<float,TFlyVertexSet> > >
PUBLIC	??$_Destroy_range@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAXPAPAVCFlyTrace@@QAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyTrace *> >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
PUBLIC	??$_Uninitialized_move@PAU?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0PAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z ; std::_Uninitialized_move<std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> > >
PUBLIC	??$_Uninitialized_move@PAPAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAPAPAVCFlyTrace@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z ; std::_Uninitialized_move<CFlyTrace * *,std::allocator<CFlyTrace *> >
PUBLIC	??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>
PUBLIC	??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>
PUBLIC	??$_Insertion_sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0U?$less@X@0@@Z ; std::_Insertion_sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Make_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Make_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
PUBLIC	??$_Pop_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Pop_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Guess_median_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Guess_median_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$_Push_heap_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Push_heap_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
PUBLIC	??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
PUBLIC	??$swap@UTFlyVertexSet@@$0A@@std@@YAXAAUTFlyVertexSet@@0@Z ; std::swap<TFlyVertexSet,0>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A ; CFlyTrace::ms_kPool
PUBLIC	??_7CFlyTrace@@6B@				; CFlyTrace::`vftable'
PUBLIC	??_7?$CDynamicPool@VCFlyTrace@@@@6B@		; CDynamicPool<CFlyTrace>::`vftable'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CFlyTrace@@6B@				; CFlyTrace::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlyTrace@@@8				; CFlyTrace `RTTI Type Descriptor'
PUBLIC	??_R3CFlyTrace@@8				; CFlyTrace::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlyTrace@@8				; CFlyTrace::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlyTrace@@8			; CFlyTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R4?$CDynamicPool@VCFlyTrace@@@@6B@		; CDynamicPool<CFlyTrace>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8		; CDynamicPool<CFlyTrace> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCFlyTrace@@@@8		; CDynamicPool<CFlyTrace>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCFlyTrace@@@@8		; CDynamicPool<CFlyTrace>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8	; CDynamicPool<CFlyTrace>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@7fc00000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_fabs:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformNormal@12:PROC
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	?UpdateViewMatrix@CGraphicBase@@QAEXXZ:PROC	; CGraphicBase::UpdateViewMatrix
EXTRN	?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z:PROC ; Frustum::ViewVolumeTest
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SaveVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SaveVertexShader
EXTRN	?RestoreVertexShader@CStateManager@@QAEXXZ:PROC	; CStateManager::RestoreVertexShader
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	??_ECFlyTrace@@UAEPAXI@Z:PROC			; CFlyTrace::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z:PROC	; CDynamicPool<CFlyTrace>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_frustum@CScreen@@1VFrustum@@A:BYTE		; CScreen::ms_frustum
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A DB 024H DUP (?) ; CFlyTrace::ms_kPool
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CFlyTrace@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CFlyTrace@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@7fc00000
CONST	SEGMENT
__real@7fc00000 DD 07fc00000r			; nan
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8 ; CDynamicPool<CFlyTrace>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCFlyTrace@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCFlyTrace@@@@8 ; CDynamicPool<CFlyTrace>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCFlyTrace@@@@8 DD 00H		; CDynamicPool<CFlyTrace>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CFlyTrace> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCFlyTrace@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCFlyTrace@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCFlyTrace@@@@6B@ DD 00H		; CDynamicPool<CFlyTrace>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCFlyTrace@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCFlyTrace@@@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFlyTrace@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlyTrace@@8 DD FLAT:??_R0?AVCFlyTrace@@@8 ; CFlyTrace::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlyTrace@@8
rdata$r	SEGMENT
??_R2CFlyTrace@@8 DD FLAT:??_R1A@?0A@EA@CFlyTrace@@8	; CFlyTrace::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CFlyTrace@@8
rdata$r	SEGMENT
??_R3CFlyTrace@@8 DD 00H				; CFlyTrace::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlyTrace@@@8
data$rs	SEGMENT
??_R0?AVCFlyTrace@@@8 DD FLAT:??_7type_info@@6B@	; CFlyTrace `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlyTrace@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFlyTrace@@6B@
rdata$r	SEGMENT
??_R4CFlyTrace@@6B@ DD 00H				; CFlyTrace::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlyTrace@@@8
	DD	FLAT:??_R3CFlyTrace@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCFlyTrace@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCFlyTrace@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCFlyTrace@@@@6B@ ; CDynamicPool<CFlyTrace>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CFlyTrace@@6B@
CONST	SEGMENT
??_7CFlyTrace@@6B@ DD FLAT:??_R4CFlyTrace@@6B@		; CFlyTrace::`vftable'
	DD	FLAT:??_ECFlyTrace@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z$32 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z$32
__ehfuncinfo$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z$32 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z$0
__unwindtable$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z$32
__ehfuncinfo$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CFlyTrace@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$3
__ehfuncinfo$?Render@CFlyTrace@@QAEXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Render@CFlyTrace@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CFlyTrace@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFlyTrace@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFlyTrace@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFlyTrace@@QAE@XZ$1
__ehfuncinfo$??0CFlyTrace@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CFlyTrace@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
;	COMDAT ??$swap@UTFlyVertexSet@@$0A@@std@@YAXAAUTFlyVertexSet@@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 4
__Tmp$ = -36						; size = 144
__$ArrayPad$ = 108					; size = 4
__Left$ = 120						; size = 4
__Right$ = 124						; size = 4
??$swap@UTFlyVertexSet@@$0A@@std@@YAXAAUTFlyVertexSet@@0@Z PROC ; std::swap<TFlyVertexSet,0>, COMDAT

; 103  :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 6c	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00017	8b 45 78	 mov	 eax, DWORD PTR __Left$[ebp]
  0001a	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  0001d	6a 24		 push	 36			; 00000024H
  0001f	59		 pop	 ecx
  00020	8b 75 d8	 mov	 esi, DWORD PTR $T3[ebp]
  00023	8d 7d dc	 lea	 edi, DWORD PTR __Tmp$[ebp]
  00026	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00028	8b 45 7c	 mov	 eax, DWORD PTR __Right$[ebp]
  0002b	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0002e	68 90 00 00 00	 push	 144			; 00000090H
  00033	ff 75 d4	 push	 DWORD PTR $T2[ebp]
  00036	ff 75 78	 push	 DWORD PTR __Left$[ebp]
  00039	e8 00 00 00 00	 call	 _memcpy
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00041	8d 45 dc	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00044	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  00047	68 90 00 00 00	 push	 144			; 00000090H
  0004c	ff 75 d0	 push	 DWORD PTR $T1[ebp]
  0004f	ff 75 7c	 push	 DWORD PTR __Right$[ebp]
  00052	e8 00 00 00 00	 call	 _memcpy
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 107  : }

  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	8b 4d 6c	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005f	33 cd		 xor	 ecx, ebp
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	83 c5 70	 add	 ebp, 112		; 00000070H
  00069	c9		 leave
  0006a	c3		 ret	 0
??$swap@UTFlyVertexSet@@$0A@@std@@YAXAAUTFlyVertexSet@@0@Z ENDP ; std::swap<TFlyVertexSet,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z
_TEXT	SEGMENT
tv164 = -12						; size = 4
tv148 = -8						; size = 4
tv136 = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z PROC ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 7434 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  0000c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00010	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00013	77 19		 ja	 SHORT $LN11@Med3_unche
  00015	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00018	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0001b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0001f	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00022	77 04		 ja	 SHORT $LN10@Med3_unche
  00024	33 c0		 xor	 eax, eax
  00026	75 06		 jne	 SHORT $LN11@Med3_unche
$LN10@Med3_unche:
  00028	83 65 fc 00	 and	 DWORD PTR tv136[ebp], 0
  0002c	eb 07		 jmp	 SHORT $LN12@Med3_unche
$LN11@Med3_unche:
  0002e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv136[ebp], 1
$LN12@Med3_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7436 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00035	0f b6 45 fc	 movzx	 eax, BYTE PTR tv136[ebp]
  00039	85 c0		 test	 eax, eax
  0003b	74 0b		 je	 SHORT $LN15@Med3_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 337  :     _Left.swap(_Right);

  0003d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00040	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00043	e8 00 00 00 00	 call	 ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap
$LN15@Med3_unche:

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00048	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0004b	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0004e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00052	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00055	77 19		 ja	 SHORT $LN62@Med3_unche
  00057	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  0005d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00061	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00064	77 04		 ja	 SHORT $LN61@Med3_unche
  00066	33 c0		 xor	 eax, eax
  00068	75 06		 jne	 SHORT $LN62@Med3_unche
$LN61@Med3_unche:
  0006a	83 65 f8 00	 and	 DWORD PTR tv148[ebp], 0
  0006e	eb 07		 jmp	 SHORT $LN63@Med3_unche
$LN62@Med3_unche:
  00070	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv148[ebp], 1
$LN63@Med3_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7440 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00077	0f b6 45 f8	 movzx	 eax, BYTE PTR tv148[ebp]
  0007b	85 c0		 test	 eax, eax
  0007d	74 4d		 je	 SHORT $LN117@Med3_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 337  :     _Left.swap(_Right);

  0007f	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00082	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00085	e8 00 00 00 00	 call	 ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0008a	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00090	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00094	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00097	77 19		 ja	 SHORT $LN113@Med3_unche
  00099	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0009f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a3	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  000a6	77 04		 ja	 SHORT $LN112@Med3_unche
  000a8	33 c0		 xor	 eax, eax
  000aa	75 06		 jne	 SHORT $LN113@Med3_unche
$LN112@Med3_unche:
  000ac	83 65 f4 00	 and	 DWORD PTR tv164[ebp], 0
  000b0	eb 07		 jmp	 SHORT $LN114@Med3_unche
$LN113@Med3_unche:
  000b2	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv164[ebp], 1
$LN114@Med3_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7443 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000b9	0f b6 45 f4	 movzx	 eax, BYTE PTR tv164[ebp]
  000bd	85 c0		 test	 eax, eax
  000bf	74 0b		 je	 SHORT $LN117@Med3_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 337  :     _Left.swap(_Right);

  000c1	ff 75 08	 push	 DWORD PTR __First$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  000c7	e8 00 00 00 00	 call	 ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap
$LN117@Med3_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7447 : }

  000cc	c9		 leave
  000cd	c3		 ret	 0
??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ENDP ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
tv139 = -12						; size = 4
__Left$ = -8						; size = 4
__Idx$3 = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Top$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Push_heap_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z PROC ; std::_Push_heap_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >, COMDAT

; 6073 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 6074 :     // percolate _Hole to _Top or where _Val belongs
; 6075 :     using _Diff = _Iter_diff_t<_RanIt>;
; 6076 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00009	48		 dec	 eax
  0000a	d1 f8		 sar	 eax, 1
  0000c	89 45 fc	 mov	 DWORD PTR __Idx$3[ebp], eax
  0000f	eb 09		 jmp	 SHORT $LN4@Push_heap_
$LN2@Push_heap_:

; 6078 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen

  00011	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00014	48		 dec	 eax
  00015	d1 f8		 sar	 eax, 1
  00017	89 45 fc	 mov	 DWORD PTR __Idx$3[ebp], eax
$LN4@Push_heap_:

; 6077 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0001a	8b 45 10	 mov	 eax, DWORD PTR __Top$[ebp]
  0001d	3b 45 0c	 cmp	 eax, DWORD PTR __Hole$[ebp]
  00020	7d 6b		 jge	 SHORT $LN3@Push_heap_
  00022	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR __Idx$3[ebp], 148
  00029	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0002c	89 45 f8	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0002f	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  00032	8b 4d f8	 mov	 ecx, DWORD PTR __Left$[ebp]
  00035	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00039	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  0003c	77 19		 ja	 SHORT $LN11@Push_heap_
  0003e	8b 45 f8	 mov	 eax, DWORD PTR __Left$[ebp]
  00041	8b 4d 14	 mov	 ecx, DWORD PTR __Val$[ebp]
  00044	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00048	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  0004b	77 04		 ja	 SHORT $LN10@Push_heap_
  0004d	33 c0		 xor	 eax, eax
  0004f	75 06		 jne	 SHORT $LN11@Push_heap_
$LN10@Push_heap_:
  00051	83 65 f4 00	 and	 DWORD PTR tv139[ebp], 0
  00055	eb 07		 jmp	 SHORT $LN12@Push_heap_
$LN11@Push_heap_:
  00057	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv139[ebp], 1
$LN12@Push_heap_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6077 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0005e	0f b6 45 f4	 movzx	 eax, BYTE PTR tv139[ebp]
  00062	85 c0		 test	 eax, eax
  00064	74 27		 je	 SHORT $LN3@Push_heap_

; 6080 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00066	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR __Idx$3[ebp], 148
  0006d	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00070	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6080 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00073	ff 75 f0	 push	 DWORD PTR $T2[ebp]
  00076	69 4d 0c 94 00
	00 00		 imul	 ecx, DWORD PTR __Hole$[ebp], 148
  0007d	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  00080	e8 00 00 00 00	 call	 ??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>

; 6081 :         _Hole             = _Idx;

  00085	8b 45 fc	 mov	 eax, DWORD PTR __Idx$3[ebp]
  00088	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax

; 6082 :     }

  0008b	eb 84		 jmp	 SHORT $LN2@Push_heap_
$LN3@Push_heap_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0008d	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  00090	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6084 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00093	ff 75 ec	 push	 DWORD PTR $T1[ebp]
  00096	69 4d 0c 94 00
	00 00		 imul	 ecx, DWORD PTR __Hole$[ebp], 148
  0009d	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000a0	e8 00 00 00 00	 call	 ??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>

; 6085 : }

  000a5	c9		 leave
  000a6	c3		 ret	 0
??$_Push_heap_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ENDP ; std::_Push_heap_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z
_TEXT	SEGMENT
__Two_step$1 = -12					; size = 4
__Count$ = -8						; size = 4
__Step$2 = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z PROC ; std::_Guess_median_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 7450 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 7451 :     // sort median element to middle
; 7452 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 7453 :     const _Diff _Count = _Last - _First;

  00006	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000c	99		 cdq
  0000d	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00012	f7 f9		 idiv	 ecx
  00014	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax

; 7454 :     if (40 < _Count) { // Tukey's ninther

  00017	83 7d f8 28	 cmp	 DWORD PTR __Count$[ebp], 40 ; 00000028H
  0001b	0f 8e ac 00 00
	00		 jle	 $LN2@Guess_medi

; 7455 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  00021	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  00024	40		 inc	 eax
  00025	c1 f8 03	 sar	 eax, 3
  00028	89 45 fc	 mov	 DWORD PTR __Step$2[ebp], eax

; 7456 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit

  0002b	8b 45 fc	 mov	 eax, DWORD PTR __Step$2[ebp]
  0002e	d1 e0		 shl	 eax, 1
  00030	89 45 f4	 mov	 DWORD PTR __Two_step$1[ebp], eax

; 7457 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00033	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00036	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR __Two_step$1[ebp], 148
  0003d	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  00040	50		 push	 eax
  00041	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR __Step$2[ebp], 148
  00048	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0004b	50		 push	 eax
  0004c	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0004f	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  00054	83 c4 10	 add	 esp, 16			; 00000010H

; 7458 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00057	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0005a	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR __Step$2[ebp], 148
  00061	03 45 0c	 add	 eax, DWORD PTR __Mid$[ebp]
  00064	50		 push	 eax
  00065	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  00068	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR __Step$2[ebp], 148
  0006f	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00072	2b c8		 sub	 ecx, eax
  00074	51		 push	 ecx
  00075	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  0007a	83 c4 10	 add	 esp, 16			; 00000010H

; 7459 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  0007d	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00080	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00083	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR __Step$2[ebp], 148
  0008a	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0008d	2b c8		 sub	 ecx, eax
  0008f	51		 push	 ecx
  00090	69 45 f4 94 00
	00 00		 imul	 eax, DWORD PTR __Two_step$1[ebp], 148
  00097	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0009a	2b c8		 sub	 ecx, eax
  0009c	51		 push	 ecx
  0009d	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  000a2	83 c4 10	 add	 esp, 16			; 00000010H

; 7460 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  000a5	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000a8	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR __Step$2[ebp], 148
  000af	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  000b2	2b c8		 sub	 ecx, eax
  000b4	51		 push	 ecx
  000b5	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  000b8	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR __Step$2[ebp], 148
  000bf	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  000c8	83 c4 10	 add	 esp, 16			; 00000010H

; 7461 :     } else {

  000cb	eb 14		 jmp	 SHORT $LN1@Guess_medi
$LN2@Guess_medi:

; 7462 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  000cd	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000d0	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  000d3	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  000d6	ff 75 08	 push	 DWORD PTR __First$[ebp]
  000d9	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  000de	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Guess_medi:

; 7463 :     }
; 7464 : }

  000e1	c9		 leave
  000e2	c3		 ret	 0
??$_Guess_median_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ENDP ; std::_Guess_median_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
$T1 = -60						; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
__Val$5 = -44						; size = 148
__$ArrayPad$ = 104					; size = 4
__First$ = 116						; size = 4
__Last$ = 120						; size = 4
__Pred$ = 124						; size = 1
??$_Pop_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::_Pop_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 6226 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8d 6c 24 94	 lea	 ebp, DWORD PTR [esp-108]
  00005	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 68	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi

; 6227 :     // pop *_First to *(_Last - 1) and reheap
; 6228 :     if (2 <= _Last - _First) {

  00017	8b 45 78	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	2b 45 74	 sub	 eax, DWORD PTR __First$[ebp]
  0001d	99		 cdq
  0001e	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00023	f7 f9		 idiv	 ecx
  00025	83 f8 02	 cmp	 eax, 2
  00028	7c 5b		 jl	 SHORT $LN1@Pop_heap_u

; 6229 :         --_Last;

  0002a	8b 45 78	 mov	 eax, DWORD PTR __Last$[ebp]
  0002d	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  00032	89 45 78	 mov	 DWORD PTR __Last$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00035	8b 45 78	 mov	 eax, DWORD PTR __Last$[ebp]
  00038	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6230 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  0003b	6a 25		 push	 37			; 00000025H
  0003d	59		 pop	 ecx
  0003e	8b 75 d0	 mov	 esi, DWORD PTR $T4[ebp]
  00041	8d 7d d4	 lea	 edi, DWORD PTR __Val$5[ebp]
  00044	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00046	8d 45 d4	 lea	 eax, DWORD PTR __Val$5[ebp]
  00049	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  0004c	8b 45 74	 mov	 eax, DWORD PTR __First$[ebp]
  0004f	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6219 :     *_Dest      = _STD move(*_First);

  00052	ff 75 cc	 push	 DWORD PTR $T3[ebp]
  00055	8b 4d 78	 mov	 ecx, DWORD PTR __Last$[ebp]
  00058	e8 00 00 00 00	 call	 ??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0005d	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00060	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6221 :     _Pop_heap_hole_by_index(

  00063	ff 75 7c	 push	 DWORD PTR __Pred$[ebp]
  00066	ff 75 c4	 push	 DWORD PTR $T1[ebp]
  00069	8b 45 78	 mov	 eax, DWORD PTR __Last$[ebp]
  0006c	2b 45 74	 sub	 eax, DWORD PTR __First$[ebp]
  0006f	99		 cdq
  00070	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00075	f7 f9		 idiv	 ecx
  00077	50		 push	 eax
  00078	6a 00		 push	 0
  0007a	ff 75 74	 push	 DWORD PTR __First$[ebp]
  0007d	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
  00082	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@Pop_heap_u:

; 6231 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 6232 :     }
; 6233 : }

  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	8b 4d 68	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008a	33 cd		 xor	 ecx, ebp
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	83 c5 6c	 add	 ebp, 108		; 0000006cH
  00094	c9		 leave
  00095	c3		 ret	 0
??$_Pop_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::_Pop_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
__Top$ = -36						; size = 4
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Max_sequence_non_leaf$ = -20				; size = 4
tv157 = -16						; size = 4
__Right$ = -12						; size = 4
__Left$ = -8						; size = 4
__Idx$ = -4						; size = 4
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z PROC ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >, COMDAT

; 6186 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 6187 :     // percolate _Hole to _Bottom, then push _Val
; 6188 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 6189 : 
; 6190 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 6191 :     const _Diff _Top = _Hole;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00009	89 45 dc	 mov	 DWORD PTR __Top$[ebp], eax

; 6192 :     _Diff _Idx       = _Hole;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR __Idx$[ebp], eax

; 6193 : 
; 6194 :     // Check whether _Idx can have a child before calculating that child's index, since
; 6195 :     // calculating the child's index can trigger integer overflows
; 6196 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00012	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00015	48		 dec	 eax
  00016	d1 f8		 sar	 eax, 1
  00018	89 45 ec	 mov	 DWORD PTR __Max_sequence_non_leaf$[ebp], eax
$LN2@Pop_heap_h:

; 6197 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0001b	8b 45 fc	 mov	 eax, DWORD PTR __Idx$[ebp]
  0001e	3b 45 ec	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  00021	0f 8d 8f 00 00
	00		 jge	 $LN3@Pop_heap_h

; 6198 :         _Idx = 2 * _Idx + 2;

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Idx$[ebp]
  0002a	8d 44 00 02	 lea	 eax, DWORD PTR [eax+eax+2]
  0002e	89 45 fc	 mov	 DWORD PTR __Idx$[ebp], eax

; 6199 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  00031	8b 45 fc	 mov	 eax, DWORD PTR __Idx$[ebp]
  00034	48		 dec	 eax
  00035	69 c0 94 00 00
	00		 imul	 eax, eax, 148
  0003b	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0003e	89 45 f4	 mov	 DWORD PTR __Right$[ebp], eax
  00041	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR __Idx$[ebp], 148
  00048	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0004b	89 45 f8	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0004e	8b 45 f4	 mov	 eax, DWORD PTR __Right$[ebp]
  00051	8b 4d f8	 mov	 ecx, DWORD PTR __Left$[ebp]
  00054	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00058	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  0005b	77 19		 ja	 SHORT $LN12@Pop_heap_h
  0005d	8b 45 f8	 mov	 eax, DWORD PTR __Left$[ebp]
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __Right$[ebp]
  00063	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00067	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  0006a	77 04		 ja	 SHORT $LN11@Pop_heap_h
  0006c	33 c0		 xor	 eax, eax
  0006e	75 06		 jne	 SHORT $LN12@Pop_heap_h
$LN11@Pop_heap_h:
  00070	83 65 f0 00	 and	 DWORD PTR tv157[ebp], 0
  00074	eb 07		 jmp	 SHORT $LN13@Pop_heap_h
$LN12@Pop_heap_h:
  00076	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv157[ebp], 1
$LN13@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6199 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  0007d	0f b6 45 f0	 movzx	 eax, BYTE PTR tv157[ebp]
  00081	85 c0		 test	 eax, eax
  00083	74 07		 je	 SHORT $LN4@Pop_heap_h

; 6200 :             --_Idx;

  00085	8b 45 fc	 mov	 eax, DWORD PTR __Idx$[ebp]
  00088	48		 dec	 eax
  00089	89 45 fc	 mov	 DWORD PTR __Idx$[ebp], eax
$LN4@Pop_heap_h:

; 6202 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0008c	69 45 fc 94 00
	00 00		 imul	 eax, DWORD PTR __Idx$[ebp], 148
  00093	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00096	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6202 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00099	ff 75 e8	 push	 DWORD PTR $T3[ebp]
  0009c	69 4d 0c 94 00
	00 00		 imul	 ecx, DWORD PTR __Hole$[ebp], 148
  000a3	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000a6	e8 00 00 00 00	 call	 ??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>

; 6203 :         _Hole             = _Idx;

  000ab	8b 45 fc	 mov	 eax, DWORD PTR __Idx$[ebp]
  000ae	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax

; 6204 :     }

  000b1	e9 65 ff ff ff	 jmp	 $LN2@Pop_heap_h
$LN3@Pop_heap_h:

; 6205 : 
; 6206 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  000b6	8b 45 fc	 mov	 eax, DWORD PTR __Idx$[ebp]
  000b9	3b 45 ec	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  000bc	75 3c		 jne	 SHORT $LN5@Pop_heap_h
  000be	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000c1	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000c6	79 05		 jns	 SHORT $LN85@Pop_heap_h
  000c8	48		 dec	 eax
  000c9	83 c8 fe	 or	 eax, -2			; fffffffeH
  000cc	40		 inc	 eax
$LN85@Pop_heap_h:
  000cd	85 c0		 test	 eax, eax
  000cf	75 29		 jne	 SHORT $LN5@Pop_heap_h

; 6207 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  000d1	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000d4	48		 dec	 eax
  000d5	69 c0 94 00 00
	00		 imul	 eax, eax, 148
  000db	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  000de	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6207 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  000e1	ff 75 e4	 push	 DWORD PTR $T2[ebp]
  000e4	69 4d 0c 94 00
	00 00		 imul	 ecx, DWORD PTR __Hole$[ebp], 148
  000eb	03 4d 08	 add	 ecx, DWORD PTR __First$[ebp]
  000ee	e8 00 00 00 00	 call	 ??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>

; 6208 :         _Hole             = _Bottom - 1;

  000f3	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000f6	48		 dec	 eax
  000f7	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax
$LN5@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  000fa	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  000fd	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6211 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);

  00100	ff 75 18	 push	 DWORD PTR __Pred$[ebp]
  00103	ff 75 e0	 push	 DWORD PTR $T1[ebp]
  00106	ff 75 dc	 push	 DWORD PTR __Top$[ebp]
  00109	ff 75 0c	 push	 DWORD PTR __Hole$[ebp]
  0010c	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0010f	e8 00 00 00 00	 call	 ??$_Push_heap_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Push_heap_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
  00114	83 c4 14	 add	 esp, 20			; 00000014H

; 6212 : }

  00117	c9		 leave
  00118	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ENDP ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Left$ = -124						; size = 4
__Right$ = -120						; size = 4
__Right$ = -116						; size = 4
__Left$ = -112						; size = 4
__Left$ = -108						; size = 4
__Right$ = -104						; size = 4
$T1 = -100						; size = 4
$T2 = -96						; size = 4
__Left$ = -92						; size = 4
__Left$ = -88						; size = 4
tv284 = -84						; size = 4
tv286 = -80						; size = 4
tv274 = -76						; size = 4
tv265 = -72						; size = 4
tv256 = -68						; size = 4
tv247 = -64						; size = 4
tv238 = -60						; size = 4
tv229 = -56						; size = 4
__Mid$ = -52						; size = 4
__First$ = -48						; size = 4
__First$ = -44						; size = 4
__First$ = -40						; size = 4
__First$ = -36						; size = 4
__First$ = -32						; size = 4
__First$ = -28						; size = 4
__First$ = -24						; size = 4
__First$ = -20						; size = 4
__Glast$ = -16						; size = 4
__Gfirst$ = -12						; size = 4
__Plast$ = -8						; size = 4
__Pfirst$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 7467 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH

; 7468 :     // partition [_First, _Last)
; 7469 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00006	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b 45 0c	 sub	 eax, DWORD PTR __First$[ebp]
  0000c	99		 cdq
  0000d	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00012	f7 f9		 idiv	 ecx
  00014	d1 f8		 sar	 eax, 1
  00016	69 c0 94 00 00
	00		 imul	 eax, eax, 148
  0001c	03 45 0c	 add	 eax, DWORD PTR __First$[ebp]
  0001f	89 45 cc	 mov	 DWORD PTR __Mid$[ebp], eax

; 7470 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00022	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00025	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  00028	8b 45 dc	 mov	 eax, DWORD PTR __First$[ebp]
  0002b	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  00030	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7470 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00033	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00036	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00039	ff 75 cc	 push	 DWORD PTR __Mid$[ebp]
  0003c	ff 75 0c	 push	 DWORD PTR __First$[ebp]
  0003f	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@00U?$less@X@0@@Z ; std::_Guess_median_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 7471 :     _RanIt _Pfirst = _Mid;

  00047	8b 45 cc	 mov	 eax, DWORD PTR __Mid$[ebp]
  0004a	89 45 fc	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 7472 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0004d	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00050	89 45 d8	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1837 :     return ++_First;

  00053	8b 45 d8	 mov	 eax, DWORD PTR __First$[ebp]
  00056	05 94 00 00 00	 add	 eax, 148		; 00000094H
  0005b	89 45 d8	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7472 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0005e	8b 45 d8	 mov	 eax, DWORD PTR __First$[ebp]
  00061	89 45 f8	 mov	 DWORD PTR __Plast$[ebp], eax
$LN2@Partition_:

; 7475 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00064	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00067	3b 45 fc	 cmp	 eax, DWORD PTR __Pfirst$[ebp]
  0006a	0f 83 a0 00 00
	00		 jae	 $LN3@Partition_
  00070	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00073	89 45 ec	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  00076	8b 45 ec	 mov	 eax, DWORD PTR __First$[ebp]
  00079	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  0007e	89 45 ec	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00081	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00084	8b 4d ec	 mov	 ecx, DWORD PTR __First$[ebp]
  00087	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008b	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  0008e	77 19		 ja	 SHORT $LN45@Partition_
  00090	8b 45 ec	 mov	 eax, DWORD PTR __First$[ebp]
  00093	8b 4d fc	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00096	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0009a	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  0009d	77 04		 ja	 SHORT $LN44@Partition_
  0009f	33 c0		 xor	 eax, eax
  000a1	75 06		 jne	 SHORT $LN45@Partition_
$LN44@Partition_:
  000a3	83 65 c8 00	 and	 DWORD PTR tv229[ebp], 0
  000a7	eb 07		 jmp	 SHORT $LN46@Partition_
$LN45@Partition_:
  000a9	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR tv229[ebp], 1
$LN46@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7475 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000b0	0f b6 45 c8	 movzx	 eax, BYTE PTR tv229[ebp]
  000b4	85 c0		 test	 eax, eax
  000b6	75 58		 jne	 SHORT $LN3@Partition_
  000b8	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000bb	89 45 e8	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  000be	8b 45 e8	 mov	 eax, DWORD PTR __First$[ebp]
  000c1	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  000c6	89 45 e8	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000c9	8b 45 e8	 mov	 eax, DWORD PTR __First$[ebp]
  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  000cf	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000d3	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  000d6	77 19		 ja	 SHORT $LN56@Partition_
  000d8	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000db	8b 4d e8	 mov	 ecx, DWORD PTR __First$[ebp]
  000de	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000e2	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  000e5	77 04		 ja	 SHORT $LN55@Partition_
  000e7	33 c0		 xor	 eax, eax
  000e9	75 06		 jne	 SHORT $LN56@Partition_
$LN55@Partition_:
  000eb	83 65 c4 00	 and	 DWORD PTR tv238[ebp], 0
  000ef	eb 07		 jmp	 SHORT $LN57@Partition_
$LN56@Partition_:
  000f1	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR tv238[ebp], 1
$LN57@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7475 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000f8	0f b6 45 c4	 movzx	 eax, BYTE PTR tv238[ebp]
  000fc	85 c0		 test	 eax, eax
  000fe	75 10		 jne	 SHORT $LN3@Partition_

; 7476 :         --_Pfirst;

  00100	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00103	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  00108	89 45 fc	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 7477 :     }

  0010b	e9 54 ff ff ff	 jmp	 $LN2@Partition_
$LN3@Partition_:

; 7479 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00110	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  00113	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  00116	73 7e		 jae	 SHORT $LN5@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00118	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0011b	8b 4d f8	 mov	 ecx, DWORD PTR __Plast$[ebp]
  0011e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00122	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00125	77 19		 ja	 SHORT $LN65@Partition_
  00127	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  0012a	8b 4d fc	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  0012d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00131	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00134	77 04		 ja	 SHORT $LN64@Partition_
  00136	33 c0		 xor	 eax, eax
  00138	75 06		 jne	 SHORT $LN65@Partition_
$LN64@Partition_:
  0013a	83 65 c0 00	 and	 DWORD PTR tv247[ebp], 0
  0013e	eb 07		 jmp	 SHORT $LN66@Partition_
$LN65@Partition_:
  00140	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR tv247[ebp], 1
$LN66@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7479 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00147	0f b6 45 c0	 movzx	 eax, BYTE PTR tv247[ebp]
  0014b	85 c0		 test	 eax, eax
  0014d	75 47		 jne	 SHORT $LN5@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  0014f	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  00152	8b 4d fc	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00155	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00159	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  0015c	77 19		 ja	 SHORT $LN74@Partition_
  0015e	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00161	8b 4d f8	 mov	 ecx, DWORD PTR __Plast$[ebp]
  00164	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00168	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  0016b	77 04		 ja	 SHORT $LN73@Partition_
  0016d	33 c0		 xor	 eax, eax
  0016f	75 06		 jne	 SHORT $LN74@Partition_
$LN73@Partition_:
  00171	83 65 bc 00	 and	 DWORD PTR tv256[ebp], 0
  00175	eb 07		 jmp	 SHORT $LN75@Partition_
$LN74@Partition_:
  00177	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv256[ebp], 1
$LN75@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7479 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  0017e	0f b6 45 bc	 movzx	 eax, BYTE PTR tv256[ebp]
  00182	85 c0		 test	 eax, eax
  00184	75 10		 jne	 SHORT $LN5@Partition_

; 7480 :         ++_Plast;

  00186	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  00189	05 94 00 00 00	 add	 eax, 148		; 00000094H
  0018e	89 45 f8	 mov	 DWORD PTR __Plast$[ebp], eax

; 7481 :     }

  00191	e9 7a ff ff ff	 jmp	 $LN3@Partition_
$LN5@Partition_:

; 7482 : 
; 7483 :     _RanIt _Gfirst = _Plast;

  00196	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  00199	89 45 f4	 mov	 DWORD PTR __Gfirst$[ebp], eax

; 7484 :     _RanIt _Glast  = _Pfirst;

  0019c	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0019f	89 45 f0	 mov	 DWORD PTR __Glast$[ebp], eax
$LN6@Partition_:

; 7485 : 
; 7486 :     for (;;) { // partition
; 7487 :         for (; _Gfirst < _Last; ++_Gfirst) {

  001a2	eb 0b		 jmp	 SHORT $LN11@Partition_
$LN9@Partition_:
  001a4	8b 45 f4	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  001a7	05 94 00 00 00	 add	 eax, 148		; 00000094H
  001ac	89 45 f4	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN11@Partition_:
  001af	8b 45 f4	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  001b2	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  001b5	0f 83 ac 00 00
	00		 jae	 $LN10@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  001bb	8b 45 f4	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  001be	8b 4d fc	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  001c1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001c5	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  001c8	77 19		 ja	 SHORT $LN83@Partition_
  001ca	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  001cd	8b 4d f4	 mov	 ecx, DWORD PTR __Gfirst$[ebp]
  001d0	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001d4	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  001d7	77 04		 ja	 SHORT $LN82@Partition_
  001d9	33 c0		 xor	 eax, eax
  001db	75 06		 jne	 SHORT $LN83@Partition_
$LN82@Partition_:
  001dd	83 65 b8 00	 and	 DWORD PTR tv265[ebp], 0
  001e1	eb 07		 jmp	 SHORT $LN84@Partition_
$LN83@Partition_:
  001e3	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv265[ebp], 1
$LN84@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7488 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  001ea	0f b6 45 b8	 movzx	 eax, BYTE PTR tv265[ebp]
  001ee	85 c0		 test	 eax, eax
  001f0	74 04		 je	 SHORT $LN15@Partition_

; 7489 :                 continue;

  001f2	eb b0		 jmp	 SHORT $LN9@Partition_

; 7490 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  001f4	eb 6c		 jmp	 SHORT $LN20@Partition_
$LN15@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  001f6	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  001f9	8b 4d f4	 mov	 ecx, DWORD PTR __Gfirst$[ebp]
  001fc	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00200	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00203	77 19		 ja	 SHORT $LN92@Partition_
  00205	8b 45 f4	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00208	8b 4d fc	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  0020b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0020f	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00212	77 04		 ja	 SHORT $LN91@Partition_
  00214	33 c0		 xor	 eax, eax
  00216	75 06		 jne	 SHORT $LN92@Partition_
$LN91@Partition_:
  00218	83 65 b4 00	 and	 DWORD PTR tv274[ebp], 0
  0021c	eb 07		 jmp	 SHORT $LN93@Partition_
$LN92@Partition_:
  0021e	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv274[ebp], 1
$LN93@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7490 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  00225	0f b6 45 b4	 movzx	 eax, BYTE PTR tv274[ebp]
  00229	85 c0		 test	 eax, eax
  0022b	74 04		 je	 SHORT $LN17@Partition_

; 7491 :                 break;

  0022d	eb 38		 jmp	 SHORT $LN10@Partition_
  0022f	eb 31		 jmp	 SHORT $LN20@Partition_
$LN17@Partition_:

; 7492 :             } else if (_Plast != _Gfirst) {

  00231	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  00234	3b 45 f4	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  00237	74 1e		 je	 SHORT $LN19@Partition_

; 7493 :                 _STD iter_swap(_Plast, _Gfirst);

  00239	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  0023c	89 45 a8	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 337  :     _Left.swap(_Right);

  0023f	ff 75 f4	 push	 DWORD PTR __Gfirst$[ebp]
  00242	8b 4d a8	 mov	 ecx, DWORD PTR __Left$[ebp]
  00245	e8 00 00 00 00	 call	 ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7494 :                 ++_Plast;

  0024a	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  0024d	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00252	89 45 f8	 mov	 DWORD PTR __Plast$[ebp], eax

; 7495 :             } else {

  00255	eb 0b		 jmp	 SHORT $LN20@Partition_
$LN19@Partition_:

; 7496 :                 ++_Plast;

  00257	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  0025a	05 94 00 00 00	 add	 eax, 148		; 00000094H
  0025f	89 45 f8	 mov	 DWORD PTR __Plast$[ebp], eax
$LN20@Partition_:

; 7497 :             }
; 7498 :         }

  00262	e9 3d ff ff ff	 jmp	 $LN9@Partition_
$LN10@Partition_:

; 7499 : 
; 7500 :         for (; _First < _Glast; --_Glast) {

  00267	eb 0b		 jmp	 SHORT $LN14@Partition_
$LN12@Partition_:
  00269	8b 45 f0	 mov	 eax, DWORD PTR __Glast$[ebp]
  0026c	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  00271	89 45 f0	 mov	 DWORD PTR __Glast$[ebp], eax
$LN14@Partition_:
  00274	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00277	3b 45 f0	 cmp	 eax, DWORD PTR __Glast$[ebp]
  0027a	0f 83 e6 00 00
	00		 jae	 $LN13@Partition_

; 7501 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  00280	8b 45 f0	 mov	 eax, DWORD PTR __Glast$[ebp]
  00283	89 45 e4	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  00286	8b 45 e4	 mov	 eax, DWORD PTR __First$[ebp]
  00289	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  0028e	89 45 e4	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00291	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00294	8b 4d e4	 mov	 ecx, DWORD PTR __First$[ebp]
  00297	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0029b	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  0029e	77 19		 ja	 SHORT $LN145@Partition_
  002a0	8b 45 e4	 mov	 eax, DWORD PTR __First$[ebp]
  002a3	8b 4d fc	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  002a6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002aa	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  002ad	77 04		 ja	 SHORT $LN144@Partition_
  002af	33 c0		 xor	 eax, eax
  002b1	75 06		 jne	 SHORT $LN145@Partition_
$LN144@Partition_:
  002b3	83 65 b0 00	 and	 DWORD PTR tv286[ebp], 0
  002b7	eb 07		 jmp	 SHORT $LN146@Partition_
$LN145@Partition_:
  002b9	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv286[ebp], 1
$LN146@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7501 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  002c0	0f b6 45 b0	 movzx	 eax, BYTE PTR tv286[ebp]
  002c4	85 c0		 test	 eax, eax
  002c6	74 07		 je	 SHORT $LN21@Partition_

; 7502 :                 continue;

  002c8	eb 9f		 jmp	 SHORT $LN12@Partition_
  002ca	e9 92 00 00 00	 jmp	 $LN164@Partition_
$LN21@Partition_:

; 7503 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  002cf	8b 45 f0	 mov	 eax, DWORD PTR __Glast$[ebp]
  002d2	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  002d5	8b 45 e0	 mov	 eax, DWORD PTR __First$[ebp]
  002d8	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  002dd	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  002e0	8b 45 e0	 mov	 eax, DWORD PTR __First$[ebp]
  002e3	8b 4d fc	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  002e6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002ea	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  002ed	77 19		 ja	 SHORT $LN156@Partition_
  002ef	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  002f2	8b 4d e0	 mov	 ecx, DWORD PTR __First$[ebp]
  002f5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002f9	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  002fc	77 04		 ja	 SHORT $LN155@Partition_
  002fe	33 c0		 xor	 eax, eax
  00300	75 06		 jne	 SHORT $LN156@Partition_
$LN155@Partition_:
  00302	83 65 ac 00	 and	 DWORD PTR tv284[ebp], 0
  00306	eb 07		 jmp	 SHORT $LN157@Partition_
$LN156@Partition_:
  00308	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv284[ebp], 1
$LN157@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7503 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  0030f	0f b6 45 ac	 movzx	 eax, BYTE PTR tv284[ebp]
  00313	85 c0		 test	 eax, eax
  00315	74 04		 je	 SHORT $LN23@Partition_

; 7504 :                 break;

  00317	eb 4d		 jmp	 SHORT $LN13@Partition_
  00319	eb 46		 jmp	 SHORT $LN164@Partition_
$LN23@Partition_:

; 7505 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  0031b	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0031e	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  00323	89 45 fc	 mov	 DWORD PTR __Pfirst$[ebp], eax
  00326	8b 45 f0	 mov	 eax, DWORD PTR __Glast$[ebp]
  00329	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  0032c	8b 45 d4	 mov	 eax, DWORD PTR __First$[ebp]
  0032f	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  00334	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7505 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  00337	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0033a	3b 45 d4	 cmp	 eax, DWORD PTR __First$[ebp]
  0033d	74 22		 je	 SHORT $LN164@Partition_

; 7506 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));

  0033f	8b 45 f0	 mov	 eax, DWORD PTR __Glast$[ebp]
  00342	89 45 d0	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  00345	8b 45 d0	 mov	 eax, DWORD PTR __First$[ebp]
  00348	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  0034d	89 45 d0	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7506 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));

  00350	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00353	89 45 a4	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 337  :     _Left.swap(_Right);

  00356	ff 75 d0	 push	 DWORD PTR __First$[ebp]
  00359	8b 4d a4	 mov	 ecx, DWORD PTR __Left$[ebp]
  0035c	e8 00 00 00 00	 call	 ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap
$LN164@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7508 :         }

  00361	e9 03 ff ff ff	 jmp	 $LN12@Partition_
$LN13@Partition_:

; 7509 : 
; 7510 :         if (_Glast == _First && _Gfirst == _Last) {

  00366	8b 45 f0	 mov	 eax, DWORD PTR __Glast$[ebp]
  00369	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  0036c	75 31		 jne	 SHORT $LN26@Partition_
  0036e	8b 45 f4	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00371	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  00374	75 29		 jne	 SHORT $LN26@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00376	8d 45 fc	 lea	 eax, DWORD PTR __Pfirst$[ebp]
  00379	89 45 a0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0037c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0037f	8b 4d a0	 mov	 ecx, DWORD PTR $T2[ebp]
  00382	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00384	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00386	8d 45 f8	 lea	 eax, DWORD PTR __Plast$[ebp]
  00389	89 45 9c	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0038c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0038f	8b 4d 9c	 mov	 ecx, DWORD PTR $T1[ebp]
  00392	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00394	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7511 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00397	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0039a	e9 dc 00 00 00	 jmp	 $LN7@Partition_
$LN26@Partition_:

; 7512 :         }
; 7513 : 
; 7514 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward

  0039f	8b 45 f0	 mov	 eax, DWORD PTR __Glast$[ebp]
  003a2	3b 45 0c	 cmp	 eax, DWORD PTR __First$[ebp]
  003a5	75 53		 jne	 SHORT $LN27@Partition_

; 7515 :             if (_Plast != _Gfirst) {

  003a7	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  003aa	3b 45 f4	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  003ad	74 17		 je	 SHORT $LN215@Partition_

; 7516 :                 _STD iter_swap(_Pfirst, _Plast);

  003af	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  003b2	89 45 98	 mov	 DWORD PTR __Right$[ebp], eax
  003b5	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  003b8	89 45 94	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 337  :     _Left.swap(_Right);

  003bb	ff 75 98	 push	 DWORD PTR __Right$[ebp]
  003be	8b 4d 94	 mov	 ecx, DWORD PTR __Left$[ebp]
  003c1	e8 00 00 00 00	 call	 ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap
$LN215@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7519 :             ++_Plast;

  003c6	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  003c9	05 94 00 00 00	 add	 eax, 148		; 00000094H
  003ce	89 45 f8	 mov	 DWORD PTR __Plast$[ebp], eax

; 7520 :             _STD iter_swap(_Pfirst, _Gfirst);

  003d1	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  003d4	89 45 90	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 337  :     _Left.swap(_Right);

  003d7	ff 75 f4	 push	 DWORD PTR __Gfirst$[ebp]
  003da	8b 4d 90	 mov	 ecx, DWORD PTR __Left$[ebp]
  003dd	e8 00 00 00 00	 call	 ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7521 :             ++_Pfirst;

  003e2	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  003e5	05 94 00 00 00	 add	 eax, 148		; 00000094H
  003ea	89 45 fc	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 7522 :             ++_Gfirst;

  003ed	8b 45 f4	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  003f0	05 94 00 00 00	 add	 eax, 148		; 00000094H
  003f5	89 45 f4	 mov	 DWORD PTR __Gfirst$[ebp], eax
  003f8	eb 7c		 jmp	 SHORT $LN31@Partition_
$LN27@Partition_:

; 7523 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  003fa	8b 45 f4	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  003fd	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]
  00400	75 53		 jne	 SHORT $LN30@Partition_

; 7524 :             if (--_Glast != --_Pfirst) {

  00402	8b 45 f0	 mov	 eax, DWORD PTR __Glast$[ebp]
  00405	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  0040a	89 45 f0	 mov	 DWORD PTR __Glast$[ebp], eax
  0040d	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00410	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  00415	89 45 fc	 mov	 DWORD PTR __Pfirst$[ebp], eax
  00418	8b 45 f0	 mov	 eax, DWORD PTR __Glast$[ebp]
  0041b	3b 45 fc	 cmp	 eax, DWORD PTR __Pfirst$[ebp]
  0041e	74 11		 je	 SHORT $LN299@Partition_

; 7525 :                 _STD iter_swap(_Glast, _Pfirst);

  00420	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00423	89 45 8c	 mov	 DWORD PTR __Right$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 337  :     _Left.swap(_Right);

  00426	ff 75 8c	 push	 DWORD PTR __Right$[ebp]
  00429	8b 4d f0	 mov	 ecx, DWORD PTR __Glast$[ebp]
  0042c	e8 00 00 00 00	 call	 ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap
$LN299@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7528 :             _STD iter_swap(_Pfirst, --_Plast);

  00431	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  00434	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  00439	89 45 f8	 mov	 DWORD PTR __Plast$[ebp], eax
  0043c	8b 45 f8	 mov	 eax, DWORD PTR __Plast$[ebp]
  0043f	89 45 88	 mov	 DWORD PTR __Right$[ebp], eax
  00442	8b 45 fc	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00445	89 45 84	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 337  :     _Left.swap(_Right);

  00448	ff 75 88	 push	 DWORD PTR __Right$[ebp]
  0044b	8b 4d 84	 mov	 ecx, DWORD PTR __Left$[ebp]
  0044e	e8 00 00 00 00	 call	 ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7529 :         } else {

  00453	eb 21		 jmp	 SHORT $LN31@Partition_
$LN30@Partition_:

; 7530 :             _STD iter_swap(_Gfirst, --_Glast);

  00455	8b 45 f0	 mov	 eax, DWORD PTR __Glast$[ebp]
  00458	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  0045d	89 45 f0	 mov	 DWORD PTR __Glast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 337  :     _Left.swap(_Right);

  00460	ff 75 f0	 push	 DWORD PTR __Glast$[ebp]
  00463	8b 4d f4	 mov	 ecx, DWORD PTR __Gfirst$[ebp]
  00466	e8 00 00 00 00	 call	 ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ; std::pair<float,TFlyVertexSet>::swap
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7531 :             ++_Gfirst;

  0046b	8b 45 f4	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0046e	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00473	89 45 f4	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN31@Partition_:

; 7532 :         }
; 7533 :     }

  00476	e9 27 fd ff ff	 jmp	 $LN6@Partition_
$LN7@Partition_:

; 7534 : }

  0047b	c9		 leave
  0047c	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
$T1 = -60						; size = 4
$T2 = -56						; size = 4
__Bottom$ = -52						; size = 4
__Hole$3 = -48						; size = 4
__Val$4 = -44						; size = 148
__$ArrayPad$ = 104					; size = 4
__First$ = 116						; size = 4
__Last$ = 120						; size = 4
__Pred$ = 124						; size = 1
??$_Make_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z PROC ; std::_Make_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 6357 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8d 6c 24 94	 lea	 ebp, DWORD PTR [esp-108]
  00005	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 68	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi

; 6358 :     // make [_First, _Last) into a heap
; 6359 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 6360 :     _Diff _Bottom = _Last - _First;

  00017	8b 45 78	 mov	 eax, DWORD PTR __Last$[ebp]
  0001a	2b 45 74	 sub	 eax, DWORD PTR __First$[ebp]
  0001d	99		 cdq
  0001e	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00023	f7 f9		 idiv	 ecx
  00025	89 45 cc	 mov	 DWORD PTR __Bottom$[ebp], eax

; 6361 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00028	8b 45 cc	 mov	 eax, DWORD PTR __Bottom$[ebp]
  0002b	d1 f8		 sar	 eax, 1
  0002d	89 45 d0	 mov	 DWORD PTR __Hole$3[ebp], eax
$LN4@Make_heap_:
  00030	83 7d d0 00	 cmp	 DWORD PTR __Hole$3[ebp], 0
  00034	7e 3e		 jle	 SHORT $LN1@Make_heap_

; 6362 :         // reheap top half, bottom to top
; 6363 :         --_Hole;

  00036	8b 45 d0	 mov	 eax, DWORD PTR __Hole$3[ebp]
  00039	48		 dec	 eax
  0003a	89 45 d0	 mov	 DWORD PTR __Hole$3[ebp], eax

; 6364 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  0003d	69 45 d0 94 00
	00 00		 imul	 eax, DWORD PTR __Hole$3[ebp], 148
  00044	03 45 74	 add	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00047	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6364 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  0004a	6a 25		 push	 37			; 00000025H
  0004c	59		 pop	 ecx
  0004d	8b 75 c8	 mov	 esi, DWORD PTR $T2[ebp]
  00050	8d 7d d4	 lea	 edi, DWORD PTR __Val$4[ebp]
  00053	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00055	8d 45 d4	 lea	 eax, DWORD PTR __Val$4[ebp]
  00058	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6365 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  0005b	ff 75 7c	 push	 DWORD PTR __Pred$[ebp]
  0005e	ff 75 c4	 push	 DWORD PTR $T1[ebp]
  00061	ff 75 cc	 push	 DWORD PTR __Bottom$[ebp]
  00064	ff 75 d0	 push	 DWORD PTR __Hole$3[ebp]
  00067	ff 75 74	 push	 DWORD PTR __First$[ebp]
  0006a	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAU?$pair@MUTFlyVertexSet@@@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,TFlyVertexSet> *,std::pair<float,TFlyVertexSet>,std::less<void> >
  0006f	83 c4 14	 add	 esp, 20			; 00000014H

; 6366 :     }

  00072	eb bc		 jmp	 SHORT $LN4@Make_heap_
$LN1@Make_heap_:

; 6367 : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	8b 4d 68	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	33 cd		 xor	 ecx, ebp
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	83 c5 6c	 add	 ebp, 108		; 0000006cH
  00083	c9		 leave
  00084	c3		 ret	 0
??$_Make_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ENDP ; std::_Make_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0U?$less@X@0@@Z
_TEXT	SEGMENT
$T1 = -92						; size = 4
$T2 = -88						; size = 4
$T3 = -84						; size = 4
$T4 = -80						; size = 4
$T5 = -76						; size = 4
tv161 = -72						; size = 4
tv146 = -68						; size = 4
__Dest$ = -64						; size = 4
__Last$ = -60						; size = 4
__Prev$6 = -56						; size = 4
__Mid$7 = -52						; size = 4
__Hole$8 = -48						; size = 4
__Val$9 = -44						; size = 148
__$ArrayPad$ = 104					; size = 4
__First$ = 116						; size = 4
__Last$ = 120						; size = 4
__Pred$ = 124						; size = 1
??$_Insertion_sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0U?$less@X@0@@Z PROC ; std::_Insertion_sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 7410 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8d 6c 24 94	 lea	 ebp, DWORD PTR [esp-108]
  00005	81 ec c8 00 00
	00		 sub	 esp, 200		; 000000c8H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 68	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi

; 7411 :     // insertion sort [_First, _Last)
; 7412 :     if (_First != _Last) {

  00017	8b 45 74	 mov	 eax, DWORD PTR __First$[ebp]
  0001a	3b 45 78	 cmp	 eax, DWORD PTR __Last$[ebp]
  0001d	0f 84 37 01 00
	00		 je	 $LN3@Insertion_

; 7413 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  00023	8b 45 74	 mov	 eax, DWORD PTR __First$[ebp]
  00026	89 45 cc	 mov	 DWORD PTR __Mid$7[ebp], eax
$LN2@Insertion_:
  00029	8b 45 cc	 mov	 eax, DWORD PTR __Mid$7[ebp]
  0002c	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00031	89 45 cc	 mov	 DWORD PTR __Mid$7[ebp], eax
  00034	8b 45 cc	 mov	 eax, DWORD PTR __Mid$7[ebp]
  00037	3b 45 78	 cmp	 eax, DWORD PTR __Last$[ebp]
  0003a	0f 84 1a 01 00
	00		 je	 $LN3@Insertion_

; 7414 :             _BidIt _Hole               = _Mid;

  00040	8b 45 cc	 mov	 eax, DWORD PTR __Mid$7[ebp]
  00043	89 45 d0	 mov	 DWORD PTR __Hole$8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00046	8b 45 cc	 mov	 eax, DWORD PTR __Mid$7[ebp]
  00049	89 45 b4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7415 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  0004c	6a 25		 push	 37			; 00000025H
  0004e	59		 pop	 ecx
  0004f	8b 75 b4	 mov	 esi, DWORD PTR $T5[ebp]
  00052	8d 7d d4	 lea	 edi, DWORD PTR __Val$9[ebp]
  00055	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  00057	8b 45 74	 mov	 eax, DWORD PTR __First$[ebp]
  0005a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0005e	0f 2f 45 d4	 comiss	 xmm0, DWORD PTR __Val$9[ebp]
  00062	77 17		 ja	 SHORT $LN20@Insertion_
  00064	8b 45 74	 mov	 eax, DWORD PTR __First$[ebp]
  00067	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR __Val$9[ebp]
  0006c	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  0006f	77 04		 ja	 SHORT $LN19@Insertion_
  00071	33 c0		 xor	 eax, eax
  00073	75 06		 jne	 SHORT $LN20@Insertion_
$LN19@Insertion_:
  00075	83 65 bc 00	 and	 DWORD PTR tv146[ebp], 0
  00079	eb 07		 jmp	 SHORT $LN21@Insertion_
$LN20@Insertion_:
  0007b	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv146[ebp], 1
$LN21@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7417 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  00082	0f b6 45 bc	 movzx	 eax, BYTE PTR tv146[ebp]
  00086	85 c0		 test	 eax, eax
  00088	74 5b		 je	 SHORT $LN9@Insertion_

; 7418 :                 _Move_backward_unchecked(_First, _Mid, ++_Hole);

  0008a	8b 45 d0	 mov	 eax, DWORD PTR __Hole$8[ebp]
  0008d	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00092	89 45 d0	 mov	 DWORD PTR __Hole$8[ebp], eax
  00095	8b 45 d0	 mov	 eax, DWORD PTR __Hole$8[ebp]
  00098	89 45 c0	 mov	 DWORD PTR __Dest$[ebp], eax
  0009b	8b 45 cc	 mov	 eax, DWORD PTR __Mid$7[ebp]
  0009e	89 45 c4	 mov	 DWORD PTR __Last$[ebp], eax
$LN25@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4700 :     while (_First != _Last) {

  000a1	8b 45 74	 mov	 eax, DWORD PTR __First$[ebp]
  000a4	3b 45 c4	 cmp	 eax, DWORD PTR __Last$[ebp]
  000a7	74 29		 je	 SHORT $LN26@Insertion_

; 4701 :         *--_Dest = _STD move(*--_Last);

  000a9	8b 45 c4	 mov	 eax, DWORD PTR __Last$[ebp]
  000ac	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  000b1	89 45 c4	 mov	 DWORD PTR __Last$[ebp], eax
  000b4	8b 45 c0	 mov	 eax, DWORD PTR __Dest$[ebp]
  000b7	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  000bc	89 45 c0	 mov	 DWORD PTR __Dest$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  000bf	8b 45 c4	 mov	 eax, DWORD PTR __Last$[ebp]
  000c2	89 45 b0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4701 :         *--_Dest = _STD move(*--_Last);

  000c5	ff 75 b0	 push	 DWORD PTR $T4[ebp]
  000c8	8b 4d c0	 mov	 ecx, DWORD PTR __Dest$[ebp]
  000cb	e8 00 00 00 00	 call	 ??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>

; 4702 :     }

  000d0	eb cf		 jmp	 SHORT $LN25@Insertion_
$LN26@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  000d2	8d 45 d4	 lea	 eax, DWORD PTR __Val$9[ebp]
  000d5	89 45 ac	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7419 :                 *_First = _STD move(_Val);

  000d8	ff 75 ac	 push	 DWORD PTR $T3[ebp]
  000db	8b 4d 74	 mov	 ecx, DWORD PTR __First$[ebp]
  000de	e8 00 00 00 00	 call	 ??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>

; 7420 :             } else { // look for insertion point after first

  000e3	eb 70		 jmp	 SHORT $LN10@Insertion_
$LN9@Insertion_:

; 7421 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  000e5	8b 45 d0	 mov	 eax, DWORD PTR __Hole$8[ebp]
  000e8	89 45 c8	 mov	 DWORD PTR __Prev$6[ebp], eax
  000eb	eb 06		 jmp	 SHORT $LN7@Insertion_
$LN5@Insertion_:
  000ed	8b 45 c8	 mov	 eax, DWORD PTR __Prev$6[ebp]
  000f0	89 45 d0	 mov	 DWORD PTR __Hole$8[ebp], eax
$LN7@Insertion_:
  000f3	8b 45 c8	 mov	 eax, DWORD PTR __Prev$6[ebp]
  000f6	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  000fb	89 45 c8	 mov	 DWORD PTR __Prev$6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 352  :     return _Left.first < _Right.first || (!(_Right.first < _Left.first) && _Left.second < _Right.second);

  000fe	8b 45 c8	 mov	 eax, DWORD PTR __Prev$6[ebp]
  00101	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00105	0f 2f 45 d4	 comiss	 xmm0, DWORD PTR __Val$9[ebp]
  00109	77 17		 ja	 SHORT $LN59@Insertion_
  0010b	8b 45 c8	 mov	 eax, DWORD PTR __Prev$6[ebp]
  0010e	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR __Val$9[ebp]
  00113	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  00116	77 04		 ja	 SHORT $LN58@Insertion_
  00118	33 c0		 xor	 eax, eax
  0011a	75 06		 jne	 SHORT $LN59@Insertion_
$LN58@Insertion_:
  0011c	83 65 b8 00	 and	 DWORD PTR tv161[ebp], 0
  00120	eb 07		 jmp	 SHORT $LN60@Insertion_
$LN59@Insertion_:
  00122	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv161[ebp], 1
$LN60@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7421 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00129	0f b6 45 b8	 movzx	 eax, BYTE PTR tv161[ebp]
  0012d	85 c0		 test	 eax, eax
  0012f	74 13		 je	 SHORT $LN6@Insertion_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00131	8b 45 c8	 mov	 eax, DWORD PTR __Prev$6[ebp]
  00134	89 45 a8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7422 :                     *_Hole = _STD move(*_Prev); // move hole down

  00137	ff 75 a8	 push	 DWORD PTR $T2[ebp]
  0013a	8b 4d d0	 mov	 ecx, DWORD PTR __Hole$8[ebp]
  0013d	e8 00 00 00 00	 call	 ??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>

; 7423 :                 }

  00142	eb a9		 jmp	 SHORT $LN5@Insertion_
$LN6@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00144	8d 45 d4	 lea	 eax, DWORD PTR __Val$9[ebp]
  00147	89 45 a4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7425 :                 *_Hole = _STD move(_Val); // insert element in hole

  0014a	ff 75 a4	 push	 DWORD PTR $T1[ebp]
  0014d	8b 4d d0	 mov	 ecx, DWORD PTR __Hole$8[ebp]
  00150	e8 00 00 00 00	 call	 ??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>
$LN10@Insertion_:

; 7426 :             }
; 7427 :         }

  00155	e9 cf fe ff ff	 jmp	 $LN2@Insertion_
$LN3@Insertion_:

; 7428 :     }
; 7429 : 
; 7430 :     return _Last;

  0015a	8b 45 78	 mov	 eax, DWORD PTR __Last$[ebp]

; 7431 : }

  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	8b 4d 68	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00162	33 cd		 xor	 ecx, ebp
  00164	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00169	83 c5 6c	 add	 ebp, 108		; 0000006cH
  0016c	c9		 leave
  0016d	c3		 ret	 0
??$_Insertion_sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0U?$less@X@0@@Z ENDP ; std::_Insertion_sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z
_TEXT	SEGMENT
__Last_ch$ = -16					; size = 4
__Count$ = -12						; size = 4
__Dest_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>, COMDAT

; 4360 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 4361 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 4362 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 f0	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 4363 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f8	 mov	 DWORD PTR __Dest_ch$[ebp], eax

; 4364 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00018	8b 45 f0	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0001b	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0001e	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax

; 4365 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00021	ff 75 f4	 push	 DWORD PTR __Count$[ebp]
  00024	ff 75 fc	 push	 DWORD PTR __First_ch$[ebp]
  00027	ff 75 f8	 push	 DWORD PTR __Dest_ch$[ebp]
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4366 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00035	03 45 f4	 add	 eax, DWORD PTR __Count$[ebp]

; 4367 : }

  00038	c9		 leave
  00039	c3		 ret	 0
??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
;	COMDAT ??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z PROC ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>, COMDAT
; _this$ = ecx

; 289  :         conjunction_v<is_nothrow_move_assignable<_Ty1>, is_nothrow_move_assignable<_Ty2>>) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 290  :         first  = _STD forward<_Ty1>(_Right.first);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 290  :         first  = _STD forward<_Ty1>(_Right.first);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp]
  00015	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00017	89 08		 mov	 DWORD PTR [eax], ecx

; 291  :         second = _STD forward<_Ty2>(_Right.second);

  00019	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0001c	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0001f	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 291  :         second = _STD forward<_Ty2>(_Right.second);

  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 c0 04	 add	 eax, 4
  00028	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 112  : 		memcpy(v,rhs.v,sizeof(v));

  0002b	68 90 00 00 00	 push	 144			; 00000090H
  00030	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00033	ff 75 f0	 push	 DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 _memcpy
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 292  :         return *this;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 293  :     }

  00041	c9		 leave
  00042	c2 04 00	 ret	 4
??$?4U?$pair@MUTFlyVertexSet@@@std@@$0A@@?$pair@MUTFlyVertexSet@@@std@@QAEAAU01@$$QAU01@@Z ENDP ; std::pair<float,TFlyVertexSet>::operator=<std::pair<float,TFlyVertexSet>,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z
_TEXT	SEGMENT
__Mid$1 = -12						; size = 8
__Last$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z PROC ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >, COMDAT

; 7537 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
$LN4@Sort_unche:

; 7538 :     // order [_First, _Last)
; 7539 :     for (;;) {
; 7540 :         if (_Last - _First <= _ISORT_MAX) { // small

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000a	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000d	99		 cdq
  0000e	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00013	f7 f9		 idiv	 ecx
  00015	83 f8 20	 cmp	 eax, 32			; 00000020H
  00018	7f 16		 jg	 SHORT $LN5@Sort_unche

; 7541 :             _Insertion_sort_unchecked(_First, _Last, _Pred);

  0001a	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0001d	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00020	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00023	e8 00 00 00 00	 call	 ??$_Insertion_sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0U?$less@X@0@@Z ; std::_Insertion_sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7542 :             return;

  0002b	e9 d7 00 00 00	 jmp	 $LN1@Sort_unche
$LN5@Sort_unche:

; 7543 :         }
; 7544 : 
; 7545 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00030	83 7d 10 00	 cmp	 DWORD PTR __Ideal$[ebp], 0
  00034	7f 4f		 jg	 SHORT $LN6@Sort_unche

; 7546 :             _Make_heap_unchecked(_First, _Last, _Pred);

  00036	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00039	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0003c	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0003f	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Make_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7547 :             _Sort_heap_unchecked(_First, _Last, _Pred);

  00047	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0004a	89 45 fc	 mov	 DWORD PTR __Last$[ebp], eax

; 6592 :     for (; _Last - _First >= 2; --_Last) {

  0004d	eb 0b		 jmp	 SHORT $LN105@Sort_unche
$LN103@Sort_unche:
  0004f	8b 45 fc	 mov	 eax, DWORD PTR __Last$[ebp]
  00052	2d 94 00 00 00	 sub	 eax, 148		; 00000094H
  00057	89 45 fc	 mov	 DWORD PTR __Last$[ebp], eax
$LN105@Sort_unche:
  0005a	8b 45 fc	 mov	 eax, DWORD PTR __Last$[ebp]
  0005d	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  00060	99		 cdq
  00061	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00066	f7 f9		 idiv	 ecx
  00068	83 f8 02	 cmp	 eax, 2
  0006b	7c 13		 jl	 SHORT $LN102@Sort_unche

; 6593 :         _Pop_heap_unchecked(_First, _Last, _Pred);

  0006d	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00070	ff 75 fc	 push	 DWORD PTR __Last$[ebp]
  00073	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00076	e8 00 00 00 00	 call	 ??$_Pop_heap_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Pop_heap_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6594 :     }

  0007e	eb cf		 jmp	 SHORT $LN103@Sort_unche
$LN102@Sort_unche:

; 7548 :             return;

  00080	e9 82 00 00 00	 jmp	 $LN1@Sort_unche
$LN6@Sort_unche:

; 7549 :         }
; 7550 : 
; 7551 :         // divide and conquer by quicksort
; 7552 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  00085	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00088	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0008b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0008e	8d 45 f4	 lea	 eax, DWORD PTR __Mid$1[ebp]
  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MUTFlyVertexSet@@@std@@PAU12@@0@PAU?$pair@MUTFlyVertexSet@@@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  00097	83 c4 10	 add	 esp, 16			; 00000010H

; 7553 : 
; 7554 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  0009a	8b 45 10	 mov	 eax, DWORD PTR __Ideal$[ebp]
  0009d	d1 f8		 sar	 eax, 1
  0009f	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  000a2	c1 f9 02	 sar	 ecx, 2
  000a5	03 c1		 add	 eax, ecx
  000a7	89 45 10	 mov	 DWORD PTR __Ideal$[ebp], eax

; 7555 : 
; 7556 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  000aa	8b 45 f4	 mov	 eax, DWORD PTR __Mid$1[ebp]
  000ad	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  000b0	99		 cdq
  000b1	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  000b6	f7 f9		 idiv	 ecx
  000b8	8b c8		 mov	 ecx, eax
  000ba	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  000bd	2b 45 f8	 sub	 eax, DWORD PTR __Mid$1[ebp+4]
  000c0	99		 cdq
  000c1	be 94 00 00 00	 mov	 esi, 148		; 00000094H
  000c6	f7 fe		 idiv	 esi
  000c8	3b c8		 cmp	 ecx, eax
  000ca	7d 1c		 jge	 SHORT $LN7@Sort_unche

; 7557 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  000cc	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000cf	ff 75 10	 push	 DWORD PTR __Ideal$[ebp]
  000d2	ff 75 f4	 push	 DWORD PTR __Mid$1[ebp]
  000d5	ff 75 08	 push	 DWORD PTR __First$[ebp]
  000d8	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  000dd	83 c4 10	 add	 esp, 16			; 00000010H

; 7558 :             _First = _Mid.second;

  000e0	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  000e3	89 45 08	 mov	 DWORD PTR __First$[ebp], eax

; 7559 :         } else { // loop on first half

  000e6	eb 1a		 jmp	 SHORT $LN8@Sort_unche
$LN7@Sort_unche:

; 7560 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  000e8	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000eb	ff 75 10	 push	 DWORD PTR __Ideal$[ebp]
  000ee	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  000f1	ff 75 f8	 push	 DWORD PTR __Mid$1[ebp+4]
  000f4	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  000f9	83 c4 10	 add	 esp, 16			; 00000010H

; 7561 :             _Last = _Mid.first;

  000fc	8b 45 f4	 mov	 eax, DWORD PTR __Mid$1[ebp]
  000ff	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
$LN8@Sort_unche:

; 7562 :         }
; 7563 :     }

  00102	e9 00 ff ff ff	 jmp	 $LN4@Sort_unche
$LN1@Sort_unche:

; 7564 : }

  00107	5e		 pop	 esi
  00108	c9		 leave
  00109	c3		 ret	 0
??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ENDP ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAPAPAVCFlyTrace@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__UFirst$ = -8						; size = 4
__ULast$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAPAPAVCFlyTrace@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z PROC ; std::_Uninitialized_move<CFlyTrace * *,std::allocator<CFlyTrace *> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR __ULast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00018	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  0001b	ff 75 fc	 push	 DWORD PTR __ULast$[ebp]
  0001e	ff 75 f8	 push	 DWORD PTR __UFirst$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCFlyTrace@@PAPAV1@@std@@YAPAPAVCFlyTrace@@PAPAV1@00@Z ; std::_Copy_memmove<CFlyTrace * *,CFlyTrace * *>
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1694 :         return _Dest + (_ULast - _UFirst);

  00029	8b 45 fc	 mov	 eax, DWORD PTR __ULast$[ebp]
  0002c	2b 45 f8	 sub	 eax, DWORD PTR __UFirst$[ebp]
  0002f	c1 f8 02	 sar	 eax, 2
  00032	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00035	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1699 :         }
; 1700 : 
; 1701 :         return _Backout._Release();
; 1702 :     }
; 1703 : }

  00038	c9		 leave
  00039	c3		 ret	 0
??$_Uninitialized_move@PAPAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAPAPAVCFlyTrace@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z ENDP ; std::_Uninitialized_move<CFlyTrace * *,std::allocator<CFlyTrace *> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAU?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0PAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z
_TEXT	SEGMENT
__Backout$1 = -52					; size = 12
___formal$ = -40					; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
__Ptr$ = -16						; size = 4
$T7 = -12						; size = 4
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAU?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0PAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> > >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

  00008	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000b	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00014	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00017	89 45 cc	 mov	 DWORD PTR __Backout$1[ebp], eax
  0001a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001d	89 45 d0	 mov	 DWORD PTR __Backout$1[ebp+4], eax
  00020	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00023	89 45 d4	 mov	 DWORD PTR __Backout$1[ebp+8], eax

; 1691 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1692 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1694 :         return _Dest + (_ULast - _UFirst);
; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {

  00026	eb 0b		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00028	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0002b	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00030	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
  00033	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00036	3b 45 f8	 cmp	 eax, DWORD PTR __ULast$[ebp]
  00039	74 42		 je	 SHORT $LN3@Uninitiali
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0003e	89 45 f4	 mov	 DWORD PTR $T7[ebp], eax

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00041	8b 45 f4	 mov	 eax, DWORD PTR $T7[ebp]
  00044	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00047	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  0004a	89 45 f0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0004d	8b 45 f0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00050	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00053	8b 45 d4	 mov	 eax, DWORD PTR __Backout$1[ebp+8]
  00056	89 45 d8	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00059	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp]
  0005c	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0005f	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  00062	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00065	6a 25		 push	 37			; 00000025H
  00067	59		 pop	 ecx
  00068	8b 75 e4	 mov	 esi, DWORD PTR $T4[ebp]
  0006b	8b 7d e0	 mov	 edi, DWORD PTR $T3[ebp]
  0006e	f3 a5		 rep movsd

; 1547 :         ++_Last;

  00070	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00073	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00078	89 45 d0	 mov	 DWORD PTR __Backout$1[ebp+4], eax

; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1699 :         }

  0007b	eb ab		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1551 :         _First = _Last;

  0007d	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00080	89 45 cc	 mov	 DWORD PTR __Backout$1[ebp], eax

; 1552 :         return _Last;

  00083	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00086	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax

; 1541 :         _Destroy_range(_First, _Last, _Al);

  00089	ff 75 d4	 push	 DWORD PTR __Backout$1[ebp+8]
  0008c	ff 75 d0	 push	 DWORD PTR __Backout$1[ebp+4]
  0008f	ff 75 cc	 push	 DWORD PTR __Backout$1[ebp]
  00092	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@QAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<float,TFlyVertexSet> > >
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1700 : 
; 1701 :         return _Backout._Release();

  0009a	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]

; 1702 :     }
; 1703 : }

  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	c9		 leave
  000a0	c3		 ret	 0
??$_Uninitialized_move@PAU?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0PAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z
_TEXT	SEGMENT
__Last_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z PROC ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 1852 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 1853 :     char* const _First_ch = reinterpret_cast<char*>(_First);

  00005	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00008	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 1854 :     char* const _Last_ch  = reinterpret_cast<char*>(_Last);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000e	89 45 f8	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 1855 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00011	8b 45 f8	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  00014	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  00017	50		 push	 eax
  00018	6a 00		 push	 0
  0001a	ff 75 fc	 push	 DWORD PTR __First_ch$[ebp]
  0001d	e8 00 00 00 00	 call	 _memset
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1856 :     return _Last;

  00025	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 1857 : }

  00028	c9		 leave
  00029	c3		 ret	 0
??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ENDP ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z
_TEXT	SEGMENT
__Last_ch$ = -16					; size = 4
__Count$ = -12						; size = 4
__Dest_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z PROC ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 4360 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 4361 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 4362 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 f0	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 4363 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f8	 mov	 DWORD PTR __Dest_ch$[ebp], eax

; 4364 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00018	8b 45 f0	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0001b	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0001e	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax

; 4365 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00021	ff 75 f4	 push	 DWORD PTR __Count$[ebp]
  00024	ff 75 fc	 push	 DWORD PTR __First_ch$[ebp]
  00027	ff 75 f8	 push	 DWORD PTR __Dest_ch$[ebp]
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4366 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00035	03 45 f4	 add	 eax, DWORD PTR __Count$[ebp]

; 4367 : }

  00038	c9		 leave
  00039	c3		 ret	 0
??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ENDP ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
__Mycont_$ = -16					; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0000c	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00018	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	89 45 f0	 mov	 DWORD PTR __Mycont_$[ebp], eax

; 1089 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

  00020	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  00023	8b 4d f0	 mov	 ecx, DWORD PTR __Mycont_$[ebp]
  00026	89 08		 mov	 DWORD PTR [eax], ecx
  00028	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0002b	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0002f	c9		 leave
  00030	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1003 : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	33 c0		 xor	 eax, eax
  00005	40		 inc	 eax
  00006	c1 e0 03	 shl	 eax, 3
  00009	50		 push	 eax
  0000a	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00012	59		 pop	 ecx
  00013	59		 pop	 ecx

; 1004 :     // deallocate a plain pointer using an allocator
; 1005 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1006 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1007 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);
; 1008 :     } else {
; 1009 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1010 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1011 :     }
; 1012 : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAXPAPAVCFlyTrace@@QAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAXPAPAVCFlyTrace@@QAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CFlyTrace *> >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAXPAPAVCFlyTrace@@QAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CFlyTrace *> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@QAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@QAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::pair<float,TFlyVertexSet> > >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@QAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::pair<float,TFlyVertexSet> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Destroy_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@@Z PROC ; std::_Destroy_range<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 974  : /* _CONSTEXPR20_DYNALLOC */ void _Destroy_range(_NoThrowFwdIt _First, const _NoThrowSentinel _Last) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 975  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 976  :     if _CONSTEXPR_IF (!is_trivially_destructible_v<_Iter_value_t<_NoThrowFwdIt>>) {
; 977  :         for (; _First != _Last; ++_First) {
; 978  :             _Destroy_in_place(*_First);
; 979  :         }
; 980  :     }
; 981  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@@Z ENDP ; std::_Destroy_range<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>, COMDAT

; 1912 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1913 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1914 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1915 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1916 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	50		 push	 eax
  0000d	ff 75 08	 push	 DWORD PTR __UFirst$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0@Z ; std::_Zero_range<std::pair<float,D3DXVECTOR3> * *>
  00015	59		 pop	 ecx
  00016	59		 pop	 ecx

; 1917 :     } else {
; 1918 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1919 :         for (; 0 < _Count; --_Count) {
; 1920 :             _Backout._Emplace_back();
; 1921 :         }
; 1922 : 
; 1923 :         return _Backout._Release();
; 1924 :     }
; 1925 : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
__UFirst$ = -12						; size = 4
__ULast$ = -8						; size = 4
__UDest$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z PROC ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>, COMDAT

; 1629 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1630 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1631 :     _Adl_verify_range(_First, _Last);
; 1632 :     auto _UFirst      = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f4	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1633 :     const auto _ULast = _Get_unwrapped(_Last);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1557 :         return static_cast<_Iter_diff_t<_Checked>>(_Last - _First);

  00012	8b 45 f8	 mov	 eax, DWORD PTR __ULast$[ebp]
  00015	2b 45 f4	 sub	 eax, DWORD PTR __UFirst$[ebp]
  00018	c1 f8 02	 sar	 eax, 2
  0001b	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1634 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	89 45 fc	 mov	 DWORD PTR __UDest$[ebp], eax

; 1635 :     if constexpr (_Ptr_copy_cat<decltype(_UFirst), decltype(_UDest)>::_Really_trivial) {
; 1636 :         _UDest = _Copy_memmove(_UFirst, _ULast, _UDest);

  00024	ff 75 fc	 push	 DWORD PTR __UDest$[ebp]
  00027	ff 75 f8	 push	 DWORD PTR __ULast$[ebp]
  0002a	ff 75 f4	 push	 DWORD PTR __UFirst$[ebp]
  0002d	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@00@Z ; std::_Copy_memmove<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	89 45 fc	 mov	 DWORD PTR __UDest$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1492 :         _It = static_cast<_UIter&&>(_UIt);

  00038	8b 45 fc	 mov	 eax, DWORD PTR __UDest$[ebp]
  0003b	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1647 :     return _Dest;

  0003e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1648 : }

  00041	c9		 leave
  00042	c3		 ret	 0
??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ENDP ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAXAAPAU?$pair@MUD3DXVECTOR3@@@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAXAAPAU?$pair@MUD3DXVECTOR3@@@0@@Z PROC ; std::_Destroy_in_place<std::pair<float,D3DXVECTOR3> *>, COMDAT

; 270  : /* _CONSTEXPR20_DYNALLOC */ void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAXAAPAU?$pair@MUD3DXVECTOR3@@@0@@Z ENDP ; std::_Destroy_in_place<std::pair<float,D3DXVECTOR3> *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Max_possible$2 = -68					; size = 4
$T3 = -64						; size = 4
__Al$ = -60						; size = 4
__Last$ = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
__First$ = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T8 = -24						; size = 4
$T9 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T10 = 0						; size = 4
$T11 = 4						; size = 4
$T12 = 8						; size = 4
$T13 = 12						; size = 4
$T14 = 16						; size = 4
$T15 = 20						; size = 4
$T16 = 24						; size = 4
$T17 = 28						; size = 4
$T18 = 32						; size = 4
$T19 = 36						; size = 4
$T20 = 40						; size = 4
__Newsize$ = 44						; size = 4
__Constructed_last$ = 48				; size = 4
__Oldsize$ = 52						; size = 4
tv172 = 56						; size = 4
$T21 = 60						; size = 4
$T22 = 64						; size = 4
__My_data$ = 68						; size = 4
__Constructed_first$ = 72				; size = 4
___formal$ = 76						; size = 1
__Overflow_is_possible$23 = 83				; size = 1
__Newcapacity$ = 84					; size = 4
__Mylast$ = 88						; size = 4
__Myfirst$ = 92						; size = 4
__Whereoff$ = 96					; size = 4
$T24 = 103						; size = 1
_this$ = 104						; size = 4
__Newvec$ = 108						; size = 4
__Whereptr$ = 120					; size = 4
_<_Val_0>$ = 124					; size = 4
??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	83 ec 70	 sub	 esp, 112		; 00000070H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	83 ec 34	 sub	 esp, 52			; 00000034H
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d 68	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00037	89 45 28	 mov	 DWORD PTR $T20[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0003a	8b 45 28	 mov	 eax, DWORD PTR $T20[ebp]
  0003d	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;

  00040	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
  00043	89 45 44	 mov	 DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

  00046	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  00049	89 45 5c	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

  0004c	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004f	83 c0 04	 add	 eax, 4
  00052	89 45 58	 mov	 DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00055	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00058	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0005b	2b 08		 sub	 ecx, DWORD PTR [eax]
  0005d	c1 f9 02	 sar	 ecx, 2
  00060	89 4d 60	 mov	 DWORD PTR __Whereoff$[ebp], ecx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00063	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00066	8b 4d 5c	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00069	8b 00		 mov	 eax, DWORD PTR [eax]
  0006b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0006d	c1 f8 02	 sar	 eax, 2
  00070	89 45 34	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00073	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00076	89 45 24	 mov	 DWORD PTR $T19[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00079	8b 45 24	 mov	 eax, DWORD PTR $T19[ebp]
  0007c	89 45 c0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0007f	c7 45 40 ff ff
	ff 3f		 mov	 DWORD PTR $T22[ebp], 1073741823 ; 3fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00086	c7 45 20 ff ff
	ff 7f		 mov	 DWORD PTR $T18[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0008d	8b 45 20	 mov	 eax, DWORD PTR $T18[ebp]
  00090	89 45 3c	 mov	 DWORD PTR $T21[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00093	8b 45 40	 mov	 eax, DWORD PTR $T22[ebp]
  00096	3b 45 3c	 cmp	 eax, DWORD PTR $T21[ebp]
  00099	73 08		 jae	 SHORT $LN34@Emplace_re
  0009b	8d 45 40	 lea	 eax, DWORD PTR $T22[ebp]
  0009e	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
  000a1	eb 06		 jmp	 SHORT $LN35@Emplace_re
$LN34@Emplace_re:
  000a3	8d 45 3c	 lea	 eax, DWORD PTR $T21[ebp]
  000a6	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
$LN35@Emplace_re:
  000a9	8b 45 38	 mov	 eax, DWORD PTR tv172[ebp]
  000ac	89 45 1c	 mov	 DWORD PTR $T17[ebp], eax
  000af	8b 45 1c	 mov	 eax, DWORD PTR $T17[ebp]
  000b2	89 45 18	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  000b5	8b 45 18	 mov	 eax, DWORD PTR $T16[ebp]
  000b8	8b 00		 mov	 eax, DWORD PTR [eax]
  000ba	89 45 14	 mov	 DWORD PTR $T15[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  000bd	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000c0	3b 45 14	 cmp	 eax, DWORD PTR $T15[ebp]
  000c3	75 05		 jne	 SHORT $LN2@Emplace_re

; 738  :             _Xlength();

  000c5	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  000ca	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000cd	40		 inc	 eax
  000ce	89 45 2c	 mov	 DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000d1	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  000d4	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@ABEII@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Calculate_growth
  000dc	89 45 54	 mov	 DWORD PTR __Newcapacity$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000df	c6 45 53 01	 mov	 BYTE PTR __Overflow_is_possible$23[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000e3	c7 45 bc ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$2[ebp], 1073741823 ; 3fffffffH

; 60   :         if (_Count > _Max_possible) {

  000ea	81 7d 54 ff ff
	ff 3f		 cmp	 DWORD PTR __Newcapacity$[ebp], 1073741823 ; 3fffffffH
  000f1	76 05		 jbe	 SHORT $LN67@Emplace_re

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000f3	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN67@Emplace_re:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000f8	8b 45 54	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  000fb	c1 e0 02	 shl	 eax, 2
  000fe	89 45 10	 mov	 DWORD PTR $T14[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00101	ff 75 10	 push	 DWORD PTR $T14[ebp]
  00104	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00109	59		 pop	 ecx
  0010a	89 45 6c	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  0010d	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  00110	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00113	8d 44 81 04	 lea	 eax, DWORD PTR [ecx+eax*4+4]
  00117	89 45 30	 mov	 DWORD PTR __Constructed_last$[ebp], eax

; 746  :         pointer _Constructed_first      = _Constructed_last;

  0011a	8b 45 30	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  0011d	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

  00120	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00124	8b 45 7c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00127	89 45 08	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0012a	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  0012d	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00130	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00133	89 45 0c	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00136	8b 45 0c	 mov	 eax, DWORD PTR $T13[ebp]
  00139	89 45 04	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0013c	8b 45 08	 mov	 eax, DWORD PTR $T12[ebp]
  0013f	89 45 00	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00142	8b 45 04	 mov	 eax, DWORD PTR $T11[ebp]
  00145	8b 4d 00	 mov	 ecx, DWORD PTR $T10[ebp]
  00148	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0014a	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 750  :         _Constructed_first = _Newvec + _Whereoff;

  0014c	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  0014f	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00152	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00155	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00158	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0015b	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0015e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00160	75 3d		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00162	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00165	8b 00		 mov	 eax, DWORD PTR [eax]
  00167	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  0016a	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0016d	8b 00		 mov	 eax, DWORD PTR [eax]
  0016f	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00172	33 c0		 xor	 eax, eax
  00174	88 45 67	 mov	 BYTE PTR $T24[ebp], al
  00177	8a 45 67	 mov	 al, BYTE PTR $T24[ebp]
  0017a	88 45 4c	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  0017d	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00180	89 45 ec	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00183	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp]
  00186	89 45 e8	 mov	 DWORD PTR $T8[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00189	ff 75 e8	 push	 DWORD PTR $T8[ebp]
  0018c	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  0018f	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  00192	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  00195	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAPAPAVCFlyTrace@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z ; std::_Uninitialized_move<CFlyTrace * *,std::allocator<CFlyTrace *> >
  0019a	83 c4 10	 add	 esp, 16			; 00000010H

; 754  :         } else { // provide basic guarantee

  0019d	eb 5e		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  0019f	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  001a2	8b 00		 mov	 eax, DWORD PTR [eax]
  001a4	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001a7	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001aa	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001ad	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  001b0	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001b3	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  001b6	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  001b9	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001bc	ff 75 d4	 push	 DWORD PTR __First$[ebp]
  001bf	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAPAPAVCFlyTrace@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z ; std::_Uninitialized_move<CFlyTrace * *,std::allocator<CFlyTrace *> >
  001c4	83 c4 10	 add	 esp, 16			; 00000010H

; 756  :             _Constructed_first = _Newvec;

  001c7	8b 45 6c	 mov	 eax, DWORD PTR __Newvec$[ebp]
  001ca	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001cd	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  001d0	8b 00		 mov	 eax, DWORD PTR [eax]
  001d2	89 45 c8	 mov	 DWORD PTR __Last$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001d5	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001d8	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001db	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  001de	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001e1	ff 75 cc	 push	 DWORD PTR $T4[ebp]

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001e4	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  001e7	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001ea	8d 44 81 04	 lea	 eax, DWORD PTR [ecx+eax*4+4]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001ee	50		 push	 eax
  001ef	ff 75 c8	 push	 DWORD PTR __Last$[ebp]
  001f2	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001f5	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAPAPAVCFlyTrace@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z ; std::_Uninitialized_move<CFlyTrace * *,std::allocator<CFlyTrace *> >
  001fa	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Emplace_re:

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001fd	eb 2b		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  001ff	ff 75 30	 push	 DWORD PTR __Constructed_last$[ebp]
  00202	ff 75 48	 push	 DWORD PTR __Constructed_first$[ebp]
  00205	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  00208	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXPAPAVCFlyTrace@@0@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  0020d	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  00210	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00213	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00216	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCFlyTrace@@@std@@QAEXQAPAVCFlyTrace@@I@Z ; std::allocator<CFlyTrace *>::deallocate

; 762  :         _RERAISE;

  0021b	6a 00		 push	 0
  0021d	6a 00		 push	 0
  0021f	e8 00 00 00 00	 call	 __CxxThrowException@8

; 763  :         _CATCH_END

  00224	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  00229	c3		 ret	 0
$LN7@Emplace_re:
  0022a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0022e	eb 04		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z$1
$LN10@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  00230	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00234	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  00237	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  0023a	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  0023d	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  00240	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXQAPAVCFlyTrace@@II@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  00245	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  00248	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0024b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
$LN70@Emplace_re:

; 767  :     }

  0024e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00251	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00258	59		 pop	 ecx
  00259	5f		 pop	 edi
  0025a	5e		 pop	 esi
  0025b	5b		 pop	 ebx
  0025c	83 c5 70	 add	 ebp, 112		; 00000070H
  0025f	c9		 leave
  00260	c2 08 00	 ret	 8
  00263	cc		 int	 3
  00264	cc		 int	 3
  00265	cc		 int	 3
  00266	cc		 int	 3
  00267	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXABQAVCFlyTrace@@@Z
_TEXT	SEGMENT
__Result$ = -44						; size = 4
$T1 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
__Ptr$ = -16						; size = 4
__My_data$ = -12					; size = 4
_this$ = -8						; size = 4
__Mylast$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXABQAVCFlyTrace@@@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_back_with_unused_capacity<CFlyTrace * const &>, COMDAT
; _this$ = ecx

; 682  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 683  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 684  :         auto& _My_data   = _Mypair._Myval2;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR __My_data$[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

  0000f	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	83 c0 04	 add	 eax, 4
  00015	89 45 fc	 mov	 DWORD PTR __Mylast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00018	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0001b	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	89 45 f0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00026	8b 45 f0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00029	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0002f	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00032	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp]
  00035	89 45 d8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00038	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0003b	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003e	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  00041	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00044	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  00047	8b 4d dc	 mov	 ecx, DWORD PTR $T2[ebp]
  0004a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004c	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 689  :         _Ty& _Result = *_Mylast;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00051	8b 00		 mov	 eax, DWORD PTR [eax]
  00053	89 45 d4	 mov	 DWORD PTR __Result$[ebp], eax

; 690  :         ++_Mylast;

  00056	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00059	8b 00		 mov	 eax, DWORD PTR [eax]
  0005b	83 c0 04	 add	 eax, 4
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00061	89 01		 mov	 DWORD PTR [ecx], eax

; 691  : #if _HAS_CXX17
; 692  :         return _Result;
; 693  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 694  :         (void) _Result;
; 695  : #endif // _HAS_CXX17
; 696  :     }

  00063	c9		 leave
  00064	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXABQAVCFlyTrace@@@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_back_with_unused_capacity<CFlyTrace * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$emplace_back@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z
_TEXT	SEGMENT
__Result$ = -24						; size = 4
$T1 = -20						; size = 4
$T2 = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::emplace_back<CFlyTrace * const &>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	83 c0 04	 add	 eax, 4
  00015	89 45 f4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

  00018	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00023	74 13		 je	 SHORT $LN2@emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00025	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00028	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0002b	ff 75 f0	 push	 DWORD PTR $T2[ebp]
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXABQAVCFlyTrace@@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_back_with_unused_capacity<CFlyTrace * const &>
  00036	eb 19		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00038	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0003b	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0003e	ff 75 ec	 push	 DWORD PTR $T1[ebp]
  00041	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00044	ff 30		 push	 DWORD PTR [eax]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEPAPAVCFlyTrace@@QAPAV2@ABQAV2@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Emplace_reallocate<CFlyTrace * const &>
  0004e	89 45 e8	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  00051	c9		 leave
  00052	c2 04 00	 ret	 4
??$emplace_back@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::emplace_back<CFlyTrace * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
__Max_possible$1 = -28					; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
_this$ = -12						; size = 4
__New_proxy$ = -8					; size = 4
__Overflow_is_possible$5 = -1				; size = 1
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1106 :     void _Alloc_proxy(_Alloc&& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00009	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$5[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0000d	c7 45 e4 ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 60   :         if (_Count > _Max_possible) {

  00014	33 c0		 xor	 eax, eax
  00016	40		 inc	 eax
  00017	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0001c	76 05		 jbe	 SHORT $LN6@Alloc_prox

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0001e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN6@Alloc_prox:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00023	33 c0		 xor	 eax, eax
  00025	40		 inc	 eax
  00026	c1 e0 03	 shl	 eax, 3
  00029	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0002c	ff 75 f0	 push	 DWORD PTR $T4[ebp]
  0002f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00034	59		 pop	 ecx
  00035	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00038	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  0003b	89 45 f8	 mov	 DWORD PTR __New_proxy$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1108 :         _Construct_in_place(*_New_proxy, this);

  0003e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00041	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00044	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]
  00047	50		 push	 eax
  00048	ff 75 f8	 push	 DWORD PTR __New_proxy$[ebp]
  0004b	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00050	59		 pop	 ecx
  00051	59		 pop	 ecx

; 1109 :         _Myproxy            = _New_proxy;

  00052	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR __New_proxy$[ebp]
  00058	89 08		 mov	 DWORD PTR [eax], ecx

; 1110 :         _New_proxy->_Mycont = this;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR __New_proxy$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@Alloc_prox:

; 1111 :     }

  00062	c9		 leave
  00063	c2 04 00	 ret	 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1031 : void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1032 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1033 :     using _Ty = typename _Alloc::value_type;
; 1034 :     _Ptr->~_Ty();
; 1035 :     _Deallocate_plain(_Al, _Ptr);

  00003	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Al$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 1036 : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ
_TEXT	SEGMENT
__Block$ = -20						; size = 4
__Off$ = -16						; size = 4
__Off$ = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*, COMDAT
; _this$ = ecx

; 54   :     _NODISCARD reference operator*() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	89 45 f4	 mov	 DWORD PTR __Off$[ebp], eax
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 00		 mov	 eax, DWORD PTR [eax]
  00017	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 548  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00020	48		 dec	 eax
  00021	23 45 f4	 and	 eax, DWORD PTR __Off$[ebp]
  00024	89 45 ec	 mov	 DWORD PTR __Block$[ebp], eax

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002d	33 d2		 xor	 edx, edx
  0002f	33 c9		 xor	 ecx, ecx
  00031	41		 inc	 ecx
  00032	f7 f1		 div	 ecx
  00034	89 55 f0	 mov	 DWORD PTR __Off$[ebp], edx

; 57   :         return _Mycont->_Map[_Block][_Off];

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR __Off$[ebp]
  00042	c1 e1 04	 shl	 ecx, 4
  00045	8b 55 ec	 mov	 edx, DWORD PTR __Block$[ebp]
  00048	03 0c 90	 add	 ecx, DWORD PTR [eax+edx*4]
  0004b	8b c1		 mov	 eax, ecx

; 58   :     }

  0004d	c9		 leave
  0004e	c3		 ret	 0
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@P6AXPAVCFlyTrace@@@Z@std@@YAP6AXPAVCFlyTrace@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@1P6AX0@Z@Z
_TEXT	SEGMENT
__ULast$ = -32						; size = 4
$T1 = -28						; size = 4
$T2 = -24						; size = 4
__Ptr$3 = -20						; size = 4
$T4 = -16						; size = 4
$T5 = -12						; size = 4
__Ptr$6 = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Func$ = 16						; size = 4
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@P6AXPAVCFlyTrace@@@Z@std@@YAP6AXPAVCFlyTrace@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@1P6AX0@Z@Z PROC ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >,void (__cdecl*)(CFlyTrace *)>, COMDAT

; 303  : _CONSTEXPR20 _Fn for_each(_InIt _First, _InIt _Last, _Fn _Func) { // perform function for each element [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR __Ptr$6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0000c	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$6[ebp]
  0000f	89 45 f4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  00012	8b 45 f4	 mov	 eax, DWORD PTR $T5[ebp]
  00015	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 305  :     auto _UFirst      = _Get_unwrapped(_First);

  00018	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]
  0001b	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  0001e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00021	89 45 ec	 mov	 DWORD PTR __Ptr$3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00024	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$3[ebp]
  00027	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  0002a	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  0002d	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 306  :     const auto _ULast = _Get_unwrapped(_Last);

  00030	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  00033	89 45 e0	 mov	 DWORD PTR __ULast$[ebp], eax

; 307  :     for (; _UFirst != _ULast; ++_UFirst) {

  00036	eb 09		 jmp	 SHORT $LN4@for_each
$LN2@for_each:
  00038	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0003b	83 c0 04	 add	 eax, 4
  0003e	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@for_each:
  00041	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00044	3b 45 e0	 cmp	 eax, DWORD PTR __ULast$[ebp]
  00047	74 0b		 je	 SHORT $LN3@for_each

; 308  :         _Func(*_UFirst);

  00049	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0004c	ff 30		 push	 DWORD PTR [eax]
  0004e	ff 55 10	 call	 DWORD PTR __Func$[ebp]
  00051	59		 pop	 ecx

; 309  :     }

  00052	eb e4		 jmp	 SHORT $LN2@for_each
$LN3@for_each:

; 310  : 
; 311  :     return _Func;

  00054	8b 45 10	 mov	 eax, DWORD PTR __Func$[ebp]

; 312  : }

  00057	c9		 leave
  00058	c3		 ret	 0
??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@P6AXPAVCFlyTrace@@@Z@std@@YAP6AXPAVCFlyTrace@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@1P6AX0@Z@Z ENDP ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >,void (__cdecl*)(CFlyTrace *)>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z
_TEXT	SEGMENT
__Max_possible$2 = -68					; size = 4
$T3 = -64						; size = 4
__Al$ = -60						; size = 4
__Last$ = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
__First$ = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T8 = -24						; size = 4
$T9 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T10 = 0						; size = 4
$T11 = 4						; size = 4
$T12 = 8						; size = 4
$T13 = 12						; size = 4
$T14 = 16						; size = 4
$T15 = 20						; size = 4
$T16 = 24						; size = 4
$T17 = 28						; size = 4
$T18 = 32						; size = 4
$T19 = 36						; size = 4
$T20 = 40						; size = 4
__Newsize$ = 44						; size = 4
__Constructed_last$ = 48				; size = 4
__Oldsize$ = 52						; size = 4
tv172 = 56						; size = 4
$T21 = 60						; size = 4
$T22 = 64						; size = 4
__My_data$ = 68						; size = 4
__Constructed_first$ = 72				; size = 4
___formal$ = 76						; size = 1
__Overflow_is_possible$23 = 83				; size = 1
__Newcapacity$ = 84					; size = 4
__Mylast$ = 88						; size = 4
__Myfirst$ = 92						; size = 4
__Whereoff$ = 96					; size = 4
$T24 = 103						; size = 1
_this$ = 104						; size = 4
__Newvec$ = 108						; size = 4
__Whereptr$ = 120					; size = 4
_<_Val_0>$ = 124					; size = 4
??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	83 ec 70	 sub	 esp, 112		; 00000070H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	83 ec 34	 sub	 esp, 52			; 00000034H
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d 68	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00037	89 45 28	 mov	 DWORD PTR $T20[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0003a	8b 45 28	 mov	 eax, DWORD PTR $T20[ebp]
  0003d	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;

  00040	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
  00043	89 45 44	 mov	 DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

  00046	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  00049	89 45 5c	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

  0004c	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004f	83 c0 04	 add	 eax, 4
  00052	89 45 58	 mov	 DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00055	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00058	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0005b	2b 08		 sub	 ecx, DWORD PTR [eax]
  0005d	8b c1		 mov	 eax, ecx
  0005f	99		 cdq
  00060	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00065	f7 f9		 idiv	 ecx
  00067	89 45 60	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0006a	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006d	8b 4d 5c	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	2b 01		 sub	 eax, DWORD PTR [ecx]
  00074	99		 cdq
  00075	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  0007a	f7 f9		 idiv	 ecx
  0007c	89 45 34	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  0007f	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00082	89 45 24	 mov	 DWORD PTR $T19[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00085	8b 45 24	 mov	 eax, DWORD PTR $T19[ebp]
  00088	89 45 c0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0008b	c7 45 40 91 cf
	ba 01		 mov	 DWORD PTR $T22[ebp], 29020049 ; 01bacf91H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00092	c7 45 20 ff ff
	ff 7f		 mov	 DWORD PTR $T18[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00099	8b 45 20	 mov	 eax, DWORD PTR $T18[ebp]
  0009c	89 45 3c	 mov	 DWORD PTR $T21[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0009f	8b 45 40	 mov	 eax, DWORD PTR $T22[ebp]
  000a2	3b 45 3c	 cmp	 eax, DWORD PTR $T21[ebp]
  000a5	73 08		 jae	 SHORT $LN34@Emplace_re
  000a7	8d 45 40	 lea	 eax, DWORD PTR $T22[ebp]
  000aa	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
  000ad	eb 06		 jmp	 SHORT $LN35@Emplace_re
$LN34@Emplace_re:
  000af	8d 45 3c	 lea	 eax, DWORD PTR $T21[ebp]
  000b2	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
$LN35@Emplace_re:
  000b5	8b 45 38	 mov	 eax, DWORD PTR tv172[ebp]
  000b8	89 45 1c	 mov	 DWORD PTR $T17[ebp], eax
  000bb	8b 45 1c	 mov	 eax, DWORD PTR $T17[ebp]
  000be	89 45 18	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  000c1	8b 45 18	 mov	 eax, DWORD PTR $T16[ebp]
  000c4	8b 00		 mov	 eax, DWORD PTR [eax]
  000c6	89 45 14	 mov	 DWORD PTR $T15[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  000c9	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000cc	3b 45 14	 cmp	 eax, DWORD PTR $T15[ebp]
  000cf	75 05		 jne	 SHORT $LN2@Emplace_re

; 738  :             _Xlength();

  000d1	e8 00 00 00 00	 call	 ?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  000d6	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000d9	40		 inc	 eax
  000da	89 45 2c	 mov	 DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000dd	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  000e0	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  000e3	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@ABEII@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Calculate_growth
  000e8	89 45 54	 mov	 DWORD PTR __Newcapacity$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000eb	c6 45 53 01	 mov	 BYTE PTR __Overflow_is_possible$23[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000ef	c7 45 bc 91 cf
	ba 01		 mov	 DWORD PTR __Max_possible$2[ebp], 29020049 ; 01bacf91H

; 60   :         if (_Count > _Max_possible) {

  000f6	81 7d 54 91 cf
	ba 01		 cmp	 DWORD PTR __Newcapacity$[ebp], 29020049 ; 01bacf91H
  000fd	76 05		 jbe	 SHORT $LN67@Emplace_re

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ff	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN67@Emplace_re:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00104	69 45 54 94 00
	00 00		 imul	 eax, DWORD PTR __Newcapacity$[ebp], 148
  0010b	89 45 10	 mov	 DWORD PTR $T14[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0010e	ff 75 10	 push	 DWORD PTR $T14[ebp]
  00111	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00116	59		 pop	 ecx
  00117	89 45 6c	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  0011a	69 45 60 94 00
	00 00		 imul	 eax, DWORD PTR __Whereoff$[ebp], 148
  00121	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00124	8d 84 01 94 00
	00 00		 lea	 eax, DWORD PTR [ecx+eax+148]
  0012b	89 45 30	 mov	 DWORD PTR __Constructed_last$[ebp], eax

; 746  :         pointer _Constructed_first      = _Constructed_last;

  0012e	8b 45 30	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00131	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

  00134	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00138	8b 45 7c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0013b	89 45 08	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0013e	69 45 60 94 00
	00 00		 imul	 eax, DWORD PTR __Whereoff$[ebp], 148
  00145	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00148	89 45 0c	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0014b	8b 45 0c	 mov	 eax, DWORD PTR $T13[ebp]
  0014e	89 45 00	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00151	8b 45 08	 mov	 eax, DWORD PTR $T12[ebp]
  00154	89 45 04	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00157	6a 25		 push	 37			; 00000025H
  00159	59		 pop	 ecx
  0015a	8b 75 04	 mov	 esi, DWORD PTR $T11[ebp]
  0015d	8b 7d 00	 mov	 edi, DWORD PTR $T10[ebp]
  00160	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 750  :         _Constructed_first = _Newvec + _Whereoff;

  00162	69 45 60 94 00
	00 00		 imul	 eax, DWORD PTR __Whereoff$[ebp], 148
  00169	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
  0016c	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0016f	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00172	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00175	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00177	75 3d		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00179	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0017c	8b 00		 mov	 eax, DWORD PTR [eax]
  0017e	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  00181	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00184	8b 00		 mov	 eax, DWORD PTR [eax]
  00186	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00189	33 c0		 xor	 eax, eax
  0018b	88 45 67	 mov	 BYTE PTR $T24[ebp], al
  0018e	8a 45 67	 mov	 al, BYTE PTR $T24[ebp]
  00191	88 45 4c	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  00194	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00197	89 45 ec	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0019a	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp]
  0019d	89 45 e8	 mov	 DWORD PTR $T8[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001a0	ff 75 e8	 push	 DWORD PTR $T8[ebp]
  001a3	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  001a6	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  001a9	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  001ac	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAU?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0PAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z ; std::_Uninitialized_move<std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> > >
  001b1	83 c4 10	 add	 esp, 16			; 00000010H

; 754  :         } else { // provide basic guarantee

  001b4	eb 65		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  001b6	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  001b9	8b 00		 mov	 eax, DWORD PTR [eax]
  001bb	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001be	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001c1	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001c4	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  001c7	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001ca	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  001cd	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  001d0	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001d3	ff 75 d4	 push	 DWORD PTR __First$[ebp]
  001d6	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAU?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0PAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z ; std::_Uninitialized_move<std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> > >
  001db	83 c4 10	 add	 esp, 16			; 00000010H

; 756  :             _Constructed_first = _Newvec;

  001de	8b 45 6c	 mov	 eax, DWORD PTR __Newvec$[ebp]
  001e1	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001e4	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  001e7	8b 00		 mov	 eax, DWORD PTR [eax]
  001e9	89 45 c8	 mov	 DWORD PTR __Last$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001ec	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001ef	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001f2	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  001f5	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001f8	ff 75 cc	 push	 DWORD PTR $T4[ebp]

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001fb	69 45 60 94 00
	00 00		 imul	 eax, DWORD PTR __Whereoff$[ebp], 148
  00202	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00205	8d 84 01 94 00
	00 00		 lea	 eax, DWORD PTR [ecx+eax+148]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0020c	50		 push	 eax
  0020d	ff 75 c8	 push	 DWORD PTR __Last$[ebp]
  00210	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  00213	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAU?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@QAU10@0PAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z ; std::_Uninitialized_move<std::pair<float,TFlyVertexSet> *,std::allocator<std::pair<float,TFlyVertexSet> > >
  00218	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Emplace_re:

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  0021b	eb 2b		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  0021d	ff 75 30	 push	 DWORD PTR __Constructed_last$[ebp]
  00220	ff 75 48	 push	 DWORD PTR __Constructed_first$[ebp]
  00223	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  00226	e8 00 00 00 00	 call	 ?_Destroy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  0022b	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  0022e	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00231	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00234	e8 00 00 00 00	 call	 ?deallocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXQAU?$pair@MUTFlyVertexSet@@@2@I@Z ; std::allocator<std::pair<float,TFlyVertexSet> >::deallocate

; 762  :         _RERAISE;

  00239	6a 00		 push	 0
  0023b	6a 00		 push	 0
  0023d	e8 00 00 00 00	 call	 __CxxThrowException@8

; 763  :         _CATCH_END

  00242	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  00247	c3		 ret	 0
$LN7@Emplace_re:
  00248	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0024c	eb 04		 jmp	 SHORT __tryend$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z$1
$LN10@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  0024e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00252	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  00255	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  00258	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  0025b	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  0025e	e8 00 00 00 00	 call	 ?_Change_array@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXQAU?$pair@MUTFlyVertexSet@@@2@II@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  00263	69 45 60 94 00
	00 00		 imul	 eax, DWORD PTR __Whereoff$[ebp], 148
  0026a	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN70@Emplace_re:

; 767  :     }

  0026d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00270	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00277	59		 pop	 ecx
  00278	5f		 pop	 edi
  00279	5e		 pop	 esi
  0027a	5b		 pop	 ebx
  0027b	83 c5 70	 add	 ebp, 112		; 00000070H
  0027e	c9		 leave
  0027f	c2 08 00	 ret	 8
  00282	cc		 int	 3
  00283	cc		 int	 3
  00284	cc		 int	 3
  00285	cc		 int	 3
  00286	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$emplace_back@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEX$$QAU?$pair@MUTFlyVertexSet@@@1@@Z
_TEXT	SEGMENT
__Result$ = -64						; size = 4
__Result$1 = -60					; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
$T8 = -32						; size = 4
__Ptr$ = -28						; size = 4
$T9 = -24						; size = 4
__My_data$10 = -20					; size = 4
__Mylast$ = -16						; size = 4
__My_data$ = -12					; size = 4
_this$ = -8						; size = 4
__Mylast$11 = -4					; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEX$$QAU?$pair@MUTFlyVertexSet@@@1@@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::emplace_back<std::pair<float,TFlyVertexSet> >, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

  0000b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	89 45 f4	 mov	 DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

  00011	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

  0001a	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0001d	8b 4d f4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00025	74 65		 je	 SHORT $LN2@emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00027	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0002a	89 45 e8	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 684  :         auto& _My_data   = _Mypair._Myval2;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	89 45 ec	 mov	 DWORD PTR __My_data$10[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

  00033	8b 45 ec	 mov	 eax, DWORD PTR __My_data$10[ebp]
  00036	83 c0 04	 add	 eax, 4
  00039	89 45 fc	 mov	 DWORD PTR __Mylast$11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003c	8b 45 e8	 mov	 eax, DWORD PTR $T9[ebp]
  0003f	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00042	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 e4	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0004a	8b 45 e4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0004d	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00053	89 45 e0	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00056	8b 45 e0	 mov	 eax, DWORD PTR $T8[ebp]
  00059	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0005c	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  0005f	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T6[ebp]
  00065	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00068	6a 25		 push	 37			; 00000025H
  0006a	59		 pop	 ecx
  0006b	8b 75 d4	 mov	 esi, DWORD PTR $T5[ebp]
  0006e	8b 7d d0	 mov	 edi, DWORD PTR $T4[ebp]
  00071	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 689  :         _Ty& _Result = *_Mylast;

  00073	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  00076	8b 00		 mov	 eax, DWORD PTR [eax]
  00078	89 45 c4	 mov	 DWORD PTR __Result$1[ebp], eax

; 690  :         ++_Mylast;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00085	8b 4d fc	 mov	 ecx, DWORD PTR __Mylast$11[ebp]
  00088	89 01		 mov	 DWORD PTR [ecx], eax

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0008a	eb 19		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0008c	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0008f	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00092	ff 75 cc	 push	 DWORD PTR $T3[ebp]
  00095	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00098	ff 30		 push	 DWORD PTR [eax]
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEPAU?$pair@MUTFlyVertexSet@@@1@QAU21@$$QAU21@@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Emplace_reallocate<std::pair<float,TFlyVertexSet> >
  000a2	89 45 c0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	c9		 leave
  000a8	c2 04 00	 ret	 4
??$emplace_back@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEX$$QAU?$pair@MUTFlyVertexSet@@@1@@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::emplace_back<std::pair<float,TFlyVertexSet> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Const_cast@$$CBU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PBU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Const_cast@$$CBU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PBU10@@Z PROC ; std::_Const_cast<std::pair<float,TFlyVertexSet> const >, COMDAT

; 292  : auto _Const_cast(_Ty* _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 293  :     return const_cast<remove_const_t<_Ty>*>(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 294  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Const_cast@$$CBU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PBU10@@Z ENDP ; std::_Const_cast<std::pair<float,TFlyVertexSet> const >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
$T1 = -52						; size = 1
$T2 = -48						; size = 4
$T3 = -44						; size = 4
__Ptr$4 = -40						; size = 4
__Last$ = -36						; size = 4
$T5 = -32						; size = 4
$T6 = -28						; size = 4
__Ptr$7 = -24						; size = 4
__First$ = -20						; size = 4
__UFirst$8 = -16					; size = 4
__ULast$9 = -12						; size = 4
__Pred$ = -8						; size = 1
$T10 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > > >, COMDAT

; 7575 : _CONSTEXPR20 void sort(const _RanIt _First, const _RanIt _Last) { // order [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 7576 :     _STD sort(_First, _Last, less<>{});

  00006	33 c0		 xor	 eax, eax
  00008	88 45 ff	 mov	 BYTE PTR $T10[ebp], al
  0000b	8a 45 ff	 mov	 al, BYTE PTR $T10[ebp]
  0000e	88 45 f8	 mov	 BYTE PTR __Pred$[ebp], al
  00011	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00014	89 45 dc	 mov	 DWORD PTR __Last$[ebp], eax
  00017	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001a	89 45 ec	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  0001d	8b 45 ec	 mov	 eax, DWORD PTR __First$[ebp]
  00020	89 45 e8	 mov	 DWORD PTR __Ptr$7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00023	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$7[ebp]
  00026	89 45 e4	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  00029	8b 45 e4	 mov	 eax, DWORD PTR $T6[ebp]
  0002c	89 45 e0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7569 :     const auto _UFirst = _Get_unwrapped(_First);

  0002f	8b 45 e0	 mov	 eax, DWORD PTR $T5[ebp]
  00032	89 45 f0	 mov	 DWORD PTR __UFirst$8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  00035	8b 45 dc	 mov	 eax, DWORD PTR __Last$[ebp]
  00038	89 45 d8	 mov	 DWORD PTR __Ptr$4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0003b	8b 45 d8	 mov	 eax, DWORD PTR __Ptr$4[ebp]
  0003e	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  00041	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  00044	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7570 :     const auto _ULast  = _Get_unwrapped(_Last);

  00047	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  0004a	89 45 f4	 mov	 DWORD PTR __ULast$9[ebp], eax

; 7571 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  0004d	8a 45 f8	 mov	 al, BYTE PTR __Pred$[ebp]
  00050	88 45 cc	 mov	 BYTE PTR $T1[ebp], al
  00053	ff 75 cc	 push	 DWORD PTR $T1[ebp]
  00056	8b 45 f4	 mov	 eax, DWORD PTR __ULast$9[ebp]
  00059	2b 45 f0	 sub	 eax, DWORD PTR __UFirst$8[ebp]
  0005c	99		 cdq
  0005d	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00062	f7 f9		 idiv	 ecx
  00064	50		 push	 eax
  00065	ff 75 f4	 push	 DWORD PTR __ULast$9[ebp]
  00068	ff 75 f0	 push	 DWORD PTR __UFirst$8[ebp]
  0006b	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MUTFlyVertexSet@@@std@@U?$less@X@2@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,TFlyVertexSet> *,std::less<void> >
  00070	83 c4 10	 add	 esp, 16			; 00000010H

; 7577 : }

  00073	c9		 leave
  00074	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
;	COMDAT ?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 4
__Tmp$2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__Right$ = -12						; size = 4
__Left$ = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z PROC	; std::pair<float,TFlyVertexSet>::swap, COMDAT
; _this$ = ecx

; 319  :         _Is_nothrow_swappable<_Ty1>::value&& _Is_nothrow_swappable<_Ty2>::value) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00009	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 320  :         if (this != _STD addressof(_Right)) {

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	3b 45 f0	 cmp	 eax, DWORD PTR $T5[ebp]
  00015	74 53		 je	 SHORT $LN22@swap

; 321  :             _Swap_adl(first, _Right.first);

  00017	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0001a	89 45 f4	 mov	 DWORD PTR __Right$[ebp], eax
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	89 45 f8	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00023	8b 45 f8	 mov	 eax, DWORD PTR __Left$[ebp]
  00026	89 45 ec	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  00029	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
  0002c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00030	f3 0f 11 45 e4	 movss	 DWORD PTR __Tmp$2[ebp], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00035	8b 45 f4	 mov	 eax, DWORD PTR __Right$[ebp]
  00038	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  0003b	8b 45 f8	 mov	 eax, DWORD PTR __Left$[ebp]
  0003e	8b 4d e8	 mov	 ecx, DWORD PTR $T3[ebp]
  00041	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00043	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00045	8d 45 e4	 lea	 eax, DWORD PTR __Tmp$2[ebp]
  00048	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  0004b	8b 45 f4	 mov	 eax, DWORD PTR __Right$[ebp]
  0004e	8b 4d e0	 mov	 ecx, DWORD PTR $T1[ebp]
  00051	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00053	89 08		 mov	 DWORD PTR [eax], ecx

; 322  :             _Swap_adl(second, _Right.second);

  00055	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00058	83 c0 04	 add	 eax, 4

; 112  :     swap(_Left, _Right);

  0005b	50		 push	 eax

; 322  :             _Swap_adl(second, _Right.second);

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	83 c0 04	 add	 eax, 4

; 112  :     swap(_Left, _Right);

  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??$swap@UTFlyVertexSet@@$0A@@std@@YAXAAUTFlyVertexSet@@0@Z ; std::swap<TFlyVertexSet,0>
  00068	59		 pop	 ecx
  00069	59		 pop	 ecx
$LN22@swap:

; 323  :         }
; 324  :     }

  0006a	c9		 leave
  0006b	c2 04 00	 ret	 4
?swap@?$pair@MUTFlyVertexSet@@@std@@QAEXAAU12@@Z ENDP	; std::pair<float,TFlyVertexSet>::swap
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Parent_proxy$1 = -12					; size = 4
__Parent$ = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1133 :         if (_Myproxy != _Right._Myproxy) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00013	74 38		 je	 SHORT $LN7@operator

; 1134 :             if (_Right._Myproxy) {

  00015	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00018	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001b	74 2a		 je	 SHORT $LN5@operator

; 1135 :                 _Adopt(_Right._Myproxy->_Mycont);

  0001d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	8b 00		 mov	 eax, DWORD PTR [eax]
  00024	89 45 f8	 mov	 DWORD PTR __Parent$[ebp], eax

; 1157 :         if (_Parent) {

  00027	83 7d f8 00	 cmp	 DWORD PTR __Parent$[ebp], 0
  0002b	74 12		 je	 SHORT $LN10@operator

; 1158 :             // have a parent, do adoption
; 1159 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR __Parent$[ebp]
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	89 45 f4	 mov	 DWORD PTR __Parent_proxy$1[ebp], eax

; 1160 : 
; 1161 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1162 :             if (_Myproxy != _Parent_proxy) { // change parentage
; 1163 :                 _Lockit _Lock(_LOCK_DEBUG);
; 1164 :                 _Orphan_me();
; 1165 :                 _Mynextiter                 = _Parent_proxy->_Myfirstiter;
; 1166 :                 _Parent_proxy->_Myfirstiter = this;
; 1167 :                 _Myproxy                    = _Parent_proxy;
; 1168 :             }
; 1169 : 
; 1170 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1171 :             _Myproxy = _Parent_proxy;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 4d f4	 mov	 ecx, DWORD PTR __Parent_proxy$1[ebp]
  0003b	89 08		 mov	 DWORD PTR [eax], ecx

; 1172 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1173 :         } else {

  0003d	eb 06		 jmp	 SHORT $LN12@operator
$LN10@operator:

; 1174 :             // no future parent, just disown current parent
; 1175 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1176 :             _Lockit _Lock(_LOCK_DEBUG);
; 1177 :             _Orphan_me();
; 1178 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1179 :             _Myproxy = nullptr;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 20 00	 and	 DWORD PTR [eax], 0
$LN12@operator:

; 1136 :             } else { // becoming invalid, disown current parent

  00045	eb 06		 jmp	 SHORT $LN7@operator
$LN5@operator:

; 1137 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 :                 _Lockit _Lock(_LOCK_DEBUG);
; 1139 :                 _Orphan_me();
; 1140 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1141 :                 _Myproxy = nullptr;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	83 20 00	 and	 DWORD PTR [eax], 0
$LN7@operator:
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00053	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00056	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	c9		 leave
  0005d	c2 04 00	 ret	 4
??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Parent_proxy$1 = -12					; size = 4
__Parent$ = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1133 :         if (_Myproxy != _Right._Myproxy) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00013	74 38		 je	 SHORT $LN7@operator

; 1134 :             if (_Right._Myproxy) {

  00015	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00018	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001b	74 2a		 je	 SHORT $LN5@operator

; 1135 :                 _Adopt(_Right._Myproxy->_Mycont);

  0001d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	8b 00		 mov	 eax, DWORD PTR [eax]
  00024	89 45 f8	 mov	 DWORD PTR __Parent$[ebp], eax

; 1157 :         if (_Parent) {

  00027	83 7d f8 00	 cmp	 DWORD PTR __Parent$[ebp], 0
  0002b	74 12		 je	 SHORT $LN10@operator

; 1158 :             // have a parent, do adoption
; 1159 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR __Parent$[ebp]
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	89 45 f4	 mov	 DWORD PTR __Parent_proxy$1[ebp], eax

; 1160 : 
; 1161 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1162 :             if (_Myproxy != _Parent_proxy) { // change parentage
; 1163 :                 _Lockit _Lock(_LOCK_DEBUG);
; 1164 :                 _Orphan_me();
; 1165 :                 _Mynextiter                 = _Parent_proxy->_Myfirstiter;
; 1166 :                 _Parent_proxy->_Myfirstiter = this;
; 1167 :                 _Myproxy                    = _Parent_proxy;
; 1168 :             }
; 1169 : 
; 1170 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1171 :             _Myproxy = _Parent_proxy;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 4d f4	 mov	 ecx, DWORD PTR __Parent_proxy$1[ebp]
  0003b	89 08		 mov	 DWORD PTR [eax], ecx

; 1172 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1173 :         } else {

  0003d	eb 06		 jmp	 SHORT $LN12@operator
$LN10@operator:

; 1174 :             // no future parent, just disown current parent
; 1175 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1176 :             _Lockit _Lock(_LOCK_DEBUG);
; 1177 :             _Orphan_me();
; 1178 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1179 :             _Myproxy = nullptr;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 20 00	 and	 DWORD PTR [eax], 0
$LN12@operator:

; 1136 :             } else { // becoming invalid, disown current parent

  00045	eb 06		 jmp	 SHORT $LN7@operator
$LN5@operator:

; 1137 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 :                 _Lockit _Lock(_LOCK_DEBUG);
; 1139 :                 _Orphan_me();
; 1140 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1141 :                 _Myproxy = nullptr;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	83 20 00	 and	 DWORD PTR [eax], 0
$LN7@operator:
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00053	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00056	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	c9		 leave
  0005d	c2 04 00	 ret	 4
??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator=
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ
_TEXT	SEGMENT
__Block$ = -24						; size = 4
__Off$ = -20						; size = 4
__Off$ = -16						; size = 4
__Mycont$ = -12						; size = 4
tv89 = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*, COMDAT
; _this$ = ecx

; 260  :     _NODISCARD reference operator*() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1185 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000f	74 0c		 je	 SHORT $LN5@operator
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f8	 mov	 DWORD PTR tv89[ebp], eax
  0001b	eb 04		 jmp	 SHORT $LN6@operator
$LN5@operator:
  0001d	83 65 f8 00	 and	 DWORD PTR tv89[ebp], 0
$LN6@operator:
  00021	8b 45 f8	 mov	 eax, DWORD PTR tv89[ebp]
  00024	89 45 f4	 mov	 DWORD PTR __Mycont$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 268  :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	89 45 f0	 mov	 DWORD PTR __Off$[ebp], eax

; 548  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  00030	8b 45 f4	 mov	 eax, DWORD PTR __Mycont$[ebp]
  00033	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00036	48		 dec	 eax
  00037	23 45 f0	 and	 eax, DWORD PTR __Off$[ebp]
  0003a	89 45 e8	 mov	 DWORD PTR __Block$[ebp], eax

; 269  :         _Size_type _Off   = _Myoff % _DEQUESIZ;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00043	33 d2		 xor	 edx, edx
  00045	33 c9		 xor	 ecx, ecx
  00047	41		 inc	 ecx
  00048	f7 f1		 div	 ecx
  0004a	89 55 ec	 mov	 DWORD PTR __Off$[ebp], edx

; 270  :         return _Mycont->_Map[_Block][_Off];

  0004d	8b 45 f4	 mov	 eax, DWORD PTR __Mycont$[ebp]
  00050	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00053	8b 4d ec	 mov	 ecx, DWORD PTR __Off$[ebp]
  00056	c1 e1 04	 shl	 ecx, 4
  00059	8b 55 e8	 mov	 edx, DWORD PTR __Block$[ebp]
  0005c	03 0c 90	 add	 ecx, DWORD PTR [eax+edx*4]
  0005f	8b c1		 mov	 eax, ecx

; 271  :     }

  00061	c9		 leave
  00062	c3		 ret	 0
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Parent_proxy$1 = -8					; size = 4
_this$ = -4						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx

; 252  :     _Deque_const_iterator() noexcept : _Myoff(0) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1126 :     _Iterator_base12() noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) {} // construct orphaned iterator

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 20 00	 and	 DWORD PTR [eax], 0
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 60 04 00	 and	 DWORD PTR [eax+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 252  :     _Deque_const_iterator() noexcept : _Myoff(0) {

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 60 08 00	 and	 DWORD PTR [eax+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1157 :         if (_Parent) {

  0001c	33 c0		 xor	 eax, eax
  0001e	74 11		 je	 SHORT $LN10@Deque_cons

; 1158 :             // have a parent, do adoption
; 1159 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

  00020	33 c0		 xor	 eax, eax
  00022	8b 00		 mov	 eax, DWORD PTR [eax]
  00024	89 45 f8	 mov	 DWORD PTR __Parent_proxy$1[ebp], eax

; 1160 : 
; 1161 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1162 :             if (_Myproxy != _Parent_proxy) { // change parentage
; 1163 :                 _Lockit _Lock(_LOCK_DEBUG);
; 1164 :                 _Orphan_me();
; 1165 :                 _Mynextiter                 = _Parent_proxy->_Myfirstiter;
; 1166 :                 _Parent_proxy->_Myfirstiter = this;
; 1167 :                 _Myproxy                    = _Parent_proxy;
; 1168 :             }
; 1169 : 
; 1170 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1171 :             _Myproxy = _Parent_proxy;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR __Parent_proxy$1[ebp]
  0002d	89 08		 mov	 DWORD PTR [eax], ecx

; 1172 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1173 :         } else {

  0002f	eb 06		 jmp	 SHORT $LN1@Deque_cons
$LN10@Deque_cons:

; 1174 :             // no future parent, just disown current parent
; 1175 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1176 :             _Lockit _Lock(_LOCK_DEBUG);
; 1177 :             _Orphan_me();
; 1178 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1179 :             _Myproxy = nullptr;

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 20 00	 and	 DWORD PTR [eax], 0
$LN1@Deque_cons:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 254  :     }

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c9		 leave
  0003b	c3		 ret	 0
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >, COMDAT
; _this$ = ecx

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 20 00	 and	 DWORD PTR [eax], 0
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 60 08 00	 and	 DWORD PTR [eax+8], 0
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 :         _Xlength_error("vector too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
?_Tidy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1687 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();
; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 7a		 je	 SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@QAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<float,TFlyVertexSet> > >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00078	f7 f9		 idiv	 ecx
  0007a	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007d	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00080	8b 00		 mov	 eax, DWORD PTR [eax]
  00082	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00085	69 45 d4 94 00
	00 00		 imul	 eax, DWORD PTR __Count$[ebp], 148
  0008c	50		 push	 eax
  0008d	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  00090	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00095	59		 pop	 ecx
  00096	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00097	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0009a	83 20 00	 and	 DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

  0009d	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000a0	83 20 00	 and	 DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

  000a3	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a6	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

  000a9	c9		 leave
  000aa	c3		 ret	 0
?_Tidy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXQAU?$pair@MUTFlyVertexSet@@@2@II@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXQAU?$pair@MUTFlyVertexSet@@@2@II@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();
; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 68		 je	 SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@QAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<float,TFlyVertexSet> > >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00078	f7 f9		 idiv	 ecx
  0007a	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007d	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00080	8b 00		 mov	 eax, DWORD PTR [eax]
  00082	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00085	69 45 d4 94 00
	00 00		 imul	 eax, DWORD PTR __Count$[ebp], 148
  0008c	50		 push	 eax
  0008d	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  00090	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00095	59		 pop	 ecx
  00096	59		 pop	 ecx
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  00097	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0009a	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0009d	89 08		 mov	 DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  0009f	69 45 0c 94 00
	00 00		 imul	 eax, DWORD PTR __Newsize$[ebp], 148
  000a6	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000a9	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000ac	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000ae	69 45 10 94 00
	00 00		 imul	 eax, DWORD PTR __Newcapacity$[ebp], 148
  000b5	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000b8	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000bb	89 01		 mov	 DWORD PTR [ecx], eax

; 1684 :     }

  000bd	c9		 leave
  000be	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXQAU?$pair@MUTFlyVertexSet@@@2@II@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Geometric$ = -32					; size = 4
__Max$ = -28						; size = 4
tv82 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$8 = -8					; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@ABEII@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$8[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	99		 cdq
  0001b	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00020	f7 f9		 idiv	 ecx
  00022	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00025	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00028	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  0002b	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  0002e	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00031	c7 45 f0 91 cf
	ba 01		 mov	 DWORD PTR $T7[ebp], 29020049 ; 01bacf91H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00038	c7 45 d8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0003f	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  00042	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00045	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00048	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  0004b	73 08		 jae	 SHORT $LN25@Calculate_
  0004d	8d 45 f0	 lea	 eax, DWORD PTR $T7[ebp]
  00050	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
  00053	eb 06		 jmp	 SHORT $LN26@Calculate_
$LN25@Calculate_:
  00055	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00058	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
$LN26@Calculate_:
  0005b	8b 45 e8	 mov	 eax, DWORD PTR tv82[ebp]
  0005e	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  00061	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  00064	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00067	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  0006a	8b 00		 mov	 eax, DWORD PTR [eax]
  0006c	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 :         const auto _Max              = max_size();
; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006f	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00072	d1 e8		 shr	 eax, 1
  00074	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  00077	2b c8		 sub	 ecx, eax
  00079	39 4d fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], ecx
  0007c	76 05		 jbe	 SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

  0007e	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  00081	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00083	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00086	d1 e8		 shr	 eax, 1
  00088	03 45 fc	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  0008b	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  0008e	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  00091	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00094	73 05		 jae	 SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

  00096	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00099	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

  0009b	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

  0009e	c9		 leave
  0009f	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@ABEII@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00015	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00018	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@YAXPAU?$pair@MUTFlyVertexSet@@@0@QAU10@AAV?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::pair<float,TFlyVertexSet> > >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00026	c9		 leave
  00027	c2 08 00	 ret	 8
?_Destroy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXPAU?$pair@MUTFlyVertexSet@@@2@0@Z ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 673  :         _Tidy();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Tidy

; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXQAU?$pair@MUTFlyVertexSet@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXQAU?$pair@MUTFlyVertexSet@@@2@I@Z PROC ; std::allocator<std::pair<float,TFlyVertexSet> >::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	69 45 0c 94 00
	00 00		 imul	 eax, DWORD PTR __Count$[ebp], 148
  0000e	50		 push	 eax
  0000f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00012	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00017	59		 pop	 ecx
  00018	59		 pop	 ecx

; 811  :     }

  00019	c9		 leave
  0001a	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@std@@QAEXQAU?$pair@MUTFlyVertexSet@@@2@I@Z ENDP ; std::allocator<std::pair<float,TFlyVertexSet> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ??0TFlyVertexSet@@QAE@PAUTFlyVertex@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
___t$ = -12						; size = 4
_this$ = -8						; size = 4
___n$ = -4						; size = 4
_pv$ = 8						; size = 4
??0TFlyVertexSet@@QAE@PAUTFlyVertex@@@Z PROC		; TFlyVertexSet::TFlyVertexSet, COMDAT
; _this$ = ecx

; 102  : 	TFlyVertexSet(TFlyVertex * pv)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR ___n$[ebp], 6
  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	89 45 f4	 mov	 DWORD PTR ___t$[ebp], eax
$LN4@TFlyVertex:
  00016	8b 45 fc	 mov	 eax, DWORD PTR ___n$[ebp]
  00019	89 45 f0	 mov	 DWORD PTR tv75[ebp], eax
  0001c	8b 45 fc	 mov	 eax, DWORD PTR ___n$[ebp]
  0001f	48		 dec	 eax
  00020	89 45 fc	 mov	 DWORD PTR ___n$[ebp], eax
  00023	83 7d f0 00	 cmp	 DWORD PTR tv75[ebp], 0
  00027	76 0b		 jbe	 SHORT $LN3@TFlyVertex
  00029	8b 45 f4	 mov	 eax, DWORD PTR ___t$[ebp]
  0002c	83 c0 18	 add	 eax, 24			; 00000018H
  0002f	89 45 f4	 mov	 DWORD PTR ___t$[ebp], eax
  00032	eb e2		 jmp	 SHORT $LN4@TFlyVertex
$LN3@TFlyVertex:

; 103  : 	{
; 104  : 		memcpy(v,pv,sizeof(v));

  00034	68 90 00 00 00	 push	 144			; 00000090H
  00039	ff 75 08	 push	 DWORD PTR _pv$[ebp]
  0003c	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 _memcpy
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 105  : 	}

  00047	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c9		 leave
  0004b	c2 04 00	 ret	 4
??0TFlyVertexSet@@QAE@PAUTFlyVertex@@@Z ENDP		; TFlyVertexSet::TFlyVertexSet
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A ; CFlyTrace::ms_kPool
  00008	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ ; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool''
text$yd	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CFlyTrace::ms_kPool'', COMDAT

; 8    : CDynamicPool<CFlyTrace>		CFlyTrace::ms_kPool;		

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A ; CFlyTrace::ms_kPool
  00008	e8 00 00 00 00	 call	 ??0?$CDynamicPool@VCFlyTrace@@@@QAE@XZ ; CDynamicPool<CFlyTrace>::CDynamicPool<CFlyTrace>
  0000d	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CFlyTrace::ms_kPool''
  00012	e8 00 00 00 00	 call	 _atexit
  00017	59		 pop	 ecx
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__E?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CFlyTrace::ms_kPool''
text$di	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z PROC		; CDynamicPool<CFlyTrace>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ ; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 24		 push	 36			; 00000024H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCFlyTrace@@@@UAEPAXI@Z ENDP		; CDynamicPool<CFlyTrace>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 :         _Xlength_error("vector too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@CAXXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
?_Tidy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1687 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();
; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 74		 je	 SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAXPAPAVCFlyTrace@@QAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyTrace *> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	c1 f8 02	 sar	 eax, 2
  00075	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00078	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00080	8b 45 d4	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	c1 e0 02	 shl	 eax, 2
  00086	50		 push	 eax
  00087	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008f	59		 pop	 ecx
  00090	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00091	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00094	83 20 00	 and	 DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

  00097	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0009a	83 20 00	 and	 DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

  0009d	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a0	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

  000a3	c9		 leave
  000a4	c3		 ret	 0
?_Tidy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXQAPAVCFlyTrace@@II@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXQAPAVCFlyTrace@@II@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();
; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 62		 je	 SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAXPAPAVCFlyTrace@@QAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyTrace *> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	c1 f8 02	 sar	 eax, 2
  00075	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00078	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00080	8b 45 d4	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	c1 e0 02	 shl	 eax, 2
  00086	50		 push	 eax
  00087	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008f	59		 pop	 ecx
  00090	59		 pop	 ecx
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  00091	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00094	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00097	89 08		 mov	 DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  00099	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0009f	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000a2	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000a5	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000a7	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  000aa	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  000ad	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000b0	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b3	89 01		 mov	 DWORD PTR [ecx], eax

; 1684 :     }

  000b5	c9		 leave
  000b6	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXQAPAVCFlyTrace@@II@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Geometric$ = -32					; size = 4
__Max$ = -28						; size = 4
tv82 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$8 = -8					; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@ABEII@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$8[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	c1 f8 02	 sar	 eax, 2
  0001d	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00020	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00023	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00026	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  00029	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0002c	c7 45 f0 ff ff
	ff 3f		 mov	 DWORD PTR $T7[ebp], 1073741823 ; 3fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00033	c7 45 d8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0003a	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00040	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00043	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  00046	73 08		 jae	 SHORT $LN25@Calculate_
  00048	8d 45 f0	 lea	 eax, DWORD PTR $T7[ebp]
  0004b	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
  0004e	eb 06		 jmp	 SHORT $LN26@Calculate_
$LN25@Calculate_:
  00050	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00053	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
$LN26@Calculate_:
  00056	8b 45 e8	 mov	 eax, DWORD PTR tv82[ebp]
  00059	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  0005c	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  0005f	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00062	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 :         const auto _Max              = max_size();
; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006a	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  0006d	d1 e8		 shr	 eax, 1
  0006f	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  00072	2b c8		 sub	 ecx, eax
  00074	39 4d fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], ecx
  00077	76 05		 jbe	 SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

  00079	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  0007c	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00081	d1 e8		 shr	 eax, 1
  00083	03 45 fc	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00086	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  00089	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0008c	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  0008f	73 05		 jae	 SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

  00091	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00094	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

  00096	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

  00099	c9		 leave
  0009a	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@ABEII@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXPAPAVCFlyTrace@@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXPAPAVCFlyTrace@@0@Z PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00015	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00018	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAXPAPAVCFlyTrace@@QAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyTrace *> >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00026	c9		 leave
  00027	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXPAPAVCFlyTrace@@0@Z ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?clear@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T1 = -24						; size = 4
$T2 = -20						; size = 4
__Myfirst$ = -16					; size = 4
__Mylast$ = -12						; size = 4
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
?clear@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ PROC ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::clear, COMDAT
; _this$ = ecx

; 1383 :     void clear() noexcept { // erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1384 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR __My_data$[ebp], eax

; 1385 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 f0	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1386 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1387 : 
; 1388 :         _My_data._Orphan_all();
; 1389 :         _Destroy(_Myfirst, _Mylast);

  0001e	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  00026	8b 45 f0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00031	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00037	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0003a	ff 75 e8	 push	 DWORD PTR $T1[ebp]
  0003d	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  00040	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  00043	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PAVCFlyTrace@@@std@@@std@@YAXPAPAVCFlyTrace@@QAPAV1@AAV?$allocator@PAVCFlyTrace@@@0@@Z ; std::_Destroy_range<std::allocator<CFlyTrace *> >
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1390 :         _Mylast = _Myfirst;

  0004b	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00051	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00053	89 08		 mov	 DWORD PTR [eax], ecx

; 1391 :     }

  00055	c9		 leave
  00056	c3		 ret	 0
?clear@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ ENDP ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::clear
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@PAVCFlyTrace@@@std@@QAEXQAPAVCFlyTrace@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVCFlyTrace@@@std@@QAEXQAPAVCFlyTrace@@I@Z PROC ; std::allocator<CFlyTrace *>::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	c1 e0 02	 shl	 eax, 2
  0000d	50		 push	 eax
  0000e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00011	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00016	59		 pop	 ecx
  00017	59		 pop	 ecx

; 811  :     }

  00018	c9		 leave
  00019	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCFlyTrace@@@std@@QAEXQAPAVCFlyTrace@@I@Z ENDP ; std::allocator<CFlyTrace *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z
_TEXT	SEGMENT
tv74 = -8						; size = 4
$T1 = -4						; size = 4
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z PROC ; CDynamicPool<CFlyTrace>::Delete, COMDAT

; 109  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 110  : 			delete pkData;

  00005	8b 45 08	 mov	 eax, DWORD PTR _pkData$[ebp]
  00008	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0000b	83 7d fc 00	 cmp	 DWORD PTR $T1[ebp], 0
  0000f	74 11		 je	 SHORT $LN3@Delete
  00011	6a 01		 push	 1
  00013	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  0001b	ff 10		 call	 DWORD PTR [eax]
  0001d	89 45 f8	 mov	 DWORD PTR tv74[ebp], eax
  00020	eb 04		 jmp	 SHORT $LN1@Delete
$LN3@Delete:
  00022	83 65 f8 00	 and	 DWORD PTR tv74[ebp], 0
$LN1@Delete:

; 111  : 		}

  00026	c9		 leave
  00027	c3		 ret	 0
?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z ENDP ; CDynamicPool<CFlyTrace>::Delete
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
;	COMDAT ?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ
_TEXT	SEGMENT
$T2 = -84						; size = 4
$T3 = -80						; size = 4
_pkFreeData$ = -76					; size = 4
$T4 = -72						; size = 4
__Ptr$ = -68						; size = 4
__My_data$5 = -64					; size = 4
$T6 = -60						; size = 4
__My_data$7 = -56					; size = 4
$T8 = -52						; size = 4
_this$ = -48						; size = 4
_pkNewData$9 = -44					; size = 4
tv80 = -40						; size = 4
$T10 = -36						; size = 4
tv130 = -32						; size = 4
__My_data$11 = -28					; size = 4
__Mylast$12 = -24					; size = 4
_this$ = -20						; size = 4
$T13 = -13						; size = 1
__$EHRec$ = -12						; size = 12
?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ PROC ; CDynamicPool<CFlyTrace>::Alloc, COMDAT
; _this$ = ecx

; 62   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1478 :         auto& _My_data = _Mypair._Myval2;

  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c0 10	 add	 eax, 16			; 00000010H
  0002e	89 45 e4	 mov	 DWORD PTR __My_data$11[ebp], eax

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00031	8b 45 e4	 mov	 eax, DWORD PTR __My_data$11[ebp]
  00034	8b 4d e4	 mov	 ecx, DWORD PTR __My_data$11[ebp]
  00037	8b 00		 mov	 eax, DWORD PTR [eax]
  00039	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0003c	75 09		 jne	 SHORT $LN9@Alloc
  0003e	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv130[ebp], 1
  00045	eb 04		 jmp	 SHORT $LN10@Alloc
$LN9@Alloc:
  00047	83 65 e0 00	 and	 DWORD PTR tv130[ebp], 0
$LN10@Alloc:
  0004b	8a 45 e0	 mov	 al, BYTE PTR tv130[ebp]
  0004e	88 45 f3	 mov	 BYTE PTR $T13[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h

; 63   : 			if (m_kVct_pkFree.empty())

  00051	0f b6 45 f3	 movzx	 eax, BYTE PTR $T13[ebp]
  00055	85 c0		 test	 eax, eax
  00057	74 57		 je	 SHORT $LN2@Alloc

; 64   : 			{
; 65   : 				T* pkNewData=new T;

  00059	6a 28		 push	 40			; 00000028H
  0005b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00060	59		 pop	 ecx
  00061	89 45 dc	 mov	 DWORD PTR $T10[ebp], eax
  00064	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00068	83 7d dc 00	 cmp	 DWORD PTR $T10[ebp], 0
  0006c	74 0d		 je	 SHORT $LN4@Alloc
  0006e	8b 4d dc	 mov	 ecx, DWORD PTR $T10[ebp]
  00071	e8 00 00 00 00	 call	 ??0CFlyTrace@@QAE@XZ	; CFlyTrace::CFlyTrace
  00076	89 45 d8	 mov	 DWORD PTR tv80[ebp], eax
  00079	eb 04		 jmp	 SHORT $LN5@Alloc
$LN4@Alloc:
  0007b	83 65 d8 00	 and	 DWORD PTR tv80[ebp], 0
$LN5@Alloc:
  0007f	8b 45 d8	 mov	 eax, DWORD PTR tv80[ebp]
  00082	89 45 cc	 mov	 DWORD PTR $T8[ebp], eax
  00085	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00089	8b 45 cc	 mov	 eax, DWORD PTR $T8[ebp]
  0008c	89 45 d4	 mov	 DWORD PTR _pkNewData$9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  0008f	8d 45 d4	 lea	 eax, DWORD PTR _pkNewData$9[ebp]
  00092	50		 push	 eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h

; 66   : 				m_kVct_pkData.push_back(pkNewData);

  00093	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	83 c1 04	 add	 ecx, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  00099	e8 00 00 00 00	 call	 ??$emplace_back@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::emplace_back<CFlyTrace * const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h

; 67   : 				++m_uUsedCapacity;

  0009e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  000a4	40		 inc	 eax
  000a5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 68   : 				return pkNewData;

  000ab	8b 45 d4	 mov	 eax, DWORD PTR _pkNewData$9[ebp]
  000ae	eb 65		 jmp	 SHORT $LN1@Alloc
$LN2@Alloc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1554 :         auto& _My_data = _Mypair._Myval2;

  000b0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	83 c0 10	 add	 eax, 16			; 00000010H
  000b6	89 45 c8	 mov	 DWORD PTR __My_data$7[ebp], eax

; 1555 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1556 :         _STL_VERIFY(_My_data._Myfirst != _My_data._Mylast, "back() called on empty vector");
; 1557 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1558 : 
; 1559 :         return _My_data._Mylast[-1];

  000b9	6a 04		 push	 4
  000bb	58		 pop	 eax
  000bc	6b c0 ff	 imul	 eax, eax, -1
  000bf	8b 4d c8	 mov	 ecx, DWORD PTR __My_data$7[ebp]
  000c2	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  000c5	89 45 c4	 mov	 DWORD PTR $T6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h

; 71   : 			T* pkFreeData=m_kVct_pkFree.back();

  000c8	8b 45 c4	 mov	 eax, DWORD PTR $T6[ebp]
  000cb	8b 00		 mov	 eax, DWORD PTR [eax]
  000cd	89 45 b4	 mov	 DWORD PTR _pkFreeData$[ebp], eax

; 72   : 			m_kVct_pkFree.pop_back();

  000d0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	83 c0 10	 add	 eax, 16			; 00000010H
  000d6	89 45 d0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1329 :         auto& _My_data   = _Mypair._Myval2;

  000d9	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	89 45 c0	 mov	 DWORD PTR __My_data$5[ebp], eax

; 1330 :         pointer& _Mylast = _My_data._Mylast;

  000df	8b 45 c0	 mov	 eax, DWORD PTR __My_data$5[ebp]
  000e2	83 c0 04	 add	 eax, 4
  000e5	89 45 e8	 mov	 DWORD PTR __Mylast$12[ebp], eax

; 1331 : 
; 1332 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1333 :         _STL_VERIFY(_My_data._Myfirst != _Mylast, "vector empty before pop");
; 1334 :         _Orphan_range(_Mylast - 1, _Mylast);
; 1335 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1336 : 
; 1337 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Mylast - 1));

  000e8	8b 45 e8	 mov	 eax, DWORD PTR __Mylast$12[ebp]
  000eb	8b 00		 mov	 eax, DWORD PTR [eax]
  000ed	83 e8 04	 sub	 eax, 4
  000f0	89 45 bc	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  000f3	8b 45 bc	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000f6	89 45 b0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  000f9	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000fc	89 45 b8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  000ff	8b 45 b8	 mov	 eax, DWORD PTR $T4[ebp]
  00102	89 45 ac	 mov	 DWORD PTR $T2[ebp], eax

; 1338 :         --_Mylast;

  00105	8b 45 e8	 mov	 eax, DWORD PTR __Mylast$12[ebp]
  00108	8b 00		 mov	 eax, DWORD PTR [eax]
  0010a	83 e8 04	 sub	 eax, 4
  0010d	8b 4d e8	 mov	 ecx, DWORD PTR __Mylast$12[ebp]
  00110	89 01		 mov	 DWORD PTR [ecx], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h

; 73   : 			return pkFreeData;

  00112	8b 45 b4	 mov	 eax, DWORD PTR _pkFreeData$[ebp]
$LN1@Alloc:

; 74   : 		}

  00115	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00118	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011f	59		 pop	 ecx
  00120	c9		 leave
  00121	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ$0:
  00000	6a 28		 push	 40			; 00000028H
  00002	ff 75 dc	 push	 DWORD PTR $T10[ebp]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000a	59		 pop	 ecx
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
__ehhandler$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ:
  00012	90		 npad	 1
  00013	90		 npad	 1
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ
  0002a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ ENDP ; CDynamicPool<CFlyTrace>::Alloc
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
;	COMDAT ?Destroy@?$CDynamicPool@VCFlyTrace@@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
$T4 = -32						; size = 4
$T5 = -28						; size = 4
___param0$ = -24					; size = 4
$T6 = -20						; size = 4
___param0$ = -16					; size = 4
__My_data$7 = -12					; size = 4
__My_data$8 = -8					; size = 4
_this$ = -4						; size = 4
?Destroy@?$CDynamicPool@VCFlyTrace@@@@QAEXXZ PROC	; CDynamicPool<CFlyTrace>::Destroy, COMDAT
; _this$ = ecx

; 38   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1420 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 04	 add	 eax, 4
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00015	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  00018	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	89 45 f0	 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00021	8b 45 f0	 mov	 eax, DWORD PTR ___param0$[ebp]
  00024	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  00027	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  0002a	89 45 e0	 mov	 DWORD PTR $T4[ebp], eax

; 1410 :         auto& _My_data = _Mypair._Myval2;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 c0 04	 add	 eax, 4
  00033	89 45 f4	 mov	 DWORD PTR __My_data$7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00036	8b 45 f4	 mov	 eax, DWORD PTR __My_data$7[ebp]
  00039	89 45 d4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  0003c	8b 45 f4	 mov	 eax, DWORD PTR __My_data$7[ebp]
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	89 45 e8	 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00044	8b 45 e8	 mov	 eax, DWORD PTR ___param0$[ebp]
  00047	89 45 e4	 mov	 DWORD PTR $T5[ebp], eax

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  0004a	8d 45 e4	 lea	 eax, DWORD PTR $T5[ebp]
  0004d	89 45 dc	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h

; 50   : 			std::for_each(m_kVct_pkData.begin(), m_kVct_pkData.end(), Delete);

  00050	68 00 00 00 00	 push	 OFFSET ?Delete@?$CDynamicPool@VCFlyTrace@@@@KAXPAVCFlyTrace@@@Z ; CDynamicPool<CFlyTrace>::Delete
  00055	8b 45 e0	 mov	 eax, DWORD PTR $T4[ebp]
  00058	ff 30		 push	 DWORD PTR [eax]
  0005a	8b 45 dc	 mov	 eax, DWORD PTR $T3[ebp]
  0005d	ff 30		 push	 DWORD PTR [eax]
  0005f	e8 00 00 00 00	 call	 ??$for_each@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@std@@P6AXPAVCFlyTrace@@@Z@std@@YAP6AXPAVCFlyTrace@@@ZV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVCFlyTrace@@@std@@@std@@@0@1P6AX0@Z@Z ; std::for_each<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<CFlyTrace *> > >,void (__cdecl*)(CFlyTrace *)>
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 			m_kVct_pkData.clear();

  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	83 c1 04	 add	 ecx, 4
  0006d	e8 00 00 00 00	 call	 ?clear@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::clear

; 52   : 			m_kVct_pkFree.clear();

  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	83 c1 10	 add	 ecx, 16			; 00000010H
  00078	e8 00 00 00 00	 call	 ?clear@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::clear

; 53   : 		}

  0007d	c9		 leave
  0007e	c3		 ret	 0
?Destroy@?$CDynamicPool@VCFlyTrace@@@@QAEXXZ ENDP	; CDynamicPool<CFlyTrace>::Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ PROC		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CDynamicPool@VCFlyTrace@@@@6B@

; 26   : 		}

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 10	 add	 ecx, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  00016	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Tidy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h

; 26   : 		}

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 04	 add	 ecx, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  00021	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@AAEXXZ ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::_Tidy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h

; 26   : 		}

  00026	c9		 leave
  00027	c3		 ret	 0
??1?$CDynamicPool@VCFlyTrace@@@@UAE@XZ ENDP		; CDynamicPool<CFlyTrace>::~CDynamicPool<CFlyTrace>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h
;	COMDAT ??0?$CDynamicPool@VCFlyTrace@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
_this$1 = -12						; size = 4
_this$2 = -8						; size = 4
_this$ = -4						; size = 4
??0?$CDynamicPool@VCFlyTrace@@@@QAE@XZ PROC		; CDynamicPool<CFlyTrace>::CDynamicPool<CFlyTrace>, COMDAT
; _this$ = ecx

; 11   : 		CDynamicPool()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 12   : 		{

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CDynamicPool@VCFlyTrace@@@@6B@
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	83 c0 04	 add	 eax, 4
  00018	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  0001b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00021	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00024	89 45 f8	 mov	 DWORD PTR _this$2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$2[ebp]
  0002a	83 20 00	 and	 DWORD PTR [eax], 0
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$2[ebp]
  00030	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$2[ebp]
  00037	83 60 08 00	 and	 DWORD PTR [eax+8], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h

; 12   : 		{

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 c0 10	 add	 eax, 16			; 00000010H
  00041	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00044	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0004a	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	89 45 f4	 mov	 DWORD PTR _this$1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00050	8b 45 f4	 mov	 eax, DWORD PTR _this$1[ebp]
  00053	83 20 00	 and	 DWORD PTR [eax], 0
  00056	8b 45 f4	 mov	 eax, DWORD PTR _this$1[ebp]
  00059	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  0005d	8b 45 f4	 mov	 eax, DWORD PTR _this$1[ebp]
  00060	83 60 08 00	 and	 DWORD PTR [eax+8], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Pool.h

; 14   : 			m_uInitCapacity=0;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	83 60 1c 00	 and	 DWORD PTR [eax+28], 0

; 15   : 			m_uUsedCapacity=0;

  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	83 60 20 00	 and	 DWORD PTR [eax+32], 0

; 16   : 		}

  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	c9		 leave
  00076	c3		 ret	 0
??0?$CDynamicPool@VCFlyTrace@@@@QAE@XZ ENDP		; CDynamicPool<CFlyTrace>::CDynamicPool<CFlyTrace>
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GCFlyTrace@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFlyTrace@@UAEPAXI@Z PROC				; CFlyTrace::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CFlyTrace@@UAE@XZ	; CFlyTrace::~CFlyTrace
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 28		 push	 40			; 00000028H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GCFlyTrace@@UAEPAXI@Z ENDP				; CFlyTrace::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ?Delete@CFlyTrace@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
_pkInst$ = 8						; size = 4
?Delete@CFlyTrace@@SAXPAV1@@Z PROC			; CFlyTrace::Delete, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 22   : 	pkInst->Destroy();

  00004	8b 4d 08	 mov	 ecx, DWORD PTR _pkInst$[ebp]
  00007	e8 00 00 00 00	 call	 ?Destroy@CFlyTrace@@QAEXXZ ; CFlyTrace::Destroy

; 23   : 	ms_kPool.Free(pkInst);

  0000c	8b 45 08	 mov	 eax, DWORD PTR _pkInst$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR _pkData$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  00012	8d 45 fc	 lea	 eax, DWORD PTR _pkData$[ebp]
  00015	50		 push	 eax
  00016	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A+16
  0001b	e8 00 00 00 00	 call	 ??$emplace_back@ABQAVCFlyTrace@@@?$vector@PAVCFlyTrace@@V?$allocator@PAVCFlyTrace@@@std@@@std@@QAEXABQAVCFlyTrace@@@Z ; std::vector<CFlyTrace *,std::allocator<CFlyTrace *> >::emplace_back<CFlyTrace * const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 24   : }

  00020	c9		 leave
  00021	c3		 ret	 0
?Delete@CFlyTrace@@SAXPAV1@@Z ENDP			; CFlyTrace::Delete
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ?New@CFlyTrace@@SAPAV1@XZ
_TEXT	SEGMENT
?New@CFlyTrace@@SAPAV1@XZ PROC				; CFlyTrace::New, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 17   : 	return ms_kPool.Alloc();

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A ; CFlyTrace::ms_kPool
  00008	e8 00 00 00 00	 call	 ?Alloc@?$CDynamicPool@VCFlyTrace@@@@QAEPAVCFlyTrace@@XZ ; CDynamicPool<CFlyTrace>::Alloc

; 18   : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?New@CFlyTrace@@SAPAV1@XZ ENDP				; CFlyTrace::New
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ?DestroySystem@CFlyTrace@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CFlyTrace@@SAXXZ PROC			; CFlyTrace::DestroySystem, COMDAT

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 12   : 	ms_kPool.Destroy();

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CFlyTrace@@2V?$CDynamicPool@VCFlyTrace@@@@A ; CFlyTrace::ms_kPool
  00008	e8 00 00 00 00	 call	 ?Destroy@?$CDynamicPool@VCFlyTrace@@@@QAEXXZ ; CDynamicPool<CFlyTrace>::Destroy

; 13   : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?DestroySystem@CFlyTrace@@SAXXZ ENDP			; CFlyTrace::DestroySystem
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >, COMDAT
; _this$ = ecx

; 544  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1097 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 20 00	 and	 DWORD PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 544  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 60 08 00	 and	 DWORD PTR [eax+8], 0
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c9		 leave
  0002d	c3		 ret	 0
??0?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -128						; size = 4
$T2 = -124						; size = 4
$T3 = -120						; size = 4
$T4 = -116						; size = 4
$T5 = -112						; size = 4
$T6 = -108						; size = 4
$T7 = -104						; size = 4
__Ptr$ = -100						; size = 4
__Count$ = -96						; size = 4
$T8 = -92						; size = 4
$T9 = -88						; size = 4
$T10 = -84						; size = 4
$T11 = -80						; size = 4
$T12 = -76						; size = 4
$T13 = -72						; size = 4
$T14 = -68						; size = 4
$T15 = -64						; size = 4
__Ptr$ = -60						; size = 4
$T16 = -56						; size = 4
$T17 = -52						; size = 4
$T18 = -48						; size = 4
$T19 = -44						; size = 4
$T20 = -40						; size = 4
$T21 = -36						; size = 4
$T22 = -32						; size = 4
$T23 = -28						; size = 4
$T24 = -24						; size = 4
$T25 = -20						; size = 4
tv149 = -16						; size = 4
__Block$26 = -12					; size = 4
_this$ = -8						; size = 4
$T27 = -1						; size = 1
?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy, COMDAT
; _this$ = ecx

; 1469 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  0000c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 88	 mov	 DWORD PTR $T3[ebp], eax

; 1522 :         return _Mypair._Get_first();

  00012	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00015	89 45 ec	 mov	 DWORD PTR $T25[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00018	8b 45 ec	 mov	 eax, DWORD PTR $T25[ebp]
  0001b	89 45 84	 mov	 DWORD PTR $T2[ebp], eax
$LN2@Tidy:

; 1534 :         return _Mypair._Myval2;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00021	89 45 e8	 mov	 DWORD PTR $T24[ebp], eax

; 1566 :         return _Get_data()._Mysize;

  00024	8b 45 e8	 mov	 eax, DWORD PTR $T24[ebp]
  00027	83 c0 10	 add	 eax, 16			; 00000010H
  0002a	89 45 e4	 mov	 DWORD PTR $T23[ebp], eax

; 1010 :         return _Mysize() == 0;

  0002d	8b 45 e4	 mov	 eax, DWORD PTR $T23[ebp]
  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	75 09		 jne	 SHORT $LN30@Tidy
  00035	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv149[ebp], 1
  0003c	eb 04		 jmp	 SHORT $LN31@Tidy
$LN30@Tidy:
  0003e	83 65 f0 00	 and	 DWORD PTR tv149[ebp], 0
$LN31@Tidy:
  00042	8a 45 f0	 mov	 al, BYTE PTR tv149[ebp]
  00045	88 45 ff	 mov	 BYTE PTR $T27[ebp], al

; 1470 :         _Orphan_all();
; 1471 : 
; 1472 :         _Alpty _Almap(_Getal());
; 1473 :         while (!empty()) {

  00048	0f b6 45 ff	 movzx	 eax, BYTE PTR $T27[ebp]
  0004c	85 c0		 test	 eax, eax
  0004e	75 0a		 jne	 SHORT $LN3@Tidy

; 1474 :             pop_back();

  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?pop_back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::pop_back

; 1475 :         }

  00058	eb c4		 jmp	 SHORT $LN2@Tidy
$LN3@Tidy:

; 1530 :         return _Mypair._Myval2;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	89 45 e0	 mov	 DWORD PTR $T22[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00060	8b 45 e0	 mov	 eax, DWORD PTR $T22[ebp]
  00063	83 c0 08	 add	 eax, 8
  00066	89 45 dc	 mov	 DWORD PTR $T21[ebp], eax

; 1476 : 
; 1477 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  00069	8b 45 dc	 mov	 eax, DWORD PTR $T21[ebp]
  0006c	8b 00		 mov	 eax, DWORD PTR [eax]
  0006e	89 45 f4	 mov	 DWORD PTR __Block$26[ebp], eax
$LN6@Tidy:
  00071	83 7d f4 00	 cmp	 DWORD PTR __Block$26[ebp], 0
  00075	0f 86 84 00 00
	00		 jbe	 $LN5@Tidy

; 1478 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  0007b	8b 45 f4	 mov	 eax, DWORD PTR __Block$26[ebp]
  0007e	48		 dec	 eax
  0007f	89 45 f4	 mov	 DWORD PTR __Block$26[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00082	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00085	89 45 d8	 mov	 DWORD PTR $T20[ebp], eax

; 1538 :         return _Get_data()._Map;

  00088	8b 45 d8	 mov	 eax, DWORD PTR $T20[ebp]
  0008b	83 c0 04	 add	 eax, 4
  0008e	89 45 d4	 mov	 DWORD PTR $T19[ebp], eax

; 1478 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  00091	8b 45 d4	 mov	 eax, DWORD PTR $T19[ebp]
  00094	8b 00		 mov	 eax, DWORD PTR [eax]
  00096	8b 4d f4	 mov	 ecx, DWORD PTR __Block$26[ebp]
  00099	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  0009d	74 5b		 je	 SHORT $LN7@Tidy

; 1530 :         return _Mypair._Myval2;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	89 45 d0	 mov	 DWORD PTR $T18[ebp], eax

; 1538 :         return _Get_data()._Map;

  000a5	8b 45 d0	 mov	 eax, DWORD PTR $T18[ebp]
  000a8	83 c0 04	 add	 eax, 4
  000ab	89 45 c8	 mov	 DWORD PTR $T16[ebp], eax

; 1522 :         return _Mypair._Get_first();

  000ae	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000b1	89 45 cc	 mov	 DWORD PTR $T17[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  000b4	8b 45 cc	 mov	 eax, DWORD PTR $T17[ebp]
  000b7	89 45 80	 mov	 DWORD PTR $T1[ebp], eax

; 1479 :                 _Getal().deallocate(_Map()[_Block], _DEQUESIZ);

  000ba	8b 45 c8	 mov	 eax, DWORD PTR $T16[ebp]
  000bd	8b 00		 mov	 eax, DWORD PTR [eax]
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __Block$26[ebp]
  000c2	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  000c5	89 45 c4	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c8	33 c0		 xor	 eax, eax
  000ca	40		 inc	 eax
  000cb	c1 e0 04	 shl	 eax, 4
  000ce	50		 push	 eax
  000cf	ff 75 c4	 push	 DWORD PTR __Ptr$[ebp]
  000d2	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000d7	59		 pop	 ecx
  000d8	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  000d9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	89 45 c0	 mov	 DWORD PTR $T15[ebp], eax

; 1538 :         return _Get_data()._Map;

  000df	8b 45 c0	 mov	 eax, DWORD PTR $T15[ebp]
  000e2	83 c0 04	 add	 eax, 4
  000e5	89 45 bc	 mov	 DWORD PTR $T14[ebp], eax

; 1480 :                 _Destroy_in_place(_Map()[_Block]);

  000e8	8b 45 bc	 mov	 eax, DWORD PTR $T14[ebp]
  000eb	8b 00		 mov	 eax, DWORD PTR [eax]
  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __Block$26[ebp]
  000f0	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$pair@MUD3DXVECTOR3@@@std@@@std@@YAXAAPAU?$pair@MUD3DXVECTOR3@@@0@@Z ; std::_Destroy_in_place<std::pair<float,D3DXVECTOR3> *>
  000f9	59		 pop	 ecx
$LN7@Tidy:

; 1481 :             }
; 1482 :         }

  000fa	e9 72 ff ff ff	 jmp	 $LN6@Tidy
$LN5@Tidy:

; 1530 :         return _Mypair._Myval2;

  000ff	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00102	89 45 b8	 mov	 DWORD PTR $T13[ebp], eax

; 1538 :         return _Get_data()._Map;

  00105	8b 45 b8	 mov	 eax, DWORD PTR $T13[ebp]
  00108	83 c0 04	 add	 eax, 4
  0010b	89 45 b4	 mov	 DWORD PTR $T12[ebp], eax

; 1483 : 
; 1484 :         if (_Map() != _Mapptr()) {

  0010e	8b 45 b4	 mov	 eax, DWORD PTR $T12[ebp]
  00111	83 38 00	 cmp	 DWORD PTR [eax], 0
  00114	74 3f		 je	 SHORT $LN8@Tidy

; 1530 :         return _Mypair._Myval2;

  00116	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00119	89 45 b0	 mov	 DWORD PTR $T11[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  0011c	8b 45 b0	 mov	 eax, DWORD PTR $T11[ebp]
  0011f	83 c0 08	 add	 eax, 8
  00122	89 45 a8	 mov	 DWORD PTR $T9[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00125	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00128	89 45 ac	 mov	 DWORD PTR $T10[ebp], eax

; 1538 :         return _Get_data()._Map;

  0012b	8b 45 ac	 mov	 eax, DWORD PTR $T10[ebp]
  0012e	83 c0 04	 add	 eax, 4
  00131	89 45 a4	 mov	 DWORD PTR $T8[ebp], eax

; 1485 :             _Almap.deallocate(_Map(), _Mapsize()); // free storage for map

  00134	8b 45 a8	 mov	 eax, DWORD PTR $T9[ebp]
  00137	8b 00		 mov	 eax, DWORD PTR [eax]
  00139	89 45 a0	 mov	 DWORD PTR __Count$[ebp], eax
  0013c	8b 45 a4	 mov	 eax, DWORD PTR $T8[ebp]
  0013f	8b 00		 mov	 eax, DWORD PTR [eax]
  00141	89 45 9c	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00144	8b 45 a0	 mov	 eax, DWORD PTR __Count$[ebp]
  00147	c1 e0 02	 shl	 eax, 2
  0014a	50		 push	 eax
  0014b	ff 75 9c	 push	 DWORD PTR __Ptr$[ebp]
  0014e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00153	59		 pop	 ecx
  00154	59		 pop	 ecx
$LN8@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  00155	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00158	89 45 98	 mov	 DWORD PTR $T7[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  0015b	8b 45 98	 mov	 eax, DWORD PTR $T7[ebp]
  0015e	83 c0 08	 add	 eax, 8
  00161	89 45 94	 mov	 DWORD PTR $T6[ebp], eax

; 1486 :         }
; 1487 : 
; 1488 :         _Mapsize() = 0;

  00164	8b 45 94	 mov	 eax, DWORD PTR $T6[ebp]
  00167	83 20 00	 and	 DWORD PTR [eax], 0

; 1530 :         return _Mypair._Myval2;

  0016a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0016d	89 45 90	 mov	 DWORD PTR $T5[ebp], eax

; 1538 :         return _Get_data()._Map;

  00170	8b 45 90	 mov	 eax, DWORD PTR $T5[ebp]
  00173	83 c0 04	 add	 eax, 4
  00176	89 45 8c	 mov	 DWORD PTR $T4[ebp], eax

; 1489 :         _Map()     = _Mapptr();

  00179	8b 45 8c	 mov	 eax, DWORD PTR $T4[ebp]
  0017c	83 20 00	 and	 DWORD PTR [eax], 0

; 1490 :     }

  0017f	c9		 leave
  00180	c3		 ret	 0
?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
$T1 = -164						; size = 4
__Max_possible$2 = -160					; size = 4
$T3 = -156						; size = 4
$T4 = -152						; size = 4
$T5 = -148						; size = 4
$T6 = -144						; size = 4
$T7 = -140						; size = 4
__Ptr$ = -136						; size = 4
__Count$ = -132						; size = 4
$T8 = -128						; size = 4
$T9 = -124						; size = 4
$T10 = -120						; size = 4
$T11 = -116						; size = 4
$T12 = -112						; size = 4
$T13 = -108						; size = 4
$T14 = -104						; size = 4
$T15 = -100						; size = 4
$T16 = -96						; size = 4
$T17 = -92						; size = 4
$T18 = -88						; size = 4
$T19 = -84						; size = 4
$T20 = -80						; size = 4
$T21 = -76						; size = 4
$T22 = -72						; size = 4
$T23 = -68						; size = 4
$T24 = -64						; size = 4
$T25 = -60						; size = 4
$T26 = -56						; size = 4
$T27 = -52						; size = 4
$T28 = -48						; size = 4
$T29 = -44						; size = 4
$T30 = -40						; size = 4
$T31 = -36						; size = 4
$T32 = -32						; size = 4
$T33 = -28						; size = 4
$T34 = -24						; size = 4
$T35 = -20						; size = 4
$T36 = -16						; size = 4
$T37 = -12						; size = 4
$T38 = -8						; size = 4
$T39 = -4						; size = 4
$T40 = 0						; size = 4
$T41 = 4						; size = 4
$T42 = 8						; size = 4
$T43 = 12						; size = 4
$T44 = 16						; size = 4
$T45 = 20						; size = 4
$T46 = 24						; size = 4
$T47 = 28						; size = 4
$T48 = 32						; size = 4
$T49 = 36						; size = 4
$T50 = 40						; size = 4
$T51 = 44						; size = 4
$T52 = 48						; size = 4
$T53 = 52						; size = 4
$T54 = 56						; size = 4
$T55 = 60						; size = 4
$T56 = 64						; size = 4
__Count$ = 68						; size = 4
tv230 = 72						; size = 4
$T57 = 76						; size = 4
$T58 = 80						; size = 4
tv73 = 84						; size = 4
tv212 = 88						; size = 4
__Overflow_is_possible$59 = 95				; size = 1
__Newmap$ = 96						; size = 4
__Newsize$ = 100					; size = 4
__Myboff$ = 104						; size = 4
__Myptr$ = 108						; size = 4
_this$ = 112						; size = 4
__Count$ = 124						; size = 4
?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap, COMDAT
; _this$ = ecx

; 1430 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8d 6c 24 8c	 lea	 ebp, DWORD PTR [esp-116]
  00005	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0000b	89 4d 70	 mov	 DWORD PTR _this$[ebp], ecx

; 1522 :         return _Mypair._Get_first();

  0000e	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00011	89 45 40	 mov	 DWORD PTR $T56[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00014	8b 45 40	 mov	 eax, DWORD PTR $T56[ebp]
  00017	89 85 68 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0001d	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00020	89 45 3c	 mov	 DWORD PTR $T55[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00023	8b 45 3c	 mov	 eax, DWORD PTR $T55[ebp]
  00026	83 c0 08	 add	 eax, 8
  00029	89 45 38	 mov	 DWORD PTR $T54[ebp], eax

; 1431 :         static_assert(1 < _DEQUEMAPSIZ, "The _Xlen() test should always be performed.");
; 1432 : 
; 1433 :         _Alpty _Almap(_Getal());
; 1434 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  0002c	8b 45 38	 mov	 eax, DWORD PTR $T54[ebp]
  0002f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00032	76 19		 jbe	 SHORT $LN10@Growmap

; 1530 :         return _Mypair._Myval2;

  00034	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 34	 mov	 DWORD PTR $T53[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  0003a	8b 45 34	 mov	 eax, DWORD PTR $T53[ebp]
  0003d	83 c0 08	 add	 eax, 8
  00040	89 45 30	 mov	 DWORD PTR $T52[ebp], eax

; 1431 :         static_assert(1 < _DEQUEMAPSIZ, "The _Xlen() test should always be performed.");
; 1432 : 
; 1433 :         _Alpty _Almap(_Getal());
; 1434 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  00043	8b 45 30	 mov	 eax, DWORD PTR $T52[ebp]
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	89 45 54	 mov	 DWORD PTR tv73[ebp], eax
  0004b	eb 07		 jmp	 SHORT $LN11@Growmap
$LN10@Growmap:
  0004d	c7 45 54 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
$LN11@Growmap:
  00054	8b 45 54	 mov	 eax, DWORD PTR tv73[ebp]
  00057	89 45 64	 mov	 DWORD PTR __Newsize$[ebp], eax
$LN2@Growmap:

; 1530 :         return _Mypair._Myval2;

  0005a	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	89 45 2c	 mov	 DWORD PTR $T51[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00060	8b 45 2c	 mov	 eax, DWORD PTR $T51[ebp]
  00063	83 c0 08	 add	 eax, 8
  00066	89 45 28	 mov	 DWORD PTR $T50[ebp], eax

; 1435 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _DEQUEMAPSIZ) {

  00069	8b 45 28	 mov	 eax, DWORD PTR $T50[ebp]
  0006c	8b 4d 64	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  0006f	2b 08		 sub	 ecx, DWORD PTR [eax]
  00071	3b 4d 7c	 cmp	 ecx, DWORD PTR __Count$[ebp]
  00074	72 06		 jb	 SHORT $LN4@Growmap
  00076	83 7d 64 08	 cmp	 DWORD PTR __Newsize$[ebp], 8
  0007a	73 6d		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1526 :         return _Mypair._Get_first();

  0007c	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0007f	89 45 24	 mov	 DWORD PTR $T49[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1526 :         return _Mypair._Get_first();

  00082	8b 45 24	 mov	 eax, DWORD PTR $T49[ebp]
  00085	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0008b	c7 45 50 ff ff
	ff 0f		 mov	 DWORD PTR $T58[ebp], 268435455 ; 0fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00092	c7 45 20 ff ff
	ff 7f		 mov	 DWORD PTR $T48[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1005 :         return (_STD min)(

  00099	8b 45 20	 mov	 eax, DWORD PTR $T48[ebp]
  0009c	89 45 4c	 mov	 DWORD PTR $T57[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0009f	8b 45 50	 mov	 eax, DWORD PTR $T58[ebp]
  000a2	3b 45 4c	 cmp	 eax, DWORD PTR $T57[ebp]
  000a5	73 08		 jae	 SHORT $LN56@Growmap
  000a7	8d 45 50	 lea	 eax, DWORD PTR $T58[ebp]
  000aa	89 45 48	 mov	 DWORD PTR tv230[ebp], eax
  000ad	eb 06		 jmp	 SHORT $LN57@Growmap
$LN56@Growmap:
  000af	8d 45 4c	 lea	 eax, DWORD PTR $T57[ebp]
  000b2	89 45 48	 mov	 DWORD PTR tv230[ebp], eax
$LN57@Growmap:
  000b5	8b 45 48	 mov	 eax, DWORD PTR tv230[ebp]
  000b8	89 45 1c	 mov	 DWORD PTR $T47[ebp], eax
  000bb	8b 45 1c	 mov	 eax, DWORD PTR $T47[ebp]
  000be	89 45 18	 mov	 DWORD PTR $T46[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1005 :         return (_STD min)(

  000c1	8b 45 18	 mov	 eax, DWORD PTR $T46[ebp]
  000c4	8b 00		 mov	 eax, DWORD PTR [eax]
  000c6	89 45 14	 mov	 DWORD PTR $T45[ebp], eax

; 1436 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1437 :             if (max_size() / _DEQUESIZ - _Newsize < _Newsize) {

  000c9	8b 45 14	 mov	 eax, DWORD PTR $T45[ebp]
  000cc	2b 45 64	 sub	 eax, DWORD PTR __Newsize$[ebp]
  000cf	3b 45 64	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  000d2	73 08		 jae	 SHORT $LN5@Growmap

; 1438 :                 _Xlen(); // result too long

  000d4	8b 4d 70	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	e8 00 00 00 00	 call	 ?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
$LN5@Growmap:

; 1439 :             }
; 1440 : 
; 1441 :             _Newsize *= 2;

  000dc	8b 45 64	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000df	d1 e0		 shl	 eax, 1
  000e1	89 45 64	 mov	 DWORD PTR __Newsize$[ebp], eax

; 1442 :         }

  000e4	e9 71 ff ff ff	 jmp	 $LN2@Growmap
$LN3@Growmap:

; 1530 :         return _Mypair._Myval2;

  000e9	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	89 45 10	 mov	 DWORD PTR $T44[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  000ef	8b 45 10	 mov	 eax, DWORD PTR $T44[ebp]
  000f2	83 c0 08	 add	 eax, 8
  000f5	89 45 0c	 mov	 DWORD PTR $T43[ebp], eax

; 1443 :         _Count = _Newsize - _Mapsize();

  000f8	8b 45 0c	 mov	 eax, DWORD PTR $T43[ebp]
  000fb	8b 4d 64	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  000fe	2b 08		 sub	 ecx, DWORD PTR [eax]
  00100	89 4d 7c	 mov	 DWORD PTR __Count$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  00103	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00106	89 45 08	 mov	 DWORD PTR $T42[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  00109	8b 45 08	 mov	 eax, DWORD PTR $T42[ebp]
  0010c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0010f	89 45 04	 mov	 DWORD PTR $T41[ebp], eax

; 1444 : 
; 1445 :         size_type _Myboff = _Myoff() / _DEQUESIZ;

  00112	8b 45 04	 mov	 eax, DWORD PTR $T41[ebp]
  00115	8b 00		 mov	 eax, DWORD PTR [eax]
  00117	89 45 68	 mov	 DWORD PTR __Myboff$[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0011a	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	89 45 00	 mov	 DWORD PTR $T40[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00120	8b 45 00	 mov	 eax, DWORD PTR $T40[ebp]
  00123	83 c0 08	 add	 eax, 8
  00126	89 45 fc	 mov	 DWORD PTR $T39[ebp], eax

; 1446 :         _Mapptr _Newmap   = _Almap.allocate(_Mapsize() + _Count);

  00129	8b 45 fc	 mov	 eax, DWORD PTR $T39[ebp]
  0012c	8b 00		 mov	 eax, DWORD PTR [eax]
  0012e	03 45 7c	 add	 eax, DWORD PTR __Count$[ebp]
  00131	89 45 44	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00134	c6 45 5f 01	 mov	 BYTE PTR __Overflow_is_possible$59[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00138	c7 85 60 ff ff
	ff ff ff ff 3f	 mov	 DWORD PTR __Max_possible$2[ebp], 1073741823 ; 3fffffffH

; 60   :         if (_Count > _Max_possible) {

  00142	81 7d 44 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  00149	76 05		 jbe	 SHORT $LN80@Growmap

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0014b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN80@Growmap:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00150	8b 45 44	 mov	 eax, DWORD PTR __Count$[ebp]
  00153	c1 e0 02	 shl	 eax, 2
  00156	89 45 f8	 mov	 DWORD PTR $T38[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00159	ff 75 f8	 push	 DWORD PTR $T38[ebp]
  0015c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00161	59		 pop	 ecx
  00162	89 45 60	 mov	 DWORD PTR __Newmap$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1447 :         _Mapptr _Myptr    = _Newmap + _Myboff;

  00165	8b 45 68	 mov	 eax, DWORD PTR __Myboff$[ebp]
  00168	8b 4d 60	 mov	 ecx, DWORD PTR __Newmap$[ebp]
  0016b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0016e	89 45 6c	 mov	 DWORD PTR __Myptr$[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00171	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00174	89 45 f4	 mov	 DWORD PTR $T37[ebp], eax

; 1538 :         return _Get_data()._Map;

  00177	8b 45 f4	 mov	 eax, DWORD PTR $T37[ebp]
  0017a	83 c0 04	 add	 eax, 4
  0017d	89 45 e4	 mov	 DWORD PTR $T33[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00180	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00183	89 45 f0	 mov	 DWORD PTR $T36[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00186	8b 45 f0	 mov	 eax, DWORD PTR $T36[ebp]
  00189	83 c0 08	 add	 eax, 8
  0018c	89 45 e8	 mov	 DWORD PTR $T34[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0018f	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00192	89 45 ec	 mov	 DWORD PTR $T35[ebp], eax

; 1538 :         return _Get_data()._Map;

  00195	8b 45 ec	 mov	 eax, DWORD PTR $T35[ebp]
  00198	83 c0 04	 add	 eax, 4
  0019b	89 45 e0	 mov	 DWORD PTR $T32[ebp], eax

; 1448 : 
; 1449 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  0019e	ff 75 6c	 push	 DWORD PTR __Myptr$[ebp]
  001a1	8b 45 e8	 mov	 eax, DWORD PTR $T34[ebp]
  001a4	8b 00		 mov	 eax, DWORD PTR [eax]
  001a6	8b 4d e4	 mov	 ecx, DWORD PTR $T33[ebp]
  001a9	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001ab	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  001ae	50		 push	 eax
  001af	8b 45 e0	 mov	 eax, DWORD PTR $T32[ebp]
  001b2	8b 00		 mov	 eax, DWORD PTR [eax]
  001b4	8b 4d 68	 mov	 ecx, DWORD PTR __Myboff$[ebp]
  001b7	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
  001c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c3	89 45 6c	 mov	 DWORD PTR __Myptr$[ebp], eax

; 1450 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  001c6	8b 45 68	 mov	 eax, DWORD PTR __Myboff$[ebp]
  001c9	3b 45 7c	 cmp	 eax, DWORD PTR __Count$[ebp]
  001cc	77 60		 ja	 SHORT $LN6@Growmap

; 1530 :         return _Mypair._Myval2;

  001ce	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  001d1	89 45 dc	 mov	 DWORD PTR $T31[ebp], eax

; 1538 :         return _Get_data()._Map;

  001d4	8b 45 dc	 mov	 eax, DWORD PTR $T31[ebp]
  001d7	83 c0 04	 add	 eax, 4
  001da	89 45 d4	 mov	 DWORD PTR $T29[ebp], eax

; 1530 :         return _Mypair._Myval2;

  001dd	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  001e0	89 45 d8	 mov	 DWORD PTR $T30[ebp], eax

; 1538 :         return _Get_data()._Map;

  001e3	8b 45 d8	 mov	 eax, DWORD PTR $T30[ebp]
  001e6	83 c0 04	 add	 eax, 4
  001e9	89 45 d0	 mov	 DWORD PTR $T28[ebp], eax

; 1451 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  001ec	ff 75 6c	 push	 DWORD PTR __Myptr$[ebp]
  001ef	8b 45 d4	 mov	 eax, DWORD PTR $T29[ebp]
  001f2	8b 00		 mov	 eax, DWORD PTR [eax]
  001f4	8b 4d 68	 mov	 ecx, DWORD PTR __Myboff$[ebp]
  001f7	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  001fa	50		 push	 eax
  001fb	8b 45 d0	 mov	 eax, DWORD PTR $T28[ebp]
  001fe	ff 30		 push	 DWORD PTR [eax]
  00200	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
  00205	83 c4 0c	 add	 esp, 12			; 0000000cH
  00208	89 45 6c	 mov	 DWORD PTR __Myptr$[ebp], eax

; 1452 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  0020b	8b 45 7c	 mov	 eax, DWORD PTR __Count$[ebp]
  0020e	2b 45 68	 sub	 eax, DWORD PTR __Myboff$[ebp]
  00211	50		 push	 eax
  00212	ff 75 6c	 push	 DWORD PTR __Myptr$[ebp]
  00215	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
  0021a	59		 pop	 ecx
  0021b	59		 pop	 ecx

; 1453 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new

  0021c	ff 75 68	 push	 DWORD PTR __Myboff$[ebp]
  0021f	ff 75 60	 push	 DWORD PTR __Newmap$[ebp]
  00222	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
  00227	59		 pop	 ecx
  00228	59		 pop	 ecx

; 1454 :         } else { // increment not greater than offset of initial block

  00229	e9 8b 00 00 00	 jmp	 $LN7@Growmap
$LN6@Growmap:

; 1530 :         return _Mypair._Myval2;

  0022e	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00231	89 45 cc	 mov	 DWORD PTR $T27[ebp], eax

; 1538 :         return _Get_data()._Map;

  00234	8b 45 cc	 mov	 eax, DWORD PTR $T27[ebp]
  00237	83 c0 04	 add	 eax, 4
  0023a	89 45 c4	 mov	 DWORD PTR $T25[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0023d	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00240	89 45 c8	 mov	 DWORD PTR $T26[ebp], eax

; 1538 :         return _Get_data()._Map;

  00243	8b 45 c8	 mov	 eax, DWORD PTR $T26[ebp]
  00246	83 c0 04	 add	 eax, 4
  00249	89 45 c0	 mov	 DWORD PTR $T24[ebp], eax

; 1455 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  0024c	ff 75 6c	 push	 DWORD PTR __Myptr$[ebp]
  0024f	8b 45 c4	 mov	 eax, DWORD PTR $T25[ebp]
  00252	8b 00		 mov	 eax, DWORD PTR [eax]
  00254	8b 4d 7c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00257	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0025a	50		 push	 eax
  0025b	8b 45 c0	 mov	 eax, DWORD PTR $T24[ebp]
  0025e	ff 30		 push	 DWORD PTR [eax]
  00260	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
  00265	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1530 :         return _Mypair._Myval2;

  00268	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0026b	89 45 bc	 mov	 DWORD PTR $T23[ebp], eax

; 1538 :         return _Get_data()._Map;

  0026e	8b 45 bc	 mov	 eax, DWORD PTR $T23[ebp]
  00271	83 c0 04	 add	 eax, 4
  00274	89 45 b4	 mov	 DWORD PTR $T21[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00277	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0027a	89 45 b8	 mov	 DWORD PTR $T22[ebp], eax

; 1538 :         return _Get_data()._Map;

  0027d	8b 45 b8	 mov	 eax, DWORD PTR $T22[ebp]
  00280	83 c0 04	 add	 eax, 4
  00283	89 45 b0	 mov	 DWORD PTR $T20[ebp], eax

; 1456 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  00286	ff 75 60	 push	 DWORD PTR __Newmap$[ebp]
  00289	8b 45 b4	 mov	 eax, DWORD PTR $T21[ebp]
  0028c	8b 00		 mov	 eax, DWORD PTR [eax]
  0028e	8b 4d 68	 mov	 ecx, DWORD PTR __Myboff$[ebp]
  00291	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00294	50		 push	 eax
  00295	8b 45 b0	 mov	 eax, DWORD PTR $T20[ebp]
  00298	8b 00		 mov	 eax, DWORD PTR [eax]
  0029a	8b 4d 7c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0029d	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  002a0	50		 push	 eax
  002a1	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@0PAPAU10@@Z ; std::uninitialized_copy<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
  002a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a9	89 45 6c	 mov	 DWORD PTR __Myptr$[ebp], eax

; 1457 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  002ac	ff 75 7c	 push	 DWORD PTR __Count$[ebp]
  002af	ff 75 6c	 push	 DWORD PTR __Myptr$[ebp]
  002b2	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAU?$pair@MUD3DXVECTOR3@@@std@@I@std@@YAPAPAU?$pair@MUD3DXVECTOR3@@@0@PAPAU10@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<std::pair<float,D3DXVECTOR3> * *,unsigned int>
  002b7	59		 pop	 ecx
  002b8	59		 pop	 ecx
$LN7@Growmap:

; 1530 :         return _Mypair._Myval2;

  002b9	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  002bc	89 45 ac	 mov	 DWORD PTR $T19[ebp], eax

; 1538 :         return _Get_data()._Map;

  002bf	8b 45 ac	 mov	 eax, DWORD PTR $T19[ebp]
  002c2	83 c0 04	 add	 eax, 4
  002c5	89 45 9c	 mov	 DWORD PTR $T15[ebp], eax

; 1530 :         return _Mypair._Myval2;

  002c8	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  002cb	89 45 a8	 mov	 DWORD PTR $T18[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  002ce	8b 45 a8	 mov	 eax, DWORD PTR $T18[ebp]
  002d1	83 c0 08	 add	 eax, 8
  002d4	89 45 a0	 mov	 DWORD PTR $T16[ebp], eax

; 1530 :         return _Mypair._Myval2;

  002d7	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  002da	89 45 a4	 mov	 DWORD PTR $T17[ebp], eax

; 1538 :         return _Get_data()._Map;

  002dd	8b 45 a4	 mov	 eax, DWORD PTR $T17[ebp]
  002e0	83 c0 04	 add	 eax, 4
  002e3	89 45 98	 mov	 DWORD PTR $T14[ebp], eax

; 1458 :         }
; 1459 : 
; 1460 :         _Destroy_range(_Map() + _Myboff, _Map() + _Mapsize());

  002e6	8b 45 a0	 mov	 eax, DWORD PTR $T16[ebp]
  002e9	8b 00		 mov	 eax, DWORD PTR [eax]
  002eb	8b 4d 9c	 mov	 ecx, DWORD PTR $T15[ebp]
  002ee	8b 09		 mov	 ecx, DWORD PTR [ecx]
  002f0	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  002f3	50		 push	 eax
  002f4	8b 45 98	 mov	 eax, DWORD PTR $T14[ebp]
  002f7	8b 00		 mov	 eax, DWORD PTR [eax]
  002f9	8b 4d 68	 mov	 ecx, DWORD PTR __Myboff$[ebp]
  002fc	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  002ff	50		 push	 eax
  00300	e8 00 00 00 00	 call	 ??$_Destroy_range@PAPAU?$pair@MUD3DXVECTOR3@@@std@@PAPAU12@@std@@YAXPAPAU?$pair@MUD3DXVECTOR3@@@0@QAPAU10@@Z ; std::_Destroy_range<std::pair<float,D3DXVECTOR3> * *,std::pair<float,D3DXVECTOR3> * *>
  00305	59		 pop	 ecx
  00306	59		 pop	 ecx

; 1530 :         return _Mypair._Myval2;

  00307	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0030a	89 45 94	 mov	 DWORD PTR $T13[ebp], eax

; 1538 :         return _Get_data()._Map;

  0030d	8b 45 94	 mov	 eax, DWORD PTR $T13[ebp]
  00310	83 c0 04	 add	 eax, 4
  00313	89 45 90	 mov	 DWORD PTR $T12[ebp], eax

; 1461 :         if (_Map() != _Mapptr()) {

  00316	8b 45 90	 mov	 eax, DWORD PTR $T12[ebp]
  00319	83 38 00	 cmp	 DWORD PTR [eax], 0
  0031c	74 4b		 je	 SHORT $LN8@Growmap

; 1530 :         return _Mypair._Myval2;

  0031e	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00321	89 45 8c	 mov	 DWORD PTR $T11[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00324	8b 45 8c	 mov	 eax, DWORD PTR $T11[ebp]
  00327	83 c0 08	 add	 eax, 8
  0032a	89 45 84	 mov	 DWORD PTR $T9[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0032d	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00330	89 45 88	 mov	 DWORD PTR $T10[ebp], eax

; 1538 :         return _Get_data()._Map;

  00333	8b 45 88	 mov	 eax, DWORD PTR $T10[ebp]
  00336	83 c0 04	 add	 eax, 4
  00339	89 45 80	 mov	 DWORD PTR $T8[ebp], eax

; 1462 :             _Almap.deallocate(_Map(), _Mapsize()); // free storage for old

  0033c	8b 45 84	 mov	 eax, DWORD PTR $T9[ebp]
  0033f	8b 00		 mov	 eax, DWORD PTR [eax]
  00341	89 85 7c ff ff
	ff		 mov	 DWORD PTR __Count$[ebp], eax
  00347	8b 45 80	 mov	 eax, DWORD PTR $T8[ebp]
  0034a	8b 00		 mov	 eax, DWORD PTR [eax]
  0034c	89 85 78 ff ff
	ff		 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00352	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR __Count$[ebp]
  00358	c1 e0 02	 shl	 eax, 2
  0035b	50		 push	 eax
  0035c	ff b5 78 ff ff
	ff		 push	 DWORD PTR __Ptr$[ebp]
  00362	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00367	59		 pop	 ecx
  00368	59		 pop	 ecx
$LN8@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  00369	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0036c	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T7[ebp], eax

; 1538 :         return _Get_data()._Map;

  00372	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  00378	83 c0 04	 add	 eax, 4
  0037b	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax

; 1463 :         }
; 1464 : 
; 1465 :         _Map() = _Newmap; // point at new

  00381	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00387	8b 4d 60	 mov	 ecx, DWORD PTR __Newmap$[ebp]
  0038a	89 08		 mov	 DWORD PTR [eax], ecx

; 1466 :         _Mapsize() += _Count;

  0038c	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00392	89 45 58	 mov	 DWORD PTR tv212[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00395	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00398	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  0039e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  003a4	83 c0 08	 add	 eax, 8
  003a7	89 45 58	 mov	 DWORD PTR tv212[ebp], eax

; 1466 :         _Mapsize() += _Count;

  003aa	8b 45 58	 mov	 eax, DWORD PTR tv212[ebp]
  003ad	8b 00		 mov	 eax, DWORD PTR [eax]
  003af	03 45 7c	 add	 eax, DWORD PTR __Count$[ebp]
  003b2	8b 4d 58	 mov	 ecx, DWORD PTR tv212[ebp]
  003b5	89 01		 mov	 DWORD PTR [ecx], eax
$LN83@Growmap:

; 1467 :     }

  003b7	83 c5 74	 add	 ebp, 116		; 00000074H
  003ba	c9		 leave
  003bb	c2 04 00	 ret	 4
?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen, COMDAT
; _this$ = ecx

; 1422 :     [[noreturn]] void _Xlen() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1423 :         _Xlength_error("deque<T> too long");

  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  0000c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1424 :     }

  00011	c9		 leave
  00012	c3		 ret	 0
?_Xlen@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@ABEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?pop_back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
$T2 = -76						; size = 4
$T3 = -72						; size = 4
$T4 = -68						; size = 4
$T5 = -64						; size = 4
$T6 = -60						; size = 4
$T7 = -56						; size = 4
__Ptr$ = -52						; size = 4
__Block$ = -48						; size = 4
$T8 = -44						; size = 4
$T9 = -40						; size = 4
$T10 = -36						; size = 4
$T11 = -32						; size = 4
$T12 = -28						; size = 4
$T13 = -24						; size = 4
$T14 = -20						; size = 4
$T15 = -16						; size = 4
__Newoff$ = -12						; size = 4
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?pop_back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::pop_back, COMDAT
; _this$ = ecx

; 1126 :     void pop_back() noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR $T15[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T15[ebp]
  00012	83 c0 0c	 add	 eax, 12			; 0000000cH
  00015	89 45 e8	 mov	 DWORD PTR $T13[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	89 45 ec	 mov	 DWORD PTR $T14[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  0001e	8b 45 ec	 mov	 eax, DWORD PTR $T14[ebp]
  00021	83 c0 10	 add	 eax, 16			; 00000010H
  00024	89 45 e4	 mov	 DWORD PTR $T12[ebp], eax

; 1127 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1128 :         if (empty()) {
; 1129 :             _STL_REPORT_ERROR("deque empty before pop");
; 1130 :         } else { // something to erase, do it
; 1131 :             size_type _Newoff = _Myoff() + _Mysize() - 1;
; 1132 :             _Orphan_off(_Newoff);
; 1133 :             size_type _Block = _Getblock(_Newoff);
; 1134 :             _Alty_traits::destroy(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ));
; 1135 :             if (--_Mysize() == 0) {
; 1136 :                 _Myoff() = 0;
; 1137 :             }
; 1138 :         }
; 1139 : 
; 1140 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1141 :         size_type _Newoff = _Myoff() + _Mysize() - 1;

  00027	8b 45 e8	 mov	 eax, DWORD PTR $T13[ebp]
  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	8b 4d e4	 mov	 ecx, DWORD PTR $T12[ebp]
  0002f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00031	8d 44 08 ff	 lea	 eax, DWORD PTR [eax+ecx-1]
  00035	89 45 f4	 mov	 DWORD PTR __Newoff$[ebp], eax

; 1534 :         return _Mypair._Myval2;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	89 45 e0	 mov	 DWORD PTR $T11[ebp], eax

; 548  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  0003e	8b 45 e0	 mov	 eax, DWORD PTR $T11[ebp]
  00041	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00044	48		 dec	 eax
  00045	23 45 f4	 and	 eax, DWORD PTR __Newoff$[ebp]
  00048	89 45 dc	 mov	 DWORD PTR $T10[ebp], eax

; 1514 :         return _Get_data()._Getblock(_Off);

  0004b	8b 45 dc	 mov	 eax, DWORD PTR $T10[ebp]
  0004e	89 45 d0	 mov	 DWORD PTR __Block$[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	89 45 d8	 mov	 DWORD PTR $T9[ebp], eax

; 1538 :         return _Get_data()._Map;

  00057	8b 45 d8	 mov	 eax, DWORD PTR $T9[ebp]
  0005a	83 c0 04	 add	 eax, 4
  0005d	89 45 d4	 mov	 DWORD PTR $T8[ebp], eax

; 1142 :         size_type _Block  = _Getblock(_Newoff);
; 1143 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ));

  00060	8b 45 f4	 mov	 eax, DWORD PTR __Newoff$[ebp]
  00063	33 d2		 xor	 edx, edx
  00065	33 c9		 xor	 ecx, ecx
  00067	41		 inc	 ecx
  00068	f7 f1		 div	 ecx
  0006a	c1 e2 04	 shl	 edx, 4
  0006d	8b 45 d4	 mov	 eax, DWORD PTR $T8[ebp]
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	8b 4d d0	 mov	 ecx, DWORD PTR __Block$[ebp]
  00075	03 14 88	 add	 edx, DWORD PTR [eax+ecx*4]
  00078	89 55 cc	 mov	 DWORD PTR __Ptr$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0007b	8b 45 cc	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0007e	89 45 b8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00081	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00084	89 45 c8	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00087	8b 45 c8	 mov	 eax, DWORD PTR $T7[ebp]
  0008a	89 45 b4	 mov	 DWORD PTR $T2[ebp], eax

; 1144 :         if (--_Mysize() == 0) {

  0008d	8b 45 b0	 mov	 eax, DWORD PTR $T1[ebp]
  00090	89 45 f8	 mov	 DWORD PTR tv88[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00096	89 45 c4	 mov	 DWORD PTR $T6[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  00099	8b 45 c4	 mov	 eax, DWORD PTR $T6[ebp]
  0009c	83 c0 10	 add	 eax, 16			; 00000010H
  0009f	89 45 f8	 mov	 DWORD PTR tv88[ebp], eax

; 1144 :         if (--_Mysize() == 0) {

  000a2	8b 45 f8	 mov	 eax, DWORD PTR tv88[ebp]
  000a5	8b 00		 mov	 eax, DWORD PTR [eax]
  000a7	48		 dec	 eax
  000a8	8b 4d f8	 mov	 ecx, DWORD PTR tv88[ebp]
  000ab	89 01		 mov	 DWORD PTR [ecx], eax
  000ad	8b 45 f8	 mov	 eax, DWORD PTR tv88[ebp]
  000b0	83 38 00	 cmp	 DWORD PTR [eax], 0
  000b3	75 15		 jne	 SHORT $LN3@pop_back

; 1530 :         return _Mypair._Myval2;

  000b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	89 45 c0	 mov	 DWORD PTR $T5[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  000bb	8b 45 c0	 mov	 eax, DWORD PTR $T5[ebp]
  000be	83 c0 0c	 add	 eax, 12			; 0000000cH
  000c1	89 45 bc	 mov	 DWORD PTR $T4[ebp], eax

; 1145 :             _Myoff() = 0;

  000c4	8b 45 bc	 mov	 eax, DWORD PTR $T4[ebp]
  000c7	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@pop_back:

; 1146 :         }
; 1147 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1148 :     }

  000ca	c9		 leave
  000cb	c3		 ret	 0
?pop_back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::pop_back
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEAAU?$pair@MUD3DXVECTOR3@@@2@XZ
_TEXT	SEGMENT
$T1 = -36						; size = 8
$T2 = -28						; size = 8
__First$ = -20						; size = 8
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
?back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEAAU?$pair@MUD3DXVECTOR3@@@2@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::back, COMDAT
; _this$ = ecx

; 1063 :     _NODISCARD reference back() noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1064 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1065 :         _STL_VERIFY(!empty(), "back() called on empty deque");
; 1066 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1067 : 
; 1068 :         return *_Prev_iter(_Unchecked_end());

  00009	8d 45 dc	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?_Unchecked_end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Unchecked_end
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001a	89 4d ec	 mov	 DWORD PTR __First$[ebp], ecx
  0001d	89 45 f0	 mov	 DWORD PTR __First$[ebp+4], eax

; 76   :         --_Myoff;

  00020	8b 45 f0	 mov	 eax, DWORD PTR __First$[ebp+4]
  00023	48		 dec	 eax
  00024	89 45 f0	 mov	 DWORD PTR __First$[ebp+4], eax

; 191  :         return *this;

  00027	8d 45 ec	 lea	 eax, DWORD PTR __First$[ebp]
  0002a	89 45 f8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR $T4[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	89 4d e4	 mov	 DWORD PTR $T2[ebp], ecx
  00038	89 45 e8	 mov	 DWORD PTR $T2[ebp+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 171  :         return const_cast<reference>(_Mybase::operator*());

  0003b	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0003e	e8 00 00 00 00	 call	 ??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
  00043	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax

; 1064 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1065 :         _STL_VERIFY(!empty(), "back() called on empty deque");
; 1066 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1067 : 
; 1068 :         return *_Prev_iter(_Unchecked_end());

  00046	8b 45 f4	 mov	 eax, DWORD PTR $T3[ebp]

; 1069 :     }

  00049	c9		 leave
  0004a	c3		 ret	 0
?back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEAAU?$pair@MUD3DXVECTOR3@@@2@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::back
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?_Unchecked_end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___param0$ = -32					; size = 4
$T1 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
$T5 = -12						; size = 4
$T6 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Unchecked_end, COMDAT
; _this$ = ecx

; 921  :     _Unchecked_iterator _Unchecked_end() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T6[ebp]
  00012	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	89 45 f4	 mov	 DWORD PTR $T5[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  0001b	8b 45 f4	 mov	 eax, DWORD PTR $T5[ebp]
  0001e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00021	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  0002a	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]
  0002d	83 c0 10	 add	 eax, 16			; 00000010H
  00030	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00033	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  0003b	03 01		 add	 eax, DWORD PTR [ecx]
  0003d	89 45 e0	 mov	 DWORD PTR ___param0$[ebp], eax

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00040	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00043	8b 4d e4	 mov	 ecx, DWORD PTR $T1[ebp]
  00046	89 08		 mov	 DWORD PTR [eax], ecx
  00048	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004b	8b 4d e0	 mov	 ecx, DWORD PTR ___param0$[ebp]
  0004e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00051	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 923  :     }

  00054	c9		 leave
  00055	c2 04 00	 ret	 4
?_Unchecked_end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__Parent_proxy$1 = -36					; size = 4
___param0$ = -32					; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
$T6 = -12						; size = 4
$T7 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::end, COMDAT
; _this$ = ecx

; 905  :     _NODISCARD iterator end() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000f	8b 45 f4	 mov	 eax, DWORD PTR $T6[ebp]
  00012	89 45 f8	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	89 45 f0	 mov	 DWORD PTR $T5[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  0001b	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  0001e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00021	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	89 45 ec	 mov	 DWORD PTR $T4[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  0002a	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
  0002d	83 c0 10	 add	 eax, 16			; 00000010H
  00030	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax

; 906  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00033	8b 45 e8	 mov	 eax, DWORD PTR $T3[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	8b 4d e4	 mov	 ecx, DWORD PTR $T2[ebp]
  0003b	03 01		 add	 eax, DWORD PTR [ecx]
  0003d	89 45 e0	 mov	 DWORD PTR ___param0$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1126 :     _Iterator_base12() noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) {} // construct orphaned iterator

  00040	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00043	83 20 00	 and	 DWORD PTR [eax], 0
  00046	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00049	83 60 04 00	 and	 DWORD PTR [eax+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 256  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  0004d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00050	8b 4d e0	 mov	 ecx, DWORD PTR ___param0$[ebp]
  00053	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1157 :         if (_Parent) {

  00056	83 7d f8 00	 cmp	 DWORD PTR $T7[ebp], 0
  0005a	74 12		 je	 SHORT $LN34@end

; 1158 :             // have a parent, do adoption
; 1159 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

  0005c	8b 45 f8	 mov	 eax, DWORD PTR $T7[ebp]
  0005f	8b 00		 mov	 eax, DWORD PTR [eax]
  00061	89 45 dc	 mov	 DWORD PTR __Parent_proxy$1[ebp], eax

; 1160 : 
; 1161 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1162 :             if (_Myproxy != _Parent_proxy) { // change parentage
; 1163 :                 _Lockit _Lock(_LOCK_DEBUG);
; 1164 :                 _Orphan_me();
; 1165 :                 _Mynextiter                 = _Parent_proxy->_Myfirstiter;
; 1166 :                 _Parent_proxy->_Myfirstiter = this;
; 1167 :                 _Myproxy                    = _Parent_proxy;
; 1168 :             }
; 1169 : 
; 1170 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1171 :             _Myproxy = _Parent_proxy;

  00064	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00067	8b 4d dc	 mov	 ecx, DWORD PTR __Parent_proxy$1[ebp]
  0006a	89 08		 mov	 DWORD PTR [eax], ecx

; 1172 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1173 :         } else {

  0006c	eb 06		 jmp	 SHORT $LN22@end
$LN34@end:

; 1174 :             // no future parent, just disown current parent
; 1175 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1176 :             _Lockit _Lock(_LOCK_DEBUG);
; 1177 :             _Orphan_me();
; 1178 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1179 :             _Myproxy = nullptr;

  0006e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00071	83 20 00	 and	 DWORD PTR [eax], 0
$LN22@end:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 906  :         return iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00074	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 907  :     }

  00077	c9		 leave
  00078	c2 04 00	 ret	 4
?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::end
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?begin@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__Parent_proxy$1 = -28					; size = 4
___param0$ = -24					; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
$T4 = -12						; size = 4
$T5 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::begin, COMDAT
; _this$ = ecx

; 897  :     _NODISCARD iterator begin() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000f	8b 45 f4	 mov	 eax, DWORD PTR $T4[ebp]
  00012	89 45 f8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  0001b	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0001e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00021	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax

; 898  :         return iterator(_Myoff(), _STD addressof(_Get_data()));

  00024	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00027	8b 00		 mov	 eax, DWORD PTR [eax]
  00029	89 45 e8	 mov	 DWORD PTR ___param0$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1126 :     _Iterator_base12() noexcept : _Myproxy(nullptr), _Mynextiter(nullptr) {} // construct orphaned iterator

  0002c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002f	83 20 00	 and	 DWORD PTR [eax], 0
  00032	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00035	83 60 04 00	 and	 DWORD PTR [eax+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 256  :     _Deque_const_iterator(_Size_type _Off, const _Container_base12* _Pdeque) noexcept : _Myoff(_Off) {

  00039	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0003c	8b 4d e8	 mov	 ecx, DWORD PTR ___param0$[ebp]
  0003f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1157 :         if (_Parent) {

  00042	83 7d f8 00	 cmp	 DWORD PTR $T5[ebp], 0
  00046	74 12		 je	 SHORT $LN28@begin

; 1158 :             // have a parent, do adoption
; 1159 :             _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

  00048	8b 45 f8	 mov	 eax, DWORD PTR $T5[ebp]
  0004b	8b 00		 mov	 eax, DWORD PTR [eax]
  0004d	89 45 e4	 mov	 DWORD PTR __Parent_proxy$1[ebp], eax

; 1160 : 
; 1161 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1162 :             if (_Myproxy != _Parent_proxy) { // change parentage
; 1163 :                 _Lockit _Lock(_LOCK_DEBUG);
; 1164 :                 _Orphan_me();
; 1165 :                 _Mynextiter                 = _Parent_proxy->_Myfirstiter;
; 1166 :                 _Parent_proxy->_Myfirstiter = this;
; 1167 :                 _Myproxy                    = _Parent_proxy;
; 1168 :             }
; 1169 : 
; 1170 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1171 :             _Myproxy = _Parent_proxy;

  00050	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00053	8b 4d e4	 mov	 ecx, DWORD PTR __Parent_proxy$1[ebp]
  00056	89 08		 mov	 DWORD PTR [eax], ecx

; 1172 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1173 :         } else {

  00058	eb 06		 jmp	 SHORT $LN16@begin
$LN28@begin:

; 1174 :             // no future parent, just disown current parent
; 1175 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1176 :             _Lockit _Lock(_LOCK_DEBUG);
; 1177 :             _Orphan_me();
; 1178 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1179 :             _Myproxy = nullptr;

  0005a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005d	83 20 00	 and	 DWORD PTR [eax], 0
$LN16@begin:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 898  :         return iterator(_Myoff(), _STD addressof(_Get_data()));

  00060	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 899  :     }

  00063	c9		 leave
  00064	c2 04 00	 ret	 4
?begin@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::begin
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
__Old_val$3 = -24					; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
$T6 = -12						; size = 4
_this$ = -8						; size = 4
__Proxy_allocator$ = -1					; size = 1
??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >, COMDAT
; _this$ = ecx

; 869  :     ~deque() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 870  :         _Tidy();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy

; 1522 :         return _Mypair._Get_first();

  00011	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00014	89 45 f0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00017	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  0001a	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax

; 872  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  0001d	83 65 ec 00	 and	 DWORD PTR $T4[ebp], 0

; 1530 :         return _Mypair._Myval2;

  00021	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00024	89 45 f4	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 598  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00027	8b 45 f4	 mov	 eax, DWORD PTR $T6[ebp]
  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	89 45 e8	 mov	 DWORD PTR __Old_val$3[ebp], eax

; 599  :     _Val         = static_cast<_Other&&>(_New_val);

  0002f	8b 45 f4	 mov	 eax, DWORD PTR $T6[ebp]
  00032	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp]
  00035	89 08		 mov	 DWORD PTR [eax], ecx

; 600  :     return _Old_val;

  00037	8b 45 e8	 mov	 eax, DWORD PTR __Old_val$3[ebp]
  0003a	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 872  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  0003d	ff 75 e4	 push	 DWORD PTR $T2[ebp]
  00040	8d 45 ff	 lea	 eax, DWORD PTR __Proxy_allocator$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00049	59		 pop	 ecx
  0004a	59		 pop	 ecx

; 873  :     }

  0004b	c9		 leave
  0004c	c3		 ret	 0
??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 4
$T2 = -72						; size = 4
__Max_possible$3 = -68					; size = 4
$T4 = -64						; size = 4
$T5 = -60						; size = 4
$T6 = -56						; size = 4
$T7 = -52						; size = 4
$T8 = -48						; size = 4
$T9 = -44						; size = 4
$T10 = -40						; size = 4
$T11 = -36						; size = 4
$T12 = -32						; size = 4
$T13 = -28						; size = 4
$T14 = -24						; size = 4
__Ptr$ = -20						; size = 4
$T15 = -16						; size = 4
$T16 = -12						; size = 4
$T17 = -8						; size = 4
$T18 = -4						; size = 4
$T19 = 0						; size = 4
$T20 = 4						; size = 4
$T21 = 8						; size = 4
$T22 = 12						; size = 4
$T23 = 16						; size = 4
$T24 = 20						; size = 4
$T25 = 24						; size = 4
$T26 = 28						; size = 4
$T27 = 32						; size = 4
$T28 = 36						; size = 4
$T29 = 40						; size = 4
$T30 = 44						; size = 4
$T31 = 48						; size = 4
$T32 = 52						; size = 4
$T33 = 56						; size = 4
$T34 = 60						; size = 4
$T35 = 64						; size = 4
$T36 = 68						; size = 4
$T37 = 72						; size = 4
$T38 = 76						; size = 4
$T39 = 80						; size = 4
$T40 = 84						; size = 4
tv91 = 88						; size = 4
tv165 = 92						; size = 4
__Block$ = 96						; size = 4
tv82 = 100						; size = 4
__Overflow_is_possible$41 = 107				; size = 1
__Newoff$ = 108						; size = 4
_this$ = 112						; size = 4
__Val$ = 124						; size = 4
?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front, COMDAT
; _this$ = ecx

; 788  :     void push_front(_Ty&& _Val) {

  00000	55		 push	 ebp
  00001	8d 6c 24 8c	 lea	 ebp, DWORD PTR [esp-116]
  00005	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	89 4d 70	 mov	 DWORD PTR _this$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  00010	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00013	89 45 c8	 mov	 DWORD PTR $T6[ebp], eax
  00016	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00019	89 45 54	 mov	 DWORD PTR $T40[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  0001c	8b 45 54	 mov	 eax, DWORD PTR $T40[ebp]
  0001f	83 c0 0c	 add	 eax, 12			; 0000000cH
  00022	89 45 50	 mov	 DWORD PTR $T39[ebp], eax

; 789  :         _Orphan_all();
; 790  :         _PUSH_FRONT_BEGIN;

  00025	8b 45 50	 mov	 eax, DWORD PTR $T39[ebp]
  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	33 d2		 xor	 edx, edx
  0002c	33 c9		 xor	 ecx, ecx
  0002e	41		 inc	 ecx
  0002f	f7 f1		 div	 ecx
  00031	85 d2		 test	 edx, edx
  00033	75 35		 jne	 SHORT $LN2@push_front

; 1530 :         return _Mypair._Myval2;

  00035	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00038	89 45 4c	 mov	 DWORD PTR $T38[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  0003b	8b 45 4c	 mov	 eax, DWORD PTR $T38[ebp]
  0003e	83 c0 08	 add	 eax, 8
  00041	89 45 40	 mov	 DWORD PTR $T35[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00044	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00047	89 45 48	 mov	 DWORD PTR $T37[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  0004a	8b 45 48	 mov	 eax, DWORD PTR $T37[ebp]
  0004d	83 c0 10	 add	 eax, 16			; 00000010H
  00050	89 45 44	 mov	 DWORD PTR $T36[ebp], eax

; 789  :         _Orphan_all();
; 790  :         _PUSH_FRONT_BEGIN;

  00053	8b 45 44	 mov	 eax, DWORD PTR $T36[ebp]
  00056	8b 00		 mov	 eax, DWORD PTR [eax]
  00058	40		 inc	 eax
  00059	8b 4d 40	 mov	 ecx, DWORD PTR $T35[ebp]
  0005c	39 01		 cmp	 DWORD PTR [ecx], eax
  0005e	77 0a		 ja	 SHORT $LN2@push_front
  00060	6a 01		 push	 1
  00062	8b 4d 70	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?_Growmap@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXI@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Growmap
$LN2@push_front:
  0006a	8b 45 c4	 mov	 eax, DWORD PTR $T5[ebp]
  0006d	89 45 64	 mov	 DWORD PTR tv82[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00070	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00073	89 45 3c	 mov	 DWORD PTR $T34[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  00076	8b 45 3c	 mov	 eax, DWORD PTR $T34[ebp]
  00079	83 c0 0c	 add	 eax, 12			; 0000000cH
  0007c	89 45 64	 mov	 DWORD PTR tv82[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0007f	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00082	89 45 38	 mov	 DWORD PTR $T33[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00085	8b 45 38	 mov	 eax, DWORD PTR $T33[ebp]
  00088	83 c0 08	 add	 eax, 8
  0008b	89 45 34	 mov	 DWORD PTR $T32[ebp], eax

; 789  :         _Orphan_all();
; 790  :         _PUSH_FRONT_BEGIN;

  0008e	8b 45 34	 mov	 eax, DWORD PTR $T32[ebp]
  00091	8b 00		 mov	 eax, DWORD PTR [eax]
  00093	48		 dec	 eax
  00094	8b 4d 64	 mov	 ecx, DWORD PTR tv82[ebp]
  00097	23 01		 and	 eax, DWORD PTR [ecx]
  00099	8b 4d 64	 mov	 ecx, DWORD PTR tv82[ebp]
  0009c	89 01		 mov	 DWORD PTR [ecx], eax

; 1530 :         return _Mypair._Myval2;

  0009e	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	89 45 30	 mov	 DWORD PTR $T31[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  000a4	8b 45 30	 mov	 eax, DWORD PTR $T31[ebp]
  000a7	83 c0 0c	 add	 eax, 12			; 0000000cH
  000aa	89 45 2c	 mov	 DWORD PTR $T30[ebp], eax

; 789  :         _Orphan_all();
; 790  :         _PUSH_FRONT_BEGIN;

  000ad	8b 45 2c	 mov	 eax, DWORD PTR $T30[ebp]
  000b0	83 38 00	 cmp	 DWORD PTR [eax], 0
  000b3	74 19		 je	 SHORT $LN5@push_front

; 1530 :         return _Mypair._Myval2;

  000b5	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	89 45 28	 mov	 DWORD PTR $T29[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  000bb	8b 45 28	 mov	 eax, DWORD PTR $T29[ebp]
  000be	83 c0 0c	 add	 eax, 12			; 0000000cH
  000c1	89 45 24	 mov	 DWORD PTR $T28[ebp], eax

; 789  :         _Orphan_all();
; 790  :         _PUSH_FRONT_BEGIN;

  000c4	8b 45 24	 mov	 eax, DWORD PTR $T28[ebp]
  000c7	8b 00		 mov	 eax, DWORD PTR [eax]
  000c9	89 45 58	 mov	 DWORD PTR tv91[ebp], eax
  000cc	eb 17		 jmp	 SHORT $LN6@push_front
$LN5@push_front:

; 1530 :         return _Mypair._Myval2;

  000ce	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  000d1	89 45 20	 mov	 DWORD PTR $T27[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  000d4	8b 45 20	 mov	 eax, DWORD PTR $T27[ebp]
  000d7	83 c0 08	 add	 eax, 8
  000da	89 45 1c	 mov	 DWORD PTR $T26[ebp], eax

; 789  :         _Orphan_all();
; 790  :         _PUSH_FRONT_BEGIN;

  000dd	8b 45 1c	 mov	 eax, DWORD PTR $T26[ebp]
  000e0	8b 00		 mov	 eax, DWORD PTR [eax]
  000e2	89 45 58	 mov	 DWORD PTR tv91[ebp], eax
$LN6@push_front:
  000e5	8b 45 58	 mov	 eax, DWORD PTR tv91[ebp]
  000e8	89 45 6c	 mov	 DWORD PTR __Newoff$[ebp], eax
  000eb	8b 45 6c	 mov	 eax, DWORD PTR __Newoff$[ebp]
  000ee	48		 dec	 eax
  000ef	89 45 6c	 mov	 DWORD PTR __Newoff$[ebp], eax

; 1534 :         return _Mypair._Myval2;

  000f2	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  000f5	89 45 18	 mov	 DWORD PTR $T25[ebp], eax

; 548  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  000f8	8b 45 18	 mov	 eax, DWORD PTR $T25[ebp]
  000fb	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000fe	48		 dec	 eax
  000ff	23 45 6c	 and	 eax, DWORD PTR __Newoff$[ebp]
  00102	89 45 14	 mov	 DWORD PTR $T24[ebp], eax

; 1514 :         return _Get_data()._Getblock(_Off);

  00105	8b 45 14	 mov	 eax, DWORD PTR $T24[ebp]
  00108	89 45 60	 mov	 DWORD PTR __Block$[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0010b	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0010e	89 45 10	 mov	 DWORD PTR $T23[ebp], eax

; 1538 :         return _Get_data()._Map;

  00111	8b 45 10	 mov	 eax, DWORD PTR $T23[ebp]
  00114	83 c0 04	 add	 eax, 4
  00117	89 45 0c	 mov	 DWORD PTR $T22[ebp], eax

; 789  :         _Orphan_all();
; 790  :         _PUSH_FRONT_BEGIN;

  0011a	8b 45 0c	 mov	 eax, DWORD PTR $T22[ebp]
  0011d	8b 00		 mov	 eax, DWORD PTR [eax]
  0011f	8b 4d 60	 mov	 ecx, DWORD PTR __Block$[ebp]
  00122	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  00126	75 58		 jne	 SHORT $LN3@push_front

; 1522 :         return _Mypair._Get_first();

  00128	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0012b	89 45 08	 mov	 DWORD PTR $T21[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  0012e	8b 45 08	 mov	 eax, DWORD PTR $T21[ebp]
  00131	89 45 c0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00134	c6 45 6b 01	 mov	 BYTE PTR __Overflow_is_possible$41[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00138	c7 45 bc ff ff
	ff 0f		 mov	 DWORD PTR __Max_possible$3[ebp], 268435455 ; 0fffffffH

; 60   :         if (_Count > _Max_possible) {

  0013f	33 c0		 xor	 eax, eax
  00141	40		 inc	 eax
  00142	3d ff ff ff 0f	 cmp	 eax, 268435455		; 0fffffffH
  00147	76 05		 jbe	 SHORT $LN88@push_front

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00149	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN88@push_front:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0014e	33 c0		 xor	 eax, eax
  00150	40		 inc	 eax
  00151	c1 e0 04	 shl	 eax, 4
  00154	89 45 04	 mov	 DWORD PTR $T20[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00157	ff 75 04	 push	 DWORD PTR $T20[ebp]
  0015a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0015f	59		 pop	 ecx
  00160	89 45 f8	 mov	 DWORD PTR $T17[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  00163	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00166	89 45 00	 mov	 DWORD PTR $T19[ebp], eax

; 1538 :         return _Get_data()._Map;

  00169	8b 45 00	 mov	 eax, DWORD PTR $T19[ebp]
  0016c	83 c0 04	 add	 eax, 4
  0016f	89 45 fc	 mov	 DWORD PTR $T18[ebp], eax

; 789  :         _Orphan_all();
; 790  :         _PUSH_FRONT_BEGIN;

  00172	8b 45 fc	 mov	 eax, DWORD PTR $T18[ebp]
  00175	8b 00		 mov	 eax, DWORD PTR [eax]
  00177	8b 4d 60	 mov	 ecx, DWORD PTR __Block$[ebp]
  0017a	8b 55 f8	 mov	 edx, DWORD PTR $T17[ebp]
  0017d	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN3@push_front:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00180	8b 45 7c	 mov	 eax, DWORD PTR __Val$[ebp]
  00183	89 45 e0	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  00186	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00189	89 45 f4	 mov	 DWORD PTR $T16[ebp], eax

; 1538 :         return _Get_data()._Map;

  0018c	8b 45 f4	 mov	 eax, DWORD PTR $T16[ebp]
  0018f	83 c0 04	 add	 eax, 4
  00192	89 45 f0	 mov	 DWORD PTR $T15[ebp], eax

; 791  :         _Alty_traits::construct(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ), _STD move(_Val));

  00195	8b 45 6c	 mov	 eax, DWORD PTR __Newoff$[ebp]
  00198	33 d2		 xor	 edx, edx
  0019a	33 c9		 xor	 ecx, ecx
  0019c	41		 inc	 ecx
  0019d	f7 f1		 div	 ecx
  0019f	c1 e2 04	 shl	 edx, 4
  001a2	8b 45 f0	 mov	 eax, DWORD PTR $T15[ebp]
  001a5	8b 00		 mov	 eax, DWORD PTR [eax]
  001a7	8b 4d 60	 mov	 ecx, DWORD PTR __Block$[ebp]
  001aa	03 14 88	 add	 edx, DWORD PTR [eax+ecx*4]
  001ad	89 55 ec	 mov	 DWORD PTR __Ptr$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  001b0	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]
  001b3	89 45 e4	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  001b6	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001b9	89 45 e8	 mov	 DWORD PTR $T14[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  001bc	8b 45 e8	 mov	 eax, DWORD PTR $T14[ebp]
  001bf	89 45 b8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  001c2	8b 45 e4	 mov	 eax, DWORD PTR $T13[ebp]
  001c5	89 45 d8	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  001c8	8b 45 e0	 mov	 eax, DWORD PTR $T12[ebp]
  001cb	89 45 dc	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  001ce	8b 75 dc	 mov	 esi, DWORD PTR $T11[ebp]
  001d1	8b 7d d8	 mov	 edi, DWORD PTR $T10[ebp]
  001d4	a5		 movsd
  001d5	a5		 movsd
  001d6	a5		 movsd
  001d7	a5		 movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  001d8	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  001db	89 45 d4	 mov	 DWORD PTR $T9[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  001de	8b 45 d4	 mov	 eax, DWORD PTR $T9[ebp]
  001e1	83 c0 0c	 add	 eax, 12			; 0000000cH
  001e4	89 45 d0	 mov	 DWORD PTR $T8[ebp], eax

; 792  :         _PUSH_FRONT_END;

  001e7	8b 45 d0	 mov	 eax, DWORD PTR $T8[ebp]
  001ea	8b 4d 6c	 mov	 ecx, DWORD PTR __Newoff$[ebp]
  001ed	89 08		 mov	 DWORD PTR [eax], ecx
  001ef	8b 45 b4	 mov	 eax, DWORD PTR $T1[ebp]
  001f2	89 45 5c	 mov	 DWORD PTR tv165[ebp], eax

; 1530 :         return _Mypair._Myval2;

  001f5	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  001f8	89 45 cc	 mov	 DWORD PTR $T7[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  001fb	8b 45 cc	 mov	 eax, DWORD PTR $T7[ebp]
  001fe	83 c0 10	 add	 eax, 16			; 00000010H
  00201	89 45 5c	 mov	 DWORD PTR tv165[ebp], eax

; 792  :         _PUSH_FRONT_END;

  00204	8b 45 5c	 mov	 eax, DWORD PTR tv165[ebp]
  00207	8b 00		 mov	 eax, DWORD PTR [eax]
  00209	40		 inc	 eax
  0020a	8b 4d 5c	 mov	 ecx, DWORD PTR tv165[ebp]
  0020d	89 01		 mov	 DWORD PTR [ecx], eax
$LN91@push_front:

; 793  :     }

  0020f	5f		 pop	 edi
  00210	5e		 pop	 esi
  00211	83 c5 74	 add	 ebp, 116		; 00000074H
  00214	c9		 leave
  00215	c2 04 00	 ret	 4
?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ??0?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_this$ = -12						; size = 4
_this$ = -8						; size = 4
$T4 = -1						; size = 1
??0?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ PROC ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >, COMDAT
; _this$ = ecx

; 596  :     deque() : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00017	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0001a	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  0001d	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00020	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax

; 597  :         _Get_data()._Alloc_proxy(static_cast<_Alproxy_ty>(_Getal()));

  00029	8d 45 ff	 lea	 eax, DWORD PTR $T4[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  00030	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 598  :     }

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c9		 leave
  00039	c3		 ret	 0
??0?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ENDP ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ?__Initialize@CFlyTrace@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?__Initialize@CFlyTrace@@IAEXXZ PROC			; CFlyTrace::__Initialize, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 	m_bRectShape=false;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 49   : 	m_dwColor=0;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 60 08 00	 and	 DWORD PTR [eax+8], 0

; 50   : 	m_fSize=0.0f;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	0f 57 c0	 xorps	 xmm0, xmm0
  0001b	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 51   : 	m_fTailLength=0.0f;	

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	0f 57 c0	 xorps	 xmm0, xmm0
  00026	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 52   : }

  0002b	c9		 leave
  0002c	c3		 ret	 0
?__Initialize@CFlyTrace@@IAEXXZ ENDP			; CFlyTrace::__Initialize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Camera.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Camera.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SphereLib\vector.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Camera.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Camera.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ?Render@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
$T2 = -1432						; size = 12
$T3 = -1420						; size = 12
$T4 = -1408						; size = 4
$T5 = -1404						; size = 4
$T6 = -1400						; size = 4
$T7 = -1396						; size = 4
$T8 = -1392						; size = 4
$T9 = -1388						; size = 4
$T10 = -1384						; size = 4
$T11 = -1380						; size = 4
$T12 = -1376						; size = 4
$T13 = -1372						; size = 4
$T14 = -1368						; size = 4
$T15 = -1364						; size = 4
$T16 = -1360						; size = 4
$T17 = -1356						; size = 4
$T18 = -1352						; size = 4
$T19 = -1348						; size = 4
_a$ = -1344						; size = 4
$T20 = -1340						; size = 4
_c$ = -1336						; size = 4
_radius$21 = -1332					; size = 4
$T22 = -1328						; size = 4
$T23 = -1324						; size = 4
tv2628 = -1320						; size = 4
_frustum$ = -1316					; size = 4
$T24 = -1312						; size = 4
$T25 = -1308						; size = 4
$T26 = -1304						; size = 4
$T27 = -1300						; size = 8
$T28 = -1292						; size = 8
$T29 = -1284						; size = 8
$T30 = -1276						; size = 8
$T31 = -1268						; size = 8
$T32 = -1260						; size = 8
_b$ = -1252						; size = 4
$T33 = -1248						; size = 4
$T34 = -1244						; size = 4
$T35 = -1240						; size = 4
$T36 = -1236						; size = 4
___param0$ = -1232					; size = 4
___param0$ = -1228					; size = 4
$T37 = -1224						; size = 4
$T38 = -1220						; size = 4
$T39 = -1216						; size = 4
___param0$ = -1212					; size = 4
$T40 = -1208						; size = 4
___param0$ = -1204					; size = 4
$T41 = -1200						; size = 4
$T42 = -1196						; size = 4
$T43 = -1192						; size = 4
$T44 = -1188						; size = 4
$T45 = -1184						; size = 4
$T46 = -1180						; size = 4
$T47 = -1176						; size = 4
__Val2$ = -1172						; size = 4
$T48 = -1168						; size = 4
$T49 = -1164						; size = 4
$T50 = -1160						; size = 4
$T51 = -1156						; size = 4
$T52 = -1152						; size = 4
$T53 = -1148						; size = 4
$T54 = -1144						; size = 4
$T55 = -1140						; size = 4
$T56 = -1136						; size = 4
$T57 = -1132						; size = 4
$T58 = -1128						; size = 4
$T59 = -1124						; size = 4
_fz$ = -1120						; size = 4
_fy$ = -1116						; size = 4
_fx$ = -1112						; size = 4
_c$ = -1108						; size = 4
_c$ = -1104						; size = 4
_c$ = -1100						; size = 4
_c$ = -1096						; size = 4
_c$ = -1092						; size = 4
_c$ = -1088						; size = 4
_rate2$60 = -1084					; size = 4
_rate1$61 = -1080					; size = 4
$T62 = -1076						; size = 4
tv2640 = -1072						; size = 4
$T63 = -1068						; size = 4
$T64 = -1064						; size = 4
$T65 = -1060						; size = 4
$T66 = -1056						; size = 4
$T67 = -1052						; size = 4
__Xx$ = -1048						; size = 4
__Xx$ = -1044						; size = 4
$T68 = -1040						; size = 4
$T69 = -1036						; size = 4
__Xx$ = -1032						; size = 4
__Xx$ = -1028						; size = 4
__Xx$ = -1024						; size = 4
$T70 = -1020						; size = 4
__Xx$ = -1016						; size = 4
__Xx$ = -1012						; size = 4
__Xx$ = -1008						; size = 4
$T71 = -1004						; size = 4
$T72 = -1000						; size = 4
__Xx$ = -996						; size = 4
__Xx$ = -992						; size = 4
_fz$ = -988						; size = 4
_fy$ = -984						; size = 4
_fx$ = -980						; size = 4
$T73 = -976						; size = 4
$T74 = -972						; size = 4
$T75 = -968						; size = 4
$T76 = -964						; size = 4
$T77 = -960						; size = 4
$T78 = -956						; size = 4
$T79 = -952						; size = 4
$T80 = -948						; size = 4
$T81 = -944						; size = 4
$T82 = -940						; size = 4
$T83 = -936						; size = 4
$T84 = -932						; size = 4
_this$ = -928						; size = 4
$T85 = -924						; size = 4
_VSVector$ = -920					; size = 12
tv2168 = -908						; size = 4
tv2182 = -904						; size = 4
__My_data$86 = -900					; size = 4
__My_data$87 = -896					; size = 4
__My_data$88 = -892					; size = 4
__My_data$89 = -888					; size = 4
tv1235 = -884						; size = 4
tv1224 = -880						; size = 4
_it2$ = -876						; size = 12
_it1$ = -864						; size = 12
_s$ = -852						; size = 4
_pV2$ = -848						; size = 4
_v$ = -844						; size = 4
_v$ = -840						; size = 4
_v$ = -836						; size = 4
_M$ = -832						; size = 4
tv377 = -828						; size = 4
_rkOld$90 = -824					; size = 4
_rkNew$91 = -820					; size = 4
tv338 = -816						; size = 4
tv376 = -812						; size = 4
_it$92 = -808						; size = 4
_size2$93 = -804					; size = 4
_pCurrentCamera$ = -800					; size = 4
_size1$94 = -796					; size = 4
_this$ = -792						; size = 4
_this$ = -788						; size = 4
$T95 = -784						; size = 1
$T96 = -783						; size = 1
$T97 = -782						; size = 1
$T98 = -781						; size = 1
_i$99 = -780						; size = 4
_this$ = -776						; size = 4
$T100 = -772						; size = 144
$T101 = -628						; size = 148
_matWorld$ = -480					; size = 64
$T102 = -416						; size = 12
_c$103 = -404						; size = 12
$T104 = -392						; size = 12
$T105 = -380						; size = 12
$T106 = -368						; size = 12
$T107 = -356						; size = 12
$T108 = -344						; size = 12
_v$109 = -332						; size = 12
_v$110 = -320						; size = 12
_v$111 = -308						; size = 12
_R$112 = -296						; size = 12
_m$ = -284						; size = 64
_P$113 = -220						; size = 12
_U$114 = -208						; size = 12
_F$ = -196						; size = 12
_E$115 = -184						; size = 12
_B$116 = -172						; size = 12
_v$117 = -160						; size = 144
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Render@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Render, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CFlyTrace@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 8c 05 00
	00		 sub	 esp, 1420		; 0000058cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d f8 fc ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1534 :         return _Mypair._Myval2;

  00033	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 c0 14	 add	 eax, 20			; 00000014H
  0003c	89 85 d4 fa ff
	ff		 mov	 DWORD PTR $T23[ebp], eax

; 1566 :         return _Get_data()._Mysize;

  00042	8b 85 d4 fa ff
	ff		 mov	 eax, DWORD PTR $T23[ebp]
  00048	83 c0 10	 add	 eax, 16			; 00000010H
  0004b	89 85 d0 fa ff
	ff		 mov	 DWORD PTR $T22[ebp], eax

; 1001 :         return _Mysize();

  00051	8b 85 d0 fa ff
	ff		 mov	 eax, DWORD PTR $T22[ebp]
  00057	8b 00		 mov	 eax, DWORD PTR [eax]
  00059	89 85 64 fc ff
	ff		 mov	 DWORD PTR $T85[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 121  : 	if (m_TimePositionDeque.size()<=1)

  0005f	83 bd 64 fc ff
	ff 01		 cmp	 DWORD PTR $T85[ebp], 1
  00066	77 05		 ja	 SHORT $LN17@Render

; 122  : 		return;

  00068	e9 b4 18 00 00	 jmp	 $LN1@Render
$LN17@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  0006d	8d 85 68 fc ff
	ff		 lea	 eax, DWORD PTR _VSVector$[ebp]
  00073	89 85 60 fc ff
	ff		 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00079	8b 8d 60 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > >
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 123  : 	TFlyVertexSetVector VSVector;

  00084	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 124  : 
; 125  : 	//STATEMANAGER.SaveRenderState(D3DRS_ZFUNC,D3DCMP_LESS);
; 126  : 	STATEMANAGER.SaveRenderState(D3DRS_ZFUNC,D3DCMP_LESS);

  00088	6a 02		 push	 2
  0008a	6a 17		 push	 23			; 00000017H
  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00092	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00097	6a 10		 push	 16			; 00000010H
  00099	58		 pop	 eax
  0009a	6b c0 03	 imul	 eax, eax, 3
  0009d	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  000a4	6a 04		 push	 4
  000a6	59		 pop	 ecx
  000a7	d1 e1		 shl	 ecx, 1
  000a9	0f 57 c0	 xorps	 xmm0, xmm0
  000ac	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  000b1	6a 10		 push	 16			; 00000010H
  000b3	58		 pop	 eax
  000b4	6b c0 03	 imul	 eax, eax, 3
  000b7	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  000be	6a 04		 push	 4
  000c0	59		 pop	 ecx
  000c1	c1 e1 00	 shl	 ecx, 0
  000c4	0f 57 c0	 xorps	 xmm0, xmm0
  000c7	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  000cc	6a 10		 push	 16			; 00000010H
  000ce	58		 pop	 eax
  000cf	6b c0 03	 imul	 eax, eax, 3
  000d2	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  000d9	6a 04		 push	 4
  000db	59		 pop	 ecx
  000dc	6b c9 00	 imul	 ecx, ecx, 0
  000df	0f 57 c0	 xorps	 xmm0, xmm0
  000e2	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  000e7	6a 10		 push	 16			; 00000010H
  000e9	58		 pop	 eax
  000ea	d1 e0		 shl	 eax, 1
  000ec	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  000f3	6a 04		 push	 4
  000f5	59		 pop	 ecx
  000f6	6b c9 03	 imul	 ecx, ecx, 3
  000f9	0f 57 c0	 xorps	 xmm0, xmm0
  000fc	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  00101	6a 10		 push	 16			; 00000010H
  00103	58		 pop	 eax
  00104	d1 e0		 shl	 eax, 1
  00106	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  0010d	6a 04		 push	 4
  0010f	59		 pop	 ecx
  00110	c1 e1 00	 shl	 ecx, 0
  00113	0f 57 c0	 xorps	 xmm0, xmm0
  00116	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  0011b	6a 10		 push	 16			; 00000010H
  0011d	58		 pop	 eax
  0011e	d1 e0		 shl	 eax, 1
  00120	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  00127	6a 04		 push	 4
  00129	59		 pop	 ecx
  0012a	6b c9 00	 imul	 ecx, ecx, 0
  0012d	0f 57 c0	 xorps	 xmm0, xmm0
  00130	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  00135	6a 10		 push	 16			; 00000010H
  00137	58		 pop	 eax
  00138	c1 e0 00	 shl	 eax, 0
  0013b	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  00142	6a 04		 push	 4
  00144	59		 pop	 ecx
  00145	6b c9 03	 imul	 ecx, ecx, 3
  00148	0f 57 c0	 xorps	 xmm0, xmm0
  0014b	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  00150	6a 10		 push	 16			; 00000010H
  00152	58		 pop	 eax
  00153	c1 e0 00	 shl	 eax, 0
  00156	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  0015d	6a 04		 push	 4
  0015f	59		 pop	 ecx
  00160	d1 e1		 shl	 ecx, 1
  00162	0f 57 c0	 xorps	 xmm0, xmm0
  00165	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  0016a	6a 10		 push	 16			; 00000010H
  0016c	58		 pop	 eax
  0016d	c1 e0 00	 shl	 eax, 0
  00170	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  00177	6a 04		 push	 4
  00179	59		 pop	 ecx
  0017a	6b c9 00	 imul	 ecx, ecx, 0
  0017d	0f 57 c0	 xorps	 xmm0, xmm0
  00180	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  00185	6a 10		 push	 16			; 00000010H
  00187	58		 pop	 eax
  00188	6b c0 00	 imul	 eax, eax, 0
  0018b	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  00192	6a 04		 push	 4
  00194	59		 pop	 ecx
  00195	6b c9 03	 imul	 ecx, ecx, 3
  00198	0f 57 c0	 xorps	 xmm0, xmm0
  0019b	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  001a0	6a 10		 push	 16			; 00000010H
  001a2	58		 pop	 eax
  001a3	6b c0 00	 imul	 eax, eax, 0
  001a6	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  001ad	6a 04		 push	 4
  001af	59		 pop	 ecx
  001b0	d1 e1		 shl	 ecx, 1
  001b2	0f 57 c0	 xorps	 xmm0, xmm0
  001b5	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  001ba	6a 10		 push	 16			; 00000010H
  001bc	58		 pop	 eax
  001bd	6b c0 00	 imul	 eax, eax, 0
  001c0	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  001c7	6a 04		 push	 4
  001c9	59		 pop	 ecx
  001ca	c1 e1 00	 shl	 ecx, 0
  001cd	0f 57 c0	 xorps	 xmm0, xmm0
  001d0	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  001d5	6a 10		 push	 16			; 00000010H
  001d7	58		 pop	 eax
  001d8	6b c0 03	 imul	 eax, eax, 3
  001db	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  001e2	6a 04		 push	 4
  001e4	59		 pop	 ecx
  001e5	6b c9 03	 imul	 ecx, ecx, 3
  001e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001f0	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  001f5	6a 10		 push	 16			; 00000010H
  001f7	58		 pop	 eax
  001f8	d1 e0		 shl	 eax, 1
  001fa	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  00201	6a 04		 push	 4
  00203	59		 pop	 ecx
  00204	d1 e1		 shl	 ecx, 1
  00206	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0020e	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  00213	6a 10		 push	 16			; 00000010H
  00215	58		 pop	 eax
  00216	c1 e0 00	 shl	 eax, 0
  00219	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  00220	6a 04		 push	 4
  00222	59		 pop	 ecx
  00223	c1 e1 00	 shl	 ecx, 0
  00226	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0022e	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  00233	6a 10		 push	 16			; 00000010H
  00235	58		 pop	 eax
  00236	6b c0 00	 imul	 eax, eax, 0
  00239	8d 84 05 20 fe
	ff ff		 lea	 eax, DWORD PTR _matWorld$[ebp+eax]
  00240	6a 04		 push	 4
  00242	59		 pop	 ecx
  00243	6b c9 00	 imul	 ecx, ecx, 0
  00246	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0024e	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 132  : 	STATEMANAGER.SaveTransform(D3DTS_WORLD, &matWorld);

  00253	8d 85 20 fe ff
	ff		 lea	 eax, DWORD PTR _matWorld$[ebp]
  00259	50		 push	 eax
  0025a	68 00 01 00 00	 push	 256			; 00000100H
  0025f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00265	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 133  : 	STATEMANAGER.SaveVertexShader(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  0026a	68 42 01 00 00	 push	 322			; 00000142H
  0026f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00275	e8 00 00 00 00	 call	 ?SaveVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SaveVertexShader

; 134  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  0027a	6a 01		 push	 1
  0027c	6a 16		 push	 22			; 00000016H
  0027e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00284	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 135  : 	
; 136  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  00289	6a 01		 push	 1
  0028b	6a 1b		 push	 27			; 0000001bH
  0028d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00293	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 137  : 	STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  00298	6a 05		 push	 5
  0029a	6a 13		 push	 19			; 00000013H
  0029c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002a2	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 138  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);

  002a7	6a 02		 push	 2
  002a9	6a 14		 push	 20			; 00000014H
  002ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002b1	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 139  : 
; 140  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  002b6	6a 01		 push	 1
  002b8	6a 0f		 push	 15			; 0000000fH
  002ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002c0	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 141  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  002c5	6a 05		 push	 5
  002c7	6a 19		 push	 25			; 00000019H
  002c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002cf	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 142  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHAREF, 0x00000000);

  002d4	6a 00		 push	 0
  002d6	6a 18		 push	 24			; 00000018H
  002d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002de	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 143  : 
; 144  : 	STATEMANAGER.SaveRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD );

  002e3	6a 01		 push	 1
  002e5	68 ab 00 00 00	 push	 171			; 000000abH
  002ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002f0	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 145  : 	//STATEMANAGER.SaveRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD );
; 146  : 	
; 147  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_DIFFUSE);

  002f5	6a 00		 push	 0
  002f7	6a 02		 push	 2
  002f9	6a 00		 push	 0
  002fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00301	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 148  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TEXTURE);

  00306	6a 02		 push	 2
  00308	6a 03		 push	 3
  0030a	6a 00		 push	 0
  0030c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00312	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 149  : 	//STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, /*(m_bUseTexture)?D3DTOP_SELECTARG2:*/D3DTOP_SELECTARG2);
; 150  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);

  00317	6a 02		 push	 2
  00319	6a 01		 push	 1
  0031b	6a 00		 push	 0
  0031d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00323	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 151  : 
; 152  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_DIFFUSE);

  00328	6a 00		 push	 0
  0032a	6a 05		 push	 5
  0032c	6a 00		 push	 0
  0032e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00334	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 153  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_TEXTURE);

  00339	6a 02		 push	 2
  0033b	6a 06		 push	 6
  0033d	6a 00		 push	 0
  0033f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00345	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 154  : 	//STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);
; 155  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, /*(m_bUseTexture)?D3DTOP_SELECTARG2:*/D3DTOP_SELECTARG1);

  0034a	6a 02		 push	 2
  0034c	6a 04		 push	 4
  0034e	6a 00		 push	 0
  00350	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00356	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 156  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  0035b	6a 01		 push	 1
  0035d	6a 01		 push	 1
  0035f	6a 01		 push	 1
  00361	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00367	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 157  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  0036c	6a 01		 push	 1
  0036e	6a 04		 push	 4
  00370	6a 01		 push	 1
  00372	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00378	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 158  : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  0037d	6a 00		 push	 0
  0037f	68 89 00 00 00	 push	 137			; 00000089H
  00384	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0038a	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 159  : 	STATEMANAGER.SetTexture(0, NULL);

  0038f	6a 00		 push	 0
  00391	6a 00		 push	 0
  00393	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00399	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 160  : 	STATEMANAGER.SetTexture(1, NULL);

  0039e	6a 00		 push	 0
  003a0	6a 01		 push	 1
  003a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  003a8	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 161  : 	
; 162  : 	
; 163  : 	D3DXMATRIX m;
; 164  : 	CScreen s;s.UpdateViewMatrix();

  003ad	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  003b3	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  003b8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  003bc	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  003c2	e8 00 00 00 00	 call	 ?UpdateViewMatrix@CGraphicBase@@QAEXXZ ; CGraphicBase::UpdateViewMatrix
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  003c7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  003cc	89 85 5c fc ff
	ff		 mov	 DWORD PTR $T84[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 165  : 	CCamera * pCurrentCamera = CCameraManager::Instance().GetCurrentCamera();

  003d2	8b 8d 5c fc ff
	ff		 mov	 ecx, DWORD PTR $T84[ebp]
  003d8	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  003dd	89 85 e0 fc ff
	ff		 mov	 DWORD PTR _pCurrentCamera$[ebp], eax

; 166  : 	if (!pCurrentCamera)

  003e3	83 bd e0 fc ff
	ff 00		 cmp	 DWORD PTR _pCurrentCamera$[ebp], 0
  003ea	75 23		 jne	 SHORT $LN18@Render

; 167  : 		return;

  003ec	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  003f0	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  003f6	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  003fb	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  003ff	8d 8d 68 fc ff
	ff		 lea	 ecx, DWORD PTR _VSVector$[ebp]
  00405	e8 00 00 00 00	 call	 ?_Tidy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Tidy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 167  : 		return;

  0040a	e9 12 15 00 00	 jmp	 $LN1@Render
$LN18@Render:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Camera.h

; 174  : 		const D3DXMATRIX & GetViewMatrix() const		{ return m_matView; }

  0040f	8b 85 e0 fc ff
	ff		 mov	 eax, DWORD PTR _pCurrentCamera$[ebp]
  00415	83 c0 6c	 add	 eax, 108		; 0000006cH
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 169  : 	const D3DXMATRIX & M = pCurrentCamera->GetViewMatrix();

  00418	89 85 c0 fc ff
	ff		 mov	 DWORD PTR _M$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0041e	6a 10		 push	 16			; 00000010H
  00420	58		 pop	 eax
  00421	6b c0 03	 imul	 eax, eax, 3
  00424	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  0042b	6a 04		 push	 4
  0042d	59		 pop	 ecx
  0042e	d1 e1		 shl	 ecx, 1
  00430	0f 57 c0	 xorps	 xmm0, xmm0
  00433	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  00438	6a 10		 push	 16			; 00000010H
  0043a	58		 pop	 eax
  0043b	6b c0 03	 imul	 eax, eax, 3
  0043e	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  00445	6a 04		 push	 4
  00447	59		 pop	 ecx
  00448	c1 e1 00	 shl	 ecx, 0
  0044b	0f 57 c0	 xorps	 xmm0, xmm0
  0044e	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  00453	6a 10		 push	 16			; 00000010H
  00455	58		 pop	 eax
  00456	6b c0 03	 imul	 eax, eax, 3
  00459	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  00460	6a 04		 push	 4
  00462	59		 pop	 ecx
  00463	6b c9 00	 imul	 ecx, ecx, 0
  00466	0f 57 c0	 xorps	 xmm0, xmm0
  00469	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  0046e	6a 10		 push	 16			; 00000010H
  00470	58		 pop	 eax
  00471	d1 e0		 shl	 eax, 1
  00473	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  0047a	6a 04		 push	 4
  0047c	59		 pop	 ecx
  0047d	6b c9 03	 imul	 ecx, ecx, 3
  00480	0f 57 c0	 xorps	 xmm0, xmm0
  00483	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  00488	6a 10		 push	 16			; 00000010H
  0048a	58		 pop	 eax
  0048b	d1 e0		 shl	 eax, 1
  0048d	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  00494	6a 04		 push	 4
  00496	59		 pop	 ecx
  00497	c1 e1 00	 shl	 ecx, 0
  0049a	0f 57 c0	 xorps	 xmm0, xmm0
  0049d	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  004a2	6a 10		 push	 16			; 00000010H
  004a4	58		 pop	 eax
  004a5	d1 e0		 shl	 eax, 1
  004a7	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  004ae	6a 04		 push	 4
  004b0	59		 pop	 ecx
  004b1	6b c9 00	 imul	 ecx, ecx, 0
  004b4	0f 57 c0	 xorps	 xmm0, xmm0
  004b7	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  004bc	6a 10		 push	 16			; 00000010H
  004be	58		 pop	 eax
  004bf	c1 e0 00	 shl	 eax, 0
  004c2	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  004c9	6a 04		 push	 4
  004cb	59		 pop	 ecx
  004cc	6b c9 03	 imul	 ecx, ecx, 3
  004cf	0f 57 c0	 xorps	 xmm0, xmm0
  004d2	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  004d7	6a 10		 push	 16			; 00000010H
  004d9	58		 pop	 eax
  004da	c1 e0 00	 shl	 eax, 0
  004dd	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  004e4	6a 04		 push	 4
  004e6	59		 pop	 ecx
  004e7	d1 e1		 shl	 ecx, 1
  004e9	0f 57 c0	 xorps	 xmm0, xmm0
  004ec	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  004f1	6a 10		 push	 16			; 00000010H
  004f3	58		 pop	 eax
  004f4	c1 e0 00	 shl	 eax, 0
  004f7	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  004fe	6a 04		 push	 4
  00500	59		 pop	 ecx
  00501	6b c9 00	 imul	 ecx, ecx, 0
  00504	0f 57 c0	 xorps	 xmm0, xmm0
  00507	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  0050c	6a 10		 push	 16			; 00000010H
  0050e	58		 pop	 eax
  0050f	6b c0 00	 imul	 eax, eax, 0
  00512	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  00519	6a 04		 push	 4
  0051b	59		 pop	 ecx
  0051c	6b c9 03	 imul	 ecx, ecx, 3
  0051f	0f 57 c0	 xorps	 xmm0, xmm0
  00522	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  00527	6a 10		 push	 16			; 00000010H
  00529	58		 pop	 eax
  0052a	6b c0 00	 imul	 eax, eax, 0
  0052d	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  00534	6a 04		 push	 4
  00536	59		 pop	 ecx
  00537	d1 e1		 shl	 ecx, 1
  00539	0f 57 c0	 xorps	 xmm0, xmm0
  0053c	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  00541	6a 10		 push	 16			; 00000010H
  00543	58		 pop	 eax
  00544	6b c0 00	 imul	 eax, eax, 0
  00547	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  0054e	6a 04		 push	 4
  00550	59		 pop	 ecx
  00551	c1 e1 00	 shl	 ecx, 0
  00554	0f 57 c0	 xorps	 xmm0, xmm0
  00557	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0055c	6a 10		 push	 16			; 00000010H
  0055e	58		 pop	 eax
  0055f	6b c0 03	 imul	 eax, eax, 3
  00562	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  00569	6a 04		 push	 4
  0056b	59		 pop	 ecx
  0056c	6b c9 03	 imul	 ecx, ecx, 3
  0056f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00577	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  0057c	6a 10		 push	 16			; 00000010H
  0057e	58		 pop	 eax
  0057f	d1 e0		 shl	 eax, 1
  00581	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  00588	6a 04		 push	 4
  0058a	59		 pop	 ecx
  0058b	d1 e1		 shl	 ecx, 1
  0058d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00595	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  0059a	6a 10		 push	 16			; 00000010H
  0059c	58		 pop	 eax
  0059d	c1 e0 00	 shl	 eax, 0
  005a0	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  005a7	6a 04		 push	 4
  005a9	59		 pop	 ecx
  005aa	c1 e1 00	 shl	 ecx, 0
  005ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005b5	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
  005ba	6a 10		 push	 16			; 00000010H
  005bc	58		 pop	 eax
  005bd	6b c0 00	 imul	 eax, eax, 0
  005c0	8d 84 05 e4 fe
	ff ff		 lea	 eax, DWORD PTR _m$[ebp+eax]
  005c7	6a 04		 push	 4
  005c9	59		 pop	 ecx
  005ca	6b c9 00	 imul	 ecx, ecx, 0
  005cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005d5	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Camera.h

; 171  : 		const D3DXVECTOR3 & GetView() const		{ return m_v3View; }

  005da	8b b5 e0 fc ff
	ff		 mov	 esi, DWORD PTR _pCurrentCamera$[ebp]
  005e0	83 c6 54	 add	 esi, 84			; 00000054H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 171  : 	D3DXVECTOR3 F(pCurrentCamera->GetView());

  005e3	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR _F$[ebp]
  005e9	a5		 movsd
  005ea	a5		 movsd
  005eb	a5		 movsd

; 172  : 	m._31 = F.x;

  005ec	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR _F$[ebp]
  005f4	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR _m$[ebp+32], xmm0

; 173  : 	m._32 = F.y;

  005fc	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR _F$[ebp+4]
  00604	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR _m$[ebp+36], xmm0

; 174  : 	m._33 = F.z;

  0060c	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR _F$[ebp+8]
  00614	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _m$[ebp+40], xmm0

; 175  : 
; 176  : 	Frustum & frustum = s.GetFrustum();

  0061c	c7 85 dc fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _frustum$[ebp], OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  00626	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _it1$[ebp]
  0062c	e8 00 00 00 00	 call	 ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >

; 177  : 	//frustum.BuildViewFrustum(ms_matView * ms_matProj);
; 178  : 
; 179  : 	TTimePositionDeque::iterator it1, it2;

  00631	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00635	8d 8d 94 fc ff
	ff		 lea	 ecx, DWORD PTR _it2$[ebp]
  0063b	e8 00 00 00 00	 call	 ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >
  00640	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 180  : 	it2 = it1 = m_TimePositionDeque.begin();

  00644	8d 85 68 fa ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0064a	50		 push	 eax
  0064b	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00651	83 c1 14	 add	 ecx, 20			; 00000014H
  00654	e8 00 00 00 00	 call	 ?begin@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::begin
  00659	89 85 58 fc ff
	ff		 mov	 DWORD PTR $T83[ebp], eax
  0065f	ff b5 58 fc ff
	ff		 push	 DWORD PTR $T83[ebp]
  00665	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _it1$[ebp]
  0066b	e8 00 00 00 00	 call	 ??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@$$QAV01@@Z
  00670	8d 85 a0 fc ff
	ff		 lea	 eax, DWORD PTR _it1$[ebp]
  00676	89 85 54 fc ff
	ff		 mov	 DWORD PTR $T82[ebp], eax
  0067c	ff b5 54 fc ff
	ff		 push	 DWORD PTR $T82[ebp]
  00682	8d 8d 94 fc ff
	ff		 lea	 ecx, DWORD PTR _it2$[ebp]
  00688	e8 00 00 00 00	 call	 ??4?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAEAAV01@ABV01@@Z
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 284  :         ++_Myoff;

  0068d	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _it2$[ebp+8]
  00693	40		 inc	 eax
  00694	89 85 9c fc ff
	ff		 mov	 DWORD PTR _it2$[ebp+8], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 182  : 	for(;it2!=m_TimePositionDeque.end();++it2,++it1)

  0069a	eb 1a		 jmp	 SHORT $LN166@Render
$LN2@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 284  :         ++_Myoff;

  0069c	8b 85 9c fc ff
	ff		 mov	 eax, DWORD PTR _it2$[ebp+8]
  006a2	40		 inc	 eax
  006a3	89 85 9c fc ff
	ff		 mov	 DWORD PTR _it2$[ebp+8], eax
  006a9	8b 85 a8 fc ff
	ff		 mov	 eax, DWORD PTR _it1$[ebp+8]
  006af	40		 inc	 eax
  006b0	89 85 a8 fc ff
	ff		 mov	 DWORD PTR _it1$[ebp+8], eax
$LN166@Render:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 182  : 	for(;it2!=m_TimePositionDeque.end();++it2,++it1)

  006b6	8d 85 74 fa ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  006bc	50		 push	 eax
  006bd	8b 8d f8 fc ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  006c3	83 c1 14	 add	 ecx, 20			; 00000014H
  006c6	e8 00 00 00 00	 call	 ?end@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::end
  006cb	89 85 50 fc ff
	ff		 mov	 DWORD PTR $T81[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 351  :         return this->_Myoff == _Right._Myoff;

  006d1	8b 85 50 fc ff
	ff		 mov	 eax, DWORD PTR $T81[ebp]
  006d7	8b 8d 9c fc ff
	ff		 mov	 ecx, DWORD PTR _it2$[ebp+8]
  006dd	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  006e0	75 0c		 jne	 SHORT $LN200@Render
  006e2	c7 85 90 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1224[ebp], 1
  006ec	eb 07		 jmp	 SHORT $LN201@Render
$LN200@Render:
  006ee	83 a5 90 fc ff
	ff 00		 and	 DWORD PTR tv1224[ebp], 0
$LN201@Render:
  006f5	8a 85 90 fc ff
	ff		 mov	 al, BYTE PTR tv1224[ebp]
  006fb	88 85 f0 fc ff
	ff		 mov	 BYTE PTR $T95[ebp], al

; 355  :         return !(*this == _Right);

  00701	0f b6 85 f0 fc
	ff ff		 movzx	 eax, BYTE PTR $T95[ebp]
  00708	85 c0		 test	 eax, eax
  0070a	75 0c		 jne	 SHORT $LN195@Render
  0070c	c7 85 8c fc ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1235[ebp], 1
  00716	eb 07		 jmp	 SHORT $LN196@Render
$LN195@Render:
  00718	83 a5 8c fc ff
	ff 00		 and	 DWORD PTR tv1235[ebp], 0
$LN196@Render:
  0071f	8a 85 8c fc ff
	ff		 mov	 al, BYTE PTR tv1235[ebp]
  00725	88 85 f3 fc ff
	ff		 mov	 BYTE PTR $T98[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 182  : 	for(;it2!=m_TimePositionDeque.end();++it2,++it1)

  0072b	0f b6 85 f3 fc
	ff ff		 movzx	 eax, BYTE PTR $T98[ebp]
  00732	85 c0		 test	 eax, eax
  00734	0f 84 74 0f 00
	00		 je	 $LN3@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 446  :         return const_cast<reference>(_Mybase::operator*());

  0073a	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _it1$[ebp]
  00740	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
  00745	89 85 4c fc ff
	ff		 mov	 DWORD PTR $T80[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0074b	8b 85 4c fc ff
	ff		 mov	 eax, DWORD PTR $T80[ebp]
  00751	89 85 48 fc ff
	ff		 mov	 DWORD PTR $T79[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  00757	8b 85 48 fc ff
	ff		 mov	 eax, DWORD PTR $T79[ebp]
  0075d	89 85 44 fc ff
	ff		 mov	 DWORD PTR $T78[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 450  :         return pointer_traits<pointer>::pointer_to(**this);

  00763	8b 85 44 fc ff
	ff		 mov	 eax, DWORD PTR $T78[ebp]
  00769	89 85 40 fc ff
	ff		 mov	 DWORD PTR $T77[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 184  : 		const D3DXVECTOR3& rkOld=it1->second;

  0076f	8b 85 40 fc ff
	ff		 mov	 eax, DWORD PTR $T77[ebp]
  00775	83 c0 04	 add	 eax, 4
  00778	89 85 c8 fc ff
	ff		 mov	 DWORD PTR _rkOld$90[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 446  :         return const_cast<reference>(_Mybase::operator*());

  0077e	8d 8d 94 fc ff
	ff		 lea	 ecx, DWORD PTR _it2$[ebp]
  00784	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
  00789	89 85 3c fc ff
	ff		 mov	 DWORD PTR $T76[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0078f	8b 85 3c fc ff
	ff		 mov	 eax, DWORD PTR $T76[ebp]
  00795	89 85 38 fc ff
	ff		 mov	 DWORD PTR $T75[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  0079b	8b 85 38 fc ff
	ff		 mov	 eax, DWORD PTR $T75[ebp]
  007a1	89 85 34 fc ff
	ff		 mov	 DWORD PTR $T74[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 450  :         return pointer_traits<pointer>::pointer_to(**this);

  007a7	8b 85 34 fc ff
	ff		 mov	 eax, DWORD PTR $T74[ebp]
  007ad	89 85 30 fc ff
	ff		 mov	 DWORD PTR $T73[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 185  : 		const D3DXVECTOR3& rkNew=it2->second;

  007b3	8b 85 30 fc ff
	ff		 mov	 eax, DWORD PTR $T73[ebp]
  007b9	83 c0 04	 add	 eax, 4
  007bc	89 85 cc fc ff
	ff		 mov	 DWORD PTR _rkNew$91[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  007c2	8b 85 cc fc ff
	ff		 mov	 eax, DWORD PTR _rkNew$91[ebp]
  007c8	8b 8d c8 fc ff
	ff		 mov	 ecx, DWORD PTR _rkOld$90[ebp]
  007ce	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  007d2	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  007d6	f3 0f 11 85 2c
	fc ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  007de	8b 85 cc fc ff
	ff		 mov	 eax, DWORD PTR _rkNew$91[ebp]
  007e4	8b 8d c8 fc ff
	ff		 mov	 ecx, DWORD PTR _rkOld$90[ebp]
  007ea	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  007ef	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  007f4	f3 0f 11 85 28
	fc ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  007fc	8b 85 cc fc ff
	ff		 mov	 eax, DWORD PTR _rkNew$91[ebp]
  00802	8b 8d c8 fc ff
	ff		 mov	 ecx, DWORD PTR _rkOld$90[ebp]
  00808	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0080d	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00812	f3 0f 11 85 24
	fc ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  0081a	f3 0f 10 85 2c
	fc ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00822	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _B$116[ebp], xmm0

; 181  :     y = fy;

  0082a	f3 0f 10 85 28
	fc ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00832	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _B$116[ebp+4], xmm0

; 182  :     z = fz;

  0083a	f3 0f 10 85 24
	fc ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00842	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _B$116[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  0084a	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+4]
  00852	f3 0f 11 85 20
	fc ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  0085a	f3 0f 5a 85 20
	fc ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  00862	51		 push	 ecx
  00863	51		 push	 ecx
  00864	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00869	e8 00 00 00 00	 call	 _fabs
  0086e	59		 pop	 ecx
  0086f	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  00870	d9 9d 18 fc ff
	ff		 fstp	 DWORD PTR $T72[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  00876	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+8]
  0087e	f3 0f 11 85 1c
	fc ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  00886	f3 0f 5a 85 1c
	fc ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  0088e	51		 push	 ecx
  0088f	51		 push	 ecx
  00890	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00895	e8 00 00 00 00	 call	 _fabs
  0089a	59		 pop	 ecx
  0089b	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  0089c	d9 9d 14 fc ff
	ff		 fstp	 DWORD PTR $T71[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  008a2	f3 0f 10 85 18
	fc ff ff	 movss	 xmm0, DWORD PTR $T72[ebp]
  008aa	0f 2f 85 14 fc
	ff ff		 comiss	 xmm0, DWORD PTR $T71[ebp]
  008b1	76 3e		 jbe	 SHORT $LN22@Render
  008b3	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+4]
  008bb	f3 0f 11 85 10
	fc ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
  008c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7fc00000
  008cb	f3 0f 11 85 d0
	fc ff ff	 movss	 DWORD PTR tv338[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  008d3	f3 0f 5a 85 10
	fc ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  008db	51		 push	 ecx
  008dc	51		 push	 ecx
  008dd	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  008e2	e8 00 00 00 00	 call	 _fabs
  008e7	59		 pop	 ecx
  008e8	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  008e9	d9 9d d0 fc ff
	ff		 fstp	 DWORD PTR tv338[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  008ef	eb 3c		 jmp	 SHORT $LN258@Render
$LN22@Render:
  008f1	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+8]
  008f9	f3 0f 11 85 0c
	fc ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
  00901	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7fc00000
  00909	f3 0f 11 85 d0
	fc ff ff	 movss	 DWORD PTR tv338[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  00911	f3 0f 5a 85 0c
	fc ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  00919	51		 push	 ecx
  0091a	51		 push	 ecx
  0091b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00920	e8 00 00 00 00	 call	 _fabs
  00925	59		 pop	 ecx
  00926	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  00927	d9 9d d0 fc ff
	ff		 fstp	 DWORD PTR tv338[ebp]
$LN258@Render:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  0092d	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp]
  00935	f3 0f 11 85 08
	fc ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  0093d	f3 0f 5a 85 08
	fc ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  00945	51		 push	 ecx
  00946	51		 push	 ecx
  00947	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0094c	e8 00 00 00 00	 call	 _fabs
  00951	59		 pop	 ecx
  00952	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  00953	d9 9d 04 fc ff
	ff		 fstp	 DWORD PTR $T70[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  00959	f3 0f 10 85 04
	fc ff ff	 movss	 xmm0, DWORD PTR $T70[ebp]
  00961	0f 2f 85 d0 fc
	ff ff		 comiss	 xmm0, DWORD PTR tv338[ebp]
  00968	76 41		 jbe	 SHORT $LN26@Render
  0096a	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp]
  00972	f3 0f 11 85 00
	fc ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
  0097a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7fc00000
  00982	f3 0f 11 85 c4
	fc ff ff	 movss	 DWORD PTR tv377[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  0098a	f3 0f 5a 85 00
	fc ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  00992	51		 push	 ecx
  00993	51		 push	 ecx
  00994	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00999	e8 00 00 00 00	 call	 _fabs
  0099e	59		 pop	 ecx
  0099f	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  009a0	d9 9d c4 fc ff
	ff		 fstp	 DWORD PTR tv377[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  009a6	e9 f3 00 00 00	 jmp	 $LN27@Render
$LN26@Render:
  009ab	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+4]
  009b3	f3 0f 11 85 fc
	fb ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  009bb	f3 0f 5a 85 fc
	fb ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  009c3	51		 push	 ecx
  009c4	51		 push	 ecx
  009c5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009ca	e8 00 00 00 00	 call	 _fabs
  009cf	59		 pop	 ecx
  009d0	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  009d1	d9 9d f4 fb ff
	ff		 fstp	 DWORD PTR $T69[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  009d7	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+8]
  009df	f3 0f 11 85 f8
	fb ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  009e7	f3 0f 5a 85 f8
	fb ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  009ef	51		 push	 ecx
  009f0	51		 push	 ecx
  009f1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  009f6	e8 00 00 00 00	 call	 _fabs
  009fb	59		 pop	 ecx
  009fc	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  009fd	d9 9d f0 fb ff
	ff		 fstp	 DWORD PTR $T68[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  00a03	f3 0f 10 85 f4
	fb ff ff	 movss	 xmm0, DWORD PTR $T69[ebp]
  00a0b	0f 2f 85 f0 fb
	ff ff		 comiss	 xmm0, DWORD PTR $T68[ebp]
  00a12	76 3e		 jbe	 SHORT $LN24@Render
  00a14	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+4]
  00a1c	f3 0f 11 85 ec
	fb ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
  00a24	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7fc00000
  00a2c	f3 0f 11 85 d4
	fc ff ff	 movss	 DWORD PTR tv376[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  00a34	f3 0f 5a 85 ec
	fb ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  00a3c	51		 push	 ecx
  00a3d	51		 push	 ecx
  00a3e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00a43	e8 00 00 00 00	 call	 _fabs
  00a48	59		 pop	 ecx
  00a49	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  00a4a	d9 9d d4 fc ff
	ff		 fstp	 DWORD PTR tv376[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  00a50	eb 3c		 jmp	 SHORT $LN288@Render
$LN24@Render:
  00a52	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+8]
  00a5a	f3 0f 11 85 e8
	fb ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
  00a62	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7fc00000
  00a6a	f3 0f 11 85 d4
	fc ff ff	 movss	 DWORD PTR tv376[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  00a72	f3 0f 5a 85 e8
	fb ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  00a7a	51		 push	 ecx
  00a7b	51		 push	 ecx
  00a7c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00a81	e8 00 00 00 00	 call	 _fabs
  00a86	59		 pop	 ecx
  00a87	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  00a88	d9 9d d4 fc ff
	ff		 fstp	 DWORD PTR tv376[ebp]
$LN288@Render:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 188  : 		float radius = max(fabs(B.x),max(fabs(B.y),fabs(B.z)))/2;

  00a8e	f3 0f 10 85 d4
	fc ff ff	 movss	 xmm0, DWORD PTR tv376[ebp]
  00a96	f3 0f 11 85 c4
	fc ff ff	 movss	 DWORD PTR tv377[ebp], xmm0
$LN27@Render:
  00a9e	f3 0f 10 85 c4
	fc ff ff	 movss	 xmm0, DWORD PTR tv377[ebp]
  00aa6	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  00aae	f3 0f 11 85 cc
	fa ff ff	 movss	 DWORD PTR _radius$21[ebp], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 446  :         return const_cast<reference>(_Mybase::operator*());

  00ab6	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _it1$[ebp]
  00abc	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
  00ac1	89 85 90 fa ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00ac7	8b 85 90 fa ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]
  00acd	89 85 94 fa ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  00ad3	8b 85 94 fa ff
	ff		 mov	 eax, DWORD PTR $T9[ebp]
  00ad9	89 85 98 fa ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 450  :         return pointer_traits<pointer>::pointer_to(**this);

  00adf	8b 85 98 fa ff
	ff		 mov	 eax, DWORD PTR $T10[ebp]
  00ae5	89 85 bc fa ff
	ff		 mov	 DWORD PTR $T19[ebp], eax

; 446  :         return const_cast<reference>(_Mybase::operator*());

  00aeb	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _it1$[ebp]
  00af1	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
  00af6	89 85 9c fa ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00afc	8b 85 9c fa ff
	ff		 mov	 eax, DWORD PTR $T11[ebp]
  00b02	89 85 a0 fa ff
	ff		 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  00b08	8b 85 a0 fa ff
	ff		 mov	 eax, DWORD PTR $T12[ebp]
  00b0e	89 85 a4 fa ff
	ff		 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 450  :         return pointer_traits<pointer>::pointer_to(**this);

  00b14	8b 85 a4 fa ff
	ff		 mov	 eax, DWORD PTR $T13[ebp]
  00b1a	89 85 b8 fa ff
	ff		 mov	 DWORD PTR $T18[ebp], eax

; 446  :         return const_cast<reference>(_Mybase::operator*());

  00b20	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _it1$[ebp]
  00b26	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
  00b2b	89 85 a8 fa ff
	ff		 mov	 DWORD PTR $T14[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00b31	8b 85 a8 fa ff
	ff		 mov	 eax, DWORD PTR $T14[ebp]
  00b37	89 85 ac fa ff
	ff		 mov	 DWORD PTR $T15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  00b3d	8b 85 ac fa ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  00b43	89 85 b0 fa ff
	ff		 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 450  :         return pointer_traits<pointer>::pointer_to(**this);

  00b49	8b 85 b0 fa ff
	ff		 mov	 eax, DWORD PTR $T16[ebp]
  00b4f	89 85 b4 fa ff
	ff		 mov	 DWORD PTR $T17[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 189  : 		Vector3d c(it1->second.x+B.x*0.5f,

  00b55	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp]
  00b5d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00b65	8b 85 b4 fa ff
	ff		 mov	 eax, DWORD PTR $T17[ebp]
  00b6b	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00b70	f3 0f 11 85 c0
	fa ff ff	 movss	 DWORD PTR _a$[ebp], xmm0
  00b78	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+4]
  00b80	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00b88	8b 85 b8 fa ff
	ff		 mov	 eax, DWORD PTR $T18[ebp]
  00b8e	f3 0f 58 40 08	 addss	 xmm0, DWORD PTR [eax+8]
  00b93	f3 0f 11 85 1c
	fb ff ff	 movss	 DWORD PTR _b$[ebp], xmm0
  00b9b	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+8]
  00ba3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00bab	8b 85 bc fa ff
	ff		 mov	 eax, DWORD PTR $T19[ebp]
  00bb1	f3 0f 58 40 0c	 addss	 xmm0, DWORD PTR [eax+12]
  00bb6	f3 0f 11 85 c8
	fa ff ff	 movss	 DWORD PTR _c$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SphereLib\vector.h

; 37   : 		x = a;

  00bbe	f3 0f 10 85 c0
	fa ff ff	 movss	 xmm0, DWORD PTR _a$[ebp]
  00bc6	f3 0f 11 85 6c
	fe ff ff	 movss	 DWORD PTR _c$103[ebp], xmm0

; 38   : 		y = b;

  00bce	f3 0f 10 85 1c
	fb ff ff	 movss	 xmm0, DWORD PTR _b$[ebp]
  00bd6	f3 0f 11 85 70
	fe ff ff	 movss	 DWORD PTR _c$103[ebp+4], xmm0

; 39   : 		z = c;

  00bde	f3 0f 10 85 c8
	fa ff ff	 movss	 xmm0, DWORD PTR _c$[ebp]
  00be6	f3 0f 11 85 74
	fe ff ff	 movss	 DWORD PTR _c$103[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 193  : 		if (frustum.ViewVolumeTest(c, radius)==VS_OUTSIDE)

  00bee	51		 push	 ecx
  00bef	f3 0f 10 85 cc
	fa ff ff	 movss	 xmm0, DWORD PTR _radius$21[ebp]
  00bf7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bfc	8d 85 6c fe ff
	ff		 lea	 eax, DWORD PTR _c$103[ebp]
  00c02	50		 push	 eax
  00c03	8b 8d dc fa ff
	ff		 mov	 ecx, DWORD PTR _frustum$[ebp]
  00c09	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  00c0e	83 f8 02	 cmp	 eax, 2
  00c11	75 05		 jne	 SHORT $LN19@Render

; 194  : 			continue;

  00c13	e9 84 fa ff ff	 jmp	 $LN2@Render
$LN19@Render:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00c18	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00c1d	89 85 38 fb ff
	ff		 mov	 DWORD PTR $T37[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 446  :         return const_cast<reference>(_Mybase::operator*());

  00c23	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _it1$[ebp]
  00c29	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
  00c2e	89 85 e0 fa ff
	ff		 mov	 DWORD PTR $T24[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00c34	8b 85 e0 fa ff
	ff		 mov	 eax, DWORD PTR $T24[ebp]
  00c3a	89 85 e4 fa ff
	ff		 mov	 DWORD PTR $T25[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  00c40	8b 85 e4 fa ff
	ff		 mov	 eax, DWORD PTR $T25[ebp]
  00c46	89 85 e8 fa ff
	ff		 mov	 DWORD PTR $T26[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 450  :         return pointer_traits<pointer>::pointer_to(**this);

  00c4c	8b 85 e8 fa ff
	ff		 mov	 eax, DWORD PTR $T26[ebp]
  00c52	89 85 e4 fb ff
	ff		 mov	 DWORD PTR $T67[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 196  : 		float rate1 = (1-(CTimer::Instance().GetCurrentSecond()-it1->first)/m_fTailLength);

  00c58	8b 8d 38 fb ff
	ff		 mov	 ecx, DWORD PTR $T37[ebp]
  00c5e	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00c63	d9 9d d8 fa ff
	ff		 fstp	 DWORD PTR tv2628[ebp]
  00c69	f3 0f 10 85 d8
	fa ff ff	 movss	 xmm0, DWORD PTR tv2628[ebp]
  00c71	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR $T67[ebp]
  00c77	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00c7b	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00c81	f3 0f 5e 40 10	 divss	 xmm0, DWORD PTR [eax+16]
  00c86	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00c8e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00c92	f3 0f 11 8d c8
	fb ff ff	 movss	 DWORD PTR _rate1$61[ebp], xmm1
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00c9a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00c9f	89 85 d4 fb ff
	ff		 mov	 DWORD PTR $T63[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 446  :         return const_cast<reference>(_Mybase::operator*());

  00ca5	8d 8d 94 fc ff
	ff		 lea	 ecx, DWORD PTR _it2$[ebp]
  00cab	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
  00cb0	89 85 e0 fb ff
	ff		 mov	 DWORD PTR $T66[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00cb6	8b 85 e0 fb ff
	ff		 mov	 eax, DWORD PTR $T66[ebp]
  00cbc	89 85 dc fb ff
	ff		 mov	 DWORD PTR $T65[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  00cc2	8b 85 dc fb ff
	ff		 mov	 eax, DWORD PTR $T65[ebp]
  00cc8	89 85 d8 fb ff
	ff		 mov	 DWORD PTR $T64[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 450  :         return pointer_traits<pointer>::pointer_to(**this);

  00cce	8b 85 d8 fb ff
	ff		 mov	 eax, DWORD PTR $T64[ebp]
  00cd4	89 85 cc fb ff
	ff		 mov	 DWORD PTR $T62[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 197  : 		float rate2 = (1-(CTimer::Instance().GetCurrentSecond()-it2->first)/m_fTailLength);

  00cda	8b 8d d4 fb ff
	ff		 mov	 ecx, DWORD PTR $T63[ebp]
  00ce0	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00ce5	d9 9d d0 fb ff
	ff		 fstp	 DWORD PTR tv2640[ebp]
  00ceb	f3 0f 10 85 d0
	fb ff ff	 movss	 xmm0, DWORD PTR tv2640[ebp]
  00cf3	8b 85 cc fb ff
	ff		 mov	 eax, DWORD PTR $T62[ebp]
  00cf9	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00cfd	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00d03	f3 0f 5e 40 10	 divss	 xmm0, DWORD PTR [eax+16]
  00d08	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00d10	f3 0f 5c c8	 subss	 xmm1, xmm0
  00d14	f3 0f 11 8d c4
	fb ff ff	 movss	 DWORD PTR _rate2$60[ebp], xmm1

; 198  : 		float size1 = m_fSize;

  00d1c	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00d22	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00d27	f3 0f 11 85 e4
	fc ff ff	 movss	 DWORD PTR _size1$94[ebp], xmm0

; 199  : 		float size2 = m_fSize;

  00d2f	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00d35	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00d3a	f3 0f 11 85 dc
	fc ff ff	 movss	 DWORD PTR _size2$93[ebp], xmm0

; 200  : 		if (!m_bRectShape)

  00d42	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00d48	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  00d4c	85 c0		 test	 eax, eax
  00d4e	75 30		 jne	 SHORT $LN20@Render

; 201  : 		{
; 202  : 			size1 *= rate1;

  00d50	f3 0f 10 85 e4
	fc ff ff	 movss	 xmm0, DWORD PTR _size1$94[ebp]
  00d58	f3 0f 59 85 c8
	fb ff ff	 mulss	 xmm0, DWORD PTR _rate1$61[ebp]
  00d60	f3 0f 11 85 e4
	fc ff ff	 movss	 DWORD PTR _size1$94[ebp], xmm0

; 203  : 			size2 *= rate2;

  00d68	f3 0f 10 85 dc
	fc ff ff	 movss	 xmm0, DWORD PTR _size2$93[ebp]
  00d70	f3 0f 59 85 c4
	fb ff ff	 mulss	 xmm0, DWORD PTR _rate2$60[ebp]
  00d78	f3 0f 11 85 dc
	fc ff ff	 movss	 DWORD PTR _size2$93[ebp], xmm0
$LN20@Render:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 41   :     x = fx;

  00d80	0f 57 c0	 xorps	 xmm0, xmm0
  00d83	f3 0f 11 85 14
	fb ff ff	 movss	 DWORD PTR $T32[ebp], xmm0

; 42   :     y = fy;

  00d8b	0f 57 c0	 xorps	 xmm0, xmm0
  00d8e	f3 0f 11 85 18
	fb ff ff	 movss	 DWORD PTR $T32[ebp+4], xmm0

; 180  :     x = fx;

  00d96	0f 57 c0	 xorps	 xmm0, xmm0
  00d99	f3 0f 11 85 78
	fe ff ff	 movss	 DWORD PTR $T104[ebp], xmm0

; 181  :     y = fy;

  00da1	f3 0f 10 85 e4
	fc ff ff	 movss	 xmm0, DWORD PTR _size1$94[ebp]
  00da9	f3 0f 11 85 7c
	fe ff ff	 movss	 DWORD PTR $T104[ebp+4], xmm0

; 182  :     z = fz;

  00db1	0f 57 c0	 xorps	 xmm0, xmm0
  00db4	f3 0f 11 85 80
	fe ff ff	 movss	 DWORD PTR $T104[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 207  : 			TFlyVertex(D3DXVECTOR3(0.0f,size1,0.0f), m_dwColor,D3DXVECTOR2(0.0f,0.0f)),

  00dbc	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00dc2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00dc5	89 85 c0 fb ff
	ff		 mov	 DWORD PTR _c$[ebp], eax

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00dcb	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR _v$117[ebp]
  00dd1	8d b5 78 fe ff
	ff		 lea	 esi, DWORD PTR $T104[ebp]
  00dd7	a5		 movsd
  00dd8	a5		 movsd
  00dd9	a5		 movsd
  00dda	8b 85 c0 fb ff
	ff		 mov	 eax, DWORD PTR _c$[ebp]
  00de0	89 85 6c ff ff
	ff		 mov	 DWORD PTR _v$117[ebp+12], eax
  00de6	8b 85 14 fb ff
	ff		 mov	 eax, DWORD PTR $T32[ebp]
  00dec	8b 8d 18 fb ff
	ff		 mov	 ecx, DWORD PTR $T32[ebp+4]
  00df2	89 85 70 ff ff
	ff		 mov	 DWORD PTR _v$117[ebp+16], eax
  00df8	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _v$117[ebp+20], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 41   :     x = fx;

  00dfe	0f 57 c0	 xorps	 xmm0, xmm0
  00e01	f3 0f 11 85 0c
	fb ff ff	 movss	 DWORD PTR $T31[ebp], xmm0

; 42   :     y = fy;

  00e09	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e11	f3 0f 11 85 10
	fb ff ff	 movss	 DWORD PTR $T31[ebp+4], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 208  : 			TFlyVertex(D3DXVECTOR3(-size1,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.0f,0.5f)),

  00e19	f3 0f 10 85 e4
	fc ff ff	 movss	 xmm0, DWORD PTR _size1$94[ebp]
  00e21	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  00e28	f3 0f 11 85 84
	fe ff ff	 movss	 DWORD PTR $T105[ebp], xmm0

; 181  :     y = fy;

  00e30	0f 57 c0	 xorps	 xmm0, xmm0
  00e33	f3 0f 11 85 88
	fe ff ff	 movss	 DWORD PTR $T105[ebp+4], xmm0

; 182  :     z = fz;

  00e3b	0f 57 c0	 xorps	 xmm0, xmm0
  00e3e	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR $T105[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 208  : 			TFlyVertex(D3DXVECTOR3(-size1,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.0f,0.5f)),

  00e46	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00e4c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00e4f	89 85 bc fb ff
	ff		 mov	 DWORD PTR _c$[ebp], eax

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00e55	8d bd 78 ff ff
	ff		 lea	 edi, DWORD PTR _v$117[ebp+24]
  00e5b	8d b5 84 fe ff
	ff		 lea	 esi, DWORD PTR $T105[ebp]
  00e61	a5		 movsd
  00e62	a5		 movsd
  00e63	a5		 movsd
  00e64	8b 85 bc fb ff
	ff		 mov	 eax, DWORD PTR _c$[ebp]
  00e6a	89 45 84	 mov	 DWORD PTR _v$117[ebp+36], eax
  00e6d	8b 85 0c fb ff
	ff		 mov	 eax, DWORD PTR $T31[ebp]
  00e73	8b 8d 10 fb ff
	ff		 mov	 ecx, DWORD PTR $T31[ebp+4]
  00e79	89 45 88	 mov	 DWORD PTR _v$117[ebp+40], eax
  00e7c	89 4d 8c	 mov	 DWORD PTR _v$117[ebp+44], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 41   :     x = fx;

  00e7f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00e87	f3 0f 11 85 04
	fb ff ff	 movss	 DWORD PTR $T30[ebp], xmm0

; 42   :     y = fy;

  00e8f	0f 57 c0	 xorps	 xmm0, xmm0
  00e92	f3 0f 11 85 08
	fb ff ff	 movss	 DWORD PTR $T30[ebp+4], xmm0

; 180  :     x = fx;

  00e9a	f3 0f 10 85 e4
	fc ff ff	 movss	 xmm0, DWORD PTR _size1$94[ebp]
  00ea2	f3 0f 11 85 60
	fe ff ff	 movss	 DWORD PTR $T102[ebp], xmm0

; 181  :     y = fy;

  00eaa	0f 57 c0	 xorps	 xmm0, xmm0
  00ead	f3 0f 11 85 64
	fe ff ff	 movss	 DWORD PTR $T102[ebp+4], xmm0

; 182  :     z = fz;

  00eb5	0f 57 c0	 xorps	 xmm0, xmm0
  00eb8	f3 0f 11 85 68
	fe ff ff	 movss	 DWORD PTR $T102[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 209  : 			TFlyVertex(D3DXVECTOR3(size1,0.0f,0.0f), m_dwColor,D3DXVECTOR2(0.5f,0.0f)),

  00ec0	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00ec6	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00ec9	89 85 b8 fb ff
	ff		 mov	 DWORD PTR _c$[ebp], eax

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00ecf	8d 7d 90	 lea	 edi, DWORD PTR _v$117[ebp+48]
  00ed2	8d b5 60 fe ff
	ff		 lea	 esi, DWORD PTR $T102[ebp]
  00ed8	a5		 movsd
  00ed9	a5		 movsd
  00eda	a5		 movsd
  00edb	8b 85 b8 fb ff
	ff		 mov	 eax, DWORD PTR _c$[ebp]
  00ee1	89 45 9c	 mov	 DWORD PTR _v$117[ebp+60], eax
  00ee4	8b 85 04 fb ff
	ff		 mov	 eax, DWORD PTR $T30[ebp]
  00eea	8b 8d 08 fb ff
	ff		 mov	 ecx, DWORD PTR $T30[ebp+4]
  00ef0	89 45 a0	 mov	 DWORD PTR _v$117[ebp+64], eax
  00ef3	89 4d a4	 mov	 DWORD PTR _v$117[ebp+68], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 41   :     x = fx;

  00ef6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00efe	f3 0f 11 85 fc
	fa ff ff	 movss	 DWORD PTR $T29[ebp], xmm0

; 42   :     y = fy;

  00f06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f0e	f3 0f 11 85 00
	fb ff ff	 movss	 DWORD PTR $T29[ebp+4], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 210  : 			TFlyVertex(D3DXVECTOR3(-size2,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.5f,1.0f)),

  00f16	f3 0f 10 85 dc
	fc ff ff	 movss	 xmm0, DWORD PTR _size2$93[ebp]
  00f1e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  00f25	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR $T106[ebp], xmm0

; 181  :     y = fy;

  00f2d	0f 57 c0	 xorps	 xmm0, xmm0
  00f30	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR $T106[ebp+4], xmm0

; 182  :     z = fz;

  00f38	0f 57 c0	 xorps	 xmm0, xmm0
  00f3b	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR $T106[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 210  : 			TFlyVertex(D3DXVECTOR3(-size2,0.0f,0.0f),m_dwColor,D3DXVECTOR2(0.5f,1.0f)),

  00f43	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00f49	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00f4c	89 85 b4 fb ff
	ff		 mov	 DWORD PTR _c$[ebp], eax

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00f52	8d 7d a8	 lea	 edi, DWORD PTR _v$117[ebp+72]
  00f55	8d b5 90 fe ff
	ff		 lea	 esi, DWORD PTR $T106[ebp]
  00f5b	a5		 movsd
  00f5c	a5		 movsd
  00f5d	a5		 movsd
  00f5e	8b 85 b4 fb ff
	ff		 mov	 eax, DWORD PTR _c$[ebp]
  00f64	89 45 b4	 mov	 DWORD PTR _v$117[ebp+84], eax
  00f67	8b 85 fc fa ff
	ff		 mov	 eax, DWORD PTR $T29[ebp]
  00f6d	8b 8d 00 fb ff
	ff		 mov	 ecx, DWORD PTR $T29[ebp+4]
  00f73	89 45 b8	 mov	 DWORD PTR _v$117[ebp+88], eax
  00f76	89 4d bc	 mov	 DWORD PTR _v$117[ebp+92], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 41   :     x = fx;

  00f79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f81	f3 0f 11 85 f4
	fa ff ff	 movss	 DWORD PTR $T28[ebp], xmm0

; 42   :     y = fy;

  00f89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00f91	f3 0f 11 85 f8
	fa ff ff	 movss	 DWORD PTR $T28[ebp+4], xmm0

; 180  :     x = fx;

  00f99	f3 0f 10 85 dc
	fc ff ff	 movss	 xmm0, DWORD PTR _size2$93[ebp]
  00fa1	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR $T107[ebp], xmm0

; 181  :     y = fy;

  00fa9	0f 57 c0	 xorps	 xmm0, xmm0
  00fac	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR $T107[ebp+4], xmm0

; 182  :     z = fz;

  00fb4	0f 57 c0	 xorps	 xmm0, xmm0
  00fb7	f3 0f 11 85 a4
	fe ff ff	 movss	 DWORD PTR $T107[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 211  : 			TFlyVertex(D3DXVECTOR3(size2,0.0f,0.0f), m_dwColor,D3DXVECTOR2(1.0f,0.5f)),

  00fbf	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00fc5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00fc8	89 85 b0 fb ff
	ff		 mov	 DWORD PTR _c$[ebp], eax

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  00fce	8d 7d c0	 lea	 edi, DWORD PTR _v$117[ebp+96]
  00fd1	8d b5 9c fe ff
	ff		 lea	 esi, DWORD PTR $T107[ebp]
  00fd7	a5		 movsd
  00fd8	a5		 movsd
  00fd9	a5		 movsd
  00fda	8b 85 b0 fb ff
	ff		 mov	 eax, DWORD PTR _c$[ebp]
  00fe0	89 45 cc	 mov	 DWORD PTR _v$117[ebp+108], eax
  00fe3	8b 85 f4 fa ff
	ff		 mov	 eax, DWORD PTR $T28[ebp]
  00fe9	8b 8d f8 fa ff
	ff		 mov	 ecx, DWORD PTR $T28[ebp+4]
  00fef	89 45 d0	 mov	 DWORD PTR _v$117[ebp+112], eax
  00ff2	89 4d d4	 mov	 DWORD PTR _v$117[ebp+116], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 41   :     x = fx;

  00ff5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ffd	f3 0f 11 85 ec
	fa ff ff	 movss	 DWORD PTR $T27[ebp], xmm0

; 42   :     y = fy;

  01005	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0100d	f3 0f 11 85 f0
	fa ff ff	 movss	 DWORD PTR $T27[ebp+4], xmm0

; 180  :     x = fx;

  01015	0f 57 c0	 xorps	 xmm0, xmm0
  01018	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR $T108[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 212  : 			TFlyVertex(D3DXVECTOR3(0.0f,-size2,0.0f),m_dwColor,D3DXVECTOR2(1.0f,1.0f)),

  01020	f3 0f 10 85 dc
	fc ff ff	 movss	 xmm0, DWORD PTR _size2$93[ebp]
  01028	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 181  :     y = fy;

  0102f	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR $T108[ebp+4], xmm0

; 182  :     z = fz;

  01037	0f 57 c0	 xorps	 xmm0, xmm0
  0103a	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR $T108[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 212  : 			TFlyVertex(D3DXVECTOR3(0.0f,-size2,0.0f),m_dwColor,D3DXVECTOR2(1.0f,1.0f)),

  01042	8b 85 f8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  01048	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0104b	89 85 ac fb ff
	ff		 mov	 DWORD PTR _c$[ebp], eax

; 96   : 	TFlyVertex(const D3DXVECTOR3& p, DWORD c, const D3DXVECTOR2 & t):p(p),c(c),t(t){}

  01051	8d 7d d8	 lea	 edi, DWORD PTR _v$117[ebp+120]
  01054	8d b5 a8 fe ff
	ff		 lea	 esi, DWORD PTR $T108[ebp]
  0105a	a5		 movsd
  0105b	a5		 movsd
  0105c	a5		 movsd
  0105d	8b 85 ac fb ff
	ff		 mov	 eax, DWORD PTR _c$[ebp]
  01063	89 45 e4	 mov	 DWORD PTR _v$117[ebp+132], eax
  01066	8b 85 ec fa ff
	ff		 mov	 eax, DWORD PTR $T27[ebp]
  0106c	8b 8d f0 fa ff
	ff		 mov	 ecx, DWORD PTR $T27[ebp+4]
  01072	89 45 e8	 mov	 DWORD PTR _v$117[ebp+136], eax
  01075	89 4d ec	 mov	 DWORD PTR _v$117[ebp+140], ecx

; 213  : 	
; 214  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 215  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 216  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f), ((DWORD)(0x40*rate1)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 217  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 218  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f), ((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 219  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),((DWORD)(0x40*rate2)<<24) + 0x0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 220  : 
; 221  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 222  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 223  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 224  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 225  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),
; 226  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0x20ff0000,D3DXVECTOR2(0.0f,0.0f)),*/
; 227  : 
; 228  : 			/*TVertex(D3DXVECTOR3(0.0f,size1,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 229  : 			TVertex(D3DXVECTOR3(-size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 230  : 			TVertex(D3DXVECTOR3(size1,0.0f,0.0f),0xffff0000,D3DXVECTOR2(0.0f,0.0f)),
; 231  : 			TVertex(D3DXVECTOR3(-size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 232  : 			TVertex(D3DXVECTOR3(size2,0.0f,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),
; 233  : 			TVertex(D3DXVECTOR3(0.0f,-size2,0.0f),0xff0000ff,D3DXVECTOR2(0.0f,0.0f)),*/
; 234  : 		};
; 235  : 
; 236  : 
; 237  : 		D3DXVECTOR3 E(M._41,M._42,M._43);

  01078	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _M$[ebp]
  0107e	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  01083	f3 0f 11 85 a8
	fb ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  0108b	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _M$[ebp]
  01091	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  01096	f3 0f 11 85 a4
	fb ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  0109e	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _M$[ebp]
  010a4	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  010a9	f3 0f 11 85 a0
	fb ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  010b1	f3 0f 10 85 a8
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  010b9	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _E$115[ebp], xmm0

; 181  :     y = fy;

  010c1	f3 0f 10 85 a4
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  010c9	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _E$115[ebp+4], xmm0

; 182  :     z = fz;

  010d1	f3 0f 10 85 a0
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  010d9	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _E$115[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Camera.h

; 168  : 		const D3DXVECTOR3 & GetEye() const		{ return m_v3Eye; }

  010e1	8b b5 e0 fc ff
	ff		 mov	 esi, DWORD PTR _pCurrentCamera$[ebp]
  010e7	83 c6 30	 add	 esi, 48			; 00000030H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 238  : 		E = pCurrentCamera->GetEye();

  010ea	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR _E$115[ebp]
  010f0	a5		 movsd
  010f1	a5		 movsd
  010f2	a5		 movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 446  :         return const_cast<reference>(_Mybase::operator*());

  010f3	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _it1$[ebp]
  010f9	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
  010fe	89 85 9c fb ff
	ff		 mov	 DWORD PTR $T59[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  01104	8b 85 9c fb ff
	ff		 mov	 eax, DWORD PTR $T59[ebp]
  0110a	89 85 98 fb ff
	ff		 mov	 DWORD PTR $T58[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  01110	8b 85 98 fb ff
	ff		 mov	 eax, DWORD PTR $T58[ebp]
  01116	89 85 94 fb ff
	ff		 mov	 DWORD PTR $T57[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 450  :         return pointer_traits<pointer>::pointer_to(**this);

  0111c	8b 85 94 fb ff
	ff		 mov	 eax, DWORD PTR $T57[ebp]
  01122	89 85 90 fb ff
	ff		 mov	 DWORD PTR $T56[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 239  : 		E-=it1->second;

  01128	8b 85 90 fb ff
	ff		 mov	 eax, DWORD PTR $T56[ebp]
  0112e	83 c0 04	 add	 eax, 4
  01131	89 85 bc fc ff
	ff		 mov	 DWORD PTR _v$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 213  :     x -= v.x;

  01137	8b 85 bc fc ff
	ff		 mov	 eax, DWORD PTR _v$[ebp]
  0113d	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _E$115[ebp]
  01145	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  01149	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _E$115[ebp], xmm0

; 214  :     y -= v.y;

  01151	8b 85 bc fc ff
	ff		 mov	 eax, DWORD PTR _v$[ebp]
  01157	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _E$115[ebp+4]
  0115f	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
  01164	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _E$115[ebp+4], xmm0

; 215  :     z -= v.z;

  0116c	8b 85 bc fc ff
	ff		 mov	 eax, DWORD PTR _v$[ebp]
  01172	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _E$115[ebp+8]
  0117a	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0117f	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _E$115[ebp+8], xmm0

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  01187	f3 0f 10 85 58
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+4]
  0118f	f3 0f 59 85 50
	ff ff ff	 mulss	 xmm0, DWORD PTR _E$115[ebp+8]
  01197	f3 0f 10 8d 5c
	ff ff ff	 movss	 xmm1, DWORD PTR _B$116[ebp+8]
  0119f	f3 0f 59 8d 4c
	ff ff ff	 mulss	 xmm1, DWORD PTR _E$115[ebp+4]
  011a7	f3 0f 5c c1	 subss	 xmm0, xmm1
  011ab	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _v$109[ebp], xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  011b3	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp+8]
  011bb	f3 0f 59 85 48
	ff ff ff	 mulss	 xmm0, DWORD PTR _E$115[ebp]
  011c3	f3 0f 10 8d 54
	ff ff ff	 movss	 xmm1, DWORD PTR _B$116[ebp]
  011cb	f3 0f 59 8d 50
	ff ff ff	 mulss	 xmm1, DWORD PTR _E$115[ebp+8]
  011d3	f3 0f 5c c1	 subss	 xmm0, xmm1
  011d7	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _v$109[ebp+4], xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  011df	f3 0f 10 85 54
	ff ff ff	 movss	 xmm0, DWORD PTR _B$116[ebp]
  011e7	f3 0f 59 85 4c
	ff ff ff	 mulss	 xmm0, DWORD PTR _E$115[ebp+4]
  011ef	f3 0f 10 8d 58
	ff ff ff	 movss	 xmm1, DWORD PTR _B$116[ebp+4]
  011f7	f3 0f 59 8d 48
	ff ff ff	 mulss	 xmm1, DWORD PTR _E$115[ebp]
  011ff	f3 0f 5c c1	 subss	 xmm0, xmm1
  01203	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _v$109[ebp+8], xmm0

; 1280 : 
; 1281 :     *pOut = v;

  0120b	8d b5 b4 fe ff
	ff		 lea	 esi, DWORD PTR _v$109[ebp]
  01211	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR _P$113[ebp]
  01217	a5		 movsd
  01218	a5		 movsd
  01219	a5		 movsd

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0121a	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR _F$[ebp+4]
  01222	f3 0f 59 85 2c
	ff ff ff	 mulss	 xmm0, DWORD PTR _P$113[ebp+8]
  0122a	f3 0f 10 8d 44
	ff ff ff	 movss	 xmm1, DWORD PTR _F$[ebp+8]
  01232	f3 0f 59 8d 28
	ff ff ff	 mulss	 xmm1, DWORD PTR _P$113[ebp+4]
  0123a	f3 0f 5c c1	 subss	 xmm0, xmm1
  0123e	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _v$110[ebp], xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  01246	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR _F$[ebp+8]
  0124e	f3 0f 59 85 24
	ff ff ff	 mulss	 xmm0, DWORD PTR _P$113[ebp]
  01256	f3 0f 10 8d 3c
	ff ff ff	 movss	 xmm1, DWORD PTR _F$[ebp]
  0125e	f3 0f 59 8d 2c
	ff ff ff	 mulss	 xmm1, DWORD PTR _P$113[ebp+8]
  01266	f3 0f 5c c1	 subss	 xmm0, xmm1
  0126a	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _v$110[ebp+4], xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  01272	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR _F$[ebp]
  0127a	f3 0f 59 85 28
	ff ff ff	 mulss	 xmm0, DWORD PTR _P$113[ebp+4]
  01282	f3 0f 10 8d 40
	ff ff ff	 movss	 xmm1, DWORD PTR _F$[ebp+4]
  0128a	f3 0f 59 8d 24
	ff ff ff	 mulss	 xmm1, DWORD PTR _P$113[ebp]
  01292	f3 0f 5c c1	 subss	 xmm0, xmm1
  01296	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _v$110[ebp+8], xmm0

; 1280 : 
; 1281 :     *pOut = v;

  0129e	8d b5 c0 fe ff
	ff		 lea	 esi, DWORD PTR _v$110[ebp]
  012a4	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR _U$114[ebp]
  012aa	a5		 movsd
  012ab	a5		 movsd
  012ac	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 246  : 		D3DXVec3Normalize(&U,&U);

  012ad	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _U$114[ebp]
  012b3	50		 push	 eax
  012b4	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _U$114[ebp]
  012ba	50		 push	 eax
  012bb	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  012c0	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR _F$[ebp+4]
  012c8	f3 0f 59 85 38
	ff ff ff	 mulss	 xmm0, DWORD PTR _U$114[ebp+8]
  012d0	f3 0f 10 8d 44
	ff ff ff	 movss	 xmm1, DWORD PTR _F$[ebp+8]
  012d8	f3 0f 59 8d 34
	ff ff ff	 mulss	 xmm1, DWORD PTR _U$114[ebp+4]
  012e0	f3 0f 5c c1	 subss	 xmm0, xmm1
  012e4	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _v$111[ebp], xmm0

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  012ec	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR _F$[ebp+8]
  012f4	f3 0f 59 85 30
	ff ff ff	 mulss	 xmm0, DWORD PTR _U$114[ebp]
  012fc	f3 0f 10 8d 3c
	ff ff ff	 movss	 xmm1, DWORD PTR _F$[ebp]
  01304	f3 0f 59 8d 38
	ff ff ff	 mulss	 xmm1, DWORD PTR _U$114[ebp+8]
  0130c	f3 0f 5c c1	 subss	 xmm0, xmm1
  01310	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _v$111[ebp+4], xmm0

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  01318	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR _F$[ebp]
  01320	f3 0f 59 85 34
	ff ff ff	 mulss	 xmm0, DWORD PTR _U$114[ebp+4]
  01328	f3 0f 10 8d 40
	ff ff ff	 movss	 xmm1, DWORD PTR _F$[ebp+4]
  01330	f3 0f 59 8d 30
	ff ff ff	 mulss	 xmm1, DWORD PTR _U$114[ebp]
  01338	f3 0f 5c c1	 subss	 xmm0, xmm1
  0133c	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _v$111[ebp+8], xmm0

; 1280 : 
; 1281 :     *pOut = v;

  01344	8d b5 cc fe ff
	ff		 lea	 esi, DWORD PTR _v$111[ebp]
  0134a	8d bd d8 fe ff
	ff		 lea	 edi, DWORD PTR _R$112[ebp]
  01350	a5		 movsd
  01351	a5		 movsd
  01352	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 250  : 		m._21 = U.x;

  01353	f3 0f 10 85 30
	ff ff ff	 movss	 xmm0, DWORD PTR _U$114[ebp]
  0135b	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _m$[ebp+16], xmm0

; 251  : 		m._22 = U.y;

  01363	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR _U$114[ebp+4]
  0136b	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _m$[ebp+20], xmm0

; 252  : 		m._23 = U.z;

  01373	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _U$114[ebp+8]
  0137b	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _m$[ebp+24], xmm0

; 253  : 		m._11 = R.x;

  01383	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _R$112[ebp]
  0138b	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _m$[ebp], xmm0

; 254  : 		m._12 = R.y;

  01393	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _R$112[ebp+4]
  0139b	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _m$[ebp+4], xmm0

; 255  : 		m._13 = R.z;

  013a3	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _R$112[ebp+8]
  013ab	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _m$[ebp+8], xmm0

; 256  : 		int i;
; 257  : 		for(i=0;i<6;i++)

  013b3	83 a5 f4 fc ff
	ff 00		 and	 DWORD PTR _i$99[ebp], 0
  013ba	eb 0d		 jmp	 SHORT $LN7@Render
$LN5@Render:
  013bc	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _i$99[ebp]
  013c2	40		 inc	 eax
  013c3	89 85 f4 fc ff
	ff		 mov	 DWORD PTR _i$99[ebp], eax
$LN7@Render:
  013c9	83 bd f4 fc ff
	ff 06		 cmp	 DWORD PTR _i$99[ebp], 6
  013d0	7d 2c		 jge	 SHORT $LN6@Render

; 258  : 			D3DXVec3TransformNormal(&v[i].p,&v[i].p,&m);

  013d2	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _m$[ebp]
  013d8	50		 push	 eax
  013d9	6b 85 f4 fc ff
	ff 18		 imul	 eax, DWORD PTR _i$99[ebp], 24
  013e0	8d 84 05 60 ff
	ff ff		 lea	 eax, DWORD PTR _v$117[ebp+eax]
  013e7	50		 push	 eax
  013e8	6b 85 f4 fc ff
	ff 18		 imul	 eax, DWORD PTR _i$99[ebp], 24
  013ef	8d 84 05 60 ff
	ff ff		 lea	 eax, DWORD PTR _v$117[ebp+eax]
  013f6	50		 push	 eax
  013f7	e8 00 00 00 00	 call	 _D3DXVec3TransformNormal@12
  013fc	eb be		 jmp	 SHORT $LN5@Render
$LN6@Render:

; 259  : 		for(i=0;i<3;i++)

  013fe	83 a5 f4 fc ff
	ff 00		 and	 DWORD PTR _i$99[ebp], 0
  01405	eb 0d		 jmp	 SHORT $LN10@Render
$LN8@Render:
  01407	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _i$99[ebp]
  0140d	40		 inc	 eax
  0140e	89 85 f4 fc ff
	ff		 mov	 DWORD PTR _i$99[ebp], eax
$LN10@Render:
  01414	83 bd f4 fc ff
	ff 03		 cmp	 DWORD PTR _i$99[ebp], 3
  0141b	0f 8d bd 00 00
	00		 jge	 $LN9@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 446  :         return const_cast<reference>(_Mybase::operator*());

  01421	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _it1$[ebp]
  01427	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
  0142c	89 85 8c fb ff
	ff		 mov	 DWORD PTR $T55[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  01432	8b 85 8c fb ff
	ff		 mov	 eax, DWORD PTR $T55[ebp]
  01438	89 85 88 fb ff
	ff		 mov	 DWORD PTR $T54[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  0143e	8b 85 88 fb ff
	ff		 mov	 eax, DWORD PTR $T54[ebp]
  01444	89 85 84 fb ff
	ff		 mov	 DWORD PTR $T53[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 450  :         return pointer_traits<pointer>::pointer_to(**this);

  0144a	8b 85 84 fb ff
	ff		 mov	 eax, DWORD PTR $T53[ebp]
  01450	89 85 80 fb ff
	ff		 mov	 DWORD PTR $T52[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 260  : 			v[i].p += it1->second;

  01456	8b 85 80 fb ff
	ff		 mov	 eax, DWORD PTR $T52[ebp]
  0145c	83 c0 04	 add	 eax, 4
  0145f	89 85 b8 fc ff
	ff		 mov	 DWORD PTR _v$[ebp], eax
  01465	6b 85 f4 fc ff
	ff 18		 imul	 eax, DWORD PTR _i$99[ebp], 24
  0146c	8d 84 05 60 ff
	ff ff		 lea	 eax, DWORD PTR _v$117[ebp+eax]
  01473	89 85 ec fc ff
	ff		 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 204  :     x += v.x;

  01479	8b 85 ec fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0147f	8b 8d b8 fc ff
	ff		 mov	 ecx, DWORD PTR _v$[ebp]
  01485	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01489	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  0148d	8b 85 ec fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  01493	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 205  :     y += v.y;

  01497	8b 85 ec fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0149d	8b 8d b8 fc ff
	ff		 mov	 ecx, DWORD PTR _v$[ebp]
  014a3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  014a8	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  014ad	8b 85 ec fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  014b3	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 206  :     z += v.z;

  014b8	8b 85 ec fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  014be	8b 8d b8 fc ff
	ff		 mov	 ecx, DWORD PTR _v$[ebp]
  014c4	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  014c9	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  014ce	8b 85 ec fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  014d4	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 260  : 			v[i].p += it1->second;

  014d9	e9 29 ff ff ff	 jmp	 $LN8@Render
$LN9@Render:

; 261  : 		for(;i<6;i++)

  014de	eb 0d		 jmp	 SHORT $LN13@Render
$LN11@Render:
  014e0	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _i$99[ebp]
  014e6	40		 inc	 eax
  014e7	89 85 f4 fc ff
	ff		 mov	 DWORD PTR _i$99[ebp], eax
$LN13@Render:
  014ed	83 bd f4 fc ff
	ff 06		 cmp	 DWORD PTR _i$99[ebp], 6
  014f4	0f 8d bd 00 00
	00		 jge	 $LN12@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 446  :         return const_cast<reference>(_Mybase::operator*());

  014fa	8d 8d 94 fc ff
	ff		 lea	 ecx, DWORD PTR _it2$[ebp]
  01500	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QBEABU?$pair@MUD3DXVECTOR3@@@1@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<std::pair<float,D3DXVECTOR3> > > >::operator*
  01505	89 85 7c fb ff
	ff		 mov	 DWORD PTR $T51[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0150b	8b 85 7c fb ff
	ff		 mov	 eax, DWORD PTR $T51[ebp]
  01511	89 85 78 fb ff
	ff		 mov	 DWORD PTR $T50[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  01517	8b 85 78 fb ff
	ff		 mov	 eax, DWORD PTR $T50[ebp]
  0151d	89 85 74 fb ff
	ff		 mov	 DWORD PTR $T49[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 450  :         return pointer_traits<pointer>::pointer_to(**this);

  01523	8b 85 74 fb ff
	ff		 mov	 eax, DWORD PTR $T49[ebp]
  01529	89 85 70 fb ff
	ff		 mov	 DWORD PTR $T48[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 262  : 			v[i].p += it2->second;

  0152f	8b 85 70 fb ff
	ff		 mov	 eax, DWORD PTR $T48[ebp]
  01535	83 c0 04	 add	 eax, 4
  01538	89 85 b4 fc ff
	ff		 mov	 DWORD PTR _v$[ebp], eax
  0153e	6b 85 f4 fc ff
	ff 18		 imul	 eax, DWORD PTR _i$99[ebp], 24
  01545	8d 84 05 60 ff
	ff ff		 lea	 eax, DWORD PTR _v$117[ebp+eax]
  0154c	89 85 e8 fc ff
	ff		 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 204  :     x += v.x;

  01552	8b 85 e8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  01558	8b 8d b4 fc ff
	ff		 mov	 ecx, DWORD PTR _v$[ebp]
  0155e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01562	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  01566	8b 85 e8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0156c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 205  :     y += v.y;

  01570	8b 85 e8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  01576	8b 8d b4 fc ff
	ff		 mov	 ecx, DWORD PTR _v$[ebp]
  0157c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01581	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  01586	8b 85 e8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0158c	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 206  :     z += v.z;

  01591	8b 85 e8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  01597	8b 8d b4 fc ff
	ff		 mov	 ecx, DWORD PTR _v$[ebp]
  0159d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  015a2	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  015a7	8b 85 e8 fc ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  015ad	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 262  : 			v[i].p += it2->second;

  015b2	e9 29 ff ff ff	 jmp	 $LN11@Render
$LN12@Render:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\Camera.h

; 171  : 		const D3DXVECTOR3 & GetView() const		{ return m_v3View; }

  015b7	8b 85 e0 fc ff
	ff		 mov	 eax, DWORD PTR _pCurrentCamera$[ebp]
  015bd	83 c0 54	 add	 eax, 84			; 00000054H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 266  : 		VSVector.push_back(make_pair(-D3DXVec3Dot(&E,&pCurrentCamera->GetView()),TFlyVertexSet(v)));

  015c0	89 85 b0 fc ff
	ff		 mov	 DWORD PTR _pV2$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  015c6	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR _pV2$[ebp]
  015cc	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _E$115[ebp+8]
  015d4	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  015d9	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR _pV2$[ebp]
  015df	f3 0f 10 8d 4c
	ff ff ff	 movss	 xmm1, DWORD PTR _E$115[ebp+4]
  015e7	f3 0f 59 48 04	 mulss	 xmm1, DWORD PTR [eax+4]
  015ec	8b 85 b0 fc ff
	ff		 mov	 eax, DWORD PTR _pV2$[ebp]
  015f2	f3 0f 10 95 48
	ff ff ff	 movss	 xmm2, DWORD PTR _E$115[ebp]
  015fa	f3 0f 59 10	 mulss	 xmm2, DWORD PTR [eax]
  015fe	f3 0f 58 d1	 addss	 xmm2, xmm1
  01602	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 266  : 		VSVector.push_back(make_pair(-D3DXVec3Dot(&E,&pCurrentCamera->GetView()),TFlyVertexSet(v)));

  01606	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  0160d	f3 0f 11 95 68
	fb ff ff	 movss	 DWORD PTR $T47[ebp], xmm2
  01615	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _v$117[ebp]
  0161b	50		 push	 eax
  0161c	8d 8d fc fc ff
	ff		 lea	 ecx, DWORD PTR $T100[ebp]
  01622	e8 00 00 00 00	 call	 ??0TFlyVertexSet@@QAE@PAUTFlyVertex@@@Z ; TFlyVertexSet::TFlyVertexSet
  01627	89 85 6c fb ff
	ff		 mov	 DWORD PTR __Val2$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0162d	8b 85 6c fb ff
	ff		 mov	 eax, DWORD PTR __Val2$[ebp]
  01633	89 85 5c fb ff
	ff		 mov	 DWORD PTR $T44[ebp], eax
  01639	8d 85 68 fb ff
	ff		 lea	 eax, DWORD PTR $T47[ebp]
  0163f	89 85 64 fb ff
	ff		 mov	 DWORD PTR $T46[ebp], eax
  01645	8b 85 64 fb ff
	ff		 mov	 eax, DWORD PTR $T46[ebp]
  0164b	89 85 60 fb ff
	ff		 mov	 DWORD PTR $T45[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  01651	8b 85 60 fb ff
	ff		 mov	 eax, DWORD PTR $T45[ebp]
  01657	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0165b	f3 0f 11 85 8c
	fd ff ff	 movss	 DWORD PTR $T101[ebp], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  01663	8b 85 5c fb ff
	ff		 mov	 eax, DWORD PTR $T44[ebp]
  01669	89 85 58 fb ff
	ff		 mov	 DWORD PTR $T43[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0166f	8d bd 90 fd ff
	ff		 lea	 edi, DWORD PTR $T101[ebp+4]
  01675	6a 24		 push	 36			; 00000024H
  01677	59		 pop	 ecx
  01678	8b b5 58 fb ff
	ff		 mov	 esi, DWORD PTR $T43[ebp]
  0167e	f3 a5		 rep movsd

; 392  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

  01680	8d 85 8c fd ff
	ff		 lea	 eax, DWORD PTR $T101[ebp]
  01686	89 85 54 fb ff
	ff		 mov	 DWORD PTR $T42[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0168c	8b 85 54 fb ff
	ff		 mov	 eax, DWORD PTR $T42[ebp]
  01692	89 85 50 fb ff
	ff		 mov	 DWORD PTR $T41[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 721  :         emplace_back(_STD move(_Val));

  01698	ff b5 50 fb ff
	ff		 push	 DWORD PTR $T41[ebp]
  0169e	8d 8d 68 fc ff
	ff		 lea	 ecx, DWORD PTR _VSVector$[ebp]
  016a4	e8 00 00 00 00	 call	 ??$emplace_back@U?$pair@MUTFlyVertexSet@@@std@@@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAEX$$QAU?$pair@MUTFlyVertexSet@@@1@@Z ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::emplace_back<std::pair<float,TFlyVertexSet> >
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 269  : 	}

  016a9	e9 ee ef ff ff	 jmp	 $LN2@Render
$LN3@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1420 :         auto& _My_data = _Mypair._Myval2;

  016ae	8d 85 68 fc ff
	ff		 lea	 eax, DWORD PTR _VSVector$[ebp]
  016b4	89 85 88 fc ff
	ff		 mov	 DWORD PTR __My_data$89[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  016ba	8b 85 88 fc ff
	ff		 mov	 eax, DWORD PTR __My_data$89[ebp]
  016c0	89 85 88 fa ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  016c6	8b 85 88 fc ff
	ff		 mov	 eax, DWORD PTR __My_data$89[ebp]
  016cc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  016cf	89 85 4c fb ff
	ff		 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  016d5	8b 85 4c fb ff
	ff		 mov	 eax, DWORD PTR ___param0$[ebp]
  016db	89 85 48 fb ff
	ff		 mov	 DWORD PTR $T40[ebp], eax

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  016e1	8d 85 48 fb ff
	ff		 lea	 eax, DWORD PTR $T40[ebp]
  016e7	89 85 3c fb ff
	ff		 mov	 DWORD PTR $T38[ebp], eax

; 1410 :         auto& _My_data = _Mypair._Myval2;

  016ed	8d 85 68 fc ff
	ff		 lea	 eax, DWORD PTR _VSVector$[ebp]
  016f3	89 85 84 fc ff
	ff		 mov	 DWORD PTR __My_data$88[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  016f9	8b 85 84 fc ff
	ff		 mov	 eax, DWORD PTR __My_data$88[ebp]
  016ff	89 85 84 fa ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  01705	8b 85 84 fc ff
	ff		 mov	 eax, DWORD PTR __My_data$88[ebp]
  0170b	8b 00		 mov	 eax, DWORD PTR [eax]
  0170d	89 85 44 fb ff
	ff		 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  01713	8b 85 44 fb ff
	ff		 mov	 eax, DWORD PTR ___param0$[ebp]
  01719	89 85 40 fb ff
	ff		 mov	 DWORD PTR $T39[ebp], eax

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  0171f	8d 85 40 fb ff
	ff		 lea	 eax, DWORD PTR $T39[ebp]
  01725	89 85 c4 fa ff
	ff		 mov	 DWORD PTR $T20[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 271  : 	std::sort(VSVector.begin(),VSVector.end());

  0172b	8b 85 3c fb ff
	ff		 mov	 eax, DWORD PTR $T38[ebp]
  01731	ff 30		 push	 DWORD PTR [eax]
  01733	8b 85 c4 fa ff
	ff		 mov	 eax, DWORD PTR $T20[ebp]
  01739	ff 30		 push	 DWORD PTR [eax]
  0173b	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@U?$pair@MUTFlyVertexSet@@@std@@@std@@@std@@@0@0@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<std::pair<float,TFlyVertexSet> > > > >
  01740	59		 pop	 ecx
  01741	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1410 :         auto& _My_data = _Mypair._Myval2;

  01742	8d 85 68 fc ff
	ff		 lea	 eax, DWORD PTR _VSVector$[ebp]
  01748	89 85 80 fc ff
	ff		 mov	 DWORD PTR __My_data$87[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0174e	8b 85 80 fc ff
	ff		 mov	 eax, DWORD PTR __My_data$87[ebp]
  01754	89 85 8c fa ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  0175a	8b 85 80 fc ff
	ff		 mov	 eax, DWORD PTR __My_data$87[ebp]
  01760	8b 00		 mov	 eax, DWORD PTR [eax]
  01762	89 85 34 fb ff
	ff		 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  01768	8b 85 34 fb ff
	ff		 mov	 eax, DWORD PTR ___param0$[ebp]
  0176e	89 85 d8 fc ff
	ff		 mov	 DWORD PTR _it$92[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 273  : 	for(TFlyVertexSetVector::iterator it = VSVector.begin();it!=VSVector.end();++it)

  01774	eb 11		 jmp	 SHORT $LN602@Render
$LN14@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 75   :         ++_Ptr;

  01776	8b 85 d8 fc ff
	ff		 mov	 eax, DWORD PTR _it$92[ebp]
  0177c	05 94 00 00 00	 add	 eax, 148		; 00000094H
  01781	89 85 d8 fc ff
	ff		 mov	 DWORD PTR _it$92[ebp], eax
$LN602@Render:

; 1420 :         auto& _My_data = _Mypair._Myval2;

  01787	8d 85 68 fc ff
	ff		 lea	 eax, DWORD PTR _VSVector$[ebp]
  0178d	89 85 7c fc ff
	ff		 mov	 DWORD PTR __My_data$86[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  01793	8b 85 7c fc ff
	ff		 mov	 eax, DWORD PTR __My_data$86[ebp]
  01799	89 85 80 fa ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  0179f	8b 85 7c fc ff
	ff		 mov	 eax, DWORD PTR __My_data$86[ebp]
  017a5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  017a8	89 85 30 fb ff
	ff		 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  017ae	8b 85 30 fb ff
	ff		 mov	 eax, DWORD PTR ___param0$[ebp]
  017b4	89 85 2c fb ff
	ff		 mov	 DWORD PTR $T36[ebp], eax

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  017ba	8d 85 2c fb ff
	ff		 lea	 eax, DWORD PTR $T36[ebp]
  017c0	89 85 28 fb ff
	ff		 mov	 DWORD PTR $T35[ebp], eax

; 149  :         return _Ptr == _Right._Ptr;

  017c6	8b 85 28 fb ff
	ff		 mov	 eax, DWORD PTR $T35[ebp]
  017cc	8b 8d d8 fc ff
	ff		 mov	 ecx, DWORD PTR _it$92[ebp]
  017d2	3b 08		 cmp	 ecx, DWORD PTR [eax]
  017d4	75 0c		 jne	 SHORT $LN630@Render
  017d6	c7 85 78 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR tv2182[ebp], 1
  017e0	eb 07		 jmp	 SHORT $LN631@Render
$LN630@Render:
  017e2	83 a5 78 fc ff
	ff 00		 and	 DWORD PTR tv2182[ebp], 0
$LN631@Render:
  017e9	8a 85 78 fc ff
	ff		 mov	 al, BYTE PTR tv2182[ebp]
  017ef	88 85 f2 fc ff
	ff		 mov	 BYTE PTR $T97[ebp], al

; 153  :         return !(*this == _Right);

  017f5	0f b6 85 f2 fc
	ff ff		 movzx	 eax, BYTE PTR $T97[ebp]
  017fc	85 c0		 test	 eax, eax
  017fe	75 0c		 jne	 SHORT $LN625@Render
  01800	c7 85 74 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR tv2168[ebp], 1
  0180a	eb 07		 jmp	 SHORT $LN626@Render
$LN625@Render:
  0180c	83 a5 74 fc ff
	ff 00		 and	 DWORD PTR tv2168[ebp], 0
$LN626@Render:
  01813	8a 85 74 fc ff
	ff		 mov	 al, BYTE PTR tv2168[ebp]
  01819	88 85 f1 fc ff
	ff		 mov	 BYTE PTR $T96[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 273  : 	for(TFlyVertexSetVector::iterator it = VSVector.begin();it!=VSVector.end();++it)

  0181f	0f b6 85 f1 fc
	ff ff		 movzx	 eax, BYTE PTR $T96[ebp]
  01826	85 c0		 test	 eax, eax
  01828	74 3e		 je	 SHORT $LN15@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 65   :         return _Ptr;

  0182a	8b 85 d8 fc ff
	ff		 mov	 eax, DWORD PTR _it$92[ebp]
  01830	89 85 24 fb ff
	ff		 mov	 DWORD PTR $T34[ebp], eax

; 256  :         return _Const_cast(_Mybase::operator->());

  01836	ff b5 24 fb ff
	ff		 push	 DWORD PTR $T34[ebp]
  0183c	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBU?$pair@MUTFlyVertexSet@@@std@@@std@@YAPAU?$pair@MUTFlyVertexSet@@@0@PBU10@@Z ; std::_Const_cast<std::pair<float,TFlyVertexSet> const >
  01841	59		 pop	 ecx
  01842	89 85 20 fb ff
	ff		 mov	 DWORD PTR $T33[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 275  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 4, it->second.v, sizeof(TVertex));

  01848	6a 18		 push	 24			; 00000018H
  0184a	8b 85 20 fb ff
	ff		 mov	 eax, DWORD PTR $T33[ebp]
  01850	83 c0 04	 add	 eax, 4
  01853	50		 push	 eax
  01854	6a 04		 push	 4
  01856	6a 05		 push	 5
  01858	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0185e	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP

; 276  : 	}

  01863	e9 0e ff ff ff	 jmp	 $LN14@Render
$LN15@Render:

; 277  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  01868	6a 14		 push	 20			; 00000014H
  0186a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  01870	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 278  : 	STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  01875	6a 13		 push	 19			; 00000013H
  01877	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0187d	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 279  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE);

  01882	6a 1b		 push	 27			; 0000001bH
  01884	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0188a	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 280  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  0188f	6a 16		 push	 22			; 00000016H
  01891	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  01897	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 281  : 	STATEMANAGER.RestoreVertexShader();

  0189c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  018a2	e8 00 00 00 00	 call	 ?RestoreVertexShader@CStateManager@@QAEXXZ ; CStateManager::RestoreVertexShader

; 282  : 	STATEMANAGER.RestoreTransform(D3DTS_WORLD);

  018a7	68 00 01 00 00	 push	 256			; 00000100H
  018ac	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  018b2	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 283  : 	//STATEMANAGER.RestoreRenderState(D3DRS_ZWRITEENABLE);
; 284  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZFUNC);

  018b7	6a 17		 push	 23			; 00000017H
  018b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  018bf	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 285  : 	STATEMANAGER.RestoreRenderState(D3DRS_BLENDOP);

  018c4	68 ab 00 00 00	 push	 171			; 000000abH
  018c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  018cf	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 286  : 
; 287  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  018d4	6a 0f		 push	 15			; 0000000fH
  018d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  018dc	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 288  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  018e1	6a 19		 push	 25			; 00000019H
  018e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  018e9	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 289  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHAREF);

  018ee	6a 18		 push	 24			; 00000018H
  018f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  018f6	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 291  : }

  018fb	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  018ff	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  01903	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  01907	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  0190d	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  01912	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  01916	8d 8d 68 fc ff
	ff		 lea	 ecx, DWORD PTR _VSVector$[ebp]
  0191c	e8 00 00 00 00	 call	 ?_Tidy@?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@AAEXXZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::_Tidy
$LN1@Render:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 291  : }

  01921	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01924	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0192b	59		 pop	 ecx
  0192c	5f		 pop	 edi
  0192d	5e		 pop	 esi
  0192e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01931	33 cd		 xor	 ecx, ebp
  01933	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01938	c9		 leave
  01939	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$0:
  00000	8d 8d 68 fc ff
	ff		 lea	 ecx, DWORD PTR _VSVector$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@U?$pair@MUTFlyVertexSet@@@std@@V?$allocator@U?$pair@MUTFlyVertexSet@@@std@@@2@@std@@QAE@XZ ; std::vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >::~vector<std::pair<float,TFlyVertexSet>,std::allocator<std::pair<float,TFlyVertexSet> > >
__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$1:
  0000b	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$2:
  00016	8d 8d a0 fc ff
	ff		 lea	 ecx, DWORD PTR _it1$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?Render@CFlyTrace@@QAEXXZ$3:
  00021	8d 8d 94 fc ff
	ff		 lea	 ecx, DWORD PTR _it2$[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@U?$pair@MUD3DXVECTOR3@@@std@@@std@@@std@@@std@@QAE@XZ
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
  00030	cc		 int	 3
__ehhandler$?Render@CFlyTrace@@QAEXXZ:
  00031	90		 npad	 1
  00032	90		 npad	 1
  00033	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00037	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003a	8b 8a 68 fa ff
	ff		 mov	 ecx, DWORD PTR [edx-1432]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CFlyTrace@@QAEXXZ
  00056	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Render
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ?Update@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Update@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Update, COMDAT
; _this$ = ecx

; 82   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	
; 84   : }

  00007	c9		 leave
  00008	c3		 ret	 0
?Update@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Update
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv212 = -68						; size = 4
tv194 = -64						; size = 4
$T1 = -60						; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
tv128 = -32						; size = 4
_this$ = -28						; size = 4
$T8 = -21						; size = 1
$T9 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_v3Position$ = 8					; size = 4
?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z PROC ; CFlyTrace::UpdateNewPosition, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0001a	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 63   : 	m_TimePositionDeque.push_front(TTimePosition(CTimer::Instance().GetCurrentSecond(),v3Position));

  0001d	8b 4d dc	 mov	 ecx, DWORD PTR $T7[ebp]
  00020	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  00025	d9 5d d8	 fstp	 DWORD PTR $T6[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00028	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  0002b	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0002e	8b 45 d4	 mov	 eax, DWORD PTR $T5[ebp]
  00031	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00035	f3 0f 11 45 ec	 movss	 DWORD PTR $T9[ebp], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003a	8b 45 08	 mov	 eax, DWORD PTR _v3Position$[ebp]
  0003d	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00040	8d 7d f0	 lea	 edi, DWORD PTR $T9[ebp+4]
  00043	8b 75 d0	 mov	 esi, DWORD PTR $T4[ebp]
  00046	a5		 movsd
  00047	a5		 movsd
  00048	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 63   : 	m_TimePositionDeque.push_front(TTimePosition(CTimer::Instance().GetCurrentSecond(),v3Position));

  00049	8d 45 ec	 lea	 eax, DWORD PTR $T9[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 14	 add	 ecx, 20			; 00000014H
  00053	e8 00 00 00 00	 call	 ?push_front@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEX$$QAU?$pair@MUD3DXVECTOR3@@@2@@Z ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::push_front
$LN2@UpdateNewP:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1534 :         return _Mypair._Myval2;

  00058	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	83 c0 14	 add	 eax, 20			; 00000014H
  0005e	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax

; 1566 :         return _Get_data()._Mysize;

  00061	8b 45 cc	 mov	 eax, DWORD PTR $T3[ebp]
  00064	83 c0 10	 add	 eax, 16			; 00000010H
  00067	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax

; 1010 :         return _Mysize() == 0;

  0006a	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  0006d	83 38 00	 cmp	 DWORD PTR [eax], 0
  00070	75 09		 jne	 SHORT $LN18@UpdateNewP
  00072	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv128[ebp], 1
  00079	eb 04		 jmp	 SHORT $LN19@UpdateNewP
$LN18@UpdateNewP:
  0007b	83 65 e0 00	 and	 DWORD PTR tv128[ebp], 0
$LN19@UpdateNewP:
  0007f	8a 45 e0	 mov	 al, BYTE PTR tv128[ebp]
  00082	88 45 eb	 mov	 BYTE PTR $T8[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 65   : 	while(!m_TimePositionDeque.empty() && m_TimePositionDeque.back().first+m_fTailLength<CTimer::Instance().GetCurrentSecond())

  00085	0f b6 45 eb	 movzx	 eax, BYTE PTR $T8[ebp]
  00089	85 c0		 test	 eax, eax
  0008b	75 4b		 jne	 SHORT $LN3@UpdateNewP
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00092	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 65   : 	while(!m_TimePositionDeque.empty() && m_TimePositionDeque.back().first+m_fTailLength<CTimer::Instance().GetCurrentSecond())

  00095	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	83 c1 14	 add	 ecx, 20			; 00000014H
  0009b	e8 00 00 00 00	 call	 ?back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEAAU?$pair@MUD3DXVECTOR3@@@2@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::back
  000a0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000a7	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  000ac	8b 4d c4	 mov	 ecx, DWORD PTR $T1[ebp]
  000af	f3 0f 11 45 bc	 movss	 DWORD PTR tv212[ebp], xmm0
  000b4	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  000b9	d9 5d c0	 fstp	 DWORD PTR tv194[ebp]
  000bc	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR tv194[ebp]
  000c1	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR tv212[ebp]
  000c6	0f 2f c1	 comiss	 xmm0, xmm1
  000c9	76 0d		 jbe	 SHORT $LN3@UpdateNewP

; 66   : 	{
; 67   : 		m_TimePositionDeque.pop_back();

  000cb	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000ce	83 c1 14	 add	 ecx, 20			; 00000014H
  000d1	e8 00 00 00 00	 call	 ?pop_back@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::pop_back

; 68   : 	}

  000d6	eb 80		 jmp	 SHORT $LN2@UpdateNewP
$LN3@UpdateNewP:

; 69   : }

  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000dd	33 cd		 xor	 ecx, ebp
  000df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e4	c9		 leave
  000e5	c2 04 00	 ret	 4
?UpdateNewPosition@CFlyTrace@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CFlyTrace::UpdateNewPosition
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rFlyingAttachData$ = 8					; size = 4
?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z PROC ; CFlyTrace::Create, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 73   : 	//assert(rFlyingAttachData.bHasTail);
; 74   : 	m_dwColor = rFlyingAttachData.dwTailColor;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _rFlyingAttachData$[ebp]
  0000d	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  00010	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 75   : 	m_fTailLength = rFlyingAttachData.fTailLength;

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _rFlyingAttachData$[ebp]
  00019	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  0001c	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 76   : 	m_fSize = rFlyingAttachData.fTailSize;

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _rFlyingAttachData$[ebp]
  00025	8b 49 2c	 mov	 ecx, DWORD PTR [ecx+44]
  00028	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 77   : 	m_bRectShape = rFlyingAttachData.bRectShape;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _rFlyingAttachData$[ebp]
  00031	8a 49 30	 mov	 cl, BYTE PTR [ecx+48]
  00034	88 48 04	 mov	 BYTE PTR [eax+4], cl

; 78   : }

  00037	c9		 leave
  00038	c2 04 00	 ret	 4
?Create@CFlyTrace@@QAEXABUTFlyingAttachData@CFlyingData@@@Z ENDP ; CFlyTrace::Create
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ?Destroy@CFlyTrace@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Destroy@CFlyTrace@@QAEXXZ PROC				; CFlyTrace::Destroy, COMDAT
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 56   : 	m_TimePositionDeque.clear();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 14	 add	 ecx, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1330 :         _Tidy();

  0000d	e8 00 00 00 00	 call	 ?_Tidy@?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@AAEXXZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::_Tidy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp

; 58   : 	__Initialize();

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?__Initialize@CFlyTrace@@IAEXXZ ; CFlyTrace::__Initialize

; 59   : }

  0001a	c9		 leave
  0001b	c3		 ret	 0
?Destroy@CFlyTrace@@QAEXXZ ENDP				; CFlyTrace::Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ??1CFlyTrace@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFlyTrace@@UAE@XZ PROC				; CFlyTrace::~CFlyTrace, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CFlyTrace@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CFlyTrace@@6B@

; 42   : 	Destroy();

  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?Destroy@CFlyTrace@@QAEXXZ ; CFlyTrace::Destroy

; 43   : }

  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	83 c1 14	 add	 ecx, 20			; 00000014H
  0003d	e8 00 00 00 00	 call	 ??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	c9		 leave
  00056	c3		 ret	 0
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CFlyTrace@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CFlyTrace@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CFlyTrace@@UAE@XZ ENDP				; CFlyTrace::~CFlyTrace
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTrace.cpp
;	COMDAT ??0CFlyTrace@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFlyTrace@@QAE@XZ PROC				; CFlyTrace::CFlyTrace, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CFlyTrace@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  0002e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CFlyTrace@@6B@
  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 14	 add	 ecx, 20			; 00000014H
  00041	e8 00 00 00 00	 call	 ??0?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
  00046	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 28   : 	__Initialize();

  0004a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?__Initialize@CFlyTrace@@IAEXXZ ; CFlyTrace::__Initialize

; 29   : 
; 30   : 	/*
; 31   : 	// Code for texture
; 32   : 	CGraphicImage * pImage = (CGraphicImage *)CResourceManager::Instance().GetResourcePointer("d:/ray.jpg");
; 33   : 	m_ImageInstance.SetImagePointer(pImage);
; 34   : 	
; 35   : 	CGraphicTexture * pTexture = m_ImageInstance.GetTexturePointer();
; 36   : 	m_lpTexture = pTexture->GetD3DTexture();
; 37   : 	*/
; 38   : }

  00052	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00056	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	c9		 leave
  00065	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFlyTrace@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$??0CFlyTrace@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 14	 add	 ecx, 20			; 00000014H
  0000e	e9 00 00 00 00	 jmp	 ??1?$deque@U?$pair@MUD3DXVECTOR3@@@std@@V?$allocator@U?$pair@MUD3DXVECTOR3@@@std@@@2@@std@@QAE@XZ ; std::deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >::~deque<std::pair<float,D3DXVECTOR3>,std::allocator<std::pair<float,D3DXVECTOR3> > >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0CFlyTrace@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CFlyTrace@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CFlyTrace@@QAE@XZ ENDP				; CFlyTrace::CFlyTrace
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Block_size$ = -8					; size = 4
__Ptr_container$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00012	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00015	77 05		 ja	 SHORT $LN12@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  00017	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Allocate_m:

; 77   :         return ::operator new(_Bytes);

  0001c	ff 75 f8	 push	 DWORD PTR __Block_size$[ebp]
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	59		 pop	 ecx

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00025	89 45 fc	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00028	83 7d fc 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0002c	74 02		 je	 SHORT $LN7@Allocate_m
  0002e	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00035	33 c0		 xor	 eax, eax
  00037	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  00039	33 c0		 xor	 eax, eax
  0003b	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00040	83 c0 23	 add	 eax, 35			; 00000023H
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00046	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00049	6a 04		 push	 4
  0004b	58		 pop	 eax
  0004c	6b c0 ff	 imul	 eax, eax, -1
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00055	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0b		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00014	59		 pop	 ecx
  00015	eb 13		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00017	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001b	74 0b		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001d	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	59		 pop	 ecx

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00028	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 0f		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  0003a	ff 75 0c	 push	 DWORD PTR __Bytes$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 222  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	c9		 leave
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	83 c0 23	 add	 eax, 35			; 00000023H
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f4	 mov	 DWORD PTR __Ptr_user$[ebp], eax

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	6a 04		 push	 4
  0001d	58		 pop	 eax
  0001e	6b c0 ff	 imul	 eax, eax, -1
  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00024	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00027	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	2b 45 f8	 sub	 eax, DWORD PTR __Ptr_container$[ebp]
  00039	89 45 fc	 mov	 DWORD PTR __Back_shift$[ebp], eax
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00040	72 08		 jb	 SHORT $LN7@Adjust_man
  00042	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00046	77 02		 ja	 SHORT $LN7@Adjust_man
  00048	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0004f	33 c0		 xor	 eax, eax
  00051	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00053	33 c0		 xor	 eax, eax
  00055	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 130  :     {

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 141  :     {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c9		 leave
  0003d	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 0b		 je	 SHORT $LN3@what
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00023	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00026	c9		 leave
  00027	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx

; 74   :     }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN2@vector:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0000a	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000d	48		 dec	 eax
  0000e	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00011	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00015	76 11		 jbe	 SHORT $LN1@vector
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001a	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00020	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00023	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00026	eb dc		 jmp	 SHORT $LN2@vector
$LN1@vector:
  00028	c9		 leave
  00029	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
