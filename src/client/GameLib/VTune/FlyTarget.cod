; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?max_size@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::max_size
PUBLIC	?_Erase_unchecked@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Erase_unchecked
PUBLIC	?_Erase_unchecked@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@0@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Erase_unchecked
PUBLIC	?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::clear
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Check_grow_by_1
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Insert_node
PUBLIC	??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@@std@@_N@1@ABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::insert<0,0>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++
PUBLIC	??$_Eqrange@PAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IBE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@PAU12@@1@ABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Eqrange<CFlyTarget *>
PUBLIC	??0CFlyTarget@@QAE@XZ				; CFlyTarget::CFlyTarget
PUBLIC	??0CFlyTarget@@QAE@PAVIFlyTargetableObject@@@Z	; CFlyTarget::CFlyTarget
PUBLIC	??0CFlyTarget@@QAE@ABUD3DXVECTOR3@@@Z		; CFlyTarget::CFlyTarget
PUBLIC	??0CFlyTarget@@QAE@ABV0@@Z			; CFlyTarget::CFlyTarget
PUBLIC	??1CFlyTarget@@UAE@XZ				; CFlyTarget::~CFlyTarget
PUBLIC	?Clear@CFlyTarget@@QAEXXZ			; CFlyTarget::Clear
PUBLIC	?IsObject@CFlyTarget@@QAE_NXZ			; CFlyTarget::IsObject
PUBLIC	?IsPosition@CFlyTarget@@QAE_NXZ			; CFlyTarget::IsPosition
PUBLIC	?IsValidTarget@CFlyTarget@@QAE_NXZ		; CFlyTarget::IsValidTarget
PUBLIC	?NotifyTargetClear@CFlyTarget@@QAEXXZ		; CFlyTarget::NotifyTargetClear
PUBLIC	?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ; CFlyTarget::GetFlyTargetPosition
PUBLIC	?GetType@CFlyTarget@@QAE?AW4EType@1@XZ		; CFlyTarget::GetType
PUBLIC	?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ ; CFlyTarget::GetFlyTarget
PUBLIC	??4CFlyTarget@@QAEAAV0@ABV0@@Z			; CFlyTarget::operator=
PUBLIC	?GetFlyTargetData@CFlyTarget@@QAEXPAV1@@Z	; CFlyTarget::GetFlyTargetData
PUBLIC	?__Initialize@CFlyTarget@@AAEXXZ		; CFlyTarget::__Initialize
PUBLIC	??_GCFlyTarget@@UAEPAXI@Z			; CFlyTarget::`scalar deleting destructor'
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Erase_tree<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
PUBLIC	??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAHV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@0@0@Z ; std::distance<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0> >
PUBLIC	??$_Emplace@ABQAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@_N@1@ABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Emplace<CFlyTarget * const &>
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_node@PAVCFlyTarget@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<CFlyTarget *,void *>::_Freenode0<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
PUBLIC	??$_Find_lower_bound@PAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@ABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Find_lower_bound<CFlyTarget *>
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
PUBLIC	??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > ><CFlyTarget * const &>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<CFlyTarget *,void *> *>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<CFlyTarget *,void *> *,std::_Tree_node<CFlyTarget *,void *> * &>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CFlyTarget@@6B@				; CFlyTarget::`vftable'
PUBLIC	??_R4CFlyTarget@@6B@				; CFlyTarget::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlyTarget@@@8				; CFlyTarget `RTTI Type Descriptor'
PUBLIC	??_R3CFlyTarget@@8				; CFlyTarget::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlyTarget@@8				; CFlyTarget::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlyTarget@@8			; CFlyTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??_ECFlyTarget@@UAEPAXI@Z:PROC			; CFlyTarget::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CFlyTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlyTarget@@8 DD FLAT:??_R0?AVCFlyTarget@@@8 ; CFlyTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlyTarget@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlyTarget@@8
rdata$r	SEGMENT
??_R2CFlyTarget@@8 DD FLAT:??_R1A@?0A@EA@CFlyTarget@@8	; CFlyTarget::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFlyTarget@@8
rdata$r	SEGMENT
??_R3CFlyTarget@@8 DD 00H				; CFlyTarget::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFlyTarget@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlyTarget@@@8
data$rs	SEGMENT
??_R0?AVCFlyTarget@@@8 DD FLAT:??_7type_info@@6B@	; CFlyTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlyTarget@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFlyTarget@@6B@
rdata$r	SEGMENT
??_R4CFlyTarget@@6B@ DD 00H				; CFlyTarget::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlyTarget@@@8
	DD	FLAT:??_R3CFlyTarget@@8
rdata$r	ENDS
;	COMDAT ??_7CFlyTarget@@6B@
CONST	SEGMENT
??_7CFlyTarget@@6B@ DD FLAT:??_R4CFlyTarget@@6B@	; CFlyTarget::`vftable'
	DD	FLAT:??_ECFlyTarget@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z$1
__ehfuncinfo$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CFlyTarget@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<CFlyTarget *,void *> *,std::_Tree_node<CFlyTarget *,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00018	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00022	c9		 leave
  00023	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<CFlyTarget *,void *> *,std::_Tree_node<CFlyTarget *,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<CFlyTarget *,void *> *>, COMDAT

; 270  : /* _CONSTEXPR20_DYNALLOC */ void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<CFlyTarget *,void *> *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z
_TEXT	SEGMENT
___formal$ = -40					; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
__Val$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Vals_0>$ = 16					; size = 4
??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > ><CFlyTarget * const &>, COMDAT
; _this$ = ecx

; 805  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1045 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  0002e	89 08		 mov	 DWORD PTR [eax], ecx
  00030	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00033	83 60 04 00	 and	 DWORD PTR [eax+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00037	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 785  :         _Alloc_construct_ptr<_Alnode>::_Allocate();

  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::_Allocate

; 786  :     }

  00043	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00047	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  0004a	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00053	83 c0 10	 add	 eax, 16			; 00000010H
  00056	89 45 ec	 mov	 DWORD PTR __Val$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00059	8b 45 ec	 mov	 eax, DWORD PTR __Val$[ebp]
  0005c	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0005f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 00		 mov	 eax, DWORD PTR [eax]
  00064	89 45 d8	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00067	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0006a	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0006d	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  00070	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00073	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  00076	8b 4d dc	 mov	 ecx, DWORD PTR $T2[ebp]
  00079	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0007b	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 807  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0007d	8d 45 0c	 lea	 eax, DWORD PTR __Myhead$[ebp]
  00080	50		 push	 eax
  00081	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00084	ff 70 04	 push	 DWORD PTR [eax+4]
  00087	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<CFlyTarget *,void *> *,std::_Tree_node<CFlyTarget *,void *> * &>
  0008c	59		 pop	 ecx
  0008d	59		 pop	 ecx

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0008e	8d 45 0c	 lea	 eax, DWORD PTR __Myhead$[ebp]
  00091	50		 push	 eax
  00092	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00095	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00098	83 c0 04	 add	 eax, 4
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<CFlyTarget *,void *> *,std::_Tree_node<CFlyTarget *,void *> * &>
  000a1	59		 pop	 ecx
  000a2	59		 pop	 ecx

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a3	8d 45 0c	 lea	 eax, DWORD PTR __Myhead$[ebp]
  000a6	50		 push	 eax
  000a7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ad	83 c0 08	 add	 eax, 8
  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<CFlyTarget *,void *> *,std::_Tree_node<CFlyTarget *,void *> * &>
  000b6	59		 pop	 ecx
  000b7	59		 pop	 ecx

; 810  :         this->_Ptr->_Color = _Red;

  000b8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000be	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 811  :         this->_Ptr->_Isnil = false;

  000c2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c8	c6 40 0d 00	 mov	 BYTE PTR [eax+13], 0

; 812  :     }

  000cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d9	59		 pop	 ecx
  000da	c9		 leave
  000db	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > ><CFlyTarget * const &>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
__Val$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >, COMDAT
; _this$ = ecx

; 817  :     ~_Tree_temp_node() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 818  :         if (this->_Ptr) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 3e		 je	 SHORT $LN9@Tree_temp_

; 819  :             _Destroy_in_place(this->_Ptr->_Left);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	ff 70 04	 push	 DWORD PTR [eax+4]
  00018	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<CFlyTarget *,void *> *>
  0001d	59		 pop	 ecx

; 820  :             _Destroy_in_place(this->_Ptr->_Parent);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	83 c0 04	 add	 eax, 4
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<CFlyTarget *,void *> *>
  0002d	59		 pop	 ecx

; 821  :             _Destroy_in_place(this->_Ptr->_Right);

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	83 c0 08	 add	 eax, 8
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<CFlyTarget *,void *> *>
  0003d	59		 pop	 ecx

; 822  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	83 c0 10	 add	 eax, 16			; 00000010H
  00047	89 45 f8	 mov	 DWORD PTR __Val$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR __Val$[ebp]
  0004d	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN9@Tree_temp_:
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 824  :     }

  00058	c9		 leave
  00059	c3		 ret	 0
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >, COMDAT
; _this$ = ecx

; 1056 :     ~_Alloc_construct_ptr() { // if this instance is engaged, deallocate storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1057 :         if (_Ptr) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 22		 je	 SHORT $LN3@Alloc_cons

; 1058 :             _Al.deallocate(_Ptr, 1);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00018	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00023	33 c0		 xor	 eax, eax
  00025	40		 inc	 eax
  00026	6b c0 14	 imul	 eax, eax, 20
  00029	50		 push	 eax
  0002a	ff 75 f8	 push	 DWORD PTR __Ptr$[ebp]
  0002d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00032	59		 pop	 ecx
  00033	59		 pop	 ecx
$LN3@Alloc_cons:

; 1059 :         }
; 1060 :     }

  00034	c9		 leave
  00035	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Max_possible$1 = -24					; size = 4
_this$ = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
_this$ = -8						; size = 4
__Overflow_is_possible$4 = -1				; size = 1
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1051 :     void _Allocate() { // disengage *this, then allocate a new memory block

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1052 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 1053 :         _Ptr = _Al.allocate(1);

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00018	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$4[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0001c	c7 45 e8 cc cc
	cc 0c		 mov	 DWORD PTR __Max_possible$1[ebp], 214748364 ; 0cccccccH

; 60   :         if (_Count > _Max_possible) {

  00023	33 c0		 xor	 eax, eax
  00025	40		 inc	 eax
  00026	3d cc cc cc 0c	 cmp	 eax, 214748364		; 0cccccccH
  0002b	76 05		 jbe	 SHORT $LN6@Allocate

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0002d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN6@Allocate:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00032	33 c0		 xor	 eax, eax
  00034	40		 inc	 eax
  00035	6b c0 14	 imul	 eax, eax, 20
  00038	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0003b	ff 75 f4	 push	 DWORD PTR $T3[ebp]
  0003e	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00043	59		 pop	 ecx
  00044	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax

; 1053 :         _Ptr = _Al.allocate(1);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  0004d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Allocate:

; 1054 :     }

  00050	c9		 leave
  00051	c3		 ret	 0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Find_lower_bound@PAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@ABQAVCFlyTarget@@@Z
_TEXT	SEGMENT
__Result$ = -40						; size = 12
$T1 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
tv65 = -16						; size = 4
_this$ = -12						; size = 4
__Scary$ = -8						; size = 4
__Trynode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@PAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@ABQAVCFlyTarget@@@Z PROC ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Find_lower_bound<CFlyTarget *>, COMDAT
; _this$ = ecx

; 1699 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000e	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00011	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  00014	89 45 f8	 mov	 DWORD PTR __Scary$[ebp], eax

; 1700 :         const auto _Scary = _Get_scary();
; 1701 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00017	8b 45 f8	 mov	 eax, DWORD PTR __Scary$[ebp]
  0001a	8b 00		 mov	 eax, DWORD PTR [eax]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001f	89 45 d8	 mov	 DWORD PTR __Result$[ebp], eax
  00022	83 65 dc 00	 and	 DWORD PTR __Result$[ebp+4], 0
  00026	8b 45 f8	 mov	 eax, DWORD PTR __Scary$[ebp]
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 e0	 mov	 DWORD PTR __Result$[ebp+8], eax

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;

  0002e	8b 45 d8	 mov	 eax, DWORD PTR __Result$[ebp]
  00031	89 45 fc	 mov	 DWORD PTR __Trynode$[ebp], eax
$LN2@Find_lower:

; 1703 :         while (!_Trynode->_Isnil) {

  00034	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  00037	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  0003b	85 c0		 test	 eax, eax
  0003d	75 5a		 jne	 SHORT $LN3@Find_lower

; 1704 :             _Result._Location._Parent = _Trynode;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  00042	89 45 d8	 mov	 DWORD PTR __Result$[ebp], eax

; 2035 :         return _Mypair._Get_first();

  00045	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00048	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2035 :         return _Mypair._Get_first();

  0004b	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  0004e	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 127  :         return _Left < _Right;

  00051	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00057	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0005a	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0005c	73 09		 jae	 SHORT $LN23@Find_lower
  0005e	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00065	eb 04		 jmp	 SHORT $LN21@Find_lower
$LN23@Find_lower:
  00067	83 65 f0 00	 and	 DWORD PTR tv65[ebp], 0
$LN21@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1705 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0006b	0f b6 45 f0	 movzx	 eax, BYTE PTR tv65[ebp]
  0006f	85 c0		 test	 eax, eax
  00071	74 0f		 je	 SHORT $LN4@Find_lower

; 1706 :                 _Result._Location._Child = _Tree_child::_Right;

  00073	83 65 dc 00	 and	 DWORD PTR __Result$[ebp+4], 0

; 1707 :                 _Trynode                 = _Trynode->_Right;

  00077	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  0007a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0007d	89 45 fc	 mov	 DWORD PTR __Trynode$[ebp], eax

; 1708 :             } else {

  00080	eb 15		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1709 :                 _Result._Location._Child = _Tree_child::_Left;

  00082	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR __Result$[ebp+4], 1

; 1710 :                 _Result._Bound           = _Trynode;

  00089	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  0008c	89 45 e0	 mov	 DWORD PTR __Result$[ebp+8], eax

; 1711 :                 _Trynode                 = _Trynode->_Left;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  00092	8b 00		 mov	 eax, DWORD PTR [eax]
  00094	89 45 fc	 mov	 DWORD PTR __Trynode$[ebp], eax
$LN5@Find_lower:

; 1712 :             }
; 1713 :         }

  00097	eb 9b		 jmp	 SHORT $LN2@Find_lower
$LN3@Find_lower:

; 1714 : 
; 1715 :         return _Result;

  00099	8d 75 d8	 lea	 esi, DWORD PTR __Result$[ebp]
  0009c	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0009f	a5		 movsd
  000a0	a5		 movsd
  000a1	a5		 movsd
  000a2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1716 :     }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	c9		 leave
  000a8	c2 08 00	 ret	 8
??$_Find_lower_bound@PAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@ABQAVCFlyTarget@@@Z ENDP ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Find_lower_bound<CFlyTarget *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_node@PAVCFlyTarget@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_node@PAVCFlyTarget@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<CFlyTarget *,void *>::_Freenode0<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >, COMDAT

; 368  :     static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 369  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode0 call");
; 370  :         _Destroy_in_place(_Ptr->_Left);

  00003	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<CFlyTarget *,void *> *>
  0000b	59		 pop	 ecx

; 371  :         _Destroy_in_place(_Ptr->_Parent);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<CFlyTarget *,void *> *>
  00018	59		 pop	 ecx

; 372  :         _Destroy_in_place(_Ptr->_Right);

  00019	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0001c	83 c0 08	 add	 eax, 8
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@PAVCFlyTarget@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<CFlyTarget *,void *> *>
  00025	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00026	33 c0		 xor	 eax, eax
  00028	40		 inc	 eax
  00029	6b c0 14	 imul	 eax, eax, 20
  0002c	50		 push	 eax
  0002d	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00030	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00035	59		 pop	 ecx
  00036	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 374  :     }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Freenode0@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_node@PAVCFlyTarget@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<CFlyTarget *,void *>::_Freenode0<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Emplace@ABQAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@_N@1@ABQAVCFlyTarget@@@Z
_TEXT	SEGMENT
$T1 = -128						; size = 12
$T2 = -116						; size = 8
$T3 = -108						; size = 4
__Loc$ = -104						; size = 12
$T4 = -92						; size = 4
$T5 = -88						; size = 4
$T6 = -84						; size = 4
__Inserted$ = -80					; size = 4
$T7 = -76						; size = 4
__Old_val$8 = -72					; size = 4
$T9 = -68						; size = 4
$T10 = -64						; size = 4
$T11 = -60						; size = 4
$T12 = -56						; size = 4
$T13 = -52						; size = 4
$T14 = -48						; size = 4
$T15 = -44						; size = 4
$T16 = -40						; size = 4
$T17 = -36						; size = 4
__Scary$ = -32						; size = 4
__Val$ = -28						; size = 4
tv65 = -24						; size = 4
tv165 = -20						; size = 4
__Bound$ = -16						; size = 4
__Keyval$18 = -12					; size = 4
_this$ = -8						; size = 4
$T19 = -2						; size = 1
$T20 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
_<_Vals_0>$ = 12					; size = 4
??$_Emplace@ABQAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@_N@1@ABQAVCFlyTarget@@@Z PROC ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Emplace<CFlyTarget * const &>, COMDAT
; _this$ = ecx

; 1002 :     pair<_Nodeptr, bool> _Emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00011	89 45 dc	 mov	 DWORD PTR $T17[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00014	8b 45 dc	 mov	 eax, DWORD PTR $T17[ebp]
  00017	89 45 e0	 mov	 DWORD PTR __Scary$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1974 :         return _Val;

  0001a	8b 45 0c	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  0001d	89 45 f4	 mov	 DWORD PTR __Keyval$18[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  00020	ff 75 f4	 push	 DWORD PTR __Keyval$18[ebp]
  00023	8d 45 80	 lea	 eax, DWORD PTR $T1[ebp]
  00026	50		 push	 eax
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??$_Find_lower_bound@PAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@ABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Find_lower_bound<CFlyTarget *>
  0002f	8b f0		 mov	 esi, eax
  00031	8d 7d 98	 lea	 edi, DWORD PTR __Loc$[ebp]
  00034	a5		 movsd
  00035	a5		 movsd
  00036	a5		 movsd

; 1010 :             if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  00037	8b 45 a0	 mov	 eax, DWORD PTR __Loc$[ebp+8]
  0003a	89 45 f0	 mov	 DWORD PTR __Bound$[ebp], eax

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003d	8b 45 f0	 mov	 eax, DWORD PTR __Bound$[ebp]
  00040	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00044	85 c0		 test	 eax, eax
  00046	75 37		 jne	 SHORT $LN40@Emplace

; 2035 :         return _Mypair._Get_first();

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0004b	89 45 d8	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2035 :         return _Mypair._Get_first();

  0004e	8b 45 d8	 mov	 eax, DWORD PTR $T16[ebp]
  00051	89 45 94	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 127  :         return _Left < _Right;

  00054	8b 45 f4	 mov	 eax, DWORD PTR __Keyval$18[ebp]
  00057	8b 4d f0	 mov	 ecx, DWORD PTR __Bound$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0005f	73 09		 jae	 SHORT $LN52@Emplace
  00061	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv165[ebp], 1
  00068	eb 04		 jmp	 SHORT $LN50@Emplace
$LN52@Emplace:
  0006a	83 65 ec 00	 and	 DWORD PTR tv165[ebp], 0
$LN50@Emplace:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0006e	0f b6 45 ec	 movzx	 eax, BYTE PTR tv165[ebp]
  00072	85 c0		 test	 eax, eax
  00074	75 09		 jne	 SHORT $LN40@Emplace
  00076	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  0007d	eb 04		 jmp	 SHORT $LN38@Emplace
$LN40@Emplace:
  0007f	83 65 e8 00	 and	 DWORD PTR tv65[ebp], 0
$LN38@Emplace:

; 1010 :             if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  00083	0f b6 45 e8	 movzx	 eax, BYTE PTR tv65[ebp]
  00087	85 c0		 test	 eax, eax
  00089	74 2d		 je	 SHORT $LN2@Emplace

; 1011 :                 return {_Loc._Bound, false};

  0008b	c6 45 ff 00	 mov	 BYTE PTR $T20[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0008f	8d 45 a0	 lea	 eax, DWORD PTR __Loc$[ebp+8]
  00092	89 45 d4	 mov	 DWORD PTR $T15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00095	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00098	8b 4d d4	 mov	 ecx, DWORD PTR $T15[ebp]
  0009b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0009d	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0009f	8d 45 ff	 lea	 eax, DWORD PTR $T20[ebp]
  000a2	89 45 d0	 mov	 DWORD PTR $T14[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	8b 4d d0	 mov	 ecx, DWORD PTR $T14[ebp]
  000ab	8a 09		 mov	 cl, BYTE PTR [ecx]
  000ad	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1011 :                 return {_Loc._Bound, false};

  000b0	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000b3	e9 9d 00 00 00	 jmp	 $LN1@Emplace
$LN2@Emplace:

; 1012 :             }
; 1013 : 
; 1014 :             _Check_grow_by_1();

  000b8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Check_grow_by_1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  000c0	8b 45 0c	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  000c3	89 45 c8	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2039 :         return _Mypair._Myval2._Get_first();

  000c6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000c9	89 45 cc	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2039 :         return _Mypair._Myval2._Get_first();

  000cc	8b 45 cc	 mov	 eax, DWORD PTR $T13[ebp]
  000cf	89 45 c4	 mov	 DWORD PTR $T11[ebp], eax

; 1015 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  000d2	ff 75 c8	 push	 DWORD PTR $T12[ebp]
  000d5	8b 45 e0	 mov	 eax, DWORD PTR __Scary$[ebp]
  000d8	ff 30		 push	 DWORD PTR [eax]
  000da	ff 75 c4	 push	 DWORD PTR $T11[ebp]
  000dd	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  000e0	e8 00 00 00 00	 call	 ??$?0ABQAVCFlyTarget@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@ABQAVCFlyTarget@@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > ><CFlyTarget * const &>
  000e5	89 45 c0	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1048 :         return _STD exchange(_Ptr, nullptr);

  000e8	83 65 bc 00	 and	 DWORD PTR $T9[ebp], 0
  000ec	8b 45 c0	 mov	 eax, DWORD PTR $T10[ebp]
  000ef	83 c0 04	 add	 eax, 4
  000f2	89 45 e4	 mov	 DWORD PTR __Val$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 598  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  000f5	8b 45 e4	 mov	 eax, DWORD PTR __Val$[ebp]
  000f8	8b 00		 mov	 eax, DWORD PTR [eax]
  000fa	89 45 b8	 mov	 DWORD PTR __Old_val$8[ebp], eax

; 599  :     _Val         = static_cast<_Other&&>(_New_val);

  000fd	8b 45 e4	 mov	 eax, DWORD PTR __Val$[ebp]
  00100	8b 4d bc	 mov	 ecx, DWORD PTR $T9[ebp]
  00103	89 08		 mov	 DWORD PTR [eax], ecx

; 600  :     return _Old_val;

  00105	8b 45 b8	 mov	 eax, DWORD PTR __Old_val$8[ebp]
  00108	89 45 b4	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1048 :         return _STD exchange(_Ptr, nullptr);

  0010b	8b 45 b4	 mov	 eax, DWORD PTR $T7[ebp]
  0010e	89 45 b0	 mov	 DWORD PTR __Inserted$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1015 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00111	8d 4d 8c	 lea	 ecx, DWORD PTR $T2[ebp]
  00114	e8 00 00 00 00	 call	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >

; 1034 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00119	ff 75 b0	 push	 DWORD PTR __Inserted$[ebp]
  0011c	ff 75 9c	 push	 DWORD PTR __Loc$[ebp+4]
  0011f	ff 75 98	 push	 DWORD PTR __Loc$[ebp]
  00122	8b 4d e0	 mov	 ecx, DWORD PTR __Scary$[ebp]
  00125	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Insert_node
  0012a	89 45 ac	 mov	 DWORD PTR $T6[ebp], eax
  0012d	c6 45 fe 01	 mov	 BYTE PTR $T19[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00131	8d 45 ac	 lea	 eax, DWORD PTR $T6[ebp]
  00134	89 45 a8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00137	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0013a	8b 4d a8	 mov	 ecx, DWORD PTR $T5[ebp]
  0013d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0013f	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00141	8d 45 fe	 lea	 eax, DWORD PTR $T19[ebp]
  00144	89 45 a4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00147	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0014a	8b 4d a4	 mov	 ecx, DWORD PTR $T4[ebp]
  0014d	8a 09		 mov	 cl, BYTE PTR [ecx]
  0014f	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1034 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00152	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Emplace:

; 1035 :     }

  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	c9		 leave
  00158	c2 08 00	 ret	 8
??$_Emplace@ABQAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@_N@1@ABQAVCFlyTarget@@@Z ENDP ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Emplace<CFlyTarget * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAHV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@0@0@Z
_TEXT	SEGMENT
__ULast$1 = -24						; size = 4
tv95 = -20						; size = 4
tv87 = -16						; size = 4
__UFirst$2 = -12					; size = 4
__Off$3 = -8						; size = 4
$T4 = -2						; size = 1
$T5 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAHV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@0@0@Z PROC ; std::distance<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0> >, COMDAT

; 1792 : _NODISCARD _CONSTEXPR17 _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1793 :     if constexpr (_Is_random_iter_v<_InIt>) {
; 1794 :         return _Last - _First; // assume the iterator will do debug checking
; 1795 :     } else {
; 1796 :         _Adl_verify_range(_First, _Last);
; 1797 :         auto _UFirst             = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f4	 mov	 DWORD PTR __UFirst$2[ebp], eax

; 1798 :         const auto _ULast        = _Get_unwrapped(_Last);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 e8	 mov	 DWORD PTR __ULast$1[ebp], eax

; 1799 :         _Iter_diff_t<_InIt> _Off = 0;

  00012	83 65 f8 00	 and	 DWORD PTR __Off$3[ebp], 0
  00016	eb 08		 jmp	 SHORT $LN4@distance
$LN2@distance:

; 1800 :         for (; _UFirst != _ULast; ++_UFirst) {

  00018	8d 4d f4	 lea	 ecx, DWORD PTR __UFirst$2[ebp]
  0001b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++
$LN4@distance:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 98   :         return _Ptr == _Right._Ptr;

  00020	8b 45 f4	 mov	 eax, DWORD PTR __UFirst$2[ebp]
  00023	3b 45 e8	 cmp	 eax, DWORD PTR __ULast$1[ebp]
  00026	75 09		 jne	 SHORT $LN31@distance
  00028	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  0002f	eb 04		 jmp	 SHORT $LN32@distance
$LN31@distance:
  00031	83 65 f0 00	 and	 DWORD PTR tv87[ebp], 0
$LN32@distance:
  00035	8a 45 f0	 mov	 al, BYTE PTR tv87[ebp]
  00038	88 45 ff	 mov	 BYTE PTR $T5[ebp], al

; 102  :         return !(*this == _Right);

  0003b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T5[ebp]
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN26@distance
  00043	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv95[ebp], 1
  0004a	eb 04		 jmp	 SHORT $LN27@distance
$LN26@distance:
  0004c	83 65 ec 00	 and	 DWORD PTR tv95[ebp], 0
$LN27@distance:
  00050	8a 45 ec	 mov	 al, BYTE PTR tv95[ebp]
  00053	88 45 fe	 mov	 BYTE PTR $T4[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1800 :         for (; _UFirst != _ULast; ++_UFirst) {

  00056	0f b6 45 fe	 movzx	 eax, BYTE PTR $T4[ebp]
  0005a	85 c0		 test	 eax, eax
  0005c	74 09		 je	 SHORT $LN3@distance

; 1801 :             ++_Off;

  0005e	8b 45 f8	 mov	 eax, DWORD PTR __Off$3[ebp]
  00061	40		 inc	 eax
  00062	89 45 f8	 mov	 DWORD PTR __Off$3[ebp], eax

; 1802 :         }

  00065	eb b1		 jmp	 SHORT $LN2@distance
$LN3@distance:

; 1803 : 
; 1804 :         return _Off;

  00067	8b 45 f8	 mov	 eax, DWORD PTR __Off$3[ebp]

; 1805 :     }
; 1806 : }

  0006a	c9		 leave
  0006b	c3		 ret	 0
??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAHV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@0@0@Z ENDP ; std::distance<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
__Old_val$2 = -16					; size = 4
__New_val$ = -12					; size = 4
_this$ = -8						; size = 4
$T3 = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Erase_tree<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@Erase_tree:

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  0000c	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00010	85 c0		 test	 eax, eax
  00012	75 43		 jne	 SHORT $LN4@Erase_tree

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  00017	ff 70 08	 push	 DWORD PTR [eax+8]
  0001a	ff 75 08	 push	 DWORD PTR __Al$[ebp]
  0001d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Erase_tree<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));

  00025	8b 45 0c	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  00028	89 45 f4	 mov	 DWORD PTR __New_val$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 598  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  0002e	89 45 f0	 mov	 DWORD PTR __Old_val$2[ebp], eax

; 599  :     _Val         = static_cast<_Other&&>(_New_val);

  00031	8b 45 f4	 mov	 eax, DWORD PTR __New_val$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	89 45 0c	 mov	 DWORD PTR __Rootnode$[ebp], eax

; 600  :     return _Old_val;

  00039	8b 45 f0	 mov	 eax, DWORD PTR __Old_val$2[ebp]
  0003c	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 379  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  0003f	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  00042	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00045	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 380  :         _Freenode0(_Al, _Ptr);

  00048	ff 75 fc	 push	 DWORD PTR $T3[ebp]
  0004b	ff 75 08	 push	 DWORD PTR __Al$[ebp]
  0004e	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_node@PAVCFlyTarget@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<CFlyTarget *,void *>::_Freenode0<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
  00053	59		 pop	 ecx
  00054	59		 pop	 ecx

; 746  :         }

  00055	eb b2		 jmp	 SHORT $LN2@Erase_tree
$LN4@Erase_tree:

; 747  :     }

  00057	c9		 leave
  00058	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Erase_tree<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GCFlyTarget@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFlyTarget@@UAEPAXI@Z PROC				; CFlyTarget::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CFlyTarget@@UAE@XZ	; CFlyTarget::~CFlyTarget
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 18		 push	 24			; 00000018H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GCFlyTarget@@UAEPAXI@Z ENDP				; CFlyTarget::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ?__Initialize@CFlyTarget@@AAEXXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?__Initialize@CFlyTarget@@AAEXXZ PROC			; CFlyTarget::__Initialize, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  00015	0f 57 c0	 xorps	 xmm0, xmm0
  00018	f3 0f 11 45 f0	 movss	 DWORD PTR $T1[ebp], xmm0

; 181  :     y = fy;

  0001d	0f 57 c0	 xorps	 xmm0, xmm0
  00020	f3 0f 11 45 f4	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 182  :     z = fz;

  00025	0f 57 c0	 xorps	 xmm0, xmm0
  00028	f3 0f 11 45 f8	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp

; 40   : 	m_v3FlyTargetPosition=D3DXVECTOR3(0.0f,0.0f,0.0f);	

  0002d	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  00030	83 c7 04	 add	 edi, 4
  00033	8d 75 f0	 lea	 esi, DWORD PTR $T1[ebp]
  00036	a5		 movsd
  00037	a5		 movsd
  00038	a5		 movsd

; 41   : 	m_pFlyTarget=NULL;

  00039	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 42   : 	m_eType=TYPE_NONE;

  00040	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 43   : }

  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004c	33 cd		 xor	 ecx, ebp
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	c9		 leave
  00054	c3		 ret	 0
?__Initialize@CFlyTarget@@AAEXXZ ENDP			; CFlyTarget::__Initialize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ?GetFlyTargetData@CFlyTarget@@QAEXPAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pFlyTarget$ = 8					; size = 4
?GetFlyTargetData@CFlyTarget@@QAEXPAV1@@Z PROC		; CFlyTarget::GetFlyTargetData, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 111  : 	pFlyTarget->m_eType = m_eType;

  00009	8b 45 08	 mov	 eax, DWORD PTR _pFlyTarget$[ebp]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00012	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 112  : 	pFlyTarget->m_v3FlyTargetPosition = m_v3FlyTargetPosition;

  00015	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00018	83 c6 04	 add	 esi, 4
  0001b	8b 7d 08	 mov	 edi, DWORD PTR _pFlyTarget$[ebp]
  0001e	83 c7 04	 add	 edi, 4
  00021	a5		 movsd
  00022	a5		 movsd
  00023	a5		 movsd

; 113  : 	pFlyTarget->m_pFlyTarget = m_pFlyTarget;

  00024	8b 45 08	 mov	 eax, DWORD PTR _pFlyTarget$[ebp]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  0002d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 114  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	c9		 leave
  00033	c2 04 00	 ret	 4
?GetFlyTargetData@CFlyTarget@@QAEXPAV1@@Z ENDP		; CFlyTarget::GetFlyTargetData
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ??4CFlyTarget@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T1 = -28						; size = 8
_this$ = -20						; size = 4
_pTargeter$ = -16					; size = 4
_this$ = -12						; size = 4
_pTargeter$ = -8					; size = 4
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??4CFlyTarget@@QAEAAV0@ABV0@@Z PROC			; CFlyTarget::operator=, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   : 	if (m_pFlyTarget)

  0000b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00012	74 1e		 je	 SHORT $LN2@operator

; 96   : 	{
; 97   : 		m_pFlyTarget->RemoveFlyTargeter(this);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	89 45 f8	 mov	 DWORD PTR _pTargeter$[ebp], eax
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00020	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.h

; 26   : 		m_FlyTargeterSet.erase(pTargeter);

  00023	8d 45 f8	 lea	 eax, DWORD PTR _pTargeter$[ebp]
  00026	50		 push	 eax
  00027	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 c1 04	 add	 ecx, 4
  0002d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::erase
$LN2@operator:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp

; 99   : 	m_eType = rhs.m_eType;

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _rhs$[ebp]
  00038	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0003b	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 100  : 	m_v3FlyTargetPosition = rhs.m_v3FlyTargetPosition;

  0003e	8b 75 08	 mov	 esi, DWORD PTR _rhs$[ebp]
  00041	83 c6 04	 add	 esi, 4
  00044	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00047	83 c7 04	 add	 edi, 4
  0004a	a5		 movsd
  0004b	a5		 movsd
  0004c	a5		 movsd

; 101  : 	m_pFlyTarget = rhs.m_pFlyTarget;

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _rhs$[ebp]
  00053	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00056	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 102  : 	if (m_pFlyTarget)

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00060	74 22		 je	 SHORT $LN3@operator

; 103  : 	{
; 104  : 		m_pFlyTarget->AddFlyTargeter(this);

  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	89 45 f0	 mov	 DWORD PTR _pTargeter$[ebp], eax
  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0006e	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.h

; 21   : 		m_FlyTargeterSet.insert(pTargeter);

  00071	8d 45 f0	 lea	 eax, DWORD PTR _pTargeter$[ebp]
  00074	50		 push	 eax
  00075	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  00078	50		 push	 eax
  00079	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	83 c1 04	 add	 ecx, 4
  0007f	e8 00 00 00 00	 call	 ??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@@std@@_N@1@ABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::insert<0,0>
$LN3@operator:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp

; 106  : 	return *this;

  00084	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 107  : }

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	c9		 leave
  0008a	c2 04 00	 ret	 4
??4CFlyTarget@@QAEAAV0@ABV0@@Z ENDP			; CFlyTarget::operator=
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ PROC ; CFlyTarget::GetFlyTarget, COMDAT
; _this$ = ecx

; 79   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : 	assert(TYPE_OBJECT==GetType() && "CFly::GetFlyTarget"); 
; 81   : 	return m_pFlyTarget; 

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]

; 82   : }

  0000d	c9		 leave
  0000e	c3		 ret	 0
?GetFlyTarget@CFlyTarget@@QAEPAVIFlyTargetableObject@@XZ ENDP ; CFlyTarget::GetFlyTarget
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ?GetType@CFlyTarget@@QAE?AW4EType@1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@CFlyTarget@@QAE?AW4EType@1@XZ PROC		; CFlyTarget::GetType, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 	return m_eType;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]

; 76   : }

  0000d	c9		 leave
  0000e	c3		 ret	 0
?GetType@CFlyTarget@@QAE?AW4EType@1@XZ ENDP		; CFlyTarget::GetType
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ PROC ; CFlyTarget::GetFlyTargetPosition, COMDAT
; _this$ = ecx

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 86   : 	if (m_eType == TYPE_OBJECT)

  00015	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 01	 cmp	 DWORD PTR [eax+20], 1
  0001c	75 20		 jne	 SHORT $LN2@GetFlyTarg

; 87   : 	{
; 88   : 		m_v3FlyTargetPosition = m_pFlyTarget->OnGetFlyTargetPosition();

  0001e	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
  00021	50		 push	 eax
  00022	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00028	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	8b 00		 mov	 eax, DWORD PTR [eax]
  0002d	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00030	ff 50 04	 call	 DWORD PTR [eax+4]
  00033	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  00036	83 c7 04	 add	 edi, 4
  00039	8b f0		 mov	 esi, eax
  0003b	a5		 movsd
  0003c	a5		 movsd
  0003d	a5		 movsd
$LN2@GetFlyTarg:

; 89   : 	}
; 90   : 	return m_v3FlyTargetPosition;

  0003e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00041	83 c0 04	 add	 eax, 4

; 91   : }

  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00049	33 cd		 xor	 ecx, ebp
  0004b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00050	c9		 leave
  00051	c3		 ret	 0
?GetFlyTargetPosition@CFlyTarget@@QBEABUD3DXVECTOR3@@XZ ENDP ; CFlyTarget::GetFlyTargetPosition
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ?NotifyTargetClear@CFlyTarget@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NotifyTargetClear@CFlyTarget@@QAEXXZ PROC		; CFlyTarget::NotifyTargetClear, COMDAT
; _this$ = ecx

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 68   : 	//if (m_eType == FLY_TARGET_TYPE_OBJECT)
; 69   : 	m_eType = TYPE_POSITION;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 14 02 00
	00 00		 mov	 DWORD PTR [eax+20], 2

; 70   : 	m_pFlyTarget = 0;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 71   : }

  00018	c9		 leave
  00019	c3		 ret	 0
?NotifyTargetClear@CFlyTarget@@QAEXXZ ENDP		; CFlyTarget::NotifyTargetClear
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ?IsValidTarget@CFlyTarget@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsValidTarget@CFlyTarget@@QAE_NXZ PROC			; CFlyTarget::IsValidTarget, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 	return (TYPE_NONE!=GetType());

  00008	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetType@CFlyTarget@@QAE?AW4EType@1@XZ ; CFlyTarget::GetType
  00010	85 c0		 test	 eax, eax
  00012	74 09		 je	 SHORT $LN3@IsValidTar
  00014	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001b	eb 04		 jmp	 SHORT $LN4@IsValidTar
$LN3@IsValidTar:
  0001d	83 65 fc 00	 and	 DWORD PTR tv67[ebp], 0
$LN4@IsValidTar:
  00021	8a 45 fc	 mov	 al, BYTE PTR tv67[ebp]

; 64   : }

  00024	c9		 leave
  00025	c3		 ret	 0
?IsValidTarget@CFlyTarget@@QAE_NXZ ENDP			; CFlyTarget::IsValidTarget
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ?IsPosition@CFlyTarget@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsPosition@CFlyTarget@@QAE_NXZ PROC			; CFlyTarget::IsPosition, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 58   : 	return (TYPE_POSITION==GetType());

  00008	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetType@CFlyTarget@@QAE?AW4EType@1@XZ ; CFlyTarget::GetType
  00010	83 f8 02	 cmp	 eax, 2
  00013	75 09		 jne	 SHORT $LN3@IsPosition
  00015	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001c	eb 04		 jmp	 SHORT $LN4@IsPosition
$LN3@IsPosition:
  0001e	83 65 fc 00	 and	 DWORD PTR tv67[ebp], 0
$LN4@IsPosition:
  00022	8a 45 fc	 mov	 al, BYTE PTR tv67[ebp]

; 59   : }

  00025	c9		 leave
  00026	c3		 ret	 0
?IsPosition@CFlyTarget@@QAE_NXZ ENDP			; CFlyTarget::IsPosition
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ?IsObject@CFlyTarget@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?IsObject@CFlyTarget@@QAE_NXZ PROC			; CFlyTarget::IsObject, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 53   : 	return (TYPE_OBJECT==GetType());

  00008	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e8 00 00 00 00	 call	 ?GetType@CFlyTarget@@QAE?AW4EType@1@XZ ; CFlyTarget::GetType
  00010	83 f8 01	 cmp	 eax, 1
  00013	75 09		 jne	 SHORT $LN3@IsObject
  00015	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001c	eb 04		 jmp	 SHORT $LN4@IsObject
$LN3@IsObject:
  0001e	83 65 fc 00	 and	 DWORD PTR tv67[ebp], 0
$LN4@IsObject:
  00022	8a 45 fc	 mov	 al, BYTE PTR tv67[ebp]

; 54   : }

  00025	c9		 leave
  00026	c3		 ret	 0
?IsObject@CFlyTarget@@QAE_NXZ ENDP			; CFlyTarget::IsObject
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ?Clear@CFlyTarget@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CFlyTarget@@QAEXXZ PROC				; CFlyTarget::Clear, COMDAT
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   : 	m_eType = TYPE_NONE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 48   : 	m_pFlyTarget = 0;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 49   : }

  00015	c9		 leave
  00016	c3		 ret	 0
?Clear@CFlyTarget@@QAEXXZ ENDP				; CFlyTarget::Clear
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ??1CFlyTarget@@UAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_pTargeter$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFlyTarget@@UAE@XZ PROC				; CFlyTarget::~CFlyTarget, COMDAT
; _this$ = ecx

; 33   : { 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CFlyTarget@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CFlyTarget@@6B@

; 34   : 	if (m_pFlyTarget) 

  00031	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00038	74 1e		 je	 SHORT $LN3@CFlyTarget

; 35   : 		m_pFlyTarget->RemoveFlyTargeter(this);

  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR _pTargeter$[ebp], eax
  00040	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00046	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.h

; 26   : 		m_FlyTargeterSet.erase(pTargeter);

  00049	8d 45 ec	 lea	 eax, DWORD PTR _pTargeter$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	83 c1 04	 add	 ecx, 4
  00053	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::erase
$LN3@CFlyTarget:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp

; 36   : }

  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	c9		 leave
  00064	c3		 ret	 0
  00065	cc		 int	 3
  00066	cc		 int	 3
  00067	cc		 int	 3
  00068	cc		 int	 3
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CFlyTarget@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CFlyTarget@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CFlyTarget@@UAE@XZ ENDP				; CFlyTarget::~CFlyTarget
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ??0CFlyTarget@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rhs$ = 8						; size = 4
??0CFlyTarget@@QAE@ABV0@@Z PROC				; CFlyTarget::CFlyTarget, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CFlyTarget@@6B@

; 27   : 	__Initialize();

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?__Initialize@CFlyTarget@@AAEXXZ ; CFlyTarget::__Initialize

; 28   : 
; 29   : 	*this = rhs;

  00018	ff 75 08	 push	 DWORD PTR _rhs$[ebp]
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ??4CFlyTarget@@QAEAAV0@ABV0@@Z ; CFlyTarget::operator=

; 30   : }

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??0CFlyTarget@@QAE@ABV0@@Z ENDP				; CFlyTarget::CFlyTarget
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ??0CFlyTarget@@QAE@ABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v3FlyTargetPosition$ = 8				; size = 4
??0CFlyTarget@@QAE@ABUD3DXVECTOR3@@@Z PROC		; CFlyTarget::CFlyTarget, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CFlyTarget@@6B@

; 19   : 	__Initialize();

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?__Initialize@CFlyTarget@@AAEXXZ ; CFlyTarget::__Initialize

; 20   : 
; 21   : 	m_eType=TYPE_POSITION;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 40 14 02 00
	00 00		 mov	 DWORD PTR [eax+20], 2

; 22   : 	m_v3FlyTargetPosition=v3FlyTargetPosition;	

  00024	8b 7d fc	 mov	 edi, DWORD PTR _this$[ebp]
  00027	83 c7 04	 add	 edi, 4
  0002a	8b 75 08	 mov	 esi, DWORD PTR _v3FlyTargetPosition$[ebp]
  0002d	a5		 movsd
  0002e	a5		 movsd
  0002f	a5		 movsd

; 23   : }

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0CFlyTarget@@QAE@ABUD3DXVECTOR3@@@Z ENDP		; CFlyTarget::CFlyTarget
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ??0CFlyTarget@@QAE@PAVIFlyTargetableObject@@@Z
_TEXT	SEGMENT
$T1 = -20						; size = 8
_this$ = -12						; size = 4
_pTargeter$ = -8					; size = 4
_this$ = -4						; size = 4
_pFlyTarget$ = 8					; size = 4
??0CFlyTarget@@QAE@PAVIFlyTargetableObject@@@Z PROC	; CFlyTarget::CFlyTarget, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CFlyTarget@@6B@

; 11   : 	__Initialize();

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?__Initialize@CFlyTarget@@AAEXXZ ; CFlyTarget::__Initialize

; 12   : 
; 13   : 	m_eType=TYPE_OBJECT;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1

; 14   : 	m_pFlyTarget=pFlyTarget;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _pFlyTarget$[ebp]
  0002a	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 15   : 	m_pFlyTarget->AddFlyTargeter(this);

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	89 45 f8	 mov	 DWORD PTR _pTargeter$[ebp], eax
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00039	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.h

; 21   : 		m_FlyTargeterSet.insert(pTargeter);

  0003c	8d 45 f8	 lea	 eax, DWORD PTR _pTargeter$[ebp]
  0003f	50		 push	 eax
  00040	8d 45 ec	 lea	 eax, DWORD PTR $T1[ebp]
  00043	50		 push	 eax
  00044	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 c1 04	 add	 ecx, 4
  0004a	e8 00 00 00 00	 call	 ??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@@std@@_N@1@ABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::insert<0,0>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp

; 16   : }

  0004f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c9		 leave
  00053	c2 04 00	 ret	 4
??0CFlyTarget@@QAE@PAVIFlyTargetableObject@@@Z ENDP	; CFlyTarget::CFlyTarget
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\FlyTarget.cpp
;	COMDAT ??0CFlyTarget@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFlyTarget@@QAE@XZ PROC				; CFlyTarget::CFlyTarget, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CFlyTarget@@6B@

; 6    : 	__Initialize();

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ?__Initialize@CFlyTarget@@AAEXXZ ; CFlyTarget::__Initialize

; 7    : }

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c9		 leave
  0001c	c3		 ret	 0
??0CFlyTarget@@QAE@XZ ENDP				; CFlyTarget::CFlyTarget
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Eqrange@PAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IBE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@PAU12@@1@ABQAVCFlyTarget@@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
__Comp$ = -64						; size = 4
$T2 = -60						; size = 4
$T3 = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
$T6 = -44						; size = 4
__Lonode$ = -40						; size = 4
tv90 = -36						; size = 4
tv133 = -32						; size = 4
tv81 = -28						; size = 4
__Nodekey$7 = -24					; size = 4
tv67 = -20						; size = 4
_this$ = -16						; size = 4
__Scary$ = -12						; size = 4
__Hinode$ = -8						; size = 4
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Eqrange@PAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IBE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@PAU12@@1@ABQAVCFlyTarget@@@Z PROC ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Eqrange<CFlyTarget *>, COMDAT
; _this$ = ecx

; 1783 :         noexcept(_Nothrow_compare<key_compare, key_type, _Other>&& _Nothrow_compare<key_compare, _Other, key_type>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 d4	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 d4	 mov	 eax, DWORD PTR $T6[ebp]
  00012	89 45 f4	 mov	 DWORD PTR __Scary$[ebp], eax

; 2035 :         return _Mypair._Get_first();

  00015	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00018	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2035 :         return _Mypair._Get_first();

  0001b	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  0001e	89 45 c0	 mov	 DWORD PTR __Comp$[ebp], eax

; 1784 :         // find range of nodes equivalent to _Keyval
; 1785 :         const auto _Scary = _Get_scary();
; 1786 :         const auto& _Comp = _Getcomp();
; 1787 :         _Nodeptr _Pnode   = _Scary->_Myhead->_Parent;

  00021	8b 45 f4	 mov	 eax, DWORD PTR __Scary$[ebp]
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 1788 :         _Nodeptr _Lonode  = _Scary->_Myhead; // end() if search fails

  0002c	8b 45 f4	 mov	 eax, DWORD PTR __Scary$[ebp]
  0002f	8b 00		 mov	 eax, DWORD PTR [eax]
  00031	89 45 d8	 mov	 DWORD PTR __Lonode$[ebp], eax

; 1789 :         _Nodeptr _Hinode  = _Scary->_Myhead; // end() if search fails

  00034	8b 45 f4	 mov	 eax, DWORD PTR __Scary$[ebp]
  00037	8b 00		 mov	 eax, DWORD PTR [eax]
  00039	89 45 f8	 mov	 DWORD PTR __Hinode$[ebp], eax
$LN2@Eqrange:

; 1790 : 
; 1791 :         while (!_Pnode->_Isnil) {

  0003c	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0003f	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00043	85 c0		 test	 eax, eax
  00045	75 7a		 jne	 SHORT $LN3@Eqrange

; 1792 :             const auto& _Nodekey = _Traits::_Kfn(_Pnode->_Myval);

  00047	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0004a	83 c0 10	 add	 eax, 16			; 00000010H
  0004d	89 45 e8	 mov	 DWORD PTR __Nodekey$7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 127  :         return _Left < _Right;

  00050	8b 45 e8	 mov	 eax, DWORD PTR __Nodekey$7[ebp]
  00053	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00056	8b 00		 mov	 eax, DWORD PTR [eax]
  00058	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0005a	73 09		 jae	 SHORT $LN30@Eqrange
  0005c	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00063	eb 04		 jmp	 SHORT $LN28@Eqrange
$LN30@Eqrange:
  00065	83 65 ec 00	 and	 DWORD PTR tv67[ebp], 0
$LN28@Eqrange:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1793 :             if (_DEBUG_LT_PRED(_Comp, _Nodekey, _Keyval)) {

  00069	0f b6 45 ec	 movzx	 eax, BYTE PTR tv67[ebp]
  0006d	85 c0		 test	 eax, eax
  0006f	74 0b		 je	 SHORT $LN6@Eqrange

; 1794 :                 _Pnode = _Pnode->_Right; // descend right subtree

  00071	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00074	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00077	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 1795 :             } else { // _Pnode not less than _Keyval, remember it

  0007a	eb 40		 jmp	 SHORT $LN7@Eqrange
$LN6@Eqrange:

; 1796 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  0007c	8b 45 f8	 mov	 eax, DWORD PTR __Hinode$[ebp]
  0007f	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00083	85 c0		 test	 eax, eax
  00085	74 27		 je	 SHORT $LN8@Eqrange
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 127  :         return _Left < _Right;

  00087	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0008a	8b 4d e8	 mov	 ecx, DWORD PTR __Nodekey$7[ebp]
  0008d	8b 00		 mov	 eax, DWORD PTR [eax]
  0008f	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00091	73 09		 jae	 SHORT $LN34@Eqrange
  00093	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv81[ebp], 1
  0009a	eb 04		 jmp	 SHORT $LN32@Eqrange
$LN34@Eqrange:
  0009c	83 65 e4 00	 and	 DWORD PTR tv81[ebp], 0
$LN32@Eqrange:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1796 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  000a0	0f b6 45 e4	 movzx	 eax, BYTE PTR tv81[ebp]
  000a4	85 c0		 test	 eax, eax
  000a6	74 06		 je	 SHORT $LN8@Eqrange

; 1797 :                     _Hinode = _Pnode; // _Pnode greater, remember it

  000a8	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000ab	89 45 f8	 mov	 DWORD PTR __Hinode$[ebp], eax
$LN8@Eqrange:

; 1798 :                 }
; 1799 : 
; 1800 :                 _Lonode = _Pnode;

  000ae	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000b1	89 45 d8	 mov	 DWORD PTR __Lonode$[ebp], eax

; 1801 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  000b4	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000b7	8b 00		 mov	 eax, DWORD PTR [eax]
  000b9	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN7@Eqrange:

; 1802 :             }
; 1803 :         }

  000bc	e9 7b ff ff ff	 jmp	 $LN2@Eqrange
$LN3@Eqrange:

; 1804 : 
; 1805 :         _Pnode = _Hinode->_Isnil ? _Scary->_Myhead->_Parent : _Hinode->_Left; // continue scan for upper bound

  000c1	8b 45 f8	 mov	 eax, DWORD PTR __Hinode$[ebp]
  000c4	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  000c8	85 c0		 test	 eax, eax
  000ca	74 0d		 je	 SHORT $LN12@Eqrange
  000cc	8b 45 f4	 mov	 eax, DWORD PTR __Scary$[ebp]
  000cf	8b 00		 mov	 eax, DWORD PTR [eax]
  000d1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d4	89 45 e0	 mov	 DWORD PTR tv133[ebp], eax
  000d7	eb 08		 jmp	 SHORT $LN13@Eqrange
$LN12@Eqrange:
  000d9	8b 45 f8	 mov	 eax, DWORD PTR __Hinode$[ebp]
  000dc	8b 00		 mov	 eax, DWORD PTR [eax]
  000de	89 45 e0	 mov	 DWORD PTR tv133[ebp], eax
$LN13@Eqrange:
  000e1	8b 45 e0	 mov	 eax, DWORD PTR tv133[ebp]
  000e4	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN4@Eqrange:

; 1806 :         while (!_Pnode->_Isnil) {

  000e7	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000ea	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  000ee	85 c0		 test	 eax, eax
  000f0	75 49		 jne	 SHORT $LN5@Eqrange

; 2035 :         return _Mypair._Get_first();

  000f2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  000f5	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2035 :         return _Mypair._Get_first();

  000f8	8b 45 cc	 mov	 eax, DWORD PTR $T4[ebp]
  000fb	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 127  :         return _Left < _Right;

  000fe	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00101	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00104	8b 00		 mov	 eax, DWORD PTR [eax]
  00106	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00109	73 09		 jae	 SHORT $LN46@Eqrange
  0010b	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
  00112	eb 04		 jmp	 SHORT $LN44@Eqrange
$LN46@Eqrange:
  00114	83 65 dc 00	 and	 DWORD PTR tv90[ebp], 0
$LN44@Eqrange:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1807 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Pnode->_Myval))) {

  00118	0f b6 45 dc	 movzx	 eax, BYTE PTR tv90[ebp]
  0011c	85 c0		 test	 eax, eax
  0011e	74 10		 je	 SHORT $LN9@Eqrange

; 1808 :                 // _Pnode greater than _Keyval, remember it
; 1809 :                 _Hinode = _Pnode;

  00120	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00123	89 45 f8	 mov	 DWORD PTR __Hinode$[ebp], eax

; 1810 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  00126	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00129	8b 00		 mov	 eax, DWORD PTR [eax]
  0012b	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 1811 :             } else {

  0012e	eb 09		 jmp	 SHORT $LN10@Eqrange
$LN9@Eqrange:

; 1812 :                 _Pnode = _Pnode->_Right; // descend right subtree

  00130	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00133	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00136	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN10@Eqrange:

; 1813 :             }
; 1814 :         }

  00139	eb ac		 jmp	 SHORT $LN4@Eqrange
$LN5@Eqrange:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0013b	8d 45 d8	 lea	 eax, DWORD PTR __Lonode$[ebp]
  0013e	89 45 c8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00141	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00144	8b 4d c8	 mov	 ecx, DWORD PTR $T3[ebp]
  00147	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00149	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0014b	8d 45 f8	 lea	 eax, DWORD PTR __Hinode$[ebp]
  0014e	89 45 c4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00151	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00154	8b 4d c4	 mov	 ecx, DWORD PTR $T2[ebp]
  00157	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00159	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1816 :         return {_Lonode, _Hinode};

  0015c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1817 :     }

  0015f	c9		 leave
  00160	c2 08 00	 ret	 8
??$_Eqrange@PAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IBE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@PAU12@@1@ABQAVCFlyTarget@@@Z ENDP ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Eqrange<CFlyTarget *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
__Pnode$ = -12						; size = 4
__Pnode$2 = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 51   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
  0000e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00011	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00015	85 c0		 test	 eax, eax
  00017	74 37		 je	 SHORT $LN4@operator
$LN2@operator:

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00021	89 45 f8	 mov	 DWORD PTR __Pnode$2[ebp], eax
  00024	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00027	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  0002b	85 c0		 test	 eax, eax
  0002d	75 17		 jne	 SHORT $LN3@operator
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  00035	8b 00		 mov	 eax, DWORD PTR [eax]
  00037	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0003a	75 0a		 jne	 SHORT $LN3@operator

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  00042	89 08		 mov	 DWORD PTR [eax], ecx

; 56   :             }

  00044	eb d3		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  0004c	89 08		 mov	 DWORD PTR [eax], ecx

; 59   :         } else {

  0004e	eb 30		 jmp	 SHORT $LN5@operator
$LN4@operator:

; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 00		 mov	 eax, DWORD PTR [eax]
  00055	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00058	89 45 f4	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN8@operator:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  0005b	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0005e	8b 00		 mov	 eax, DWORD PTR [eax]
  00060	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00064	85 c0		 test	 eax, eax
  00066	75 0a		 jne	 SHORT $LN9@operator

; 452  :             _Pnode = _Pnode->_Left;

  00068	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0006b	8b 00		 mov	 eax, DWORD PTR [eax]
  0006d	89 45 f4	 mov	 DWORD PTR __Pnode$[ebp], eax

; 453  :         }

  00070	eb e9		 jmp	 SHORT $LN8@operator
$LN9@operator:

; 454  : 
; 455  :         return _Pnode;

  00072	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00075	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax

; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00078	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  0007e	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@operator:

; 61   :         }
; 62   : 
; 63   :         return *this;

  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 64   :     }

  00083	c9		 leave
  00084	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@@std@@_N@1@ABQAVCFlyTarget@@@Z
_TEXT	SEGMENT
__Result$ = -36						; size = 8
$T1 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
___param0$ = -12					; size = 4
$T5 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@@std@@_N@1@ABQAVCFlyTarget@@@Z PROC ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::insert<0,0>, COMDAT
; _this$ = ecx

; 1332 :     pair<iterator, bool> insert(const value_type& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1333 :         const auto _Result = _Emplace(_Val);

  00009	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0000c	8d 45 dc	 lea	 eax, DWORD PTR __Result$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Emplace@ABQAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@_N@1@ABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Emplace<CFlyTarget * const &>

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0001b	89 45 f8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0001e	8b 45 f8	 mov	 eax, DWORD PTR $T5[ebp]
  00021	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax

; 1334 :         return {iterator(_Result.first, _Get_scary()), _Result.second};

  00024	8b 45 dc	 mov	 eax, DWORD PTR __Result$[ebp]
  00027	89 45 f4	 mov	 DWORD PTR ___param0$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	8b 45 f4	 mov	 eax, DWORD PTR ___param0$[ebp]
  0002d	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00030	8d 45 f0	 lea	 eax, DWORD PTR $T4[ebp]
  00033	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00036	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0003e	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00040	8d 45 e0	 lea	 eax, DWORD PTR __Result$[ebp+4]
  00043	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00046	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00049	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  0004c	8a 09		 mov	 cl, BYTE PTR [ecx]
  0004e	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1334 :         return {iterator(_Result.first, _Get_scary()), _Result.second};

  00051	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1335 :     }

  00054	c9		 leave
  00055	c2 08 00	 ret	 8
??$insert@$0A@$0A@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@@std@@_N@1@ABQAVCFlyTarget@@@Z ENDP ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::insert<0,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Parent_sibling$1 = -20				; size = 4
__Parent_sibling$2 = -16				; size = 4
_this$ = -12						; size = 4
__Head$ = -8						; size = 4
__Pnode$3 = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 645  :         ++_Mysize;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	40		 inc	 eax
  00010	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 646  :         const auto _Head  = _Myhead;

  00016	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	89 45 f8	 mov	 DWORD PTR __Head$[ebp], eax

; 647  :         _Newnode->_Parent = _Loc._Parent;

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00024	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00027	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  0002a	3b 45 f8	 cmp	 eax, DWORD PTR __Head$[ebp]
  0002d	75 29		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  0002f	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  00032	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00035	89 08		 mov	 DWORD PTR [eax], ecx

; 650  :             _Head->_Parent   = _Newnode;

  00037	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  0003d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 651  :             _Head->_Right    = _Newnode;

  00040	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  00043	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00046	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 652  :             _Newnode->_Color = _Black; // the root is black

  00049	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  0004c	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 653  :             return _Newnode;

  00050	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00053	e9 a3 01 00 00	 jmp	 $LN18@Insert_nod
$LN5@Insert_nod:

; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00058	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  0005c	75 1f		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00061	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00064	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  00067	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0006d	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00070	75 09		 jne	 SHORT $LN8@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00072	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  00075	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00078	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN8@Insert_nod:

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  0007b	eb 1a		 jmp	 SHORT $LN7@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00080	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00083	89 08		 mov	 DWORD PTR [eax], ecx

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00085	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  00088	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0008b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0008d	75 08		 jne	 SHORT $LN7@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0008f	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  00092	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00095	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00097	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  0009a	89 45 fc	 mov	 DWORD PTR __Pnode$3[ebp], eax
$LN4@Insert_nod:
  0009d	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  000a0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a3	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  000a7	85 c0		 test	 eax, eax
  000a9	0f 85 3f 01 00
	00		 jne	 $LN3@Insert_nod

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  000af	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  000b2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$3[ebp]
  000bb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000be	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000c0	0f 85 95 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  000c6	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  000c9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000cc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000cf	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000d2	89 45 f0	 mov	 DWORD PTR __Parent_sibling$2[ebp], eax

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  000d5	8b 45 f0	 mov	 eax, DWORD PTR __Parent_sibling$2[ebp]
  000d8	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  000dc	85 c0		 test	 eax, eax
  000de	75 2c		 jne	 SHORT $LN12@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;

  000e0	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  000e3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e6	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 676  :                     _Parent_sibling->_Color          = _Black;

  000ea	8b 45 f0	 mov	 eax, DWORD PTR __Parent_sibling$2[ebp]
  000ed	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  000f4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000fa	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;

  000fe	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00101	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00104	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00107	89 45 fc	 mov	 DWORD PTR __Pnode$3[ebp], eax

; 679  :                 } else { // parent's sibling has red and black children

  0010a	eb 4a		 jmp	 SHORT $LN13@Insert_nod
$LN12@Insert_nod:

; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0010c	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  0010f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00112	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$3[ebp]
  00115	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00118	75 14		 jne	 SHORT $LN14@Insert_nod

; 681  :                         _Pnode = _Pnode->_Parent;

  0011a	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  0011d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00120	89 45 fc	 mov	 DWORD PTR __Pnode$3[ebp], eax

; 682  :                         _Lrotate(_Pnode);

  00123	ff 75 fc	 push	 DWORD PTR __Pnode$3[ebp]
  00126	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate
$LN14@Insert_nod:

; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0012e	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00131	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00134	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00138	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  0013b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0013e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00141	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  00145	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00148	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0014b	ff 70 04	 push	 DWORD PTR [eax+4]
  0014e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00151	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate
$LN13@Insert_nod:

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00156	e9 8e 00 00 00	 jmp	 $LN11@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;

  0015b	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  0015e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00161	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00164	8b 00		 mov	 eax, DWORD PTR [eax]
  00166	89 45 ec	 mov	 DWORD PTR __Parent_sibling$1[ebp], eax

; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00169	8b 45 ec	 mov	 eax, DWORD PTR __Parent_sibling$1[ebp]
  0016c	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00170	85 c0		 test	 eax, eax
  00172	75 2c		 jne	 SHORT $LN15@Insert_nod

; 692  :                     _Pnode->_Parent->_Color          = _Black;

  00174	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00177	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0017a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 693  :                     _Parent_sibling->_Color          = _Black;

  0017e	8b 45 ec	 mov	 eax, DWORD PTR __Parent_sibling$1[ebp]
  00181	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00185	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00188	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;

  00192	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00195	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00198	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019b	89 45 fc	 mov	 DWORD PTR __Pnode$3[ebp], eax

; 696  :                 } else { // parent's sibling has red and black children

  0019e	eb 49		 jmp	 SHORT $LN11@Insert_nod
$LN15@Insert_nod:

; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  001a0	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  001a3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$3[ebp]
  001a9	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001ab	75 14		 jne	 SHORT $LN17@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  001ad	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  001b0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001b3	89 45 fc	 mov	 DWORD PTR __Pnode$3[ebp], eax

; 699  :                         _Rrotate(_Pnode);

  001b6	ff 75 fc	 push	 DWORD PTR __Pnode$3[ebp]
  001b9	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  001bc	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate
$LN17@Insert_nod:

; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  001c1	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  001c4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c7	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  001cb	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  001ce	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d4	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001d8	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  001db	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001de	ff 70 04	 push	 DWORD PTR [eax+4]
  001e1	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  001e4	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate
$LN11@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }

  001e9	e9 af fe ff ff	 jmp	 $LN4@Insert_nod
$LN3@Insert_nod:

; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001ee	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  001f1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001f4	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001f8	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
$LN18@Insert_nod:

; 711  :     }

  001fb	c9		 leave
  001fc	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
$T2 = -64						; size = 4
$T3 = -60						; size = 4
$T4 = -56						; size = 4
$T5 = -52						; size = 4
__Right$ = -48						; size = 4
__Left$ = -44						; size = 4
tv144 = -40						; size = 4
tv133 = -36						; size = 4
__Pnode$ = -32						; size = 4
__Pnode$ = -28						; size = 4
_this$ = -24						; size = 4
__Erasednode$ = -20					; size = 4
__Fixnode$ = -16					; size = 4
__Fixnodeparent$ = -12					; size = 4
__Pnode$ = -8						; size = 4
__Tmp$6 = -1						; size = 1
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Extract, COMDAT
; _this$ = ecx

; 502  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 503  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00009	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	89 45 ec	 mov	 DWORD PTR __Erasednode$[ebp], eax

; 504  :         ++_Where; // save successor iterator for return

  0000f	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00012	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++

; 505  : 
; 506  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 507  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 508  :         _Nodeptr _Pnode = _Erasednode;

  00017	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 509  : 
; 510  :         if (_Pnode->_Left->_Isnil) {

  0001d	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00026	85 c0		 test	 eax, eax
  00028	74 0b		 je	 SHORT $LN5@Extract

; 511  :             _Fixnode = _Pnode->_Right; // stitch up right subtree

  0002a	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00030	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax
  00033	eb 27		 jmp	 SHORT $LN6@Extract
$LN5@Extract:

; 512  :         } else if (_Pnode->_Right->_Isnil) {

  00035	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00038	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003b	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  0003f	85 c0		 test	 eax, eax
  00041	74 0a		 je	 SHORT $LN7@Extract

; 513  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  00043	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 514  :         } else { // two subtrees, must lift successor node to replace erased

  0004b	eb 0f		 jmp	 SHORT $LN6@Extract
$LN7@Extract:

; 515  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 516  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00056	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00059	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax
$LN6@Extract:

; 517  :         }
; 518  : 
; 519  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  0005c	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0005f	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  00062	0f 85 01 01 00
	00		 jne	 $LN9@Extract

; 520  :             _Fixnodeparent = _Erasednode->_Parent;

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0006b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006e	89 45 f4	 mov	 DWORD PTR __Fixnodeparent$[ebp], eax

; 521  :             if (!_Fixnode->_Isnil) {

  00071	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00074	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00078	85 c0		 test	 eax, eax
  0007a	75 09		 jne	 SHORT $LN11@Extract

; 522  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  0007c	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  00082	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN11@Extract:

; 523  :             }
; 524  : 
; 525  :             if (_Myhead->_Parent == _Erasednode) {

  00085	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 00		 mov	 eax, DWORD PTR [eax]
  0008a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008d	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  00090	75 0d		 jne	 SHORT $LN12@Extract

; 526  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00092	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00095	8b 00		 mov	 eax, DWORD PTR [eax]
  00097	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  0009a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0009d	eb 1d		 jmp	 SHORT $LN13@Extract
$LN12@Extract:

; 527  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  0009f	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  000a2	8b 00		 mov	 eax, DWORD PTR [eax]
  000a4	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  000a7	75 0a		 jne	 SHORT $LN14@Extract

; 528  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  000a9	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  000ac	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  000af	89 08		 mov	 DWORD PTR [eax], ecx

; 529  :             } else {

  000b1	eb 09		 jmp	 SHORT $LN13@Extract
$LN14@Extract:

; 530  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  000b3	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  000b6	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  000b9	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN13@Extract:

; 531  :             }
; 532  : 
; 533  :             if (_Myhead->_Left == _Erasednode) {

  000bc	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 00		 mov	 eax, DWORD PTR [eax]
  000c1	8b 00		 mov	 eax, DWORD PTR [eax]
  000c3	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  000c6	75 46		 jne	 SHORT $LN16@Extract

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  000c8	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  000cb	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  000cf	85 c0		 test	 eax, eax
  000d1	74 08		 je	 SHORT $LN42@Extract
  000d3	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  000d6	89 45 dc	 mov	 DWORD PTR tv133[ebp], eax
  000d9	eb 29		 jmp	 SHORT $LN43@Extract
$LN42@Extract:
  000db	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  000de	89 45 e4	 mov	 DWORD PTR __Pnode$[ebp], eax
  000e1	8b 45 c0	 mov	 eax, DWORD PTR $T2[ebp]
  000e4	89 45 dc	 mov	 DWORD PTR tv133[ebp], eax
$LN59@Extract:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  000e7	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000ea	8b 00		 mov	 eax, DWORD PTR [eax]
  000ec	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  000f0	85 c0		 test	 eax, eax
  000f2	75 0a		 jne	 SHORT $LN60@Extract

; 452  :             _Pnode = _Pnode->_Left;

  000f4	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000f7	8b 00		 mov	 eax, DWORD PTR [eax]
  000f9	89 45 e4	 mov	 DWORD PTR __Pnode$[ebp], eax

; 453  :         }

  000fc	eb e9		 jmp	 SHORT $LN59@Extract
$LN60@Extract:

; 454  : 
; 455  :         return _Pnode;

  000fe	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00101	89 45 dc	 mov	 DWORD PTR tv133[ebp], eax
$LN43@Extract:

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00104	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00107	8b 00		 mov	 eax, DWORD PTR [eax]
  00109	8b 4d dc	 mov	 ecx, DWORD PTR tv133[ebp]
  0010c	89 08		 mov	 DWORD PTR [eax], ecx
$LN16@Extract:

; 535  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 536  :             }
; 537  : 
; 538  :             if (_Myhead->_Right == _Erasednode) {

  0010e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00111	8b 00		 mov	 eax, DWORD PTR [eax]
  00113	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00116	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  00119	75 49		 jne	 SHORT $LN17@Extract

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0011b	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0011e	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00122	85 c0		 test	 eax, eax
  00124	74 08		 je	 SHORT $LN44@Extract
  00126	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00129	89 45 d8	 mov	 DWORD PTR tv144[ebp], eax
  0012c	eb 2b		 jmp	 SHORT $LN45@Extract
$LN44@Extract:
  0012e	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00131	89 45 e0	 mov	 DWORD PTR __Pnode$[ebp], eax
  00134	8b 45 bc	 mov	 eax, DWORD PTR $T1[ebp]
  00137	89 45 d8	 mov	 DWORD PTR tv144[ebp], eax
$LN64@Extract:

; 443  :         while (!_Pnode->_Right->_Isnil) {

  0013a	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0013d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00140	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00144	85 c0		 test	 eax, eax
  00146	75 0b		 jne	 SHORT $LN65@Extract

; 444  :             _Pnode = _Pnode->_Right;

  00148	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0014b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0014e	89 45 e0	 mov	 DWORD PTR __Pnode$[ebp], eax

; 445  :         }

  00151	eb e7		 jmp	 SHORT $LN64@Extract
$LN65@Extract:

; 446  : 
; 447  :         return _Pnode;

  00153	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00156	89 45 d8	 mov	 DWORD PTR tv144[ebp], eax
$LN45@Extract:

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  00159	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0015c	8b 00		 mov	 eax, DWORD PTR [eax]
  0015e	8b 4d d8	 mov	 ecx, DWORD PTR tv144[ebp]
  00161	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN17@Extract:

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

  00164	e9 f1 00 00 00	 jmp	 $LN10@Extract
$LN9@Extract:

; 543  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  00169	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0016c	8b 00		 mov	 eax, DWORD PTR [eax]
  0016e	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00171	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 544  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  00174	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00177	8b 4d ec	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  0017a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0017c	89 08		 mov	 DWORD PTR [eax], ecx

; 545  : 
; 546  :             if (_Pnode == _Erasednode->_Right) {

  0017e	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00181	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00184	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00187	75 08		 jne	 SHORT $LN18@Extract

; 547  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  00189	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0018c	89 45 f4	 mov	 DWORD PTR __Fixnodeparent$[ebp], eax

; 548  :             } else { // successor further down, link in place of erased

  0018f	eb 3d		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 549  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's

  00191	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00194	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00197	89 45 f4	 mov	 DWORD PTR __Fixnodeparent$[ebp], eax

; 550  :                 if (!_Fixnode->_Isnil) {

  0019a	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0019d	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  001a1	85 c0		 test	 eax, eax
  001a3	75 09		 jne	 SHORT $LN20@Extract

; 551  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  001a5	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  001a8	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  001ab	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN20@Extract:

; 552  :                 }
; 553  : 
; 554  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  001ae	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  001b1	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  001b4	89 08		 mov	 DWORD PTR [eax], ecx

; 555  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  001b6	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  001b9	8b 4d ec	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  001bc	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  001bf	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 556  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  001c2	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  001c5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001c8	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  001cb	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN19@Extract:

; 557  :             }
; 558  : 
; 559  :             if (_Myhead->_Parent == _Erasednode) {

  001ce	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001d1	8b 00		 mov	 eax, DWORD PTR [eax]
  001d3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d6	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  001d9	75 0d		 jne	 SHORT $LN21@Extract

; 560  :                 _Myhead->_Parent = _Pnode; // link down from root

  001db	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001de	8b 00		 mov	 eax, DWORD PTR [eax]
  001e0	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  001e3	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  001e6	eb 26		 jmp	 SHORT $LN22@Extract
$LN21@Extract:

; 561  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  001e8	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  001eb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001ee	8b 00		 mov	 eax, DWORD PTR [eax]
  001f0	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  001f3	75 0d		 jne	 SHORT $LN23@Extract

; 562  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  001f5	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  001f8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001fb	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  001fe	89 08		 mov	 DWORD PTR [eax], ecx

; 563  :             } else {

  00200	eb 0c		 jmp	 SHORT $LN22@Extract
$LN23@Extract:

; 564  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  00202	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00205	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00208	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0020b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN22@Extract:

; 565  :             }
; 566  : 
; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  0020e	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00211	8b 4d ec	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  00214	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00217	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 568  :             _STD swap(_Pnode->_Color, _Erasednode->_Color); // recolor it

  0021a	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0021d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00220	89 45 d0	 mov	 DWORD PTR __Right$[ebp], eax
  00223	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00226	83 c0 0c	 add	 eax, 12			; 0000000cH
  00229	89 45 d4	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0022c	8b 45 d4	 mov	 eax, DWORD PTR __Left$[ebp]
  0022f	89 45 cc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  00232	8b 45 cc	 mov	 eax, DWORD PTR $T5[ebp]
  00235	8a 00		 mov	 al, BYTE PTR [eax]
  00237	88 45 ff	 mov	 BYTE PTR __Tmp$6[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0023a	8b 45 d0	 mov	 eax, DWORD PTR __Right$[ebp]
  0023d	89 45 c8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  00240	8b 45 d4	 mov	 eax, DWORD PTR __Left$[ebp]
  00243	8b 4d c8	 mov	 ecx, DWORD PTR $T4[ebp]
  00246	8a 09		 mov	 cl, BYTE PTR [ecx]
  00248	88 08		 mov	 BYTE PTR [eax], cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0024a	8d 45 ff	 lea	 eax, DWORD PTR __Tmp$6[ebp]
  0024d	89 45 c4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  00250	8b 45 d0	 mov	 eax, DWORD PTR __Right$[ebp]
  00253	8b 4d c4	 mov	 ecx, DWORD PTR $T3[ebp]
  00256	8a 09		 mov	 cl, BYTE PTR [ecx]
  00258	88 08		 mov	 BYTE PTR [eax], cl
$LN10@Extract:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 571  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  0025a	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0025d	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00261	83 f8 01	 cmp	 eax, 1
  00264	0f 85 f4 01 00
	00		 jne	 $LN25@Extract

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0026a	eb 09		 jmp	 SHORT $LN4@Extract
$LN2@Extract:
  0026c	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0026f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00272	89 45 f4	 mov	 DWORD PTR __Fixnodeparent$[ebp], eax
$LN4@Extract:
  00275	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00278	8b 00		 mov	 eax, DWORD PTR [eax]
  0027a	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  0027d	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00280	0f 84 d1 01 00
	00		 je	 $LN3@Extract
  00286	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00289	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  0028d	83 f8 01	 cmp	 eax, 1
  00290	0f 85 c1 01 00
	00		 jne	 $LN3@Extract

; 573  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  00296	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00299	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  0029c	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0029e	0f 85 dd 00 00
	00		 jne	 $LN26@Extract

; 574  :                     _Pnode = _Fixnodeparent->_Right;

  002a4	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  002a7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  002aa	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 575  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  002ad	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  002b0	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  002b4	85 c0		 test	 eax, eax
  002b6	75 22		 jne	 SHORT $LN28@Extract

; 576  :                         _Pnode->_Color         = _Black;

  002b8	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  002bb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 577  :                         _Fixnodeparent->_Color = _Red;

  002bf	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  002c2	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 578  :                         _Lrotate(_Fixnodeparent);

  002c6	ff 75 f4	 push	 DWORD PTR __Fixnodeparent$[ebp]
  002c9	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002cc	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate

; 579  :                         _Pnode = _Fixnodeparent->_Right;

  002d1	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  002d4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  002d7	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN28@Extract:

; 580  :                     }
; 581  : 
; 582  :                     if (_Pnode->_Isnil) {

  002da	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  002dd	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  002e1	85 c0		 test	 eax, eax
  002e3	74 0b		 je	 SHORT $LN29@Extract

; 583  :                         _Fixnode = _Fixnodeparent; // shouldn't happen

  002e5	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  002e8	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 584  :                     } else if (_Pnode->_Left->_Color == _Black

  002eb	e9 8c 00 00 00	 jmp	 $LN30@Extract
$LN29@Extract:

; 585  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  002f0	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  002f3	8b 00		 mov	 eax, DWORD PTR [eax]
  002f5	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  002f9	83 f8 01	 cmp	 eax, 1
  002fc	75 1e		 jne	 SHORT $LN31@Extract
  002fe	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00301	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00304	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00308	83 f8 01	 cmp	 eax, 1
  0030b	75 0f		 jne	 SHORT $LN31@Extract

; 586  :                         _Pnode->_Color = _Red;

  0030d	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00310	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 587  :                         _Fixnode       = _Fixnodeparent;

  00314	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00317	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 588  :                     } else { // must rearrange right subtree

  0031a	eb 60		 jmp	 SHORT $LN30@Extract
$LN31@Extract:

; 589  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  0031c	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0031f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00322	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00326	83 f8 01	 cmp	 eax, 1
  00329	75 24		 jne	 SHORT $LN33@Extract

; 590  :                             _Pnode->_Left->_Color = _Black;

  0032b	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0032e	8b 00		 mov	 eax, DWORD PTR [eax]
  00330	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 591  :                             _Pnode->_Color        = _Red;

  00334	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00337	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 592  :                             _Rrotate(_Pnode);

  0033b	ff 75 f8	 push	 DWORD PTR __Pnode$[ebp]
  0033e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00341	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate

; 593  :                             _Pnode = _Fixnodeparent->_Right;

  00346	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00349	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0034c	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN33@Extract:

; 594  :                         }
; 595  : 
; 596  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  0034f	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00352	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  00355	8a 49 0c	 mov	 cl, BYTE PTR [ecx+12]
  00358	88 48 0c	 mov	 BYTE PTR [eax+12], cl

; 597  :                         _Fixnodeparent->_Color = _Black;

  0035b	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0035e	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 598  :                         _Pnode->_Right->_Color = _Black;

  00362	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00365	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00368	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 599  :                         _Lrotate(_Fixnodeparent);

  0036c	ff 75 f4	 push	 DWORD PTR __Fixnodeparent$[ebp]
  0036f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00372	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate

; 600  :                         break; // tree now recolored/rebalanced

  00377	e9 db 00 00 00	 jmp	 $LN3@Extract
$LN30@Extract:

; 601  :                     }
; 602  :                 } else { // fixup right subtree

  0037c	e9 d1 00 00 00	 jmp	 $LN27@Extract
$LN26@Extract:

; 603  :                     _Pnode = _Fixnodeparent->_Left;

  00381	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00384	8b 00		 mov	 eax, DWORD PTR [eax]
  00386	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 604  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  00389	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0038c	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00390	85 c0		 test	 eax, eax
  00392	75 21		 jne	 SHORT $LN34@Extract

; 605  :                         _Pnode->_Color         = _Black;

  00394	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00397	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 606  :                         _Fixnodeparent->_Color = _Red;

  0039b	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0039e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 607  :                         _Rrotate(_Fixnodeparent);

  003a2	ff 75 f4	 push	 DWORD PTR __Fixnodeparent$[ebp]
  003a5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  003a8	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate

; 608  :                         _Pnode = _Fixnodeparent->_Left;

  003ad	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003b0	8b 00		 mov	 eax, DWORD PTR [eax]
  003b2	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN34@Extract:

; 609  :                     }
; 610  : 
; 611  :                     if (_Pnode->_Isnil) {

  003b5	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003b8	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  003bc	85 c0		 test	 eax, eax
  003be	74 0b		 je	 SHORT $LN35@Extract

; 612  :                         _Fixnode = _Fixnodeparent; // shouldn't happen

  003c0	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003c3	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 613  :                     } else if (_Pnode->_Right->_Color == _Black

  003c6	e9 87 00 00 00	 jmp	 $LN27@Extract
$LN35@Extract:

; 614  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  003cb	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003ce	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  003d1	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  003d5	83 f8 01	 cmp	 eax, 1
  003d8	75 1d		 jne	 SHORT $LN37@Extract
  003da	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003dd	8b 00		 mov	 eax, DWORD PTR [eax]
  003df	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  003e3	83 f8 01	 cmp	 eax, 1
  003e6	75 0f		 jne	 SHORT $LN37@Extract

; 615  :                         _Pnode->_Color = _Red;

  003e8	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003eb	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 616  :                         _Fixnode       = _Fixnodeparent;

  003ef	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003f2	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 617  :                     } else { // must rearrange left subtree

  003f5	eb 5b		 jmp	 SHORT $LN27@Extract
$LN37@Extract:

; 618  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  003f7	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003fa	8b 00		 mov	 eax, DWORD PTR [eax]
  003fc	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00400	83 f8 01	 cmp	 eax, 1
  00403	75 24		 jne	 SHORT $LN39@Extract

; 619  :                             _Pnode->_Right->_Color = _Black;

  00405	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00408	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0040b	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 620  :                             _Pnode->_Color         = _Red;

  0040f	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00412	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 621  :                             _Lrotate(_Pnode);

  00416	ff 75 f8	 push	 DWORD PTR __Pnode$[ebp]
  00419	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0041c	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate

; 622  :                             _Pnode = _Fixnodeparent->_Left;

  00421	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00424	8b 00		 mov	 eax, DWORD PTR [eax]
  00426	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN39@Extract:

; 623  :                         }
; 624  : 
; 625  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00429	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0042c	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  0042f	8a 49 0c	 mov	 cl, BYTE PTR [ecx+12]
  00432	88 48 0c	 mov	 BYTE PTR [eax+12], cl

; 626  :                         _Fixnodeparent->_Color = _Black;

  00435	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00438	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 627  :                         _Pnode->_Left->_Color  = _Black;

  0043c	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0043f	8b 00		 mov	 eax, DWORD PTR [eax]
  00441	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 628  :                         _Rrotate(_Fixnodeparent);

  00445	ff 75 f4	 push	 DWORD PTR __Fixnodeparent$[ebp]
  00448	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0044b	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate

; 629  :                         break; // tree now recolored/rebalanced

  00450	eb 05		 jmp	 SHORT $LN3@Extract
$LN27@Extract:

; 630  :                     }
; 631  :                 }
; 632  :             }

  00452	e9 15 fe ff ff	 jmp	 $LN2@Extract
$LN3@Extract:

; 633  : 
; 634  :             _Fixnode->_Color = _Black; // stopping node is black

  00457	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0045a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
$LN25@Extract:

; 635  :         }
; 636  : 
; 637  :         if (0 < _Mysize) {

  0045e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00461	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00465	76 0d		 jbe	 SHORT $LN40@Extract

; 638  :             --_Mysize;

  00467	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0046a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0046d	48		 dec	 eax
  0046e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00471	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN40@Extract:

; 639  :         }
; 640  : 
; 641  :         return _Erasednode;

  00474	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]

; 642  :     }

  00477	c9		 leave
  00478	c2 04 00	 ret	 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Extract
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate, COMDAT
; _this$ = ecx

; 480  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00008	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  00010	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00013	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00016	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00019	89 08		 mov	 DWORD PTR [eax], ecx

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  0001b	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0001e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00021	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00025	85 c0		 test	 eax, eax
  00027	75 0c		 jne	 SHORT $LN2@Rrotate

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00029	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00032	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN2@Rrotate:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  00035	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0003b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00049	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0004c	75 0d		 jne	 SHORT $LN3@Rrotate

; 491  :             _Myhead->_Parent = _Pnode;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 00		 mov	 eax, DWORD PTR [eax]
  00053	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00056	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00059	eb 27		 jmp	 SHORT $LN4@Rrotate
$LN3@Rrotate:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0005b	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0005e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00061	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00064	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00067	75 0e		 jne	 SHORT $LN5@Rrotate

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00069	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0006c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00072	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  00075	eb 0b		 jmp	 SHORT $LN4@Rrotate
$LN5@Rrotate:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00077	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0007a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00080	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@Rrotate:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00082	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00088	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 499  :         _Wherenode->_Parent = _Pnode;

  0008b	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0008e	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00091	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 500  :     }

  00094	c9		 leave
  00095	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate, COMDAT
; _this$ = ecx

; 458  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00008	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0000b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000e	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  00011	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00014	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00017	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00019	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  0001c	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00025	85 c0		 test	 eax, eax
  00027	75 0b		 jne	 SHORT $LN2@Lrotate

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00029	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00031	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN2@Lrotate:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  00034	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0003a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 00		 mov	 eax, DWORD PTR [eax]
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00048	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0004b	75 0d		 jne	 SHORT $LN3@Lrotate

; 469  :             _Myhead->_Parent = _Pnode;

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 00		 mov	 eax, DWORD PTR [eax]
  00052	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00055	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00058	eb 26		 jmp	 SHORT $LN4@Lrotate
$LN3@Lrotate:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0005d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00060	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00063	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00065	75 0d		 jne	 SHORT $LN5@Lrotate

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0006a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00070	89 08		 mov	 DWORD PTR [eax], ecx

; 472  :         } else {

  00072	eb 0c		 jmp	 SHORT $LN4@Lrotate
$LN5@Lrotate:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  00074	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00077	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0007d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN4@Lrotate:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  00080	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00083	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00086	89 08		 mov	 DWORD PTR [eax], ecx

; 477  :         _Wherenode->_Parent = _Pnode;

  00088	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0008e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 478  :     }

  00091	c9		 leave
  00092	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Check_grow_by_1, COMDAT
; _this$ = ecx

; 1718 :     void _Check_grow_by_1() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1719 :         if (max_size() == _Get_scary()->_Mysize) {

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?max_size@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::max_size
  0001d	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00020	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00023	75 05		 jne	 SHORT $LN3@Check_grow

; 1720 :             _Throw_tree_length_error();

  00025	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN3@Check_grow:

; 1721 :         }
; 1722 :     }

  0002a	c9		 leave
  0002b	c3		 ret	 0
?_Check_grow_by_1@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_this$ = -12						; size = 4
__Scary$ = -8						; size = 4
__Head$ = -4						; size = 4
?clear@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::clear, COMDAT
; _this$ = ecx

; 1444 :     void clear() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00012	89 45 f8	 mov	 DWORD PTR __Scary$[ebp], eax

; 1445 :         const auto _Scary = _Get_scary();
; 1446 :         _Scary->_Orphan_ptr(nullptr);
; 1447 :         auto _Head = _Scary->_Myhead;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __Scary$[ebp]
  00018	8b 00		 mov	 eax, DWORD PTR [eax]
  0001a	89 45 fc	 mov	 DWORD PTR __Head$[ebp], eax

; 2039 :         return _Mypair._Myval2._Get_first();

  0001d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00020	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2039 :         return _Mypair._Myval2._Get_first();

  00023	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00026	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax

; 1448 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00029	8b 45 fc	 mov	 eax, DWORD PTR __Head$[ebp]
  0002c	ff 70 04	 push	 DWORD PTR [eax+4]
  0002f	ff 75 e8	 push	 DWORD PTR $T1[ebp]
  00032	8b 4d f8	 mov	 ecx, DWORD PTR __Scary$[ebp]
  00035	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU?$_Tree_node@PAVCFlyTarget@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Erase_tree<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >

; 1449 :         _Head->_Parent  = _Head;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR __Head$[ebp]
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __Head$[ebp]
  00040	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1450 :         _Head->_Left    = _Head;

  00043	8b 45 fc	 mov	 eax, DWORD PTR __Head$[ebp]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR __Head$[ebp]
  00049	89 08		 mov	 DWORD PTR [eax], ecx

; 1451 :         _Head->_Right   = _Head;

  0004b	8b 45 fc	 mov	 eax, DWORD PTR __Head$[ebp]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __Head$[ebp]
  00051	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1452 :         _Scary->_Mysize = 0;

  00054	8b 45 f8	 mov	 eax, DWORD PTR __Scary$[ebp]
  00057	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 1453 :     }

  0005b	c9		 leave
  0005c	c3		 ret	 0
?clear@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::clear
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z
_TEXT	SEGMENT
__Where$ = -32						; size = 8
__Num$ = -24						; size = 4
__Pnode$ = -20						; size = 4
__Pnode$ = -16						; size = 4
_this$ = -12						; size = 4
__First$ = -8						; size = 4
__Last$ = -4						; size = 4
__Keyval$ = 8						; size = 4
?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z PROC ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::erase, COMDAT
; _this$ = ecx

; 1435 :     size_type erase(const key_type& _Keyval) noexcept(noexcept(_Eqrange(_Keyval))) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1436 :         const auto _Where = _Eqrange(_Keyval);

  00009	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
  0000c	8d 45 e0	 lea	 eax, DWORD PTR __Where$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Eqrange@PAVCFlyTarget@@@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@IBE?AU?$pair@PAU?$_Tree_node@PAVCFlyTarget@@PAX@std@@PAU12@@1@ABQAVCFlyTarget@@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Eqrange<CFlyTarget *>

; 1437 :         const _Unchecked_const_iterator _First(_Where.first, nullptr);

  00018	8b 45 e0	 mov	 eax, DWORD PTR __Where$[ebp]
  0001b	89 45 f0	 mov	 DWORD PTR __Pnode$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001e	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR __First$[ebp], eax

; 1438 :         const _Unchecked_const_iterator _Last(_Where.second, nullptr);

  00024	8b 45 e4	 mov	 eax, DWORD PTR __Where$[ebp+4]
  00027	89 45 ec	 mov	 DWORD PTR __Pnode$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002d	89 45 fc	 mov	 DWORD PTR __Last$[ebp], eax

; 1439 :         const auto _Num = static_cast<size_type>(_STD distance(_First, _Last));

  00030	ff 75 fc	 push	 DWORD PTR __Last$[ebp]
  00033	ff 75 f8	 push	 DWORD PTR __First$[ebp]
  00036	e8 00 00 00 00	 call	 ??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAHV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@0@0@Z ; std::distance<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0> >
  0003b	59		 pop	 ecx
  0003c	59		 pop	 ecx
  0003d	89 45 e8	 mov	 DWORD PTR __Num$[ebp], eax

; 1440 :         _Erase_unchecked(_First, _Last);

  00040	ff 75 fc	 push	 DWORD PTR __Last$[ebp]
  00043	ff 75 f8	 push	 DWORD PTR __First$[ebp]
  00046	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Erase_unchecked@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@0@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Erase_unchecked

; 1441 :         return _Num;

  0004e	8b 45 e8	 mov	 eax, DWORD PTR __Num$[ebp]

; 1442 :     }

  00051	c9		 leave
  00052	c2 04 00	 ret	 4
?erase@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEIABQAVCFlyTarget@@@Z ENDP ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::erase
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Erase_unchecked@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 4
$T2 = -44						; size = 4
__Tmp$3 = -40						; size = 4
__Begin$ = -36						; size = 4
__Pnode$ = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
tv145 = -20						; size = 4
tv139 = -16						; size = 4
tv93 = -12						; size = 4
_this$ = -8						; size = 4
$T6 = -3						; size = 1
$T7 = -2						; size = 1
$T8 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Erase_unchecked@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@0@Z PROC ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Erase_unchecked, COMDAT
; _this$ = ecx

; 1395 :     _Nodeptr _Erase_unchecked(_Unchecked_const_iterator _First, _Unchecked_const_iterator _Last) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  00012	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax

; 1259 :         return _Unchecked_iterator(_Get_scary()->_Myhead->_Left, nullptr);

  00015	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  00018	8b 00		 mov	 eax, DWORD PTR [eax]
  0001a	8b 00		 mov	 eax, DWORD PTR [eax]
  0001c	89 45 e0	 mov	 DWORD PTR __Pnode$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001f	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00022	89 45 dc	 mov	 DWORD PTR __Begin$[ebp], eax

; 98   :         return _Ptr == _Right._Ptr;

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	3b 45 dc	 cmp	 eax, DWORD PTR __Begin$[ebp]
  0002b	75 09		 jne	 SHORT $LN23@Erase_unch
  0002d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv93[ebp], 1
  00034	eb 04		 jmp	 SHORT $LN24@Erase_unch
$LN23@Erase_unch:
  00036	83 65 f4 00	 and	 DWORD PTR tv93[ebp], 0
$LN24@Erase_unch:
  0003a	8a 45 f4	 mov	 al, BYTE PTR tv93[ebp]
  0003d	88 45 ff	 mov	 BYTE PTR $T8[ebp], al

; 1396 :         const auto _Begin = _Unchecked_begin();
; 1397 :         if (_First == _Begin && _Last._Ptr->_Isnil) {

  00040	0f b6 45 ff	 movzx	 eax, BYTE PTR $T8[ebp]
  00044	85 c0		 test	 eax, eax
  00046	74 18		 je	 SHORT $LN2@Erase_unch
  00048	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0004b	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  0004f	85 c0		 test	 eax, eax
  00051	74 0d		 je	 SHORT $LN2@Erase_unch

; 1398 :             // erase all
; 1399 :             clear();

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::clear

; 1400 :             return _Last._Ptr;

  0005b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0005e	eb 6a		 jmp	 SHORT $LN5@Erase_unch
$LN2@Erase_unch:

; 98   :         return _Ptr == _Right._Ptr;

  00060	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00063	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00066	75 09		 jne	 SHORT $LN72@Erase_unch
  00068	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv139[ebp], 1
  0006f	eb 04		 jmp	 SHORT $LN73@Erase_unch
$LN72@Erase_unch:
  00071	83 65 f0 00	 and	 DWORD PTR tv139[ebp], 0
$LN73@Erase_unch:
  00075	8a 45 f0	 mov	 al, BYTE PTR tv139[ebp]
  00078	88 45 fe	 mov	 BYTE PTR $T7[ebp], al

; 102  :         return !(*this == _Right);

  0007b	0f b6 45 fe	 movzx	 eax, BYTE PTR $T7[ebp]
  0007f	85 c0		 test	 eax, eax
  00081	75 09		 jne	 SHORT $LN67@Erase_unch
  00083	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv145[ebp], 1
  0008a	eb 04		 jmp	 SHORT $LN68@Erase_unch
$LN67@Erase_unch:
  0008c	83 65 ec 00	 and	 DWORD PTR tv145[ebp], 0
$LN68@Erase_unch:
  00090	8a 45 ec	 mov	 al, BYTE PTR tv145[ebp]
  00093	88 45 fd	 mov	 BYTE PTR $T6[ebp], al

; 1401 :         }
; 1402 : 
; 1403 :         // partial erase, one at a time
; 1404 :         while (_First != _Last) {

  00096	0f b6 45 fd	 movzx	 eax, BYTE PTR $T6[ebp]
  0009a	85 c0		 test	 eax, eax
  0009c	74 29		 je	 SHORT $LN3@Erase_unch

; 67   :         _Tree_unchecked_const_iterator _Tmp = *this;

  0009e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000a1	89 45 d8	 mov	 DWORD PTR __Tmp$3[ebp], eax

; 68   :         ++*this;

  000a4	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  000a7	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++

; 69   :         return _Tmp;

  000ac	8b 45 d8	 mov	 eax, DWORD PTR __Tmp$3[ebp]
  000af	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  000b2	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  000b5	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax

; 1405 :             _Erase_unchecked(_First++);

  000b8	8b 45 d0	 mov	 eax, DWORD PTR $T1[ebp]
  000bb	ff 30		 push	 DWORD PTR [eax]
  000bd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	e8 00 00 00 00	 call	 ?_Erase_unchecked@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Erase_unchecked

; 1406 :         }

  000c5	eb 99		 jmp	 SHORT $LN2@Erase_unch
$LN3@Erase_unch:

; 1407 : 
; 1408 :         return _Last._Ptr;

  000c7	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
$LN5@Erase_unch:

; 1409 :     }

  000ca	c9		 leave
  000cb	c2 08 00	 ret	 8
?_Erase_unchecked@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@0@Z ENDP ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Erase_unchecked
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Erase_unchecked@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Scary$ = -20						; size = 4
$T4 = -16						; size = 4
__Successor$ = -12					; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Erase_unchecked@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Erase_unchecked, COMDAT
; _this$ = ecx

; 1385 :     _Nodeptr _Erase_unchecked(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]
  00012	89 45 ec	 mov	 DWORD PTR __Scary$[ebp], eax

; 1386 :         const auto _Scary                    = _Get_scary();
; 1387 :         _Unchecked_const_iterator _Successor = _Where;

  00015	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00018	89 45 f4	 mov	 DWORD PTR __Successor$[ebp], eax

; 1388 :         ++_Successor; // save successor iterator for return

  0001b	8d 4d f4	 lea	 ecx, DWORD PTR __Successor$[ebp]
  0001e	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >,std::_Iterator_base0>::operator++

; 1389 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00023	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  00026	8b 4d ec	 mov	 ecx, DWORD PTR __Scary$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@QAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<CFlyTarget *> >::_Extract
  0002e	89 45 f8	 mov	 DWORD PTR __Erasednode$[ebp], eax

; 2039 :         return _Mypair._Myval2._Get_first();

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00034	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2039 :         return _Mypair._Myval2._Get_first();

  00037	8b 45 e8	 mov	 eax, DWORD PTR $T3[ebp]
  0003a	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax

; 379  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  0003d	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00040	83 c0 10	 add	 eax, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00043	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 380  :         _Freenode0(_Al, _Ptr);

  00046	ff 75 f8	 push	 DWORD PTR __Erasednode$[ebp]
  00049	ff 75 e4	 push	 DWORD PTR $T2[ebp]
  0004c	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@std@@@?$_Tree_node@PAVCFlyTarget@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@PAVCFlyTarget@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<CFlyTarget *,void *>::_Freenode0<std::allocator<std::_Tree_node<CFlyTarget *,void *> > >
  00051	59		 pop	 ecx
  00052	59		 pop	 ecx

; 1390 :         _Scary->_Orphan_ptr(_Erasednode);
; 1391 :         _Node::_Freenode(_Getal(), _Erasednode); // delete erased node
; 1392 :         return _Successor._Ptr; // return successor nodeptr

  00053	8b 45 f4	 mov	 eax, DWORD PTR __Successor$[ebp]

; 1393 :     }

  00056	c9		 leave
  00057	c2 04 00	 ret	 4
?_Erase_unchecked@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@AAEPAU?$_Tree_node@PAVCFlyTarget@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@PAVCFlyTarget@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::_Erase_unchecked
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
tv68 = -12						; size = 4
$T6 = -8						; size = 4
$T7 = -4						; size = 4
?max_size@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::max_size, COMDAT
; _this$ = ecx

; 1310 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2043 :         return _Mypair._Myval2._Get_first();

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0000c	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2043 :         return _Mypair._Myval2._Get_first();

  0000f	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  00012	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00015	c7 45 fc cc cc
	cc 0c		 mov	 DWORD PTR $T7[ebp], 214748364 ; 0cccccccH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  0001c	c7 45 e8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1311 :         return (_STD min)(

  00023	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00026	89 45 f8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00029	8b 45 fc	 mov	 eax, DWORD PTR $T7[ebp]
  0002c	3b 45 f8	 cmp	 eax, DWORD PTR $T6[ebp]
  0002f	73 08		 jae	 SHORT $LN17@max_size
  00031	8d 45 fc	 lea	 eax, DWORD PTR $T7[ebp]
  00034	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
  00037	eb 06		 jmp	 SHORT $LN18@max_size
$LN17@max_size:
  00039	8d 45 f8	 lea	 eax, DWORD PTR $T6[ebp]
  0003c	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
$LN18@max_size:
  0003f	8b 45 f4	 mov	 eax, DWORD PTR tv68[ebp]
  00042	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
  00045	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00048	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1311 :         return (_STD min)(

  0004b	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  0004e	8b 00		 mov	 eax, DWORD PTR [eax]

; 1312 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1313 :     }

  00050	c9		 leave
  00051	c3		 ret	 0
?max_size@?$_Tree@V?$_Tset_traits@PAVCFlyTarget@@U?$less@PAVCFlyTarget@@@std@@V?$allocator@PAVCFlyTarget@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tset_traits<CFlyTarget *,std::less<CFlyTarget *>,std::allocator<CFlyTarget *>,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Block_size$ = -8					; size = 4
__Ptr_container$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00012	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00015	77 05		 ja	 SHORT $LN12@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  00017	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Allocate_m:

; 77   :         return ::operator new(_Bytes);

  0001c	ff 75 f8	 push	 DWORD PTR __Block_size$[ebp]
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	59		 pop	 ecx

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00025	89 45 fc	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00028	83 7d fc 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0002c	74 02		 je	 SHORT $LN7@Allocate_m
  0002e	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00035	33 c0		 xor	 eax, eax
  00037	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  00039	33 c0		 xor	 eax, eax
  0003b	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00040	83 c0 23	 add	 eax, 35			; 00000023H
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00046	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00049	6a 04		 push	 4
  0004b	58		 pop	 eax
  0004c	6b c0 ff	 imul	 eax, eax, -1
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00055	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0b		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00014	59		 pop	 ecx
  00015	eb 13		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00017	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001b	74 0b		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001d	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	59		 pop	 ecx

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00028	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 0f		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  0003a	ff 75 0c	 push	 DWORD PTR __Bytes$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 222  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	c9		 leave
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 414  : [[noreturn]] inline void _Throw_tree_length_error() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  :     _Xlength_error("map/set too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Throw_tree:

; 416  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	83 c0 23	 add	 eax, 35			; 00000023H
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f4	 mov	 DWORD PTR __Ptr_user$[ebp], eax

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	6a 04		 push	 4
  0001d	58		 pop	 eax
  0001e	6b c0 ff	 imul	 eax, eax, -1
  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00024	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00027	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	2b 45 f8	 sub	 eax, DWORD PTR __Ptr_container$[ebp]
  00039	89 45 fc	 mov	 DWORD PTR __Back_shift$[ebp], eax
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00040	72 08		 jb	 SHORT $LN7@Adjust_man
  00042	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00046	77 02		 ja	 SHORT $LN7@Adjust_man
  00048	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0004f	33 c0		 xor	 eax, eax
  00051	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00053	33 c0		 xor	 eax, eax
  00055	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 130  :     {

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 141  :     {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c9		 leave
  0003d	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 0b		 je	 SHORT $LN3@what
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00023	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00026	c9		 leave
  00027	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx

; 74   :     }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
