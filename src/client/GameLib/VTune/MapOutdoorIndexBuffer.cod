; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1TL
PUBLIC	?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1T
PUBLIC	?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1TR
PUBLIC	?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1L
PUBLIC	?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1R
PUBLIC	?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1BL
PUBLIC	?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1B
PUBLIC	?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1BR
PUBLIC	?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl1M
PUBLIC	?ADDLvl2TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2TL
PUBLIC	?ADDLvl2T@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2T
PUBLIC	?ADDLvl2TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2TR
PUBLIC	?ADDLvl2L@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2L
PUBLIC	?ADDLvl2R@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2R
PUBLIC	?ADDLvl2BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2BL
PUBLIC	?ADDLvl2B@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2B
PUBLIC	?ADDLvl2BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2BR
PUBLIC	?ADDLvl2M@CMapOutdoor@@IAEXPAGAAGABGABE@Z	; CMapOutdoor::ADDLvl2M
PUBLIC	?SetIndexBuffer@CMapOutdoor@@IAEXXZ		; CMapOutdoor::SetIndexBuffer
PUBLIC	??_C@_0DH@CONECCIF@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5I@ ; `string'
PUBLIC	??_C@_0DH@ILILMIED@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5I@ ; `string'
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z:PROC ; CGraphicIndexBuffer::Create
EXTRN	?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z:PROC	; CGraphicIndexBuffer::Lock
EXTRN	?Unlock@CGraphicIndexBuffer@@QAEXXZ:PROC	; CGraphicIndexBuffer::Unlock
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0DH@ILILMIED@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5I@
CONST	SEGMENT
??_C@_0DH@ILILMIED@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5I@ DB 'CMapOutd'
	DB	'oor::SetIndexBuffer() IndexBuffer Unlock Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CONECCIF@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5I@
CONST	SEGMENT
??_C@_0DH@CONECCIF@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5I@ DB 'CMapOutd'
	DB	'oor::SetIndexBuffer() IndexBuffer Create Error', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?SetIndexBuffer@CMapOutdoor@@IAEXXZ
_TEXT	SEGMENT
$T1 = -60						; size = 4
_pIndices$ = -56					; size = 4
$T2 = -52						; size = 4
$T3 = -48						; size = 4
$T4 = -44						; size = 4
_dwIndexNum$ = -40					; size = 4
_y$ = -36						; size = 4
_x$ = -32						; size = 4
_this$ = -28						; size = 4
_uci$ = -22						; size = 1
_ucNumLineWarp$ = -21					; size = 1
_count2$ = -20						; size = 6
_count$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
?SetIndexBuffer@CMapOutdoor@@IAEXXZ PROC		; CMapOutdoor::SetIndexBuffer, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 6    : 	void * pIndices;
; 7    : 	long x, y;
; 8    : 	
; 9    : 	DWORD dwIndexNum = TERRAIN_PATCHSIZE * TERRAIN_PATCHSIZE * 4;

  00014	c7 45 d8 00 04
	00 00		 mov	 DWORD PTR _dwIndexNum$[ebp], 1024 ; 00000400H

; 10   : 
; 11   : #ifdef WORLD_EDITOR
; 12   : 	m_pwIndices = new WORD[dwIndexNum];
; 13   : 	if (!m_pwIndices)
; 14   : 		TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer is NULL");
; 15   : 
; 16   : 	memset(m_pwIndices, 0, sizeof(WORD) * dwIndexNum);
; 17   : 	if (!m_IndexBuffer.Create(dwIndexNum, D3DFMT_INDEX16))
; 18   : 		TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer Create Error");
; 19   : 	
; 20   : 	WORD count = 0;
; 21   : 	WORD count2 = 0;
; 22   : 	long ry = 0;
; 23   : 	
; 24   : 	BYTE ucNumLineWarp = TERRAIN_PATCHSIZE + 1;
; 25   : 	
; 26   : 	for (y = 0; y < TERRAIN_PATCHSIZE; y++)
; 27   : 	{
; 28   : 		if (ry % 2 == 0)
; 29   : 		{
; 30   : 			m_pwIndices[count++] = count2;
; 31   : 			m_pwIndices[count++] = count2+ucNumLineWarp;
; 32   : 		}
; 33   : 		else
; 34   : 		{
; 35   : 			m_pwIndices[count++] = count2+ucNumLineWarp;
; 36   : 			m_pwIndices[count++] = count2;
; 37   : 		}
; 38   : 		
; 39   : 		for (x = 0; x < TERRAIN_PATCHSIZE; x++)
; 40   : 		{
; 41   : 			if (ry % 2 == 1)
; 42   : 			{
; 43   : 				m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp-1);
; 44   : 				m_pwIndices[count++] = (WORD) (count2-1);
; 45   : 				count2 -= (short) 1;
; 46   : 			}
; 47   : 			else
; 48   : 			{
; 49   : 				m_pwIndices[count++] = (WORD) (count2+1);
; 50   : 				m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp+1);
; 51   : 				count2 += (short) 1;
; 52   : 			}
; 53   : 		}
; 54   : 		
; 55   : 		if (y < TERRAIN_PATCHSIZE-1)
; 56   : 		{
; 57   : 			m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp);
; 58   : 			m_pwIndices[count++] = (WORD) (count2+ucNumLineWarp);
; 59   : 			count2 += ucNumLineWarp;
; 60   : 		}
; 61   : 		ry++;
; 62   : 	}
; 63   : 	
; 64   : 	m_wNumIndices = count;
; 65   : 	if (!m_IndexBuffer.Lock((void **) &pIndices))
; 66   : 		TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer Unlock Error");
; 67   : 	memcpy(pIndices, m_pwIndices, count * sizeof(WORD));
; 68   : 	m_IndexBuffer.Unlock();
; 69   : 	
; 70   : 	delete [] m_pwIndices;
; 71   : 	m_pwIndices = NULL;
; 72   : #else
; 73   : 	WORD	count[TERRAINPATCH_LODMAX], count2[TERRAINPATCH_LODMAX];
; 74   : 	BYTE uci;
; 75   : 	for (uci = 0; uci < TERRAINPATCH_LODMAX; ++uci)

  0001b	c6 45 ea 00	 mov	 BYTE PTR _uci$[ebp], 0
  0001f	eb 08		 jmp	 SHORT $LN4@SetIndexBu
$LN2@SetIndexBu:
  00021	8a 45 ea	 mov	 al, BYTE PTR _uci$[ebp]
  00024	04 01		 add	 al, 1
  00026	88 45 ea	 mov	 BYTE PTR _uci$[ebp], al
$LN4@SetIndexBu:
  00029	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  0002d	83 f8 03	 cmp	 eax, 3
  00030	0f 8d bc 00 00
	00		 jge	 $LN3@SetIndexBu

; 76   : 	{		
; 77   : 		m_pwaIndices[uci] = new WORD[dwIndexNum];

  00036	33 c9		 xor	 ecx, ecx
  00038	8b 45 d8	 mov	 eax, DWORD PTR _dwIndexNum$[ebp]
  0003b	6a 02		 push	 2
  0003d	5a		 pop	 edx
  0003e	f7 e2		 mul	 edx
  00040	0f 90 c1	 seto	 cl
  00043	f7 d9		 neg	 ecx
  00045	0b c8		 or	 ecx, eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0004d	59		 pop	 ecx
  0004e	89 45 cc	 mov	 DWORD PTR $T2[ebp], eax
  00051	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  00055	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	8b 55 cc	 mov	 edx, DWORD PTR $T2[ebp]
  0005b	89 94 81 90 00
	00 00		 mov	 DWORD PTR [ecx+eax*4+144], edx

; 78   : 		memset(m_pwaIndices[uci], 0, sizeof(WORD) * dwIndexNum);

  00062	8b 45 d8	 mov	 eax, DWORD PTR _dwIndexNum$[ebp]
  00065	d1 e0		 shl	 eax, 1
  00067	50		 push	 eax
  00068	6a 00		 push	 0
  0006a	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  0006e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	ff b4 81 90 00
	00 00		 push	 DWORD PTR [ecx+eax*4+144]
  00078	e8 00 00 00 00	 call	 _memset
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 79   : 		count[uci] = 0;

  00080	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  00084	d1 e0		 shl	 eax, 1
  00086	89 45 d4	 mov	 DWORD PTR $T4[ebp], eax
  00089	83 7d d4 06	 cmp	 DWORD PTR $T4[ebp], 6
  0008d	73 02		 jae	 SHORT $LN60@SetIndexBu
  0008f	eb 05		 jmp	 SHORT $LN61@SetIndexBu
$LN60@SetIndexBu:
  00091	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN61@SetIndexBu:
  00096	33 c0		 xor	 eax, eax
  00098	8b 4d d4	 mov	 ecx, DWORD PTR $T4[ebp]
  0009b	66 89 44 0d f4	 mov	 WORD PTR _count$[ebp+ecx], ax

; 80   : 		count2[uci] = 0;

  000a0	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  000a4	d1 e0		 shl	 eax, 1
  000a6	89 45 d0	 mov	 DWORD PTR $T3[ebp], eax
  000a9	83 7d d0 06	 cmp	 DWORD PTR $T3[ebp], 6
  000ad	73 02		 jae	 SHORT $LN62@SetIndexBu
  000af	eb 05		 jmp	 SHORT $LN63@SetIndexBu
$LN62@SetIndexBu:
  000b1	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN63@SetIndexBu:
  000b6	33 c0		 xor	 eax, eax
  000b8	8b 4d d0	 mov	 ecx, DWORD PTR $T3[ebp]
  000bb	66 89 44 0d ec	 mov	 WORD PTR _count2$[ebp+ecx], ax

; 81   : 		if ( !m_IndexBuffer[uci].Create(dwIndexNum, D3DFMT_INDEX16) )

  000c0	6a 65		 push	 101			; 00000065H
  000c2	ff 75 d8	 push	 DWORD PTR _dwIndexNum$[ebp]
  000c5	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  000c9	6b c0 14	 imul	 eax, eax, 20
  000cc	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000cf	8d 8c 01 9c 00
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+156]
  000d6	e8 00 00 00 00	 call	 ?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z ; CGraphicIndexBuffer::Create
  000db	0f b6 c0	 movzx	 eax, al
  000de	85 c0		 test	 eax, eax
  000e0	75 0b		 jne	 SHORT $LN14@SetIndexBu

; 82   : 			TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer Create Error");

  000e2	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@CONECCIF@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5I@
  000e7	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000ec	59		 pop	 ecx
$LN14@SetIndexBu:

; 83   : 	}

  000ed	e9 2f ff ff ff	 jmp	 $LN2@SetIndexBu
$LN3@SetIndexBu:

; 84   : 
; 85   : 	BYTE ucNumLineWarp = TERRAIN_PATCHSIZE + 1;

  000f2	c6 45 eb 11	 mov	 BYTE PTR _ucNumLineWarp$[ebp], 17 ; 00000011H

; 86   : 	
; 87   : 	for (y = 0; y < TERRAIN_PATCHSIZE; y++)

  000f6	83 65 dc 00	 and	 DWORD PTR _y$[ebp], 0
  000fa	eb 07		 jmp	 SHORT $LN7@SetIndexBu
$LN5@SetIndexBu:
  000fc	8b 45 dc	 mov	 eax, DWORD PTR _y$[ebp]
  000ff	40		 inc	 eax
  00100	89 45 dc	 mov	 DWORD PTR _y$[ebp], eax
$LN7@SetIndexBu:
  00103	83 7d dc 10	 cmp	 DWORD PTR _y$[ebp], 16	; 00000010H
  00107	0f 8d 64 08 00
	00		 jge	 $LN6@SetIndexBu

; 88   : 	{
; 89   : 		if (y%2 == 0)

  0010d	8b 45 dc	 mov	 eax, DWORD PTR _y$[ebp]
  00110	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00115	79 05		 jns	 SHORT $LN64@SetIndexBu
  00117	48		 dec	 eax
  00118	83 c8 fe	 or	 eax, -2			; fffffffeH
  0011b	40		 inc	 eax
$LN64@SetIndexBu:
  0011c	85 c0		 test	 eax, eax
  0011e	0f 85 93 00 00
	00		 jne	 $LN15@SetIndexBu

; 90   : 		{
; 91   : 			m_pwaIndices[0][(count[0])++] = count2[0];

  00124	6a 02		 push	 2
  00126	58		 pop	 eax
  00127	6b c0 00	 imul	 eax, eax, 0
  0012a	6a 04		 push	 4
  0012c	59		 pop	 ecx
  0012d	6b c9 00	 imul	 ecx, ecx, 0
  00130	6a 02		 push	 2
  00132	5a		 pop	 edx
  00133	6b d2 00	 imul	 edx, edx, 0
  00136	0f b7 54 15 f4	 movzx	 edx, WORD PTR _count$[ebp+edx]
  0013b	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  0013e	8b 8c 0e 90 00
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+144]
  00145	66 8b 44 05 ec	 mov	 ax, WORD PTR _count2$[ebp+eax]
  0014a	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  0014e	6a 02		 push	 2
  00150	58		 pop	 eax
  00151	6b c0 00	 imul	 eax, eax, 0
  00154	66 8b 44 05 f4	 mov	 ax, WORD PTR _count$[ebp+eax]
  00159	66 83 c0 01	 add	 ax, 1
  0015d	6a 02		 push	 2
  0015f	59		 pop	 ecx
  00160	6b c9 00	 imul	 ecx, ecx, 0
  00163	66 89 44 0d f4	 mov	 WORD PTR _count$[ebp+ecx], ax

; 92   : 			m_pwaIndices[0][(count[0])++] = count2[0]+ucNumLineWarp;

  00168	6a 02		 push	 2
  0016a	58		 pop	 eax
  0016b	6b c0 00	 imul	 eax, eax, 0
  0016e	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  00173	0f b6 4d eb	 movzx	 ecx, BYTE PTR _ucNumLineWarp$[ebp]
  00177	03 c1		 add	 eax, ecx
  00179	6a 04		 push	 4
  0017b	59		 pop	 ecx
  0017c	6b c9 00	 imul	 ecx, ecx, 0
  0017f	6a 02		 push	 2
  00181	5a		 pop	 edx
  00182	6b d2 00	 imul	 edx, edx, 0
  00185	0f b7 54 15 f4	 movzx	 edx, WORD PTR _count$[ebp+edx]
  0018a	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  0018d	8b 8c 0e 90 00
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+144]
  00194	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00198	6a 02		 push	 2
  0019a	58		 pop	 eax
  0019b	6b c0 00	 imul	 eax, eax, 0
  0019e	66 8b 44 05 f4	 mov	 ax, WORD PTR _count$[ebp+eax]
  001a3	66 83 c0 01	 add	 ax, 1
  001a7	6a 02		 push	 2
  001a9	59		 pop	 ecx
  001aa	6b c9 00	 imul	 ecx, ecx, 0
  001ad	66 89 44 0d f4	 mov	 WORD PTR _count$[ebp+ecx], ax

; 93   : 		}

  001b2	e9 8e 00 00 00	 jmp	 $LN16@SetIndexBu
$LN15@SetIndexBu:

; 94   : 		else
; 95   : 		{
; 96   : 			m_pwaIndices[0][(count[0])++] = count2[0]+ucNumLineWarp;

  001b7	6a 02		 push	 2
  001b9	58		 pop	 eax
  001ba	6b c0 00	 imul	 eax, eax, 0
  001bd	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  001c2	0f b6 4d eb	 movzx	 ecx, BYTE PTR _ucNumLineWarp$[ebp]
  001c6	03 c1		 add	 eax, ecx
  001c8	6a 04		 push	 4
  001ca	59		 pop	 ecx
  001cb	6b c9 00	 imul	 ecx, ecx, 0
  001ce	6a 02		 push	 2
  001d0	5a		 pop	 edx
  001d1	6b d2 00	 imul	 edx, edx, 0
  001d4	0f b7 54 15 f4	 movzx	 edx, WORD PTR _count$[ebp+edx]
  001d9	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  001dc	8b 8c 0e 90 00
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+144]
  001e3	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  001e7	6a 02		 push	 2
  001e9	58		 pop	 eax
  001ea	6b c0 00	 imul	 eax, eax, 0
  001ed	66 8b 44 05 f4	 mov	 ax, WORD PTR _count$[ebp+eax]
  001f2	66 83 c0 01	 add	 ax, 1
  001f6	6a 02		 push	 2
  001f8	59		 pop	 ecx
  001f9	6b c9 00	 imul	 ecx, ecx, 0
  001fc	66 89 44 0d f4	 mov	 WORD PTR _count$[ebp+ecx], ax

; 97   : 			m_pwaIndices[0][(count[0])++] = count2[0];

  00201	6a 02		 push	 2
  00203	58		 pop	 eax
  00204	6b c0 00	 imul	 eax, eax, 0
  00207	6a 04		 push	 4
  00209	59		 pop	 ecx
  0020a	6b c9 00	 imul	 ecx, ecx, 0
  0020d	6a 02		 push	 2
  0020f	5a		 pop	 edx
  00210	6b d2 00	 imul	 edx, edx, 0
  00213	0f b7 54 15 f4	 movzx	 edx, WORD PTR _count$[ebp+edx]
  00218	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  0021b	8b 8c 0e 90 00
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+144]
  00222	66 8b 44 05 ec	 mov	 ax, WORD PTR _count2$[ebp+eax]
  00227	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  0022b	6a 02		 push	 2
  0022d	58		 pop	 eax
  0022e	6b c0 00	 imul	 eax, eax, 0
  00231	66 8b 44 05 f4	 mov	 ax, WORD PTR _count$[ebp+eax]
  00236	66 83 c0 01	 add	 ax, 1
  0023a	6a 02		 push	 2
  0023c	59		 pop	 ecx
  0023d	6b c9 00	 imul	 ecx, ecx, 0
  00240	66 89 44 0d f4	 mov	 WORD PTR _count$[ebp+ecx], ax
$LN16@SetIndexBu:

; 98   : 		}
; 99   : 		
; 100  : 		for (x = 0; x < TERRAIN_PATCHSIZE; x++)

  00245	83 65 e0 00	 and	 DWORD PTR _x$[ebp], 0
  00249	eb 07		 jmp	 SHORT $LN10@SetIndexBu
$LN8@SetIndexBu:
  0024b	8b 45 e0	 mov	 eax, DWORD PTR _x$[ebp]
  0024e	40		 inc	 eax
  0024f	89 45 e0	 mov	 DWORD PTR _x$[ebp], eax
$LN10@SetIndexBu:
  00252	83 7d e0 10	 cmp	 DWORD PTR _x$[ebp], 16	; 00000010H
  00256	0f 8d 01 06 00
	00		 jge	 $LN9@SetIndexBu

; 101  : 		{
; 102  : 			if (y%2 == 0)

  0025c	8b 45 dc	 mov	 eax, DWORD PTR _y$[ebp]
  0025f	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00264	79 05		 jns	 SHORT $LN65@SetIndexBu
  00266	48		 dec	 eax
  00267	83 c8 fe	 or	 eax, -2			; fffffffeH
  0026a	40		 inc	 eax
$LN65@SetIndexBu:
  0026b	85 c0		 test	 eax, eax
  0026d	0f 85 ad 00 00
	00		 jne	 $LN17@SetIndexBu

; 103  : 			{
; 104  : 				m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]+1);

  00273	6a 02		 push	 2
  00275	58		 pop	 eax
  00276	6b c0 00	 imul	 eax, eax, 0
  00279	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  0027e	40		 inc	 eax
  0027f	6a 04		 push	 4
  00281	59		 pop	 ecx
  00282	6b c9 00	 imul	 ecx, ecx, 0
  00285	6a 02		 push	 2
  00287	5a		 pop	 edx
  00288	6b d2 00	 imul	 edx, edx, 0
  0028b	0f b7 54 15 f4	 movzx	 edx, WORD PTR _count$[ebp+edx]
  00290	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  00293	8b 8c 0e 90 00
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+144]
  0029a	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  0029e	6a 02		 push	 2
  002a0	58		 pop	 eax
  002a1	6b c0 00	 imul	 eax, eax, 0
  002a4	66 8b 44 05 f4	 mov	 ax, WORD PTR _count$[ebp+eax]
  002a9	66 83 c0 01	 add	 ax, 1
  002ad	6a 02		 push	 2
  002af	59		 pop	 ecx
  002b0	6b c9 00	 imul	 ecx, ecx, 0
  002b3	66 89 44 0d f4	 mov	 WORD PTR _count$[ebp+ecx], ax

; 105  : 				m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]+ucNumLineWarp+1);

  002b8	6a 02		 push	 2
  002ba	58		 pop	 eax
  002bb	6b c0 00	 imul	 eax, eax, 0
  002be	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  002c3	0f b6 4d eb	 movzx	 ecx, BYTE PTR _ucNumLineWarp$[ebp]
  002c7	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  002cb	6a 04		 push	 4
  002cd	59		 pop	 ecx
  002ce	6b c9 00	 imul	 ecx, ecx, 0
  002d1	6a 02		 push	 2
  002d3	5a		 pop	 edx
  002d4	6b d2 00	 imul	 edx, edx, 0
  002d7	0f b7 54 15 f4	 movzx	 edx, WORD PTR _count$[ebp+edx]
  002dc	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  002df	8b 8c 0e 90 00
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+144]
  002e6	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  002ea	6a 02		 push	 2
  002ec	58		 pop	 eax
  002ed	6b c0 00	 imul	 eax, eax, 0
  002f0	66 8b 44 05 f4	 mov	 ax, WORD PTR _count$[ebp+eax]
  002f5	66 83 c0 01	 add	 ax, 1
  002f9	6a 02		 push	 2
  002fb	59		 pop	 ecx
  002fc	6b c9 00	 imul	 ecx, ecx, 0
  002ff	66 89 44 0d f4	 mov	 WORD PTR _count$[ebp+ecx], ax

; 106  : 				count2[0] += (short) 1;

  00304	6a 02		 push	 2
  00306	58		 pop	 eax
  00307	6b c0 00	 imul	 eax, eax, 0
  0030a	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  0030f	40		 inc	 eax
  00310	6a 02		 push	 2
  00312	59		 pop	 ecx
  00313	6b c9 00	 imul	 ecx, ecx, 0
  00316	66 89 44 0d ec	 mov	 WORD PTR _count2$[ebp+ecx], ax

; 107  : 			}

  0031b	e9 a8 00 00 00	 jmp	 $LN18@SetIndexBu
$LN17@SetIndexBu:

; 108  : 			else
; 109  : 			{
; 110  : 				m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]+ucNumLineWarp-1);

  00320	6a 02		 push	 2
  00322	58		 pop	 eax
  00323	6b c0 00	 imul	 eax, eax, 0
  00326	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  0032b	0f b6 4d eb	 movzx	 ecx, BYTE PTR _ucNumLineWarp$[ebp]
  0032f	8d 44 08 ff	 lea	 eax, DWORD PTR [eax+ecx-1]
  00333	6a 04		 push	 4
  00335	59		 pop	 ecx
  00336	6b c9 00	 imul	 ecx, ecx, 0
  00339	6a 02		 push	 2
  0033b	5a		 pop	 edx
  0033c	6b d2 00	 imul	 edx, edx, 0
  0033f	0f b7 54 15 f4	 movzx	 edx, WORD PTR _count$[ebp+edx]
  00344	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  00347	8b 8c 0e 90 00
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+144]
  0034e	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00352	6a 02		 push	 2
  00354	58		 pop	 eax
  00355	6b c0 00	 imul	 eax, eax, 0
  00358	66 8b 44 05 f4	 mov	 ax, WORD PTR _count$[ebp+eax]
  0035d	66 83 c0 01	 add	 ax, 1
  00361	6a 02		 push	 2
  00363	59		 pop	 ecx
  00364	6b c9 00	 imul	 ecx, ecx, 0
  00367	66 89 44 0d f4	 mov	 WORD PTR _count$[ebp+ecx], ax

; 111  : 				m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]-1);

  0036c	6a 02		 push	 2
  0036e	58		 pop	 eax
  0036f	6b c0 00	 imul	 eax, eax, 0
  00372	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  00377	48		 dec	 eax
  00378	6a 04		 push	 4
  0037a	59		 pop	 ecx
  0037b	6b c9 00	 imul	 ecx, ecx, 0
  0037e	6a 02		 push	 2
  00380	5a		 pop	 edx
  00381	6b d2 00	 imul	 edx, edx, 0
  00384	0f b7 54 15 f4	 movzx	 edx, WORD PTR _count$[ebp+edx]
  00389	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  0038c	8b 8c 0e 90 00
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+144]
  00393	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00397	6a 02		 push	 2
  00399	58		 pop	 eax
  0039a	6b c0 00	 imul	 eax, eax, 0
  0039d	66 8b 44 05 f4	 mov	 ax, WORD PTR _count$[ebp+eax]
  003a2	66 83 c0 01	 add	 ax, 1
  003a6	6a 02		 push	 2
  003a8	59		 pop	 ecx
  003a9	6b c9 00	 imul	 ecx, ecx, 0
  003ac	66 89 44 0d f4	 mov	 WORD PTR _count$[ebp+ecx], ax

; 112  : 				count2[0] -= (short) 1;

  003b1	6a 02		 push	 2
  003b3	58		 pop	 eax
  003b4	6b c0 00	 imul	 eax, eax, 0
  003b7	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  003bc	48		 dec	 eax
  003bd	6a 02		 push	 2
  003bf	59		 pop	 ecx
  003c0	6b c9 00	 imul	 ecx, ecx, 0
  003c3	66 89 44 0d ec	 mov	 WORD PTR _count2$[ebp+ecx], ax
$LN18@SetIndexBu:

; 113  : 			}
; 114  : 			
; 115  : 			if (0 == x%2)

  003c8	8b 45 e0	 mov	 eax, DWORD PTR _x$[ebp]
  003cb	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  003d0	79 05		 jns	 SHORT $LN66@SetIndexBu
  003d2	48		 dec	 eax
  003d3	83 c8 fe	 or	 eax, -2			; fffffffeH
  003d6	40		 inc	 eax
$LN66@SetIndexBu:
  003d7	85 c0		 test	 eax, eax
  003d9	0f 85 3f 02 00
	00		 jne	 $LN19@SetIndexBu

; 116  : 			{
; 117  : 				if (0 == y)

  003df	83 7d dc 00	 cmp	 DWORD PTR _y$[ebp], 0
  003e3	0f 85 ab 00 00
	00		 jne	 $LN20@SetIndexBu

; 118  : 				{
; 119  : 					if (0 == x)

  003e9	83 7d e0 00	 cmp	 DWORD PTR _x$[ebp], 0
  003ed	75 34		 jne	 SHORT $LN22@SetIndexBu

; 120  : 						ADDLvl1TL(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  003ef	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  003f2	50		 push	 eax
  003f3	6a 02		 push	 2
  003f5	58		 pop	 eax
  003f6	c1 e0 00	 shl	 eax, 0
  003f9	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  003fd	50		 push	 eax
  003fe	6a 02		 push	 2
  00400	58		 pop	 eax
  00401	c1 e0 00	 shl	 eax, 0
  00404	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  00408	50		 push	 eax
  00409	6a 04		 push	 4
  0040b	58		 pop	 eax
  0040c	c1 e0 00	 shl	 eax, 0
  0040f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00412	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  00419	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0041c	e8 00 00 00 00	 call	 ?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1TL
  00421	eb 6c		 jmp	 SHORT $LN23@SetIndexBu
$LN22@SetIndexBu:

; 121  : 					else if ((TERRAIN_PATCHSIZE - 2) == x)

  00423	83 7d e0 0e	 cmp	 DWORD PTR _x$[ebp], 14	; 0000000eH
  00427	75 34		 jne	 SHORT $LN24@SetIndexBu

; 122  : 						ADDLvl1TR(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  00429	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  0042c	50		 push	 eax
  0042d	6a 02		 push	 2
  0042f	58		 pop	 eax
  00430	c1 e0 00	 shl	 eax, 0
  00433	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  00437	50		 push	 eax
  00438	6a 02		 push	 2
  0043a	58		 pop	 eax
  0043b	c1 e0 00	 shl	 eax, 0
  0043e	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  00442	50		 push	 eax
  00443	6a 04		 push	 4
  00445	58		 pop	 eax
  00446	c1 e0 00	 shl	 eax, 0
  00449	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0044c	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  00453	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00456	e8 00 00 00 00	 call	 ?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1TR
  0045b	eb 32		 jmp	 SHORT $LN23@SetIndexBu
$LN24@SetIndexBu:

; 123  : 					else
; 124  : 						ADDLvl1T(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  0045d	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  00460	50		 push	 eax
  00461	6a 02		 push	 2
  00463	58		 pop	 eax
  00464	c1 e0 00	 shl	 eax, 0
  00467	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  0046b	50		 push	 eax
  0046c	6a 02		 push	 2
  0046e	58		 pop	 eax
  0046f	c1 e0 00	 shl	 eax, 0
  00472	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  00476	50		 push	 eax
  00477	6a 04		 push	 4
  00479	58		 pop	 eax
  0047a	c1 e0 00	 shl	 eax, 0
  0047d	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00480	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  00487	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0048a	e8 00 00 00 00	 call	 ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1T
$LN23@SetIndexBu:

; 125  : 				}

  0048f	e9 72 01 00 00	 jmp	 $LN21@SetIndexBu
$LN20@SetIndexBu:

; 126  : 				else if ((TERRAIN_PATCHSIZE - 2) == y)

  00494	83 7d dc 0e	 cmp	 DWORD PTR _y$[ebp], 14	; 0000000eH
  00498	0f 85 ab 00 00
	00		 jne	 $LN26@SetIndexBu

; 127  : 				{
; 128  : 					if (0 == x)

  0049e	83 7d e0 00	 cmp	 DWORD PTR _x$[ebp], 0
  004a2	75 34		 jne	 SHORT $LN28@SetIndexBu

; 129  : 						ADDLvl1BL(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  004a4	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  004a7	50		 push	 eax
  004a8	6a 02		 push	 2
  004aa	58		 pop	 eax
  004ab	c1 e0 00	 shl	 eax, 0
  004ae	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  004b2	50		 push	 eax
  004b3	6a 02		 push	 2
  004b5	58		 pop	 eax
  004b6	c1 e0 00	 shl	 eax, 0
  004b9	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  004bd	50		 push	 eax
  004be	6a 04		 push	 4
  004c0	58		 pop	 eax
  004c1	c1 e0 00	 shl	 eax, 0
  004c4	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  004c7	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  004ce	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  004d1	e8 00 00 00 00	 call	 ?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1BL
  004d6	eb 6c		 jmp	 SHORT $LN29@SetIndexBu
$LN28@SetIndexBu:

; 130  : 					else if ((TERRAIN_PATCHSIZE - 2) == x)

  004d8	83 7d e0 0e	 cmp	 DWORD PTR _x$[ebp], 14	; 0000000eH
  004dc	75 34		 jne	 SHORT $LN30@SetIndexBu

; 131  : 						ADDLvl1BR(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  004de	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  004e1	50		 push	 eax
  004e2	6a 02		 push	 2
  004e4	58		 pop	 eax
  004e5	c1 e0 00	 shl	 eax, 0
  004e8	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  004ec	50		 push	 eax
  004ed	6a 02		 push	 2
  004ef	58		 pop	 eax
  004f0	c1 e0 00	 shl	 eax, 0
  004f3	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  004f7	50		 push	 eax
  004f8	6a 04		 push	 4
  004fa	58		 pop	 eax
  004fb	c1 e0 00	 shl	 eax, 0
  004fe	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00501	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  00508	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0050b	e8 00 00 00 00	 call	 ?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1BR
  00510	eb 32		 jmp	 SHORT $LN29@SetIndexBu
$LN30@SetIndexBu:

; 132  : 					else
; 133  : 						ADDLvl1B(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  00512	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  00515	50		 push	 eax
  00516	6a 02		 push	 2
  00518	58		 pop	 eax
  00519	c1 e0 00	 shl	 eax, 0
  0051c	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  00520	50		 push	 eax
  00521	6a 02		 push	 2
  00523	58		 pop	 eax
  00524	c1 e0 00	 shl	 eax, 0
  00527	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  0052b	50		 push	 eax
  0052c	6a 04		 push	 4
  0052e	58		 pop	 eax
  0052f	c1 e0 00	 shl	 eax, 0
  00532	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00535	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  0053c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0053f	e8 00 00 00 00	 call	 ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1B
$LN29@SetIndexBu:

; 134  : 				}

  00544	e9 bd 00 00 00	 jmp	 $LN21@SetIndexBu
$LN26@SetIndexBu:

; 135  : 				else if (0 == y%2)

  00549	8b 45 dc	 mov	 eax, DWORD PTR _y$[ebp]
  0054c	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00551	79 05		 jns	 SHORT $LN67@SetIndexBu
  00553	48		 dec	 eax
  00554	83 c8 fe	 or	 eax, -2			; fffffffeH
  00557	40		 inc	 eax
$LN67@SetIndexBu:
  00558	85 c0		 test	 eax, eax
  0055a	0f 85 a6 00 00
	00		 jne	 $LN21@SetIndexBu

; 136  : 				{
; 137  : 					if (0 == x)

  00560	83 7d e0 00	 cmp	 DWORD PTR _x$[ebp], 0
  00564	75 34		 jne	 SHORT $LN33@SetIndexBu

; 138  : 						ADDLvl1L(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  00566	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  00569	50		 push	 eax
  0056a	6a 02		 push	 2
  0056c	58		 pop	 eax
  0056d	c1 e0 00	 shl	 eax, 0
  00570	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  00574	50		 push	 eax
  00575	6a 02		 push	 2
  00577	58		 pop	 eax
  00578	c1 e0 00	 shl	 eax, 0
  0057b	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  0057f	50		 push	 eax
  00580	6a 04		 push	 4
  00582	58		 pop	 eax
  00583	c1 e0 00	 shl	 eax, 0
  00586	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00589	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  00590	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00593	e8 00 00 00 00	 call	 ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1L
  00598	eb 6c		 jmp	 SHORT $LN21@SetIndexBu
$LN33@SetIndexBu:

; 139  : 					else if ((TERRAIN_PATCHSIZE - 2) == x)

  0059a	83 7d e0 0e	 cmp	 DWORD PTR _x$[ebp], 14	; 0000000eH
  0059e	75 34		 jne	 SHORT $LN35@SetIndexBu

; 140  : 						ADDLvl1R(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  005a0	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  005a3	50		 push	 eax
  005a4	6a 02		 push	 2
  005a6	58		 pop	 eax
  005a7	c1 e0 00	 shl	 eax, 0
  005aa	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  005ae	50		 push	 eax
  005af	6a 02		 push	 2
  005b1	58		 pop	 eax
  005b2	c1 e0 00	 shl	 eax, 0
  005b5	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  005b9	50		 push	 eax
  005ba	6a 04		 push	 4
  005bc	58		 pop	 eax
  005bd	c1 e0 00	 shl	 eax, 0
  005c0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  005c3	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  005ca	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  005cd	e8 00 00 00 00	 call	 ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1R
  005d2	eb 32		 jmp	 SHORT $LN21@SetIndexBu
$LN35@SetIndexBu:

; 141  : 					else
; 142  : 						ADDLvl1M(m_pwaIndices[1], count[1], count2[1], ucNumLineWarp);

  005d4	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  005d7	50		 push	 eax
  005d8	6a 02		 push	 2
  005da	58		 pop	 eax
  005db	c1 e0 00	 shl	 eax, 0
  005de	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  005e2	50		 push	 eax
  005e3	6a 02		 push	 2
  005e5	58		 pop	 eax
  005e6	c1 e0 00	 shl	 eax, 0
  005e9	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  005ed	50		 push	 eax
  005ee	6a 04		 push	 4
  005f0	58		 pop	 eax
  005f1	c1 e0 00	 shl	 eax, 0
  005f4	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  005f7	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  005fe	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00601	e8 00 00 00 00	 call	 ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1M
$LN21@SetIndexBu:

; 143  : 				}
; 144  : 				count2[1] += 2;

  00606	6a 02		 push	 2
  00608	58		 pop	 eax
  00609	c1 e0 00	 shl	 eax, 0
  0060c	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  00611	40		 inc	 eax
  00612	40		 inc	 eax
  00613	6a 02		 push	 2
  00615	59		 pop	 ecx
  00616	c1 e1 00	 shl	 ecx, 0
  00619	66 89 44 0d ec	 mov	 WORD PTR _count2$[ebp+ecx], ax
$LN19@SetIndexBu:

; 145  : 			}
; 146  : 			
; 147  : 			if (0 == x%4)

  0061e	8b 45 e0	 mov	 eax, DWORD PTR _x$[ebp]
  00621	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00626	79 05		 jns	 SHORT $LN68@SetIndexBu
  00628	48		 dec	 eax
  00629	83 c8 fc	 or	 eax, -4			; fffffffcH
  0062c	40		 inc	 eax
$LN68@SetIndexBu:
  0062d	85 c0		 test	 eax, eax
  0062f	0f 85 23 02 00
	00		 jne	 $LN37@SetIndexBu

; 148  : 			{
; 149  : 				if (0 == y)

  00635	83 7d dc 00	 cmp	 DWORD PTR _y$[ebp], 0
  00639	0f 85 a2 00 00
	00		 jne	 $LN38@SetIndexBu

; 150  : 				{
; 151  : 					if (0 == x)

  0063f	83 7d e0 00	 cmp	 DWORD PTR _x$[ebp], 0
  00643	75 31		 jne	 SHORT $LN40@SetIndexBu

; 152  : 						ADDLvl2TL(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  00645	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  00648	50		 push	 eax
  00649	6a 02		 push	 2
  0064b	58		 pop	 eax
  0064c	d1 e0		 shl	 eax, 1
  0064e	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  00652	50		 push	 eax
  00653	6a 02		 push	 2
  00655	58		 pop	 eax
  00656	d1 e0		 shl	 eax, 1
  00658	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  0065c	50		 push	 eax
  0065d	6a 04		 push	 4
  0065f	58		 pop	 eax
  00660	d1 e0		 shl	 eax, 1
  00662	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00665	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  0066c	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0066f	e8 00 00 00 00	 call	 ?ADDLvl2TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2TL
  00674	eb 66		 jmp	 SHORT $LN41@SetIndexBu
$LN40@SetIndexBu:

; 153  : 					else if ((TERRAIN_PATCHSIZE - 4) == x)

  00676	83 7d e0 0c	 cmp	 DWORD PTR _x$[ebp], 12	; 0000000cH
  0067a	75 31		 jne	 SHORT $LN42@SetIndexBu

; 154  : 						ADDLvl2TR(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  0067c	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  0067f	50		 push	 eax
  00680	6a 02		 push	 2
  00682	58		 pop	 eax
  00683	d1 e0		 shl	 eax, 1
  00685	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  00689	50		 push	 eax
  0068a	6a 02		 push	 2
  0068c	58		 pop	 eax
  0068d	d1 e0		 shl	 eax, 1
  0068f	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  00693	50		 push	 eax
  00694	6a 04		 push	 4
  00696	58		 pop	 eax
  00697	d1 e0		 shl	 eax, 1
  00699	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0069c	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  006a3	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  006a6	e8 00 00 00 00	 call	 ?ADDLvl2TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2TR
  006ab	eb 2f		 jmp	 SHORT $LN41@SetIndexBu
$LN42@SetIndexBu:

; 155  : 					else
; 156  : 						ADDLvl2T(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  006ad	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  006b0	50		 push	 eax
  006b1	6a 02		 push	 2
  006b3	58		 pop	 eax
  006b4	d1 e0		 shl	 eax, 1
  006b6	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  006ba	50		 push	 eax
  006bb	6a 02		 push	 2
  006bd	58		 pop	 eax
  006be	d1 e0		 shl	 eax, 1
  006c0	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  006c4	50		 push	 eax
  006c5	6a 04		 push	 4
  006c7	58		 pop	 eax
  006c8	d1 e0		 shl	 eax, 1
  006ca	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  006cd	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  006d4	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  006d7	e8 00 00 00 00	 call	 ?ADDLvl2T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2T
$LN41@SetIndexBu:

; 157  : 				}

  006dc	e9 60 01 00 00	 jmp	 $LN39@SetIndexBu
$LN38@SetIndexBu:

; 158  : 				else if ((TERRAIN_PATCHSIZE - 4) == y)

  006e1	83 7d dc 0c	 cmp	 DWORD PTR _y$[ebp], 12	; 0000000cH
  006e5	0f 85 a2 00 00
	00		 jne	 $LN44@SetIndexBu

; 159  : 				{
; 160  : 					if (0 == x)

  006eb	83 7d e0 00	 cmp	 DWORD PTR _x$[ebp], 0
  006ef	75 31		 jne	 SHORT $LN46@SetIndexBu

; 161  : 						ADDLvl2BL(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  006f1	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  006f4	50		 push	 eax
  006f5	6a 02		 push	 2
  006f7	58		 pop	 eax
  006f8	d1 e0		 shl	 eax, 1
  006fa	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  006fe	50		 push	 eax
  006ff	6a 02		 push	 2
  00701	58		 pop	 eax
  00702	d1 e0		 shl	 eax, 1
  00704	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  00708	50		 push	 eax
  00709	6a 04		 push	 4
  0070b	58		 pop	 eax
  0070c	d1 e0		 shl	 eax, 1
  0070e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00711	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  00718	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0071b	e8 00 00 00 00	 call	 ?ADDLvl2BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2BL
  00720	eb 66		 jmp	 SHORT $LN47@SetIndexBu
$LN46@SetIndexBu:

; 162  : 					else if ((TERRAIN_PATCHSIZE - 4) == x)

  00722	83 7d e0 0c	 cmp	 DWORD PTR _x$[ebp], 12	; 0000000cH
  00726	75 31		 jne	 SHORT $LN48@SetIndexBu

; 163  : 						ADDLvl2BR(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  00728	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  0072b	50		 push	 eax
  0072c	6a 02		 push	 2
  0072e	58		 pop	 eax
  0072f	d1 e0		 shl	 eax, 1
  00731	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  00735	50		 push	 eax
  00736	6a 02		 push	 2
  00738	58		 pop	 eax
  00739	d1 e0		 shl	 eax, 1
  0073b	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  0073f	50		 push	 eax
  00740	6a 04		 push	 4
  00742	58		 pop	 eax
  00743	d1 e0		 shl	 eax, 1
  00745	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00748	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  0074f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00752	e8 00 00 00 00	 call	 ?ADDLvl2BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2BR
  00757	eb 2f		 jmp	 SHORT $LN47@SetIndexBu
$LN48@SetIndexBu:

; 164  : 					else
; 165  : 						ADDLvl2B(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  00759	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  0075c	50		 push	 eax
  0075d	6a 02		 push	 2
  0075f	58		 pop	 eax
  00760	d1 e0		 shl	 eax, 1
  00762	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  00766	50		 push	 eax
  00767	6a 02		 push	 2
  00769	58		 pop	 eax
  0076a	d1 e0		 shl	 eax, 1
  0076c	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  00770	50		 push	 eax
  00771	6a 04		 push	 4
  00773	58		 pop	 eax
  00774	d1 e0		 shl	 eax, 1
  00776	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00779	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  00780	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00783	e8 00 00 00 00	 call	 ?ADDLvl2B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2B
$LN47@SetIndexBu:

; 166  : 				}

  00788	e9 b4 00 00 00	 jmp	 $LN39@SetIndexBu
$LN44@SetIndexBu:

; 167  : 				else if (0 == y%4)

  0078d	8b 45 dc	 mov	 eax, DWORD PTR _y$[ebp]
  00790	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00795	79 05		 jns	 SHORT $LN69@SetIndexBu
  00797	48		 dec	 eax
  00798	83 c8 fc	 or	 eax, -4			; fffffffcH
  0079b	40		 inc	 eax
$LN69@SetIndexBu:
  0079c	85 c0		 test	 eax, eax
  0079e	0f 85 9d 00 00
	00		 jne	 $LN39@SetIndexBu

; 168  : 				{
; 169  : 					if (0 == x)

  007a4	83 7d e0 00	 cmp	 DWORD PTR _x$[ebp], 0
  007a8	75 31		 jne	 SHORT $LN51@SetIndexBu

; 170  : 						ADDLvl2L(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  007aa	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  007ad	50		 push	 eax
  007ae	6a 02		 push	 2
  007b0	58		 pop	 eax
  007b1	d1 e0		 shl	 eax, 1
  007b3	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  007b7	50		 push	 eax
  007b8	6a 02		 push	 2
  007ba	58		 pop	 eax
  007bb	d1 e0		 shl	 eax, 1
  007bd	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  007c1	50		 push	 eax
  007c2	6a 04		 push	 4
  007c4	58		 pop	 eax
  007c5	d1 e0		 shl	 eax, 1
  007c7	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  007ca	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  007d1	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  007d4	e8 00 00 00 00	 call	 ?ADDLvl2L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2L
  007d9	eb 66		 jmp	 SHORT $LN39@SetIndexBu
$LN51@SetIndexBu:

; 171  : 					else if ((TERRAIN_PATCHSIZE - 4) == x)

  007db	83 7d e0 0c	 cmp	 DWORD PTR _x$[ebp], 12	; 0000000cH
  007df	75 31		 jne	 SHORT $LN53@SetIndexBu

; 172  : 						ADDLvl2R(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  007e1	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  007e4	50		 push	 eax
  007e5	6a 02		 push	 2
  007e7	58		 pop	 eax
  007e8	d1 e0		 shl	 eax, 1
  007ea	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  007ee	50		 push	 eax
  007ef	6a 02		 push	 2
  007f1	58		 pop	 eax
  007f2	d1 e0		 shl	 eax, 1
  007f4	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  007f8	50		 push	 eax
  007f9	6a 04		 push	 4
  007fb	58		 pop	 eax
  007fc	d1 e0		 shl	 eax, 1
  007fe	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00801	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  00808	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0080b	e8 00 00 00 00	 call	 ?ADDLvl2R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2R
  00810	eb 2f		 jmp	 SHORT $LN39@SetIndexBu
$LN53@SetIndexBu:

; 173  : 					else
; 174  : 						ADDLvl2M(m_pwaIndices[2], count[2], count2[2], ucNumLineWarp);

  00812	8d 45 eb	 lea	 eax, DWORD PTR _ucNumLineWarp$[ebp]
  00815	50		 push	 eax
  00816	6a 02		 push	 2
  00818	58		 pop	 eax
  00819	d1 e0		 shl	 eax, 1
  0081b	8d 44 05 ec	 lea	 eax, DWORD PTR _count2$[ebp+eax]
  0081f	50		 push	 eax
  00820	6a 02		 push	 2
  00822	58		 pop	 eax
  00823	d1 e0		 shl	 eax, 1
  00825	8d 44 05 f4	 lea	 eax, DWORD PTR _count$[ebp+eax]
  00829	50		 push	 eax
  0082a	6a 04		 push	 4
  0082c	58		 pop	 eax
  0082d	d1 e0		 shl	 eax, 1
  0082f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00832	ff b4 01 90 00
	00 00		 push	 DWORD PTR [ecx+eax+144]
  00839	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0083c	e8 00 00 00 00	 call	 ?ADDLvl2M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl2M
$LN39@SetIndexBu:

; 175  : 				}
; 176  : 				count2[2] += 4;

  00841	6a 02		 push	 2
  00843	58		 pop	 eax
  00844	d1 e0		 shl	 eax, 1
  00846	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  0084b	83 c0 04	 add	 eax, 4
  0084e	6a 02		 push	 2
  00850	59		 pop	 ecx
  00851	d1 e1		 shl	 ecx, 1
  00853	66 89 44 0d ec	 mov	 WORD PTR _count2$[ebp+ecx], ax
$LN37@SetIndexBu:

; 177  : 			}
; 178  : 		}

  00858	e9 ee f9 ff ff	 jmp	 $LN8@SetIndexBu
$LN9@SetIndexBu:

; 179  : 		
; 180  : 		if (y < TERRAIN_PATCHSIZE-1)

  0085d	83 7d dc 0f	 cmp	 DWORD PTR _y$[ebp], 15	; 0000000fH
  00861	0f 8d 05 01 00
	00		 jge	 $LN55@SetIndexBu

; 181  : 		{
; 182  : 			m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]+ucNumLineWarp);

  00867	6a 02		 push	 2
  00869	58		 pop	 eax
  0086a	6b c0 00	 imul	 eax, eax, 0
  0086d	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  00872	0f b6 4d eb	 movzx	 ecx, BYTE PTR _ucNumLineWarp$[ebp]
  00876	03 c1		 add	 eax, ecx
  00878	6a 04		 push	 4
  0087a	59		 pop	 ecx
  0087b	6b c9 00	 imul	 ecx, ecx, 0
  0087e	6a 02		 push	 2
  00880	5a		 pop	 edx
  00881	6b d2 00	 imul	 edx, edx, 0
  00884	0f b7 54 15 f4	 movzx	 edx, WORD PTR _count$[ebp+edx]
  00889	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  0088c	8b 8c 0e 90 00
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+144]
  00893	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00897	6a 02		 push	 2
  00899	58		 pop	 eax
  0089a	6b c0 00	 imul	 eax, eax, 0
  0089d	66 8b 44 05 f4	 mov	 ax, WORD PTR _count$[ebp+eax]
  008a2	66 83 c0 01	 add	 ax, 1
  008a6	6a 02		 push	 2
  008a8	59		 pop	 ecx
  008a9	6b c9 00	 imul	 ecx, ecx, 0
  008ac	66 89 44 0d f4	 mov	 WORD PTR _count$[ebp+ecx], ax

; 183  : 			m_pwaIndices[0][(count[0])++] = (WORD) (count2[0]+ucNumLineWarp);

  008b1	6a 02		 push	 2
  008b3	58		 pop	 eax
  008b4	6b c0 00	 imul	 eax, eax, 0
  008b7	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  008bc	0f b6 4d eb	 movzx	 ecx, BYTE PTR _ucNumLineWarp$[ebp]
  008c0	03 c1		 add	 eax, ecx
  008c2	6a 04		 push	 4
  008c4	59		 pop	 ecx
  008c5	6b c9 00	 imul	 ecx, ecx, 0
  008c8	6a 02		 push	 2
  008ca	5a		 pop	 edx
  008cb	6b d2 00	 imul	 edx, edx, 0
  008ce	0f b7 54 15 f4	 movzx	 edx, WORD PTR _count$[ebp+edx]
  008d3	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  008d6	8b 8c 0e 90 00
	00 00		 mov	 ecx, DWORD PTR [esi+ecx+144]
  008dd	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  008e1	6a 02		 push	 2
  008e3	58		 pop	 eax
  008e4	6b c0 00	 imul	 eax, eax, 0
  008e7	66 8b 44 05 f4	 mov	 ax, WORD PTR _count$[ebp+eax]
  008ec	66 83 c0 01	 add	 ax, 1
  008f0	6a 02		 push	 2
  008f2	59		 pop	 ecx
  008f3	6b c9 00	 imul	 ecx, ecx, 0
  008f6	66 89 44 0d f4	 mov	 WORD PTR _count$[ebp+ecx], ax

; 184  : 			count2[0] += ucNumLineWarp;

  008fb	6a 02		 push	 2
  008fd	58		 pop	 eax
  008fe	6b c0 00	 imul	 eax, eax, 0
  00901	0f b6 4d eb	 movzx	 ecx, BYTE PTR _ucNumLineWarp$[ebp]
  00905	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  0090a	03 c1		 add	 eax, ecx
  0090c	6a 02		 push	 2
  0090e	59		 pop	 ecx
  0090f	6b c9 00	 imul	 ecx, ecx, 0
  00912	66 89 44 0d ec	 mov	 WORD PTR _count2$[ebp+ecx], ax

; 185  : 			if (0 == y%2)

  00917	8b 45 dc	 mov	 eax, DWORD PTR _y$[ebp]
  0091a	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0091f	79 05		 jns	 SHORT $LN70@SetIndexBu
  00921	48		 dec	 eax
  00922	83 c8 fe	 or	 eax, -2			; fffffffeH
  00925	40		 inc	 eax
$LN70@SetIndexBu:
  00926	85 c0		 test	 eax, eax
  00928	75 18		 jne	 SHORT $LN56@SetIndexBu

; 186  : 				count2[1] += 2;

  0092a	6a 02		 push	 2
  0092c	58		 pop	 eax
  0092d	c1 e0 00	 shl	 eax, 0
  00930	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  00935	40		 inc	 eax
  00936	40		 inc	 eax
  00937	6a 02		 push	 2
  00939	59		 pop	 ecx
  0093a	c1 e1 00	 shl	 ecx, 0
  0093d	66 89 44 0d ec	 mov	 WORD PTR _count2$[ebp+ecx], ax
$LN56@SetIndexBu:

; 187  : 			if (0 == y%4)

  00942	8b 45 dc	 mov	 eax, DWORD PTR _y$[ebp]
  00945	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0094a	79 05		 jns	 SHORT $LN71@SetIndexBu
  0094c	48		 dec	 eax
  0094d	83 c8 fc	 or	 eax, -4			; fffffffcH
  00950	40		 inc	 eax
$LN71@SetIndexBu:
  00951	85 c0		 test	 eax, eax
  00953	75 17		 jne	 SHORT $LN55@SetIndexBu

; 188  : 				count2[2] += 4;

  00955	6a 02		 push	 2
  00957	58		 pop	 eax
  00958	d1 e0		 shl	 eax, 1
  0095a	0f b7 44 05 ec	 movzx	 eax, WORD PTR _count2$[ebp+eax]
  0095f	83 c0 04	 add	 eax, 4
  00962	6a 02		 push	 2
  00964	59		 pop	 ecx
  00965	d1 e1		 shl	 ecx, 1
  00967	66 89 44 0d ec	 mov	 WORD PTR _count2$[ebp+ecx], ax
$LN55@SetIndexBu:

; 189  : 		}
; 190  : 	}

  0096c	e9 8b f7 ff ff	 jmp	 $LN5@SetIndexBu
$LN6@SetIndexBu:

; 191  : 
; 192  : 	for (uci = 0; uci < TERRAINPATCH_LODMAX; ++uci)

  00971	c6 45 ea 00	 mov	 BYTE PTR _uci$[ebp], 0
  00975	eb 08		 jmp	 SHORT $LN13@SetIndexBu
$LN11@SetIndexBu:
  00977	8a 45 ea	 mov	 al, BYTE PTR _uci$[ebp]
  0097a	04 01		 add	 al, 1
  0097c	88 45 ea	 mov	 BYTE PTR _uci$[ebp], al
$LN13@SetIndexBu:
  0097f	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  00983	83 f8 03	 cmp	 eax, 3
  00986	0f 8d ad 00 00
	00		 jge	 $LN59@SetIndexBu

; 193  : 	{
; 194  : 		m_wNumIndices[uci] = count[uci];

  0098c	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  00990	0f b6 4d ea	 movzx	 ecx, BYTE PTR _uci$[ebp]
  00994	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  00997	66 8b 44 45 f4	 mov	 ax, WORD PTR _count$[ebp+eax*2]
  0099c	66 89 84 4a d8
	00 00 00	 mov	 WORD PTR [edx+ecx*2+216], ax

; 195  : 		if( !m_IndexBuffer[uci].Lock((void **) &pIndices) )

  009a4	8d 45 c8	 lea	 eax, DWORD PTR _pIndices$[ebp]
  009a7	50		 push	 eax
  009a8	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  009ac	6b c0 14	 imul	 eax, eax, 20
  009af	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  009b2	8d 8c 01 9c 00
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+156]
  009b9	e8 00 00 00 00	 call	 ?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z ; CGraphicIndexBuffer::Lock
  009be	0f b6 c0	 movzx	 eax, al
  009c1	85 c0		 test	 eax, eax
  009c3	75 0b		 jne	 SHORT $LN58@SetIndexBu

; 196  : 			TraceError("CMapOutdoor::SetIndexBuffer() IndexBuffer Unlock Error");

  009c5	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@ILILMIED@CMapOutdoor?3?3SetIndexBuffer?$CI?$CJ?5I@
  009ca	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  009cf	59		 pop	 ecx
$LN58@SetIndexBu:

; 197  : 		memcpy(pIndices, m_pwaIndices[uci], count[uci] * sizeof(WORD));

  009d0	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  009d4	0f b7 44 45 f4	 movzx	 eax, WORD PTR _count$[ebp+eax*2]
  009d9	d1 e0		 shl	 eax, 1
  009db	50		 push	 eax
  009dc	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  009e0	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  009e3	ff b4 81 90 00
	00 00		 push	 DWORD PTR [ecx+eax*4+144]
  009ea	ff 75 c8	 push	 DWORD PTR _pIndices$[ebp]
  009ed	e8 00 00 00 00	 call	 _memcpy
  009f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 198  : 		m_IndexBuffer[uci].Unlock();

  009f5	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  009f9	6b c0 14	 imul	 eax, eax, 20
  009fc	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  009ff	8d 8c 01 9c 00
	00 00		 lea	 ecx, DWORD PTR [ecx+eax+156]
  00a06	e8 00 00 00 00	 call	 ?Unlock@CGraphicIndexBuffer@@QAEXXZ ; CGraphicIndexBuffer::Unlock

; 199  : 		delete [] m_pwaIndices[uci];

  00a0b	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  00a0f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00a12	8b 84 81 90 00
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+144]
  00a19	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
  00a1c	ff 75 c4	 push	 DWORD PTR $T1[ebp]
  00a1f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00a24	59		 pop	 ecx

; 200  : 		m_pwaIndices[uci] = NULL;

  00a25	0f b6 45 ea	 movzx	 eax, BYTE PTR _uci$[ebp]
  00a29	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00a2c	83 a4 81 90 00
	00 00 00	 and	 DWORD PTR [ecx+eax*4+144], 0

; 201  : 	}

  00a34	e9 3e ff ff ff	 jmp	 $LN11@SetIndexBu
$LN59@SetIndexBu:

; 202  : #endif
; 203  : }

  00a39	5e		 pop	 esi
  00a3a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a3d	33 cd		 xor	 ecx, ebp
  00a3f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a44	c9		 leave
  00a45	c3		 ret	 0
?SetIndexBuffer@CMapOutdoor@@IAEXXZ ENDP		; CMapOutdoor::SetIndexBuffer
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl2M@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2M@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2M, COMDAT
; _this$ = ecx

; 521  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 522  : 	pIndices[rwCount++] = c_rwCurCount;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00010	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00013	66 8b 12	 mov	 dx, WORD PTR [edx]
  00016	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0001d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00020	66 83 c0 01	 add	 ax, 1
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00027	66 89 01	 mov	 WORD PTR [ecx], ax

; 523  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00036	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0003c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00042	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00046	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00049	66 8b 00	 mov	 ax, WORD PTR [eax]
  0004c	66 83 c0 01	 add	 ax, 1
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00053	66 89 01	 mov	 WORD PTR [ecx], ax

; 524  : 	pIndices[rwCount++] = c_rwCurCount + 4;

  00056	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00059	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0005c	83 c0 04	 add	 eax, 4
  0005f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00062	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00065	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00068	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0006c	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0006f	66 8b 00	 mov	 ax, WORD PTR [eax]
  00072	66 83 c0 01	 add	 ax, 1
  00076	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00079	66 89 01	 mov	 WORD PTR [ecx], ax

; 525  : 	
; 526  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  0007c	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0007f	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00082	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00085	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00088	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0008b	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0008e	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00091	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00094	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00098	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0009b	66 8b 00	 mov	 ax, WORD PTR [eax]
  0009e	66 83 c0 01	 add	 ax, 1
  000a2	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000a5	66 89 01	 mov	 WORD PTR [ecx], ax

; 527  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 4;

  000a8	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000ab	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000ae	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000b1	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000b4	8d 44 88 04	 lea	 eax, DWORD PTR [eax+ecx*4+4]
  000b8	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000bb	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000be	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c1	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000c5	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000c8	66 8b 00	 mov	 ax, WORD PTR [eax]
  000cb	66 83 c0 01	 add	 ax, 1
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d2	66 89 01	 mov	 WORD PTR [ecx], ax

; 528  : 	pIndices[rwCount++] = c_rwCurCount + 4;

  000d5	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000d8	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000db	83 c0 04	 add	 eax, 4
  000de	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000e1	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000e4	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000e7	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000eb	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000ee	66 8b 00	 mov	 ax, WORD PTR [eax]
  000f1	66 83 c0 01	 add	 ax, 1
  000f5	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000f8	66 89 01	 mov	 WORD PTR [ecx], ax

; 529  : }

  000fb	c9		 leave
  000fc	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2M
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl2BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T1 = -6						; size = 2
$T2 = -4						; size = 2
$T3 = -2						; size = 2
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2BR, COMDAT
; _this$ = ecx

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 514  : 	ADDLvl1M(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00009	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR _c_rwCurCount$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00012	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00015	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1M

; 515  : 	ADDLvl1R(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  0001d	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00020	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00023	40		 inc	 eax
  00024	40		 inc	 eax
  00025	66 89 45 fe	 mov	 WORD PTR $T3[ebp], ax
  00029	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0002c	8d 45 fe	 lea	 eax, DWORD PTR $T3[ebp]
  0002f	50		 push	 eax
  00030	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00033	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00036	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1R

; 516  : 	ADDLvl1B(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0003e	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00041	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00044	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00047	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0004a	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0004d	66 89 45 fc	 mov	 WORD PTR $T2[ebp], ax
  00051	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00054	8d 45 fc	 lea	 eax, DWORD PTR $T2[ebp]
  00057	50		 push	 eax
  00058	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  0005b	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1B

; 517  : 	ADDLvl1BR(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  00066	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00069	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0006c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0006f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00072	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00076	66 89 45 fa	 mov	 WORD PTR $T1[ebp], ax
  0007a	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0007d	8d 45 fa	 lea	 eax, DWORD PTR $T1[ebp]
  00080	50		 push	 eax
  00081	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00084	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00087	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1BR

; 518  : }

  0008f	c9		 leave
  00090	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2BR
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl2B@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 2
$T2 = -2						; size = 2
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2B@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2B, COMDAT
; _this$ = ecx

; 495  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 496  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00008	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0000b	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000e	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00011	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00014	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0001a	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0001d	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00020	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00024	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00027	66 8b 00	 mov	 ax, WORD PTR [eax]
  0002a	66 83 c0 01	 add	 ax, 1
  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00031	66 89 01	 mov	 WORD PTR [ecx], ax

; 497  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00034	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00037	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0003a	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0003d	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00040	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00044	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00047	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0004a	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0004d	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00051	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00054	66 8b 00	 mov	 ax, WORD PTR [eax]
  00057	66 83 c0 01	 add	 ax, 1
  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0005e	66 89 01	 mov	 WORD PTR [ecx], ax

; 498  : 	pIndices[rwCount++] = c_rwCurCount;

  00061	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00064	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  0006a	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  0006d	66 8b 12	 mov	 dx, WORD PTR [edx]
  00070	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00074	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00077	66 8b 00	 mov	 ax, WORD PTR [eax]
  0007a	66 83 c0 01	 add	 ax, 1
  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00081	66 89 01	 mov	 WORD PTR [ecx], ax

; 499  : 	
; 500  : 	pIndices[rwCount++] = c_rwCurCount;

  00084	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00087	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  0008d	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00090	66 8b 12	 mov	 dx, WORD PTR [edx]
  00093	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00097	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0009a	66 8b 00	 mov	 ax, WORD PTR [eax]
  0009d	66 83 c0 01	 add	 ax, 1
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000a4	66 89 01	 mov	 WORD PTR [ecx], ax

; 501  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000a7	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000aa	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000ad	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000b0	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000b3	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ba	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000bd	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c0	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000c4	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000c7	66 8b 00	 mov	 ax, WORD PTR [eax]
  000ca	66 83 c0 01	 add	 ax, 1
  000ce	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d1	66 89 01	 mov	 WORD PTR [ecx], ax

; 502  : 	pIndices[rwCount++] = c_rwCurCount + 4;

  000d4	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000d7	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000da	83 c0 04	 add	 eax, 4
  000dd	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000e0	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000e3	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000e6	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000ea	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000ed	66 8b 00	 mov	 ax, WORD PTR [eax]
  000f0	66 83 c0 01	 add	 ax, 1
  000f4	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000f7	66 89 01	 mov	 WORD PTR [ecx], ax

; 503  : 	
; 504  : 	pIndices[rwCount++] = c_rwCurCount + 4;

  000fa	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000fd	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00100	83 c0 04	 add	 eax, 4
  00103	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00106	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00109	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0010c	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00110	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00113	66 8b 00	 mov	 ax, WORD PTR [eax]
  00116	66 83 c0 01	 add	 ax, 1
  0011a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0011d	66 89 01	 mov	 WORD PTR [ecx], ax

; 505  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00120	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00123	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00126	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00129	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0012c	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00130	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00133	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00136	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00139	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0013d	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00140	66 8b 00	 mov	 ax, WORD PTR [eax]
  00143	66 83 c0 01	 add	 ax, 1
  00147	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0014a	66 89 01	 mov	 WORD PTR [ecx], ax

; 506  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 4;

  0014d	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00150	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00153	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00156	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00159	8d 44 48 04	 lea	 eax, DWORD PTR [eax+ecx*2+4]
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00160	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00163	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00166	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0016a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0016d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00170	66 83 c0 01	 add	 ax, 1
  00174	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00177	66 89 01	 mov	 WORD PTR [ecx], ax

; 507  : 
; 508  : 	ADDLvl1B(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0017a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0017d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00180	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00183	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00186	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00189	66 89 45 fe	 mov	 WORD PTR $T2[ebp], ax
  0018d	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00190	8d 45 fe	 lea	 eax, DWORD PTR $T2[ebp]
  00193	50		 push	 eax
  00194	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00197	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  0019a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019d	e8 00 00 00 00	 call	 ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1B

; 509  : 	ADDLvl1B(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  001a2	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001a5	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001a8	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001ab	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001ae	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  001b2	66 89 45 fc	 mov	 WORD PTR $T1[ebp], ax
  001b6	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  001b9	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  001bc	50		 push	 eax
  001bd	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  001c0	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  001c3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c6	e8 00 00 00 00	 call	 ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1B

; 510  : }

  001cb	c9		 leave
  001cc	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2B
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl2BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T1 = -6						; size = 2
$T2 = -4						; size = 2
$T3 = -2						; size = 2
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2BL, COMDAT
; _this$ = ecx

; 487  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 488  : 	ADDLvl1L(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00009	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR _c_rwCurCount$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00012	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00015	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1L

; 489  : 	ADDLvl1M(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  0001d	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00020	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00023	40		 inc	 eax
  00024	40		 inc	 eax
  00025	66 89 45 fe	 mov	 WORD PTR $T3[ebp], ax
  00029	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0002c	8d 45 fe	 lea	 eax, DWORD PTR $T3[ebp]
  0002f	50		 push	 eax
  00030	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00033	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00036	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1M

; 490  : 	ADDLvl1BL(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0003e	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00041	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00044	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00047	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0004a	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0004d	66 89 45 fc	 mov	 WORD PTR $T2[ebp], ax
  00051	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00054	8d 45 fc	 lea	 eax, DWORD PTR $T2[ebp]
  00057	50		 push	 eax
  00058	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  0005b	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1BL

; 491  : 	ADDLvl1B(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  00066	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00069	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0006c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0006f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00072	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00076	66 89 45 fa	 mov	 WORD PTR $T1[ebp], ax
  0007a	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0007d	8d 45 fa	 lea	 eax, DWORD PTR $T1[ebp]
  00080	50		 push	 eax
  00081	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00084	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00087	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1B

; 492  : }

  0008f	c9		 leave
  00090	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2BL
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl2R@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 2
$T2 = -2						; size = 2
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2R@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2R, COMDAT
; _this$ = ecx

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 470  : 	ADDLvl1R(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  00008	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0000b	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000e	40		 inc	 eax
  0000f	40		 inc	 eax
  00010	66 89 45 fe	 mov	 WORD PTR $T2[ebp], ax
  00014	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00017	8d 45 fe	 lea	 eax, DWORD PTR $T2[ebp]
  0001a	50		 push	 eax
  0001b	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00021	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1R

; 471  : 	ADDLvl1R(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  00029	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0002c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0002f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00032	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00035	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00039	66 89 45 fc	 mov	 WORD PTR $T1[ebp], ax
  0003d	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00040	8d 45 fc	 lea	 eax, DWORD PTR $T1[ebp]
  00043	50		 push	 eax
  00044	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00047	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  0004a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1R

; 472  : 	
; 473  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00052	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00055	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00058	40		 inc	 eax
  00059	40		 inc	 eax
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0005d	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00060	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00063	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00067	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0006a	66 8b 00	 mov	 ax, WORD PTR [eax]
  0006d	66 83 c0 01	 add	 ax, 1
  00071	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00074	66 89 01	 mov	 WORD PTR [ecx], ax

; 474  : 	pIndices[rwCount++] = c_rwCurCount;

  00077	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0007a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00080	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00083	66 8b 12	 mov	 dx, WORD PTR [edx]
  00086	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0008a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0008d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00090	66 83 c0 01	 add	 ax, 1
  00094	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00097	66 89 01	 mov	 WORD PTR [ecx], ax

; 475  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  0009a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0009d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000a0	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000a3	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000a6	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  000aa	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ad	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000b0	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000b3	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000b7	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000ba	66 8b 00	 mov	 ax, WORD PTR [eax]
  000bd	66 83 c0 01	 add	 ax, 1
  000c1	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000c4	66 89 01	 mov	 WORD PTR [ecx], ax

; 476  : 	
; 477  : 	pIndices[rwCount++] = c_rwCurCount;

  000c7	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000ca	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000cd	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  000d0	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  000d3	66 8b 12	 mov	 dx, WORD PTR [edx]
  000d6	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  000da	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000dd	66 8b 00	 mov	 ax, WORD PTR [eax]
  000e0	66 83 c0 01	 add	 ax, 1
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000e7	66 89 01	 mov	 WORD PTR [ecx], ax

; 478  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  000ea	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000ed	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000f0	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000f3	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000f6	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  000f9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000fc	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000ff	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00102	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00106	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00109	66 8b 00	 mov	 ax, WORD PTR [eax]
  0010c	66 83 c0 01	 add	 ax, 1
  00110	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00113	66 89 01	 mov	 WORD PTR [ecx], ax

; 479  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00116	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00119	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0011c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0011f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00122	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00126	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00129	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0012c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0012f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00133	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00136	66 8b 00	 mov	 ax, WORD PTR [eax]
  00139	66 83 c0 01	 add	 ax, 1
  0013d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00140	66 89 01	 mov	 WORD PTR [ecx], ax

; 480  : 	
; 481  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00143	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00146	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00149	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0014c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0014f	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00153	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00156	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00159	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0015c	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00160	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00163	66 8b 00	 mov	 ax, WORD PTR [eax]
  00166	66 83 c0 01	 add	 ax, 1
  0016a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0016d	66 89 01	 mov	 WORD PTR [ecx], ax

; 482  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  00170	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00173	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00176	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00179	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0017c	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0017f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00182	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00185	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00188	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0018c	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0018f	66 8b 00	 mov	 ax, WORD PTR [eax]
  00192	66 83 c0 01	 add	 ax, 1
  00196	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00199	66 89 01	 mov	 WORD PTR [ecx], ax

; 483  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 2;

  0019c	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0019f	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001a2	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001a5	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001a8	8d 44 88 02	 lea	 eax, DWORD PTR [eax+ecx*4+2]
  001ac	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001af	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001b2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001b5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001b9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001bc	66 8b 00	 mov	 ax, WORD PTR [eax]
  001bf	66 83 c0 01	 add	 ax, 1
  001c3	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001c6	66 89 01	 mov	 WORD PTR [ecx], ax

; 484  : }

  001c9	c9		 leave
  001ca	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2R
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl2L@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -2						; size = 2
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2L@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2L, COMDAT
; _this$ = ecx

; 451  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 452  : 	ADDLvl1L(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00008	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR _c_rwCurCount$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00011	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1L

; 453  : 	ADDLvl1L(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0001c	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0001f	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00022	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00025	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00028	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0002b	66 89 45 fe	 mov	 WORD PTR $T1[ebp], ax
  0002f	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00032	8d 45 fe	 lea	 eax, DWORD PTR $T1[ebp]
  00035	50		 push	 eax
  00036	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00039	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  0003c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1L

; 454  : 
; 455  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00044	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00047	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0004a	40		 inc	 eax
  0004b	40		 inc	 eax
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0004f	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00052	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00055	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00059	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0005c	66 8b 00	 mov	 ax, WORD PTR [eax]
  0005f	66 83 c0 01	 add	 ax, 1
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00066	66 89 01	 mov	 WORD PTR [ecx], ax

; 456  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00069	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0006c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0006f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00072	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00075	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00079	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0007c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0007f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00082	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00086	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00089	66 8b 00	 mov	 ax, WORD PTR [eax]
  0008c	66 83 c0 01	 add	 ax, 1
  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00093	66 89 01	 mov	 WORD PTR [ecx], ax

; 457  : 	pIndices[rwCount++] = c_rwCurCount + 4;

  00096	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00099	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0009c	83 c0 04	 add	 eax, 4
  0009f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000a2	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000a5	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000a8	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000ac	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000af	66 8b 00	 mov	 ax, WORD PTR [eax]
  000b2	66 83 c0 01	 add	 ax, 1
  000b6	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000b9	66 89 01	 mov	 WORD PTR [ecx], ax

; 458  : 	
; 459  : 	pIndices[rwCount++] = c_rwCurCount + 4;

  000bc	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000bf	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000c2	83 c0 04	 add	 eax, 4
  000c5	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000c8	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000cb	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000ce	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000d2	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000d5	66 8b 00	 mov	 ax, WORD PTR [eax]
  000d8	66 83 c0 01	 add	 ax, 1
  000dc	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000df	66 89 01	 mov	 WORD PTR [ecx], ax

; 460  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000e2	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000e5	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000e8	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000eb	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000ee	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  000f2	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000f5	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000f8	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000fb	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000ff	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00102	66 8b 00	 mov	 ax, WORD PTR [eax]
  00105	66 83 c0 01	 add	 ax, 1
  00109	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0010c	66 89 01	 mov	 WORD PTR [ecx], ax

; 461  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 4;

  0010f	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00112	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00115	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00118	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0011b	8d 44 88 04	 lea	 eax, DWORD PTR [eax+ecx*4+4]
  0011f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00122	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00125	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00128	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0012c	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0012f	66 8b 00	 mov	 ax, WORD PTR [eax]
  00132	66 83 c0 01	 add	 ax, 1
  00136	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00139	66 89 01	 mov	 WORD PTR [ecx], ax

; 462  : 	
; 463  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 4;

  0013c	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0013f	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00142	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00145	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00148	8d 44 88 04	 lea	 eax, DWORD PTR [eax+ecx*4+4]
  0014c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0014f	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00152	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00155	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00159	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0015c	66 8b 00	 mov	 ax, WORD PTR [eax]
  0015f	66 83 c0 01	 add	 ax, 1
  00163	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00166	66 89 01	 mov	 WORD PTR [ecx], ax

; 464  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00169	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0016c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0016f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00172	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00175	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00179	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0017c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0017f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00182	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00186	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00189	66 8b 00	 mov	 ax, WORD PTR [eax]
  0018c	66 83 c0 01	 add	 ax, 1
  00190	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00193	66 89 01	 mov	 WORD PTR [ecx], ax

; 465  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 2;

  00196	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00199	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0019c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0019f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001a2	8d 44 88 02	 lea	 eax, DWORD PTR [eax+ecx*4+2]
  001a6	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001a9	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001ac	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001af	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001b3	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001b6	66 8b 00	 mov	 ax, WORD PTR [eax]
  001b9	66 83 c0 01	 add	 ax, 1
  001bd	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001c0	66 89 01	 mov	 WORD PTR [ecx], ax

; 466  : }

  001c3	c9		 leave
  001c4	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2L
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl2TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T1 = -6						; size = 2
$T2 = -4						; size = 2
$T3 = -2						; size = 2
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2TR, COMDAT
; _this$ = ecx

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 444  : 	ADDLvl1T(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00009	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR _c_rwCurCount$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00012	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00015	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1T

; 445  : 	ADDLvl1TR(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  0001d	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00020	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00023	40		 inc	 eax
  00024	40		 inc	 eax
  00025	66 89 45 fe	 mov	 WORD PTR $T3[ebp], ax
  00029	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0002c	8d 45 fe	 lea	 eax, DWORD PTR $T3[ebp]
  0002f	50		 push	 eax
  00030	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00033	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00036	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1TR

; 446  : 	ADDLvl1M(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0003e	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00041	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00044	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00047	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0004a	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0004d	66 89 45 fc	 mov	 WORD PTR $T2[ebp], ax
  00051	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00054	8d 45 fc	 lea	 eax, DWORD PTR $T2[ebp]
  00057	50		 push	 eax
  00058	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  0005b	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1M

; 447  : 	ADDLvl1R(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  00066	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00069	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0006c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0006f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00072	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00076	66 89 45 fa	 mov	 WORD PTR $T1[ebp], ax
  0007a	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0007d	8d 45 fa	 lea	 eax, DWORD PTR $T1[ebp]
  00080	50		 push	 eax
  00081	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00084	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00087	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1R

; 448  : }

  0008f	c9		 leave
  00090	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2TR
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl2T@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -2						; size = 2
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2T@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2T, COMDAT
; _this$ = ecx

; 425  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 426  : 	ADDLvl1T(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00008	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR _c_rwCurCount$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00011	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1T

; 427  : 	ADDLvl1T(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  0001c	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0001f	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00022	40		 inc	 eax
  00023	40		 inc	 eax
  00024	66 89 45 fe	 mov	 WORD PTR $T1[ebp], ax
  00028	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0002b	8d 45 fe	 lea	 eax, DWORD PTR $T1[ebp]
  0002e	50		 push	 eax
  0002f	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00032	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1T

; 428  : 	
; 429  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  0003d	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00040	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00043	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00046	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00049	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0004f	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00052	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00055	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00059	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0005c	66 8b 00	 mov	 ax, WORD PTR [eax]
  0005f	66 83 c0 01	 add	 ax, 1
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00066	66 89 01	 mov	 WORD PTR [ecx], ax

; 430  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  00069	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0006c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0006f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00072	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00075	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00078	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0007b	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0007e	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00081	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00085	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00088	66 8b 00	 mov	 ax, WORD PTR [eax]
  0008b	66 83 c0 01	 add	 ax, 1
  0008f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00092	66 89 01	 mov	 WORD PTR [ecx], ax

; 431  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00095	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00098	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0009b	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0009e	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000a1	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  000a5	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000a8	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000ab	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000ae	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000b2	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000b5	66 8b 00	 mov	 ax, WORD PTR [eax]
  000b8	66 83 c0 01	 add	 ax, 1
  000bc	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000bf	66 89 01	 mov	 WORD PTR [ecx], ax

; 432  : 
; 433  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4;

  000c2	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000c5	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000c8	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000cb	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000ce	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  000d1	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d4	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000d7	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000da	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000de	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000e1	66 8b 00	 mov	 ax, WORD PTR [eax]
  000e4	66 83 c0 01	 add	 ax, 1
  000e8	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000eb	66 89 01	 mov	 WORD PTR [ecx], ax

; 434  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 4;

  000ee	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000f1	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000f4	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000f7	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000fa	8d 44 88 04	 lea	 eax, DWORD PTR [eax+ecx*4+4]
  000fe	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00101	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00104	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00107	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0010b	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0010e	66 8b 00	 mov	 ax, WORD PTR [eax]
  00111	66 83 c0 01	 add	 ax, 1
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00118	66 89 01	 mov	 WORD PTR [ecx], ax

; 435  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  0011b	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0011e	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00121	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00124	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00127	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  0012b	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0012e	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00131	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00134	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00138	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0013b	66 8b 00	 mov	 ax, WORD PTR [eax]
  0013e	66 83 c0 01	 add	 ax, 1
  00142	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00145	66 89 01	 mov	 WORD PTR [ecx], ax

; 436  : 	
; 437  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 4 + 4;

  00148	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0014b	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0014e	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00151	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00154	8d 44 88 04	 lea	 eax, DWORD PTR [eax+ecx*4+4]
  00158	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0015b	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0015e	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00161	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00165	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00168	66 8b 00	 mov	 ax, WORD PTR [eax]
  0016b	66 83 c0 01	 add	 ax, 1
  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00172	66 89 01	 mov	 WORD PTR [ecx], ax

; 438  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 4;

  00175	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00178	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0017b	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0017e	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00181	8d 44 48 04	 lea	 eax, DWORD PTR [eax+ecx*2+4]
  00185	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00188	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0018b	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0018e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00192	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00195	66 8b 00	 mov	 ax, WORD PTR [eax]
  00198	66 83 c0 01	 add	 ax, 1
  0019c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0019f	66 89 01	 mov	 WORD PTR [ecx], ax

; 439  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  001a2	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001a5	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001a8	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001ab	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001ae	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  001b2	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001b5	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001b8	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001bb	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001bf	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001c2	66 8b 00	 mov	 ax, WORD PTR [eax]
  001c5	66 83 c0 01	 add	 ax, 1
  001c9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001cc	66 89 01	 mov	 WORD PTR [ecx], ax

; 440  : }

  001cf	c9		 leave
  001d0	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2T
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl2TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T1 = -6						; size = 2
$T2 = -4						; size = 2
$T3 = -2						; size = 2
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl2TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl2TL, COMDAT
; _this$ = ecx

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 418  : 	ADDLvl1TL(pIndices, rwCount, c_rwCurCount, c_rucNumLineWarp);

  00009	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR _c_rwCurCount$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00012	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00015	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1TL

; 419  : 	ADDLvl1T(pIndices, rwCount, c_rwCurCount + 2, c_rucNumLineWarp);

  0001d	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00020	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00023	40		 inc	 eax
  00024	40		 inc	 eax
  00025	66 89 45 fe	 mov	 WORD PTR $T3[ebp], ax
  00029	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0002c	8d 45 fe	 lea	 eax, DWORD PTR $T3[ebp]
  0002f	50		 push	 eax
  00030	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00033	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00036	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1T

; 420  : 	ADDLvl1L(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2, c_rucNumLineWarp);

  0003e	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00041	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00044	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00047	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0004a	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0004d	66 89 45 fc	 mov	 WORD PTR $T2[ebp], ax
  00051	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  00054	8d 45 fc	 lea	 eax, DWORD PTR $T2[ebp]
  00057	50		 push	 eax
  00058	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  0005b	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  0005e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	e8 00 00 00 00	 call	 ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1L

; 421  : 	ADDLvl1M(pIndices, rwCount, c_rwCurCount + c_rucNumLineWarp * 2 + 2, c_rucNumLineWarp);

  00066	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00069	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0006c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0006f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00072	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00076	66 89 45 fa	 mov	 WORD PTR $T1[ebp], ax
  0007a	ff 75 14	 push	 DWORD PTR _c_rucNumLineWarp$[ebp]
  0007d	8d 45 fa	 lea	 eax, DWORD PTR $T1[ebp]
  00080	50		 push	 eax
  00081	ff 75 0c	 push	 DWORD PTR _rwCount$[ebp]
  00084	ff 75 08	 push	 DWORD PTR _pIndices$[ebp]
  00087	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ; CMapOutdoor::ADDLvl1M

; 422  : }

  0008f	c9		 leave
  00090	c2 10 00	 ret	 16			; 00000010H
?ADDLvl2TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl2TL
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1M, COMDAT
; _this$ = ecx

; 406  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 407  : 	pIndices[rwCount++] = c_rwCurCount;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00010	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00013	66 8b 12	 mov	 dx, WORD PTR [edx]
  00016	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0001d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00020	66 83 c0 01	 add	 ax, 1
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00027	66 89 01	 mov	 WORD PTR [ecx], ax

; 408  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00036	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0003c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00042	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00046	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00049	66 8b 00	 mov	 ax, WORD PTR [eax]
  0004c	66 83 c0 01	 add	 ax, 1
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00053	66 89 01	 mov	 WORD PTR [ecx], ax

; 409  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00056	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00059	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0005c	40		 inc	 eax
  0005d	40		 inc	 eax
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00061	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00064	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00067	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0006b	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0006e	66 8b 00	 mov	 ax, WORD PTR [eax]
  00071	66 83 c0 01	 add	 ax, 1
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00078	66 89 01	 mov	 WORD PTR [ecx], ax

; 410  : 	
; 411  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  0007b	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0007e	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00081	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00084	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00087	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  0008a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0008d	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00090	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00093	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00097	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0009a	66 8b 00	 mov	 ax, WORD PTR [eax]
  0009d	66 83 c0 01	 add	 ax, 1
  000a1	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000a4	66 89 01	 mov	 WORD PTR [ecx], ax

; 412  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000a7	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000aa	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000ad	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000b0	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000b3	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ba	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000bd	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c0	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000c4	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000c7	66 8b 00	 mov	 ax, WORD PTR [eax]
  000ca	66 83 c0 01	 add	 ax, 1
  000ce	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d1	66 89 01	 mov	 WORD PTR [ecx], ax

; 413  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  000d4	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000d7	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000da	40		 inc	 eax
  000db	40		 inc	 eax
  000dc	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000df	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000e2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000e5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000e9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000ec	66 8b 00	 mov	 ax, WORD PTR [eax]
  000ef	66 83 c0 01	 add	 ax, 1
  000f3	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000f6	66 89 01	 mov	 WORD PTR [ecx], ax

; 414  : }

  000f9	c9		 leave
  000fa	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1M@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1M
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1BR, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 380  : 	pIndices[rwCount++] = c_rwCurCount;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00010	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00013	66 8b 12	 mov	 dx, WORD PTR [edx]
  00016	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0001d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00020	66 83 c0 01	 add	 ax, 1
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00027	66 89 01	 mov	 WORD PTR [ecx], ax

; 381  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00036	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0003c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00042	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00046	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00049	66 8b 00	 mov	 ax, WORD PTR [eax]
  0004c	66 83 c0 01	 add	 ax, 1
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00053	66 89 01	 mov	 WORD PTR [ecx], ax

; 382  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00056	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00059	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0005c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0005f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00062	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00069	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0006f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00073	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00076	66 8b 00	 mov	 ax, WORD PTR [eax]
  00079	66 83 c0 01	 add	 ax, 1
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00080	66 89 01	 mov	 WORD PTR [ecx], ax

; 383  : 	
; 384  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00083	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00086	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00089	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0008c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0008f	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00095	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00098	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0009b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0009f	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000a2	66 8b 00	 mov	 ax, WORD PTR [eax]
  000a5	66 83 c0 01	 add	 ax, 1
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ac	66 89 01	 mov	 WORD PTR [ecx], ax

; 385  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  000af	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000b2	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000b5	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000b8	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000bb	8d 44 48 01	 lea	 eax, DWORD PTR [eax+ecx*2+1]
  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000c2	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000c5	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c8	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000cc	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000cf	66 8b 00	 mov	 ax, WORD PTR [eax]
  000d2	66 83 c0 01	 add	 ax, 1
  000d6	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d9	66 89 01	 mov	 WORD PTR [ecx], ax

; 386  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000dc	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000df	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000e2	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000e5	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000e8	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ef	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000f2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000f5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000f9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000fc	66 8b 00	 mov	 ax, WORD PTR [eax]
  000ff	66 83 c0 01	 add	 ax, 1
  00103	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00106	66 89 01	 mov	 WORD PTR [ecx], ax

; 387  : 	
; 388  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  00109	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0010c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0010f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00112	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00115	8d 44 48 01	 lea	 eax, DWORD PTR [eax+ecx*2+1]
  00119	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0011c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0011f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00122	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00126	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00129	66 8b 00	 mov	 ax, WORD PTR [eax]
  0012c	66 83 c0 01	 add	 ax, 1
  00130	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00133	66 89 01	 mov	 WORD PTR [ecx], ax

; 389  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00136	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00139	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0013c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0013f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00142	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00146	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00149	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0014c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0014f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00153	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00156	66 8b 00	 mov	 ax, WORD PTR [eax]
  00159	66 83 c0 01	 add	 ax, 1
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00160	66 89 01	 mov	 WORD PTR [ecx], ax

; 390  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00163	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00166	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00169	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0016c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0016f	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00173	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00176	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00179	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0017c	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00180	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00183	66 8b 00	 mov	 ax, WORD PTR [eax]
  00186	66 83 c0 01	 add	 ax, 1
  0018a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0018d	66 89 01	 mov	 WORD PTR [ecx], ax

; 391  : 	
; 392  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00190	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00193	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00196	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00199	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0019c	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  001a0	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001a3	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001a6	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001a9	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001ad	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001b0	66 8b 00	 mov	 ax, WORD PTR [eax]
  001b3	66 83 c0 01	 add	 ax, 1
  001b7	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001ba	66 89 01	 mov	 WORD PTR [ecx], ax

; 393  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  001bd	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001c0	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001c3	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001c6	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001c9	8d 44 08 02	 lea	 eax, DWORD PTR [eax+ecx+2]
  001cd	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001d0	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001d3	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001d6	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001da	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001dd	66 8b 00	 mov	 ax, WORD PTR [eax]
  001e0	66 83 c0 01	 add	 ax, 1
  001e4	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001e7	66 89 01	 mov	 WORD PTR [ecx], ax

; 394  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  001ea	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001ed	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001f0	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001f3	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001f6	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  001fa	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001fd	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00200	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00203	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00207	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0020a	66 8b 00	 mov	 ax, WORD PTR [eax]
  0020d	66 83 c0 01	 add	 ax, 1
  00211	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00214	66 89 01	 mov	 WORD PTR [ecx], ax

; 395  : 	
; 396  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  00217	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0021a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0021d	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00220	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00223	8d 44 08 02	 lea	 eax, DWORD PTR [eax+ecx+2]
  00227	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0022a	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0022d	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00230	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00234	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00237	66 8b 00	 mov	 ax, WORD PTR [eax]
  0023a	66 83 c0 01	 add	 ax, 1
  0023e	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00241	66 89 01	 mov	 WORD PTR [ecx], ax

; 397  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00244	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00247	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0024a	40		 inc	 eax
  0024b	40		 inc	 eax
  0024c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0024f	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00252	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00255	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00259	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0025c	66 8b 00	 mov	 ax, WORD PTR [eax]
  0025f	66 83 c0 01	 add	 ax, 1
  00263	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00266	66 89 01	 mov	 WORD PTR [ecx], ax

; 398  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00269	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0026c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0026f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00272	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00275	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00279	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0027c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0027f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00282	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00286	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00289	66 8b 00	 mov	 ax, WORD PTR [eax]
  0028c	66 83 c0 01	 add	 ax, 1
  00290	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00293	66 89 01	 mov	 WORD PTR [ecx], ax

; 399  : 	
; 400  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00296	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00299	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0029c	40		 inc	 eax
  0029d	40		 inc	 eax
  0029e	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002a1	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  002a4	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  002a7	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  002ab	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002ae	66 8b 00	 mov	 ax, WORD PTR [eax]
  002b1	66 83 c0 01	 add	 ax, 1
  002b5	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002b8	66 89 01	 mov	 WORD PTR [ecx], ax

; 401  : 	pIndices[rwCount++] = c_rwCurCount;

  002bb	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002be	0f b7 00	 movzx	 eax, WORD PTR [eax]
  002c1	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  002c4	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  002c7	66 8b 12	 mov	 dx, WORD PTR [edx]
  002ca	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  002ce	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002d1	66 8b 00	 mov	 ax, WORD PTR [eax]
  002d4	66 83 c0 01	 add	 ax, 1
  002d8	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002db	66 89 01	 mov	 WORD PTR [ecx], ax

; 402  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  002de	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  002e1	0f b7 00	 movzx	 eax, WORD PTR [eax]
  002e4	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  002e7	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  002ea	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  002ee	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002f1	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  002f4	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  002f7	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  002fb	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002fe	66 8b 00	 mov	 ax, WORD PTR [eax]
  00301	66 83 c0 01	 add	 ax, 1
  00305	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00308	66 89 01	 mov	 WORD PTR [ecx], ax

; 403  : }

  0030b	c9		 leave
  0030c	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1BR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1BR
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1B, COMDAT
; _this$ = ecx

; 356  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 357  : 	pIndices[rwCount++] = c_rwCurCount;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00010	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00013	66 8b 12	 mov	 dx, WORD PTR [edx]
  00016	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0001d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00020	66 83 c0 01	 add	 ax, 1
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00027	66 89 01	 mov	 WORD PTR [ecx], ax

; 358  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00036	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0003c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00042	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00046	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00049	66 8b 00	 mov	 ax, WORD PTR [eax]
  0004c	66 83 c0 01	 add	 ax, 1
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00053	66 89 01	 mov	 WORD PTR [ecx], ax

; 359  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00056	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00059	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0005c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0005f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00062	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00069	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0006f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00073	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00076	66 8b 00	 mov	 ax, WORD PTR [eax]
  00079	66 83 c0 01	 add	 ax, 1
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00080	66 89 01	 mov	 WORD PTR [ecx], ax

; 360  : 	
; 361  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00083	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00086	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00089	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0008c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0008f	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00095	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00098	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0009b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0009f	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000a2	66 8b 00	 mov	 ax, WORD PTR [eax]
  000a5	66 83 c0 01	 add	 ax, 1
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ac	66 89 01	 mov	 WORD PTR [ecx], ax

; 362  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  000af	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000b2	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000b5	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000b8	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000bb	8d 44 48 01	 lea	 eax, DWORD PTR [eax+ecx*2+1]
  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000c2	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000c5	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c8	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000cc	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000cf	66 8b 00	 mov	 ax, WORD PTR [eax]
  000d2	66 83 c0 01	 add	 ax, 1
  000d6	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d9	66 89 01	 mov	 WORD PTR [ecx], ax

; 363  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000dc	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000df	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000e2	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000e5	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000e8	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ef	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000f2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000f5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000f9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000fc	66 8b 00	 mov	 ax, WORD PTR [eax]
  000ff	66 83 c0 01	 add	 ax, 1
  00103	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00106	66 89 01	 mov	 WORD PTR [ecx], ax

; 364  : 	
; 365  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  00109	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0010c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0010f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00112	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00115	8d 44 48 01	 lea	 eax, DWORD PTR [eax+ecx*2+1]
  00119	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0011c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0011f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00122	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00126	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00129	66 8b 00	 mov	 ax, WORD PTR [eax]
  0012c	66 83 c0 01	 add	 ax, 1
  00130	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00133	66 89 01	 mov	 WORD PTR [ecx], ax

; 366  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00136	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00139	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0013c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0013f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00142	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00146	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00149	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0014c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0014f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00153	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00156	66 8b 00	 mov	 ax, WORD PTR [eax]
  00159	66 83 c0 01	 add	 ax, 1
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00160	66 89 01	 mov	 WORD PTR [ecx], ax

; 367  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00163	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00166	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00169	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0016c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0016f	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00173	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00176	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00179	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0017c	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00180	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00183	66 8b 00	 mov	 ax, WORD PTR [eax]
  00186	66 83 c0 01	 add	 ax, 1
  0018a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0018d	66 89 01	 mov	 WORD PTR [ecx], ax

; 368  : 	
; 369  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00190	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00193	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00196	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00199	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0019c	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  001a0	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001a3	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001a6	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001a9	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001ad	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001b0	66 8b 00	 mov	 ax, WORD PTR [eax]
  001b3	66 83 c0 01	 add	 ax, 1
  001b7	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001ba	66 89 01	 mov	 WORD PTR [ecx], ax

; 370  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  001bd	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001c0	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001c3	40		 inc	 eax
  001c4	40		 inc	 eax
  001c5	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001c8	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001cb	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001ce	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001d2	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001d5	66 8b 00	 mov	 ax, WORD PTR [eax]
  001d8	66 83 c0 01	 add	 ax, 1
  001dc	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001df	66 89 01	 mov	 WORD PTR [ecx], ax

; 371  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  001e2	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001e5	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001e8	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001eb	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001ee	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  001f2	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001f5	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001f8	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001fb	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001ff	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00202	66 8b 00	 mov	 ax, WORD PTR [eax]
  00205	66 83 c0 01	 add	 ax, 1
  00209	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0020c	66 89 01	 mov	 WORD PTR [ecx], ax

; 372  : 	
; 373  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  0020f	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00212	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00215	40		 inc	 eax
  00216	40		 inc	 eax
  00217	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0021a	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0021d	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00220	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00224	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00227	66 8b 00	 mov	 ax, WORD PTR [eax]
  0022a	66 83 c0 01	 add	 ax, 1
  0022e	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00231	66 89 01	 mov	 WORD PTR [ecx], ax

; 374  : 	pIndices[rwCount++] = c_rwCurCount;

  00234	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00237	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0023a	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  0023d	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00240	66 8b 12	 mov	 dx, WORD PTR [edx]
  00243	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00247	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0024a	66 8b 00	 mov	 ax, WORD PTR [eax]
  0024d	66 83 c0 01	 add	 ax, 1
  00251	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00254	66 89 01	 mov	 WORD PTR [ecx], ax

; 375  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00257	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0025a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0025d	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00260	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00263	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00267	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0026a	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0026d	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00270	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00274	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00277	66 8b 00	 mov	 ax, WORD PTR [eax]
  0027a	66 83 c0 01	 add	 ax, 1
  0027e	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00281	66 89 01	 mov	 WORD PTR [ecx], ax

; 376  : }

  00284	c9		 leave
  00285	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1B@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1B
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1BL, COMDAT
; _this$ = ecx

; 329  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 330  : 	pIndices[rwCount++] = c_rwCurCount;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00010	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00013	66 8b 12	 mov	 dx, WORD PTR [edx]
  00016	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0001d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00020	66 83 c0 01	 add	 ax, 1
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00027	66 89 01	 mov	 WORD PTR [ecx], ax

; 331  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00036	03 c1		 add	 eax, ecx
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0003b	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0003e	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00041	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00045	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00048	66 8b 00	 mov	 ax, WORD PTR [eax]
  0004b	66 83 c0 01	 add	 ax, 1
  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00052	66 89 01	 mov	 WORD PTR [ecx], ax

; 332  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00055	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00058	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0005b	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0005e	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00061	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00068	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0006b	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0006e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00072	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00075	66 8b 00	 mov	 ax, WORD PTR [eax]
  00078	66 83 c0 01	 add	 ax, 1
  0007c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0007f	66 89 01	 mov	 WORD PTR [ecx], ax

; 333  : 	
; 334  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  00082	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00085	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00088	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0008b	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0008e	03 c1		 add	 eax, ecx
  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00093	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00096	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00099	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0009d	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000a0	66 8b 00	 mov	 ax, WORD PTR [eax]
  000a3	66 83 c0 01	 add	 ax, 1
  000a7	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000aa	66 89 01	 mov	 WORD PTR [ecx], ax

; 335  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  000ad	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000b0	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000b3	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000b6	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000b9	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  000bc	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000bf	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000c2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000c9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000cc	66 8b 00	 mov	 ax, WORD PTR [eax]
  000cf	66 83 c0 01	 add	 ax, 1
  000d3	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d6	66 89 01	 mov	 WORD PTR [ecx], ax

; 336  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000d9	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000dc	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000df	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000e2	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000e5	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  000e9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ec	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000ef	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000f2	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000f6	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000f9	66 8b 00	 mov	 ax, WORD PTR [eax]
  000fc	66 83 c0 01	 add	 ax, 1
  00100	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00103	66 89 01	 mov	 WORD PTR [ecx], ax

; 337  : 	
; 338  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00106	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00109	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0010c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0010f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00112	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00116	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00119	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0011c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0011f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00123	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00126	66 8b 00	 mov	 ax, WORD PTR [eax]
  00129	66 83 c0 01	 add	 ax, 1
  0012d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00130	66 89 01	 mov	 WORD PTR [ecx], ax

; 339  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00133	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00136	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00139	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0013c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0013f	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00142	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00145	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00148	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0014b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00152	66 8b 00	 mov	 ax, WORD PTR [eax]
  00155	66 83 c0 01	 add	 ax, 1
  00159	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0015c	66 89 01	 mov	 WORD PTR [ecx], ax

; 340  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  0015f	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00162	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00165	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00168	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0016b	8d 44 48 01	 lea	 eax, DWORD PTR [eax+ecx*2+1]
  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00172	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00175	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00178	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0017c	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0017f	66 8b 00	 mov	 ax, WORD PTR [eax]
  00182	66 83 c0 01	 add	 ax, 1
  00186	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00189	66 89 01	 mov	 WORD PTR [ecx], ax

; 341  : 	
; 342  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0018c	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0018f	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00192	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00195	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00198	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  0019c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0019f	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001a2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001a5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001a9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001ac	66 8b 00	 mov	 ax, WORD PTR [eax]
  001af	66 83 c0 01	 add	 ax, 1
  001b3	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001b6	66 89 01	 mov	 WORD PTR [ecx], ax

; 343  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 1;

  001b9	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001bc	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001bf	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001c2	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001c5	8d 44 48 01	 lea	 eax, DWORD PTR [eax+ecx*2+1]
  001c9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001cc	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001cf	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001d2	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001d6	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001d9	66 8b 00	 mov	 ax, WORD PTR [eax]
  001dc	66 83 c0 01	 add	 ax, 1
  001e0	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001e3	66 89 01	 mov	 WORD PTR [ecx], ax

; 344  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  001e6	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001e9	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001ec	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001ef	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001f2	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  001f6	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001f9	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001fc	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001ff	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00203	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00206	66 8b 00	 mov	 ax, WORD PTR [eax]
  00209	66 83 c0 01	 add	 ax, 1
  0020d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00210	66 89 01	 mov	 WORD PTR [ecx], ax

; 345  : 	
; 346  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00213	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00216	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00219	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0021c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0021f	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00223	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00226	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00229	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0022c	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00230	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00233	66 8b 00	 mov	 ax, WORD PTR [eax]
  00236	66 83 c0 01	 add	 ax, 1
  0023a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0023d	66 89 01	 mov	 WORD PTR [ecx], ax

; 347  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00240	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00243	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00246	40		 inc	 eax
  00247	40		 inc	 eax
  00248	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0024b	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0024e	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00251	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00255	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00258	66 8b 00	 mov	 ax, WORD PTR [eax]
  0025b	66 83 c0 01	 add	 ax, 1
  0025f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00262	66 89 01	 mov	 WORD PTR [ecx], ax

; 348  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00265	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00268	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0026b	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0026e	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00271	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00275	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00278	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0027b	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0027e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00282	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00285	66 8b 00	 mov	 ax, WORD PTR [eax]
  00288	66 83 c0 01	 add	 ax, 1
  0028c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0028f	66 89 01	 mov	 WORD PTR [ecx], ax

; 349  : 	
; 350  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00292	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00295	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00298	40		 inc	 eax
  00299	40		 inc	 eax
  0029a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0029d	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  002a0	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  002a3	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  002a7	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002aa	66 8b 00	 mov	 ax, WORD PTR [eax]
  002ad	66 83 c0 01	 add	 ax, 1
  002b1	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002b4	66 89 01	 mov	 WORD PTR [ecx], ax

; 351  : 	pIndices[rwCount++] = c_rwCurCount;

  002b7	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002ba	0f b7 00	 movzx	 eax, WORD PTR [eax]
  002bd	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  002c0	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  002c3	66 8b 12	 mov	 dx, WORD PTR [edx]
  002c6	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  002ca	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002cd	66 8b 00	 mov	 ax, WORD PTR [eax]
  002d0	66 83 c0 01	 add	 ax, 1
  002d4	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002d7	66 89 01	 mov	 WORD PTR [ecx], ax

; 352  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  002da	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  002dd	0f b7 00	 movzx	 eax, WORD PTR [eax]
  002e0	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  002e3	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  002e6	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  002ea	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002ed	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  002f0	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  002f3	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  002f7	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002fa	66 8b 00	 mov	 ax, WORD PTR [eax]
  002fd	66 83 c0 01	 add	 ax, 1
  00301	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00304	66 89 01	 mov	 WORD PTR [ecx], ax

; 353  : }

  00307	c9		 leave
  00308	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1BL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1BL
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1R, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 307  : 	pIndices[rwCount++] = c_rwCurCount;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00010	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00013	66 8b 12	 mov	 dx, WORD PTR [edx]
  00016	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0001d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00020	66 83 c0 01	 add	 ax, 1
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00027	66 89 01	 mov	 WORD PTR [ecx], ax

; 308  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00036	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0003c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00042	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00046	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00049	66 8b 00	 mov	 ax, WORD PTR [eax]
  0004c	66 83 c0 01	 add	 ax, 1
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00053	66 89 01	 mov	 WORD PTR [ecx], ax

; 309  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00056	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00059	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0005c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0005f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00062	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00069	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0006f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00073	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00076	66 8b 00	 mov	 ax, WORD PTR [eax]
  00079	66 83 c0 01	 add	 ax, 1
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00080	66 89 01	 mov	 WORD PTR [ecx], ax

; 310  : 	
; 311  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00083	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00086	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00089	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0008c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0008f	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00095	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00098	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0009b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0009f	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000a2	66 8b 00	 mov	 ax, WORD PTR [eax]
  000a5	66 83 c0 01	 add	 ax, 1
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ac	66 89 01	 mov	 WORD PTR [ecx], ax

; 312  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000af	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000b2	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000b5	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000b8	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000bb	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000c2	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000c5	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c8	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000cc	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000cf	66 8b 00	 mov	 ax, WORD PTR [eax]
  000d2	66 83 c0 01	 add	 ax, 1
  000d6	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d9	66 89 01	 mov	 WORD PTR [ecx], ax

; 313  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000dc	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000df	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000e2	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000e5	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000e8	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ef	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000f2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000f5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000f9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000fc	66 8b 00	 mov	 ax, WORD PTR [eax]
  000ff	66 83 c0 01	 add	 ax, 1
  00103	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00106	66 89 01	 mov	 WORD PTR [ecx], ax

; 314  : 	
; 315  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00109	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0010c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0010f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00112	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00115	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00119	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0011c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0011f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00122	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00126	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00129	66 8b 00	 mov	 ax, WORD PTR [eax]
  0012c	66 83 c0 01	 add	 ax, 1
  00130	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00133	66 89 01	 mov	 WORD PTR [ecx], ax

; 316  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  00136	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00139	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0013c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0013f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00142	8d 44 08 02	 lea	 eax, DWORD PTR [eax+ecx+2]
  00146	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00149	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0014c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0014f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00153	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00156	66 8b 00	 mov	 ax, WORD PTR [eax]
  00159	66 83 c0 01	 add	 ax, 1
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00160	66 89 01	 mov	 WORD PTR [ecx], ax

; 317  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00163	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00166	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00169	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0016c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0016f	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00173	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00176	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00179	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0017c	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00180	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00183	66 8b 00	 mov	 ax, WORD PTR [eax]
  00186	66 83 c0 01	 add	 ax, 1
  0018a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0018d	66 89 01	 mov	 WORD PTR [ecx], ax

; 318  : 	
; 319  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  00190	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00193	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00196	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00199	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0019c	8d 44 08 02	 lea	 eax, DWORD PTR [eax+ecx+2]
  001a0	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001a3	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001a6	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001a9	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001ad	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001b0	66 8b 00	 mov	 ax, WORD PTR [eax]
  001b3	66 83 c0 01	 add	 ax, 1
  001b7	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001ba	66 89 01	 mov	 WORD PTR [ecx], ax

; 320  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  001bd	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001c0	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001c3	40		 inc	 eax
  001c4	40		 inc	 eax
  001c5	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001c8	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001cb	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001ce	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001d2	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001d5	66 8b 00	 mov	 ax, WORD PTR [eax]
  001d8	66 83 c0 01	 add	 ax, 1
  001dc	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001df	66 89 01	 mov	 WORD PTR [ecx], ax

; 321  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  001e2	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001e5	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001e8	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001eb	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001ee	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  001f2	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001f5	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001f8	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001fb	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001ff	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00202	66 8b 00	 mov	 ax, WORD PTR [eax]
  00205	66 83 c0 01	 add	 ax, 1
  00209	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0020c	66 89 01	 mov	 WORD PTR [ecx], ax

; 322  : 	
; 323  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  0020f	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00212	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00215	40		 inc	 eax
  00216	40		 inc	 eax
  00217	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0021a	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0021d	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00220	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00224	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00227	66 8b 00	 mov	 ax, WORD PTR [eax]
  0022a	66 83 c0 01	 add	 ax, 1
  0022e	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00231	66 89 01	 mov	 WORD PTR [ecx], ax

; 324  : 	pIndices[rwCount++] = c_rwCurCount;

  00234	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00237	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0023a	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  0023d	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00240	66 8b 12	 mov	 dx, WORD PTR [edx]
  00243	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00247	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0024a	66 8b 00	 mov	 ax, WORD PTR [eax]
  0024d	66 83 c0 01	 add	 ax, 1
  00251	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00254	66 89 01	 mov	 WORD PTR [ecx], ax

; 325  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00257	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0025a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0025d	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00260	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00263	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00267	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0026a	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0026d	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00270	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00274	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00277	66 8b 00	 mov	 ax, WORD PTR [eax]
  0027a	66 83 c0 01	 add	 ax, 1
  0027e	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00281	66 89 01	 mov	 WORD PTR [ecx], ax

; 326  : }

  00284	c9		 leave
  00285	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1R@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1R
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1L, COMDAT
; _this$ = ecx

; 283  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 284  : 	pIndices[rwCount++] = c_rwCurCount;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00010	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00013	66 8b 12	 mov	 dx, WORD PTR [edx]
  00016	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0001d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00020	66 83 c0 01	 add	 ax, 1
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00027	66 89 01	 mov	 WORD PTR [ecx], ax

; 285  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00036	03 c1		 add	 eax, ecx
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0003b	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0003e	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00041	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00045	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00048	66 8b 00	 mov	 ax, WORD PTR [eax]
  0004b	66 83 c0 01	 add	 ax, 1
  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00052	66 89 01	 mov	 WORD PTR [ecx], ax

; 286  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00055	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00058	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0005b	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0005e	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00061	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00068	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0006b	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0006e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00072	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00075	66 8b 00	 mov	 ax, WORD PTR [eax]
  00078	66 83 c0 01	 add	 ax, 1
  0007c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0007f	66 89 01	 mov	 WORD PTR [ecx], ax

; 287  : 	
; 288  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  00082	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00085	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00088	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0008b	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0008e	03 c1		 add	 eax, ecx
  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00093	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00096	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00099	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0009d	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000a0	66 8b 00	 mov	 ax, WORD PTR [eax]
  000a3	66 83 c0 01	 add	 ax, 1
  000a7	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000aa	66 89 01	 mov	 WORD PTR [ecx], ax

; 289  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  000ad	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000b0	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000b3	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000b6	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000b9	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  000bc	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000bf	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000c2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000c9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000cc	66 8b 00	 mov	 ax, WORD PTR [eax]
  000cf	66 83 c0 01	 add	 ax, 1
  000d3	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d6	66 89 01	 mov	 WORD PTR [ecx], ax

; 290  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000d9	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000dc	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000df	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000e2	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000e5	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  000e9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ec	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000ef	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000f2	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000f6	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000f9	66 8b 00	 mov	 ax, WORD PTR [eax]
  000fc	66 83 c0 01	 add	 ax, 1
  00100	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00103	66 89 01	 mov	 WORD PTR [ecx], ax

; 291  : 	
; 292  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00106	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00109	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0010c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0010f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00112	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00115	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00118	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0011b	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0011e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00122	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00125	66 8b 00	 mov	 ax, WORD PTR [eax]
  00128	66 83 c0 01	 add	 ax, 1
  0012c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0012f	66 89 01	 mov	 WORD PTR [ecx], ax

; 293  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00132	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00135	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00138	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0013b	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0013e	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00142	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00145	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00148	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0014b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00152	66 8b 00	 mov	 ax, WORD PTR [eax]
  00155	66 83 c0 01	 add	 ax, 1
  00159	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0015c	66 89 01	 mov	 WORD PTR [ecx], ax

; 294  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0015f	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00162	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00165	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00168	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0016b	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00172	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00175	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00178	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0017c	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0017f	66 8b 00	 mov	 ax, WORD PTR [eax]
  00182	66 83 c0 01	 add	 ax, 1
  00186	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00189	66 89 01	 mov	 WORD PTR [ecx], ax

; 295  : 	
; 296  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  0018c	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0018f	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00192	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00195	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00198	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  0019c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0019f	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001a2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001a5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001a9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001ac	66 8b 00	 mov	 ax, WORD PTR [eax]
  001af	66 83 c0 01	 add	 ax, 1
  001b3	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001b6	66 89 01	 mov	 WORD PTR [ecx], ax

; 297  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  001b9	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001bc	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001bf	40		 inc	 eax
  001c0	40		 inc	 eax
  001c1	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001c4	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001c7	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001ca	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001ce	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001d1	66 8b 00	 mov	 ax, WORD PTR [eax]
  001d4	66 83 c0 01	 add	 ax, 1
  001d8	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001db	66 89 01	 mov	 WORD PTR [ecx], ax

; 298  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  001de	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001e1	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001e4	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001e7	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001ea	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  001ee	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001f1	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001f4	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001f7	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001fb	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001fe	66 8b 00	 mov	 ax, WORD PTR [eax]
  00201	66 83 c0 01	 add	 ax, 1
  00205	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00208	66 89 01	 mov	 WORD PTR [ecx], ax

; 299  : 	
; 300  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  0020b	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0020e	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00211	40		 inc	 eax
  00212	40		 inc	 eax
  00213	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00216	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00219	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0021c	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00220	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00223	66 8b 00	 mov	 ax, WORD PTR [eax]
  00226	66 83 c0 01	 add	 ax, 1
  0022a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0022d	66 89 01	 mov	 WORD PTR [ecx], ax

; 301  : 	pIndices[rwCount++] = c_rwCurCount;

  00230	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00233	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00236	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00239	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  0023c	66 8b 12	 mov	 dx, WORD PTR [edx]
  0023f	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00243	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00246	66 8b 00	 mov	 ax, WORD PTR [eax]
  00249	66 83 c0 01	 add	 ax, 1
  0024d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00250	66 89 01	 mov	 WORD PTR [ecx], ax

; 302  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00253	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00256	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00259	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0025c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0025f	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00263	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00266	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00269	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0026c	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00270	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00273	66 8b 00	 mov	 ax, WORD PTR [eax]
  00276	66 83 c0 01	 add	 ax, 1
  0027a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0027d	66 89 01	 mov	 WORD PTR [ecx], ax

; 303  : }

  00280	c9		 leave
  00281	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1L@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1L
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1TR, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 257  : 	pIndices[rwCount++] = c_rwCurCount;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00010	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00013	66 8b 12	 mov	 dx, WORD PTR [edx]
  00016	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0001d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00020	66 83 c0 01	 add	 ax, 1
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00027	66 89 01	 mov	 WORD PTR [ecx], ax

; 258  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00036	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0003c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00042	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00046	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00049	66 8b 00	 mov	 ax, WORD PTR [eax]
  0004c	66 83 c0 01	 add	 ax, 1
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00053	66 89 01	 mov	 WORD PTR [ecx], ax

; 259  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00056	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00059	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0005c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0005f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00062	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00069	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0006f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00073	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00076	66 8b 00	 mov	 ax, WORD PTR [eax]
  00079	66 83 c0 01	 add	 ax, 1
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00080	66 89 01	 mov	 WORD PTR [ecx], ax

; 260  : 	
; 261  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00083	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00086	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00089	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0008c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0008f	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00095	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00098	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0009b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0009f	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000a2	66 8b 00	 mov	 ax, WORD PTR [eax]
  000a5	66 83 c0 01	 add	 ax, 1
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ac	66 89 01	 mov	 WORD PTR [ecx], ax

; 262  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000af	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000b2	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000b5	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000b8	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000bb	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000c2	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000c5	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c8	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000cc	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000cf	66 8b 00	 mov	 ax, WORD PTR [eax]
  000d2	66 83 c0 01	 add	 ax, 1
  000d6	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d9	66 89 01	 mov	 WORD PTR [ecx], ax

; 263  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000dc	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000df	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000e2	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000e5	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000e8	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ef	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000f2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000f5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000f9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000fc	66 8b 00	 mov	 ax, WORD PTR [eax]
  000ff	66 83 c0 01	 add	 ax, 1
  00103	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00106	66 89 01	 mov	 WORD PTR [ecx], ax

; 264  : 	
; 265  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00109	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0010c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0010f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00112	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00115	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00119	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0011c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0011f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00122	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00126	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00129	66 8b 00	 mov	 ax, WORD PTR [eax]
  0012c	66 83 c0 01	 add	 ax, 1
  00130	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00133	66 89 01	 mov	 WORD PTR [ecx], ax

; 266  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  00136	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00139	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0013c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0013f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00142	8d 44 08 02	 lea	 eax, DWORD PTR [eax+ecx+2]
  00146	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00149	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0014c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0014f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00153	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00156	66 8b 00	 mov	 ax, WORD PTR [eax]
  00159	66 83 c0 01	 add	 ax, 1
  0015d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00160	66 89 01	 mov	 WORD PTR [ecx], ax

; 267  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00163	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00166	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00169	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0016c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0016f	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00173	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00176	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00179	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0017c	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00180	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00183	66 8b 00	 mov	 ax, WORD PTR [eax]
  00186	66 83 c0 01	 add	 ax, 1
  0018a	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0018d	66 89 01	 mov	 WORD PTR [ecx], ax

; 268  : 	
; 269  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 2;

  00190	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00193	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00196	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00199	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0019c	8d 44 08 02	 lea	 eax, DWORD PTR [eax+ecx+2]
  001a0	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001a3	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001a6	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001a9	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001ad	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001b0	66 8b 00	 mov	 ax, WORD PTR [eax]
  001b3	66 83 c0 01	 add	 ax, 1
  001b7	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001ba	66 89 01	 mov	 WORD PTR [ecx], ax

; 270  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  001bd	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001c0	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001c3	40		 inc	 eax
  001c4	40		 inc	 eax
  001c5	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001c8	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001cb	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001ce	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001d2	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001d5	66 8b 00	 mov	 ax, WORD PTR [eax]
  001d8	66 83 c0 01	 add	 ax, 1
  001dc	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001df	66 89 01	 mov	 WORD PTR [ecx], ax

; 271  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  001e2	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001e5	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001e8	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001eb	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001ee	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  001f2	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001f5	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001f8	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001fb	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001ff	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00202	66 8b 00	 mov	 ax, WORD PTR [eax]
  00205	66 83 c0 01	 add	 ax, 1
  00209	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0020c	66 89 01	 mov	 WORD PTR [ecx], ax

; 272  : 	
; 273  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  0020f	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00212	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00215	40		 inc	 eax
  00216	40		 inc	 eax
  00217	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0021a	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0021d	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00220	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00224	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00227	66 8b 00	 mov	 ax, WORD PTR [eax]
  0022a	66 83 c0 01	 add	 ax, 1
  0022e	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00231	66 89 01	 mov	 WORD PTR [ecx], ax

; 274  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  00234	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00237	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0023a	40		 inc	 eax
  0023b	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0023e	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00241	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00244	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00248	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0024b	66 8b 00	 mov	 ax, WORD PTR [eax]
  0024e	66 83 c0 01	 add	 ax, 1
  00252	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00255	66 89 01	 mov	 WORD PTR [ecx], ax

; 275  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00258	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0025b	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0025e	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00261	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00264	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00268	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0026b	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0026e	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00271	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00275	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00278	66 8b 00	 mov	 ax, WORD PTR [eax]
  0027b	66 83 c0 01	 add	 ax, 1
  0027f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00282	66 89 01	 mov	 WORD PTR [ecx], ax

; 276  : 
; 277  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  00285	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00288	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0028b	40		 inc	 eax
  0028c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0028f	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00292	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00295	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00299	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0029c	66 8b 00	 mov	 ax, WORD PTR [eax]
  0029f	66 83 c0 01	 add	 ax, 1
  002a3	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002a6	66 89 01	 mov	 WORD PTR [ecx], ax

; 278  : 	pIndices[rwCount++] = c_rwCurCount;

  002a9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002ac	0f b7 00	 movzx	 eax, WORD PTR [eax]
  002af	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  002b2	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  002b5	66 8b 12	 mov	 dx, WORD PTR [edx]
  002b8	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  002bc	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002bf	66 8b 00	 mov	 ax, WORD PTR [eax]
  002c2	66 83 c0 01	 add	 ax, 1
  002c6	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002c9	66 89 01	 mov	 WORD PTR [ecx], ax

; 279  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  002cc	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  002cf	0f b7 00	 movzx	 eax, WORD PTR [eax]
  002d2	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  002d5	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  002d8	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  002dc	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002df	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  002e2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  002e5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  002e9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002ec	66 8b 00	 mov	 ax, WORD PTR [eax]
  002ef	66 83 c0 01	 add	 ax, 1
  002f3	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002f6	66 89 01	 mov	 WORD PTR [ecx], ax

; 280  : }

  002f9	c9		 leave
  002fa	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1TR@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1TR
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1T, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 234  : 	pIndices[rwCount++] = c_rwCurCount;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00010	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00013	66 8b 12	 mov	 dx, WORD PTR [edx]
  00016	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0001d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00020	66 83 c0 01	 add	 ax, 1
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00027	66 89 01	 mov	 WORD PTR [ecx], ax

; 235  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00036	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0003c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0003f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00042	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00046	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00049	66 8b 00	 mov	 ax, WORD PTR [eax]
  0004c	66 83 c0 01	 add	 ax, 1
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00053	66 89 01	 mov	 WORD PTR [ecx], ax

; 236  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00056	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00059	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0005c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0005f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00062	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00069	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0006f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00073	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00076	66 8b 00	 mov	 ax, WORD PTR [eax]
  00079	66 83 c0 01	 add	 ax, 1
  0007d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00080	66 89 01	 mov	 WORD PTR [ecx], ax

; 237  : 	
; 238  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00083	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00086	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00089	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0008c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0008f	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00092	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00095	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00098	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0009b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0009f	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000a2	66 8b 00	 mov	 ax, WORD PTR [eax]
  000a5	66 83 c0 01	 add	 ax, 1
  000a9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ac	66 89 01	 mov	 WORD PTR [ecx], ax

; 239  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  000af	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000b2	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000b5	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000b8	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000bb	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000c2	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000c5	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c8	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000cc	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000cf	66 8b 00	 mov	 ax, WORD PTR [eax]
  000d2	66 83 c0 01	 add	 ax, 1
  000d6	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d9	66 89 01	 mov	 WORD PTR [ecx], ax

; 240  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000dc	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000df	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000e2	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000e5	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000e8	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ef	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000f2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000f5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000f9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000fc	66 8b 00	 mov	 ax, WORD PTR [eax]
  000ff	66 83 c0 01	 add	 ax, 1
  00103	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00106	66 89 01	 mov	 WORD PTR [ecx], ax

; 241  : 	
; 242  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  00109	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0010c	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0010f	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00112	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00115	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  00119	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0011c	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0011f	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00122	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00126	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00129	66 8b 00	 mov	 ax, WORD PTR [eax]
  0012c	66 83 c0 01	 add	 ax, 1
  00130	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00133	66 89 01	 mov	 WORD PTR [ecx], ax

; 243  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00136	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00139	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0013c	40		 inc	 eax
  0013d	40		 inc	 eax
  0013e	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00141	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00144	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00147	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0014b	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0014e	66 8b 00	 mov	 ax, WORD PTR [eax]
  00151	66 83 c0 01	 add	 ax, 1
  00155	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00158	66 89 01	 mov	 WORD PTR [ecx], ax

; 244  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0015b	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0015e	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00161	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00164	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00167	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  0016b	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0016e	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00171	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00174	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00178	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0017b	66 8b 00	 mov	 ax, WORD PTR [eax]
  0017e	66 83 c0 01	 add	 ax, 1
  00182	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00185	66 89 01	 mov	 WORD PTR [ecx], ax

; 245  : 	
; 246  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00188	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0018b	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0018e	40		 inc	 eax
  0018f	40		 inc	 eax
  00190	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00193	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00196	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00199	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0019d	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001a0	66 8b 00	 mov	 ax, WORD PTR [eax]
  001a3	66 83 c0 01	 add	 ax, 1
  001a7	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001aa	66 89 01	 mov	 WORD PTR [ecx], ax

; 247  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  001ad	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001b0	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001b3	40		 inc	 eax
  001b4	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001b7	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001ba	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001bd	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001c1	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001c4	66 8b 00	 mov	 ax, WORD PTR [eax]
  001c7	66 83 c0 01	 add	 ax, 1
  001cb	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001ce	66 89 01	 mov	 WORD PTR [ecx], ax

; 248  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  001d1	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001d4	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001d7	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001da	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001dd	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  001e1	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001e4	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001e7	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001ea	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001ee	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001f1	66 8b 00	 mov	 ax, WORD PTR [eax]
  001f4	66 83 c0 01	 add	 ax, 1
  001f8	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001fb	66 89 01	 mov	 WORD PTR [ecx], ax

; 249  : 	
; 250  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  001fe	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00201	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00204	40		 inc	 eax
  00205	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00208	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0020b	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0020e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00212	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00215	66 8b 00	 mov	 ax, WORD PTR [eax]
  00218	66 83 c0 01	 add	 ax, 1
  0021c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0021f	66 89 01	 mov	 WORD PTR [ecx], ax

; 251  : 	pIndices[rwCount++] = c_rwCurCount;

  00222	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00225	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00228	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  0022b	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  0022e	66 8b 12	 mov	 dx, WORD PTR [edx]
  00231	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00235	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00238	66 8b 00	 mov	 ax, WORD PTR [eax]
  0023b	66 83 c0 01	 add	 ax, 1
  0023f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00242	66 89 01	 mov	 WORD PTR [ecx], ax

; 252  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00245	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00248	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0024b	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0024e	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00251	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00255	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00258	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0025b	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0025e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00262	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00265	66 8b 00	 mov	 ax, WORD PTR [eax]
  00268	66 83 c0 01	 add	 ax, 1
  0026c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0026f	66 89 01	 mov	 WORD PTR [ecx], ax

; 253  : }

  00272	c9		 leave
  00273	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1T@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1T
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\GameLib\MapOutdoorIndexBuffer.cpp
;	COMDAT ?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pIndices$ = 8						; size = 4
_rwCount$ = 12						; size = 4
_c_rwCurCount$ = 16					; size = 4
_c_rucNumLineWarp$ = 20					; size = 4
?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z PROC		; CMapOutdoor::ADDLvl1TL, COMDAT
; _this$ = ecx

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 207  : 	pIndices[rwCount++] = c_rwCurCount;

  00007	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0000a	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  00010	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  00013	66 8b 12	 mov	 dx, WORD PTR [edx]
  00016	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0001d	66 8b 00	 mov	 ax, WORD PTR [eax]
  00020	66 83 c0 01	 add	 ax, 1
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00027	66 89 01	 mov	 WORD PTR [ecx], ax

; 208  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  0002a	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0002d	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00033	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00036	03 c1		 add	 eax, ecx
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0003b	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0003e	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00041	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00045	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00048	66 8b 00	 mov	 ax, WORD PTR [eax]
  0004b	66 83 c0 01	 add	 ax, 1
  0004f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00052	66 89 01	 mov	 WORD PTR [ecx], ax

; 209  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00055	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00058	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0005b	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0005e	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00061	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00068	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0006b	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0006e	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00072	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00075	66 8b 00	 mov	 ax, WORD PTR [eax]
  00078	66 83 c0 01	 add	 ax, 1
  0007c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0007f	66 89 01	 mov	 WORD PTR [ecx], ax

; 210  : 
; 211  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp;

  00082	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00085	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00088	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0008b	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0008e	03 c1		 add	 eax, ecx
  00090	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00093	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00096	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00099	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0009d	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000a0	66 8b 00	 mov	 ax, WORD PTR [eax]
  000a3	66 83 c0 01	 add	 ax, 1
  000a7	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000aa	66 89 01	 mov	 WORD PTR [ecx], ax

; 212  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  000ad	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000b0	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000b3	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000b6	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000b9	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  000bc	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000bf	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000c2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000c5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000c9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000cc	66 8b 00	 mov	 ax, WORD PTR [eax]
  000cf	66 83 c0 01	 add	 ax, 1
  000d3	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000d6	66 89 01	 mov	 WORD PTR [ecx], ax

; 213  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  000d9	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  000dc	0f b7 00	 movzx	 eax, WORD PTR [eax]
  000df	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  000e2	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000e5	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  000e9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  000ec	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  000ef	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  000f2	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  000f6	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  000f9	66 8b 00	 mov	 ax, WORD PTR [eax]
  000fc	66 83 c0 01	 add	 ax, 1
  00100	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00103	66 89 01	 mov	 WORD PTR [ecx], ax

; 214  : 
; 215  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00106	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00109	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0010c	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0010f	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00112	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00116	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00119	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0011c	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0011f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00123	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00126	66 8b 00	 mov	 ax, WORD PTR [eax]
  00129	66 83 c0 01	 add	 ax, 1
  0012d	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00130	66 89 01	 mov	 WORD PTR [ecx], ax

; 216  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2;

  00133	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00136	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00139	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0013c	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0013f	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]
  00142	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00145	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00148	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0014b	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0014f	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00152	66 8b 00	 mov	 ax, WORD PTR [eax]
  00155	66 83 c0 01	 add	 ax, 1
  00159	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0015c	66 89 01	 mov	 WORD PTR [ecx], ax

; 217  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  0015f	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00162	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00165	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00168	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0016b	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  0016f	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00172	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00175	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00178	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0017c	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0017f	66 8b 00	 mov	 ax, WORD PTR [eax]
  00182	66 83 c0 01	 add	 ax, 1
  00186	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00189	66 89 01	 mov	 WORD PTR [ecx], ax

; 218  : 
; 219  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0018c	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0018f	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00192	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00195	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00198	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  0019c	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0019f	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001a2	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001a5	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001a9	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001ac	66 8b 00	 mov	 ax, WORD PTR [eax]
  001af	66 83 c0 01	 add	 ax, 1
  001b3	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001b6	66 89 01	 mov	 WORD PTR [ecx], ax

; 220  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp * 2 + 2;

  001b9	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001bc	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001bf	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  001c2	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  001c5	8d 44 48 02	 lea	 eax, DWORD PTR [eax+ecx*2+2]
  001c9	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001cc	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001cf	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001d2	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001d6	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001d9	66 8b 00	 mov	 ax, WORD PTR [eax]
  001dc	66 83 c0 01	 add	 ax, 1
  001e0	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001e3	66 89 01	 mov	 WORD PTR [ecx], ax

; 221  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  001e6	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  001e9	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001ec	40		 inc	 eax
  001ed	40		 inc	 eax
  001ee	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  001f1	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  001f4	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  001f7	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  001fb	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  001fe	66 8b 00	 mov	 ax, WORD PTR [eax]
  00201	66 83 c0 01	 add	 ax, 1
  00205	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00208	66 89 01	 mov	 WORD PTR [ecx], ax

; 222  : 
; 223  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  0020b	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0020e	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00211	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  00214	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00217	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  0021b	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0021e	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00221	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00224	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00228	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  0022b	66 8b 00	 mov	 ax, WORD PTR [eax]
  0022e	66 83 c0 01	 add	 ax, 1
  00232	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00235	66 89 01	 mov	 WORD PTR [ecx], ax

; 224  : 	pIndices[rwCount++] = c_rwCurCount + 2;

  00238	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  0023b	0f b7 00	 movzx	 eax, WORD PTR [eax]
  0023e	40		 inc	 eax
  0023f	40		 inc	 eax
  00240	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00243	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00246	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  00249	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0024d	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00250	66 8b 00	 mov	 ax, WORD PTR [eax]
  00253	66 83 c0 01	 add	 ax, 1
  00257	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0025a	66 89 01	 mov	 WORD PTR [ecx], ax

; 225  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  0025d	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00260	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00263	40		 inc	 eax
  00264	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00267	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  0026a	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0026d	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00271	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  00274	66 8b 00	 mov	 ax, WORD PTR [eax]
  00277	66 83 c0 01	 add	 ax, 1
  0027b	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  0027e	66 89 01	 mov	 WORD PTR [ecx], ax

; 226  : 
; 227  : 	pIndices[rwCount++] = c_rwCurCount + c_rucNumLineWarp + 1;

  00281	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  00284	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00287	8b 4d 14	 mov	 ecx, DWORD PTR _c_rucNumLineWarp$[ebp]
  0028a	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0028d	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  00291	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  00294	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  00297	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  0029a	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0029e	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002a1	66 8b 00	 mov	 ax, WORD PTR [eax]
  002a4	66 83 c0 01	 add	 ax, 1
  002a8	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002ab	66 89 01	 mov	 WORD PTR [ecx], ax

; 228  : 	pIndices[rwCount++] = c_rwCurCount + 1;

  002ae	8b 45 10	 mov	 eax, DWORD PTR _c_rwCurCount$[ebp]
  002b1	0f b7 00	 movzx	 eax, WORD PTR [eax]
  002b4	40		 inc	 eax
  002b5	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002b8	0f b7 09	 movzx	 ecx, WORD PTR [ecx]
  002bb	8b 55 08	 mov	 edx, DWORD PTR _pIndices$[ebp]
  002be	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  002c2	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002c5	66 8b 00	 mov	 ax, WORD PTR [eax]
  002c8	66 83 c0 01	 add	 ax, 1
  002cc	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002cf	66 89 01	 mov	 WORD PTR [ecx], ax

; 229  : 	pIndices[rwCount++] = c_rwCurCount;

  002d2	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002d5	0f b7 00	 movzx	 eax, WORD PTR [eax]
  002d8	8b 4d 08	 mov	 ecx, DWORD PTR _pIndices$[ebp]
  002db	8b 55 10	 mov	 edx, DWORD PTR _c_rwCurCount$[ebp]
  002de	66 8b 12	 mov	 dx, WORD PTR [edx]
  002e1	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  002e5	8b 45 0c	 mov	 eax, DWORD PTR _rwCount$[ebp]
  002e8	66 8b 00	 mov	 ax, WORD PTR [eax]
  002eb	66 83 c0 01	 add	 ax, 1
  002ef	8b 4d 0c	 mov	 ecx, DWORD PTR _rwCount$[ebp]
  002f2	66 89 01	 mov	 WORD PTR [ecx], ax

; 230  : }

  002f5	c9		 leave
  002f6	c2 10 00	 ret	 16			; 00000010H
?ADDLvl1TL@CMapOutdoor@@IAEXPAGAAGABGABE@Z ENDP		; CMapOutdoor::ADDLvl1TL
_TEXT	ENDS
END
