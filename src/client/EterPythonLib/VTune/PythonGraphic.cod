; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_isScreenShotKey@@3_NA			; g_isScreenShotKey
_BSS	SEGMENT
?g_isScreenShotKey@@3_NA DB 01H DUP (?)			; g_isScreenShotKey
_BSS	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ	; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>
PUBLIC	??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z	; CSingleton<CPythonGraphic>::`scalar deleting destructor'
PUBLIC	??0CPythonGraphic@@QAE@XZ			; CPythonGraphic::CPythonGraphic
PUBLIC	??1CPythonGraphic@@UAE@XZ			; CPythonGraphic::~CPythonGraphic
PUBLIC	?Destroy@CPythonGraphic@@QAEXXZ			; CPythonGraphic::Destroy
PUBLIC	?PushState@CPythonGraphic@@QAEXXZ		; CPythonGraphic::PushState
PUBLIC	?PopState@CPythonGraphic@@QAEXXZ		; CPythonGraphic::PopState
PUBLIC	?GetD3D@CPythonGraphic@@QAEPAUIDirect3D8@@XZ	; CPythonGraphic::GetD3D
PUBLIC	?GetOrthoDepth@CPythonGraphic@@QAEMXZ		; CPythonGraphic::GetOrthoDepth
PUBLIC	?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ	; CPythonGraphic::SetInterfaceRenderState
PUBLIC	?SetGameRenderState@CPythonGraphic@@QAEXXZ	; CPythonGraphic::SetGameRenderState
PUBLIC	?SetCursorPosition@CPythonGraphic@@QAEXHH@Z	; CPythonGraphic::SetCursorPosition
PUBLIC	?SetOmniLight@CPythonGraphic@@QAEXXZ		; CPythonGraphic::SetOmniLight
PUBLIC	?SetViewport@CPythonGraphic@@QAEXMMMM@Z		; CPythonGraphic::SetViewport
PUBLIC	?RestoreViewport@CPythonGraphic@@QAEXXZ		; CPythonGraphic::RestoreViewport
PUBLIC	?GenerateColor@CPythonGraphic@@QAEJMMMM@Z	; CPythonGraphic::GenerateColor
PUBLIC	?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z	; CPythonGraphic::RenderDownButton
PUBLIC	?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z	; CPythonGraphic::RenderUpButton
PUBLIC	?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z ; CPythonGraphic::RenderImage
PUBLIC	?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z ; CPythonGraphic::RenderAlphaImage
PUBLIC	?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z	; CPythonGraphic::RenderCoolTimeBox
PUBLIC	?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z	; CPythonGraphic::SaveJPEG
PUBLIC	?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z	; CPythonGraphic::SaveScreenShot
PUBLIC	?GetAvailableMemory@CPythonGraphic@@QAEKXZ	; CPythonGraphic::GetAvailableMemory
PUBLIC	?SetGamma@CPythonGraphic@@QAEXM@Z		; CPythonGraphic::SetGamma
PUBLIC	??0?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
PUBLIC	??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
PUBLIC	?_Unchecked_end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Unchecked_end
PUBLIC	?back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::back
PUBLIC	?pop_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::pop_back
PUBLIC	?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@ABEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Xlen
PUBLIC	?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXI@Z ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap
PUBLIC	?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Tidy
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >
PUBLIC	?empty@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE_NXZ ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::empty
PUBLIC	??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
PUBLIC	??_GCPythonGraphic@@UAEPAXI@Z			; CPythonGraphic::`scalar deleting destructor'
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?GenScreenShotTag@@YAXPBDKPADI@Z		; GenScreenShotTag
PUBLIC	?deallocate@?$allocator@USPDTVertex@@@std@@QAEXQAUSPDTVertex@@I@Z ; std::allocator<SPDTVertex>::deallocate
PUBLIC	??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
PUBLIC	?_Destroy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXPAUSPDTVertex@@0@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@ABEII@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXQAUSPDTVertex@@II@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Change_array
PUBLIC	?_Tidy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Tidy
PUBLIC	?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength
PUBLIC	??0?$_Vector_val@U?$_Simple_types@USPDTVertex@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SPDTVertex> >::_Vector_val<std::_Simple_types<SPDTVertex> >
PUBLIC	??$emplace_back@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::emplace_back<SPDTVertex const &>
PUBLIC	??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Destroy_in_place@PAUSState@CPythonGraphic@@@std@@YAXAAPAUSState@CPythonGraphic@@@Z ; std::_Destroy_in_place<CPythonGraphic::SState *>
PUBLIC	??$_Emplace_back_internal@ABUSState@CPythonGraphic@@@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXABUSState@CPythonGraphic@@@Z ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Emplace_back_internal<CPythonGraphic::SState const &>
PUBLIC	??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEABUSState@CPythonGraphic@@XZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator*
PUBLIC	??$_Destroy_range@V?$allocator@USPDTVertex@@@std@@@std@@YAXPAUSPDTVertex@@QAU1@AAV?$allocator@USPDTVertex@@@0@@Z ; std::_Destroy_range<std::allocator<SPDTVertex> >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Uninitialized_move@PAUSPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@YAPAUSPDTVertex@@QAU1@0PAU1@AAV?$allocator@USPDTVertex@@@0@@Z ; std::_Uninitialized_move<SPDTVertex *,std::allocator<SPDTVertex> >
PUBLIC	??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CPythonGraphic::SState * *,unsigned int>
PUBLIC	??$_Destroy_range@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAXPAPAUSState@CPythonGraphic@@QAPAU12@@Z ; std::_Destroy_range<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
PUBLIC	??$_Copy_memmove@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
PUBLIC	??$_Zero_range@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0@Z ; std::_Zero_range<CPythonGraphic::SState * *>
PUBLIC	??_ECPythonGraphic@@W3AEPAXI@Z			; [thunk]:CPythonGraphic::`vector deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
PUBLIC	??_7?$CSingleton@VCPythonGraphic@@@@6B@		; CSingleton<CPythonGraphic>::`vftable'
PUBLIC	??_7CPythonGraphic@@6BCScreen@@@		; CPythonGraphic::`vftable'
PUBLIC	??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ ; CPythonGraphic::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CSingleton@VCPythonGraphic@@@@6B@	; CSingleton<CPythonGraphic>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8	; CSingleton<CPythonGraphic> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCPythonGraphic@@@@8		; CSingleton<CPythonGraphic>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCPythonGraphic@@@@8		; CSingleton<CPythonGraphic>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8	; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0@ ; `string'
PUBLIC	??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x@ ; `string'
PUBLIC	??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF0@ ; `string'
PUBLIC	??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF@ ; `string'
PUBLIC	??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CF@ ; `string'
PUBLIC	??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF@ ; `string'
PUBLIC	??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5b@ ; `string'
PUBLIC	??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6@	; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4CPythonGraphic@@6BCScreen@@@		; CPythonGraphic::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPythonGraphic@@@8			; CPythonGraphic `RTTI Type Descriptor'
PUBLIC	??_R3CPythonGraphic@@8				; CPythonGraphic::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPythonGraphic@@8				; CPythonGraphic::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPythonGraphic@@8			; CPythonGraphic::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8	; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ ; CPythonGraphic::`RTTI Complete Object Locator'
PUBLIC	__real@00000000
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3c23d70a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3f000000
PUBLIC	__real@3f060a92
PUBLIC	__real@3f490fdb
PUBLIC	__real@3f800000
PUBLIC	__real@41000000
PUBLIC	__real@42480000
PUBLIC	__real@43160000
PUBLIC	__real@43480000
PUBLIC	__real@437f0000
PUBLIC	__real@43af0000
PUBLIC	__real@43fa0000
PUBLIC	__real@447a0000
PUBLIC	__real@be19999a
PUBLIC	__real@be99999a
PUBLIC	__real@bf666666
PUBLIC	__real@bf800000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_strchr:PROC
EXTRN	_strlen:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fputc:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_ftell:PROC
EXTRN	_fwrite:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?SetOrtho2D@CGraphicBase@@QAEXMMM@Z:PROC	; CGraphicBase::SetOrtho2D
EXTRN	?GetColor@CGraphicBase@@QAEKMMMM@Z:PROC		; CGraphicBase::GetColor
EXTRN	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z:PROC ; CGraphicBase::SetDefaultIndexBuffer
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	?UpdatePipeLineMatrix@CGraphicBase@@IAEXXZ:PROC	; CGraphicBase::UpdatePipeLineMatrix
EXTRN	?SetTextureStage@CGraphicTexture@@QBEXH@Z:PROC	; CGraphicTexture::SetTextureStage
EXTRN	?GetWidth@CGraphicImageInstance@@QAEHXZ:PROC	; CGraphicImageInstance::GetWidth
EXTRN	?GetHeight@CGraphicImageInstance@@QAEHXZ:PROC	; CGraphicImageInstance::GetHeight
EXTRN	?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTexturePointer
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?RenderLine2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderLine2d
EXTRN	?RenderBox2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderBox2d
EXTRN	?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z:PROC	; CScreen::RenderTextureBox
EXTRN	?SetBlendOperation@CScreen@@QAEXXZ:PROC		; CScreen::SetBlendOperation
EXTRN	?SetDiffuseColor@CScreen@@QAEXK@Z:PROC		; CScreen::SetDiffuseColor
EXTRN	?SetCursorPosition@CScreen@@QAEXHHHH@Z:PROC	; CScreen::SetCursorPosition
EXTRN	??0CCullingManager@@QAE@XZ:PROC			; CCullingManager::CCullingManager
EXTRN	??1CCullingManager@@UAE@XZ:PROC			; CCullingManager::~CCullingManager
EXTRN	??_E?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z:PROC ; CSingleton<CPythonGraphic>::`vector deleting destructor'
EXTRN	??_ECPythonGraphic@@UAEPAXI@Z:PROC		; CPythonGraphic::`vector deleting destructor'
EXTRN	?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z:PROC ; CStateManager::SetMaterial
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SaveTextureStageState
EXTRN	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z:PROC ; CStateManager::RestoreTextureStageState
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetVertexShader@CStateManager@@QAEXK@Z:PROC	; CStateManager::SetVertexShader
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z:PROC ; CStateManager::DrawPrimitive
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	?jpeg_save@@YAHPAEHHHPBD@Z:PROC			; jpeg_save
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftoui3:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A:BYTE ; CGraphicBase::ms_matIdentity
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:BYTE	; CGraphicBase::ms_matView
EXTRN	?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A:BYTE	; CGraphicBase::ms_matProj
EXTRN	?ms_iWidth@CGraphicBase@@1HA:DWORD		; CGraphicBase::ms_iWidth
EXTRN	?ms_iHeight@CGraphicBase@@1HA:DWORD		; CGraphicBase::ms_iHeight
EXTRN	?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A:DWORD	; CGraphicBase::ms_lpd3d
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	?ms_pntVS@CGraphicBase@@1KA:DWORD		; CGraphicBase::ms_pntVS
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A DD 01H DUP (?) ; CSingleton<CPythonGraphic>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
_BSS	SEGMENT
?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A DB 010H DUP (?) ; `CPythonGraphic::RenderCoolTimeBox'::`2'::color
_BSS	ENDS
;	COMDAT ?$TSS0@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA DD 01H DUP (?) ; `CPythonGraphic::RenderCoolTimeBox'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A
_BSS	SEGMENT
?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A DQ 08H DUP (?) ; `CPythonGraphic::RenderCoolTimeBox'::`2'::s_v2BoxPos
_BSS	ENDS
;	COMDAT ?$TSS1@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA
_BSS	SEGMENT
?$TSS1@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA DD 01H DUP (?) ; `CPythonGraphic::RenderCoolTimeBox'::`2'::$TSS1
_BSS	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be19999a
CONST	SEGMENT
__real@be19999a DD 0be19999ar			; -0.15
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43af0000
CONST	SEGMENT
__real@43af0000 DD 043af0000r			; 350
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f490fdb
CONST	SEGMENT
__real@3f490fdb DD 03f490fdbr			; 0.785398
CONST	ENDS
;	COMDAT __real@3f060a92
CONST	SEGMENT
__real@3f060a92 DD 03f060a92r			; 0.523599
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@
rdata$r	SEGMENT
??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ DD 00H ; CPythonGraphic::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCPythonGraphic@@@8
	DD	FLAT:??_R3CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8 ; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonGraphic@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonGraphic@@8 DD FLAT:??_R0?AVCPythonGraphic@@@8 ; CPythonGraphic::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_R2CPythonGraphic@@8
rdata$r	SEGMENT
??_R2CPythonGraphic@@8 DD FLAT:??_R1A@?0A@EA@CPythonGraphic@@8 ; CPythonGraphic::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CPythonGraphic@@8
rdata$r	SEGMENT
??_R3CPythonGraphic@@8 DD 00H				; CPythonGraphic::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonGraphic@@@8
data$rs	SEGMENT
??_R0?AVCPythonGraphic@@@8 DD FLAT:??_7type_info@@6B@	; CPythonGraphic `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonGraphic@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CPythonGraphic@@6BCScreen@@@
rdata$r	SEGMENT
??_R4CPythonGraphic@@6BCScreen@@@ DD 00H		; CPythonGraphic::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonGraphic@@@8
	DD	FLAT:??_R3CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6@
CONST	SEGMENT
??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6@ DB 'Python Graphic Clear', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5@
CONST	SEGMENT
??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5@ DB 'Fai'
	DB	'led to save JPEG file. (%s, %d, %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5b@
CONST	SEGMENT
??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5b@ DB 'Failed to allo'
	DB	'cate screenshot buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF@
CONST	SEGMENT
??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF@ DB 'Failed'
	DB	' to lock the surface (0x%08x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CF@
CONST	SEGMENT
??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CF@ DB 'Unsupport'
	DB	'ed BackBuffer Format(%d). Please contact Metin 2 Administrato'
	DB	'r.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF@
CONST	SEGMENT
??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF@ DB 'Failed'
	DB	' to get surface desc (0x%08x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF0@
CONST	SEGMENT
??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF0@ DB 'Failed'
	DB	' to get back buffer (0x%08x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x@
CONST	SEGMENT
??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x@ DB 'YMIR_METIN2:%s:0x%'
	DB	'.8x', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0@
CONST	SEGMENT
??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0@ DB 'CPythonG'
	DB	'raphic::SetViewport(%d, %d, %d, %d) - Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8 ; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPythonGraphic@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8 ; CSingleton<CPythonGraphic>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPythonGraphic@@@@8 DD 00H		; CSingleton<CPythonGraphic>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPythonGraphic> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPythonGraphic@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CSingleton@VCPythonGraphic@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPythonGraphic@@@@6B@ DD 00H		; CSingleton<CPythonGraphic>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@
CONST	SEGMENT
??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ DD FLAT:??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ ; CPythonGraphic::`vftable'
	DD	FLAT:??_ECPythonGraphic@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CPythonGraphic@@6BCScreen@@@
CONST	SEGMENT
??_7CPythonGraphic@@6BCScreen@@@ DD FLAT:??_R4CPythonGraphic@@6BCScreen@@@ ; CPythonGraphic::`vftable'
	DD	FLAT:??_ECPythonGraphic@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCPythonGraphic@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPythonGraphic@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPythonGraphic@@@@6B@ ; CSingleton<CPythonGraphic>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z$32 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z$32
__ehfuncinfo$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z$2
__ehfuncinfo$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CPythonGraphic@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CPythonGraphic@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CPythonGraphic@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CPythonGraphic@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$1
	DD	01H
	DD	FLAT:___std_terminate
	DD	01H
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$3
xdata$x	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_ECPythonGraphic@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECPythonGraphic@@W3AEPAXI@Z PROC			; [thunk]:CPythonGraphic::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECPythonGraphic@@UAEPAXI@Z
??_ECPythonGraphic@@W3AEPAXI@Z ENDP			; [thunk]:CPythonGraphic::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0@Z
_TEXT	SEGMENT
__Last_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0@Z PROC ; std::_Zero_range<CPythonGraphic::SState * *>, COMDAT

; 1852 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 1853 :     char* const _First_ch = reinterpret_cast<char*>(_First);

  00005	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00008	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 1854 :     char* const _Last_ch  = reinterpret_cast<char*>(_Last);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000e	89 45 f8	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 1855 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00011	8b 45 f8	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  00014	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  00017	50		 push	 eax
  00018	6a 00		 push	 0
  0001a	ff 75 fc	 push	 DWORD PTR __First_ch$[ebp]
  0001d	e8 00 00 00 00	 call	 _memset
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1856 :     return _Last;

  00025	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 1857 : }

  00028	c9		 leave
  00029	c3		 ret	 0
??$_Zero_range@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0@Z ENDP ; std::_Zero_range<CPythonGraphic::SState * *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00@Z
_TEXT	SEGMENT
__Last_ch$ = -16					; size = 4
__Count$ = -12						; size = 4
__Dest_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CPythonGraphic::SState * *,CPythonGraphic::SState * *>, COMDAT

; 4360 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 4361 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 4362 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 f0	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 4363 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f8	 mov	 DWORD PTR __Dest_ch$[ebp], eax

; 4364 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00018	8b 45 f0	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0001b	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0001e	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax

; 4365 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00021	ff 75 f4	 push	 DWORD PTR __Count$[ebp]
  00024	ff 75 fc	 push	 DWORD PTR __First_ch$[ebp]
  00027	ff 75 f8	 push	 DWORD PTR __Dest_ch$[ebp]
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4366 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00035	03 45 f4	 add	 eax, DWORD PTR __Count$[ebp]

; 4367 : }

  00038	c9		 leave
  00039	c3		 ret	 0
??$_Copy_memmove@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAXPAPAUSState@CPythonGraphic@@QAPAU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Destroy_range@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAXPAPAUSState@CPythonGraphic@@QAPAU12@@Z PROC ; std::_Destroy_range<CPythonGraphic::SState * *,CPythonGraphic::SState * *>, COMDAT

; 974  : /* _CONSTEXPR20_DYNALLOC */ void _Destroy_range(_NoThrowFwdIt _First, const _NoThrowSentinel _Last) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 975  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 976  :     if _CONSTEXPR_IF (!is_trivially_destructible_v<_Iter_value_t<_NoThrowFwdIt>>) {
; 977  :         for (; _First != _Last; ++_First) {
; 978  :             _Destroy_in_place(*_First);
; 979  :         }
; 980  :     }
; 981  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAXPAPAUSState@CPythonGraphic@@QAPAU12@@Z ENDP ; std::_Destroy_range<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<CPythonGraphic::SState * *,unsigned int>, COMDAT

; 1912 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1913 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1914 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1915 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1916 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	50		 push	 eax
  0000d	ff 75 08	 push	 DWORD PTR __UFirst$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0@Z ; std::_Zero_range<CPythonGraphic::SState * *>
  00015	59		 pop	 ecx
  00016	59		 pop	 ecx

; 1917 :     } else {
; 1918 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1919 :         for (; 0 < _Count; --_Count) {
; 1920 :             _Backout._Emplace_back();
; 1921 :         }
; 1922 : 
; 1923 :         return _Backout._Release();
; 1924 :     }
; 1925 : }

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<CPythonGraphic::SState * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
__UFirst$ = -12						; size = 4
__ULast$ = -8						; size = 4
__UDest$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z PROC ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>, COMDAT

; 1629 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1630 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1631 :     _Adl_verify_range(_First, _Last);
; 1632 :     auto _UFirst      = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f4	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1633 :     const auto _ULast = _Get_unwrapped(_Last);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1557 :         return static_cast<_Iter_diff_t<_Checked>>(_Last - _First);

  00012	8b 45 f8	 mov	 eax, DWORD PTR __ULast$[ebp]
  00015	2b 45 f4	 sub	 eax, DWORD PTR __UFirst$[ebp]
  00018	c1 f8 02	 sar	 eax, 2
  0001b	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1634 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00021	89 45 fc	 mov	 DWORD PTR __UDest$[ebp], eax

; 1635 :     if constexpr (_Ptr_copy_cat<decltype(_UFirst), decltype(_UDest)>::_Really_trivial) {
; 1636 :         _UDest = _Copy_memmove(_UFirst, _ULast, _UDest);

  00024	ff 75 fc	 push	 DWORD PTR __UDest$[ebp]
  00027	ff 75 f8	 push	 DWORD PTR __ULast$[ebp]
  0002a	ff 75 f4	 push	 DWORD PTR __UFirst$[ebp]
  0002d	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	89 45 fc	 mov	 DWORD PTR __UDest$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1492 :         _It = static_cast<_UIter&&>(_UIt);

  00038	8b 45 fc	 mov	 eax, DWORD PTR __UDest$[ebp]
  0003b	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1647 :     return _Dest;

  0003e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1648 : }

  00041	c9		 leave
  00042	c3		 ret	 0
??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ENDP ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@YAPAUSPDTVertex@@QAU1@0PAU1@AAV?$allocator@USPDTVertex@@@0@@Z
_TEXT	SEGMENT
__Backout$1 = -52					; size = 12
___formal$ = -40					; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
__Ptr$ = -16						; size = 4
$T7 = -12						; size = 4
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@YAPAUSPDTVertex@@QAU1@0PAU1@AAV?$allocator@USPDTVertex@@@0@@Z PROC ; std::_Uninitialized_move<SPDTVertex *,std::allocator<SPDTVertex> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

  00008	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000b	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00014	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00017	89 45 cc	 mov	 DWORD PTR __Backout$1[ebp], eax
  0001a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001d	89 45 d0	 mov	 DWORD PTR __Backout$1[ebp+4], eax
  00020	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00023	89 45 d4	 mov	 DWORD PTR __Backout$1[ebp+8], eax

; 1691 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1692 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1694 :         return _Dest + (_ULast - _UFirst);
; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {

  00026	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00028	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0002b	83 c0 18	 add	 eax, 24			; 00000018H
  0002e	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
  00031	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00034	3b 45 f8	 cmp	 eax, DWORD PTR __ULast$[ebp]
  00037	74 40		 je	 SHORT $LN3@Uninitiali
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00039	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0003c	89 45 f4	 mov	 DWORD PTR $T7[ebp], eax

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003f	8b 45 f4	 mov	 eax, DWORD PTR $T7[ebp]
  00042	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00045	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00048	89 45 f0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0004b	8b 45 f0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0004e	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00051	8b 45 d4	 mov	 eax, DWORD PTR __Backout$1[ebp+8]
  00054	89 45 d8	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00057	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp]
  0005a	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0005d	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  00060	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00063	6a 06		 push	 6
  00065	59		 pop	 ecx
  00066	8b 75 e4	 mov	 esi, DWORD PTR $T4[ebp]
  00069	8b 7d e0	 mov	 edi, DWORD PTR $T3[ebp]
  0006c	f3 a5		 rep movsd

; 1547 :         ++_Last;

  0006e	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00071	83 c0 18	 add	 eax, 24			; 00000018H
  00074	89 45 d0	 mov	 DWORD PTR __Backout$1[ebp+4], eax

; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1699 :         }

  00077	eb af		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1551 :         _First = _Last;

  00079	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  0007c	89 45 cc	 mov	 DWORD PTR __Backout$1[ebp], eax

; 1552 :         return _Last;

  0007f	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00082	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax

; 1541 :         _Destroy_range(_First, _Last, _Al);

  00085	ff 75 d4	 push	 DWORD PTR __Backout$1[ebp+8]
  00088	ff 75 d0	 push	 DWORD PTR __Backout$1[ebp+4]
  0008b	ff 75 cc	 push	 DWORD PTR __Backout$1[ebp]
  0008e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USPDTVertex@@@std@@@std@@YAXPAUSPDTVertex@@QAU1@AAV?$allocator@USPDTVertex@@@0@@Z ; std::_Destroy_range<std::allocator<SPDTVertex> >
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1700 : 
; 1701 :         return _Backout._Release();

  00096	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]

; 1702 :     }
; 1703 : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	c9		 leave
  0009c	c3		 ret	 0
??$_Uninitialized_move@PAUSPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@YAPAUSPDTVertex@@QAU1@0PAU1@AAV?$allocator@USPDTVertex@@@0@@Z ENDP ; std::_Uninitialized_move<SPDTVertex *,std::allocator<SPDTVertex> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
__Mycont_$ = -16					; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0000c	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00018	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	89 45 f0	 mov	 DWORD PTR __Mycont_$[ebp], eax

; 1089 :     _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_), _Myfirstiter(nullptr) {}

  00020	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  00023	8b 4d f0	 mov	 ecx, DWORD PTR __Mycont_$[ebp]
  00026	89 08		 mov	 DWORD PTR [eax], ecx
  00028	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0002b	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0002f	c9		 leave
  00030	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1003 : void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00003	33 c0		 xor	 eax, eax
  00005	40		 inc	 eax
  00006	c1 e0 03	 shl	 eax, 3
  00009	50		 push	 eax
  0000a	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00012	59		 pop	 ecx
  00013	59		 pop	 ecx

; 1004 :     // deallocate a plain pointer using an allocator
; 1005 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1006 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1007 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);
; 1008 :     } else {
; 1009 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1010 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1011 :     }
; 1012 : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USPDTVertex@@@std@@@std@@YAXPAUSPDTVertex@@QAU1@AAV?$allocator@USPDTVertex@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USPDTVertex@@@std@@@std@@YAXPAUSPDTVertex@@QAU1@AAV?$allocator@USPDTVertex@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SPDTVertex> >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@USPDTVertex@@@std@@@std@@YAXPAUSPDTVertex@@QAU1@AAV?$allocator@USPDTVertex@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SPDTVertex> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEABUSState@CPythonGraphic@@XZ
_TEXT	SEGMENT
__Block$ = -20						; size = 4
__Off$ = -16						; size = 4
__Off$ = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEABUSState@CPythonGraphic@@XZ PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator*, COMDAT
; _this$ = ecx

; 54   :     _NODISCARD reference operator*() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   :         _Size_type _Block = _Mycont->_Getblock(_Myoff);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	89 45 f4	 mov	 DWORD PTR __Off$[ebp], eax
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 00		 mov	 eax, DWORD PTR [eax]
  00017	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 548  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  0001a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00020	48		 dec	 eax
  00021	23 45 f4	 and	 eax, DWORD PTR __Off$[ebp]
  00024	89 45 ec	 mov	 DWORD PTR __Block$[ebp], eax

; 56   :         _Size_type _Off   = _Myoff % _DEQUESIZ;

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002d	33 d2		 xor	 edx, edx
  0002f	33 c9		 xor	 ecx, ecx
  00031	41		 inc	 ecx
  00032	f7 f1		 div	 ecx
  00034	89 55 f0	 mov	 DWORD PTR __Off$[ebp], edx

; 57   :         return _Mycont->_Map[_Block][_Off];

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR __Off$[ebp]
  00042	c1 e1 07	 shl	 ecx, 7
  00045	8b 55 ec	 mov	 edx, DWORD PTR __Block$[ebp]
  00048	03 0c 90	 add	 ecx, DWORD PTR [eax+edx*4]
  0004b	8b c1		 mov	 eax, ecx

; 58   :     }

  0004d	c9		 leave
  0004e	c3		 ret	 0
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEABUSState@CPythonGraphic@@XZ ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ??$_Emplace_back_internal@ABUSState@CPythonGraphic@@@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXABUSState@CPythonGraphic@@@Z
_TEXT	SEGMENT
$T1 = -60						; size = 4
$T2 = -56						; size = 4
__Max_possible$3 = -52					; size = 4
$T4 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
$T8 = -32						; size = 4
$T9 = -28						; size = 4
$T10 = -24						; size = 4
$T11 = -20						; size = 4
__Ptr$ = -16						; size = 4
$T12 = -12						; size = 4
$T13 = -8						; size = 4
$T14 = -4						; size = 4
$T15 = 0						; size = 4
$T16 = 4						; size = 4
$T17 = 8						; size = 4
$T18 = 12						; size = 4
$T19 = 16						; size = 4
$T20 = 20						; size = 4
$T21 = 24						; size = 4
$T22 = 28						; size = 4
$T23 = 32						; size = 4
$T24 = 36						; size = 4
$T25 = 40						; size = 4
$T26 = 44						; size = 4
$T27 = 48						; size = 4
$T28 = 52						; size = 4
$T29 = 56						; size = 4
$T30 = 60						; size = 4
$T31 = 64						; size = 4
$T32 = 68						; size = 4
$T33 = 72						; size = 4
$T34 = 76						; size = 4
$T35 = 80						; size = 4
$T36 = 84						; size = 4
$T37 = 88						; size = 4
__Newoff$ = 92						; size = 4
tv161 = 96						; size = 4
__Block$ = 100						; size = 4
tv84 = 104						; size = 4
__Overflow_is_possible$38 = 111				; size = 1
_this$ = 112						; size = 4
_<_Vals_0>$ = 124					; size = 4
??$_Emplace_back_internal@ABUSState@CPythonGraphic@@@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXABUSState@CPythonGraphic@@@Z PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Emplace_back_internal<CPythonGraphic::SState const &>, COMDAT
; _this$ = ecx

; 1114 :     void _Emplace_back_internal(_Tys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8d 6c 24 8c	 lea	 ebp, DWORD PTR [esp-116]
  00005	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	89 4d 70	 mov	 DWORD PTR _this$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  00010	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00013	89 45 58	 mov	 DWORD PTR $T37[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  00016	8b 45 58	 mov	 eax, DWORD PTR $T37[ebp]
  00019	83 c0 0c	 add	 eax, 12			; 0000000cH
  0001c	89 45 50	 mov	 DWORD PTR $T35[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0001f	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00022	89 45 54	 mov	 DWORD PTR $T36[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  00025	8b 45 54	 mov	 eax, DWORD PTR $T36[ebp]
  00028	83 c0 10	 add	 eax, 16			; 00000010H
  0002b	89 45 4c	 mov	 DWORD PTR $T34[ebp], eax

; 1115 :         _PUSH_BACK_BEGIN;

  0002e	8b 45 50	 mov	 eax, DWORD PTR $T35[ebp]
  00031	8b 00		 mov	 eax, DWORD PTR [eax]
  00033	8b 4d 4c	 mov	 ecx, DWORD PTR $T34[ebp]
  00036	03 01		 add	 eax, DWORD PTR [ecx]
  00038	33 d2		 xor	 edx, edx
  0003a	33 c9		 xor	 ecx, ecx
  0003c	41		 inc	 ecx
  0003d	f7 f1		 div	 ecx
  0003f	85 d2		 test	 edx, edx
  00041	75 35		 jne	 SHORT $LN2@Emplace_ba

; 1530 :         return _Mypair._Myval2;

  00043	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00046	89 45 48	 mov	 DWORD PTR $T33[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00049	8b 45 48	 mov	 eax, DWORD PTR $T33[ebp]
  0004c	83 c0 08	 add	 eax, 8
  0004f	89 45 3c	 mov	 DWORD PTR $T30[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00052	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00055	89 45 44	 mov	 DWORD PTR $T32[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  00058	8b 45 44	 mov	 eax, DWORD PTR $T32[ebp]
  0005b	83 c0 10	 add	 eax, 16			; 00000010H
  0005e	89 45 40	 mov	 DWORD PTR $T31[ebp], eax

; 1115 :         _PUSH_BACK_BEGIN;

  00061	8b 45 40	 mov	 eax, DWORD PTR $T31[ebp]
  00064	8b 00		 mov	 eax, DWORD PTR [eax]
  00066	40		 inc	 eax
  00067	8b 4d 3c	 mov	 ecx, DWORD PTR $T30[ebp]
  0006a	39 01		 cmp	 DWORD PTR [ecx], eax
  0006c	77 0a		 ja	 SHORT $LN2@Emplace_ba
  0006e	6a 01		 push	 1
  00070	8b 4d 70	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXI@Z ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap
$LN2@Emplace_ba:
  00078	8b 45 d4	 mov	 eax, DWORD PTR $T5[ebp]
  0007b	89 45 68	 mov	 DWORD PTR tv84[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0007e	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00081	89 45 38	 mov	 DWORD PTR $T29[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  00084	8b 45 38	 mov	 eax, DWORD PTR $T29[ebp]
  00087	83 c0 0c	 add	 eax, 12			; 0000000cH
  0008a	89 45 68	 mov	 DWORD PTR tv84[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0008d	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00090	89 45 34	 mov	 DWORD PTR $T28[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00093	8b 45 34	 mov	 eax, DWORD PTR $T28[ebp]
  00096	83 c0 08	 add	 eax, 8
  00099	89 45 30	 mov	 DWORD PTR $T27[ebp], eax

; 1115 :         _PUSH_BACK_BEGIN;

  0009c	8b 45 30	 mov	 eax, DWORD PTR $T27[ebp]
  0009f	8b 00		 mov	 eax, DWORD PTR [eax]
  000a1	48		 dec	 eax
  000a2	8b 4d 68	 mov	 ecx, DWORD PTR tv84[ebp]
  000a5	23 01		 and	 eax, DWORD PTR [ecx]
  000a7	8b 4d 68	 mov	 ecx, DWORD PTR tv84[ebp]
  000aa	89 01		 mov	 DWORD PTR [ecx], eax

; 1530 :         return _Mypair._Myval2;

  000ac	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  000af	89 45 2c	 mov	 DWORD PTR $T26[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  000b2	8b 45 2c	 mov	 eax, DWORD PTR $T26[ebp]
  000b5	83 c0 0c	 add	 eax, 12			; 0000000cH
  000b8	89 45 24	 mov	 DWORD PTR $T24[ebp], eax

; 1530 :         return _Mypair._Myval2;

  000bb	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  000be	89 45 28	 mov	 DWORD PTR $T25[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  000c1	8b 45 28	 mov	 eax, DWORD PTR $T25[ebp]
  000c4	83 c0 10	 add	 eax, 16			; 00000010H
  000c7	89 45 20	 mov	 DWORD PTR $T23[ebp], eax

; 1115 :         _PUSH_BACK_BEGIN;

  000ca	8b 45 24	 mov	 eax, DWORD PTR $T24[ebp]
  000cd	8b 00		 mov	 eax, DWORD PTR [eax]
  000cf	8b 4d 20	 mov	 ecx, DWORD PTR $T23[ebp]
  000d2	03 01		 add	 eax, DWORD PTR [ecx]
  000d4	89 45 5c	 mov	 DWORD PTR __Newoff$[ebp], eax

; 1534 :         return _Mypair._Myval2;

  000d7	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  000da	89 45 1c	 mov	 DWORD PTR $T22[ebp], eax

; 548  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  000dd	8b 45 1c	 mov	 eax, DWORD PTR $T22[ebp]
  000e0	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e3	48		 dec	 eax
  000e4	23 45 5c	 and	 eax, DWORD PTR __Newoff$[ebp]
  000e7	89 45 18	 mov	 DWORD PTR $T21[ebp], eax

; 1514 :         return _Get_data()._Getblock(_Off);

  000ea	8b 45 18	 mov	 eax, DWORD PTR $T21[ebp]
  000ed	89 45 64	 mov	 DWORD PTR __Block$[ebp], eax

; 1530 :         return _Mypair._Myval2;

  000f0	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  000f3	89 45 14	 mov	 DWORD PTR $T20[ebp], eax

; 1538 :         return _Get_data()._Map;

  000f6	8b 45 14	 mov	 eax, DWORD PTR $T20[ebp]
  000f9	83 c0 04	 add	 eax, 4
  000fc	89 45 10	 mov	 DWORD PTR $T19[ebp], eax

; 1115 :         _PUSH_BACK_BEGIN;

  000ff	8b 45 10	 mov	 eax, DWORD PTR $T19[ebp]
  00102	8b 00		 mov	 eax, DWORD PTR [eax]
  00104	8b 4d 64	 mov	 ecx, DWORD PTR __Block$[ebp]
  00107	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  0010b	75 58		 jne	 SHORT $LN3@Emplace_ba

; 1522 :         return _Mypair._Get_first();

  0010d	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00110	89 45 0c	 mov	 DWORD PTR $T18[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00113	8b 45 0c	 mov	 eax, DWORD PTR $T18[ebp]
  00116	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00119	c6 45 6f 01	 mov	 BYTE PTR __Overflow_is_possible$38[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0011d	c7 45 cc ff ff
	ff 01		 mov	 DWORD PTR __Max_possible$3[ebp], 33554431 ; 01ffffffH

; 60   :         if (_Count > _Max_possible) {

  00124	33 c0		 xor	 eax, eax
  00126	40		 inc	 eax
  00127	3d ff ff ff 01	 cmp	 eax, 33554431		; 01ffffffH
  0012c	76 05		 jbe	 SHORT $LN77@Emplace_ba

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0012e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN77@Emplace_ba:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00133	33 c0		 xor	 eax, eax
  00135	40		 inc	 eax
  00136	c1 e0 07	 shl	 eax, 7
  00139	89 45 08	 mov	 DWORD PTR $T17[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0013c	ff 75 08	 push	 DWORD PTR $T17[ebp]
  0013f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00144	59		 pop	 ecx
  00145	89 45 fc	 mov	 DWORD PTR $T14[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  00148	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0014b	89 45 04	 mov	 DWORD PTR $T16[ebp], eax

; 1538 :         return _Get_data()._Map;

  0014e	8b 45 04	 mov	 eax, DWORD PTR $T16[ebp]
  00151	83 c0 04	 add	 eax, 4
  00154	89 45 00	 mov	 DWORD PTR $T15[ebp], eax

; 1115 :         _PUSH_BACK_BEGIN;

  00157	8b 45 00	 mov	 eax, DWORD PTR $T15[ebp]
  0015a	8b 00		 mov	 eax, DWORD PTR [eax]
  0015c	8b 4d 64	 mov	 ecx, DWORD PTR __Block$[ebp]
  0015f	8b 55 fc	 mov	 edx, DWORD PTR $T14[ebp]
  00162	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN3@Emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00165	8b 45 7c	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00168	89 45 e4	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  0016b	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0016e	89 45 f8	 mov	 DWORD PTR $T13[ebp], eax

; 1538 :         return _Get_data()._Map;

  00171	8b 45 f8	 mov	 eax, DWORD PTR $T13[ebp]
  00174	83 c0 04	 add	 eax, 4
  00177	89 45 f4	 mov	 DWORD PTR $T12[ebp], eax

; 1116 :         _Alty_traits::construct(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ), _STD forward<_Tys>(_Vals)...);

  0017a	8b 45 5c	 mov	 eax, DWORD PTR __Newoff$[ebp]
  0017d	33 d2		 xor	 edx, edx
  0017f	33 c9		 xor	 ecx, ecx
  00181	41		 inc	 ecx
  00182	f7 f1		 div	 ecx
  00184	c1 e2 07	 shl	 edx, 7
  00187	8b 45 f4	 mov	 eax, DWORD PTR $T12[ebp]
  0018a	8b 00		 mov	 eax, DWORD PTR [eax]
  0018c	8b 4d 64	 mov	 ecx, DWORD PTR __Block$[ebp]
  0018f	03 14 88	 add	 edx, DWORD PTR [eax+ecx*4]
  00192	89 55 f0	 mov	 DWORD PTR __Ptr$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00195	8b 45 f0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00198	89 45 e8	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  0019b	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0019e	89 45 ec	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  001a1	8b 45 ec	 mov	 eax, DWORD PTR $T11[ebp]
  001a4	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  001a7	8b 45 e8	 mov	 eax, DWORD PTR $T10[ebp]
  001aa	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  001ad	8b 45 e4	 mov	 eax, DWORD PTR $T9[ebp]
  001b0	89 45 e0	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  001b3	6a 20		 push	 32			; 00000020H
  001b5	59		 pop	 ecx
  001b6	8b 75 e0	 mov	 esi, DWORD PTR $T8[ebp]
  001b9	8b 7d dc	 mov	 edi, DWORD PTR $T7[ebp]
  001bc	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1117 :         _PUSH_BACK_END;

  001be	8b 45 c4	 mov	 eax, DWORD PTR $T1[ebp]
  001c1	89 45 60	 mov	 DWORD PTR tv161[ebp], eax

; 1530 :         return _Mypair._Myval2;

  001c4	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  001c7	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  001ca	8b 45 d8	 mov	 eax, DWORD PTR $T6[ebp]
  001cd	83 c0 10	 add	 eax, 16			; 00000010H
  001d0	89 45 60	 mov	 DWORD PTR tv161[ebp], eax

; 1117 :         _PUSH_BACK_END;

  001d3	8b 45 60	 mov	 eax, DWORD PTR tv161[ebp]
  001d6	8b 00		 mov	 eax, DWORD PTR [eax]
  001d8	40		 inc	 eax
  001d9	8b 4d 60	 mov	 ecx, DWORD PTR tv161[ebp]
  001dc	89 01		 mov	 DWORD PTR [ecx], eax
$LN80@Emplace_ba:

; 1118 :     }

  001de	5f		 pop	 edi
  001df	5e		 pop	 esi
  001e0	83 c5 74	 add	 ebp, 116		; 00000074H
  001e3	c9		 leave
  001e4	c2 04 00	 ret	 4
??$_Emplace_back_internal@ABUSState@CPythonGraphic@@@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXABUSState@CPythonGraphic@@@Z ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Emplace_back_internal<CPythonGraphic::SState const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAUSState@CPythonGraphic@@@std@@YAXAAPAUSState@CPythonGraphic@@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAUSState@CPythonGraphic@@@std@@YAXAAPAUSState@CPythonGraphic@@@Z PROC ; std::_Destroy_in_place<CPythonGraphic::SState *>, COMDAT

; 270  : /* _CONSTEXPR20_DYNALLOC */ void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAUSState@CPythonGraphic@@@std@@YAXAAPAUSState@CPythonGraphic@@@Z ENDP ; std::_Destroy_in_place<CPythonGraphic::SState *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
__Max_possible$1 = -28					; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
_this$ = -12						; size = 4
__New_proxy$ = -8					; size = 4
__Overflow_is_possible$5 = -1				; size = 1
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1106 :     void _Alloc_proxy(_Alloc&& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00009	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$5[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0000d	c7 45 e4 ff ff
	ff 1f		 mov	 DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 60   :         if (_Count > _Max_possible) {

  00014	33 c0		 xor	 eax, eax
  00016	40		 inc	 eax
  00017	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  0001c	76 05		 jbe	 SHORT $LN6@Alloc_prox

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0001e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN6@Alloc_prox:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00023	33 c0		 xor	 eax, eax
  00025	40		 inc	 eax
  00026	c1 e0 03	 shl	 eax, 3
  00029	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0002c	ff 75 f0	 push	 DWORD PTR $T4[ebp]
  0002f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00034	59		 pop	 ecx
  00035	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00038	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  0003b	89 45 f8	 mov	 DWORD PTR __New_proxy$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1108 :         _Construct_in_place(*_New_proxy, this);

  0003e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00041	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00044	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]
  00047	50		 push	 eax
  00048	ff 75 f8	 push	 DWORD PTR __New_proxy$[ebp]
  0004b	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
  00050	59		 pop	 ecx
  00051	59		 pop	 ecx

; 1109 :         _Myproxy            = _New_proxy;

  00052	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f8	 mov	 ecx, DWORD PTR __New_proxy$[ebp]
  00058	89 08		 mov	 DWORD PTR [eax], ecx

; 1110 :         _New_proxy->_Mycont = this;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR __New_proxy$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	89 08		 mov	 DWORD PTR [eax], ecx
$LN9@Alloc_prox:

; 1111 :     }

  00062	c9		 leave
  00063	c2 04 00	 ret	 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1031 : void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1032 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1033 :     using _Ty = typename _Alloc::value_type;
; 1034 :     _Ptr->~_Ty();
; 1035 :     _Deallocate_plain(_Al, _Ptr);

  00003	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Al$[ebp]
  00009	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
  0000e	59		 pop	 ecx
  0000f	59		 pop	 ecx

; 1036 : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Max_possible$2 = -68					; size = 4
$T3 = -64						; size = 4
__Al$ = -60						; size = 4
__Last$ = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
__First$ = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T8 = -24						; size = 4
$T9 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T10 = 0						; size = 4
$T11 = 4						; size = 4
$T12 = 8						; size = 4
$T13 = 12						; size = 4
$T14 = 16						; size = 4
$T15 = 20						; size = 4
$T16 = 24						; size = 4
$T17 = 28						; size = 4
$T18 = 32						; size = 4
$T19 = 36						; size = 4
$T20 = 40						; size = 4
__Newsize$ = 44						; size = 4
__Constructed_last$ = 48				; size = 4
__Oldsize$ = 52						; size = 4
tv172 = 56						; size = 4
$T21 = 60						; size = 4
$T22 = 64						; size = 4
__My_data$ = 68						; size = 4
__Constructed_first$ = 72				; size = 4
___formal$ = 76						; size = 1
__Overflow_is_possible$23 = 83				; size = 1
__Newcapacity$ = 84					; size = 4
__Mylast$ = 88						; size = 4
__Myfirst$ = 92						; size = 4
__Whereoff$ = 96					; size = 4
$T24 = 103						; size = 1
_this$ = 104						; size = 4
__Newvec$ = 108						; size = 4
__Whereptr$ = 120					; size = 4
_<_Val_0>$ = 124					; size = 4
??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	83 ec 70	 sub	 esp, 112		; 00000070H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	83 ec 34	 sub	 esp, 52			; 00000034H
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d 68	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00037	89 45 28	 mov	 DWORD PTR $T20[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0003a	8b 45 28	 mov	 eax, DWORD PTR $T20[ebp]
  0003d	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;

  00040	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
  00043	89 45 44	 mov	 DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

  00046	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  00049	89 45 5c	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

  0004c	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004f	83 c0 04	 add	 eax, 4
  00052	89 45 58	 mov	 DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00055	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00058	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0005b	2b 08		 sub	 ecx, DWORD PTR [eax]
  0005d	8b c1		 mov	 eax, ecx
  0005f	99		 cdq
  00060	6a 18		 push	 24			; 00000018H
  00062	59		 pop	 ecx
  00063	f7 f9		 idiv	 ecx
  00065	89 45 60	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00068	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006b	8b 4d 5c	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 18		 push	 24			; 00000018H
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 34	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  0007b	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0007e	89 45 24	 mov	 DWORD PTR $T19[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00081	8b 45 24	 mov	 eax, DWORD PTR $T19[ebp]
  00084	89 45 c0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00087	c7 45 40 aa aa
	aa 0a		 mov	 DWORD PTR $T22[ebp], 178956970 ; 0aaaaaaaH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  0008e	c7 45 20 ff ff
	ff 7f		 mov	 DWORD PTR $T18[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00095	8b 45 20	 mov	 eax, DWORD PTR $T18[ebp]
  00098	89 45 3c	 mov	 DWORD PTR $T21[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0009b	8b 45 40	 mov	 eax, DWORD PTR $T22[ebp]
  0009e	3b 45 3c	 cmp	 eax, DWORD PTR $T21[ebp]
  000a1	73 08		 jae	 SHORT $LN34@Emplace_re
  000a3	8d 45 40	 lea	 eax, DWORD PTR $T22[ebp]
  000a6	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
  000a9	eb 06		 jmp	 SHORT $LN35@Emplace_re
$LN34@Emplace_re:
  000ab	8d 45 3c	 lea	 eax, DWORD PTR $T21[ebp]
  000ae	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
$LN35@Emplace_re:
  000b1	8b 45 38	 mov	 eax, DWORD PTR tv172[ebp]
  000b4	89 45 1c	 mov	 DWORD PTR $T17[ebp], eax
  000b7	8b 45 1c	 mov	 eax, DWORD PTR $T17[ebp]
  000ba	89 45 18	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  000bd	8b 45 18	 mov	 eax, DWORD PTR $T16[ebp]
  000c0	8b 00		 mov	 eax, DWORD PTR [eax]
  000c2	89 45 14	 mov	 DWORD PTR $T15[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  000c5	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000c8	3b 45 14	 cmp	 eax, DWORD PTR $T15[ebp]
  000cb	75 05		 jne	 SHORT $LN2@Emplace_re

; 738  :             _Xlength();

  000cd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  000d2	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000d5	40		 inc	 eax
  000d6	89 45 2c	 mov	 DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000d9	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  000dc	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@ABEII@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Calculate_growth
  000e4	89 45 54	 mov	 DWORD PTR __Newcapacity$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000e7	c6 45 53 01	 mov	 BYTE PTR __Overflow_is_possible$23[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000eb	c7 45 bc aa aa
	aa 0a		 mov	 DWORD PTR __Max_possible$2[ebp], 178956970 ; 0aaaaaaaH

; 60   :         if (_Count > _Max_possible) {

  000f2	81 7d 54 aa aa
	aa 0a		 cmp	 DWORD PTR __Newcapacity$[ebp], 178956970 ; 0aaaaaaaH
  000f9	76 05		 jbe	 SHORT $LN67@Emplace_re

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000fb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN67@Emplace_re:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00100	6b 45 54 18	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 24
  00104	89 45 10	 mov	 DWORD PTR $T14[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00107	ff 75 10	 push	 DWORD PTR $T14[ebp]
  0010a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0010f	59		 pop	 ecx
  00110	89 45 6c	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00113	6b 45 60 18	 imul	 eax, DWORD PTR __Whereoff$[ebp], 24
  00117	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0011a	8d 44 01 18	 lea	 eax, DWORD PTR [ecx+eax+24]
  0011e	89 45 30	 mov	 DWORD PTR __Constructed_last$[ebp], eax

; 746  :         pointer _Constructed_first      = _Constructed_last;

  00121	8b 45 30	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00124	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

  00127	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0012b	8b 45 7c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0012e	89 45 08	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00131	6b 45 60 18	 imul	 eax, DWORD PTR __Whereoff$[ebp], 24
  00135	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00138	89 45 0c	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0013b	8b 45 0c	 mov	 eax, DWORD PTR $T13[ebp]
  0013e	89 45 00	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00141	8b 45 08	 mov	 eax, DWORD PTR $T12[ebp]
  00144	89 45 04	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00147	6a 06		 push	 6
  00149	59		 pop	 ecx
  0014a	8b 75 04	 mov	 esi, DWORD PTR $T11[ebp]
  0014d	8b 7d 00	 mov	 edi, DWORD PTR $T10[ebp]
  00150	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 750  :         _Constructed_first = _Newvec + _Whereoff;

  00152	6b 45 60 18	 imul	 eax, DWORD PTR __Whereoff$[ebp], 24
  00156	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
  00159	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0015c	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0015f	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00162	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00164	75 3d		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00166	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00169	8b 00		 mov	 eax, DWORD PTR [eax]
  0016b	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  0016e	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00171	8b 00		 mov	 eax, DWORD PTR [eax]
  00173	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00176	33 c0		 xor	 eax, eax
  00178	88 45 67	 mov	 BYTE PTR $T24[ebp], al
  0017b	8a 45 67	 mov	 al, BYTE PTR $T24[ebp]
  0017e	88 45 4c	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  00181	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00184	89 45 ec	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00187	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp]
  0018a	89 45 e8	 mov	 DWORD PTR $T8[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0018d	ff 75 e8	 push	 DWORD PTR $T8[ebp]
  00190	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00193	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  00196	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  00199	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@YAPAUSPDTVertex@@QAU1@0PAU1@AAV?$allocator@USPDTVertex@@@0@@Z ; std::_Uninitialized_move<SPDTVertex *,std::allocator<SPDTVertex> >
  0019e	83 c4 10	 add	 esp, 16			; 00000010H

; 754  :         } else { // provide basic guarantee

  001a1	eb 5f		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  001a3	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  001a6	8b 00		 mov	 eax, DWORD PTR [eax]
  001a8	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001ab	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001ae	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001b1	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  001b4	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001b7	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  001ba	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  001bd	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001c0	ff 75 d4	 push	 DWORD PTR __First$[ebp]
  001c3	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@YAPAUSPDTVertex@@QAU1@0PAU1@AAV?$allocator@USPDTVertex@@@0@@Z ; std::_Uninitialized_move<SPDTVertex *,std::allocator<SPDTVertex> >
  001c8	83 c4 10	 add	 esp, 16			; 00000010H

; 756  :             _Constructed_first = _Newvec;

  001cb	8b 45 6c	 mov	 eax, DWORD PTR __Newvec$[ebp]
  001ce	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001d1	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  001d4	8b 00		 mov	 eax, DWORD PTR [eax]
  001d6	89 45 c8	 mov	 DWORD PTR __Last$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001d9	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001dc	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001df	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  001e2	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001e5	ff 75 cc	 push	 DWORD PTR $T4[ebp]

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001e8	6b 45 60 18	 imul	 eax, DWORD PTR __Whereoff$[ebp], 24
  001ec	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001ef	8d 44 01 18	 lea	 eax, DWORD PTR [ecx+eax+24]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001f3	50		 push	 eax
  001f4	ff 75 c8	 push	 DWORD PTR __Last$[ebp]
  001f7	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001fa	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@YAPAUSPDTVertex@@QAU1@0PAU1@AAV?$allocator@USPDTVertex@@@0@@Z ; std::_Uninitialized_move<SPDTVertex *,std::allocator<SPDTVertex> >
  001ff	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Emplace_re:

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00202	eb 2b		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  00204	ff 75 30	 push	 DWORD PTR __Constructed_last$[ebp]
  00207	ff 75 48	 push	 DWORD PTR __Constructed_first$[ebp]
  0020a	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  0020d	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXPAUSPDTVertex@@0@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  00212	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  00215	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00218	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  0021b	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USPDTVertex@@@std@@QAEXQAUSPDTVertex@@I@Z ; std::allocator<SPDTVertex>::deallocate

; 762  :         _RERAISE;

  00220	6a 00		 push	 0
  00222	6a 00		 push	 0
  00224	e8 00 00 00 00	 call	 __CxxThrowException@8

; 763  :         _CATCH_END

  00229	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  0022e	c3		 ret	 0
$LN7@Emplace_re:
  0022f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00233	eb 04		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z$1
$LN10@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  00235	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00239	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  0023c	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  0023f	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00242	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  00245	e8 00 00 00 00	 call	 ?_Change_array@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXQAUSPDTVertex@@II@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  0024a	6b 45 60 18	 imul	 eax, DWORD PTR __Whereoff$[ebp], 24
  0024e	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN70@Emplace_re:

; 767  :     }

  00251	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00254	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025b	59		 pop	 ecx
  0025c	5f		 pop	 edi
  0025d	5e		 pop	 esi
  0025e	5b		 pop	 ebx
  0025f	83 c5 70	 add	 ebp, 112		; 00000070H
  00262	c9		 leave
  00263	c2 08 00	 ret	 8
  00266	cc		 int	 3
  00267	cc		 int	 3
  00268	cc		 int	 3
  00269	cc		 int	 3
  0026a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$emplace_back@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z
_TEXT	SEGMENT
__Result$ = -64						; size = 4
__Result$1 = -60					; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
$T8 = -32						; size = 4
__Ptr$ = -28						; size = 4
$T9 = -24						; size = 4
__My_data$10 = -20					; size = 4
__Mylast$ = -16						; size = 4
__My_data$ = -12					; size = 4
_this$ = -8						; size = 4
__Mylast$11 = -4					; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::emplace_back<SPDTVertex const &>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

  0000b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	89 45 f4	 mov	 DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

  00011	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

  0001a	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0001d	8b 4d f4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00025	74 63		 je	 SHORT $LN2@emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00027	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0002a	89 45 e8	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 684  :         auto& _My_data   = _Mypair._Myval2;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	89 45 ec	 mov	 DWORD PTR __My_data$10[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

  00033	8b 45 ec	 mov	 eax, DWORD PTR __My_data$10[ebp]
  00036	83 c0 04	 add	 eax, 4
  00039	89 45 fc	 mov	 DWORD PTR __Mylast$11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003c	8b 45 e8	 mov	 eax, DWORD PTR $T9[ebp]
  0003f	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00042	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 e4	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0004a	8b 45 e4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0004d	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00053	89 45 e0	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00056	8b 45 e0	 mov	 eax, DWORD PTR $T8[ebp]
  00059	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0005c	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  0005f	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T6[ebp]
  00065	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00068	6a 06		 push	 6
  0006a	59		 pop	 ecx
  0006b	8b 75 d4	 mov	 esi, DWORD PTR $T5[ebp]
  0006e	8b 7d d0	 mov	 edi, DWORD PTR $T4[ebp]
  00071	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 689  :         _Ty& _Result = *_Mylast;

  00073	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  00076	8b 00		 mov	 eax, DWORD PTR [eax]
  00078	89 45 c4	 mov	 DWORD PTR __Result$1[ebp], eax

; 690  :         ++_Mylast;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	83 c0 18	 add	 eax, 24			; 00000018H
  00083	8b 4d fc	 mov	 ecx, DWORD PTR __Mylast$11[ebp]
  00086	89 01		 mov	 DWORD PTR [ecx], eax

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00088	eb 19		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0008a	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0008d	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00090	ff 75 cc	 push	 DWORD PTR $T3[ebp]
  00093	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00096	ff 30		 push	 DWORD PTR [eax]
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEPAUSPDTVertex@@QAU2@ABU2@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
  000a0	89 45 c0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	c9		 leave
  000a6	c2 04 00	 ret	 4
??$emplace_back@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::emplace_back<SPDTVertex const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@USPDTVertex@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@USPDTVertex@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SPDTVertex> >::_Vector_val<std::_Simple_types<SPDTVertex> >, COMDAT
; _this$ = ecx

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 20 00	 and	 DWORD PTR [eax], 0
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 60 08 00	 and	 DWORD PTR [eax+8], 0
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@USPDTVertex@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SPDTVertex> >::_Vector_val<std::_Simple_types<SPDTVertex> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 :         _Xlength_error("vector too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
?_Tidy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXXZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1687 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();
; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 75		 je	 SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USPDTVertex@@@std@@@std@@YAXPAUSPDTVertex@@QAU1@AAV?$allocator@USPDTVertex@@@0@@Z ; std::_Destroy_range<std::allocator<SPDTVertex> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 18		 push	 24			; 00000018H
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	6b 45 d4 18	 imul	 eax, DWORD PTR __Count$[ebp], 24
  00087	50		 push	 eax
  00088	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	59		 pop	 ecx
  00091	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00092	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00095	83 20 00	 and	 DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

  00098	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0009b	83 20 00	 and	 DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

  0009e	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a1	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

  000a4	c9		 leave
  000a5	c3		 ret	 0
?_Tidy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXXZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXQAUSPDTVertex@@II@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXQAUSPDTVertex@@II@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();
; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 63		 je	 SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USPDTVertex@@@std@@@std@@YAXPAUSPDTVertex@@QAU1@AAV?$allocator@USPDTVertex@@@0@@Z ; std::_Destroy_range<std::allocator<SPDTVertex> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 18		 push	 24			; 00000018H
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	6b 45 d4 18	 imul	 eax, DWORD PTR __Count$[ebp], 24
  00087	50		 push	 eax
  00088	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	59		 pop	 ecx
  00091	59		 pop	 ecx
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  00092	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00098	89 08		 mov	 DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  0009a	6b 45 0c 18	 imul	 eax, DWORD PTR __Newsize$[ebp], 24
  0009e	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000a1	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000a4	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000a6	6b 45 10 18	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 24
  000aa	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000ad	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b0	89 01		 mov	 DWORD PTR [ecx], eax

; 1684 :     }

  000b2	c9		 leave
  000b3	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXQAUSPDTVertex@@II@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Geometric$ = -32					; size = 4
__Max$ = -28						; size = 4
tv82 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$8 = -8					; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@ABEII@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$8[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	99		 cdq
  0001b	6a 18		 push	 24			; 00000018H
  0001d	59		 pop	 ecx
  0001e	f7 f9		 idiv	 ecx
  00020	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00023	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00026	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00029	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  0002c	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0002f	c7 45 f0 aa aa
	aa 0a		 mov	 DWORD PTR $T7[ebp], 178956970 ; 0aaaaaaaH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00036	c7 45 d8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0003d	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  00040	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00043	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00046	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  00049	73 08		 jae	 SHORT $LN25@Calculate_
  0004b	8d 45 f0	 lea	 eax, DWORD PTR $T7[ebp]
  0004e	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
  00051	eb 06		 jmp	 SHORT $LN26@Calculate_
$LN25@Calculate_:
  00053	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00056	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
$LN26@Calculate_:
  00059	8b 45 e8	 mov	 eax, DWORD PTR tv82[ebp]
  0005c	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  0005f	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  00062	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00065	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00068	8b 00		 mov	 eax, DWORD PTR [eax]
  0006a	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 :         const auto _Max              = max_size();
; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006d	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00070	d1 e8		 shr	 eax, 1
  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  00075	2b c8		 sub	 ecx, eax
  00077	39 4d fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], ecx
  0007a	76 05		 jbe	 SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

  0007c	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  0007f	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00081	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00084	d1 e8		 shr	 eax, 1
  00086	03 45 fc	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00089	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  0008c	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0008f	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00092	73 05		 jae	 SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

  00094	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00097	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

  00099	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

  0009c	c9		 leave
  0009d	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@ABEII@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXPAUSPDTVertex@@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXPAUSPDTVertex@@0@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00015	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00018	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USPDTVertex@@@std@@@std@@YAXPAUSPDTVertex@@QAU1@AAV?$allocator@USPDTVertex@@@0@@Z ; std::_Destroy_range<std::allocator<SPDTVertex> >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00026	c9		 leave
  00027	c2 08 00	 ret	 8
?_Destroy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXPAUSPDTVertex@@0@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 673  :         _Tidy();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Tidy

; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@USPDTVertex@@@std@@QAEXQAUSPDTVertex@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USPDTVertex@@@std@@QAEXQAUSPDTVertex@@I@Z PROC ; std::allocator<SPDTVertex>::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6b 45 0c 18	 imul	 eax, DWORD PTR __Count$[ebp], 24
  0000b	50		 push	 eax
  0000c	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	59		 pop	 ecx
  00015	59		 pop	 ecx

; 811  :     }

  00016	c9		 leave
  00017	c2 08 00	 ret	 8
?deallocate@?$allocator@USPDTVertex@@@std@@QAEXQAUSPDTVertex@@I@Z ENDP ; std::allocator<SPDTVertex>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?GenScreenShotTag@@YAXPBDKPADI@Z
_TEXT	SEGMENT
_n$ = -8						; size = 4
_p$ = -4						; size = 4
_src$ = 8						; size = 4
_crc32$ = 12						; size = 4
_leaf$ = 16						; size = 4
_leafLen$ = 20						; size = 4
?GenScreenShotTag@@YAXPBDKPADI@Z PROC			; GenScreenShotTag, COMDAT

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 159  : 	const char* p = src;

  00005	8b 45 08	 mov	 eax, DWORD PTR _src$[ebp]
  00008	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax

; 160  : 	const char* n = p;

  0000b	8b 45 fc	 mov	 eax, DWORD PTR _p$[ebp]
  0000e	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN2@GenScreenS:

; 161  : 	while (n = strchr(p, '\\'))

  00011	6a 5c		 push	 92			; 0000005cH
  00013	ff 75 fc	 push	 DWORD PTR _p$[ebp]
  00016	e8 00 00 00 00	 call	 _strchr
  0001b	59		 pop	 ecx
  0001c	59		 pop	 ecx
  0001d	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00020	83 7d f8 00	 cmp	 DWORD PTR _n$[ebp], 0
  00024	74 09		 je	 SHORT $LN3@GenScreenS

; 162  : 		p = n + 1;

  00026	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00029	40		 inc	 eax
  0002a	89 45 fc	 mov	 DWORD PTR _p$[ebp], eax
  0002d	eb e2		 jmp	 SHORT $LN2@GenScreenS
$LN3@GenScreenS:

; 163  : 
; 164  : 	_snprintf(leaf, leafLen, "YMIR_METIN2:%s:0x%.8x", p, crc32);

  0002f	ff 75 0c	 push	 DWORD PTR _crc32$[ebp]
  00032	ff 75 fc	 push	 DWORD PTR _p$[ebp]
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x@
  0003a	ff 75 14	 push	 DWORD PTR _leafLen$[ebp]
  0003d	ff 75 10	 push	 DWORD PTR _leaf$[ebp]
  00040	e8 00 00 00 00	 call	 __snprintf
  00045	83 c4 14	 add	 esp, 20			; 00000014H

; 165  : }

  00048	c9		 leave
  00049	c3		 ret	 0
?GenScreenShotTag@@YAXPBDKPADI@Z ENDP			; GenScreenShotTag
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Block_size$ = -8					; size = 4
__Ptr_container$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00012	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00015	77 05		 ja	 SHORT $LN12@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  00017	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Allocate_m:

; 77   :         return ::operator new(_Bytes);

  0001c	ff 75 f8	 push	 DWORD PTR __Block_size$[ebp]
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	59		 pop	 ecx

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00025	89 45 fc	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00028	83 7d fc 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0002c	74 02		 je	 SHORT $LN7@Allocate_m
  0002e	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00035	33 c0		 xor	 eax, eax
  00037	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  00039	33 c0		 xor	 eax, eax
  0003b	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00040	83 c0 23	 add	 eax, 35			; 00000023H
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00046	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00049	6a 04		 push	 4
  0004b	58		 pop	 eax
  0004c	6b c0 ff	 imul	 eax, eax, -1
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00055	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0b		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00014	59		 pop	 ecx
  00015	eb 13		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00017	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001b	74 0b		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001d	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	59		 pop	 ecx

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00028	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 0f		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  0003a	ff 75 0c	 push	 DWORD PTR __Bytes$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 222  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	c9		 leave
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odspy
;	COMDAT ??_GCPythonGraphic@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPythonGraphic@@UAEPAXI@Z PROC			; CPythonGraphic::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CPythonGraphic@@UAE@XZ ; CPythonGraphic::~CPythonGraphic
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0f		 je	 SHORT $LN2@scalar
  00017	68 a0 00 00 00	 push	 160			; 000000a0H
  0001c	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	59		 pop	 ecx
  00025	59		 pop	 ecx
$LN2@scalar:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c9		 leave
  0002a	c2 04 00	 ret	 4
??_GCPythonGraphic@@UAEPAXI@Z ENDP			; CPythonGraphic::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ PROC ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\stack
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\stack
;	COMDAT ?empty@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_this$ = -12						; size = 4
tv70 = -8						; size = 4
$T3 = -1						; size = 1
?empty@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE_NXZ PROC ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::empty, COMDAT
; _this$ = ecx

; 93   :     _NODISCARD bool empty() const noexcept(noexcept(c.empty())) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1534 :         return _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax

; 1566 :         return _Get_data()._Mysize;

  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00012	83 c0 10	 add	 eax, 16			; 00000010H
  00015	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax

; 1010 :         return _Mysize() == 0;

  00018	8b 45 ec	 mov	 eax, DWORD PTR $T1[ebp]
  0001b	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001e	75 09		 jne	 SHORT $LN5@empty
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00027	eb 04		 jmp	 SHORT $LN6@empty
$LN5@empty:
  00029	83 65 f8 00	 and	 DWORD PTR tv70[ebp], 0
$LN6@empty:
  0002d	8a 45 f8	 mov	 al, BYTE PTR tv70[ebp]
  00030	88 45 ff	 mov	 BYTE PTR $T3[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\stack

; 94   :         return c.empty();

  00033	8a 45 ff	 mov	 al, BYTE PTR $T3[ebp]

; 95   :     }

  00036	c9		 leave
  00037	c3		 ret	 0
?empty@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE_NXZ ENDP ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::empty
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >, COMDAT
; _this$ = ecx

; 544  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1097 :     _Container_base12() noexcept : _Myproxy(nullptr) {}

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 20 00	 and	 DWORD PTR [eax], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 544  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 60 08 00	 and	 DWORD PTR [eax+8], 0
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	83 60 0c 00	 and	 DWORD PTR [eax+12], 0
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c9		 leave
  0002d	c3		 ret	 0
??0?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -128						; size = 4
$T2 = -124						; size = 4
$T3 = -120						; size = 4
$T4 = -116						; size = 4
$T5 = -112						; size = 4
$T6 = -108						; size = 4
$T7 = -104						; size = 4
__Ptr$ = -100						; size = 4
__Count$ = -96						; size = 4
$T8 = -92						; size = 4
$T9 = -88						; size = 4
$T10 = -84						; size = 4
$T11 = -80						; size = 4
$T12 = -76						; size = 4
$T13 = -72						; size = 4
$T14 = -68						; size = 4
$T15 = -64						; size = 4
__Ptr$ = -60						; size = 4
$T16 = -56						; size = 4
$T17 = -52						; size = 4
$T18 = -48						; size = 4
$T19 = -44						; size = 4
$T20 = -40						; size = 4
$T21 = -36						; size = 4
$T22 = -32						; size = 4
$T23 = -28						; size = 4
$T24 = -24						; size = 4
$T25 = -20						; size = 4
tv149 = -16						; size = 4
__Block$26 = -12					; size = 4
_this$ = -8						; size = 4
$T27 = -1						; size = 1
?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXXZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Tidy, COMDAT
; _this$ = ecx

; 1469 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  0000c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	89 45 88	 mov	 DWORD PTR $T3[ebp], eax

; 1522 :         return _Mypair._Get_first();

  00012	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00015	89 45 ec	 mov	 DWORD PTR $T25[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00018	8b 45 ec	 mov	 eax, DWORD PTR $T25[ebp]
  0001b	89 45 84	 mov	 DWORD PTR $T2[ebp], eax
$LN2@Tidy:

; 1534 :         return _Mypair._Myval2;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00021	89 45 e8	 mov	 DWORD PTR $T24[ebp], eax

; 1566 :         return _Get_data()._Mysize;

  00024	8b 45 e8	 mov	 eax, DWORD PTR $T24[ebp]
  00027	83 c0 10	 add	 eax, 16			; 00000010H
  0002a	89 45 e4	 mov	 DWORD PTR $T23[ebp], eax

; 1010 :         return _Mysize() == 0;

  0002d	8b 45 e4	 mov	 eax, DWORD PTR $T23[ebp]
  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	75 09		 jne	 SHORT $LN30@Tidy
  00035	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv149[ebp], 1
  0003c	eb 04		 jmp	 SHORT $LN31@Tidy
$LN30@Tidy:
  0003e	83 65 f0 00	 and	 DWORD PTR tv149[ebp], 0
$LN31@Tidy:
  00042	8a 45 f0	 mov	 al, BYTE PTR tv149[ebp]
  00045	88 45 ff	 mov	 BYTE PTR $T27[ebp], al

; 1470 :         _Orphan_all();
; 1471 : 
; 1472 :         _Alpty _Almap(_Getal());
; 1473 :         while (!empty()) {

  00048	0f b6 45 ff	 movzx	 eax, BYTE PTR $T27[ebp]
  0004c	85 c0		 test	 eax, eax
  0004e	75 0a		 jne	 SHORT $LN3@Tidy

; 1474 :             pop_back();

  00050	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?pop_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::pop_back

; 1475 :         }

  00058	eb c4		 jmp	 SHORT $LN2@Tidy
$LN3@Tidy:

; 1530 :         return _Mypair._Myval2;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	89 45 e0	 mov	 DWORD PTR $T22[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00060	8b 45 e0	 mov	 eax, DWORD PTR $T22[ebp]
  00063	83 c0 08	 add	 eax, 8
  00066	89 45 dc	 mov	 DWORD PTR $T21[ebp], eax

; 1476 : 
; 1477 :         for (size_type _Block = _Mapsize(); 0 < _Block;) { // free storage for a block and destroy pointer

  00069	8b 45 dc	 mov	 eax, DWORD PTR $T21[ebp]
  0006c	8b 00		 mov	 eax, DWORD PTR [eax]
  0006e	89 45 f4	 mov	 DWORD PTR __Block$26[ebp], eax
$LN6@Tidy:
  00071	83 7d f4 00	 cmp	 DWORD PTR __Block$26[ebp], 0
  00075	0f 86 84 00 00
	00		 jbe	 $LN5@Tidy

; 1478 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  0007b	8b 45 f4	 mov	 eax, DWORD PTR __Block$26[ebp]
  0007e	48		 dec	 eax
  0007f	89 45 f4	 mov	 DWORD PTR __Block$26[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00082	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00085	89 45 d8	 mov	 DWORD PTR $T20[ebp], eax

; 1538 :         return _Get_data()._Map;

  00088	8b 45 d8	 mov	 eax, DWORD PTR $T20[ebp]
  0008b	83 c0 04	 add	 eax, 4
  0008e	89 45 d4	 mov	 DWORD PTR $T19[ebp], eax

; 1478 :             if (_Map()[--_Block]) { // free block and destroy its pointer

  00091	8b 45 d4	 mov	 eax, DWORD PTR $T19[ebp]
  00094	8b 00		 mov	 eax, DWORD PTR [eax]
  00096	8b 4d f4	 mov	 ecx, DWORD PTR __Block$26[ebp]
  00099	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  0009d	74 5b		 je	 SHORT $LN7@Tidy

; 1530 :         return _Mypair._Myval2;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	89 45 d0	 mov	 DWORD PTR $T18[ebp], eax

; 1538 :         return _Get_data()._Map;

  000a5	8b 45 d0	 mov	 eax, DWORD PTR $T18[ebp]
  000a8	83 c0 04	 add	 eax, 4
  000ab	89 45 c8	 mov	 DWORD PTR $T16[ebp], eax

; 1522 :         return _Mypair._Get_first();

  000ae	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000b1	89 45 cc	 mov	 DWORD PTR $T17[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  000b4	8b 45 cc	 mov	 eax, DWORD PTR $T17[ebp]
  000b7	89 45 80	 mov	 DWORD PTR $T1[ebp], eax

; 1479 :                 _Getal().deallocate(_Map()[_Block], _DEQUESIZ);

  000ba	8b 45 c8	 mov	 eax, DWORD PTR $T16[ebp]
  000bd	8b 00		 mov	 eax, DWORD PTR [eax]
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __Block$26[ebp]
  000c2	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  000c5	89 45 c4	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c8	33 c0		 xor	 eax, eax
  000ca	40		 inc	 eax
  000cb	c1 e0 07	 shl	 eax, 7
  000ce	50		 push	 eax
  000cf	ff 75 c4	 push	 DWORD PTR __Ptr$[ebp]
  000d2	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000d7	59		 pop	 ecx
  000d8	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  000d9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	89 45 c0	 mov	 DWORD PTR $T15[ebp], eax

; 1538 :         return _Get_data()._Map;

  000df	8b 45 c0	 mov	 eax, DWORD PTR $T15[ebp]
  000e2	83 c0 04	 add	 eax, 4
  000e5	89 45 bc	 mov	 DWORD PTR $T14[ebp], eax

; 1480 :                 _Destroy_in_place(_Map()[_Block]);

  000e8	8b 45 bc	 mov	 eax, DWORD PTR $T14[ebp]
  000eb	8b 00		 mov	 eax, DWORD PTR [eax]
  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __Block$26[ebp]
  000f0	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  000f3	50		 push	 eax
  000f4	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAUSState@CPythonGraphic@@@std@@YAXAAPAUSState@CPythonGraphic@@@Z ; std::_Destroy_in_place<CPythonGraphic::SState *>
  000f9	59		 pop	 ecx
$LN7@Tidy:

; 1481 :             }
; 1482 :         }

  000fa	e9 72 ff ff ff	 jmp	 $LN6@Tidy
$LN5@Tidy:

; 1530 :         return _Mypair._Myval2;

  000ff	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00102	89 45 b8	 mov	 DWORD PTR $T13[ebp], eax

; 1538 :         return _Get_data()._Map;

  00105	8b 45 b8	 mov	 eax, DWORD PTR $T13[ebp]
  00108	83 c0 04	 add	 eax, 4
  0010b	89 45 b4	 mov	 DWORD PTR $T12[ebp], eax

; 1483 : 
; 1484 :         if (_Map() != _Mapptr()) {

  0010e	8b 45 b4	 mov	 eax, DWORD PTR $T12[ebp]
  00111	83 38 00	 cmp	 DWORD PTR [eax], 0
  00114	74 3f		 je	 SHORT $LN8@Tidy

; 1530 :         return _Mypair._Myval2;

  00116	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00119	89 45 b0	 mov	 DWORD PTR $T11[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  0011c	8b 45 b0	 mov	 eax, DWORD PTR $T11[ebp]
  0011f	83 c0 08	 add	 eax, 8
  00122	89 45 a8	 mov	 DWORD PTR $T9[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00125	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00128	89 45 ac	 mov	 DWORD PTR $T10[ebp], eax

; 1538 :         return _Get_data()._Map;

  0012b	8b 45 ac	 mov	 eax, DWORD PTR $T10[ebp]
  0012e	83 c0 04	 add	 eax, 4
  00131	89 45 a4	 mov	 DWORD PTR $T8[ebp], eax

; 1485 :             _Almap.deallocate(_Map(), _Mapsize()); // free storage for map

  00134	8b 45 a8	 mov	 eax, DWORD PTR $T9[ebp]
  00137	8b 00		 mov	 eax, DWORD PTR [eax]
  00139	89 45 a0	 mov	 DWORD PTR __Count$[ebp], eax
  0013c	8b 45 a4	 mov	 eax, DWORD PTR $T8[ebp]
  0013f	8b 00		 mov	 eax, DWORD PTR [eax]
  00141	89 45 9c	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00144	8b 45 a0	 mov	 eax, DWORD PTR __Count$[ebp]
  00147	c1 e0 02	 shl	 eax, 2
  0014a	50		 push	 eax
  0014b	ff 75 9c	 push	 DWORD PTR __Ptr$[ebp]
  0014e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00153	59		 pop	 ecx
  00154	59		 pop	 ecx
$LN8@Tidy:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  00155	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00158	89 45 98	 mov	 DWORD PTR $T7[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  0015b	8b 45 98	 mov	 eax, DWORD PTR $T7[ebp]
  0015e	83 c0 08	 add	 eax, 8
  00161	89 45 94	 mov	 DWORD PTR $T6[ebp], eax

; 1486 :         }
; 1487 : 
; 1488 :         _Mapsize() = 0;

  00164	8b 45 94	 mov	 eax, DWORD PTR $T6[ebp]
  00167	83 20 00	 and	 DWORD PTR [eax], 0

; 1530 :         return _Mypair._Myval2;

  0016a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0016d	89 45 90	 mov	 DWORD PTR $T5[ebp], eax

; 1538 :         return _Get_data()._Map;

  00170	8b 45 90	 mov	 eax, DWORD PTR $T5[ebp]
  00173	83 c0 04	 add	 eax, 4
  00176	89 45 8c	 mov	 DWORD PTR $T4[ebp], eax

; 1489 :         _Map()     = _Mapptr();

  00179	8b 45 8c	 mov	 eax, DWORD PTR $T4[ebp]
  0017c	83 20 00	 and	 DWORD PTR [eax], 0

; 1490 :     }

  0017f	c9		 leave
  00180	c3		 ret	 0
?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXXZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
$T1 = -164						; size = 4
__Max_possible$2 = -160					; size = 4
$T3 = -156						; size = 4
$T4 = -152						; size = 4
$T5 = -148						; size = 4
$T6 = -144						; size = 4
$T7 = -140						; size = 4
__Ptr$ = -136						; size = 4
__Count$ = -132						; size = 4
$T8 = -128						; size = 4
$T9 = -124						; size = 4
$T10 = -120						; size = 4
$T11 = -116						; size = 4
$T12 = -112						; size = 4
$T13 = -108						; size = 4
$T14 = -104						; size = 4
$T15 = -100						; size = 4
$T16 = -96						; size = 4
$T17 = -92						; size = 4
$T18 = -88						; size = 4
$T19 = -84						; size = 4
$T20 = -80						; size = 4
$T21 = -76						; size = 4
$T22 = -72						; size = 4
$T23 = -68						; size = 4
$T24 = -64						; size = 4
$T25 = -60						; size = 4
$T26 = -56						; size = 4
$T27 = -52						; size = 4
$T28 = -48						; size = 4
$T29 = -44						; size = 4
$T30 = -40						; size = 4
$T31 = -36						; size = 4
$T32 = -32						; size = 4
$T33 = -28						; size = 4
$T34 = -24						; size = 4
$T35 = -20						; size = 4
$T36 = -16						; size = 4
$T37 = -12						; size = 4
$T38 = -8						; size = 4
$T39 = -4						; size = 4
$T40 = 0						; size = 4
$T41 = 4						; size = 4
$T42 = 8						; size = 4
$T43 = 12						; size = 4
$T44 = 16						; size = 4
$T45 = 20						; size = 4
$T46 = 24						; size = 4
$T47 = 28						; size = 4
$T48 = 32						; size = 4
$T49 = 36						; size = 4
$T50 = 40						; size = 4
$T51 = 44						; size = 4
$T52 = 48						; size = 4
$T53 = 52						; size = 4
$T54 = 56						; size = 4
$T55 = 60						; size = 4
$T56 = 64						; size = 4
__Count$ = 68						; size = 4
tv230 = 72						; size = 4
$T57 = 76						; size = 4
$T58 = 80						; size = 4
tv73 = 84						; size = 4
tv212 = 88						; size = 4
__Overflow_is_possible$59 = 95				; size = 1
__Newmap$ = 96						; size = 4
__Newsize$ = 100					; size = 4
__Myboff$ = 104						; size = 4
__Myptr$ = 108						; size = 4
_this$ = 112						; size = 4
__Count$ = 124						; size = 4
?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXI@Z PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap, COMDAT
; _this$ = ecx

; 1430 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8d 6c 24 8c	 lea	 ebp, DWORD PTR [esp-116]
  00005	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0000b	89 4d 70	 mov	 DWORD PTR _this$[ebp], ecx

; 1522 :         return _Mypair._Get_first();

  0000e	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00011	89 45 40	 mov	 DWORD PTR $T56[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00014	8b 45 40	 mov	 eax, DWORD PTR $T56[ebp]
  00017	89 85 68 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0001d	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00020	89 45 3c	 mov	 DWORD PTR $T55[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00023	8b 45 3c	 mov	 eax, DWORD PTR $T55[ebp]
  00026	83 c0 08	 add	 eax, 8
  00029	89 45 38	 mov	 DWORD PTR $T54[ebp], eax

; 1431 :         static_assert(1 < _DEQUEMAPSIZ, "The _Xlen() test should always be performed.");
; 1432 : 
; 1433 :         _Alpty _Almap(_Getal());
; 1434 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  0002c	8b 45 38	 mov	 eax, DWORD PTR $T54[ebp]
  0002f	83 38 00	 cmp	 DWORD PTR [eax], 0
  00032	76 19		 jbe	 SHORT $LN10@Growmap

; 1530 :         return _Mypair._Myval2;

  00034	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 34	 mov	 DWORD PTR $T53[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  0003a	8b 45 34	 mov	 eax, DWORD PTR $T53[ebp]
  0003d	83 c0 08	 add	 eax, 8
  00040	89 45 30	 mov	 DWORD PTR $T52[ebp], eax

; 1431 :         static_assert(1 < _DEQUEMAPSIZ, "The _Xlen() test should always be performed.");
; 1432 : 
; 1433 :         _Alpty _Almap(_Getal());
; 1434 :         size_type _Newsize = 0 < _Mapsize() ? _Mapsize() : 1;

  00043	8b 45 30	 mov	 eax, DWORD PTR $T52[ebp]
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	89 45 54	 mov	 DWORD PTR tv73[ebp], eax
  0004b	eb 07		 jmp	 SHORT $LN11@Growmap
$LN10@Growmap:
  0004d	c7 45 54 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
$LN11@Growmap:
  00054	8b 45 54	 mov	 eax, DWORD PTR tv73[ebp]
  00057	89 45 64	 mov	 DWORD PTR __Newsize$[ebp], eax
$LN2@Growmap:

; 1530 :         return _Mypair._Myval2;

  0005a	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	89 45 2c	 mov	 DWORD PTR $T51[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00060	8b 45 2c	 mov	 eax, DWORD PTR $T51[ebp]
  00063	83 c0 08	 add	 eax, 8
  00066	89 45 28	 mov	 DWORD PTR $T50[ebp], eax

; 1435 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _DEQUEMAPSIZ) {

  00069	8b 45 28	 mov	 eax, DWORD PTR $T50[ebp]
  0006c	8b 4d 64	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  0006f	2b 08		 sub	 ecx, DWORD PTR [eax]
  00071	3b 4d 7c	 cmp	 ecx, DWORD PTR __Count$[ebp]
  00074	72 06		 jb	 SHORT $LN4@Growmap
  00076	83 7d 64 08	 cmp	 DWORD PTR __Newsize$[ebp], 8
  0007a	73 6d		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1526 :         return _Mypair._Get_first();

  0007c	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0007f	89 45 24	 mov	 DWORD PTR $T49[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1526 :         return _Mypair._Get_first();

  00082	8b 45 24	 mov	 eax, DWORD PTR $T49[ebp]
  00085	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0008b	c7 45 50 ff ff
	ff 01		 mov	 DWORD PTR $T58[ebp], 33554431 ; 01ffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00092	c7 45 20 ff ff
	ff 7f		 mov	 DWORD PTR $T48[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1005 :         return (_STD min)(

  00099	8b 45 20	 mov	 eax, DWORD PTR $T48[ebp]
  0009c	89 45 4c	 mov	 DWORD PTR $T57[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0009f	8b 45 50	 mov	 eax, DWORD PTR $T58[ebp]
  000a2	3b 45 4c	 cmp	 eax, DWORD PTR $T57[ebp]
  000a5	73 08		 jae	 SHORT $LN56@Growmap
  000a7	8d 45 50	 lea	 eax, DWORD PTR $T58[ebp]
  000aa	89 45 48	 mov	 DWORD PTR tv230[ebp], eax
  000ad	eb 06		 jmp	 SHORT $LN57@Growmap
$LN56@Growmap:
  000af	8d 45 4c	 lea	 eax, DWORD PTR $T57[ebp]
  000b2	89 45 48	 mov	 DWORD PTR tv230[ebp], eax
$LN57@Growmap:
  000b5	8b 45 48	 mov	 eax, DWORD PTR tv230[ebp]
  000b8	89 45 1c	 mov	 DWORD PTR $T47[ebp], eax
  000bb	8b 45 1c	 mov	 eax, DWORD PTR $T47[ebp]
  000be	89 45 18	 mov	 DWORD PTR $T46[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1005 :         return (_STD min)(

  000c1	8b 45 18	 mov	 eax, DWORD PTR $T46[ebp]
  000c4	8b 00		 mov	 eax, DWORD PTR [eax]
  000c6	89 45 14	 mov	 DWORD PTR $T45[ebp], eax

; 1436 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1437 :             if (max_size() / _DEQUESIZ - _Newsize < _Newsize) {

  000c9	8b 45 14	 mov	 eax, DWORD PTR $T45[ebp]
  000cc	2b 45 64	 sub	 eax, DWORD PTR __Newsize$[ebp]
  000cf	3b 45 64	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  000d2	73 08		 jae	 SHORT $LN5@Growmap

; 1438 :                 _Xlen(); // result too long

  000d4	8b 4d 70	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	e8 00 00 00 00	 call	 ?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@ABEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Xlen
$LN5@Growmap:

; 1439 :             }
; 1440 : 
; 1441 :             _Newsize *= 2;

  000dc	8b 45 64	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000df	d1 e0		 shl	 eax, 1
  000e1	89 45 64	 mov	 DWORD PTR __Newsize$[ebp], eax

; 1442 :         }

  000e4	e9 71 ff ff ff	 jmp	 $LN2@Growmap
$LN3@Growmap:

; 1530 :         return _Mypair._Myval2;

  000e9	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  000ec	89 45 10	 mov	 DWORD PTR $T44[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  000ef	8b 45 10	 mov	 eax, DWORD PTR $T44[ebp]
  000f2	83 c0 08	 add	 eax, 8
  000f5	89 45 0c	 mov	 DWORD PTR $T43[ebp], eax

; 1443 :         _Count = _Newsize - _Mapsize();

  000f8	8b 45 0c	 mov	 eax, DWORD PTR $T43[ebp]
  000fb	8b 4d 64	 mov	 ecx, DWORD PTR __Newsize$[ebp]
  000fe	2b 08		 sub	 ecx, DWORD PTR [eax]
  00100	89 4d 7c	 mov	 DWORD PTR __Count$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  00103	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00106	89 45 08	 mov	 DWORD PTR $T42[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  00109	8b 45 08	 mov	 eax, DWORD PTR $T42[ebp]
  0010c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0010f	89 45 04	 mov	 DWORD PTR $T41[ebp], eax

; 1444 : 
; 1445 :         size_type _Myboff = _Myoff() / _DEQUESIZ;

  00112	8b 45 04	 mov	 eax, DWORD PTR $T41[ebp]
  00115	8b 00		 mov	 eax, DWORD PTR [eax]
  00117	89 45 68	 mov	 DWORD PTR __Myboff$[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0011a	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0011d	89 45 00	 mov	 DWORD PTR $T40[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00120	8b 45 00	 mov	 eax, DWORD PTR $T40[ebp]
  00123	83 c0 08	 add	 eax, 8
  00126	89 45 fc	 mov	 DWORD PTR $T39[ebp], eax

; 1446 :         _Mapptr _Newmap   = _Almap.allocate(_Mapsize() + _Count);

  00129	8b 45 fc	 mov	 eax, DWORD PTR $T39[ebp]
  0012c	8b 00		 mov	 eax, DWORD PTR [eax]
  0012e	03 45 7c	 add	 eax, DWORD PTR __Count$[ebp]
  00131	89 45 44	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00134	c6 45 5f 01	 mov	 BYTE PTR __Overflow_is_possible$59[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00138	c7 85 60 ff ff
	ff ff ff ff 3f	 mov	 DWORD PTR __Max_possible$2[ebp], 1073741823 ; 3fffffffH

; 60   :         if (_Count > _Max_possible) {

  00142	81 7d 44 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  00149	76 05		 jbe	 SHORT $LN80@Growmap

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0014b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN80@Growmap:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00150	8b 45 44	 mov	 eax, DWORD PTR __Count$[ebp]
  00153	c1 e0 02	 shl	 eax, 2
  00156	89 45 f8	 mov	 DWORD PTR $T38[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00159	ff 75 f8	 push	 DWORD PTR $T38[ebp]
  0015c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00161	59		 pop	 ecx
  00162	89 45 60	 mov	 DWORD PTR __Newmap$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1447 :         _Mapptr _Myptr    = _Newmap + _Myboff;

  00165	8b 45 68	 mov	 eax, DWORD PTR __Myboff$[ebp]
  00168	8b 4d 60	 mov	 ecx, DWORD PTR __Newmap$[ebp]
  0016b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0016e	89 45 6c	 mov	 DWORD PTR __Myptr$[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00171	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00174	89 45 f4	 mov	 DWORD PTR $T37[ebp], eax

; 1538 :         return _Get_data()._Map;

  00177	8b 45 f4	 mov	 eax, DWORD PTR $T37[ebp]
  0017a	83 c0 04	 add	 eax, 4
  0017d	89 45 e4	 mov	 DWORD PTR $T33[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00180	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00183	89 45 f0	 mov	 DWORD PTR $T36[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00186	8b 45 f0	 mov	 eax, DWORD PTR $T36[ebp]
  00189	83 c0 08	 add	 eax, 8
  0018c	89 45 e8	 mov	 DWORD PTR $T34[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0018f	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00192	89 45 ec	 mov	 DWORD PTR $T35[ebp], eax

; 1538 :         return _Get_data()._Map;

  00195	8b 45 ec	 mov	 eax, DWORD PTR $T35[ebp]
  00198	83 c0 04	 add	 eax, 4
  0019b	89 45 e0	 mov	 DWORD PTR $T32[ebp], eax

; 1448 : 
; 1449 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  0019e	ff 75 6c	 push	 DWORD PTR __Myptr$[ebp]
  001a1	8b 45 e8	 mov	 eax, DWORD PTR $T34[ebp]
  001a4	8b 00		 mov	 eax, DWORD PTR [eax]
  001a6	8b 4d e4	 mov	 ecx, DWORD PTR $T33[ebp]
  001a9	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001ab	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  001ae	50		 push	 eax
  001af	8b 45 e0	 mov	 eax, DWORD PTR $T32[ebp]
  001b2	8b 00		 mov	 eax, DWORD PTR [eax]
  001b4	8b 4d 68	 mov	 ecx, DWORD PTR __Myboff$[ebp]
  001b7	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
  001c0	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c3	89 45 6c	 mov	 DWORD PTR __Myptr$[ebp], eax

; 1450 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  001c6	8b 45 68	 mov	 eax, DWORD PTR __Myboff$[ebp]
  001c9	3b 45 7c	 cmp	 eax, DWORD PTR __Count$[ebp]
  001cc	77 60		 ja	 SHORT $LN6@Growmap

; 1530 :         return _Mypair._Myval2;

  001ce	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  001d1	89 45 dc	 mov	 DWORD PTR $T31[ebp], eax

; 1538 :         return _Get_data()._Map;

  001d4	8b 45 dc	 mov	 eax, DWORD PTR $T31[ebp]
  001d7	83 c0 04	 add	 eax, 4
  001da	89 45 d4	 mov	 DWORD PTR $T29[ebp], eax

; 1530 :         return _Mypair._Myval2;

  001dd	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  001e0	89 45 d8	 mov	 DWORD PTR $T30[ebp], eax

; 1538 :         return _Get_data()._Map;

  001e3	8b 45 d8	 mov	 eax, DWORD PTR $T30[ebp]
  001e6	83 c0 04	 add	 eax, 4
  001e9	89 45 d0	 mov	 DWORD PTR $T28[ebp], eax

; 1451 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  001ec	ff 75 6c	 push	 DWORD PTR __Myptr$[ebp]
  001ef	8b 45 d4	 mov	 eax, DWORD PTR $T29[ebp]
  001f2	8b 00		 mov	 eax, DWORD PTR [eax]
  001f4	8b 4d 68	 mov	 ecx, DWORD PTR __Myboff$[ebp]
  001f7	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  001fa	50		 push	 eax
  001fb	8b 45 d0	 mov	 eax, DWORD PTR $T28[ebp]
  001fe	ff 30		 push	 DWORD PTR [eax]
  00200	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
  00205	83 c4 0c	 add	 esp, 12			; 0000000cH
  00208	89 45 6c	 mov	 DWORD PTR __Myptr$[ebp], eax

; 1452 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  0020b	8b 45 7c	 mov	 eax, DWORD PTR __Count$[ebp]
  0020e	2b 45 68	 sub	 eax, DWORD PTR __Myboff$[ebp]
  00211	50		 push	 eax
  00212	ff 75 6c	 push	 DWORD PTR __Myptr$[ebp]
  00215	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CPythonGraphic::SState * *,unsigned int>
  0021a	59		 pop	 ecx
  0021b	59		 pop	 ecx

; 1453 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new

  0021c	ff 75 68	 push	 DWORD PTR __Myboff$[ebp]
  0021f	ff 75 60	 push	 DWORD PTR __Newmap$[ebp]
  00222	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CPythonGraphic::SState * *,unsigned int>
  00227	59		 pop	 ecx
  00228	59		 pop	 ecx

; 1454 :         } else { // increment not greater than offset of initial block

  00229	e9 8b 00 00 00	 jmp	 $LN7@Growmap
$LN6@Growmap:

; 1530 :         return _Mypair._Myval2;

  0022e	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00231	89 45 cc	 mov	 DWORD PTR $T27[ebp], eax

; 1538 :         return _Get_data()._Map;

  00234	8b 45 cc	 mov	 eax, DWORD PTR $T27[ebp]
  00237	83 c0 04	 add	 eax, 4
  0023a	89 45 c4	 mov	 DWORD PTR $T25[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0023d	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00240	89 45 c8	 mov	 DWORD PTR $T26[ebp], eax

; 1538 :         return _Get_data()._Map;

  00243	8b 45 c8	 mov	 eax, DWORD PTR $T26[ebp]
  00246	83 c0 04	 add	 eax, 4
  00249	89 45 c0	 mov	 DWORD PTR $T24[ebp], eax

; 1455 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  0024c	ff 75 6c	 push	 DWORD PTR __Myptr$[ebp]
  0024f	8b 45 c4	 mov	 eax, DWORD PTR $T25[ebp]
  00252	8b 00		 mov	 eax, DWORD PTR [eax]
  00254	8b 4d 7c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00257	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0025a	50		 push	 eax
  0025b	8b 45 c0	 mov	 eax, DWORD PTR $T24[ebp]
  0025e	ff 30		 push	 DWORD PTR [eax]
  00260	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
  00265	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1530 :         return _Mypair._Myval2;

  00268	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0026b	89 45 bc	 mov	 DWORD PTR $T23[ebp], eax

; 1538 :         return _Get_data()._Map;

  0026e	8b 45 bc	 mov	 eax, DWORD PTR $T23[ebp]
  00271	83 c0 04	 add	 eax, 4
  00274	89 45 b4	 mov	 DWORD PTR $T21[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00277	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0027a	89 45 b8	 mov	 DWORD PTR $T22[ebp], eax

; 1538 :         return _Get_data()._Map;

  0027d	8b 45 b8	 mov	 eax, DWORD PTR $T22[ebp]
  00280	83 c0 04	 add	 eax, 4
  00283	89 45 b0	 mov	 DWORD PTR $T20[ebp], eax

; 1456 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  00286	ff 75 60	 push	 DWORD PTR __Newmap$[ebp]
  00289	8b 45 b4	 mov	 eax, DWORD PTR $T21[ebp]
  0028c	8b 00		 mov	 eax, DWORD PTR [eax]
  0028e	8b 4d 68	 mov	 ecx, DWORD PTR __Myboff$[ebp]
  00291	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  00294	50		 push	 eax
  00295	8b 45 b0	 mov	 eax, DWORD PTR $T20[ebp]
  00298	8b 00		 mov	 eax, DWORD PTR [eax]
  0029a	8b 4d 7c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0029d	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  002a0	50		 push	 eax
  002a1	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
  002a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  002a9	89 45 6c	 mov	 DWORD PTR __Myptr$[ebp], eax

; 1457 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  002ac	ff 75 7c	 push	 DWORD PTR __Count$[ebp]
  002af	ff 75 6c	 push	 DWORD PTR __Myptr$[ebp]
  002b2	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CPythonGraphic::SState * *,unsigned int>
  002b7	59		 pop	 ecx
  002b8	59		 pop	 ecx
$LN7@Growmap:

; 1530 :         return _Mypair._Myval2;

  002b9	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  002bc	89 45 ac	 mov	 DWORD PTR $T19[ebp], eax

; 1538 :         return _Get_data()._Map;

  002bf	8b 45 ac	 mov	 eax, DWORD PTR $T19[ebp]
  002c2	83 c0 04	 add	 eax, 4
  002c5	89 45 9c	 mov	 DWORD PTR $T15[ebp], eax

; 1530 :         return _Mypair._Myval2;

  002c8	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  002cb	89 45 a8	 mov	 DWORD PTR $T18[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  002ce	8b 45 a8	 mov	 eax, DWORD PTR $T18[ebp]
  002d1	83 c0 08	 add	 eax, 8
  002d4	89 45 a0	 mov	 DWORD PTR $T16[ebp], eax

; 1530 :         return _Mypair._Myval2;

  002d7	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  002da	89 45 a4	 mov	 DWORD PTR $T17[ebp], eax

; 1538 :         return _Get_data()._Map;

  002dd	8b 45 a4	 mov	 eax, DWORD PTR $T17[ebp]
  002e0	83 c0 04	 add	 eax, 4
  002e3	89 45 98	 mov	 DWORD PTR $T14[ebp], eax

; 1458 :         }
; 1459 : 
; 1460 :         _Destroy_range(_Map() + _Myboff, _Map() + _Mapsize());

  002e6	8b 45 a0	 mov	 eax, DWORD PTR $T16[ebp]
  002e9	8b 00		 mov	 eax, DWORD PTR [eax]
  002eb	8b 4d 9c	 mov	 ecx, DWORD PTR $T15[ebp]
  002ee	8b 09		 mov	 ecx, DWORD PTR [ecx]
  002f0	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  002f3	50		 push	 eax
  002f4	8b 45 98	 mov	 eax, DWORD PTR $T14[ebp]
  002f7	8b 00		 mov	 eax, DWORD PTR [eax]
  002f9	8b 4d 68	 mov	 ecx, DWORD PTR __Myboff$[ebp]
  002fc	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  002ff	50		 push	 eax
  00300	e8 00 00 00 00	 call	 ??$_Destroy_range@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAXPAPAUSState@CPythonGraphic@@QAPAU12@@Z ; std::_Destroy_range<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
  00305	59		 pop	 ecx
  00306	59		 pop	 ecx

; 1530 :         return _Mypair._Myval2;

  00307	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0030a	89 45 94	 mov	 DWORD PTR $T13[ebp], eax

; 1538 :         return _Get_data()._Map;

  0030d	8b 45 94	 mov	 eax, DWORD PTR $T13[ebp]
  00310	83 c0 04	 add	 eax, 4
  00313	89 45 90	 mov	 DWORD PTR $T12[ebp], eax

; 1461 :         if (_Map() != _Mapptr()) {

  00316	8b 45 90	 mov	 eax, DWORD PTR $T12[ebp]
  00319	83 38 00	 cmp	 DWORD PTR [eax], 0
  0031c	74 4b		 je	 SHORT $LN8@Growmap

; 1530 :         return _Mypair._Myval2;

  0031e	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00321	89 45 8c	 mov	 DWORD PTR $T11[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  00324	8b 45 8c	 mov	 eax, DWORD PTR $T11[ebp]
  00327	83 c0 08	 add	 eax, 8
  0032a	89 45 84	 mov	 DWORD PTR $T9[ebp], eax

; 1530 :         return _Mypair._Myval2;

  0032d	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00330	89 45 88	 mov	 DWORD PTR $T10[ebp], eax

; 1538 :         return _Get_data()._Map;

  00333	8b 45 88	 mov	 eax, DWORD PTR $T10[ebp]
  00336	83 c0 04	 add	 eax, 4
  00339	89 45 80	 mov	 DWORD PTR $T8[ebp], eax

; 1462 :             _Almap.deallocate(_Map(), _Mapsize()); // free storage for old

  0033c	8b 45 84	 mov	 eax, DWORD PTR $T9[ebp]
  0033f	8b 00		 mov	 eax, DWORD PTR [eax]
  00341	89 85 7c ff ff
	ff		 mov	 DWORD PTR __Count$[ebp], eax
  00347	8b 45 80	 mov	 eax, DWORD PTR $T8[ebp]
  0034a	8b 00		 mov	 eax, DWORD PTR [eax]
  0034c	89 85 78 ff ff
	ff		 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00352	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR __Count$[ebp]
  00358	c1 e0 02	 shl	 eax, 2
  0035b	50		 push	 eax
  0035c	ff b5 78 ff ff
	ff		 push	 DWORD PTR __Ptr$[ebp]
  00362	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00367	59		 pop	 ecx
  00368	59		 pop	 ecx
$LN8@Growmap:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  00369	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  0036c	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T7[ebp], eax

; 1538 :         return _Get_data()._Map;

  00372	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  00378	83 c0 04	 add	 eax, 4
  0037b	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax

; 1463 :         }
; 1464 : 
; 1465 :         _Map() = _Newmap; // point at new

  00381	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00387	8b 4d 60	 mov	 ecx, DWORD PTR __Newmap$[ebp]
  0038a	89 08		 mov	 DWORD PTR [eax], ecx

; 1466 :         _Mapsize() += _Count;

  0038c	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00392	89 45 58	 mov	 DWORD PTR tv212[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00395	8b 45 70	 mov	 eax, DWORD PTR _this$[ebp]
  00398	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax

; 1546 :         return _Get_data()._Mapsize;

  0039e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  003a4	83 c0 08	 add	 eax, 8
  003a7	89 45 58	 mov	 DWORD PTR tv212[ebp], eax

; 1466 :         _Mapsize() += _Count;

  003aa	8b 45 58	 mov	 eax, DWORD PTR tv212[ebp]
  003ad	8b 00		 mov	 eax, DWORD PTR [eax]
  003af	03 45 7c	 add	 eax, DWORD PTR __Count$[ebp]
  003b2	8b 4d 58	 mov	 ecx, DWORD PTR tv212[ebp]
  003b5	89 01		 mov	 DWORD PTR [ecx], eax
$LN83@Growmap:

; 1467 :     }

  003b7	83 c5 74	 add	 ebp, 116		; 00000074H
  003ba	c9		 leave
  003bb	c2 04 00	 ret	 4
?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXI@Z ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@ABEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@ABEXXZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Xlen, COMDAT
; _this$ = ecx

; 1422 :     [[noreturn]] void _Xlen() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1423 :         _Xlength_error("deque<T> too long");

  00007	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  0000c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1424 :     }

  00011	c9		 leave
  00012	c3		 ret	 0
?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@ABEXXZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?pop_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -80						; size = 4
$T2 = -76						; size = 4
$T3 = -72						; size = 4
$T4 = -68						; size = 4
$T5 = -64						; size = 4
$T6 = -60						; size = 4
$T7 = -56						; size = 4
__Ptr$ = -52						; size = 4
__Block$ = -48						; size = 4
$T8 = -44						; size = 4
$T9 = -40						; size = 4
$T10 = -36						; size = 4
$T11 = -32						; size = 4
$T12 = -28						; size = 4
$T13 = -24						; size = 4
$T14 = -20						; size = 4
$T15 = -16						; size = 4
__Newoff$ = -12						; size = 4
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?pop_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXXZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::pop_back, COMDAT
; _this$ = ecx

; 1126 :     void pop_back() noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR $T15[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T15[ebp]
  00012	83 c0 0c	 add	 eax, 12			; 0000000cH
  00015	89 45 e8	 mov	 DWORD PTR $T13[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	89 45 ec	 mov	 DWORD PTR $T14[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  0001e	8b 45 ec	 mov	 eax, DWORD PTR $T14[ebp]
  00021	83 c0 10	 add	 eax, 16			; 00000010H
  00024	89 45 e4	 mov	 DWORD PTR $T12[ebp], eax

; 1127 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1128 :         if (empty()) {
; 1129 :             _STL_REPORT_ERROR("deque empty before pop");
; 1130 :         } else { // something to erase, do it
; 1131 :             size_type _Newoff = _Myoff() + _Mysize() - 1;
; 1132 :             _Orphan_off(_Newoff);
; 1133 :             size_type _Block = _Getblock(_Newoff);
; 1134 :             _Alty_traits::destroy(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ));
; 1135 :             if (--_Mysize() == 0) {
; 1136 :                 _Myoff() = 0;
; 1137 :             }
; 1138 :         }
; 1139 : 
; 1140 : #else // _ITERATOR_DEBUG_LEVEL == 2
; 1141 :         size_type _Newoff = _Myoff() + _Mysize() - 1;

  00027	8b 45 e8	 mov	 eax, DWORD PTR $T13[ebp]
  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	8b 4d e4	 mov	 ecx, DWORD PTR $T12[ebp]
  0002f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00031	8d 44 08 ff	 lea	 eax, DWORD PTR [eax+ecx-1]
  00035	89 45 f4	 mov	 DWORD PTR __Newoff$[ebp], eax

; 1534 :         return _Mypair._Myval2;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	89 45 e0	 mov	 DWORD PTR $T11[ebp], eax

; 548  :         return (_Off / _DEQUESIZ) & (_Mapsize - 1);

  0003e	8b 45 e0	 mov	 eax, DWORD PTR $T11[ebp]
  00041	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00044	48		 dec	 eax
  00045	23 45 f4	 and	 eax, DWORD PTR __Newoff$[ebp]
  00048	89 45 dc	 mov	 DWORD PTR $T10[ebp], eax

; 1514 :         return _Get_data()._Getblock(_Off);

  0004b	8b 45 dc	 mov	 eax, DWORD PTR $T10[ebp]
  0004e	89 45 d0	 mov	 DWORD PTR __Block$[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	89 45 d8	 mov	 DWORD PTR $T9[ebp], eax

; 1538 :         return _Get_data()._Map;

  00057	8b 45 d8	 mov	 eax, DWORD PTR $T9[ebp]
  0005a	83 c0 04	 add	 eax, 4
  0005d	89 45 d4	 mov	 DWORD PTR $T8[ebp], eax

; 1142 :         size_type _Block  = _Getblock(_Newoff);
; 1143 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Map()[_Block] + _Newoff % _DEQUESIZ));

  00060	8b 45 f4	 mov	 eax, DWORD PTR __Newoff$[ebp]
  00063	33 d2		 xor	 edx, edx
  00065	33 c9		 xor	 ecx, ecx
  00067	41		 inc	 ecx
  00068	f7 f1		 div	 ecx
  0006a	c1 e2 07	 shl	 edx, 7
  0006d	8b 45 d4	 mov	 eax, DWORD PTR $T8[ebp]
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	8b 4d d0	 mov	 ecx, DWORD PTR __Block$[ebp]
  00075	03 14 88	 add	 edx, DWORD PTR [eax+ecx*4]
  00078	89 55 cc	 mov	 DWORD PTR __Ptr$[ebp], edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0007b	8b 45 cc	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0007e	89 45 b8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00081	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00084	89 45 c8	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00087	8b 45 c8	 mov	 eax, DWORD PTR $T7[ebp]
  0008a	89 45 b4	 mov	 DWORD PTR $T2[ebp], eax

; 1144 :         if (--_Mysize() == 0) {

  0008d	8b 45 b0	 mov	 eax, DWORD PTR $T1[ebp]
  00090	89 45 f8	 mov	 DWORD PTR tv88[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00096	89 45 c4	 mov	 DWORD PTR $T6[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  00099	8b 45 c4	 mov	 eax, DWORD PTR $T6[ebp]
  0009c	83 c0 10	 add	 eax, 16			; 00000010H
  0009f	89 45 f8	 mov	 DWORD PTR tv88[ebp], eax

; 1144 :         if (--_Mysize() == 0) {

  000a2	8b 45 f8	 mov	 eax, DWORD PTR tv88[ebp]
  000a5	8b 00		 mov	 eax, DWORD PTR [eax]
  000a7	48		 dec	 eax
  000a8	8b 4d f8	 mov	 ecx, DWORD PTR tv88[ebp]
  000ab	89 01		 mov	 DWORD PTR [ecx], eax
  000ad	8b 45 f8	 mov	 eax, DWORD PTR tv88[ebp]
  000b0	83 38 00	 cmp	 DWORD PTR [eax], 0
  000b3	75 15		 jne	 SHORT $LN3@pop_back

; 1530 :         return _Mypair._Myval2;

  000b5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b8	89 45 c0	 mov	 DWORD PTR $T5[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  000bb	8b 45 c0	 mov	 eax, DWORD PTR $T5[ebp]
  000be	83 c0 0c	 add	 eax, 12			; 0000000cH
  000c1	89 45 bc	 mov	 DWORD PTR $T4[ebp], eax

; 1145 :             _Myoff() = 0;

  000c4	8b 45 bc	 mov	 eax, DWORD PTR $T4[ebp]
  000c7	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@pop_back:

; 1146 :         }
; 1147 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1148 :     }

  000ca	c9		 leave
  000cb	c3		 ret	 0
?pop_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXXZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::pop_back
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ
_TEXT	SEGMENT
$T1 = -36						; size = 8
$T2 = -28						; size = 8
__First$ = -20						; size = 8
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
?back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::back, COMDAT
; _this$ = ecx

; 1063 :     _NODISCARD reference back() noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1064 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1065 :         _STL_VERIFY(!empty(), "back() called on empty deque");
; 1066 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1067 : 
; 1068 :         return *_Prev_iter(_Unchecked_end());

  00009	8d 45 dc	 lea	 eax, DWORD PTR $T1[ebp]
  0000c	50		 push	 eax
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	e8 00 00 00 00	 call	 ?_Unchecked_end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Unchecked_end
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001a	89 4d ec	 mov	 DWORD PTR __First$[ebp], ecx
  0001d	89 45 f0	 mov	 DWORD PTR __First$[ebp+4], eax

; 76   :         --_Myoff;

  00020	8b 45 f0	 mov	 eax, DWORD PTR __First$[ebp+4]
  00023	48		 dec	 eax
  00024	89 45 f0	 mov	 DWORD PTR __First$[ebp+4], eax

; 191  :         return *this;

  00027	8d 45 ec	 lea	 eax, DWORD PTR __First$[ebp]
  0002a	89 45 f8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR $T4[ebp]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	89 4d e4	 mov	 DWORD PTR $T2[ebp], ecx
  00038	89 45 e8	 mov	 DWORD PTR $T2[ebp+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 171  :         return const_cast<reference>(_Mybase::operator*());

  0003b	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  0003e	e8 00 00 00 00	 call	 ??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@std@@QBEABUSState@CPythonGraphic@@XZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> > >::operator*
  00043	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax

; 1064 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1065 :         _STL_VERIFY(!empty(), "back() called on empty deque");
; 1066 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1067 : 
; 1068 :         return *_Prev_iter(_Unchecked_end());

  00046	8b 45 f4	 mov	 eax, DWORD PTR $T3[ebp]

; 1069 :     }

  00049	c9		 leave
  0004a	c3		 ret	 0
?back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::back
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ?_Unchecked_end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___param0$ = -32					; size = 4
$T1 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
$T5 = -12						; size = 4
$T6 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 921  :     _Unchecked_iterator _Unchecked_end() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1530 :         return _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T6[ebp]
  00012	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	89 45 f4	 mov	 DWORD PTR $T5[ebp], eax

; 1554 :         return _Get_data()._Myoff;

  0001b	8b 45 f4	 mov	 eax, DWORD PTR $T5[ebp]
  0001e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00021	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax

; 1562 :         return _Get_data()._Mysize;

  0002a	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]
  0002d	83 c0 10	 add	 eax, 16			; 00000010H
  00030	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00033	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  0003b	03 01		 add	 eax, DWORD PTR [ecx]
  0003d	89 45 e0	 mov	 DWORD PTR ___param0$[ebp], eax

; 52   :         : _Mycont(static_cast<const _Mydeque*>(_Pdeque)), _Myoff(_Off) {}

  00040	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00043	8b 4d e4	 mov	 ecx, DWORD PTR $T1[ebp]
  00046	89 08		 mov	 DWORD PTR [eax], ecx
  00048	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004b	8b 4d e0	 mov	 ecx, DWORD PTR ___param0$[ebp]
  0004e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 922  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00051	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 923  :     }

  00054	c9		 leave
  00055	c2 04 00	 ret	 4
?_Unchecked_end@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@@2@XZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
__Old_val$3 = -24					; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
$T6 = -12						; size = 4
_this$ = -8						; size = 4
__Proxy_allocator$ = -1					; size = 1
??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >, COMDAT
; _this$ = ecx

; 869  :     ~deque() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 870  :         _Tidy();

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Tidy@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Tidy

; 1522 :         return _Mypair._Get_first();

  00011	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00014	89 45 f0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00017	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  0001a	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax

; 872  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  0001d	83 65 ec 00	 and	 DWORD PTR $T4[ebp], 0

; 1530 :         return _Mypair._Myval2;

  00021	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00024	89 45 f4	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 598  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00027	8b 45 f4	 mov	 eax, DWORD PTR $T6[ebp]
  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	89 45 e8	 mov	 DWORD PTR __Old_val$3[ebp], eax

; 599  :     _Val         = static_cast<_Other&&>(_New_val);

  0002f	8b 45 f4	 mov	 eax, DWORD PTR $T6[ebp]
  00032	8b 4d ec	 mov	 ecx, DWORD PTR $T4[ebp]
  00035	89 08		 mov	 DWORD PTR [eax], ecx

; 600  :     return _Old_val;

  00037	8b 45 e8	 mov	 eax, DWORD PTR __Old_val$3[ebp]
  0003a	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 872  :         _Delete_plain_internal(_Proxy_allocator, _STD exchange(_Get_data()._Myproxy, nullptr));

  0003d	ff 75 e4	 push	 DWORD PTR $T2[ebp]
  00040	8d 45 ff	 lea	 eax, DWORD PTR __Proxy_allocator$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
  00049	59		 pop	 ecx
  0004a	59		 pop	 ecx

; 873  :     }

  0004b	c9		 leave
  0004c	c3		 ret	 0
??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
;	COMDAT ??0?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_this$ = -12						; size = 4
_this$ = -8						; size = 4
$T4 = -1						; size = 1
??0?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >, COMDAT
; _this$ = ecx

; 596  :     deque() : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ??0?$_Deque_val@U?$_Deque_simple_types@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >::_Deque_val<std::_Deque_simple_types<CPythonGraphic::SState> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  00017	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0001a	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1522 :         return _Mypair._Get_first();

  0001d	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00020	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax

; 1530 :         return _Mypair._Myval2;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax

; 597  :         _Get_data()._Alloc_proxy(static_cast<_Alproxy_ty>(_Getal()));

  00029	8d 45 ff	 lea	 eax, DWORD PTR $T4[ebp]
  0002c	50		 push	 eax
  0002d	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  00030	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 598  :     }

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c9		 leave
  00039	c3		 ret	 0
??0?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetGamma@CPythonGraphic@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -128						; size = 4
_ui$ = -124						; size = 4
_i$1 = -120						; size = 4
_val$ = -116						; size = 4
_NewRamp$ = -112					; size = 1536
_d3dCaps$ = 1424					; size = 212
__$ArrayPad$ = 1636					; size = 4
_fGammaFactor$ = 1648					; size = 4
?SetGamma@CPythonGraphic@@QAEXM@Z PROC			; CPythonGraphic::SetGamma, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8d ac 24 98 f9
	ff ff		 lea	 ebp, DWORD PTR [esp-1640]
  00008	81 ec e8 06 00
	00		 sub	 esp, 1768		; 000006e8H
  0000e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00013	33 c5		 xor	 eax, ebp
  00015	89 85 64 06 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001b	89 4d 80	 mov	 DWORD PTR _this$[ebp], ecx

; 126  : 	D3DCAPS8		d3dCaps;
; 127  : 	D3DGAMMARAMP	NewRamp;
; 128  : 	int				ui, val;
; 129  : 	
; 130  : 	ms_lpd3dDevice->GetDeviceCaps(&d3dCaps);

  0001e	8d 85 90 05 00
	00		 lea	 eax, DWORD PTR _d3dCaps$[ebp]
  00024	50		 push	 eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00032	ff 50 1c	 call	 DWORD PTR [eax+28]

; 131  : 
; 132  : 	if (D3DCAPS2_FULLSCREENGAMMA != (d3dCaps.Caps2 & D3DCAPS2_FULLSCREENGAMMA))

  00035	8b 85 9c 05 00
	00		 mov	 eax, DWORD PTR _d3dCaps$[ebp+12]
  0003b	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  00040	75 05		 jne	 SHORT $LN5@SetGamma

; 133  : 		return;

  00042	e9 b9 00 00 00	 jmp	 $LN1@SetGamma
$LN5@SetGamma:

; 134  : 
; 135  : 	for (int i = 0; i < 256; ++i)

  00047	83 65 88 00	 and	 DWORD PTR _i$1[ebp], 0
  0004b	eb 07		 jmp	 SHORT $LN4@SetGamma
$LN2@SetGamma:
  0004d	8b 45 88	 mov	 eax, DWORD PTR _i$1[ebp]
  00050	40		 inc	 eax
  00051	89 45 88	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@SetGamma:
  00054	81 7d 88 00 01
	00 00		 cmp	 DWORD PTR _i$1[ebp], 256 ; 00000100H
  0005b	0f 8d 89 00 00
	00		 jge	 $LN3@SetGamma

; 136  : 	{
; 137  : 		val	= (int) (i * fGammaFactor * 255.0f);

  00061	f3 0f 2a 45 88	 cvtsi2ss xmm0, DWORD PTR _i$1[ebp]
  00066	f3 0f 59 85 70
	06 00 00	 mulss	 xmm0, DWORD PTR _fGammaFactor$[ebp]
  0006e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00076	f3 0f 2c c0	 cvttss2si eax, xmm0
  0007a	89 45 8c	 mov	 DWORD PTR _val$[ebp], eax

; 138  : 		ui = 0;

  0007d	83 65 84 00	 and	 DWORD PTR _ui$[ebp], 0

; 139  : 		
; 140  : 		if (val > 32767)

  00081	81 7d 8c ff 7f
	00 00		 cmp	 DWORD PTR _val$[ebp], 32767 ; 00007fffH
  00088	7e 12		 jle	 SHORT $LN6@SetGamma

; 141  : 		{
; 142  : 			val = val - 32767;

  0008a	8b 45 8c	 mov	 eax, DWORD PTR _val$[ebp]
  0008d	2d ff 7f 00 00	 sub	 eax, 32767		; 00007fffH
  00092	89 45 8c	 mov	 DWORD PTR _val$[ebp], eax

; 143  : 			ui = 1;

  00095	c7 45 84 01 00
	00 00		 mov	 DWORD PTR _ui$[ebp], 1
$LN6@SetGamma:

; 144  : 		}
; 145  : 
; 146  : 		if (val > 32767)

  0009c	81 7d 8c ff 7f
	00 00		 cmp	 DWORD PTR _val$[ebp], 32767 ; 00007fffH
  000a3	7e 07		 jle	 SHORT $LN7@SetGamma

; 147  : 			val = 32767;

  000a5	c7 45 8c ff 7f
	00 00		 mov	 DWORD PTR _val$[ebp], 32767 ; 00007fffH
$LN7@SetGamma:

; 148  : 		
; 149  : 		NewRamp.red[i] = (WORD) (val | (32768 * ui));

  000ac	8b 45 84	 mov	 eax, DWORD PTR _ui$[ebp]
  000af	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  000b2	0b 45 8c	 or	 eax, DWORD PTR _val$[ebp]
  000b5	8b 4d 88	 mov	 ecx, DWORD PTR _i$1[ebp]
  000b8	66 89 44 4d 90	 mov	 WORD PTR _NewRamp$[ebp+ecx*2], ax

; 150  : 		NewRamp.green[i] = (WORD) (val | (32768 * ui));

  000bd	8b 45 84	 mov	 eax, DWORD PTR _ui$[ebp]
  000c0	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  000c3	0b 45 8c	 or	 eax, DWORD PTR _val$[ebp]
  000c6	8b 4d 88	 mov	 ecx, DWORD PTR _i$1[ebp]
  000c9	66 89 84 4d 90
	01 00 00	 mov	 WORD PTR _NewRamp$[ebp+ecx*2+512], ax

; 151  : 		NewRamp.blue[i] = (WORD) (val | (32768 * ui));

  000d1	8b 45 84	 mov	 eax, DWORD PTR _ui$[ebp]
  000d4	c1 e0 0f	 shl	 eax, 15			; 0000000fH
  000d7	0b 45 8c	 or	 eax, DWORD PTR _val$[ebp]
  000da	8b 4d 88	 mov	 ecx, DWORD PTR _i$1[ebp]
  000dd	66 89 84 4d 90
	03 00 00	 mov	 WORD PTR _NewRamp$[ebp+ecx*2+1024], ax

; 152  : 	}

  000e5	e9 63 ff ff ff	 jmp	 $LN2@SetGamma
$LN3@SetGamma:

; 153  : 
; 154  : 	ms_lpd3dDevice->SetGammaRamp(D3DSGR_NO_CALIBRATION, &NewRamp);

  000ea	8d 45 90	 lea	 eax, DWORD PTR _NewRamp$[ebp]
  000ed	50		 push	 eax
  000ee	6a 00		 push	 0
  000f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000f5	8b 00		 mov	 eax, DWORD PTR [eax]
  000f7	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  000fd	ff 50 48	 call	 DWORD PTR [eax+72]
$LN1@SetGamma:

; 155  : }

  00100	8b 8d 64 06 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00106	33 cd		 xor	 ecx, ebp
  00108	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010d	81 c5 68 06 00
	00		 add	 ebp, 1640		; 00000668H
  00113	c9		 leave
  00114	c2 04 00	 ret	 4
?SetGamma@CPythonGraphic@@QAEXM@Z ENDP			; CPythonGraphic::SetGamma
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?GetAvailableMemory@CPythonGraphic@@QAEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAvailableMemory@CPythonGraphic@@QAEKXZ PROC		; CPythonGraphic::GetAvailableMemory, COMDAT
; _this$ = ecx

; 607  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 608  : 	return ms_lpd3dDevice->GetAvailableTextureMem();

  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
  0000e	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00014	ff 50 10	 call	 DWORD PTR [eax+16]

; 609  : }

  00017	c9		 leave
  00018	c3		 ret	 0
?GetAvailableMemory@CPythonGraphic@@QAEKXZ ENDP		; CPythonGraphic::GetAvailableMemory
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z
_TEXT	SEGMENT
_lockRect$ = -168					; size = 8
_fileSize$1 = -160					; size = 4
$T2 = -156						; size = 4
_this$ = -152						; size = 4
$T3 = -148						; size = 4
_imgDescLen$4 = -144					; size = 4
_pbySource$ = -140					; size = 4
_uColor$5 = -136					; size = 4
_x$6 = -132						; size = 4
_uColor$7 = -128					; size = 4
_x$8 = -124						; size = 4
_x$9 = -120						; size = 4
_x$10 = -116						; size = 4
_y$11 = -112						; size = 4
_tail$12 = -108						; size = 4
tv90 = -104						; size = 4
_uHeight$ = -100					; size = 4
_tailSize$13 = -96					; size = 4
_pbyBuffer$ = -92					; size = 4
tv176 = -88						; size = 4
_srcFilePtr$14 = -84					; size = 4
_uWidth$ = -80						; size = 4
_bSaved$ = -73						; size = 1
_dstFilePtr$15 = -72					; size = 4
_hr$ = -68						; size = 4
_byBlue$16 = -62					; size = 1
_byRed$17 = -61						; size = 1
_byGreen$18 = -60					; size = 1
_byBlue$19 = -59					; size = 1
_byRed$20 = -58						; size = 1
_byGreen$21 = -57					; size = 1
_pRow$22 = -56						; size = 4
_lpSurface$ = -52					; size = 4
_pbyDestination$ = -48					; size = 4
_stSurfaceDesc$ = -44					; size = 32
_imgDesc$23 = -12					; size = 64
_head$24 = 52						; size = 21
_exifHeader$25 = 76					; size = 35
__$ArrayPad$ = 112					; size = 4
_c_pszFileName$ = 124					; size = 4
?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z PROC		; CPythonGraphic::SaveScreenShot, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8d 6c 24 8c	 lea	 ebp, DWORD PTR [esp-116]
  00005	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 70	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	89 8d 68 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 174  : 	HRESULT hr;
; 175  : 	LPDIRECT3DSURFACE8 lpSurface;
; 176  : 	D3DSURFACE_DESC stSurfaceDesc;
; 177  : 
; 178  : 	if (FAILED(hr = ms_lpd3dDevice->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &lpSurface)))

  0001b	8d 45 cc	 lea	 eax, DWORD PTR _lpSurface$[ebp]
  0001e	50		 push	 eax
  0001f	6a 00		 push	 0
  00021	6a 00		 push	 0
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00030	ff 50 40	 call	 DWORD PTR [eax+64]
  00033	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax
  00036	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0003a	7d 16		 jge	 SHORT $LN21@SaveScreen

; 179  : 	{
; 180  : 		TraceError("Failed to get back buffer (0x%08x)", hr);

  0003c	ff 75 bc	 push	 DWORD PTR _hr$[ebp]
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF0@
  00044	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00049	59		 pop	 ecx
  0004a	59		 pop	 ecx

; 181  : 		return false;

  0004b	32 c0		 xor	 al, al
  0004d	e9 8b 06 00 00	 jmp	 $LN1@SaveScreen
$LN21@SaveScreen:

; 182  : 	}
; 183  : 
; 184  : 	if (FAILED(hr = lpSurface->GetDesc(&stSurfaceDesc)))

  00052	8d 45 d4	 lea	 eax, DWORD PTR _stSurfaceDesc$[ebp]
  00055	50		 push	 eax
  00056	8b 45 cc	 mov	 eax, DWORD PTR _lpSurface$[ebp]
  00059	8b 00		 mov	 eax, DWORD PTR [eax]
  0005b	ff 75 cc	 push	 DWORD PTR _lpSurface$[ebp]
  0005e	ff 50 20	 call	 DWORD PTR [eax+32]
  00061	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax
  00064	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  00068	7d 2b		 jge	 SHORT $LN22@SaveScreen

; 185  : 	{
; 186  : 		TraceError("Failed to get surface desc (0x%08x)", hr);

  0006a	ff 75 bc	 push	 DWORD PTR _hr$[ebp]
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF@
  00072	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00077	59		 pop	 ecx
  00078	59		 pop	 ecx

; 187  : 		SAFE_RELEASE(lpSurface);

  00079	83 7d cc 00	 cmp	 DWORD PTR _lpSurface$[ebp], 0
  0007d	74 0f		 je	 SHORT $LN23@SaveScreen
  0007f	8b 45 cc	 mov	 eax, DWORD PTR _lpSurface$[ebp]
  00082	8b 00		 mov	 eax, DWORD PTR [eax]
  00084	ff 75 cc	 push	 DWORD PTR _lpSurface$[ebp]
  00087	ff 50 08	 call	 DWORD PTR [eax+8]
  0008a	83 65 cc 00	 and	 DWORD PTR _lpSurface$[ebp], 0
$LN23@SaveScreen:

; 188  : 		return false;

  0008e	32 c0		 xor	 al, al
  00090	e9 48 06 00 00	 jmp	 $LN1@SaveScreen
$LN22@SaveScreen:

; 189  : 	}
; 190  : 
; 191  : 	UINT uWidth = stSurfaceDesc.Width;

  00095	8b 45 ec	 mov	 eax, DWORD PTR _stSurfaceDesc$[ebp+24]
  00098	89 45 b0	 mov	 DWORD PTR _uWidth$[ebp], eax

; 192  : 	UINT uHeight = stSurfaceDesc.Height;

  0009b	8b 45 f0	 mov	 eax, DWORD PTR _stSurfaceDesc$[ebp+28]
  0009e	89 45 9c	 mov	 DWORD PTR _uHeight$[ebp], eax

; 193  : 
; 194  : 	switch( stSurfaceDesc.Format ) {

  000a1	8b 45 d4	 mov	 eax, DWORD PTR _stSurfaceDesc$[ebp]
  000a4	89 45 98	 mov	 DWORD PTR tv90[ebp], eax
  000a7	83 7d 98 1a	 cmp	 DWORD PTR tv90[ebp], 26	; 0000001aH
  000ab	7c 41		 jl	 SHORT $LN2@SaveScreen
  000ad	83 7d 98 1b	 cmp	 DWORD PTR tv90[ebp], 27	; 0000001bH
  000b1	7e 10		 jle	 SHORT $LN25@SaveScreen
  000b3	83 7d 98 1c	 cmp	 DWORD PTR tv90[ebp], 28	; 0000001cH
  000b7	7e 35		 jle	 SHORT $LN2@SaveScreen
  000b9	83 7d 98 1f	 cmp	 DWORD PTR tv90[ebp], 31	; 0000001fH
  000bd	7e 04		 jle	 SHORT $LN25@SaveScreen
  000bf	eb 2d		 jmp	 SHORT $LN2@SaveScreen

; 195  : 	case D3DFMT_R8G8B8 :
; 196  : 	case D3DFMT_A8R8G8B8 :
; 197  : 	case D3DFMT_X8R8G8B8 :
; 198  : 	case D3DFMT_R5G6B5 :
; 199  : 	case D3DFMT_X1R5G5B5 :
; 200  : 	case D3DFMT_A1R5G5B5 :
; 201  : 		break;

  000c1	eb 2b		 jmp	 SHORT $LN2@SaveScreen
$LN25@SaveScreen:

; 202  : 	case D3DFMT_A4R4G4B4 :
; 203  : 	case D3DFMT_R3G3B2 :
; 204  : 	case D3DFMT_A8R3G3B2 :
; 205  : 	case D3DFMT_X4R4G4B4 :
; 206  : 	case D3DFMT_A2B10G10R10 :
; 207  : 		TraceError("Unsupported BackBuffer Format(%d). Please contact Metin 2 Administrator.", stSurfaceDesc.Format);

  000c3	ff 75 d4	 push	 DWORD PTR _stSurfaceDesc$[ebp]
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CF@
  000cb	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000d0	59		 pop	 ecx
  000d1	59		 pop	 ecx

; 208  : 		SAFE_RELEASE(lpSurface);

  000d2	83 7d cc 00	 cmp	 DWORD PTR _lpSurface$[ebp], 0
  000d6	74 0f		 je	 SHORT $LN26@SaveScreen
  000d8	8b 45 cc	 mov	 eax, DWORD PTR _lpSurface$[ebp]
  000db	8b 00		 mov	 eax, DWORD PTR [eax]
  000dd	ff 75 cc	 push	 DWORD PTR _lpSurface$[ebp]
  000e0	ff 50 08	 call	 DWORD PTR [eax+8]
  000e3	83 65 cc 00	 and	 DWORD PTR _lpSurface$[ebp], 0
$LN26@SaveScreen:

; 209  : 		return false;

  000e7	32 c0		 xor	 al, al
  000e9	e9 ef 05 00 00	 jmp	 $LN1@SaveScreen
$LN2@SaveScreen:

; 210  : 	}
; 211  : 
; 212  : 	D3DLOCKED_RECT lockRect;
; 213  : 	if (FAILED(hr = lpSurface->LockRect(&lockRect, NULL, D3DLOCK_NO_DIRTY_UPDATE | D3DLOCK_READONLY | D3DLOCK_NOSYSLOCK)))

  000ee	68 10 88 00 00	 push	 34832			; 00008810H
  000f3	6a 00		 push	 0
  000f5	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _lockRect$[ebp]
  000fb	50		 push	 eax
  000fc	8b 45 cc	 mov	 eax, DWORD PTR _lpSurface$[ebp]
  000ff	8b 00		 mov	 eax, DWORD PTR [eax]
  00101	ff 75 cc	 push	 DWORD PTR _lpSurface$[ebp]
  00104	ff 50 24	 call	 DWORD PTR [eax+36]
  00107	89 45 bc	 mov	 DWORD PTR _hr$[ebp], eax
  0010a	83 7d bc 00	 cmp	 DWORD PTR _hr$[ebp], 0
  0010e	7d 2b		 jge	 SHORT $LN27@SaveScreen

; 214  : 	{
; 215  : 		TraceError("Failed to lock the surface (0x%08x)", hr);

  00110	ff 75 bc	 push	 DWORD PTR _hr$[ebp]
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF@
  00118	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0011d	59		 pop	 ecx
  0011e	59		 pop	 ecx

; 216  : 		SAFE_RELEASE(lpSurface);

  0011f	83 7d cc 00	 cmp	 DWORD PTR _lpSurface$[ebp], 0
  00123	74 0f		 je	 SHORT $LN28@SaveScreen
  00125	8b 45 cc	 mov	 eax, DWORD PTR _lpSurface$[ebp]
  00128	8b 00		 mov	 eax, DWORD PTR [eax]
  0012a	ff 75 cc	 push	 DWORD PTR _lpSurface$[ebp]
  0012d	ff 50 08	 call	 DWORD PTR [eax+8]
  00130	83 65 cc 00	 and	 DWORD PTR _lpSurface$[ebp], 0
$LN28@SaveScreen:

; 217  : 		return false;

  00134	32 c0		 xor	 al, al
  00136	e9 a2 05 00 00	 jmp	 $LN1@SaveScreen
$LN27@SaveScreen:

; 218  : 	}
; 219  : 
; 220  : 	BYTE* pbyBuffer = new BYTE[uWidth * uHeight * 3];

  0013b	8b 45 b0	 mov	 eax, DWORD PTR _uWidth$[ebp]
  0013e	0f af 45 9c	 imul	 eax, DWORD PTR _uHeight$[ebp]
  00142	6b c0 03	 imul	 eax, eax, 3
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0014b	59		 pop	 ecx
  0014c	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00152	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00158	89 45 a4	 mov	 DWORD PTR _pbyBuffer$[ebp], eax

; 221  : 	if (pbyBuffer == NULL) {

  0015b	83 7d a4 00	 cmp	 DWORD PTR _pbyBuffer$[ebp], 0
  0015f	75 2c		 jne	 SHORT $LN29@SaveScreen

; 222  : 		lpSurface->UnlockRect();

  00161	8b 45 cc	 mov	 eax, DWORD PTR _lpSurface$[ebp]
  00164	8b 00		 mov	 eax, DWORD PTR [eax]
  00166	ff 75 cc	 push	 DWORD PTR _lpSurface$[ebp]
  00169	ff 50 28	 call	 DWORD PTR [eax+40]

; 223  : 		lpSurface->Release();

  0016c	8b 45 cc	 mov	 eax, DWORD PTR _lpSurface$[ebp]
  0016f	8b 00		 mov	 eax, DWORD PTR [eax]
  00171	ff 75 cc	 push	 DWORD PTR _lpSurface$[ebp]
  00174	ff 50 08	 call	 DWORD PTR [eax+8]

; 224  : 		lpSurface = NULL;

  00177	83 65 cc 00	 and	 DWORD PTR _lpSurface$[ebp], 0

; 225  : 		TraceError("Failed to allocate screenshot buffer");

  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5b@
  00180	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00185	59		 pop	 ecx

; 226  : 		return false;

  00186	32 c0		 xor	 al, al
  00188	e9 50 05 00 00	 jmp	 $LN1@SaveScreen
$LN29@SaveScreen:

; 227  : 	}
; 228  : 	BYTE* pbySource = (BYTE*) lockRect.pBits;

  0018d	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lockRect$[ebp+4]
  00193	89 85 74 ff ff
	ff		 mov	 DWORD PTR _pbySource$[ebp], eax

; 229  : 	BYTE* pbyDestination = (BYTE*) pbyBuffer;

  00199	8b 45 a4	 mov	 eax, DWORD PTR _pbyBuffer$[ebp]
  0019c	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 230  : 	for(UINT y = 0; y < uHeight; ++y) {

  0019f	83 65 90 00	 and	 DWORD PTR _y$11[ebp], 0
  001a3	eb 07		 jmp	 SHORT $LN6@SaveScreen
$LN4@SaveScreen:
  001a5	8b 45 90	 mov	 eax, DWORD PTR _y$11[ebp]
  001a8	40		 inc	 eax
  001a9	89 45 90	 mov	 DWORD PTR _y$11[ebp], eax
$LN6@SaveScreen:
  001ac	8b 45 90	 mov	 eax, DWORD PTR _y$11[ebp]
  001af	3b 45 9c	 cmp	 eax, DWORD PTR _uHeight$[ebp]
  001b2	0f 83 9e 02 00
	00		 jae	 $LN5@SaveScreen

; 231  : 		BYTE *pRow = pbySource;

  001b8	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _pbySource$[ebp]
  001be	89 45 c8	 mov	 DWORD PTR _pRow$22[ebp], eax

; 232  : 
; 233  : 		switch( stSurfaceDesc.Format ) {

  001c1	8b 45 d4	 mov	 eax, DWORD PTR _stSurfaceDesc$[ebp]
  001c4	89 45 a8	 mov	 DWORD PTR tv176[ebp], eax
  001c7	83 7d a8 14	 cmp	 DWORD PTR tv176[ebp], 20 ; 00000014H
  001cb	74 37		 je	 SHORT $LN30@SaveScreen
  001cd	83 7d a8 14	 cmp	 DWORD PTR tv176[ebp], 20 ; 00000014H
  001d1	0f 8e 68 02 00
	00		 jle	 $LN7@SaveScreen
  001d7	83 7d a8 16	 cmp	 DWORD PTR tv176[ebp], 22 ; 00000016H
  001db	0f 8e 8f 00 00
	00		 jle	 $LN31@SaveScreen
  001e1	83 7d a8 17	 cmp	 DWORD PTR tv176[ebp], 23 ; 00000017H
  001e5	0f 84 f1 00 00
	00		 je	 $LN32@SaveScreen
  001eb	83 7d a8 17	 cmp	 DWORD PTR tv176[ebp], 23 ; 00000017H
  001ef	0f 8e 4a 02 00
	00		 jle	 $LN7@SaveScreen
  001f5	83 7d a8 19	 cmp	 DWORD PTR tv176[ebp], 25 ; 00000019H
  001f9	0f 8e 85 01 00
	00		 jle	 $LN33@SaveScreen
  001ff	e9 3b 02 00 00	 jmp	 $LN7@SaveScreen
$LN30@SaveScreen:

; 234  : 		case D3DFMT_R8G8B8 :
; 235  : 			for(UINT x = 0; x < uWidth; ++x) {

  00204	83 65 8c 00	 and	 DWORD PTR _x$10[ebp], 0
  00208	eb 07		 jmp	 SHORT $LN11@SaveScreen
$LN9@SaveScreen:
  0020a	8b 45 8c	 mov	 eax, DWORD PTR _x$10[ebp]
  0020d	40		 inc	 eax
  0020e	89 45 8c	 mov	 DWORD PTR _x$10[ebp], eax
$LN11@SaveScreen:
  00211	8b 45 8c	 mov	 eax, DWORD PTR _x$10[ebp]
  00214	3b 45 b0	 cmp	 eax, DWORD PTR _uWidth$[ebp]
  00217	73 52		 jae	 SHORT $LN10@SaveScreen

; 236  : 				*pbyDestination++ = pRow[2];	// Blue

  00219	33 c0		 xor	 eax, eax
  0021b	40		 inc	 eax
  0021c	d1 e0		 shl	 eax, 1
  0021e	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  00221	8b 55 c8	 mov	 edx, DWORD PTR _pRow$22[ebp]
  00224	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  00227	88 01		 mov	 BYTE PTR [ecx], al
  00229	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  0022c	40		 inc	 eax
  0022d	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 237  : 				*pbyDestination++ = pRow[1];	// Green

  00230	33 c0		 xor	 eax, eax
  00232	40		 inc	 eax
  00233	c1 e0 00	 shl	 eax, 0
  00236	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  00239	8b 55 c8	 mov	 edx, DWORD PTR _pRow$22[ebp]
  0023c	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  0023f	88 01		 mov	 BYTE PTR [ecx], al
  00241	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  00244	40		 inc	 eax
  00245	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 238  : 				*pbyDestination++ = pRow[0];	// Red

  00248	33 c0		 xor	 eax, eax
  0024a	40		 inc	 eax
  0024b	6b c0 00	 imul	 eax, eax, 0
  0024e	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  00251	8b 55 c8	 mov	 edx, DWORD PTR _pRow$22[ebp]
  00254	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  00257	88 01		 mov	 BYTE PTR [ecx], al
  00259	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  0025c	40		 inc	 eax
  0025d	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 239  : 				pRow += 3;

  00260	8b 45 c8	 mov	 eax, DWORD PTR _pRow$22[ebp]
  00263	83 c0 03	 add	 eax, 3
  00266	89 45 c8	 mov	 DWORD PTR _pRow$22[ebp], eax

; 240  : 			}

  00269	eb 9f		 jmp	 SHORT $LN9@SaveScreen
$LN10@SaveScreen:

; 241  : 			break;

  0026b	e9 cf 01 00 00	 jmp	 $LN7@SaveScreen
$LN31@SaveScreen:

; 242  : 		case D3DFMT_A8R8G8B8 :
; 243  : 		case D3DFMT_X8R8G8B8 :
; 244  : 			for(UINT x = 0; x < uWidth; ++x) {

  00270	83 65 88 00	 and	 DWORD PTR _x$9[ebp], 0
  00274	eb 07		 jmp	 SHORT $LN14@SaveScreen
$LN12@SaveScreen:
  00276	8b 45 88	 mov	 eax, DWORD PTR _x$9[ebp]
  00279	40		 inc	 eax
  0027a	89 45 88	 mov	 DWORD PTR _x$9[ebp], eax
$LN14@SaveScreen:
  0027d	8b 45 88	 mov	 eax, DWORD PTR _x$9[ebp]
  00280	3b 45 b0	 cmp	 eax, DWORD PTR _uWidth$[ebp]
  00283	73 52		 jae	 SHORT $LN13@SaveScreen

; 245  : 				*pbyDestination++ = pRow[2];	// Blue

  00285	33 c0		 xor	 eax, eax
  00287	40		 inc	 eax
  00288	d1 e0		 shl	 eax, 1
  0028a	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  0028d	8b 55 c8	 mov	 edx, DWORD PTR _pRow$22[ebp]
  00290	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  00293	88 01		 mov	 BYTE PTR [ecx], al
  00295	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  00298	40		 inc	 eax
  00299	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 246  : 				*pbyDestination++ = pRow[1];	// Green

  0029c	33 c0		 xor	 eax, eax
  0029e	40		 inc	 eax
  0029f	c1 e0 00	 shl	 eax, 0
  002a2	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  002a5	8b 55 c8	 mov	 edx, DWORD PTR _pRow$22[ebp]
  002a8	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  002ab	88 01		 mov	 BYTE PTR [ecx], al
  002ad	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  002b0	40		 inc	 eax
  002b1	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 247  : 				*pbyDestination++ = pRow[0];	// Red

  002b4	33 c0		 xor	 eax, eax
  002b6	40		 inc	 eax
  002b7	6b c0 00	 imul	 eax, eax, 0
  002ba	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  002bd	8b 55 c8	 mov	 edx, DWORD PTR _pRow$22[ebp]
  002c0	8a 04 02	 mov	 al, BYTE PTR [edx+eax]
  002c3	88 01		 mov	 BYTE PTR [ecx], al
  002c5	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  002c8	40		 inc	 eax
  002c9	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 248  : 				pRow += 4;

  002cc	8b 45 c8	 mov	 eax, DWORD PTR _pRow$22[ebp]
  002cf	83 c0 04	 add	 eax, 4
  002d2	89 45 c8	 mov	 DWORD PTR _pRow$22[ebp], eax

; 249  : 			}

  002d5	eb 9f		 jmp	 SHORT $LN12@SaveScreen
$LN13@SaveScreen:

; 250  : 			break;

  002d7	e9 63 01 00 00	 jmp	 $LN7@SaveScreen
$LN32@SaveScreen:

; 251  : 		case D3DFMT_R5G6B5 :
; 252  : 			{
; 253  : 				for(UINT x = 0; x < uWidth; ++x) {

  002dc	83 65 84 00	 and	 DWORD PTR _x$8[ebp], 0
  002e0	eb 07		 jmp	 SHORT $LN17@SaveScreen
$LN15@SaveScreen:
  002e2	8b 45 84	 mov	 eax, DWORD PTR _x$8[ebp]
  002e5	40		 inc	 eax
  002e6	89 45 84	 mov	 DWORD PTR _x$8[ebp], eax
$LN17@SaveScreen:
  002e9	8b 45 84	 mov	 eax, DWORD PTR _x$8[ebp]
  002ec	3b 45 b0	 cmp	 eax, DWORD PTR _uWidth$[ebp]
  002ef	0f 83 8a 00 00
	00		 jae	 $LN16@SaveScreen

; 254  : 					UINT uColor		= *((UINT *) pRow);

  002f5	8b 45 c8	 mov	 eax, DWORD PTR _pRow$22[ebp]
  002f8	8b 00		 mov	 eax, DWORD PTR [eax]
  002fa	89 45 80	 mov	 DWORD PTR _uColor$7[ebp], eax

; 255  : 					BYTE byBlue		= (uColor >> 11) & 0x1F;

  002fd	8b 45 80	 mov	 eax, DWORD PTR _uColor$7[ebp]
  00300	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00303	83 e0 1f	 and	 eax, 31			; 0000001fH
  00306	88 45 c2	 mov	 BYTE PTR _byBlue$16[ebp], al

; 256  : 					BYTE byGreen	= (uColor >> 5) & 0x3F;

  00309	8b 45 80	 mov	 eax, DWORD PTR _uColor$7[ebp]
  0030c	c1 e8 05	 shr	 eax, 5
  0030f	83 e0 3f	 and	 eax, 63			; 0000003fH
  00312	88 45 c7	 mov	 BYTE PTR _byGreen$21[ebp], al

; 257  : 					BYTE byRed		= uColor & 0x1F;

  00315	8b 45 80	 mov	 eax, DWORD PTR _uColor$7[ebp]
  00318	83 e0 1f	 and	 eax, 31			; 0000001fH
  0031b	88 45 c6	 mov	 BYTE PTR _byRed$20[ebp], al

; 258  : 
; 259  : 					*pbyDestination++ = (byBlue << 3)	| (byBlue >> 2);		// Blue

  0031e	0f b6 45 c2	 movzx	 eax, BYTE PTR _byBlue$16[ebp]
  00322	c1 e0 03	 shl	 eax, 3
  00325	0f b6 4d c2	 movzx	 ecx, BYTE PTR _byBlue$16[ebp]
  00329	c1 f9 02	 sar	 ecx, 2
  0032c	0b c1		 or	 eax, ecx
  0032e	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  00331	88 01		 mov	 BYTE PTR [ecx], al
  00333	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  00336	40		 inc	 eax
  00337	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 260  : 					*pbyDestination++ = (byGreen << 2)	| (byGreen >> 2);		// Green

  0033a	0f b6 45 c7	 movzx	 eax, BYTE PTR _byGreen$21[ebp]
  0033e	c1 e0 02	 shl	 eax, 2
  00341	0f b6 4d c7	 movzx	 ecx, BYTE PTR _byGreen$21[ebp]
  00345	c1 f9 02	 sar	 ecx, 2
  00348	0b c1		 or	 eax, ecx
  0034a	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  0034d	88 01		 mov	 BYTE PTR [ecx], al
  0034f	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  00352	40		 inc	 eax
  00353	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 261  : 					*pbyDestination++ = (byRed << 3)	| (byRed >> 2);			// Red

  00356	0f b6 45 c6	 movzx	 eax, BYTE PTR _byRed$20[ebp]
  0035a	c1 e0 03	 shl	 eax, 3
  0035d	0f b6 4d c6	 movzx	 ecx, BYTE PTR _byRed$20[ebp]
  00361	c1 f9 02	 sar	 ecx, 2
  00364	0b c1		 or	 eax, ecx
  00366	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  00369	88 01		 mov	 BYTE PTR [ecx], al
  0036b	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  0036e	40		 inc	 eax
  0036f	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 262  : 					pRow += 2;

  00372	8b 45 c8	 mov	 eax, DWORD PTR _pRow$22[ebp]
  00375	40		 inc	 eax
  00376	40		 inc	 eax
  00377	89 45 c8	 mov	 DWORD PTR _pRow$22[ebp], eax

; 263  : 				}

  0037a	e9 63 ff ff ff	 jmp	 $LN15@SaveScreen
$LN16@SaveScreen:

; 264  : 			}
; 265  : 			break;

  0037f	e9 bb 00 00 00	 jmp	 $LN7@SaveScreen
$LN33@SaveScreen:

; 266  : 		case D3DFMT_X1R5G5B5 :
; 267  : 		case D3DFMT_A1R5G5B5 :
; 268  : 			{
; 269  : 				for(UINT x = 0; x < uWidth; ++x) {

  00384	83 a5 7c ff ff
	ff 00		 and	 DWORD PTR _x$6[ebp], 0
  0038b	eb 0d		 jmp	 SHORT $LN20@SaveScreen
$LN18@SaveScreen:
  0038d	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _x$6[ebp]
  00393	40		 inc	 eax
  00394	89 85 7c ff ff
	ff		 mov	 DWORD PTR _x$6[ebp], eax
$LN20@SaveScreen:
  0039a	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _x$6[ebp]
  003a0	3b 45 b0	 cmp	 eax, DWORD PTR _uWidth$[ebp]
  003a3	0f 83 96 00 00
	00		 jae	 $LN7@SaveScreen

; 270  : 					UINT uColor		= *((UINT *) pRow);

  003a9	8b 45 c8	 mov	 eax, DWORD PTR _pRow$22[ebp]
  003ac	8b 00		 mov	 eax, DWORD PTR [eax]
  003ae	89 85 78 ff ff
	ff		 mov	 DWORD PTR _uColor$5[ebp], eax

; 271  : 					BYTE byBlue		= (uColor >> 10) & 0x1F;

  003b4	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _uColor$5[ebp]
  003ba	c1 e8 0a	 shr	 eax, 10			; 0000000aH
  003bd	83 e0 1f	 and	 eax, 31			; 0000001fH
  003c0	88 45 c5	 mov	 BYTE PTR _byBlue$19[ebp], al

; 272  : 					BYTE byGreen	= (uColor >> 5) & 0x1F;

  003c3	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _uColor$5[ebp]
  003c9	c1 e8 05	 shr	 eax, 5
  003cc	83 e0 1f	 and	 eax, 31			; 0000001fH
  003cf	88 45 c4	 mov	 BYTE PTR _byGreen$18[ebp], al

; 273  : 					BYTE byRed		= uColor & 0x1F;

  003d2	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _uColor$5[ebp]
  003d8	83 e0 1f	 and	 eax, 31			; 0000001fH
  003db	88 45 c3	 mov	 BYTE PTR _byRed$17[ebp], al

; 274  : 
; 275  : 					*pbyDestination++ = (byBlue << 3)	| (byBlue >> 2);		// Blue

  003de	0f b6 45 c5	 movzx	 eax, BYTE PTR _byBlue$19[ebp]
  003e2	c1 e0 03	 shl	 eax, 3
  003e5	0f b6 4d c5	 movzx	 ecx, BYTE PTR _byBlue$19[ebp]
  003e9	c1 f9 02	 sar	 ecx, 2
  003ec	0b c1		 or	 eax, ecx
  003ee	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  003f1	88 01		 mov	 BYTE PTR [ecx], al
  003f3	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  003f6	40		 inc	 eax
  003f7	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 276  : 					*pbyDestination++ = (byGreen << 3)	| (byGreen >> 2);		// Green

  003fa	0f b6 45 c4	 movzx	 eax, BYTE PTR _byGreen$18[ebp]
  003fe	c1 e0 03	 shl	 eax, 3
  00401	0f b6 4d c4	 movzx	 ecx, BYTE PTR _byGreen$18[ebp]
  00405	c1 f9 02	 sar	 ecx, 2
  00408	0b c1		 or	 eax, ecx
  0040a	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  0040d	88 01		 mov	 BYTE PTR [ecx], al
  0040f	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  00412	40		 inc	 eax
  00413	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 277  : 					*pbyDestination++ = (byRed << 3)	| (byRed >> 2);			// Red

  00416	0f b6 45 c3	 movzx	 eax, BYTE PTR _byRed$17[ebp]
  0041a	c1 e0 03	 shl	 eax, 3
  0041d	0f b6 4d c3	 movzx	 ecx, BYTE PTR _byRed$17[ebp]
  00421	c1 f9 02	 sar	 ecx, 2
  00424	0b c1		 or	 eax, ecx
  00426	8b 4d d0	 mov	 ecx, DWORD PTR _pbyDestination$[ebp]
  00429	88 01		 mov	 BYTE PTR [ecx], al
  0042b	8b 45 d0	 mov	 eax, DWORD PTR _pbyDestination$[ebp]
  0042e	40		 inc	 eax
  0042f	89 45 d0	 mov	 DWORD PTR _pbyDestination$[ebp], eax

; 278  : 					pRow += 2;

  00432	8b 45 c8	 mov	 eax, DWORD PTR _pRow$22[ebp]
  00435	40		 inc	 eax
  00436	40		 inc	 eax
  00437	89 45 c8	 mov	 DWORD PTR _pRow$22[ebp], eax

; 279  : 				}

  0043a	e9 4e ff ff ff	 jmp	 $LN18@SaveScreen
$LN7@SaveScreen:

; 280  : 			}
; 281  : 			break;
; 282  : 		}
; 283  : 
; 284  : 		// increase by one line
; 285  : 		pbySource += lockRect.Pitch;

  0043f	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _pbySource$[ebp]
  00445	03 85 58 ff ff
	ff		 add	 eax, DWORD PTR _lockRect$[ebp]
  0044b	89 85 74 ff ff
	ff		 mov	 DWORD PTR _pbySource$[ebp], eax

; 286  : 	}

  00451	e9 4f fd ff ff	 jmp	 $LN4@SaveScreen
$LN5@SaveScreen:

; 287  : 
; 288  : 	if(lpSurface) {

  00456	83 7d cc 00	 cmp	 DWORD PTR _lpSurface$[ebp], 0
  0045a	74 1a		 je	 SHORT $LN34@SaveScreen

; 289  : 		lpSurface->UnlockRect();

  0045c	8b 45 cc	 mov	 eax, DWORD PTR _lpSurface$[ebp]
  0045f	8b 00		 mov	 eax, DWORD PTR [eax]
  00461	ff 75 cc	 push	 DWORD PTR _lpSurface$[ebp]
  00464	ff 50 28	 call	 DWORD PTR [eax+40]

; 290  : 		lpSurface->Release();

  00467	8b 45 cc	 mov	 eax, DWORD PTR _lpSurface$[ebp]
  0046a	8b 00		 mov	 eax, DWORD PTR [eax]
  0046c	ff 75 cc	 push	 DWORD PTR _lpSurface$[ebp]
  0046f	ff 50 08	 call	 DWORD PTR [eax+8]

; 291  : 		lpSurface = NULL;

  00472	83 65 cc 00	 and	 DWORD PTR _lpSurface$[ebp], 0
$LN34@SaveScreen:

; 292  : 	}
; 293  : 
; 294  : 	bool bSaved = SaveJPEG(c_pszFileName, (LPBYTE)pbyBuffer, uWidth, uHeight);

  00476	ff 75 9c	 push	 DWORD PTR _uHeight$[ebp]
  00479	ff 75 b0	 push	 DWORD PTR _uWidth$[ebp]
  0047c	ff 75 a4	 push	 DWORD PTR _pbyBuffer$[ebp]
  0047f	ff 75 7c	 push	 DWORD PTR _c_pszFileName$[ebp]
  00482	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00488	e8 00 00 00 00	 call	 ?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z ; CPythonGraphic::SaveJPEG
  0048d	88 45 b7	 mov	 BYTE PTR _bSaved$[ebp], al

; 295  : 
; 296  : 	if(pbyBuffer) {

  00490	83 7d a4 00	 cmp	 DWORD PTR _pbyBuffer$[ebp], 0
  00494	74 19		 je	 SHORT $LN35@SaveScreen

; 297  : 		delete [] pbyBuffer;

  00496	8b 45 a4	 mov	 eax, DWORD PTR _pbyBuffer$[ebp]
  00499	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0049f	ff b5 64 ff ff
	ff		 push	 DWORD PTR $T2[ebp]
  004a5	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  004aa	59		 pop	 ecx

; 298  : 		pbyBuffer = NULL;

  004ab	83 65 a4 00	 and	 DWORD PTR _pbyBuffer$[ebp], 0
$LN35@SaveScreen:

; 299  : 	}
; 300  : 
; 301  : 	if(bSaved == false) {

  004af	0f b6 45 b7	 movzx	 eax, BYTE PTR _bSaved$[ebp]
  004b3	85 c0		 test	 eax, eax
  004b5	75 1d		 jne	 SHORT $LN36@SaveScreen

; 302  : 		TraceError("Failed to save JPEG file. (%s, %d, %d)", c_pszFileName, uWidth, uHeight);

  004b7	ff 75 9c	 push	 DWORD PTR _uHeight$[ebp]
  004ba	ff 75 b0	 push	 DWORD PTR _uWidth$[ebp]
  004bd	ff 75 7c	 push	 DWORD PTR _c_pszFileName$[ebp]
  004c0	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5@
  004c5	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  004ca	83 c4 10	 add	 esp, 16			; 00000010H

; 303  : 		return false;

  004cd	32 c0		 xor	 al, al
  004cf	e9 09 02 00 00	 jmp	 $LN1@SaveScreen
$LN36@SaveScreen:

; 304  : 	}
; 305  : 
; 306  : 	if (g_isScreenShotKey)

  004d4	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?g_isScreenShotKey@@3_NA ; g_isScreenShotKey
  004db	85 c0		 test	 eax, eax
  004dd	0f 84 f8 01 00
	00		 je	 $LN37@SaveScreen

; 307  : 	{
; 308  : 		FILE* srcFilePtr = fopen(c_pszFileName, "rb");

  004e3	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  004e8	ff 75 7c	 push	 DWORD PTR _c_pszFileName$[ebp]
  004eb	e8 00 00 00 00	 call	 _fopen
  004f0	59		 pop	 ecx
  004f1	59		 pop	 ecx
  004f2	89 45 ac	 mov	 DWORD PTR _srcFilePtr$14[ebp], eax

; 309  : 		if (srcFilePtr)

  004f5	83 7d ac 00	 cmp	 DWORD PTR _srcFilePtr$14[ebp], 0
  004f9	0f 84 dc 01 00
	00		 je	 $LN37@SaveScreen

; 310  : 		{
; 311  : 			fseek(srcFilePtr, 0, SEEK_END);		

  004ff	6a 02		 push	 2
  00501	6a 00		 push	 0
  00503	ff 75 ac	 push	 DWORD PTR _srcFilePtr$14[ebp]
  00506	e8 00 00 00 00	 call	 _fseek
  0050b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 312  : 			size_t fileSize = ftell(srcFilePtr);

  0050e	ff 75 ac	 push	 DWORD PTR _srcFilePtr$14[ebp]
  00511	e8 00 00 00 00	 call	 _ftell
  00516	59		 pop	 ecx
  00517	89 85 60 ff ff
	ff		 mov	 DWORD PTR _fileSize$1[ebp], eax

; 313  : 			fseek(srcFilePtr, 0, SEEK_SET);

  0051d	6a 00		 push	 0
  0051f	6a 00		 push	 0
  00521	ff 75 ac	 push	 DWORD PTR _srcFilePtr$14[ebp]
  00524	e8 00 00 00 00	 call	 _fseek
  00529	83 c4 0c	 add	 esp, 12			; 0000000cH

; 314  : 
; 315  : 			char head[21];
; 316  : 			size_t tailSize = fileSize - sizeof(head);

  0052c	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _fileSize$1[ebp]
  00532	83 e8 15	 sub	 eax, 21			; 00000015H
  00535	89 45 a0	 mov	 DWORD PTR _tailSize$13[ebp], eax

; 317  : 			char* tail = (char*)malloc(tailSize);

  00538	ff 75 a0	 push	 DWORD PTR _tailSize$13[ebp]
  0053b	e8 00 00 00 00	 call	 _malloc
  00540	59		 pop	 ecx
  00541	89 45 94	 mov	 DWORD PTR _tail$12[ebp], eax

; 318  : 			
; 319  : 			fread(head, sizeof(head), 1, srcFilePtr);

  00544	ff 75 ac	 push	 DWORD PTR _srcFilePtr$14[ebp]
  00547	6a 01		 push	 1
  00549	6a 15		 push	 21			; 00000015H
  0054b	8d 45 34	 lea	 eax, DWORD PTR _head$24[ebp]
  0054e	50		 push	 eax
  0054f	e8 00 00 00 00	 call	 _fread
  00554	83 c4 10	 add	 esp, 16			; 00000010H

; 320  : 			fread(tail, tailSize, 1, srcFilePtr);

  00557	ff 75 ac	 push	 DWORD PTR _srcFilePtr$14[ebp]
  0055a	6a 01		 push	 1
  0055c	ff 75 a0	 push	 DWORD PTR _tailSize$13[ebp]
  0055f	ff 75 94	 push	 DWORD PTR _tail$12[ebp]
  00562	e8 00 00 00 00	 call	 _fread
  00567	83 c4 10	 add	 esp, 16			; 00000010H

; 321  : 			fclose(srcFilePtr);

  0056a	ff 75 ac	 push	 DWORD PTR _srcFilePtr$14[ebp]
  0056d	e8 00 00 00 00	 call	 _fclose
  00572	59		 pop	 ecx

; 322  : 
; 323  : 			char imgDesc[64];
; 324  : 			GenScreenShotTag(c_pszFileName, GetCRC32(tail, tailSize), imgDesc, sizeof(imgDesc));

  00573	6a 40		 push	 64			; 00000040H
  00575	8d 45 f4	 lea	 eax, DWORD PTR _imgDesc$23[ebp]
  00578	50		 push	 eax
  00579	ff 75 a0	 push	 DWORD PTR _tailSize$13[ebp]
  0057c	ff 75 94	 push	 DWORD PTR _tail$12[ebp]
  0057f	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00584	59		 pop	 ecx
  00585	59		 pop	 ecx
  00586	50		 push	 eax
  00587	ff 75 7c	 push	 DWORD PTR _c_pszFileName$[ebp]
  0058a	e8 00 00 00 00	 call	 ?GenScreenShotTag@@YAXPBDKPADI@Z ; GenScreenShotTag
  0058f	83 c4 10	 add	 esp, 16			; 00000010H

; 325  : 
; 326  : 			int imgDescLen = strlen(imgDesc) + 1;

  00592	8d 45 f4	 lea	 eax, DWORD PTR _imgDesc$23[ebp]
  00595	50		 push	 eax
  00596	e8 00 00 00 00	 call	 _strlen
  0059b	59		 pop	 ecx
  0059c	40		 inc	 eax
  0059d	89 85 70 ff ff
	ff		 mov	 DWORD PTR _imgDescLen$4[ebp], eax

; 327  : 			
; 328  : 			unsigned char exifHeader[] = {
; 329  : 				0xe1,

  005a3	c6 45 4c e1	 mov	 BYTE PTR _exifHeader$25[ebp], 225 ; 000000e1H

; 330  : 				0, // blockLen[1],

  005a7	c6 45 4d 00	 mov	 BYTE PTR _exifHeader$25[ebp+1], 0

; 331  : 				0, // blockLen[0],

  005ab	c6 45 4e 00	 mov	 BYTE PTR _exifHeader$25[ebp+2], 0

; 332  : 				0x45,

  005af	c6 45 4f 45	 mov	 BYTE PTR _exifHeader$25[ebp+3], 69 ; 00000045H

; 333  : 				0x78,

  005b3	c6 45 50 78	 mov	 BYTE PTR _exifHeader$25[ebp+4], 120 ; 00000078H

; 334  : 				0x69,

  005b7	c6 45 51 69	 mov	 BYTE PTR _exifHeader$25[ebp+5], 105 ; 00000069H

; 335  : 				0x66,

  005bb	c6 45 52 66	 mov	 BYTE PTR _exifHeader$25[ebp+6], 102 ; 00000066H

; 336  : 				0x0,

  005bf	c6 45 53 00	 mov	 BYTE PTR _exifHeader$25[ebp+7], 0

; 337  : 				0x0,

  005c3	c6 45 54 00	 mov	 BYTE PTR _exifHeader$25[ebp+8], 0

; 338  : 				0x49,

  005c7	c6 45 55 49	 mov	 BYTE PTR _exifHeader$25[ebp+9], 73 ; 00000049H

; 339  : 				0x49,

  005cb	c6 45 56 49	 mov	 BYTE PTR _exifHeader$25[ebp+10], 73 ; 00000049H

; 340  : 				0x2a,

  005cf	c6 45 57 2a	 mov	 BYTE PTR _exifHeader$25[ebp+11], 42 ; 0000002aH

; 341  : 				0x0,

  005d3	c6 45 58 00	 mov	 BYTE PTR _exifHeader$25[ebp+12], 0

; 342  : 				0x8,

  005d7	c6 45 59 08	 mov	 BYTE PTR _exifHeader$25[ebp+13], 8

; 343  : 				0x0,

  005db	c6 45 5a 00	 mov	 BYTE PTR _exifHeader$25[ebp+14], 0

; 344  : 				0x0,

  005df	c6 45 5b 00	 mov	 BYTE PTR _exifHeader$25[ebp+15], 0

; 345  : 				0x0,

  005e3	c6 45 5c 00	 mov	 BYTE PTR _exifHeader$25[ebp+16], 0

; 346  : 				0x1,

  005e7	c6 45 5d 01	 mov	 BYTE PTR _exifHeader$25[ebp+17], 1

; 347  : 				0x0,

  005eb	c6 45 5e 00	 mov	 BYTE PTR _exifHeader$25[ebp+18], 0

; 348  : 				0xe,

  005ef	c6 45 5f 0e	 mov	 BYTE PTR _exifHeader$25[ebp+19], 14 ; 0000000eH

; 349  : 				0x1,

  005f3	c6 45 60 01	 mov	 BYTE PTR _exifHeader$25[ebp+20], 1

; 350  : 				0x2,

  005f7	c6 45 61 02	 mov	 BYTE PTR _exifHeader$25[ebp+21], 2

; 351  : 				0x0,

  005fb	c6 45 62 00	 mov	 BYTE PTR _exifHeader$25[ebp+22], 0

; 352  : 				imgDescLen, // textLen[0],

  005ff	8a 85 70 ff ff
	ff		 mov	 al, BYTE PTR _imgDescLen$4[ebp]
  00605	88 45 63	 mov	 BYTE PTR _exifHeader$25[ebp+23], al

; 353  : 				0, // textLen[1],

  00608	c6 45 64 00	 mov	 BYTE PTR _exifHeader$25[ebp+24], 0

; 354  : 				0, // textLen[2],

  0060c	c6 45 65 00	 mov	 BYTE PTR _exifHeader$25[ebp+25], 0

; 355  : 				0, // textLen[3],

  00610	c6 45 66 00	 mov	 BYTE PTR _exifHeader$25[ebp+26], 0

; 356  : 				0x1a,

  00614	c6 45 67 1a	 mov	 BYTE PTR _exifHeader$25[ebp+27], 26 ; 0000001aH

; 357  : 				0x0,

  00618	c6 45 68 00	 mov	 BYTE PTR _exifHeader$25[ebp+28], 0

; 358  : 				0x0,

  0061c	c6 45 69 00	 mov	 BYTE PTR _exifHeader$25[ebp+29], 0

; 359  : 				0x0,

  00620	c6 45 6a 00	 mov	 BYTE PTR _exifHeader$25[ebp+30], 0

; 360  : 				0x0,

  00624	c6 45 6b 00	 mov	 BYTE PTR _exifHeader$25[ebp+31], 0

; 361  : 				0x0,

  00628	c6 45 6c 00	 mov	 BYTE PTR _exifHeader$25[ebp+32], 0

; 362  : 				0x0,

  0062c	c6 45 6d 00	 mov	 BYTE PTR _exifHeader$25[ebp+33], 0

; 363  : 				0x0,

  00630	c6 45 6e 00	 mov	 BYTE PTR _exifHeader$25[ebp+34], 0

; 364  : 			};
; 365  : 
; 366  : 			exifHeader[2] = sizeof(exifHeader) + imgDescLen;

  00634	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _imgDescLen$4[ebp]
  0063a	83 c0 23	 add	 eax, 35			; 00000023H
  0063d	33 c9		 xor	 ecx, ecx
  0063f	41		 inc	 ecx
  00640	d1 e1		 shl	 ecx, 1
  00642	88 44 0d 4c	 mov	 BYTE PTR _exifHeader$25[ebp+ecx], al

; 367  : 
; 368  : 			FILE* dstFilePtr = fopen(c_pszFileName, "wb");

  00646	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  0064b	ff 75 7c	 push	 DWORD PTR _c_pszFileName$[ebp]
  0064e	e8 00 00 00 00	 call	 _fopen
  00653	59		 pop	 ecx
  00654	59		 pop	 ecx
  00655	89 45 b8	 mov	 DWORD PTR _dstFilePtr$15[ebp], eax

; 369  : 			//FILE* dstFilePtr = fopen("temp.jpg", "wb");
; 370  : 			if (dstFilePtr)

  00658	83 7d b8 00	 cmp	 DWORD PTR _dstFilePtr$15[ebp], 0
  0065c	74 74		 je	 SHORT $LN39@SaveScreen

; 371  : 			{
; 372  : 				fwrite(head, sizeof(head), 1, dstFilePtr);

  0065e	ff 75 b8	 push	 DWORD PTR _dstFilePtr$15[ebp]
  00661	6a 01		 push	 1
  00663	6a 15		 push	 21			; 00000015H
  00665	8d 45 34	 lea	 eax, DWORD PTR _head$24[ebp]
  00668	50		 push	 eax
  00669	e8 00 00 00 00	 call	 _fwrite
  0066e	83 c4 10	 add	 esp, 16			; 00000010H

; 373  : 				fwrite(exifHeader, sizeof(exifHeader), 1, dstFilePtr);

  00671	ff 75 b8	 push	 DWORD PTR _dstFilePtr$15[ebp]
  00674	6a 01		 push	 1
  00676	6a 23		 push	 35			; 00000023H
  00678	8d 45 4c	 lea	 eax, DWORD PTR _exifHeader$25[ebp]
  0067b	50		 push	 eax
  0067c	e8 00 00 00 00	 call	 _fwrite
  00681	83 c4 10	 add	 esp, 16			; 00000010H

; 374  : 				fwrite(imgDesc, imgDescLen, 1, dstFilePtr);

  00684	ff 75 b8	 push	 DWORD PTR _dstFilePtr$15[ebp]
  00687	6a 01		 push	 1
  00689	ff b5 70 ff ff
	ff		 push	 DWORD PTR _imgDescLen$4[ebp]
  0068f	8d 45 f4	 lea	 eax, DWORD PTR _imgDesc$23[ebp]
  00692	50		 push	 eax
  00693	e8 00 00 00 00	 call	 _fwrite
  00698	83 c4 10	 add	 esp, 16			; 00000010H

; 375  : 				fputc(0x00, dstFilePtr);

  0069b	ff 75 b8	 push	 DWORD PTR _dstFilePtr$15[ebp]
  0069e	6a 00		 push	 0
  006a0	e8 00 00 00 00	 call	 _fputc
  006a5	59		 pop	 ecx
  006a6	59		 pop	 ecx

; 376  : 				fputc(0xff, dstFilePtr);

  006a7	ff 75 b8	 push	 DWORD PTR _dstFilePtr$15[ebp]
  006aa	68 ff 00 00 00	 push	 255			; 000000ffH
  006af	e8 00 00 00 00	 call	 _fputc
  006b4	59		 pop	 ecx
  006b5	59		 pop	 ecx

; 377  : 				fwrite(tail, tailSize, 1, dstFilePtr);

  006b6	ff 75 b8	 push	 DWORD PTR _dstFilePtr$15[ebp]
  006b9	6a 01		 push	 1
  006bb	ff 75 a0	 push	 DWORD PTR _tailSize$13[ebp]
  006be	ff 75 94	 push	 DWORD PTR _tail$12[ebp]
  006c1	e8 00 00 00 00	 call	 _fwrite
  006c6	83 c4 10	 add	 esp, 16			; 00000010H

; 378  : 				fclose(dstFilePtr);

  006c9	ff 75 b8	 push	 DWORD PTR _dstFilePtr$15[ebp]
  006cc	e8 00 00 00 00	 call	 _fclose
  006d1	59		 pop	 ecx
$LN39@SaveScreen:

; 379  : 			}
; 380  : 
; 381  : 			free(tail);

  006d2	ff 75 94	 push	 DWORD PTR _tail$12[ebp]
  006d5	e8 00 00 00 00	 call	 _free
  006da	59		 pop	 ecx
$LN37@SaveScreen:

; 382  : 		}
; 383  : 	}
; 384  : 	return true;

  006db	b0 01		 mov	 al, 1
$LN1@SaveScreen:

; 385  : }

  006dd	8b 4d 70	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006e0	33 cd		 xor	 ecx, ebp
  006e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006e7	83 c5 74	 add	 ebp, 116		; 00000074H
  006ea	c9		 leave
  006eb	c2 04 00	 ret	 4
?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z ENDP		; CPythonGraphic::SaveScreenShot
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv71 = -4						; size = 4
_pszFileName$ = 8					; size = 4
_pbyBuffer$ = 12					; size = 4
_uWidth$ = 16						; size = 4
_uHeight$ = 20						; size = 4
?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z PROC		; CPythonGraphic::SaveJPEG, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 169  : 	return jpeg_save(pbyBuffer, uWidth, uHeight, 85, pszFileName) != 0;

  00008	ff 75 08	 push	 DWORD PTR _pszFileName$[ebp]
  0000b	6a 55		 push	 85			; 00000055H
  0000d	ff 75 14	 push	 DWORD PTR _uHeight$[ebp]
  00010	ff 75 10	 push	 DWORD PTR _uWidth$[ebp]
  00013	ff 75 0c	 push	 DWORD PTR _pbyBuffer$[ebp]
  00016	e8 00 00 00 00	 call	 ?jpeg_save@@YAHPAEHHHPBD@Z ; jpeg_save
  0001b	83 c4 14	 add	 esp, 20			; 00000014H
  0001e	85 c0		 test	 eax, eax
  00020	74 09		 je	 SHORT $LN3@SaveJPEG
  00022	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  00029	eb 04		 jmp	 SHORT $LN4@SaveJPEG
$LN3@SaveJPEG:
  0002b	83 65 fc 00	 and	 DWORD PTR tv71[ebp], 0
$LN4@SaveJPEG:
  0002f	8a 45 fc	 mov	 al, BYTE PTR tv71[ebp]

; 170  : }

  00032	c9		 leave
  00033	c2 10 00	 ret	 16			; 00000010H
?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z ENDP		; CPythonGraphic::SaveJPEG
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -104						; size = 4
_dwG$2 = -100						; size = 4
_this$ = -96						; size = 4
$T3 = -92						; size = 4
$T4 = -88						; size = 4
__My_data$5 = -84					; size = 4
_dwB$6 = -80						; size = 4
_dwA$7 = -76						; size = 4
_dwR$8 = -72						; size = 4
_dwG$9 = -68						; size = 4
_dwB$10 = -64						; size = 4
_dwA$11 = -60						; size = 4
_dwR$12 = -56						; size = 4
tv456 = -52						; size = 4
tv66 = -48						; size = 4
__My_data$13 = -44					; size = 4
tv482 = -40						; size = 4
__My_data$14 = -36					; size = 4
_pv2Pos$15 = -32					; size = 4
tv457 = -28						; size = 4
tv446 = -24						; size = 4
tv445 = -20						; size = 4
tv435 = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv434 = 0						; size = 4
tv416 = 4						; size = 4
tv417 = 8						; size = 4
tv374 = 12						; size = 4
tv373 = 16						; size = 4
tv363 = 20						; size = 4
tv362 = 24						; size = 4
tv352 = 28						; size = 4
tv351 = 32						; size = 4
tv341 = 36						; size = 4
tv340 = 40						; size = 4
_vertices$ = 44						; size = 12
_fLastPercentage$ = 56					; size = 4
_pv2LastPos$16 = 60					; size = 4
_j$17 = 64						; size = 4
$T18 = 71						; size = 1
_iTriCount$ = 72					; size = 4
_vertex$ = 76						; size = 24
__$ArrayPad$ = 100					; size = 4
_fxCenter$ = 112					; size = 4
_fyCenter$ = 116					; size = 4
_fRadius$ = 120						; size = 4
_fTime$ = 124						; size = 4
?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z PROC	; CPythonGraphic::RenderCoolTimeBox, COMDAT
; _this$ = ecx

; 492  : {

  00000	55		 push	 ebp
  00001	8d 6c 24 98	 lea	 ebp, DWORD PTR [esp-104]
  00005	83 ec 68	 sub	 esp, 104		; 00000068H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 64	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 4d 98	 mov	 DWORD PTR _this$[ebp], ecx

; 493  : 	if (fTime >= 1.0f)

  00030	f3 0f 10 45 7c	 movss	 xmm0, DWORD PTR _fTime$[ebp]
  00035	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0003c	72 05		 jb	 SHORT $LN7@RenderCool

; 494  : 		return;

  0003e	e9 e5 07 00 00	 jmp	 $LN1@RenderCool
$LN7@RenderCool:

; 495  : 
; 496  : 	fTime = max(0.0f, fTime);

  00043	0f 57 c0	 xorps	 xmm0, xmm0
  00046	0f 2f 45 7c	 comiss	 xmm0, DWORD PTR _fTime$[ebp]
  0004a	76 0a		 jbe	 SHORT $LN12@RenderCool
  0004c	0f 57 c0	 xorps	 xmm0, xmm0
  0004f	f3 0f 11 45 d0	 movss	 DWORD PTR tv66[ebp], xmm0
  00054	eb 0a		 jmp	 SHORT $LN13@RenderCool
$LN12@RenderCool:
  00056	f3 0f 10 45 7c	 movss	 xmm0, DWORD PTR _fTime$[ebp]
  0005b	f3 0f 11 45 d0	 movss	 DWORD PTR tv66[ebp], xmm0
$LN13@RenderCool:
  00060	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR tv66[ebp]
  00065	f3 0f 11 45 7c	 movss	 DWORD PTR _fTime$[ebp], xmm0

; 498  : 	static D3DXCOLOR color = D3DXCOLOR(0.0f, 0.0f, 0.0f, 0.5f);

  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  0006f	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00076	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$TSS0@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA
  0007f	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR __Init_thread_epoch[eax]
  00085	7e 50		 jle	 SHORT $LN2@RenderCool
  00087	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA
  0008c	e8 00 00 00 00	 call	 __Init_thread_header
  00091	59		 pop	 ecx
  00092	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA, -1
  00099	75 3c		 jne	 SHORT $LN2@RenderCool
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 920  :     r = fr;

  0009b	0f 57 c0	 xorps	 xmm0, xmm0
  0009e	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A, xmm0

; 921  :     g = fg;

  000a6	0f 57 c0	 xorps	 xmm0, xmm0
  000a9	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+4, xmm0

; 922  :     b = fb;

  000b1	0f 57 c0	 xorps	 xmm0, xmm0
  000b4	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+8, xmm0

; 923  :     a = fa;

  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000c4	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+12, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 498  : 	static D3DXCOLOR color = D3DXCOLOR(0.0f, 0.0f, 0.0f, 0.5f);

  000cc	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA
  000d1	e8 00 00 00 00	 call	 __Init_thread_footer
  000d6	59		 pop	 ecx
$LN2@RenderCool:

; 499  : 	static WORD s_wBoxIndicies[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
; 500  : 	static D3DXVECTOR2 s_v2BoxPos[8] =

  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  000dc	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  000e3	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$TSS1@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA
  000ec	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR __Init_thread_epoch[eax]
  000f2	0f 8e 0f 01 00
	00		 jle	 $LN3@RenderCool
  000f8	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA
  000fd	e8 00 00 00 00	 call	 __Init_thread_header
  00102	59		 pop	 ecx
  00103	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA, -1
  0010a	0f 85 f7 00 00
	00		 jne	 $LN3@RenderCool
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 41   :     x = fx;

  00110	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00118	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A, xmm0

; 42   :     y = fy;

  00120	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00128	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+4, xmm0

; 41   :     x = fx;

  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00138	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+8, xmm0

; 42   :     y = fy;

  00140	0f 57 c0	 xorps	 xmm0, xmm0
  00143	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+12, xmm0

; 41   :     x = fx;

  0014b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00153	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+16, xmm0

; 42   :     y = fy;

  0015b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00163	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+20, xmm0

; 41   :     x = fx;

  0016b	0f 57 c0	 xorps	 xmm0, xmm0
  0016e	f3 0f 11 05 18
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+24, xmm0

; 42   :     y = fy;

  00176	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0017e	f3 0f 11 05 1c
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+28, xmm0

; 41   :     x = fx;

  00186	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0018e	f3 0f 11 05 20
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+32, xmm0

; 42   :     y = fy;

  00196	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0019e	f3 0f 11 05 24
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+36, xmm0

; 41   :     x = fx;

  001a6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001ae	f3 0f 11 05 28
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+40, xmm0

; 42   :     y = fy;

  001b6	0f 57 c0	 xorps	 xmm0, xmm0
  001b9	f3 0f 11 05 2c
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+44, xmm0

; 41   :     x = fx;

  001c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001c9	f3 0f 11 05 30
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+48, xmm0

; 42   :     y = fy;

  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001d9	f3 0f 11 05 34
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+52, xmm0

; 41   :     x = fx;

  001e1	0f 57 c0	 xorps	 xmm0, xmm0
  001e4	f3 0f 11 05 38
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+56, xmm0

; 42   :     y = fy;

  001ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001f4	f3 0f 11 05 3c
	00 00 00	 movss	 DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A+60, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 509  : 		D3DXVECTOR2(  0.0f, -1.0f ),

  001fc	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4HA
  00201	e8 00 00 00 00	 call	 __Init_thread_footer
  00206	59		 pop	 ecx
$LN3@RenderCool:

; 510  : 	};
; 511  : 
; 512  : 	int iTriCount = int(8 - 8.0f * fTime);

  00207	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0020f	f3 0f 59 45 7c	 mulss	 xmm0, DWORD PTR _fTime$[ebp]
  00214	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41000000
  0021c	f3 0f 5c c8	 subss	 xmm1, xmm0
  00220	f3 0f 2c c1	 cvttss2si eax, xmm1
  00224	89 45 48	 mov	 DWORD PTR _iTriCount$[ebp], eax

; 513  : 	float fLastPercentage = (8 - 8.0f * fTime) - iTriCount;

  00227	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  0022f	f3 0f 59 45 7c	 mulss	 xmm0, DWORD PTR _fTime$[ebp]
  00234	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@41000000
  0023c	f3 0f 5c c8	 subss	 xmm1, xmm0
  00240	f3 0f 2a 45 48	 cvtsi2ss xmm0, DWORD PTR _iTriCount$[ebp]
  00245	f3 0f 5c c8	 subss	 xmm1, xmm0
  00249	f3 0f 11 4d 38	 movss	 DWORD PTR _fLastPercentage$[ebp], xmm1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  0024e	8d 45 2c	 lea	 eax, DWORD PTR _vertices$[ebp]
  00251	89 45 a0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00254	8b 4d a0	 mov	 ecx, DWORD PTR _this$[ebp]
  00257	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@USPDTVertex@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SPDTVertex> >::_Vector_val<std::_Simple_types<SPDTVertex> >
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 515  : 	std::vector<TPDTVertex> vertices;

  0025c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 516  : 	TPDTVertex vertex;
; 517  : 	vertex.position.x = fxCenter;

  00260	f3 0f 10 45 70	 movss	 xmm0, DWORD PTR _fxCenter$[ebp]
  00265	f3 0f 11 45 4c	 movss	 DWORD PTR _vertex$[ebp], xmm0

; 518  : 	vertex.position.y = fyCenter;

  0026a	f3 0f 10 45 74	 movss	 xmm0, DWORD PTR _fyCenter$[ebp]
  0026f	f3 0f 11 45 50	 movss	 DWORD PTR _vertex$[ebp+4], xmm0

; 519  : 	vertex.position.z = 0.0f;

  00274	0f 57 c0	 xorps	 xmm0, xmm0
  00277	f3 0f 11 45 54	 movss	 DWORD PTR _vertex$[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0027c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
  00284	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0028b	72 09		 jb	 SHORT $LN57@RenderCool
  0028d	c7 45 24 ff 00
	00 00		 mov	 DWORD PTR tv341[ebp], 255 ; 000000ffH
  00294	eb 38		 jmp	 SHORT $LN58@RenderCool
$LN57@RenderCool:
  00296	0f 57 c0	 xorps	 xmm0, xmm0
  00299	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
  002a0	72 06		 jb	 SHORT $LN55@RenderCool
  002a2	83 65 28 00	 and	 DWORD PTR tv340[ebp], 0
  002a6	eb 20		 jmp	 SHORT $LN56@RenderCool
$LN55@RenderCool:
  002a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
  002b0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002b8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  002c0	e8 00 00 00 00	 call	 __ftoui3
  002c5	89 45 28	 mov	 DWORD PTR tv340[ebp], eax
$LN56@RenderCool:
  002c8	8b 45 28	 mov	 eax, DWORD PTR tv340[ebp]
  002cb	89 45 24	 mov	 DWORD PTR tv341[ebp], eax
$LN58@RenderCool:
  002ce	8b 45 24	 mov	 eax, DWORD PTR tv341[ebp]
  002d1	89 45 c8	 mov	 DWORD PTR _dwR$12[ebp], eax

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  002d4	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+4
  002dc	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  002e3	72 09		 jb	 SHORT $LN61@RenderCool
  002e5	c7 45 1c ff 00
	00 00		 mov	 DWORD PTR tv352[ebp], 255 ; 000000ffH
  002ec	eb 38		 jmp	 SHORT $LN62@RenderCool
$LN61@RenderCool:
  002ee	0f 57 c0	 xorps	 xmm0, xmm0
  002f1	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+4
  002f8	72 06		 jb	 SHORT $LN59@RenderCool
  002fa	83 65 20 00	 and	 DWORD PTR tv351[ebp], 0
  002fe	eb 20		 jmp	 SHORT $LN60@RenderCool
$LN59@RenderCool:
  00300	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+4
  00308	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00310	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00318	e8 00 00 00 00	 call	 __ftoui3
  0031d	89 45 20	 mov	 DWORD PTR tv351[ebp], eax
$LN60@RenderCool:
  00320	8b 45 20	 mov	 eax, DWORD PTR tv351[ebp]
  00323	89 45 1c	 mov	 DWORD PTR tv352[ebp], eax
$LN62@RenderCool:
  00326	8b 45 1c	 mov	 eax, DWORD PTR tv352[ebp]
  00329	89 45 9c	 mov	 DWORD PTR _dwG$2[ebp], eax

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0032c	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+8
  00334	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0033b	72 09		 jb	 SHORT $LN65@RenderCool
  0033d	c7 45 14 ff 00
	00 00		 mov	 DWORD PTR tv363[ebp], 255 ; 000000ffH
  00344	eb 38		 jmp	 SHORT $LN66@RenderCool
$LN65@RenderCool:
  00346	0f 57 c0	 xorps	 xmm0, xmm0
  00349	0f 2f 05 08 00
	00 00		 comiss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+8
  00350	72 06		 jb	 SHORT $LN63@RenderCool
  00352	83 65 18 00	 and	 DWORD PTR tv362[ebp], 0
  00356	eb 20		 jmp	 SHORT $LN64@RenderCool
$LN63@RenderCool:
  00358	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+8
  00360	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00368	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00370	e8 00 00 00 00	 call	 __ftoui3
  00375	89 45 18	 mov	 DWORD PTR tv362[ebp], eax
$LN64@RenderCool:
  00378	8b 45 18	 mov	 eax, DWORD PTR tv362[ebp]
  0037b	89 45 14	 mov	 DWORD PTR tv363[ebp], eax
$LN66@RenderCool:
  0037e	8b 45 14	 mov	 eax, DWORD PTR tv363[ebp]
  00381	89 45 c0	 mov	 DWORD PTR _dwB$10[ebp], eax

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00384	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+12
  0038c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00393	72 09		 jb	 SHORT $LN69@RenderCool
  00395	c7 45 0c ff 00
	00 00		 mov	 DWORD PTR tv374[ebp], 255 ; 000000ffH
  0039c	eb 38		 jmp	 SHORT $LN70@RenderCool
$LN69@RenderCool:
  0039e	0f 57 c0	 xorps	 xmm0, xmm0
  003a1	0f 2f 05 0c 00
	00 00		 comiss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+12
  003a8	72 06		 jb	 SHORT $LN67@RenderCool
  003aa	83 65 10 00	 and	 DWORD PTR tv373[ebp], 0
  003ae	eb 20		 jmp	 SHORT $LN68@RenderCool
$LN67@RenderCool:
  003b0	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+12
  003b8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  003c0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  003c8	e8 00 00 00 00	 call	 __ftoui3
  003cd	89 45 10	 mov	 DWORD PTR tv373[ebp], eax
$LN68@RenderCool:
  003d0	8b 45 10	 mov	 eax, DWORD PTR tv373[ebp]
  003d3	89 45 0c	 mov	 DWORD PTR tv374[ebp], eax
$LN70@RenderCool:
  003d6	8b 45 0c	 mov	 eax, DWORD PTR tv374[ebp]
  003d9	89 45 c4	 mov	 DWORD PTR _dwA$11[ebp], eax

; 935  : 
; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  003dc	8b 45 9c	 mov	 eax, DWORD PTR _dwG$2[ebp]
  003df	c1 e0 08	 shl	 eax, 8
  003e2	8b 4d c8	 mov	 ecx, DWORD PTR _dwR$12[ebp]
  003e5	c1 e1 10	 shl	 ecx, 16			; 00000010H
  003e8	8b 55 c4	 mov	 edx, DWORD PTR _dwA$11[ebp]
  003eb	c1 e2 18	 shl	 edx, 24			; 00000018H
  003ee	0b d1		 or	 edx, ecx
  003f0	0b d0		 or	 edx, eax
  003f2	0b 55 c0	 or	 edx, DWORD PTR _dwB$10[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 520  : 	vertex.diffuse = color;

  003f5	89 55 58	 mov	 DWORD PTR _vertex$[ebp+12], edx

; 521  : 	vertex.texCoord.x = 0.0f;

  003f8	0f 57 c0	 xorps	 xmm0, xmm0
  003fb	f3 0f 11 45 5c	 movss	 DWORD PTR _vertex$[ebp+16], xmm0

; 522  : 	vertex.texCoord.x = 0.0f;

  00400	0f 57 c0	 xorps	 xmm0, xmm0
  00403	f3 0f 11 45 5c	 movss	 DWORD PTR _vertex$[ebp+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  00408	8d 45 4c	 lea	 eax, DWORD PTR _vertex$[ebp]
  0040b	50		 push	 eax
  0040c	8d 4d 2c	 lea	 ecx, DWORD PTR _vertices$[ebp]
  0040f	e8 00 00 00 00	 call	 ??$emplace_back@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::emplace_back<SPDTVertex const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 524  : 	vertex.position.x = fxCenter;

  00414	f3 0f 10 45 70	 movss	 xmm0, DWORD PTR _fxCenter$[ebp]
  00419	f3 0f 11 45 4c	 movss	 DWORD PTR _vertex$[ebp], xmm0

; 525  : 	vertex.position.y = fyCenter - fRadius;

  0041e	f3 0f 10 45 74	 movss	 xmm0, DWORD PTR _fyCenter$[ebp]
  00423	f3 0f 5c 45 78	 subss	 xmm0, DWORD PTR _fRadius$[ebp]
  00428	f3 0f 11 45 50	 movss	 DWORD PTR _vertex$[ebp+4], xmm0

; 526  : 	vertex.position.z = 0.0f;

  0042d	0f 57 c0	 xorps	 xmm0, xmm0
  00430	f3 0f 11 45 54	 movss	 DWORD PTR _vertex$[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00435	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
  0043d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00444	72 09		 jb	 SHORT $LN86@RenderCool
  00446	c7 45 04 ff 00
	00 00		 mov	 DWORD PTR tv416[ebp], 255 ; 000000ffH
  0044d	eb 38		 jmp	 SHORT $LN87@RenderCool
$LN86@RenderCool:
  0044f	0f 57 c0	 xorps	 xmm0, xmm0
  00452	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
  00459	72 06		 jb	 SHORT $LN84@RenderCool
  0045b	83 65 08 00	 and	 DWORD PTR tv417[ebp], 0
  0045f	eb 20		 jmp	 SHORT $LN85@RenderCool
$LN84@RenderCool:
  00461	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
  00469	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00471	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00479	e8 00 00 00 00	 call	 __ftoui3
  0047e	89 45 08	 mov	 DWORD PTR tv417[ebp], eax
$LN85@RenderCool:
  00481	8b 45 08	 mov	 eax, DWORD PTR tv417[ebp]
  00484	89 45 04	 mov	 DWORD PTR tv416[ebp], eax
$LN87@RenderCool:
  00487	8b 45 04	 mov	 eax, DWORD PTR tv416[ebp]
  0048a	89 45 b8	 mov	 DWORD PTR _dwR$8[ebp], eax

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0048d	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+4
  00495	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0049c	72 09		 jb	 SHORT $LN90@RenderCool
  0049e	c7 45 f0 ff 00
	00 00		 mov	 DWORD PTR tv435[ebp], 255 ; 000000ffH
  004a5	eb 38		 jmp	 SHORT $LN91@RenderCool
$LN90@RenderCool:
  004a7	0f 57 c0	 xorps	 xmm0, xmm0
  004aa	0f 2f 05 04 00
	00 00		 comiss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+4
  004b1	72 06		 jb	 SHORT $LN88@RenderCool
  004b3	83 65 00 00	 and	 DWORD PTR tv434[ebp], 0
  004b7	eb 20		 jmp	 SHORT $LN89@RenderCool
$LN88@RenderCool:
  004b9	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+4
  004c1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  004c9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  004d1	e8 00 00 00 00	 call	 __ftoui3
  004d6	89 45 00	 mov	 DWORD PTR tv434[ebp], eax
$LN89@RenderCool:
  004d9	8b 45 00	 mov	 eax, DWORD PTR tv434[ebp]
  004dc	89 45 f0	 mov	 DWORD PTR tv435[ebp], eax
$LN91@RenderCool:
  004df	8b 45 f0	 mov	 eax, DWORD PTR tv435[ebp]
  004e2	89 45 bc	 mov	 DWORD PTR _dwG$9[ebp], eax

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  004e5	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+8
  004ed	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  004f4	72 09		 jb	 SHORT $LN94@RenderCool
  004f6	c7 45 e8 ff 00
	00 00		 mov	 DWORD PTR tv446[ebp], 255 ; 000000ffH
  004fd	eb 38		 jmp	 SHORT $LN95@RenderCool
$LN94@RenderCool:
  004ff	0f 57 c0	 xorps	 xmm0, xmm0
  00502	0f 2f 05 08 00
	00 00		 comiss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+8
  00509	72 06		 jb	 SHORT $LN92@RenderCool
  0050b	83 65 ec 00	 and	 DWORD PTR tv445[ebp], 0
  0050f	eb 20		 jmp	 SHORT $LN93@RenderCool
$LN92@RenderCool:
  00511	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+8
  00519	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00521	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00529	e8 00 00 00 00	 call	 __ftoui3
  0052e	89 45 ec	 mov	 DWORD PTR tv445[ebp], eax
$LN93@RenderCool:
  00531	8b 45 ec	 mov	 eax, DWORD PTR tv445[ebp]
  00534	89 45 e8	 mov	 DWORD PTR tv446[ebp], eax
$LN95@RenderCool:
  00537	8b 45 e8	 mov	 eax, DWORD PTR tv446[ebp]
  0053a	89 45 b0	 mov	 DWORD PTR _dwB$6[ebp], eax

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0053d	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+12
  00545	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0054c	72 09		 jb	 SHORT $LN98@RenderCool
  0054e	c7 45 e4 ff 00
	00 00		 mov	 DWORD PTR tv457[ebp], 255 ; 000000ffH
  00555	eb 38		 jmp	 SHORT $LN99@RenderCool
$LN98@RenderCool:
  00557	0f 57 c0	 xorps	 xmm0, xmm0
  0055a	0f 2f 05 0c 00
	00 00		 comiss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+12
  00561	72 06		 jb	 SHORT $LN96@RenderCool
  00563	83 65 cc 00	 and	 DWORD PTR tv456[ebp], 0
  00567	eb 20		 jmp	 SHORT $LN97@RenderCool
$LN96@RenderCool:
  00569	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+12
  00571	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00579	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00581	e8 00 00 00 00	 call	 __ftoui3
  00586	89 45 cc	 mov	 DWORD PTR tv456[ebp], eax
$LN97@RenderCool:
  00589	8b 45 cc	 mov	 eax, DWORD PTR tv456[ebp]
  0058c	89 45 e4	 mov	 DWORD PTR tv457[ebp], eax
$LN99@RenderCool:
  0058f	8b 45 e4	 mov	 eax, DWORD PTR tv457[ebp]
  00592	89 45 b4	 mov	 DWORD PTR _dwA$7[ebp], eax

; 935  : 
; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00595	8b 45 bc	 mov	 eax, DWORD PTR _dwG$9[ebp]
  00598	c1 e0 08	 shl	 eax, 8
  0059b	8b 4d b8	 mov	 ecx, DWORD PTR _dwR$8[ebp]
  0059e	c1 e1 10	 shl	 ecx, 16			; 00000010H
  005a1	8b 55 b4	 mov	 edx, DWORD PTR _dwA$7[ebp]
  005a4	c1 e2 18	 shl	 edx, 24			; 00000018H
  005a7	0b d1		 or	 edx, ecx
  005a9	0b d0		 or	 edx, eax
  005ab	0b 55 b0	 or	 edx, DWORD PTR _dwB$6[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 527  : 	vertex.diffuse = color;

  005ae	89 55 58	 mov	 DWORD PTR _vertex$[ebp+12], edx

; 528  : 	vertex.texCoord.x = 0.0f;

  005b1	0f 57 c0	 xorps	 xmm0, xmm0
  005b4	f3 0f 11 45 5c	 movss	 DWORD PTR _vertex$[ebp+16], xmm0

; 529  : 	vertex.texCoord.x = 0.0f;

  005b9	0f 57 c0	 xorps	 xmm0, xmm0
  005bc	f3 0f 11 45 5c	 movss	 DWORD PTR _vertex$[ebp+16], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  005c1	8d 45 4c	 lea	 eax, DWORD PTR _vertex$[ebp]
  005c4	50		 push	 eax
  005c5	8d 4d 2c	 lea	 ecx, DWORD PTR _vertices$[ebp]
  005c8	e8 00 00 00 00	 call	 ??$emplace_back@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::emplace_back<SPDTVertex const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 532  : 	for (int j = 0; j < iTriCount; ++j)

  005cd	83 65 40 00	 and	 DWORD PTR _j$17[ebp], 0
  005d1	eb 07		 jmp	 SHORT $LN6@RenderCool
$LN4@RenderCool:
  005d3	8b 45 40	 mov	 eax, DWORD PTR _j$17[ebp]
  005d6	40		 inc	 eax
  005d7	89 45 40	 mov	 DWORD PTR _j$17[ebp], eax
$LN6@RenderCool:
  005da	8b 45 40	 mov	 eax, DWORD PTR _j$17[ebp]
  005dd	3b 45 48	 cmp	 eax, DWORD PTR _iTriCount$[ebp]
  005e0	7d 44		 jge	 SHORT $LN5@RenderCool

; 533  : 	{
; 534  : 		vertex.position.x = fxCenter + s_v2BoxPos[j].x * fRadius;

  005e2	8b 45 40	 mov	 eax, DWORD PTR _j$17[ebp]
  005e5	f3 0f 10 04 c5
	00 00 00 00	 movss	 xmm0, DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[eax*8]
  005ee	f3 0f 59 45 78	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  005f3	f3 0f 58 45 70	 addss	 xmm0, DWORD PTR _fxCenter$[ebp]
  005f8	f3 0f 11 45 4c	 movss	 DWORD PTR _vertex$[ebp], xmm0

; 535  : 		vertex.position.y = fyCenter + s_v2BoxPos[j].y * fRadius;

  005fd	8b 45 40	 mov	 eax, DWORD PTR _j$17[ebp]
  00600	f3 0f 10 04 c5
	04 00 00 00	 movss	 xmm0, DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[eax*8+4]
  00609	f3 0f 59 45 78	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  0060e	f3 0f 58 45 74	 addss	 xmm0, DWORD PTR _fyCenter$[ebp]
  00613	f3 0f 11 45 50	 movss	 DWORD PTR _vertex$[ebp+4], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  00618	8d 45 4c	 lea	 eax, DWORD PTR _vertex$[ebp]
  0061b	50		 push	 eax
  0061c	8d 4d 2c	 lea	 ecx, DWORD PTR _vertices$[ebp]
  0061f	e8 00 00 00 00	 call	 ??$emplace_back@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::emplace_back<SPDTVertex const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 537  : 	}

  00624	eb ad		 jmp	 SHORT $LN4@RenderCool
$LN5@RenderCool:

; 538  : 
; 539  : 	if (fLastPercentage > 0.0f)

  00626	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _fLastPercentage$[ebp]
  0062b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00632	0f 86 a0 00 00
	00		 jbe	 $LN8@RenderCool

; 540  : 	{
; 541  : 		D3DXVECTOR2 * pv2Pos;
; 542  : 		D3DXVECTOR2 * pv2LastPos;
; 543  : 
; 544  : 		assert((iTriCount-1+8)%8 >= 0 && (iTriCount-1+8)%8 < 8);
; 545  : 		assert((iTriCount+8)%8 >= 0 && (iTriCount+8)%8 < 8);
; 546  : 		pv2LastPos = &s_v2BoxPos[(iTriCount-1+8)%8];

  00638	8b 45 48	 mov	 eax, DWORD PTR _iTriCount$[ebp]
  0063b	83 c0 07	 add	 eax, 7
  0063e	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  00643	79 05		 jns	 SHORT $LN198@RenderCool
  00645	48		 dec	 eax
  00646	83 c8 f8	 or	 eax, -8			; fffffff8H
  00649	40		 inc	 eax
$LN198@RenderCool:
  0064a	8d 04 c5 00 00
	00 00		 lea	 eax, DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[eax*8]
  00651	89 45 3c	 mov	 DWORD PTR _pv2LastPos$16[ebp], eax

; 547  : 		pv2Pos = &s_v2BoxPos[(iTriCount+8)%8];

  00654	8b 45 48	 mov	 eax, DWORD PTR _iTriCount$[ebp]
  00657	83 c0 08	 add	 eax, 8
  0065a	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  0065f	79 05		 jns	 SHORT $LN199@RenderCool
  00661	48		 dec	 eax
  00662	83 c8 f8	 or	 eax, -8			; fffffff8H
  00665	40		 inc	 eax
$LN199@RenderCool:
  00666	8d 04 c5 00 00
	00 00		 lea	 eax, DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[eax*8]
  0066d	89 45 e0	 mov	 DWORD PTR _pv2Pos$15[ebp], eax

; 548  : 
; 549  : 		vertex.position.x = fxCenter + ((pv2Pos->x-pv2LastPos->x) * fLastPercentage + pv2LastPos->x) * fRadius;

  00670	8b 45 e0	 mov	 eax, DWORD PTR _pv2Pos$15[ebp]
  00673	8b 4d 3c	 mov	 ecx, DWORD PTR _pv2LastPos$16[ebp]
  00676	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0067a	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0067e	f3 0f 59 45 38	 mulss	 xmm0, DWORD PTR _fLastPercentage$[ebp]
  00683	8b 45 3c	 mov	 eax, DWORD PTR _pv2LastPos$16[ebp]
  00686	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0068a	f3 0f 59 45 78	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  0068f	f3 0f 58 45 70	 addss	 xmm0, DWORD PTR _fxCenter$[ebp]
  00694	f3 0f 11 45 4c	 movss	 DWORD PTR _vertex$[ebp], xmm0

; 550  : 		vertex.position.y = fyCenter + ((pv2Pos->y-pv2LastPos->y) * fLastPercentage + pv2LastPos->y) * fRadius;

  00699	8b 45 e0	 mov	 eax, DWORD PTR _pv2Pos$15[ebp]
  0069c	8b 4d 3c	 mov	 ecx, DWORD PTR _pv2LastPos$16[ebp]
  0069f	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  006a4	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  006a9	f3 0f 59 45 38	 mulss	 xmm0, DWORD PTR _fLastPercentage$[ebp]
  006ae	8b 45 3c	 mov	 eax, DWORD PTR _pv2LastPos$16[ebp]
  006b1	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  006b6	f3 0f 59 45 78	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  006bb	f3 0f 58 45 74	 addss	 xmm0, DWORD PTR _fyCenter$[ebp]
  006c0	f3 0f 11 45 50	 movss	 DWORD PTR _vertex$[ebp+4], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  006c5	8d 45 4c	 lea	 eax, DWORD PTR _vertex$[ebp]
  006c8	50		 push	 eax
  006c9	8d 4d 2c	 lea	 ecx, DWORD PTR _vertices$[ebp]
  006cc	e8 00 00 00 00	 call	 ??$emplace_back@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAEXABUSPDTVertex@@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::emplace_back<SPDTVertex const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 552  : 		++iTriCount;

  006d1	8b 45 48	 mov	 eax, DWORD PTR _iTriCount$[ebp]
  006d4	40		 inc	 eax
  006d5	89 45 48	 mov	 DWORD PTR _iTriCount$[ebp], eax
$LN8@RenderCool:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1478 :         auto& _My_data = _Mypair._Myval2;

  006d8	8d 45 2c	 lea	 eax, DWORD PTR _vertices$[ebp]
  006db	89 45 dc	 mov	 DWORD PTR __My_data$14[ebp], eax

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  006de	8b 45 dc	 mov	 eax, DWORD PTR __My_data$14[ebp]
  006e1	8b 4d dc	 mov	 ecx, DWORD PTR __My_data$14[ebp]
  006e4	8b 00		 mov	 eax, DWORD PTR [eax]
  006e6	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  006e9	75 09		 jne	 SHORT $LN135@RenderCool
  006eb	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR tv482[ebp], 1
  006f2	eb 04		 jmp	 SHORT $LN136@RenderCool
$LN135@RenderCool:
  006f4	83 65 d8 00	 and	 DWORD PTR tv482[ebp], 0
$LN136@RenderCool:
  006f8	8a 45 d8	 mov	 al, BYTE PTR tv482[ebp]
  006fb	88 45 47	 mov	 BYTE PTR $T18[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 555  : 	if (vertices.empty())

  006fe	0f b6 45 47	 movzx	 eax, BYTE PTR $T18[ebp]
  00702	85 c0		 test	 eax, eax
  00704	74 11		 je	 SHORT $LN9@RenderCool

; 556  : 		return;

  00706	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  0070a	8d 4d 2c	 lea	 ecx, DWORD PTR _vertices$[ebp]
  0070d	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Tidy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 556  : 		return;

  00712	e9 11 01 00 00	 jmp	 $LN1@RenderCool
$LN9@RenderCool:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  00717	8d 45 2c	 lea	 eax, DWORD PTR _vertices$[ebp]
  0071a	89 45 d4	 mov	 DWORD PTR __My_data$13[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0071d	8b 45 d4	 mov	 eax, DWORD PTR __My_data$13[ebp]
  00720	8b 4d d4	 mov	 ecx, DWORD PTR __My_data$13[ebp]
  00723	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00726	2b 01		 sub	 eax, DWORD PTR [ecx]
  00728	99		 cdq
  00729	6a 18		 push	 24			; 00000018H
  0072b	59		 pop	 ecx
  0072c	f7 f9		 idiv	 ecx
  0072e	89 45 a8	 mov	 DWORD PTR $T4[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00731	8d 45 2c	 lea	 eax, DWORD PTR _vertices$[ebp]
  00734	89 45 ac	 mov	 DWORD PTR __My_data$5[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00737	33 c0		 xor	 eax, eax
  00739	6b c0 18	 imul	 eax, eax, 24
  0073c	8b 4d ac	 mov	 ecx, DWORD PTR __My_data$5[ebp]
  0073f	03 01		 add	 eax, DWORD PTR [ecx]
  00741	89 45 a4	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 558  : 	if (SetPDTStream(&vertices[0], vertices.size()))

  00744	ff 75 a8	 push	 DWORD PTR $T4[ebp]
  00747	ff 75 a4	 push	 DWORD PTR $T3[ebp]
  0074a	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  0074f	59		 pop	 ecx
  00750	59		 pop	 ecx
  00751	0f b6 c0	 movzx	 eax, al
  00754	85 c0		 test	 eax, eax
  00756	0f 84 c0 00 00
	00		 je	 $LN10@RenderCool

; 559  : 	{
; 560  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_DIFFUSE);

  0075c	6a 00		 push	 0
  0075e	6a 02		 push	 2
  00760	6a 00		 push	 0
  00762	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00768	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 561  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_SELECTARG1);

  0076d	6a 02		 push	 2
  0076f	6a 01		 push	 1
  00771	6a 00		 push	 0
  00773	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00779	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 562  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_DIFFUSE);

  0077e	6a 00		 push	 0
  00780	6a 05		 push	 5
  00782	6a 00		 push	 0
  00784	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0078a	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 563  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_SELECTARG1);

  0078f	6a 02		 push	 2
  00791	6a 04		 push	 4
  00793	6a 00		 push	 0
  00795	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0079b	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 564  : 		STATEMANAGER.SetTexture(0, NULL);

  007a0	6a 00		 push	 0
  007a2	6a 00		 push	 0
  007a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  007aa	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 565  : 		STATEMANAGER.SetTexture(1, NULL);

  007af	6a 00		 push	 0
  007b1	6a 01		 push	 1
  007b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  007b9	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture8@@@Z ; CStateManager::SetTexture

; 566  : 		STATEMANAGER.SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1);

  007be	68 42 01 00 00	 push	 322			; 00000142H
  007c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  007c9	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 567  : 		STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLEFAN, 0, iTriCount);

  007ce	ff 75 48	 push	 DWORD PTR _iTriCount$[ebp]
  007d1	6a 00		 push	 0
  007d3	6a 06		 push	 6
  007d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  007db	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive

; 568  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG1);

  007e0	6a 02		 push	 2
  007e2	6a 00		 push	 0
  007e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  007ea	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 569  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLOROP);

  007ef	6a 01		 push	 1
  007f1	6a 00		 push	 0
  007f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  007f9	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 570  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_ALPHAARG1);

  007fe	6a 05		 push	 5
  00800	6a 00		 push	 0
  00802	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00808	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 571  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_ALPHAOP);

  0080d	6a 04		 push	 4
  0080f	6a 00		 push	 0
  00811	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00817	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState
$LN10@RenderCool:

; 573  : }

  0081c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  00820	8d 4d 2c	 lea	 ecx, DWORD PTR _vertices$[ebp]
  00823	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Tidy
$LN1@RenderCool:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 573  : }

  00828	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0082b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00832	59		 pop	 ecx
  00833	8b 4d 64	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00836	33 cd		 xor	 ecx, ebp
  00838	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0083d	83 c5 68	 add	 ebp, 104		; 00000068H
  00840	c9		 leave
  00841	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z$2:
  00000	8d 4d 2c	 lea	 ecx, DWORD PTR _vertices$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a 70	 mov	 ecx, DWORD PTR [edx+112]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z ENDP	; CPythonGraphic::RenderCoolTimeBox
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z
_TEXT	SEGMENT
_this$ = -368						; size = 4
$T1 = -364						; size = 8
_dwA$2 = -356						; size = 4
_dwR$3 = -352						; size = 4
_dwG$4 = -348						; size = 4
tv73 = -344						; size = 4
_height$ = -340						; size = 4
_width$ = -336						; size = 4
$T5 = -332						; size = 8
$T6 = -324						; size = 8
_dwR$7 = -316						; size = 4
$T8 = -312						; size = 8
_dwB$9 = -304						; size = 4
_dwA$10 = -300						; size = 4
_dwR$11 = -296						; size = 4
_dwG$12 = -292						; size = 4
_dwB$13 = -288						; size = 4
_dwA$14 = -284						; size = 4
_c_pTexture$ = -280					; size = 4
_dwG$15 = -276						; size = 4
_dwB$16 = -272						; size = 4
_dwA$17 = -268						; size = 4
_dwR$18 = -264						; size = 4
_dwG$19 = -260						; size = 4
_dwB$20 = -256						; size = 4
tv307 = -252						; size = 4
tv306 = -248						; size = 4
tv296 = -244						; size = 4
tv295 = -240						; size = 4
tv253 = -236						; size = 4
tv252 = -232						; size = 4
___t$ = -228						; size = 4
_ev$ = -224						; size = 4
_eu$ = -220						; size = 4
tv507 = -216						; size = 4
tv506 = -212						; size = 4
tv496 = -208						; size = 4
tv495 = -204						; size = 4
tv485 = -200						; size = 4
tv484 = -196						; size = 4
tv474 = -192						; size = 4
tv473 = -188						; size = 4
_ey$ = -184						; size = 4
_ex$ = -180						; size = 4
_su$ = -176						; size = 4
tv444 = -172						; size = 4
tv443 = -168						; size = 4
tv433 = -164						; size = 4
tv432 = -160						; size = 4
tv422 = -156						; size = 4
tv421 = -152						; size = 4
tv411 = -148						; size = 4
tv410 = -144						; size = 4
_sx$ = -140						; size = 4
_sv$ = -136						; size = 4
tv381 = -132						; size = 4
tv380 = -128						; size = 4
tv370 = -124						; size = 4
tv369 = -120						; size = 4
tv359 = -116						; size = 4
tv358 = -112						; size = 4
tv348 = -108						; size = 4
tv347 = -104						; size = 4
_sy$ = -100						; size = 4
tv318 = -96						; size = 4
tv317 = -92						; size = 4
___n$ = -88						; size = 4
_z$ = -84						; size = 4
_DiffuseColor2$ = -80					; size = 16
_DiffuseColor1$ = -64					; size = 16
$T21 = -48						; size = 12
$T22 = -36						; size = 12
$T23 = -24						; size = 12
$T24 = -12						; size = 12
_vertices$ = 0						; size = 96
__$ArrayPad$ = 96					; size = 4
_pImageInstance$ = 108					; size = 4
_x$ = 112						; size = 4
_y$ = 116						; size = 4
_aLeft$ = 120						; size = 4
_aRight$ = 124						; size = 4
?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z PROC ; CPythonGraphic::RenderAlphaImage, COMDAT
; _this$ = ecx

; 443  : {

  00000	55		 push	 ebp
  00001	8d 6c 24 9c	 lea	 ebp, DWORD PTR [esp-100]
  00005	81 ec d4 01 00
	00		 sub	 esp, 468		; 000001d4H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 60	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	89 8d 90 fe ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 920  :     r = fr;

  0001d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00025	f3 0f 11 45 c0	 movss	 DWORD PTR _DiffuseColor1$[ebp], xmm0

; 921  :     g = fg;

  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00032	f3 0f 11 45 c4	 movss	 DWORD PTR _DiffuseColor1$[ebp+4], xmm0

; 922  :     b = fb;

  00037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0003f	f3 0f 11 45 c8	 movss	 DWORD PTR _DiffuseColor1$[ebp+8], xmm0

; 923  :     a = fa;

  00044	f3 0f 10 45 78	 movss	 xmm0, DWORD PTR _aLeft$[ebp]
  00049	f3 0f 11 45 cc	 movss	 DWORD PTR _DiffuseColor1$[ebp+12], xmm0

; 920  :     r = fr;

  0004e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00056	f3 0f 11 45 b0	 movss	 DWORD PTR _DiffuseColor2$[ebp], xmm0

; 921  :     g = fg;

  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00063	f3 0f 11 45 b4	 movss	 DWORD PTR _DiffuseColor2$[ebp+4], xmm0

; 922  :     b = fb;

  00068	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00070	f3 0f 11 45 b8	 movss	 DWORD PTR _DiffuseColor2$[ebp+8], xmm0

; 923  :     a = fa;

  00075	f3 0f 10 45 7c	 movss	 xmm0, DWORD PTR _aRight$[ebp]
  0007a	f3 0f 11 45 bc	 movss	 DWORD PTR _DiffuseColor2$[ebp+12], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 449  : 	const CGraphicTexture * c_pTexture = pImageInstance->GetTexturePointer();

  0007f	8b 4d 6c	 mov	 ecx, DWORD PTR _pImageInstance$[ebp]
  00082	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  00087	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _c_pTexture$[ebp], eax

; 450  : 
; 451  : 	float width = (float) pImageInstance->GetWidth();

  0008d	8b 4d 6c	 mov	 ecx, DWORD PTR _pImageInstance$[ebp]
  00090	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetWidth
  00095	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00099	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _width$[ebp], xmm0

; 452  : 	float height = (float) pImageInstance->GetHeight();

  000a1	8b 4d 6c	 mov	 ecx, DWORD PTR _pImageInstance$[ebp]
  000a4	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetHeight
  000a9	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  000ad	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _height$[ebp], xmm0

; 453  : 
; 454  : 	c_pTexture->SetTextureStage(0);

  000b5	6a 00		 push	 0
  000b7	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _c_pTexture$[ebp]
  000bd	e8 00 00 00 00	 call	 ?SetTextureStage@CGraphicTexture@@QBEXH@Z ; CGraphicTexture::SetTextureStage

; 455  : 
; 456  : 	float sx = x;

  000c2	f3 0f 10 45 70	 movss	 xmm0, DWORD PTR _x$[ebp]
  000c7	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _sx$[ebp], xmm0

; 457  : 	float sy = y;

  000cf	f3 0f 10 45 74	 movss	 xmm0, DWORD PTR _y$[ebp]
  000d4	f3 0f 11 45 9c	 movss	 DWORD PTR _sy$[ebp], xmm0

; 458  : 	float ex = x + width;

  000d9	f3 0f 10 45 70	 movss	 xmm0, DWORD PTR _x$[ebp]
  000de	f3 0f 58 85 b0
	fe ff ff	 addss	 xmm0, DWORD PTR _width$[ebp]
  000e6	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _ex$[ebp], xmm0

; 459  : 	float ey = y + height;

  000ee	f3 0f 10 45 74	 movss	 xmm0, DWORD PTR _y$[ebp]
  000f3	f3 0f 58 85 ac
	fe ff ff	 addss	 xmm0, DWORD PTR _height$[ebp]
  000fb	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _ey$[ebp], xmm0

; 460  : 	float z = 0.0f;

  00103	0f 57 c0	 xorps	 xmm0, xmm0
  00106	f3 0f 11 45 ac	 movss	 DWORD PTR _z$[ebp], xmm0

; 461  : 
; 462  : 	float su = 0.0f;

  0010b	0f 57 c0	 xorps	 xmm0, xmm0
  0010e	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _su$[ebp], xmm0

; 463  : 	float sv = 0.0f;

  00116	0f 57 c0	 xorps	 xmm0, xmm0
  00119	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR _sv$[ebp], xmm0

; 464  : 	float eu = 1.0f;

  00121	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00129	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR _eu$[ebp], xmm0

; 465  : 	float ev = 1.0f;

  00131	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00139	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR _ev$[ebp], xmm0

; 466  : 
; 467  : 	TPDTVertex vertices[4];

  00141	c7 45 a8 04 00
	00 00		 mov	 DWORD PTR ___n$[ebp], 4
  00148	8d 45 00	 lea	 eax, DWORD PTR _vertices$[ebp]
  0014b	89 85 1c ff ff
	ff		 mov	 DWORD PTR ___t$[ebp], eax
$LN9@RenderAlph:
  00151	8b 45 a8	 mov	 eax, DWORD PTR ___n$[ebp]
  00154	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv73[ebp], eax
  0015a	8b 45 a8	 mov	 eax, DWORD PTR ___n$[ebp]
  0015d	48		 dec	 eax
  0015e	89 45 a8	 mov	 DWORD PTR ___n$[ebp], eax
  00161	83 bd a8 fe ff
	ff 00		 cmp	 DWORD PTR tv73[ebp], 0
  00168	76 11		 jbe	 SHORT $LN10@RenderAlph
  0016a	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR ___t$[ebp]
  00170	83 c0 18	 add	 eax, 24			; 00000018H
  00173	89 85 1c ff ff
	ff		 mov	 DWORD PTR ___t$[ebp], eax
  00179	eb d6		 jmp	 SHORT $LN9@RenderAlph
$LN10@RenderAlph:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  0017b	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00183	f3 0f 11 45 f4	 movss	 DWORD PTR $T24[ebp], xmm0

; 181  :     y = fy;

  00188	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0018d	f3 0f 11 45 f8	 movss	 DWORD PTR $T24[ebp+4], xmm0

; 182  :     z = fz;

  00192	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _z$[ebp]
  00197	f3 0f 11 45 fc	 movss	 DWORD PTR $T24[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 468  : 	vertices[0].position = TPosition(sx, sy, z);

  0019c	6a 18		 push	 24			; 00000018H
  0019e	58		 pop	 eax
  0019f	6b c0 00	 imul	 eax, eax, 0
  001a2	8d 7c 05 00	 lea	 edi, DWORD PTR _vertices$[ebp+eax]
  001a6	8d 75 f4	 lea	 esi, DWORD PTR $T24[ebp]
  001a9	a5		 movsd
  001aa	a5		 movsd
  001ab	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  001ac	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp]
  001b1	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  001b8	72 0c		 jb	 SHORT $LN24@RenderAlph
  001ba	c7 85 14 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv253[ebp], 255 ; 000000ffH
  001c4	eb 3e		 jmp	 SHORT $LN25@RenderAlph
$LN24@RenderAlph:
  001c6	0f 57 c0	 xorps	 xmm0, xmm0
  001c9	0f 2f 45 c0	 comiss	 xmm0, DWORD PTR _DiffuseColor1$[ebp]
  001cd	72 09		 jb	 SHORT $LN22@RenderAlph
  001cf	83 a5 18 ff ff
	ff 00		 and	 DWORD PTR tv252[ebp], 0
  001d6	eb 20		 jmp	 SHORT $LN23@RenderAlph
$LN22@RenderAlph:
  001d8	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp]
  001dd	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001e5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001ed	e8 00 00 00 00	 call	 __ftoui3
  001f2	89 85 18 ff ff
	ff		 mov	 DWORD PTR tv252[ebp], eax
$LN23@RenderAlph:
  001f8	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR tv252[ebp]
  001fe	89 85 14 ff ff
	ff		 mov	 DWORD PTR tv253[ebp], eax
$LN25@RenderAlph:
  00204	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR tv253[ebp]
  0020a	89 85 a0 fe ff
	ff		 mov	 DWORD PTR _dwR$3[ebp], eax

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00210	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+4]
  00215	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0021c	72 0c		 jb	 SHORT $LN28@RenderAlph
  0021e	c7 85 0c ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv296[ebp], 255 ; 000000ffH
  00228	eb 3e		 jmp	 SHORT $LN29@RenderAlph
$LN28@RenderAlph:
  0022a	0f 57 c0	 xorps	 xmm0, xmm0
  0022d	0f 2f 45 c4	 comiss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+4]
  00231	72 09		 jb	 SHORT $LN26@RenderAlph
  00233	83 a5 10 ff ff
	ff 00		 and	 DWORD PTR tv295[ebp], 0
  0023a	eb 20		 jmp	 SHORT $LN27@RenderAlph
$LN26@RenderAlph:
  0023c	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+4]
  00241	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00249	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00251	e8 00 00 00 00	 call	 __ftoui3
  00256	89 85 10 ff ff
	ff		 mov	 DWORD PTR tv295[ebp], eax
$LN27@RenderAlph:
  0025c	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR tv295[ebp]
  00262	89 85 0c ff ff
	ff		 mov	 DWORD PTR tv296[ebp], eax
$LN29@RenderAlph:
  00268	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR tv296[ebp]
  0026e	89 85 a4 fe ff
	ff		 mov	 DWORD PTR _dwG$4[ebp], eax

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00274	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+8]
  00279	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00280	72 0c		 jb	 SHORT $LN32@RenderAlph
  00282	c7 85 04 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv307[ebp], 255 ; 000000ffH
  0028c	eb 3e		 jmp	 SHORT $LN33@RenderAlph
$LN32@RenderAlph:
  0028e	0f 57 c0	 xorps	 xmm0, xmm0
  00291	0f 2f 45 c8	 comiss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+8]
  00295	72 09		 jb	 SHORT $LN30@RenderAlph
  00297	83 a5 08 ff ff
	ff 00		 and	 DWORD PTR tv306[ebp], 0
  0029e	eb 20		 jmp	 SHORT $LN31@RenderAlph
$LN30@RenderAlph:
  002a0	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+8]
  002a5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002ad	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  002b5	e8 00 00 00 00	 call	 __ftoui3
  002ba	89 85 08 ff ff
	ff		 mov	 DWORD PTR tv306[ebp], eax
$LN31@RenderAlph:
  002c0	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR tv306[ebp]
  002c6	89 85 04 ff ff
	ff		 mov	 DWORD PTR tv307[ebp], eax
$LN33@RenderAlph:
  002cc	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR tv307[ebp]
  002d2	89 85 00 ff ff
	ff		 mov	 DWORD PTR _dwB$20[ebp], eax

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  002d8	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+12]
  002dd	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  002e4	72 09		 jb	 SHORT $LN36@RenderAlph
  002e6	c7 45 a0 ff 00
	00 00		 mov	 DWORD PTR tv318[ebp], 255 ; 000000ffH
  002ed	eb 32		 jmp	 SHORT $LN37@RenderAlph
$LN36@RenderAlph:
  002ef	0f 57 c0	 xorps	 xmm0, xmm0
  002f2	0f 2f 45 cc	 comiss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+12]
  002f6	72 06		 jb	 SHORT $LN34@RenderAlph
  002f8	83 65 a4 00	 and	 DWORD PTR tv317[ebp], 0
  002fc	eb 1d		 jmp	 SHORT $LN35@RenderAlph
$LN34@RenderAlph:
  002fe	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+12]
  00303	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0030b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00313	e8 00 00 00 00	 call	 __ftoui3
  00318	89 45 a4	 mov	 DWORD PTR tv317[ebp], eax
$LN35@RenderAlph:
  0031b	8b 45 a4	 mov	 eax, DWORD PTR tv317[ebp]
  0031e	89 45 a0	 mov	 DWORD PTR tv318[ebp], eax
$LN37@RenderAlph:
  00321	8b 45 a0	 mov	 eax, DWORD PTR tv318[ebp]
  00324	89 85 9c fe ff
	ff		 mov	 DWORD PTR _dwA$2[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 469  : 	vertices[0].diffuse = DiffuseColor1;

  0032a	6a 18		 push	 24			; 00000018H
  0032c	58		 pop	 eax
  0032d	6b c0 00	 imul	 eax, eax, 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00330	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR _dwG$4[ebp]
  00336	c1 e1 08	 shl	 ecx, 8
  00339	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR _dwR$3[ebp]
  0033f	c1 e2 10	 shl	 edx, 16			; 00000010H
  00342	8b b5 9c fe ff
	ff		 mov	 esi, DWORD PTR _dwA$2[ebp]
  00348	c1 e6 18	 shl	 esi, 24			; 00000018H
  0034b	0b f2		 or	 esi, edx
  0034d	0b f1		 or	 esi, ecx
  0034f	0b b5 00 ff ff
	ff		 or	 esi, DWORD PTR _dwB$20[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 469  : 	vertices[0].diffuse = DiffuseColor1;

  00355	89 74 05 0c	 mov	 DWORD PTR _vertices$[ebp+eax+12], esi
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 41   :     x = fx;

  00359	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _su$[ebp]
  00361	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR $T8[ebp], xmm0

; 42   :     y = fy;

  00369	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _sv$[ebp]
  00371	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR $T8[ebp+4], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 470  : 	vertices[0].texCoord = TTextureCoordinate(su, sv);

  00379	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]
  0037f	8b 8d cc fe ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp+4]
  00385	6a 18		 push	 24			; 00000018H
  00387	5a		 pop	 edx
  00388	6b d2 00	 imul	 edx, edx, 0
  0038b	89 44 15 10	 mov	 DWORD PTR _vertices$[ebp+edx+16], eax
  0038f	89 4c 15 14	 mov	 DWORD PTR _vertices$[ebp+edx+20], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  00393	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _ex$[ebp]
  0039b	f3 0f 11 45 e8	 movss	 DWORD PTR $T23[ebp], xmm0

; 181  :     y = fy;

  003a0	f3 0f 10 45 9c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  003a5	f3 0f 11 45 ec	 movss	 DWORD PTR $T23[ebp+4], xmm0

; 182  :     z = fz;

  003aa	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _z$[ebp]
  003af	f3 0f 11 45 f0	 movss	 DWORD PTR $T23[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 472  : 	vertices[1].position = TPosition(ex, sy, z);

  003b4	6a 18		 push	 24			; 00000018H
  003b6	58		 pop	 eax
  003b7	c1 e0 00	 shl	 eax, 0
  003ba	8d 7c 05 00	 lea	 edi, DWORD PTR _vertices$[ebp+eax]
  003be	8d 75 e8	 lea	 esi, DWORD PTR $T23[ebp]
  003c1	a5		 movsd
  003c2	a5		 movsd
  003c3	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  003c4	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp]
  003c9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  003d0	72 09		 jb	 SHORT $LN46@RenderAlph
  003d2	c7 45 94 ff 00
	00 00		 mov	 DWORD PTR tv348[ebp], 255 ; 000000ffH
  003d9	eb 32		 jmp	 SHORT $LN47@RenderAlph
$LN46@RenderAlph:
  003db	0f 57 c0	 xorps	 xmm0, xmm0
  003de	0f 2f 45 b0	 comiss	 xmm0, DWORD PTR _DiffuseColor2$[ebp]
  003e2	72 06		 jb	 SHORT $LN44@RenderAlph
  003e4	83 65 98 00	 and	 DWORD PTR tv347[ebp], 0
  003e8	eb 1d		 jmp	 SHORT $LN45@RenderAlph
$LN44@RenderAlph:
  003ea	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp]
  003ef	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  003f7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  003ff	e8 00 00 00 00	 call	 __ftoui3
  00404	89 45 98	 mov	 DWORD PTR tv347[ebp], eax
$LN45@RenderAlph:
  00407	8b 45 98	 mov	 eax, DWORD PTR tv347[ebp]
  0040a	89 45 94	 mov	 DWORD PTR tv348[ebp], eax
$LN47@RenderAlph:
  0040d	8b 45 94	 mov	 eax, DWORD PTR tv348[ebp]
  00410	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _dwR$18[ebp], eax

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00416	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+4]
  0041b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00422	72 09		 jb	 SHORT $LN50@RenderAlph
  00424	c7 45 8c ff 00
	00 00		 mov	 DWORD PTR tv359[ebp], 255 ; 000000ffH
  0042b	eb 32		 jmp	 SHORT $LN51@RenderAlph
$LN50@RenderAlph:
  0042d	0f 57 c0	 xorps	 xmm0, xmm0
  00430	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+4]
  00434	72 06		 jb	 SHORT $LN48@RenderAlph
  00436	83 65 90 00	 and	 DWORD PTR tv358[ebp], 0
  0043a	eb 1d		 jmp	 SHORT $LN49@RenderAlph
$LN48@RenderAlph:
  0043c	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+4]
  00441	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00449	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00451	e8 00 00 00 00	 call	 __ftoui3
  00456	89 45 90	 mov	 DWORD PTR tv358[ebp], eax
$LN49@RenderAlph:
  00459	8b 45 90	 mov	 eax, DWORD PTR tv358[ebp]
  0045c	89 45 8c	 mov	 DWORD PTR tv359[ebp], eax
$LN51@RenderAlph:
  0045f	8b 45 8c	 mov	 eax, DWORD PTR tv359[ebp]
  00462	89 85 fc fe ff
	ff		 mov	 DWORD PTR _dwG$19[ebp], eax

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00468	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+8]
  0046d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00474	72 09		 jb	 SHORT $LN54@RenderAlph
  00476	c7 45 84 ff 00
	00 00		 mov	 DWORD PTR tv370[ebp], 255 ; 000000ffH
  0047d	eb 32		 jmp	 SHORT $LN55@RenderAlph
$LN54@RenderAlph:
  0047f	0f 57 c0	 xorps	 xmm0, xmm0
  00482	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+8]
  00486	72 06		 jb	 SHORT $LN52@RenderAlph
  00488	83 65 88 00	 and	 DWORD PTR tv369[ebp], 0
  0048c	eb 1d		 jmp	 SHORT $LN53@RenderAlph
$LN52@RenderAlph:
  0048e	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+8]
  00493	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0049b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  004a3	e8 00 00 00 00	 call	 __ftoui3
  004a8	89 45 88	 mov	 DWORD PTR tv369[ebp], eax
$LN53@RenderAlph:
  004ab	8b 45 88	 mov	 eax, DWORD PTR tv369[ebp]
  004ae	89 45 84	 mov	 DWORD PTR tv370[ebp], eax
$LN55@RenderAlph:
  004b1	8b 45 84	 mov	 eax, DWORD PTR tv370[ebp]
  004b4	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _dwB$16[ebp], eax

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  004ba	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+12]
  004bf	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  004c6	72 0c		 jb	 SHORT $LN58@RenderAlph
  004c8	c7 85 7c ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv381[ebp], 255 ; 000000ffH
  004d2	eb 35		 jmp	 SHORT $LN59@RenderAlph
$LN58@RenderAlph:
  004d4	0f 57 c0	 xorps	 xmm0, xmm0
  004d7	0f 2f 45 bc	 comiss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+12]
  004db	72 06		 jb	 SHORT $LN56@RenderAlph
  004dd	83 65 80 00	 and	 DWORD PTR tv380[ebp], 0
  004e1	eb 1d		 jmp	 SHORT $LN57@RenderAlph
$LN56@RenderAlph:
  004e3	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+12]
  004e8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  004f0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  004f8	e8 00 00 00 00	 call	 __ftoui3
  004fd	89 45 80	 mov	 DWORD PTR tv380[ebp], eax
$LN57@RenderAlph:
  00500	8b 45 80	 mov	 eax, DWORD PTR tv380[ebp]
  00503	89 85 7c ff ff
	ff		 mov	 DWORD PTR tv381[ebp], eax
$LN59@RenderAlph:
  00509	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR tv381[ebp]
  0050f	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _dwA$17[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 473  : 	vertices[1].diffuse = DiffuseColor2;

  00515	6a 18		 push	 24			; 00000018H
  00517	58		 pop	 eax
  00518	c1 e0 00	 shl	 eax, 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0051b	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _dwG$19[ebp]
  00521	c1 e1 08	 shl	 ecx, 8
  00524	8b 95 f8 fe ff
	ff		 mov	 edx, DWORD PTR _dwR$18[ebp]
  0052a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0052d	8b b5 f4 fe ff
	ff		 mov	 esi, DWORD PTR _dwA$17[ebp]
  00533	c1 e6 18	 shl	 esi, 24			; 00000018H
  00536	0b f2		 or	 esi, edx
  00538	0b f1		 or	 esi, ecx
  0053a	0b b5 f0 fe ff
	ff		 or	 esi, DWORD PTR _dwB$16[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 473  : 	vertices[1].diffuse = DiffuseColor2;

  00540	89 74 05 0c	 mov	 DWORD PTR _vertices$[ebp+eax+12], esi
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 41   :     x = fx;

  00544	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _eu$[ebp]
  0054c	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR $T1[ebp], xmm0

; 42   :     y = fy;

  00554	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _sv$[ebp]
  0055c	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR $T1[ebp+4], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 474  : 	vertices[1].texCoord = TTextureCoordinate(eu, sv);

  00564	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  0056a	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp+4]
  00570	6a 18		 push	 24			; 00000018H
  00572	5a		 pop	 edx
  00573	c1 e2 00	 shl	 edx, 0
  00576	89 44 15 10	 mov	 DWORD PTR _vertices$[ebp+edx+16], eax
  0057a	89 4c 15 14	 mov	 DWORD PTR _vertices$[ebp+edx+20], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  0057e	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00586	f3 0f 11 45 dc	 movss	 DWORD PTR $T22[ebp], xmm0

; 181  :     y = fy;

  0058b	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00593	f3 0f 11 45 e0	 movss	 DWORD PTR $T22[ebp+4], xmm0

; 182  :     z = fz;

  00598	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _z$[ebp]
  0059d	f3 0f 11 45 e4	 movss	 DWORD PTR $T22[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 476  : 	vertices[2].position = TPosition(sx, ey, z);

  005a2	6a 18		 push	 24			; 00000018H
  005a4	58		 pop	 eax
  005a5	d1 e0		 shl	 eax, 1
  005a7	8d 7c 05 00	 lea	 edi, DWORD PTR _vertices$[ebp+eax]
  005ab	8d 75 dc	 lea	 esi, DWORD PTR $T22[ebp]
  005ae	a5		 movsd
  005af	a5		 movsd
  005b0	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  005b1	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp]
  005b6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  005bd	72 0c		 jb	 SHORT $LN68@RenderAlph
  005bf	c7 85 6c ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv411[ebp], 255 ; 000000ffH
  005c9	eb 3e		 jmp	 SHORT $LN69@RenderAlph
$LN68@RenderAlph:
  005cb	0f 57 c0	 xorps	 xmm0, xmm0
  005ce	0f 2f 45 c0	 comiss	 xmm0, DWORD PTR _DiffuseColor1$[ebp]
  005d2	72 09		 jb	 SHORT $LN66@RenderAlph
  005d4	83 a5 70 ff ff
	ff 00		 and	 DWORD PTR tv410[ebp], 0
  005db	eb 20		 jmp	 SHORT $LN67@RenderAlph
$LN66@RenderAlph:
  005dd	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp]
  005e2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  005ea	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  005f2	e8 00 00 00 00	 call	 __ftoui3
  005f7	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv410[ebp], eax
$LN67@RenderAlph:
  005fd	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv410[ebp]
  00603	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv411[ebp], eax
$LN69@RenderAlph:
  00609	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv411[ebp]
  0060f	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _dwR$7[ebp], eax

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00615	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+4]
  0061a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00621	72 0c		 jb	 SHORT $LN72@RenderAlph
  00623	c7 85 64 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv422[ebp], 255 ; 000000ffH
  0062d	eb 3e		 jmp	 SHORT $LN73@RenderAlph
$LN72@RenderAlph:
  0062f	0f 57 c0	 xorps	 xmm0, xmm0
  00632	0f 2f 45 c4	 comiss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+4]
  00636	72 09		 jb	 SHORT $LN70@RenderAlph
  00638	83 a5 68 ff ff
	ff 00		 and	 DWORD PTR tv421[ebp], 0
  0063f	eb 20		 jmp	 SHORT $LN71@RenderAlph
$LN70@RenderAlph:
  00641	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+4]
  00646	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0064e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00656	e8 00 00 00 00	 call	 __ftoui3
  0065b	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv421[ebp], eax
$LN71@RenderAlph:
  00661	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR tv421[ebp]
  00667	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv422[ebp], eax
$LN73@RenderAlph:
  0066d	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR tv422[ebp]
  00673	89 85 ec fe ff
	ff		 mov	 DWORD PTR _dwG$15[ebp], eax

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00679	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+8]
  0067e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00685	72 0c		 jb	 SHORT $LN76@RenderAlph
  00687	c7 85 5c ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv433[ebp], 255 ; 000000ffH
  00691	eb 3e		 jmp	 SHORT $LN77@RenderAlph
$LN76@RenderAlph:
  00693	0f 57 c0	 xorps	 xmm0, xmm0
  00696	0f 2f 45 c8	 comiss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+8]
  0069a	72 09		 jb	 SHORT $LN74@RenderAlph
  0069c	83 a5 60 ff ff
	ff 00		 and	 DWORD PTR tv432[ebp], 0
  006a3	eb 20		 jmp	 SHORT $LN75@RenderAlph
$LN74@RenderAlph:
  006a5	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+8]
  006aa	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  006b2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  006ba	e8 00 00 00 00	 call	 __ftoui3
  006bf	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv432[ebp], eax
$LN75@RenderAlph:
  006c5	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv432[ebp]
  006cb	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv433[ebp], eax
$LN77@RenderAlph:
  006d1	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR tv433[ebp]
  006d7	89 85 e0 fe ff
	ff		 mov	 DWORD PTR _dwB$13[ebp], eax

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  006dd	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+12]
  006e2	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  006e9	72 0c		 jb	 SHORT $LN80@RenderAlph
  006eb	c7 85 54 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv444[ebp], 255 ; 000000ffH
  006f5	eb 3e		 jmp	 SHORT $LN81@RenderAlph
$LN80@RenderAlph:
  006f7	0f 57 c0	 xorps	 xmm0, xmm0
  006fa	0f 2f 45 cc	 comiss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+12]
  006fe	72 09		 jb	 SHORT $LN78@RenderAlph
  00700	83 a5 58 ff ff
	ff 00		 and	 DWORD PTR tv443[ebp], 0
  00707	eb 20		 jmp	 SHORT $LN79@RenderAlph
$LN78@RenderAlph:
  00709	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _DiffuseColor1$[ebp+12]
  0070e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00716	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0071e	e8 00 00 00 00	 call	 __ftoui3
  00723	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv443[ebp], eax
$LN79@RenderAlph:
  00729	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR tv443[ebp]
  0072f	89 85 54 ff ff
	ff		 mov	 DWORD PTR tv444[ebp], eax
$LN81@RenderAlph:
  00735	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv444[ebp]
  0073b	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _dwA$14[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 477  : 	vertices[2].diffuse = DiffuseColor1;

  00741	6a 18		 push	 24			; 00000018H
  00743	58		 pop	 eax
  00744	d1 e0		 shl	 eax, 1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00746	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _dwG$15[ebp]
  0074c	c1 e1 08	 shl	 ecx, 8
  0074f	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _dwR$7[ebp]
  00755	c1 e2 10	 shl	 edx, 16			; 00000010H
  00758	8b b5 e4 fe ff
	ff		 mov	 esi, DWORD PTR _dwA$14[ebp]
  0075e	c1 e6 18	 shl	 esi, 24			; 00000018H
  00761	0b f2		 or	 esi, edx
  00763	0b f1		 or	 esi, ecx
  00765	0b b5 e0 fe ff
	ff		 or	 esi, DWORD PTR _dwB$13[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 477  : 	vertices[2].diffuse = DiffuseColor1;

  0076b	89 74 05 0c	 mov	 DWORD PTR _vertices$[ebp+eax+12], esi
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 41   :     x = fx;

  0076f	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _su$[ebp]
  00777	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR $T6[ebp], xmm0

; 42   :     y = fy;

  0077f	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _ev$[ebp]
  00787	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR $T6[ebp+4], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 478  : 	vertices[2].texCoord = TTextureCoordinate(su, ev);

  0078f	8b 85 bc fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00795	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp+4]
  0079b	6a 18		 push	 24			; 00000018H
  0079d	5a		 pop	 edx
  0079e	d1 e2		 shl	 edx, 1
  007a0	89 44 15 10	 mov	 DWORD PTR _vertices$[ebp+edx+16], eax
  007a4	89 4c 15 14	 mov	 DWORD PTR _vertices$[ebp+edx+20], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  007a8	f3 0f 10 85 4c
	ff ff ff	 movss	 xmm0, DWORD PTR _ex$[ebp]
  007b0	f3 0f 11 45 d0	 movss	 DWORD PTR $T21[ebp], xmm0

; 181  :     y = fy;

  007b5	f3 0f 10 85 48
	ff ff ff	 movss	 xmm0, DWORD PTR _ey$[ebp]
  007bd	f3 0f 11 45 d4	 movss	 DWORD PTR $T21[ebp+4], xmm0

; 182  :     z = fz;

  007c2	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR _z$[ebp]
  007c7	f3 0f 11 45 d8	 movss	 DWORD PTR $T21[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 480  : 	vertices[3].position = TPosition(ex, ey, z);

  007cc	6a 18		 push	 24			; 00000018H
  007ce	58		 pop	 eax
  007cf	6b c0 03	 imul	 eax, eax, 3
  007d2	8d 7c 05 00	 lea	 edi, DWORD PTR _vertices$[ebp+eax]
  007d6	8d 75 d0	 lea	 esi, DWORD PTR $T21[ebp]
  007d9	a5		 movsd
  007da	a5		 movsd
  007db	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 931  :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  007dc	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp]
  007e1	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  007e8	72 0c		 jb	 SHORT $LN90@RenderAlph
  007ea	c7 85 40 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv474[ebp], 255 ; 000000ffH
  007f4	eb 3e		 jmp	 SHORT $LN91@RenderAlph
$LN90@RenderAlph:
  007f6	0f 57 c0	 xorps	 xmm0, xmm0
  007f9	0f 2f 45 b0	 comiss	 xmm0, DWORD PTR _DiffuseColor2$[ebp]
  007fd	72 09		 jb	 SHORT $LN88@RenderAlph
  007ff	83 a5 44 ff ff
	ff 00		 and	 DWORD PTR tv473[ebp], 0
  00806	eb 20		 jmp	 SHORT $LN89@RenderAlph
$LN88@RenderAlph:
  00808	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp]
  0080d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00815	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0081d	e8 00 00 00 00	 call	 __ftoui3
  00822	89 85 44 ff ff
	ff		 mov	 DWORD PTR tv473[ebp], eax
$LN89@RenderAlph:
  00828	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR tv473[ebp]
  0082e	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv474[ebp], eax
$LN91@RenderAlph:
  00834	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR tv474[ebp]
  0083a	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _dwR$11[ebp], eax

; 932  :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00840	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+4]
  00845	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0084c	72 0c		 jb	 SHORT $LN94@RenderAlph
  0084e	c7 85 38 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv485[ebp], 255 ; 000000ffH
  00858	eb 3e		 jmp	 SHORT $LN95@RenderAlph
$LN94@RenderAlph:
  0085a	0f 57 c0	 xorps	 xmm0, xmm0
  0085d	0f 2f 45 b4	 comiss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+4]
  00861	72 09		 jb	 SHORT $LN92@RenderAlph
  00863	83 a5 3c ff ff
	ff 00		 and	 DWORD PTR tv484[ebp], 0
  0086a	eb 20		 jmp	 SHORT $LN93@RenderAlph
$LN92@RenderAlph:
  0086c	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+4]
  00871	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00879	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00881	e8 00 00 00 00	 call	 __ftoui3
  00886	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv484[ebp], eax
$LN93@RenderAlph:
  0088c	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR tv484[ebp]
  00892	89 85 38 ff ff
	ff		 mov	 DWORD PTR tv485[ebp], eax
$LN95@RenderAlph:
  00898	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv485[ebp]
  0089e	89 85 dc fe ff
	ff		 mov	 DWORD PTR _dwG$12[ebp], eax

; 933  :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  008a4	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+8]
  008a9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  008b0	72 0c		 jb	 SHORT $LN98@RenderAlph
  008b2	c7 85 30 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv496[ebp], 255 ; 000000ffH
  008bc	eb 3e		 jmp	 SHORT $LN99@RenderAlph
$LN98@RenderAlph:
  008be	0f 57 c0	 xorps	 xmm0, xmm0
  008c1	0f 2f 45 b8	 comiss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+8]
  008c5	72 09		 jb	 SHORT $LN96@RenderAlph
  008c7	83 a5 34 ff ff
	ff 00		 and	 DWORD PTR tv495[ebp], 0
  008ce	eb 20		 jmp	 SHORT $LN97@RenderAlph
$LN96@RenderAlph:
  008d0	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+8]
  008d5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  008dd	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  008e5	e8 00 00 00 00	 call	 __ftoui3
  008ea	89 85 34 ff ff
	ff		 mov	 DWORD PTR tv495[ebp], eax
$LN97@RenderAlph:
  008f0	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR tv495[ebp]
  008f6	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv496[ebp], eax
$LN99@RenderAlph:
  008fc	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv496[ebp]
  00902	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _dwB$9[ebp], eax

; 934  :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00908	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+12]
  0090d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00914	72 0c		 jb	 SHORT $LN102@RenderAlph
  00916	c7 85 28 ff ff
	ff ff 00 00 00	 mov	 DWORD PTR tv507[ebp], 255 ; 000000ffH
  00920	eb 3e		 jmp	 SHORT $LN103@RenderAlph
$LN102@RenderAlph:
  00922	0f 57 c0	 xorps	 xmm0, xmm0
  00925	0f 2f 45 bc	 comiss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+12]
  00929	72 09		 jb	 SHORT $LN100@RenderAlph
  0092b	83 a5 2c ff ff
	ff 00		 and	 DWORD PTR tv506[ebp], 0
  00932	eb 20		 jmp	 SHORT $LN101@RenderAlph
$LN100@RenderAlph:
  00934	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _DiffuseColor2$[ebp+12]
  00939	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00941	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00949	e8 00 00 00 00	 call	 __ftoui3
  0094e	89 85 2c ff ff
	ff		 mov	 DWORD PTR tv506[ebp], eax
$LN101@RenderAlph:
  00954	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv506[ebp]
  0095a	89 85 28 ff ff
	ff		 mov	 DWORD PTR tv507[ebp], eax
$LN103@RenderAlph:
  00960	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR tv507[ebp]
  00966	89 85 d4 fe ff
	ff		 mov	 DWORD PTR _dwA$10[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 481  : 	vertices[3].diffuse = DiffuseColor2;

  0096c	6a 18		 push	 24			; 00000018H
  0096e	58		 pop	 eax
  0096f	6b c0 03	 imul	 eax, eax, 3
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 936  :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00972	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _dwG$12[ebp]
  00978	c1 e1 08	 shl	 ecx, 8
  0097b	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _dwR$11[ebp]
  00981	c1 e2 10	 shl	 edx, 16			; 00000010H
  00984	8b b5 d4 fe ff
	ff		 mov	 esi, DWORD PTR _dwA$10[ebp]
  0098a	c1 e6 18	 shl	 esi, 24			; 00000018H
  0098d	0b f2		 or	 esi, edx
  0098f	0b f1		 or	 esi, ecx
  00991	0b b5 d0 fe ff
	ff		 or	 esi, DWORD PTR _dwB$9[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 481  : 	vertices[3].diffuse = DiffuseColor2;

  00997	89 74 05 0c	 mov	 DWORD PTR _vertices$[ebp+eax+12], esi
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 41   :     x = fx;

  0099b	f3 0f 10 85 24
	ff ff ff	 movss	 xmm0, DWORD PTR _eu$[ebp]
  009a3	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR $T5[ebp], xmm0

; 42   :     y = fy;

  009ab	f3 0f 10 85 20
	ff ff ff	 movss	 xmm0, DWORD PTR _ev$[ebp]
  009b3	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR $T5[ebp+4], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 482  : 	vertices[3].texCoord = TTextureCoordinate(eu, ev);

  009bb	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  009c1	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp+4]
  009c7	6a 18		 push	 24			; 00000018H
  009c9	5a		 pop	 edx
  009ca	6b d2 03	 imul	 edx, edx, 3
  009cd	89 44 15 10	 mov	 DWORD PTR _vertices$[ebp+edx+16], eax
  009d1	89 4c 15 14	 mov	 DWORD PTR _vertices$[ebp+edx+20], ecx

; 483  : 
; 484  : 	STATEMANAGER.SetVertexShader(ms_pntVS);

  009d5	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_pntVS@CGraphicBase@@1KA ; CGraphicBase::ms_pntVS
  009db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  009e1	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXK@Z ; CStateManager::SetVertexShader

; 485  : 	// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 486  : 	CGraphicBase::SetDefaultIndexBuffer(DEFAULT_IB_FILL_RECT);

  009e6	6a 05		 push	 5
  009e8	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer
  009ed	59		 pop	 ecx

; 487  : 	if (CGraphicBase::SetPDTStream(vertices, 4))

  009ee	6a 04		 push	 4
  009f0	8d 45 00	 lea	 eax, DWORD PTR _vertices$[ebp]
  009f3	50		 push	 eax
  009f4	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  009f9	59		 pop	 ecx
  009fa	59		 pop	 ecx
  009fb	0f b6 c0	 movzx	 eax, al
  009fe	85 c0		 test	 eax, eax
  00a00	74 15		 je	 SHORT $LN2@RenderAlph

; 488  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  00a02	6a 02		 push	 2
  00a04	6a 00		 push	 0
  00a06	6a 04		 push	 4
  00a08	6a 00		 push	 0
  00a0a	6a 04		 push	 4
  00a0c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00a12	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIII@Z ; CStateManager::DrawIndexedPrimitive
$LN2@RenderAlph:

; 489  : }

  00a17	5f		 pop	 edi
  00a18	5e		 pop	 esi
  00a19	8b 4d 60	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a1c	33 cd		 xor	 ecx, ebp
  00a1e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a23	83 c5 64	 add	 ebp, 100		; 00000064H
  00a26	c9		 leave
  00a27	c2 14 00	 ret	 20			; 00000014H
?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z ENDP ; CPythonGraphic::RenderAlphaImage
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_c_pTexture$ = -12					; size = 4
_width$ = -8						; size = 4
_height$ = -4						; size = 4
_pImageInstance$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z PROC ; CPythonGraphic::RenderImage, COMDAT
; _this$ = ecx

; 420  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 421  : 	assert(pImageInstance != NULL);
; 422  : 
; 423  : 	//SetColorRenderState();
; 424  : 	const CGraphicTexture * c_pTexture = pImageInstance->GetTexturePointer();

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _pImageInstance$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  00011	89 45 f4	 mov	 DWORD PTR _c_pTexture$[ebp], eax

; 425  : 
; 426  : 	float width = (float) pImageInstance->GetWidth();

  00014	8b 4d 08	 mov	 ecx, DWORD PTR _pImageInstance$[ebp]
  00017	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetWidth
  0001c	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00020	f3 0f 11 45 f8	 movss	 DWORD PTR _width$[ebp], xmm0

; 427  : 	float height = (float) pImageInstance->GetHeight();

  00025	8b 4d 08	 mov	 ecx, DWORD PTR _pImageInstance$[ebp]
  00028	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetHeight
  0002d	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00031	f3 0f 11 45 fc	 movss	 DWORD PTR _height$[ebp], xmm0

; 428  : 
; 429  : 	c_pTexture->SetTextureStage(0);

  00036	6a 00		 push	 0
  00038	8b 4d f4	 mov	 ecx, DWORD PTR _c_pTexture$[ebp]
  0003b	e8 00 00 00 00	 call	 ?SetTextureStage@CGraphicTexture@@QBEXH@Z ; CGraphicTexture::SetTextureStage

; 430  : 
; 431  : 	RenderTextureBox(x,

  00040	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _height$[ebp]
  00045	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0004d	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _height$[ebp]
  00052	51		 push	 ecx
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _width$[ebp]
  0005d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00065	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _width$[ebp]
  0006a	51		 push	 ecx
  0006b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00070	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00078	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _height$[ebp]
  0007d	51		 push	 ecx
  0007e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00083	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0008b	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _width$[ebp]
  00090	51		 push	 ecx
  00091	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00096	51		 push	 ecx
  00097	0f 57 c0	 xorps	 xmm0, xmm0
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y$[ebp]
  000a4	f3 0f 58 45 fc	 addss	 xmm0, DWORD PTR _height$[ebp]
  000a9	51		 push	 ecx
  000aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000af	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x$[ebp]
  000b4	f3 0f 58 45 f8	 addss	 xmm0, DWORD PTR _width$[ebp]
  000b9	51		 push	 ecx
  000ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bf	51		 push	 ecx
  000c0	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _y$[ebp]
  000c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ca	51		 push	 ecx
  000cb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x$[ebp]
  000d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d5	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	e8 00 00 00 00	 call	 ?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z ; CScreen::RenderTextureBox

; 432  : 					 y,
; 433  : 					 x + width,
; 434  : 					 y + height,
; 435  : 					 0.0f,
; 436  : 					 0.5f / width, 
; 437  : 					 0.5f / height, 
; 438  : 					 (width + 0.5f) / width, 
; 439  : 					 (height + 0.5f) / height);
; 440  : }

  000dd	c9		 leave
  000de	c2 0c 00	 ret	 12			; 0000000cH
?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z ENDP ; CPythonGraphic::RenderImage
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z PROC		; CPythonGraphic::RenderUpButton, COMDAT
; _this$ = ecx

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 595  : 	RenderBox2d(sx, sy, ex, ey);

  00007	51		 push	 ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00010	51		 push	 ecx
  00011	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001b	51		 push	 ecx
  0001c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00021	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00026	51		 push	 ecx
  00027	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	51		 push	 ecx
  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?RenderBox2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBox2d

; 596  : 
; 597  : 	SetDiffuseColor(m_lightColor);

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	ff 70 08	 push	 DWORD PTR [eax+8]
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 598  : 	RenderLine2d(sx, sy, ex, sy);

  00052	51		 push	 ecx
  00053	0f 57 c0	 xorps	 xmm0, xmm0
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	51		 push	 ecx
  0005c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00061	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00066	51		 push	 ecx
  00067	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007c	51		 push	 ecx
  0007d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00082	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 599  : 	RenderLine2d(sx, sy, sx, ey);

  0008f	51		 push	 ecx
  00090	0f 57 c0	 xorps	 xmm0, xmm0
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	51		 push	 ecx
  00099	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  0009e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a3	51		 push	 ecx
  000a4	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	51		 push	 ecx
  000af	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  000b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b9	51		 push	 ecx
  000ba	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 600  : 
; 601  : 	SetDiffuseColor(m_darkColor);

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	ff 70 0c	 push	 DWORD PTR [eax+12]
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 602  : 	RenderLine2d(sx, ey, ex, ey);

  000da	51		 push	 ecx
  000db	0f 57 c0	 xorps	 xmm0, xmm0
  000de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e3	51		 push	 ecx
  000e4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  000e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ee	51		 push	 ecx
  000ef	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  000f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f9	51		 push	 ecx
  000fa	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	51		 push	 ecx
  00105	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0010a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 603  : 	RenderLine2d(ex, sy, ex, ey);

  00117	51		 push	 ecx
  00118	0f 57 c0	 xorps	 xmm0, xmm0
  0011b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00120	51		 push	 ecx
  00121	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	51		 push	 ecx
  0012c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00131	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00136	51		 push	 ecx
  00137	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0013c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00141	51		 push	 ecx
  00142	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 604  : }

  00154	c9		 leave
  00155	c2 10 00	 ret	 16			; 00000010H
?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z ENDP		; CPythonGraphic::RenderUpButton
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z PROC	; CPythonGraphic::RenderDownButton, COMDAT
; _this$ = ecx

; 581  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 582  : 	RenderBox2d(sx, sy, ex, ey);

  00007	51		 push	 ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00010	51		 push	 ecx
  00011	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001b	51		 push	 ecx
  0001c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00021	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00026	51		 push	 ecx
  00027	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	51		 push	 ecx
  00032	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?RenderBox2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBox2d

; 583  : 
; 584  : 	SetDiffuseColor(m_darkColor);

  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	ff 70 0c	 push	 DWORD PTR [eax+12]
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 585  : 	RenderLine2d(sx, sy, ex, sy);

  00052	51		 push	 ecx
  00053	0f 57 c0	 xorps	 xmm0, xmm0
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	51		 push	 ecx
  0005c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00061	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00066	51		 push	 ecx
  00067	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	51		 push	 ecx
  00072	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00077	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007c	51		 push	 ecx
  0007d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00082	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 586  : 	RenderLine2d(sx, sy, sx, ey);

  0008f	51		 push	 ecx
  00090	0f 57 c0	 xorps	 xmm0, xmm0
  00093	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00098	51		 push	 ecx
  00099	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  0009e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a3	51		 push	 ecx
  000a4	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	51		 push	 ecx
  000af	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  000b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b9	51		 push	 ecx
  000ba	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c7	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 587  : 
; 588  : 	SetDiffuseColor(m_lightColor);

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cf	ff 70 08	 push	 DWORD PTR [eax+8]
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d5	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 589  : 	RenderLine2d(sx, ey, ex, ey);

  000da	51		 push	 ecx
  000db	0f 57 c0	 xorps	 xmm0, xmm0
  000de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e3	51		 push	 ecx
  000e4	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  000e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ee	51		 push	 ecx
  000ef	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  000f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f9	51		 push	 ecx
  000fa	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	51		 push	 ecx
  00105	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0010a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 590  : 	RenderLine2d(ex, sy, ex, ey);

  00117	51		 push	 ecx
  00118	0f 57 c0	 xorps	 xmm0, xmm0
  0011b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00120	51		 push	 ecx
  00121	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012b	51		 push	 ecx
  0012c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00131	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00136	51		 push	 ecx
  00137	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0013c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00141	51		 push	 ecx
  00142	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 591  : }

  00154	c9		 leave
  00155	c2 10 00	 ret	 16			; 00000010H
?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z ENDP	; CPythonGraphic::RenderDownButton
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?GenerateColor@CPythonGraphic@@QAEJMMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?GenerateColor@CPythonGraphic@@QAEJMMMM@Z PROC		; CPythonGraphic::GenerateColor, COMDAT
; _this$ = ecx

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 577  : 	return GetColor(r, g, b, a);

  00007	51		 push	 ecx
  00008	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  0000d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00012	51		 push	 ecx
  00013	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  00018	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001d	51		 push	 ecx
  0001e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00023	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00028	51		 push	 ecx
  00029	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor

; 578  : }

  0003b	c9		 leave
  0003c	c2 10 00	 ret	 16			; 00000010H
?GenerateColor@CPythonGraphic@@QAEJMMMM@Z ENDP		; CPythonGraphic::GenerateColor
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RestoreViewport@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?RestoreViewport@CPythonGraphic@@QAEXXZ PROC		; CPythonGraphic::RestoreViewport, COMDAT
; _this$ = ecx

; 120  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 121  : 	ms_lpd3dDevice->SetViewport(&m_backupViewport);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	05 84 00 00 00	 add	 eax, 132		; 00000084H
  0000f	50		 push	 eax
  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00015	8b 00		 mov	 eax, DWORD PTR [eax]
  00017	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0001d	ff 90 a0 00 00
	00		 call	 DWORD PTR [eax+160]

; 122  : }

  00023	c9		 leave
  00024	c3		 ret	 0
?RestoreViewport@CPythonGraphic@@QAEXXZ ENDP		; CPythonGraphic::RestoreViewport
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetViewport@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_ViewPort$ = -28					; size = 24
__$ArrayPad$ = -4					; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fWidth$ = 16						; size = 4
_fHeight$ = 20						; size = 4
?SetViewport@CPythonGraphic@@QAEXMMMM@Z PROC		; CPythonGraphic::SetViewport, COMDAT
; _this$ = ecx

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 99   : 	ms_lpd3dDevice->GetViewport(&m_backupViewport);

  00013	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00016	05 84 00 00 00	 add	 eax, 132		; 00000084H
  0001b	50		 push	 eax
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00029	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]

; 100  : 
; 101  : 	D3DVIEWPORT8 ViewPort;
; 102  : 	ViewPort.X = fx;

  0002f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00034	e8 00 00 00 00	 call	 __ftoui3
  00039	89 45 e4	 mov	 DWORD PTR _ViewPort$[ebp], eax

; 103  : 	ViewPort.Y = fy;

  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00041	e8 00 00 00 00	 call	 __ftoui3
  00046	89 45 e8	 mov	 DWORD PTR _ViewPort$[ebp+4], eax

; 104  : 	ViewPort.Width = fWidth;

  00049	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fWidth$[ebp]
  0004e	e8 00 00 00 00	 call	 __ftoui3
  00053	89 45 ec	 mov	 DWORD PTR _ViewPort$[ebp+8], eax

; 105  : 	ViewPort.Height = fHeight;

  00056	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fHeight$[ebp]
  0005b	e8 00 00 00 00	 call	 __ftoui3
  00060	89 45 f0	 mov	 DWORD PTR _ViewPort$[ebp+12], eax

; 106  : 	ViewPort.MinZ = 0.0f;

  00063	0f 57 c0	 xorps	 xmm0, xmm0
  00066	f3 0f 11 45 f4	 movss	 DWORD PTR _ViewPort$[ebp+16], xmm0

; 107  : 	ViewPort.MaxZ = 1.0f;

  0006b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00073	f3 0f 11 45 f8	 movss	 DWORD PTR _ViewPort$[ebp+20], xmm0

; 108  : 	if (FAILED(

  00078	8d 45 e4	 lea	 eax, DWORD PTR _ViewPort$[ebp]
  0007b	50		 push	 eax
  0007c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00081	8b 00		 mov	 eax, DWORD PTR [eax]
  00083	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00089	ff 90 a0 00 00
	00		 call	 DWORD PTR [eax+160]
  0008f	85 c0		 test	 eax, eax
  00091	7d 19		 jge	 SHORT $LN2@SetViewpor

; 109  : 		ms_lpd3dDevice->SetViewport(&ViewPort)
; 110  : 	))
; 111  : 	{
; 112  : 		Tracef("CPythonGraphic::SetViewport(%d, %d, %d, %d) - Error", 

  00093	ff 75 f0	 push	 DWORD PTR _ViewPort$[ebp+12]
  00096	ff 75 ec	 push	 DWORD PTR _ViewPort$[ebp+8]
  00099	ff 75 e8	 push	 DWORD PTR _ViewPort$[ebp+4]
  0009c	ff 75 e4	 push	 DWORD PTR _ViewPort$[ebp]
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0@
  000a4	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  000a9	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@SetViewpor:

; 113  : 			ViewPort.X, ViewPort.Y,
; 114  : 			ViewPort.Width, ViewPort.Height
; 115  : 		);
; 116  : 	}
; 117  : }

  000ac	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000af	33 cd		 xor	 ecx, ebp
  000b1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b6	c9		 leave
  000b7	c2 10 00	 ret	 16			; 00000010H
?SetViewport@CPythonGraphic@@QAEXMMMM@Z ENDP		; CPythonGraphic::SetViewport
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetOmniLight@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
_this$ = -144						; size = 4
$T1 = -140						; size = 16
$T2 = -124						; size = 16
$T3 = -108						; size = 16
_Material$ = -92					; size = 68
_Light$ = -24						; size = 104
$T4 = 80						; size = 12
$T5 = 92						; size = 12
$T6 = 104						; size = 12
__$ArrayPad$ = 116					; size = 4
?SetOmniLight@CPythonGraphic@@QAEXXZ PROC		; CPythonGraphic::SetOmniLight, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8d 6c 24 88	 lea	 ebp, DWORD PTR [esp-120]
  00005	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 74	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 920  :     r = fr;

  0001d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00025	f3 0f 11 45 94	 movss	 DWORD PTR $T3[ebp], xmm0

; 921  :     g = fg;

  0002a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  00032	f3 0f 11 45 98	 movss	 DWORD PTR $T3[ebp+4], xmm0

; 922  :     b = fb;

  00037	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0003f	f3 0f 11 45 9c	 movss	 DWORD PTR $T3[ebp+8], xmm0

; 923  :     a = fa;

  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0004c	f3 0f 11 45 a0	 movss	 DWORD PTR $T3[ebp+12], xmm0

; 969  :     return *((D3DCOLORVALUE *) &r);

  00051	8d 75 94	 lea	 esi, DWORD PTR $T3[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 61   : 	Material.Ambient = D3DXCOLOR(0.3f, 0.3f, 0.3f, 1.0f);

  00054	8d 7d b4	 lea	 edi, DWORD PTR _Material$[ebp+16]
  00057	a5		 movsd
  00058	a5		 movsd
  00059	a5		 movsd
  0005a	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 920  :     r = fr;

  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00063	f3 0f 11 45 84	 movss	 DWORD PTR $T2[ebp], xmm0

; 921  :     g = fg;

  00068	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00070	f3 0f 11 45 88	 movss	 DWORD PTR $T2[ebp+4], xmm0

; 922  :     b = fb;

  00075	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0007d	f3 0f 11 45 8c	 movss	 DWORD PTR $T2[ebp+8], xmm0

; 923  :     a = fa;

  00082	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0008a	f3 0f 11 45 90	 movss	 DWORD PTR $T2[ebp+12], xmm0

; 969  :     return *((D3DCOLORVALUE *) &r);

  0008f	8d 75 84	 lea	 esi, DWORD PTR $T2[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 62   : 	Material.Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);

  00092	8d 7d a4	 lea	 edi, DWORD PTR _Material$[ebp]
  00095	a5		 movsd
  00096	a5		 movsd
  00097	a5		 movsd
  00098	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 920  :     r = fr;

  00099	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000a1	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR $T1[ebp], xmm0

; 921  :     g = fg;

  000a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000b1	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 922  :     b = fb;

  000b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  000c1	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR $T1[ebp+8], xmm0

; 923  :     a = fa;

  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000d1	f3 0f 11 45 80	 movss	 DWORD PTR $T1[ebp+12], xmm0

; 969  :     return *((D3DCOLORVALUE *) &r);

  000d6	8d b5 74 ff ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 63   : 	Material.Emissive = D3DXCOLOR(0.1f, 0.1f, 0.1f, 1.0f);

  000dc	8d 7d d4	 lea	 edi, DWORD PTR _Material$[ebp+48]
  000df	a5		 movsd
  000e0	a5		 movsd
  000e1	a5		 movsd
  000e2	a5		 movsd

; 64   :     STATEMANAGER.SetMaterial(&Material);

  000e3	8d 45 a4	 lea	 eax, DWORD PTR _Material$[ebp]
  000e6	50		 push	 eax
  000e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ed	e8 00 00 00 00	 call	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL8@@@Z ; CStateManager::SetMaterial

; 65   : 
; 66   : 	D3DLIGHT8 Light;
; 67   : 	Light.Type = D3DLIGHT_SPOT;

  000f2	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _Light$[ebp], 2
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  000f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  00101	f3 0f 11 45 68	 movss	 DWORD PTR $T6[ebp], xmm0

; 181  :     y = fy;

  00106	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
  0010e	f3 0f 11 45 6c	 movss	 DWORD PTR $T6[ebp+4], xmm0

; 182  :     z = fz;

  00113	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43af0000
  0011b	f3 0f 11 45 70	 movss	 DWORD PTR $T6[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 68   :     Light.Position = D3DXVECTOR3(50.0f, 150.0f, 350.0f);

  00120	8d 75 68	 lea	 esi, DWORD PTR $T6[ebp]
  00123	8d 7d 1c	 lea	 edi, DWORD PTR _Light$[ebp+52]
  00126	a5		 movsd
  00127	a5		 movsd
  00128	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  00129	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be19999a
  00131	f3 0f 11 45 5c	 movss	 DWORD PTR $T5[ebp], xmm0

; 181  :     y = fy;

  00136	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@be99999a
  0013e	f3 0f 11 45 60	 movss	 DWORD PTR $T5[ebp+4], xmm0

; 182  :     z = fz;

  00143	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf666666
  0014b	f3 0f 11 45 64	 movss	 DWORD PTR $T5[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 69   :     Light.Direction = D3DXVECTOR3(-0.15f, -0.3f, -0.9f);

  00150	8d 75 5c	 lea	 esi, DWORD PTR $T5[ebp]
  00153	8d 7d 28	 lea	 edi, DWORD PTR _Light$[ebp+64]
  00156	a5		 movsd
  00157	a5		 movsd
  00158	a5		 movsd

; 70   :     Light.Theta = D3DXToRadian(30.0f);

  00159	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f060a92
  00161	f3 0f 11 45 48	 movss	 DWORD PTR _Light$[ebp+96], xmm0

; 71   :     Light.Phi = D3DXToRadian(45.0f);

  00166	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f490fdb
  0016e	f3 0f 11 45 4c	 movss	 DWORD PTR _Light$[ebp+100], xmm0

; 72   :     Light.Falloff = 1.0f;

  00173	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0017b	f3 0f 11 45 38	 movss	 DWORD PTR _Light$[ebp+80], xmm0

; 73   :     Light.Attenuation0 = 0.0f;

  00180	0f 57 c0	 xorps	 xmm0, xmm0
  00183	f3 0f 11 45 3c	 movss	 DWORD PTR _Light$[ebp+84], xmm0

; 74   :     Light.Attenuation1 = 0.005f;

  00188	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  00190	f3 0f 11 45 40	 movss	 DWORD PTR _Light$[ebp+88], xmm0

; 75   :     Light.Attenuation2 = 0.0f;

  00195	0f 57 c0	 xorps	 xmm0, xmm0
  00198	f3 0f 11 45 44	 movss	 DWORD PTR _Light$[ebp+92], xmm0

; 76   :     Light.Diffuse.r = 1.0f;

  0019d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001a5	f3 0f 11 45 ec	 movss	 DWORD PTR _Light$[ebp+4], xmm0

; 77   :     Light.Diffuse.g = 1.0f;

  001aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001b2	f3 0f 11 45 f0	 movss	 DWORD PTR _Light$[ebp+8], xmm0

; 78   :     Light.Diffuse.b = 1.0f;

  001b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001bf	f3 0f 11 45 f4	 movss	 DWORD PTR _Light$[ebp+12], xmm0

; 79   : 	Light.Diffuse.a = 1.0f;

  001c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001cc	f3 0f 11 45 f8	 movss	 DWORD PTR _Light$[ebp+16], xmm0

; 80   : 	Light.Ambient.r = 1.0f;

  001d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001d9	f3 0f 11 45 0c	 movss	 DWORD PTR _Light$[ebp+36], xmm0

; 81   : 	Light.Ambient.g = 1.0f;

  001de	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001e6	f3 0f 11 45 10	 movss	 DWORD PTR _Light$[ebp+40], xmm0

; 82   : 	Light.Ambient.b = 1.0f;

  001eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001f3	f3 0f 11 45 14	 movss	 DWORD PTR _Light$[ebp+44], xmm0

; 83   : 	Light.Ambient.a = 1.0f;

  001f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00200	f3 0f 11 45 18	 movss	 DWORD PTR _Light$[ebp+48], xmm0

; 84   :     Light.Range = 500.0f;

  00205	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43fa0000
  0020d	f3 0f 11 45 34	 movss	 DWORD PTR _Light$[ebp+76], xmm0

; 85   : 	ms_lpd3dDevice->SetLight(0, &Light);

  00212	8d 45 e8	 lea	 eax, DWORD PTR _Light$[ebp]
  00215	50		 push	 eax
  00216	6a 00		 push	 0
  00218	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0021d	8b 00		 mov	 eax, DWORD PTR [eax]
  0021f	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00225	ff 90 b0 00 00
	00		 call	 DWORD PTR [eax+176]

; 86   : 	ms_lpd3dDevice->LightEnable(0, TRUE);

  0022b	6a 01		 push	 1
  0022d	6a 00		 push	 0
  0022f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00234	8b 00		 mov	 eax, DWORD PTR [eax]
  00236	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0023c	ff 90 b8 00 00
	00		 call	 DWORD PTR [eax+184]

; 87   : 
; 88   : 	Light.Type = D3DLIGHT_POINT;

  00242	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _Light$[ebp], 1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  00249	0f 57 c0	 xorps	 xmm0, xmm0
  0024c	f3 0f 11 45 50	 movss	 DWORD PTR $T4[ebp], xmm0

; 181  :     y = fy;

  00251	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  00259	f3 0f 11 45 54	 movss	 DWORD PTR $T4[ebp+4], xmm0

; 182  :     z = fz;

  0025e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  00266	f3 0f 11 45 58	 movss	 DWORD PTR $T4[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 89   : 	Light.Position = D3DXVECTOR3(0.0f, 200.0f, 200.0f);

  0026b	8d 75 50	 lea	 esi, DWORD PTR $T4[ebp]
  0026e	8d 7d 1c	 lea	 edi, DWORD PTR _Light$[ebp+52]
  00271	a5		 movsd
  00272	a5		 movsd
  00273	a5		 movsd

; 90   : 	Light.Attenuation0 = 0.1f;

  00274	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0027c	f3 0f 11 45 3c	 movss	 DWORD PTR _Light$[ebp+84], xmm0

; 91   : 	Light.Attenuation1 = 0.01f;

  00281	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  00289	f3 0f 11 45 40	 movss	 DWORD PTR _Light$[ebp+88], xmm0

; 92   : 	Light.Attenuation2 = 0.0f;

  0028e	0f 57 c0	 xorps	 xmm0, xmm0
  00291	f3 0f 11 45 44	 movss	 DWORD PTR _Light$[ebp+92], xmm0

; 93   : 	ms_lpd3dDevice->SetLight(1, &Light);

  00296	8d 45 e8	 lea	 eax, DWORD PTR _Light$[ebp]
  00299	50		 push	 eax
  0029a	6a 01		 push	 1
  0029c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  002a1	8b 00		 mov	 eax, DWORD PTR [eax]
  002a3	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  002a9	ff 90 b0 00 00
	00		 call	 DWORD PTR [eax+176]

; 94   : 	ms_lpd3dDevice->LightEnable(1, TRUE);

  002af	6a 01		 push	 1
  002b1	6a 01		 push	 1
  002b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  002b8	8b 00		 mov	 eax, DWORD PTR [eax]
  002ba	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  002c0	ff 90 b8 00 00
	00		 call	 DWORD PTR [eax+184]

; 95   : }

  002c6	5f		 pop	 edi
  002c7	5e		 pop	 esi
  002c8	8b 4d 74	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002cb	33 cd		 xor	 ecx, ebp
  002cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d2	83 c5 78	 add	 ebp, 120		; 00000078H
  002d5	c9		 leave
  002d6	c3		 ret	 0
?SetOmniLight@CPythonGraphic@@QAEXXZ ENDP		; CPythonGraphic::SetOmniLight
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetCursorPosition@CPythonGraphic@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetCursorPosition@CPythonGraphic@@QAEXHH@Z PROC	; CPythonGraphic::SetCursorPosition, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 	CScreen::SetCursorPosition(x, y, ms_iWidth, ms_iHeight);

  00007	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iHeight@CGraphicBase@@1HA ; CGraphicBase::ms_iHeight
  0000d	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iWidth@CGraphicBase@@1HA ; CGraphicBase::ms_iWidth
  00013	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00016	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?SetCursorPosition@CScreen@@QAEXHHHH@Z ; CScreen::SetCursorPosition

; 55   : }

  00021	c9		 leave
  00022	c2 08 00	 ret	 8
?SetCursorPosition@CPythonGraphic@@QAEXHH@Z ENDP	; CPythonGraphic::SetCursorPosition
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetGameRenderState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SetGameRenderState@CPythonGraphic@@QAEXXZ PROC		; CPythonGraphic::SetGameRenderState, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 44   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MINFILTER, D3DTEXF_LINEAR);

  00007	6a 02		 push	 2
  00009	6a 11		 push	 17			; 00000011H
  0000b	6a 00		 push	 0
  0000d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00013	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 45   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR);

  00018	6a 02		 push	 2
  0001a	6a 10		 push	 16			; 00000010H
  0001c	6a 00		 push	 0
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00024	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 46   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MIPFILTER, D3DTEXF_LINEAR);

  00029	6a 02		 push	 2
  0002b	6a 12		 push	 18			; 00000012H
  0002d	6a 00		 push	 0
  0002f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00035	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 47   : 
; 48   : 	STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

  0003a	6a 00		 push	 0
  0003c	6a 1b		 push	 27			; 0000001bH
  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00044	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 49   : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, TRUE);

  00049	6a 01		 push	 1
  0004b	68 89 00 00 00	 push	 137			; 00000089H
  00050	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00056	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 50   : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
?SetGameRenderState@CPythonGraphic@@QAEXXZ ENDP		; CPythonGraphic::SetGameRenderState
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ PROC	; CPythonGraphic::SetInterfaceRenderState, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	STATEMANAGER.SetTransform(D3DTS_PROJECTION, &ms_matIdentity);

  00008	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  0000d	6a 03		 push	 3
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00015	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 25   :  	STATEMANAGER.SetTransform(D3DTS_VIEW, &ms_matIdentity);

  0001a	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  0001f	6a 02		 push	 2
  00021	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00027	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 26   : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &ms_matIdentity);

  0002c	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00031	68 00 01 00 00	 push	 256			; 00000100H
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0003c	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 27   : 
; 28   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MINFILTER, D3DTEXF_NONE);

  00041	6a 00		 push	 0
  00043	6a 11		 push	 17			; 00000011H
  00045	6a 00		 push	 0
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 29   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MAGFILTER, D3DTEXF_NONE);

  00052	6a 00		 push	 0
  00054	6a 10		 push	 16			; 00000010H
  00056	6a 00		 push	 0
  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0005e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 30   : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_MIPFILTER, D3DTEXF_NONE);

  00063	6a 00		 push	 0
  00065	6a 12		 push	 18			; 00000012H
  00067	6a 00		 push	 0
  00069	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 31   : 
; 32   : 	STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  00074	6a 01		 push	 1
  00076	6a 1b		 push	 27			; 0000001bH
  00078	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 33   : 	STATEMANAGER.SetRenderState(D3DRS_SRCBLEND,	D3DBLEND_SRCALPHA);

  00083	6a 05		 push	 5
  00085	6a 13		 push	 19			; 00000013H
  00087	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0008d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 34   : 	STATEMANAGER.SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  00092	6a 06		 push	 6
  00094	6a 14		 push	 20			; 00000014H
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0009c	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 35   : 
; 36   : 	CPythonGraphic::Instance().SetBlendOperation();

  000a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  000a7	e8 00 00 00 00	 call	 ?SetBlendOperation@CScreen@@QAEXXZ ; CScreen::SetBlendOperation
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  000b1	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 37   : 	CPythonGraphic::Instance().SetOrtho2D(ms_iWidth, ms_iHeight, GetOrthoDepth());

  000b4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	e8 00 00 00 00	 call	 ?GetOrthoDepth@CPythonGraphic@@QAEMXZ ; CPythonGraphic::GetOrthoDepth
  000bc	51		 push	 ecx
  000bd	d9 1c 24	 fstp	 DWORD PTR [esp]
  000c0	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?ms_iHeight@CGraphicBase@@1HA ; CGraphicBase::ms_iHeight
  000c8	51		 push	 ecx
  000c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ce	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?ms_iWidth@CGraphicBase@@1HA ; CGraphicBase::ms_iWidth
  000d6	51		 push	 ecx
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  000df	e8 00 00 00 00	 call	 ?SetOrtho2D@CGraphicBase@@QAEXMMM@Z ; CGraphicBase::SetOrtho2D

; 38   : 
; 39   : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  000e4	6a 00		 push	 0
  000e6	68 89 00 00 00	 push	 137			; 00000089H
  000eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f1	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 40   : }

  000f6	c9		 leave
  000f7	c3		 ret	 0
?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ ENDP	; CPythonGraphic::SetInterfaceRenderState
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?GetOrthoDepth@CPythonGraphic@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOrthoDepth@CPythonGraphic@@QAEMXZ PROC		; CPythonGraphic::GetOrthoDepth, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : 	return m_fOrthoDepth;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	d9 80 9c 00 00
	00		 fld	 DWORD PTR [eax+156]

; 20   : }

  00010	c9		 leave
  00011	c3		 ret	 0
?GetOrthoDepth@CPythonGraphic@@QAEMXZ ENDP		; CPythonGraphic::GetOrthoDepth
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?GetD3D@CPythonGraphic@@QAEPAUIDirect3D8@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetD3D@CPythonGraphic@@QAEPAUIDirect3D8@@XZ PROC	; CPythonGraphic::GetD3D, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 14   : 	return ms_lpd3d;

  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D8@@A ; CGraphicBase::ms_lpd3d

; 15   : }

  0000c	c9		 leave
  0000d	c3		 ret	 0
?GetD3D@CPythonGraphic@@QAEPAUIDirect3D8@@XZ ENDP	; CPythonGraphic::GetD3D
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\stack
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\stack
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?PopState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
_rState$ = -8						; size = 4
_this$ = -4						; size = 4
?PopState@CPythonGraphic@@QAEXXZ PROC			; CPythonGraphic::PopState, COMDAT
; _this$ = ecx

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 401  : 	if (m_stateStack.empty())

  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	83 c1 10	 add	 ecx, 16			; 00000010H
  00010	e8 00 00 00 00	 call	 ?empty@?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QBE_NXZ ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::empty
  00015	0f b6 c0	 movzx	 eax, al
  00018	85 c0		 test	 eax, eax
  0001a	74 02		 je	 SHORT $LN2@PopState

; 402  : 	{
; 403  : 		assert(!"PythonGraphic::PopState StateStack is EMPTY");
; 404  : 		return;

  0001c	eb 3e		 jmp	 SHORT $LN1@PopState
$LN2@PopState:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\stack

; 102  :         return c.back();

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 10	 add	 ecx, 16			; 00000010H
  00024	e8 00 00 00 00	 call	 ?back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEAAUSState@CPythonGraphic@@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::back
  00029	89 45 f8	 mov	 DWORD PTR _rState$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 410  : 	ms_matProj = rState.matProj;

  0002c	8b 75 f8	 mov	 esi, DWORD PTR _rState$[ebp]
  0002f	83 c6 40	 add	 esi, 64			; 00000040H
  00032	6a 10		 push	 16			; 00000010H
  00034	59		 pop	 ecx
  00035	bf 00 00 00 00	 mov	 edi, OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
  0003a	f3 a5		 rep movsd

; 411  : 	ms_matView = rState.matView;

  0003c	6a 10		 push	 16			; 00000010H
  0003e	59		 pop	 ecx
  0003f	8b 75 f8	 mov	 esi, DWORD PTR _rState$[ebp]
  00042	bf 00 00 00 00	 mov	 edi, OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  00047	f3 a5		 rep movsd

; 412  : 	
; 413  : 	UpdatePipeLineMatrix();

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?UpdatePipeLineMatrix@CGraphicBase@@IAEXXZ ; CGraphicBase::UpdatePipeLineMatrix
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\stack

; 127  :         c.pop_back();

  00051	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 10	 add	 ecx, 16			; 00000010H
  00057	e8 00 00 00 00	 call	 ?pop_back@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::pop_back
$LN1@PopState:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 417  : }

  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	c9		 leave
  0005f	c3		 ret	 0
?PopState@CPythonGraphic@@QAEXXZ ENDP			; CPythonGraphic::PopState
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\stack
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?PushState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
_curState$ = -12					; size = 128
__$ArrayPad$ = 116					; size = 4
?PushState@CPythonGraphic@@QAEXXZ PROC			; CPythonGraphic::PushState, COMDAT
; _this$ = ecx

; 388  : {

  00000	55		 push	 ebp
  00001	8d 6c 24 88	 lea	 ebp, DWORD PTR [esp-120]
  00005	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 74	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 389  : 	TState curState;
; 390  : 
; 391  : 	curState.matProj = ms_matProj;

  0001a	6a 10		 push	 16			; 00000010H
  0001c	59		 pop	 ecx
  0001d	be 00 00 00 00	 mov	 esi, OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
  00022	8d 7d 34	 lea	 edi, DWORD PTR _curState$[ebp+64]
  00025	f3 a5		 rep movsd

; 392  : 	curState.matView = ms_matView;

  00027	6a 10		 push	 16			; 00000010H
  00029	59		 pop	 ecx
  0002a	be 00 00 00 00	 mov	 esi, OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  0002f	8d 7d f4	 lea	 edi, DWORD PTR _curState$[ebp]
  00032	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\stack

; 110  :         c.push_back(_Val);

  00034	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c0 10	 add	 eax, 16			; 00000010H
  0003a	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\deque

; 1530 :         return _Mypair._Myval2;

  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax

; 1123 :         _Emplace_back_internal(_Val);

  00043	8d 45 f4	 lea	 eax, DWORD PTR _curState$[ebp]
  00046	50		 push	 eax
  00047	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	e8 00 00 00 00	 call	 ??$_Emplace_back_internal@ABUSState@CPythonGraphic@@@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXABUSState@CPythonGraphic@@@Z ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Emplace_back_internal<CPythonGraphic::SState const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 397  : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	8b 4d 74	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00054	33 cd		 xor	 ecx, ebp
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	83 c5 78	 add	 ebp, 120		; 00000078H
  0005e	c9		 leave
  0005f	c3		 ret	 0
?PushState@CPythonGraphic@@QAEXXZ ENDP			; CPythonGraphic::PushState
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?Destroy@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Destroy@CPythonGraphic@@QAEXXZ PROC			; CPythonGraphic::Destroy, COMDAT
; _this$ = ecx

; 9    : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 10   : }

  00007	c9		 leave
  00008	c3		 ret	 0
?Destroy@CPythonGraphic@@QAEXXZ ENDP			; CPythonGraphic::Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ??1CPythonGraphic@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CPythonGraphic@@UAE@XZ PROC				; CPythonGraphic::~CPythonGraphic, COMDAT
; _this$ = ecx

; 622  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CPythonGraphic@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPythonGraphic@@6BCScreen@@@
  0002f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@

; 623  : 	Tracef("Python Graphic Clear\n");

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6@
  0003e	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00043	59		 pop	 ecx

; 624  : }

  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 c1 64	 add	 ecx, 100		; 00000064H
  0004a	e8 00 00 00 00	 call	 ??1CCullingManager@@UAE@XZ ; CCullingManager::~CCullingManager
  0004f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	83 c1 10	 add	 ecx, 16			; 00000010H
  00055	e8 00 00 00 00	 call	 ??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 19   : 	{ 

  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00064	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, 0 ; CSingleton<CPythonGraphic>::ms_singleton
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 624  : }

  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	c9		 leave
  0007f	c3		 ret	 0
  00080	cc		 int	 3
  00081	cc		 int	 3
  00082	cc		 int	 3
  00083	cc		 int	 3
  00084	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CPythonGraphic@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CPythonGraphic@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CPythonGraphic@@UAE@XZ ENDP				; CPythonGraphic::~CPythonGraphic
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\stack
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp
;	COMDAT ??0CPythonGraphic@@QAE@XZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
_offset$2 = -28						; size = 4
_this$ = -24						; size = 4
tv179 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPythonGraphic@@QAE@XZ PROC				; CPythonGraphic::CPythonGraphic, COMDAT
; _this$ = ecx

; 612  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPythonGraphic@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  00030	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c0 04	 add	 eax, 4
  0003a	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 12   : 	{ 

  0003d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00040	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@

; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 

  00046	33 c0		 xor	 eax, eax
  00048	40		 inc	 eax
  00049	74 0a		 je	 SHORT $LN9@CPythonGra
  0004b	33 c0		 xor	 eax, eax
  0004d	83 c0 05	 add	 eax, 5
  00050	89 45 ec	 mov	 DWORD PTR tv179[ebp], eax
  00053	eb 04		 jmp	 SHORT $LN10@CPythonGra
$LN9@CPythonGra:
  00055	83 65 ec 00	 and	 DWORD PTR tv179[ebp], 0
$LN10@CPythonGra:
  00059	33 c0		 xor	 eax, eax
  0005b	40		 inc	 eax
  0005c	2b 45 ec	 sub	 eax, DWORD PTR tv179[ebp]
  0005f	89 45 e4	 mov	 DWORD PTR _offset$2[ebp], eax

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00062	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00065	03 45 e4	 add	 eax, DWORD PTR _offset$2[ebp]
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, eax ; CSingleton<CPythonGraphic>::ms_singleton
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 612  : {

  0006d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00071	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00074	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPythonGraphic@@6BCScreen@@@
  0007a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@
  00084	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00087	83 c0 10	 add	 eax, 16			; 00000010H
  0008a	89 45 e0	 mov	 DWORD PTR _this$[ebp], eax

; 619  : }

  0008d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\stack

; 144  :     _Container c{};

  00091	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ??0?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterPythonLib\PythonGraphic.cpp

; 612  : {

  00099	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0009d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	83 c1 64	 add	 ecx, 100		; 00000064H
  000a3	e8 00 00 00 00	 call	 ??0CCullingManager@@QAE@XZ ; CCullingManager::CCullingManager
  000a8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 613  : 	m_lightColor = GetColor(1.0f, 1.0f, 1.0f);

  000ac	51		 push	 ecx
  000ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ba	51		 push	 ecx
  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	51		 push	 ecx
  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e7	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor
  000ec	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 614  : 	m_darkColor = GetColor(0.0f, 0.0f, 0.0f);

  000f2	51		 push	 ecx
  000f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	51		 push	 ecx
  00101	0f 57 c0	 xorps	 xmm0, xmm0
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	51		 push	 ecx
  0010a	0f 57 c0	 xorps	 xmm0, xmm0
  0010d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00112	51		 push	 ecx
  00113	0f 57 c0	 xorps	 xmm0, xmm0
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0011e	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor
  00123	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00126	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 615  : 	
; 616  : 	memset(&m_backupViewport, 0, sizeof(D3DVIEWPORT8));

  00129	6a 18		 push	 24			; 00000018H
  0012b	6a 00		 push	 0
  0012d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00130	05 84 00 00 00	 add	 eax, 132		; 00000084H
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 _memset
  0013b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 617  : 
; 618  : 	m_fOrthoDepth = 1000.0f;

  0013e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00141	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@447a0000
  00149	f3 0f 11 80 9c
	00 00 00	 movss	 DWORD PTR [eax+156], xmm0

; 619  : }

  00151	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00155	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00158	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0015b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00162	59		 pop	 ecx
  00163	c9		 leave
  00164	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ ; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 10	 add	 ecx, 16			; 00000010H
  00019	e9 00 00 00 00	 jmp	 ??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 64	 add	 ecx, 100		; 00000064H
  00024	e9 00 00 00 00	 jmp	 ??1CCullingManager@@UAE@XZ ; CCullingManager::~CCullingManager
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
__ehhandler$??0CPythonGraphic@@QAE@XZ:
  0002e	90		 npad	 1
  0002f	90		 npad	 1
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPythonGraphic@@QAE@XZ
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPythonGraphic@@QAE@XZ ENDP				; CPythonGraphic::CPythonGraphic
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z PROC	; CSingleton<CPythonGraphic>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : 	{ 

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00010	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, 0 ; CSingleton<CPythonGraphic>::ms_singleton
  00017	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	74 0c		 je	 SHORT $LN2@scalar
  0001f	6a 04		 push	 4
  00021	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	59		 pop	 ecx
  0002a	59		 pop	 ecx
$LN2@scalar:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c9		 leave
  0002f	c2 04 00	 ret	 4
??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z ENDP	; CSingleton<CPythonGraphic>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ PROC		; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00010	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, 0 ; CSingleton<CPythonGraphic>::ms_singleton

; 22   : 	}

  00017	c9		 leave
  00018	c3		 ret	 0
??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ ENDP		; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	83 c0 23	 add	 eax, 35			; 00000023H
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f4	 mov	 DWORD PTR __Ptr_user$[ebp], eax

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	6a 04		 push	 4
  0001d	58		 pop	 eax
  0001e	6b c0 ff	 imul	 eax, eax, -1
  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00024	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00027	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	2b 45 f8	 sub	 eax, DWORD PTR __Ptr_container$[ebp]
  00039	89 45 fc	 mov	 DWORD PTR __Back_shift$[ebp], eax
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00040	72 08		 jb	 SHORT $LN7@Adjust_man
  00042	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00046	77 02		 ja	 SHORT $LN7@Adjust_man
  00048	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0004f	33 c0		 xor	 eax, eax
  00051	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00053	33 c0		 xor	 eax, eax
  00055	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 130  :     {

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 141  :     {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c9		 leave
  0003d	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 0b		 je	 SHORT $LN3@what
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00023	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00026	c9		 leave
  00027	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx

; 74   :     }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Result$ = -20						; size = 4
__Format$ = -16						; size = 4
__ArgList$ = -12					; size = 4
tv86 = -8						; size = 4
__Result$1 = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1969 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1970 :         int _Result;
; 1971 :         va_list _ArgList;
; 1972 :         __crt_va_start(_ArgList, _Format);

  00006	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00009	89 45 f4	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1973 :     #pragma warning(suppress:28719)    // 28719
; 1974 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  0000c	8b 45 10	 mov	 eax, DWORD PTR __Format$[ebp]
  0000f	89 45 f0	 mov	 DWORD PTR __Format$[ebp], eax

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00012	ff 75 f4	 push	 DWORD PTR __ArgList$[ebp]
  00015	6a 00		 push	 0
  00017	ff 75 f0	 push	 DWORD PTR __Format$[ebp]
  0001a	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0001d	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00020	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	83 c9 01	 or	 ecx, 1
  0002a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002d	50		 push	 eax
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ___stdio_common_vsprintf
  00034	83 c4 1c	 add	 esp, 28			; 0000001cH
  00037	89 45 fc	 mov	 DWORD PTR __Result$1[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  0003a	83 7d fc 00	 cmp	 DWORD PTR __Result$1[ebp], 0
  0003e	7d 06		 jge	 SHORT $LN7@snprintf
  00040	83 4d f8 ff	 or	 DWORD PTR tv86[ebp], -1
  00044	eb 06		 jmp	 SHORT $LN3@snprintf
$LN7@snprintf:
  00046	8b 45 fc	 mov	 eax, DWORD PTR __Result$1[ebp]
  00049	89 45 f8	 mov	 DWORD PTR tv86[ebp], eax
$LN3@snprintf:

; 1973 :     #pragma warning(suppress:28719)    // 28719
; 1974 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  0004c	8b 45 f8	 mov	 eax, DWORD PTR tv86[ebp]
  0004f	89 45 ec	 mov	 DWORD PTR __Result$[ebp], eax

; 1975 :         __crt_va_end(_ArgList);

  00052	83 65 f4 00	 and	 DWORD PTR __ArgList$[ebp], 0

; 1976 :         return _Result;

  00056	8b 45 ec	 mov	 eax, DWORD PTR __Result$[ebp]

; 1977 :     }

  00059	c9		 leave
  0005a	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN2@vector:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0000a	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000d	48		 dec	 eax
  0000e	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00011	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00015	76 11		 jbe	 SHORT $LN1@vector
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001a	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00020	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00023	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00026	eb dc		 jmp	 SHORT $LN2@vector
$LN1@vector:
  00028	c9		 leave
  00029	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
