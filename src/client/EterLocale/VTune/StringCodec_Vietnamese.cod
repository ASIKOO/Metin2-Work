; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLocale\StringCodec_Vietnamese.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z	; EL_String_Decode_Vietnamese
PUBLIC	?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z	; EL_String_Encode_Vietnamese
EXTRN	_wcslen:PROC
EXTRN	_strlen:PROC
_DATA	SEGMENT
?cp1258_to_unicode@@3PA_WA DW 00H			; cp1258_to_unicode
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	024H
	DW	025H
	DW	026H
	DW	027H
	DW	028H
	DW	029H
	DW	02aH
	DW	02bH
	DW	02cH
	DW	02dH
	DW	02eH
	DW	02fH
	DW	030H
	DW	031H
	DW	032H
	DW	033H
	DW	034H
	DW	035H
	DW	036H
	DW	037H
	DW	038H
	DW	039H
	DW	03aH
	DW	03bH
	DW	03cH
	DW	03dH
	DW	03eH
	DW	03fH
	DW	040H
	DW	041H
	DW	042H
	DW	043H
	DW	044H
	DW	045H
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	04cH
	DW	04dH
	DW	04eH
	DW	04fH
	DW	050H
	DW	051H
	DW	052H
	DW	053H
	DW	054H
	DW	055H
	DW	056H
	DW	057H
	DW	058H
	DW	059H
	DW	05aH
	DW	05bH
	DW	05cH
	DW	05dH
	DW	05eH
	DW	05fH
	DW	060H
	DW	061H
	DW	062H
	DW	063H
	DW	064H
	DW	065H
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	06cH
	DW	06dH
	DW	06eH
	DW	06fH
	DW	070H
	DW	071H
	DW	072H
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	079H
	DW	07aH
	DW	07bH
	DW	07cH
	DW	07dH
	DW	07eH
	DW	07fH
	DW	020acH
	DW	081H
	DW	0201aH
	DW	0192H
	DW	0201eH
	DW	02026H
	DW	02020H
	DW	02021H
	DW	02c6H
	DW	02030H
	DW	08aH
	DW	02039H
	DW	0152H
	DW	08dH
	DW	08eH
	DW	08fH
	DW	090H
	DW	02018H
	DW	02019H
	DW	0201cH
	DW	0201dH
	DW	02022H
	DW	02013H
	DW	02014H
	DW	02dcH
	DW	02122H
	DW	09aH
	DW	0203aH
	DW	0153H
	DW	09dH
	DW	09eH
	DW	0178H
	DW	0a0H
	DW	0a1H
	DW	0a2H
	DW	0a3H
	DW	0a4H
	DW	0a5H
	DW	0a6H
	DW	0a7H
	DW	0a8H
	DW	0a9H
	DW	0aaH
	DW	0abH
	DW	0acH
	DW	0adH
	DW	0aeH
	DW	0afH
	DW	0b0H
	DW	0b1H
	DW	0b2H
	DW	0b3H
	DW	0b4H
	DW	0b5H
	DW	0b6H
	DW	0b7H
	DW	0b8H
	DW	0b9H
	DW	0baH
	DW	0bbH
	DW	0bcH
	DW	0bdH
	DW	0beH
	DW	0bfH
	DW	0c0H
	DW	0c1H
	DW	0c2H
	DW	0102H
	DW	0c4H
	DW	0c5H
	DW	0c6H
	DW	0c7H
	DW	0c8H
	DW	0c9H
	DW	0caH
	DW	0cbH
	DW	0300H
	DW	0cdH
	DW	0ceH
	DW	0cfH
	DW	0110H
	DW	0d1H
	DW	0309H
	DW	0d3H
	DW	0d4H
	DW	01a0H
	DW	0d6H
	DW	0d7H
	DW	0d8H
	DW	0d9H
	DW	0daH
	DW	0dbH
	DW	0dcH
	DW	01afH
	DW	0303H
	DW	0dfH
	DW	0e0H
	DW	0e1H
	DW	0e2H
	DW	0103H
	DW	0e4H
	DW	0e5H
	DW	0e6H
	DW	0e7H
	DW	0e8H
	DW	0e9H
	DW	0eaH
	DW	0ebH
	DW	0301H
	DW	0edH
	DW	0eeH
	DW	0efH
	DW	0111H
	DW	0f1H
	DW	0323H
	DW	0f3H
	DW	0f4H
	DW	01a1H
	DW	0f6H
	DW	0f7H
	DW	0f8H
	DW	0f9H
	DW	0faH
	DW	0fbH
	DW	0fcH
	DW	01b0H
	DW	020abH
	DW	0ffH
?cp1258_composed_table@@3PAY04_WA DW 0c1H		; cp1258_composed_table
	DW	0c0H
	DW	01ea2H
	DW	0c3H
	DW	01ea0H
	DW	0e1H
	DW	0e0H
	DW	01ea3H
	DW	0e3H
	DW	01ea1H
	DW	01eaeH
	DW	01eb0H
	DW	01eb2H
	DW	01eb4H
	DW	01eb6H
	DW	01eafH
	DW	01eb1H
	DW	01eb3H
	DW	01eb5H
	DW	01eb7H
	DW	01ea4H
	DW	01ea6H
	DW	01ea8H
	DW	01eaaH
	DW	01eacH
	DW	01ea5H
	DW	01ea7H
	DW	01ea9H
	DW	01eabH
	DW	01eadH
	DW	0c9H
	DW	0c8H
	DW	01ebaH
	DW	01ebcH
	DW	01eb8H
	DW	0e9H
	DW	0e8H
	DW	01ebbH
	DW	01ebdH
	DW	01eb9H
	DW	01ebeH
	DW	01ec0H
	DW	01ec2H
	DW	01ec4H
	DW	01ec6H
	DW	01ebfH
	DW	01ec1H
	DW	01ec3H
	DW	01ec5H
	DW	01ec7H
	DW	0cdH
	DW	0ccH
	DW	01ec8H
	DW	0128H
	DW	01ecaH
	DW	0edH
	DW	0ecH
	DW	01ec9H
	DW	0129H
	DW	01ecbH
	DW	0d3H
	DW	0d2H
	DW	01eceH
	DW	0d5H
	DW	01eccH
	DW	0f3H
	DW	0f2H
	DW	01ecfH
	DW	0f5H
	DW	01ecdH
	DW	01ed0H
	DW	01ed2H
	DW	01ed4H
	DW	01ed6H
	DW	01ed8H
	DW	01ed1H
	DW	01ed3H
	DW	01ed5H
	DW	01ed7H
	DW	01ed9H
	DW	01edaH
	DW	01edcH
	DW	01edeH
	DW	01ee0H
	DW	01ee2H
	DW	01edbH
	DW	01eddH
	DW	01edfH
	DW	01ee1H
	DW	01ee3H
	DW	0daH
	DW	0d9H
	DW	01ee6H
	DW	0168H
	DW	01ee4H
	DW	0faH
	DW	0f9H
	DW	01ee7H
	DW	0169H
	DW	01ee5H
	DW	01ee8H
	DW	01eeaH
	DW	01eecH
	DW	01eeeH
	DW	01ef0H
	DW	01ee9H
	DW	01eebH
	DW	01eedH
	DW	01eefH
	DW	01ef1H
	DW	0ddH
	DW	01ef2H
	DW	01ef6H
	DW	01ef8H
	DW	01ef4H
	DW	0fdH
	DW	01ef3H
	DW	01ef7H
	DW	01ef9H
	DW	01ef5H
_DATA	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?DecomposeTone@@YA_N_WPAD@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
_input$ = 8						; size = 2
_tone$ = 12						; size = 4
?DecomposeTone@@YA_N_WPAD@Z PROC			; DecomposeTone, COMDAT

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 388  : 	switch(input)

  00004	0f b7 45 08	 movzx	 eax, WORD PTR _input$[ebp]
  00008	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  0000b	81 7d fc 29 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 297 ; 00000129H
  00012	7f 33		 jg	 SHORT $LN10@DecomposeT
  00014	81 7d fc 28 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 296 ; 00000128H
  0001b	0f 8d 75 01 00
	00		 jge	 $LN7@DecomposeT
  00021	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00024	2d c0 00 00 00	 sub	 eax, 192		; 000000c0H
  00029	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  0002c	83 7d fc 3d	 cmp	 DWORD PTR tv65[ebp], 61	; 0000003dH
  00030	0f 87 74 01 00
	00		 ja	 $LN2@DecomposeT
  00036	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00039	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN15@DecomposeT[eax]
  00040	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN16@DecomposeT[eax*4]
$LN10@DecomposeT:
  00047	81 7d fc cd 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7885 ; 00001ecdH
  0004e	0f 8f 02 01 00
	00		 jg	 $LN11@DecomposeT
  00054	81 7d fc ca 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7882 ; 00001ecaH
  0005b	0f 8d 3f 01 00
	00		 jge	 $LN8@DecomposeT
  00061	81 7d fc b3 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7859 ; 00001eb3H
  00068	0f 8f c6 00 00
	00		 jg	 $LN12@DecomposeT
  0006e	81 7d fc b2 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7858 ; 00001eb2H
  00075	0f 8d 11 01 00
	00		 jge	 $LN6@DecomposeT
  0007b	81 7d fc a9 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7849 ; 00001ea9H
  00082	0f 8f 8d 00 00
	00		 jg	 $LN13@DecomposeT
  00088	81 7d fc a8 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7848 ; 00001ea8H
  0008f	0f 8d f7 00 00
	00		 jge	 $LN6@DecomposeT
  00095	81 7d fc a3 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7843 ; 00001ea3H
  0009c	7f 46		 jg	 SHORT $LN14@DecomposeT
  0009e	81 7d fc a2 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7842 ; 00001ea2H
  000a5	0f 8d e1 00 00
	00		 jge	 $LN6@DecomposeT
  000ab	81 7d fc 68 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 360 ; 00000168H
  000b2	0f 8c f2 00 00
	00		 jl	 $LN2@DecomposeT
  000b8	81 7d fc 69 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 361 ; 00000169H
  000bf	0f 8e d1 00 00
	00		 jle	 $LN7@DecomposeT
  000c5	81 7d fc 9f 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7839 ; 00001e9fH
  000cc	0f 8e d8 00 00
	00		 jle	 $LN2@DecomposeT
  000d2	81 7d fc a1 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7841 ; 00001ea1H
  000d9	0f 8e c1 00 00
	00		 jle	 $LN8@DecomposeT
  000df	e9 c6 00 00 00	 jmp	 $LN2@DecomposeT
$LN14@DecomposeT:
  000e4	81 7d fc a4 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7844 ; 00001ea4H
  000eb	0f 8c b9 00 00
	00		 jl	 $LN2@DecomposeT
  000f1	81 7d fc a5 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7845 ; 00001ea5H
  000f8	7e 7e		 jle	 SHORT $LN4@DecomposeT
  000fa	81 7d fc a5 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7845 ; 00001ea5H
  00101	0f 8e a3 00 00
	00		 jle	 $LN2@DecomposeT
  00107	81 7d fc a7 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7847 ; 00001ea7H
  0010e	7e 72		 jle	 SHORT $LN5@DecomposeT
  00110	e9 95 00 00 00	 jmp	 $LN2@DecomposeT
$LN13@DecomposeT:
  00115	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00118	2d aa 1e 00 00	 sub	 eax, 7850		; 00001eaaH
  0011d	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  00120	83 7d fc 07	 cmp	 DWORD PTR tv65[ebp], 7
  00124	0f 87 80 00 00
	00		 ja	 $LN2@DecomposeT
  0012a	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  0012d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN17@DecomposeT[eax*4]
$LN12@DecomposeT:
  00134	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00137	2d b4 1e 00 00	 sub	 eax, 7860		; 00001eb4H
  0013c	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  0013f	83 7d fc 15	 cmp	 DWORD PTR tv65[ebp], 21	; 00000015H
  00143	77 65		 ja	 SHORT $LN2@DecomposeT
  00145	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00148	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN18@DecomposeT[eax]
  0014f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN19@DecomposeT[eax*4]
$LN11@DecomposeT:
  00156	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00159	2d ce 1e 00 00	 sub	 eax, 7886		; 00001eceH
  0015e	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  00161	83 7d fc 2b	 cmp	 DWORD PTR tv65[ebp], 43	; 0000002bH
  00165	77 43		 ja	 SHORT $LN2@DecomposeT
  00167	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  0016a	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN20@DecomposeT[eax]
  00171	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN21@DecomposeT[eax*4]
$LN4@DecomposeT:

; 389  : 	{
; 390  : 	case 0x00c1: // L'Á'
; 391  : 	case 0x00e1: // L'á'
; 392  : 	case 0x1eae: // L'Ắ'
; 393  : 	case 0x1eaf: // L'ắ'
; 394  : 	case 0x1ea4: // L'Ấ'
; 395  : 	case 0x1ea5: // L'ấ'
; 396  : 	case 0x00c9: // L'É'
; 397  : 	case 0x00e9: // L'é'
; 398  : 	case 0x1ebe: // L'Ế'
; 399  : 	case 0x1ebf: // L'ế'
; 400  : 	case 0x00cd: // L'Í'
; 401  : 	case 0x00ed: // L'í'
; 402  : 	case 0x00d3: // L'Ó'
; 403  : 	case 0x00f3: // L'ó'
; 404  : 	case 0x1ed0: // L'Ố'
; 405  : 	case 0x1ed1: // L'ố'
; 406  : 	case 0x1eda: // L'Ớ'
; 407  : 	case 0x1edb: // L'ớ'
; 408  : 	case 0x00da: // L'Ú'
; 409  : 	case 0x00fa: // L'ú'
; 410  : 	case 0x1ee8: // L'Ứ'
; 411  : 	case 0x1ee9: // L'ứ'
; 412  : 	case 0x00dd: // L'Ý'
; 413  : 	case 0x00fd: // L'ý'
; 414  : 		*tone = (char)0xec;

  00178	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  0017b	c6 00 ec	 mov	 BYTE PTR [eax], -20	; ffffffecH

; 415  : 		return true;

  0017e	b0 01		 mov	 al, 1
  00180	eb 2a		 jmp	 SHORT $LN1@DecomposeT
$LN5@DecomposeT:

; 416  : 	case 0x00c0: // L'À'
; 417  : 	case 0x00e0: // L'à'
; 418  : 	case 0x1eb0: // L'Ằ'
; 419  : 	case 0x1eb1: // L'ằ'
; 420  : 	case 0x1ea6: // L'Ầ'
; 421  : 	case 0x1ea7: // L'ầ'
; 422  : 	case 0x00c8: // L'È'
; 423  : 	case 0x00e8: // L'è'
; 424  : 	case 0x1ec0: // L'Ề'
; 425  : 	case 0x1ec1: // L'ề'
; 426  : 	case 0x00cc: // L'Ì'
; 427  : 	case 0x00ec: // L'ì'
; 428  : 	case 0x00d2: // L'Ò'
; 429  : 	case 0x00f2: // L'ò'
; 430  : 	case 0x1ed2: // L'Ồ'
; 431  : 	case 0x1ed3: // L'ồ'
; 432  : 	case 0x1edc: // L'Ờ'
; 433  : 	case 0x1edd: // L'ờ'
; 434  : 	case 0x00d9: // L'Ù'
; 435  : 	case 0x00f9: // L'ù'
; 436  : 	case 0x1eea: // L'Ừ'
; 437  : 	case 0x1eeb: // L'ừ'
; 438  : 	case 0x1ef2: // L'Ỳ'
; 439  : 	case 0x1ef3: // L'ỳ'
; 440  : 		*tone = (char)0xcc;

  00182	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  00185	c6 00 cc	 mov	 BYTE PTR [eax], -52	; ffffffccH

; 441  : 		return true;

  00188	b0 01		 mov	 al, 1
  0018a	eb 20		 jmp	 SHORT $LN1@DecomposeT
$LN6@DecomposeT:

; 442  : 	case 0x1ea2: // L'Ả'
; 443  : 	case 0x1ea3: // L'ả'
; 444  : 	case 0x1eb2: // L'Ẳ'
; 445  : 	case 0x1eb3: // L'ẳ'
; 446  : 	case 0x1ea8: // L'Ẩ'
; 447  : 	case 0x1ea9: // L'ẩ'
; 448  : 	case 0x1eba: // L'Ẻ'
; 449  : 	case 0x1ebb: // L'ẻ'
; 450  : 	case 0x1ec2: // L'Ể'
; 451  : 	case 0x1ec3: // L'ể'
; 452  : 	case 0x1ec8: // L'Ỉ'
; 453  : 	case 0x1ec9: // L'ỉ'
; 454  : 	case 0x1ece: // L'Ỏ'
; 455  : 	case 0x1ecf: // L'ỏ'
; 456  : 	case 0x1ed4: // L'Ổ'
; 457  : 	case 0x1ed5: // L'ổ'
; 458  : 	case 0x1ede: // L'Ở'
; 459  : 	case 0x1edf: // L'ở'
; 460  : 	case 0x1ee6: // L'Ủ'
; 461  : 	case 0x1ee7: // L'ủ'
; 462  : 	case 0x1eec: // L'Ử'
; 463  : 	case 0x1eed: // L'ử'
; 464  : 	case 0x1ef6: // L'Ỷ'
; 465  : 	case 0x1ef7: // L'ỷ'
; 466  : 		*tone = (char)0xd2;

  0018c	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  0018f	c6 00 d2	 mov	 BYTE PTR [eax], -46	; ffffffd2H

; 467  : 		return true;

  00192	b0 01		 mov	 al, 1
  00194	eb 16		 jmp	 SHORT $LN1@DecomposeT
$LN7@DecomposeT:

; 468  : 	case 0x00c3: // L'Ã'
; 469  : 	case 0x00e3: // L'ã'
; 470  : 	case 0x1eb4: // L'Ẵ'
; 471  : 	case 0x1eb5: // L'ẵ'
; 472  : 	case 0x1eaa: // L'Ẫ'
; 473  : 	case 0x1eab: // L'ẫ'
; 474  : 	case 0x1ebc: // L'Ẽ'
; 475  : 	case 0x1ebd: // L'ẽ'
; 476  : 	case 0x1ec4: // L'Ễ'
; 477  : 	case 0x1ec5: // L'ễ'
; 478  : 	case 0x0128: // L'Ĩ'
; 479  : 	case 0x0129: // L'ĩ'
; 480  : 	case 0x00d5: // L'Õ'
; 481  : 	case 0x00f5: // L'õ'
; 482  : 	case 0x1ed6: // L'Ỗ'
; 483  : 	case 0x1ed7: // L'ỗ'
; 484  : 	case 0x1ee0: // L'Ỡ'
; 485  : 	case 0x1ee1: // L'ỡ'
; 486  : 	case 0x0169: // L'ũ'
; 487  : 	case 0x0168: // L'Ũ'
; 488  : 	case 0x1eee: // L'Ữ'
; 489  : 	case 0x1eef: // L'ữ'
; 490  : 	case 0x1ef8: // L'Ỹ'
; 491  : 	case 0x1ef9: // L'ỹ'
; 492  : 		*tone = (char)0xde;

  00196	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  00199	c6 00 de	 mov	 BYTE PTR [eax], -34	; ffffffdeH

; 493  : 		return true;

  0019c	b0 01		 mov	 al, 1
  0019e	eb 0c		 jmp	 SHORT $LN1@DecomposeT
$LN8@DecomposeT:

; 494  : 	case 0x1ea0: // L'Ạ'
; 495  : 	case 0x1ea1: // L'ạ'
; 496  : 	case 0x1eb6: // L'Ặ'
; 497  : 	case 0x1eb7: // L'ặ'
; 498  : 	case 0x1eac: // L'Ậ'
; 499  : 	case 0x1ead: // L'ậ'
; 500  : 	case 0x1eb8: // L'Ẹ'
; 501  : 	case 0x1eb9: // L'ẹ'
; 502  : 	case 0x1ec6: // L'Ệ'
; 503  : 	case 0x1ec7: // L'ệ'
; 504  : 	case 0x1eca: // L'Ị'
; 505  : 	case 0x1ecb: // L'ị'
; 506  : 	case 0x1ecc: // L'Ọ'
; 507  : 	case 0x1ecd: // L'ọ'
; 508  : 	case 0x1ed8: // L'Ộ'
; 509  : 	case 0x1ed9: // L'ộ'
; 510  : 	case 0x1ee2: // L'Ợ'
; 511  : 	case 0x1ee3: // L'ợ'
; 512  : 	case 0x1ee4: // L'Ụ'
; 513  : 	case 0x1ee5: // L'ụ'
; 514  : 	case 0x1ef0: // L'Ự'
; 515  : 	case 0x1ef1: // L'ự'
; 516  : 	case 0x1ef4: // L'Ỵ'
; 517  : 	case 0x1ef5: // L'ỵ'
; 518  : 		*tone = (char)0xf2;

  001a0	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  001a3	c6 00 f2	 mov	 BYTE PTR [eax], -14	; fffffff2H

; 519  : 		return true;

  001a6	b0 01		 mov	 al, 1
  001a8	eb 02		 jmp	 SHORT $LN1@DecomposeT
$LN2@DecomposeT:

; 520  : 	}
; 521  : 
; 522  : 	return false;

  001aa	32 c0		 xor	 al, al
$LN1@DecomposeT:

; 523  : }

  001ac	c9		 leave
  001ad	c3		 ret	 0
  001ae	66 90		 npad	 2
$LN16@DecomposeT:
  001b0	00 00 00 00	 DD	 $LN5@DecomposeT
  001b4	00 00 00 00	 DD	 $LN4@DecomposeT
  001b8	00 00 00 00	 DD	 $LN7@DecomposeT
  001bc	00 00 00 00	 DD	 $LN2@DecomposeT
$LN15@DecomposeT:
  001c0	00		 DB	 0
  001c1	01		 DB	 1
  001c2	03		 DB	 3
  001c3	02		 DB	 2
  001c4	03		 DB	 3
  001c5	03		 DB	 3
  001c6	03		 DB	 3
  001c7	03		 DB	 3
  001c8	00		 DB	 0
  001c9	01		 DB	 1
  001ca	03		 DB	 3
  001cb	03		 DB	 3
  001cc	00		 DB	 0
  001cd	01		 DB	 1
  001ce	03		 DB	 3
  001cf	03		 DB	 3
  001d0	03		 DB	 3
  001d1	03		 DB	 3
  001d2	00		 DB	 0
  001d3	01		 DB	 1
  001d4	03		 DB	 3
  001d5	02		 DB	 2
  001d6	03		 DB	 3
  001d7	03		 DB	 3
  001d8	03		 DB	 3
  001d9	00		 DB	 0
  001da	01		 DB	 1
  001db	03		 DB	 3
  001dc	03		 DB	 3
  001dd	01		 DB	 1
  001de	03		 DB	 3
  001df	03		 DB	 3
  001e0	00		 DB	 0
  001e1	01		 DB	 1
  001e2	03		 DB	 3
  001e3	02		 DB	 2
  001e4	03		 DB	 3
  001e5	03		 DB	 3
  001e6	03		 DB	 3
  001e7	03		 DB	 3
  001e8	00		 DB	 0
  001e9	01		 DB	 1
  001ea	03		 DB	 3
  001eb	03		 DB	 3
  001ec	00		 DB	 0
  001ed	01		 DB	 1
  001ee	03		 DB	 3
  001ef	03		 DB	 3
  001f0	03		 DB	 3
  001f1	03		 DB	 3
  001f2	00		 DB	 0
  001f3	01		 DB	 1
  001f4	03		 DB	 3
  001f5	02		 DB	 2
  001f6	03		 DB	 3
  001f7	03		 DB	 3
  001f8	03		 DB	 3
  001f9	00		 DB	 0
  001fa	01		 DB	 1
  001fb	03		 DB	 3
  001fc	03		 DB	 3
  001fd	01		 DB	 1
  001fe	66 90		 npad	 2
$LN17@DecomposeT:
  00200	00 00 00 00	 DD	 $LN7@DecomposeT
  00204	00 00 00 00	 DD	 $LN7@DecomposeT
  00208	00 00 00 00	 DD	 $LN8@DecomposeT
  0020c	00 00 00 00	 DD	 $LN8@DecomposeT
  00210	00 00 00 00	 DD	 $LN4@DecomposeT
  00214	00 00 00 00	 DD	 $LN4@DecomposeT
  00218	00 00 00 00	 DD	 $LN5@DecomposeT
  0021c	00 00 00 00	 DD	 $LN5@DecomposeT
$LN19@DecomposeT:
  00220	00 00 00 00	 DD	 $LN7@DecomposeT
  00224	00 00 00 00	 DD	 $LN8@DecomposeT
  00228	00 00 00 00	 DD	 $LN6@DecomposeT
  0022c	00 00 00 00	 DD	 $LN4@DecomposeT
  00230	00 00 00 00	 DD	 $LN5@DecomposeT
$LN18@DecomposeT:
  00234	00		 DB	 0
  00235	00		 DB	 0
  00236	01		 DB	 1
  00237	01		 DB	 1
  00238	01		 DB	 1
  00239	01		 DB	 1
  0023a	02		 DB	 2
  0023b	02		 DB	 2
  0023c	00		 DB	 0
  0023d	00		 DB	 0
  0023e	03		 DB	 3
  0023f	03		 DB	 3
  00240	04		 DB	 4
  00241	04		 DB	 4
  00242	02		 DB	 2
  00243	02		 DB	 2
  00244	00		 DB	 0
  00245	00		 DB	 0
  00246	01		 DB	 1
  00247	01		 DB	 1
  00248	02		 DB	 2
  00249	02		 DB	 2
  0024a	66 90		 npad	 2
$LN21@DecomposeT:
  0024c	00 00 00 00	 DD	 $LN6@DecomposeT
  00250	00 00 00 00	 DD	 $LN4@DecomposeT
  00254	00 00 00 00	 DD	 $LN5@DecomposeT
  00258	00 00 00 00	 DD	 $LN7@DecomposeT
  0025c	00 00 00 00	 DD	 $LN8@DecomposeT
$LN20@DecomposeT:
  00260	00		 DB	 0
  00261	00		 DB	 0
  00262	01		 DB	 1
  00263	01		 DB	 1
  00264	02		 DB	 2
  00265	02		 DB	 2
  00266	00		 DB	 0
  00267	00		 DB	 0
  00268	03		 DB	 3
  00269	03		 DB	 3
  0026a	04		 DB	 4
  0026b	04		 DB	 4
  0026c	01		 DB	 1
  0026d	01		 DB	 1
  0026e	02		 DB	 2
  0026f	02		 DB	 2
  00270	00		 DB	 0
  00271	00		 DB	 0
  00272	03		 DB	 3
  00273	03		 DB	 3
  00274	04		 DB	 4
  00275	04		 DB	 4
  00276	04		 DB	 4
  00277	04		 DB	 4
  00278	00		 DB	 0
  00279	00		 DB	 0
  0027a	01		 DB	 1
  0027b	01		 DB	 1
  0027c	02		 DB	 2
  0027d	02		 DB	 2
  0027e	00		 DB	 0
  0027f	00		 DB	 0
  00280	03		 DB	 3
  00281	03		 DB	 3
  00282	04		 DB	 4
  00283	04		 DB	 4
  00284	02		 DB	 2
  00285	02		 DB	 2
  00286	04		 DB	 4
  00287	04		 DB	 4
  00288	00		 DB	 0
  00289	00		 DB	 0
  0028a	03		 DB	 3
  0028b	03		 DB	 3
?DecomposeTone@@YA_N_WPAD@Z ENDP			; DecomposeTone
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?DecomposeLetter@@YA_N_WPAD@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
_input$ = 8						; size = 2
_letter$ = 12						; size = 4
?DecomposeLetter@@YA_N_WPAD@Z PROC			; DecomposeLetter, COMDAT

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 173  : 	switch(input)

  00004	0f b7 45 08	 movzx	 eax, WORD PTR _input$[ebp]
  00008	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  0000b	81 7d fc c0 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7872 ; 00001ec0H
  00012	0f 8f 52 01 00
	00		 jg	 $LN41@DecomposeL
  00018	81 7d fc c0 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7872 ; 00001ec0H
  0001f	0f 84 08 02 00
	00		 je	 $LN12@DecomposeL
  00025	81 7d fc a2 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7842 ; 00001ea2H
  0002c	0f 8f 12 01 00
	00		 jg	 $LN42@DecomposeL
  00032	81 7d fc a2 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7842 ; 00001ea2H
  00039	0f 84 86 01 00
	00		 je	 $LN4@DecomposeL
  0003f	81 7d fc fd 00
	00 00		 cmp	 DWORD PTR tv65[ebp], 253 ; 000000fdH
  00046	7f 33		 jg	 SHORT $LN43@DecomposeL
  00048	81 7d fc fd 00
	00 00		 cmp	 DWORD PTR tv65[ebp], 253 ; 000000fdH
  0004f	0f 84 9b 02 00
	00		 je	 $LN27@DecomposeL
  00055	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00058	2d c0 00 00 00	 sub	 eax, 192		; 000000c0H
  0005d	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  00060	83 7d fc 3a	 cmp	 DWORD PTR tv65[ebp], 58	; 0000003aH
  00064	0f 87 01 03 00
	00		 ja	 $LN2@DecomposeL
  0006a	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  0006d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN46@DecomposeL[eax]
  00074	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN47@DecomposeL[eax*4]
$LN43@DecomposeL:
  0007b	81 7d fc 69 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 361 ; 00000169H
  00082	7f 6d		 jg	 SHORT $LN44@DecomposeL
  00084	81 7d fc 69 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 361 ; 00000169H
  0008b	0f 84 2b 02 00
	00		 je	 $LN23@DecomposeL
  00091	81 7d fc 02 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 258 ; 00000102H
  00098	0f 84 5f 02 00
	00		 je	 $LN28@DecomposeL
  0009e	81 7d fc 03 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 259 ; 00000103H
  000a5	0f 84 5c 02 00
	00		 je	 $LN29@DecomposeL
  000ab	81 7d fc 10 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 272 ; 00000110H
  000b2	0f 84 59 02 00
	00		 je	 $LN30@DecomposeL
  000b8	81 7d fc 11 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 273 ; 00000111H
  000bf	0f 84 56 02 00
	00		 je	 $LN31@DecomposeL
  000c5	81 7d fc 28 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 296 ; 00000128H
  000cc	0f 84 75 01 00
	00		 je	 $LN14@DecomposeL
  000d2	81 7d fc 29 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 297 ; 00000129H
  000d9	0f 84 75 01 00
	00		 je	 $LN15@DecomposeL
  000df	81 7d fc 68 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 360 ; 00000168H
  000e6	0f 84 c3 01 00
	00		 je	 $LN22@DecomposeL
  000ec	e9 7a 02 00 00	 jmp	 $LN2@DecomposeL
$LN44@DecomposeL:
  000f1	81 7d fc a0 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 416 ; 000001a0H
  000f8	0f 84 27 02 00
	00		 je	 $LN32@DecomposeL
  000fe	81 7d fc a1 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 417 ; 000001a1H
  00105	0f 84 24 02 00
	00		 je	 $LN33@DecomposeL
  0010b	81 7d fc af 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 431 ; 000001afH
  00112	0f 84 21 02 00
	00		 je	 $LN34@DecomposeL
  00118	81 7d fc b0 01
	00 00		 cmp	 DWORD PTR tv65[ebp], 432 ; 000001b0H
  0011f	0f 84 1e 02 00
	00		 je	 $LN35@DecomposeL
  00125	81 7d fc a0 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7840 ; 00001ea0H
  0012c	0f 84 93 00 00
	00		 je	 $LN4@DecomposeL
  00132	81 7d fc a1 1e
	00 00		 cmp	 DWORD PTR tv65[ebp], 7841 ; 00001ea1H
  00139	0f 84 93 00 00
	00		 je	 $LN5@DecomposeL
  0013f	e9 27 02 00 00	 jmp	 $LN2@DecomposeL
$LN42@DecomposeL:
  00144	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00147	2d a3 1e 00 00	 sub	 eax, 7843		; 00001ea3H
  0014c	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  0014f	83 7d fc 1c	 cmp	 DWORD PTR tv65[ebp], 28	; 0000001cH
  00153	0f 87 12 02 00
	00		 ja	 $LN2@DecomposeL
  00159	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  0015c	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN48@DecomposeL[eax]
  00163	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN49@DecomposeL[eax*4]
$LN41@DecomposeL:
  0016a	81 7d fc 1c 20
	00 00		 cmp	 DWORD PTR tv65[ebp], 8220 ; 0000201cH
  00171	7f 33		 jg	 SHORT $LN45@DecomposeL
  00173	81 7d fc 1c 20
	00 00		 cmp	 DWORD PTR tv65[ebp], 8220 ; 0000201cH
  0017a	0f 84 d7 01 00
	00		 je	 $LN37@DecomposeL
  00180	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00183	2d c1 1e 00 00	 sub	 eax, 7873		; 00001ec1H
  00188	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  0018b	83 7d fc 38	 cmp	 DWORD PTR tv65[ebp], 56	; 00000038H
  0018f	0f 87 d6 01 00
	00		 ja	 $LN2@DecomposeL
  00195	8b 45 fc	 mov	 eax, DWORD PTR tv65[ebp]
  00198	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN50@DecomposeL[eax]
  0019f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN51@DecomposeL[eax*4]
$LN45@DecomposeL:
  001a6	81 7d fc 1d 20
	00 00		 cmp	 DWORD PTR tv65[ebp], 8221 ; 0000201dH
  001ad	0f 84 ae 01 00
	00		 je	 $LN38@DecomposeL
  001b3	81 7d fc ab 20
	00 00		 cmp	 DWORD PTR tv65[ebp], 8363 ; 000020abH
  001ba	0f 84 8d 01 00
	00		 je	 $LN36@DecomposeL
  001c0	e9 a6 01 00 00	 jmp	 $LN2@DecomposeL
$LN4@DecomposeL:

; 174  : 	{
; 175  : 	case 0x00c1:  // L'Á'
; 176  : 	case 0x00c0:  // L'À'
; 177  : 	case 0x1ea2:  // L'Ả'
; 178  : 	case 0x00c3:  // L'Ã'
; 179  : 	case 0x1ea0:  // L'Ạ'
; 180  : 		*letter = 'A';

  001c5	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  001c8	c6 00 41	 mov	 BYTE PTR [eax], 65	; 00000041H

; 181  : 		return true;

  001cb	b0 01		 mov	 al, 1
  001cd	e9 b2 01 00 00	 jmp	 $LN1@DecomposeL
$LN5@DecomposeL:

; 182  : 	case 0x00e1:  // L'á'
; 183  : 	case 0x00e0:  // L'à'
; 184  : 	case 0x1ea3:  // L'ả'
; 185  : 	case 0x00e3:  // L'ã'
; 186  : 	case 0x1ea1:  // L'ạ'
; 187  : 		*letter = 'a';

  001d2	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  001d5	c6 00 61	 mov	 BYTE PTR [eax], 97	; 00000061H

; 188  : 		return true;

  001d8	b0 01		 mov	 al, 1
  001da	e9 a5 01 00 00	 jmp	 $LN1@DecomposeL
$LN6@DecomposeL:

; 189  : 	case 0x1eae:  // L'Ắ'
; 190  : 	case 0x1eb0:  // L'Ằ'
; 191  : 	case 0x1eb2:  // L'Ẳ'
; 192  : 	case 0x1eb4:  // L'Ẵ'
; 193  : 	case 0x1eb6:  // L'Ặ'
; 194  : 		*letter = (char)0xc3;

  001df	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  001e2	c6 00 c3	 mov	 BYTE PTR [eax], -61	; ffffffc3H

; 195  : 		return true;

  001e5	b0 01		 mov	 al, 1
  001e7	e9 98 01 00 00	 jmp	 $LN1@DecomposeL
$LN7@DecomposeL:

; 196  : 	case 0x1eaf:  // L'ắ'
; 197  : 	case 0x1eb1:  // L'ằ'
; 198  : 	case 0x1eb3:  // L'ẳ'
; 199  : 	case 0x1eb5:  // L'ẵ'
; 200  : 	case 0x1eb7:  // L'ặ'
; 201  : 		*letter = (char)0xe3;

  001ec	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  001ef	c6 00 e3	 mov	 BYTE PTR [eax], -29	; ffffffe3H

; 202  : 		return true;

  001f2	b0 01		 mov	 al, 1
  001f4	e9 8b 01 00 00	 jmp	 $LN1@DecomposeL
$LN8@DecomposeL:

; 203  : 	case 0x1ea4:  // L'Ấ'
; 204  : 	case 0x1ea6:  // L'Ầ'
; 205  : 	case 0x1ea8:  // L'Ẩ'
; 206  : 	case 0x1eaa:  // L'Ẫ'
; 207  : 	case 0x1eac:  // L'Ậ'
; 208  : 		*letter = (char)0xc2;

  001f9	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  001fc	c6 00 c2	 mov	 BYTE PTR [eax], -62	; ffffffc2H

; 209  : 		return true;

  001ff	b0 01		 mov	 al, 1
  00201	e9 7e 01 00 00	 jmp	 $LN1@DecomposeL
$LN9@DecomposeL:

; 210  : 	case 0x1ea5:  // L'ấ'
; 211  : 	case 0x1ea7:  // L'ầ'
; 212  : 	case 0x1ea9:  // L'ẩ'
; 213  : 	case 0x1eab:  // L'ẫ'
; 214  : 	case 0x1ead:  // L'ậ'
; 215  : 		*letter = (char)0xe2;

  00206	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00209	c6 00 e2	 mov	 BYTE PTR [eax], -30	; ffffffe2H

; 216  : 		return true;

  0020c	b0 01		 mov	 al, 1
  0020e	e9 71 01 00 00	 jmp	 $LN1@DecomposeL
$LN10@DecomposeL:

; 217  : 	case 0x00c9:  // L'É'
; 218  : 	case 0x00c8:  // L'È'
; 219  : 	case 0x1eba:  // L'Ẻ'
; 220  : 	case 0x1ebc:  // L'Ẽ'
; 221  : 	case 0x1eb8:  // L'Ẹ'
; 222  : 		*letter = (char)'E';

  00213	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00216	c6 00 45	 mov	 BYTE PTR [eax], 69	; 00000045H

; 223  : 		return true;

  00219	b0 01		 mov	 al, 1
  0021b	e9 64 01 00 00	 jmp	 $LN1@DecomposeL
$LN11@DecomposeL:

; 224  : 	case 0x00e9:  // L'é'
; 225  : 	case 0x00e8:  // L'è'
; 226  : 	case 0x1ebb:  // L'ẻ'
; 227  : 	case 0x1ebd:  // L'ẽ'
; 228  : 	case 0x1eb9:  // L'ẹ'
; 229  : 		*letter = (char)'e';

  00220	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00223	c6 00 65	 mov	 BYTE PTR [eax], 101	; 00000065H

; 230  : 		return true;

  00226	b0 01		 mov	 al, 1
  00228	e9 57 01 00 00	 jmp	 $LN1@DecomposeL
$LN12@DecomposeL:

; 231  : 	case 0x1ebe:  // L'Ế'
; 232  : 	case 0x1ec0:  // L'Ề'
; 233  : 	case 0x1ec2:  // L'Ể'
; 234  : 	case 0x1ec4:  // L'Ễ'
; 235  : 	case 0x1ec6:  // L'Ệ'
; 236  : 		*letter = (char)0xca;

  0022d	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00230	c6 00 ca	 mov	 BYTE PTR [eax], -54	; ffffffcaH

; 237  : 		return true;

  00233	b0 01		 mov	 al, 1
  00235	e9 4a 01 00 00	 jmp	 $LN1@DecomposeL
$LN13@DecomposeL:

; 238  : 	case 0x1ebf:  // L'ế'
; 239  : 	case 0x1ec1:  // L'ề'
; 240  : 	case 0x1ec3:  // L'ể'
; 241  : 	case 0x1ec5:  // L'ễ'
; 242  : 	case 0x1ec7:  // L'ệ'
; 243  : 		*letter = (char)0xea;

  0023a	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0023d	c6 00 ea	 mov	 BYTE PTR [eax], -22	; ffffffeaH

; 244  : 		return true;

  00240	b0 01		 mov	 al, 1
  00242	e9 3d 01 00 00	 jmp	 $LN1@DecomposeL
$LN14@DecomposeL:

; 245  : 	case 0x00cd:  // L'Í'
; 246  : 	case 0x00cc:  // L'Ì'
; 247  : 	case 0x1ec8:  // L'Ỉ'
; 248  : 	case 0x0128:  // L'Ĩ'
; 249  : 	case 0x1eca:  // L'Ị'
; 250  : 		*letter = (char)'I';

  00247	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0024a	c6 00 49	 mov	 BYTE PTR [eax], 73	; 00000049H

; 251  : 		return true;

  0024d	b0 01		 mov	 al, 1
  0024f	e9 30 01 00 00	 jmp	 $LN1@DecomposeL
$LN15@DecomposeL:

; 252  : 	case 0x00ed:  // L'í'
; 253  : 	case 0x00ec:  // L'ì'
; 254  : 	case 0x1ec9:  // L'ỉ'
; 255  : 	case 0x0129:  // L'ĩ'
; 256  : 	case 0x1ecb:  // L'ị'
; 257  : 		*letter = (char)'i';

  00254	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00257	c6 00 69	 mov	 BYTE PTR [eax], 105	; 00000069H

; 258  : 		return true;

  0025a	b0 01		 mov	 al, 1
  0025c	e9 23 01 00 00	 jmp	 $LN1@DecomposeL
$LN16@DecomposeL:

; 259  : 	case 0x00d3:  // L'Ó'
; 260  : 	case 0x00d2:  // L'Ò'
; 261  : 	case 0x1ece:  // L'Ỏ'
; 262  : 	case 0x00d5:  // L'Õ'
; 263  : 	case 0x1ecc:  // L'Ọ'
; 264  : 		*letter = (char)'O';

  00261	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00264	c6 00 4f	 mov	 BYTE PTR [eax], 79	; 0000004fH

; 265  : 		return true;

  00267	b0 01		 mov	 al, 1
  00269	e9 16 01 00 00	 jmp	 $LN1@DecomposeL
$LN17@DecomposeL:

; 266  : 	case 0x00f3:  // L'ó'
; 267  : 	case 0x00f2:  // L'ò'
; 268  : 	case 0x1ecf:  // L'ỏ'
; 269  : 	case 0x00f5:  // L'õ'
; 270  : 	case 0x1ecd:  // L'ọ'
; 271  : 		*letter = (char)'o';

  0026e	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00271	c6 00 6f	 mov	 BYTE PTR [eax], 111	; 0000006fH

; 272  : 		return true;

  00274	b0 01		 mov	 al, 1
  00276	e9 09 01 00 00	 jmp	 $LN1@DecomposeL
$LN18@DecomposeL:

; 273  : 	case 0x1ed0:  // L'Ố'
; 274  : 	case 0x1ed2:  // L'Ồ'
; 275  : 	case 0x1ed4:  // L'Ổ'
; 276  : 	case 0x1ed6:  // L'Ỗ'
; 277  : 	case 0x1ed8:  // L'Ộ'
; 278  : 		*letter = (char)0xd4;

  0027b	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0027e	c6 00 d4	 mov	 BYTE PTR [eax], -44	; ffffffd4H

; 279  : 		return true;

  00281	b0 01		 mov	 al, 1
  00283	e9 fc 00 00 00	 jmp	 $LN1@DecomposeL
$LN19@DecomposeL:

; 280  : 	case 0x1ed1:  // L'ố'
; 281  : 	case 0x1ed3:  // L'ồ'
; 282  : 	case 0x1ed5:  // L'ổ'
; 283  : 	case 0x1ed7:  // L'ỗ'
; 284  : 	case 0x1ed9:  // L'ộ'
; 285  : 		*letter = (char)0xf4;

  00288	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0028b	c6 00 f4	 mov	 BYTE PTR [eax], -12	; fffffff4H

; 286  : 		return true;

  0028e	b0 01		 mov	 al, 1
  00290	e9 ef 00 00 00	 jmp	 $LN1@DecomposeL
$LN20@DecomposeL:

; 287  : 	case 0x1eda:  // L'Ớ'
; 288  : 	case 0x1edc:  // L'Ờ'
; 289  : 	case 0x1ede:  // L'Ở'
; 290  : 	case 0x1ee0:  // L'Ỡ'
; 291  : 	case 0x1ee2:  // L'Ợ'
; 292  : 		*letter = (char)0xd5;

  00295	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00298	c6 00 d5	 mov	 BYTE PTR [eax], -43	; ffffffd5H

; 293  : 		return true;

  0029b	b0 01		 mov	 al, 1
  0029d	e9 e2 00 00 00	 jmp	 $LN1@DecomposeL
$LN21@DecomposeL:

; 294  : 	case 0x1edb:  // L'ớ'
; 295  : 	case 0x1edd:  // L'ờ'
; 296  : 	case 0x1edf:  // L'ở'
; 297  : 	case 0x1ee1:  // L'ỡ'
; 298  : 	case 0x1ee3:  // L'ợ'
; 299  : 		*letter = (char)0xf5;

  002a2	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  002a5	c6 00 f5	 mov	 BYTE PTR [eax], -11	; fffffff5H

; 300  : 		return true;

  002a8	b0 01		 mov	 al, 1
  002aa	e9 d5 00 00 00	 jmp	 $LN1@DecomposeL
$LN22@DecomposeL:

; 301  : 	case 0x00da:  // L'Ú'
; 302  : 	case 0x00d9:  // L'Ù'
; 303  : 	case 0x1ee6:  // L'Ủ'
; 304  : 	case 0x0168:  // L'Ũ'
; 305  : 	case 0x1ee4:  // L'Ụ'
; 306  : 		*letter = (char)'U';

  002af	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  002b2	c6 00 55	 mov	 BYTE PTR [eax], 85	; 00000055H

; 307  : 		return true;

  002b5	b0 01		 mov	 al, 1
  002b7	e9 c8 00 00 00	 jmp	 $LN1@DecomposeL
$LN23@DecomposeL:

; 308  : 	case 0x00fa:  // L'ú'
; 309  : 	case 0x00f9:  // L'ù'
; 310  : 	case 0x1ee7:  // L'ủ'
; 311  : 	case 0x0169:  // L'ũ'
; 312  : 	case 0x1ee5:  // L'ụ'
; 313  : 		*letter = (char)'u';

  002bc	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  002bf	c6 00 75	 mov	 BYTE PTR [eax], 117	; 00000075H

; 314  : 		return true;

  002c2	b0 01		 mov	 al, 1
  002c4	e9 bb 00 00 00	 jmp	 $LN1@DecomposeL
$LN24@DecomposeL:

; 315  : 	case 0x1ee8:  // L'Ứ'
; 316  : 	case 0x1eea:  // L'Ừ'
; 317  : 	case 0x1eec:  // L'Ử'
; 318  : 	case 0x1eee:  // L'Ữ'
; 319  : 	case 0x1ef0:  // L'Ự'
; 320  : 		*letter = (char)0xdd;

  002c9	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  002cc	c6 00 dd	 mov	 BYTE PTR [eax], -35	; ffffffddH

; 321  : 		return true;

  002cf	b0 01		 mov	 al, 1
  002d1	e9 ae 00 00 00	 jmp	 $LN1@DecomposeL
$LN25@DecomposeL:

; 322  : 	case 0x1ee9:  // L'ứ'
; 323  : 	case 0x1eeb:  // L'ừ'
; 324  : 	case 0x1eed:  // L'ử'
; 325  : 	case 0x1eef:  // L'ữ'
; 326  : 	case 0x1ef1:  // L'ự'
; 327  : 		*letter = (char)0xfd;

  002d6	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  002d9	c6 00 fd	 mov	 BYTE PTR [eax], -3	; fffffffdH

; 328  : 		return true;

  002dc	b0 01		 mov	 al, 1
  002de	e9 a1 00 00 00	 jmp	 $LN1@DecomposeL
$LN26@DecomposeL:

; 329  : 	case 0x1ef2:  // L'Ỳ'
; 330  : 	case 0x00dd:  // L'Ý'
; 331  : 	case 0x1ef6:  // L'Ỷ'
; 332  : 	case 0x1ef8:  // L'Ỹ'
; 333  : 	case 0x1ef4:  // L'Ỵ'
; 334  : 		*letter = (char)'Y';

  002e3	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  002e6	c6 00 59	 mov	 BYTE PTR [eax], 89	; 00000059H

; 335  : 		return true;

  002e9	b0 01		 mov	 al, 1
  002eb	e9 94 00 00 00	 jmp	 $LN1@DecomposeL
$LN27@DecomposeL:

; 336  : 	case 0x1ef3:  // L'ỳ'
; 337  : 	case 0x00fd:  // L'ý'
; 338  : 	case 0x1ef7:  // L'ỷ'
; 339  : 	case 0x1ef9:  // L'ỹ'
; 340  : 	case 0x1ef5:  // L'ỵ'
; 341  : 		*letter = (char)'y';

  002f0	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  002f3	c6 00 79	 mov	 BYTE PTR [eax], 121	; 00000079H

; 342  : 		return true;

  002f6	b0 01		 mov	 al, 1
  002f8	e9 87 00 00 00	 jmp	 $LN1@DecomposeL
$LN28@DecomposeL:

; 343  : 	case 0x0102: // L'Ă'
; 344  : 		*letter = (char)0xc3;

  002fd	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00300	c6 00 c3	 mov	 BYTE PTR [eax], -61	; ffffffc3H

; 345  : 		return true;

  00303	b0 01		 mov	 al, 1
  00305	eb 7d		 jmp	 SHORT $LN1@DecomposeL
$LN29@DecomposeL:

; 346  : 	case 0x0103: // L'ă'
; 347  : 		*letter = (char)0xe3;

  00307	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0030a	c6 00 e3	 mov	 BYTE PTR [eax], -29	; ffffffe3H

; 348  : 		return true;

  0030d	b0 01		 mov	 al, 1
  0030f	eb 73		 jmp	 SHORT $LN1@DecomposeL
$LN30@DecomposeL:

; 349  : 	case 0x0110: // L'Đ'
; 350  : 		*letter = (char)0xd0;

  00311	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00314	c6 00 d0	 mov	 BYTE PTR [eax], -48	; ffffffd0H

; 351  : 		return true;

  00317	b0 01		 mov	 al, 1
  00319	eb 69		 jmp	 SHORT $LN1@DecomposeL
$LN31@DecomposeL:

; 352  : 	case 0x0111: // L'đ'
; 353  : 		*letter = (char)0xf0;

  0031b	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0031e	c6 00 f0	 mov	 BYTE PTR [eax], -16	; fffffff0H

; 354  : 		return true;

  00321	b0 01		 mov	 al, 1
  00323	eb 5f		 jmp	 SHORT $LN1@DecomposeL
$LN32@DecomposeL:

; 355  : 	case 0x01a0: // L'Ơ'
; 356  : 		*letter = (char)0xd5;

  00325	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00328	c6 00 d5	 mov	 BYTE PTR [eax], -43	; ffffffd5H

; 357  : 		return true;

  0032b	b0 01		 mov	 al, 1
  0032d	eb 55		 jmp	 SHORT $LN1@DecomposeL
$LN33@DecomposeL:

; 358  : 	case 0x01a1: // L'ơ'
; 359  : 		*letter = (char)0xf5;

  0032f	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00332	c6 00 f5	 mov	 BYTE PTR [eax], -11	; fffffff5H

; 360  : 		return true;

  00335	b0 01		 mov	 al, 1
  00337	eb 4b		 jmp	 SHORT $LN1@DecomposeL
$LN34@DecomposeL:

; 361  : 	case 0x01af: // L'Ư'
; 362  : 		*letter = (char)0xdd;

  00339	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0033c	c6 00 dd	 mov	 BYTE PTR [eax], -35	; ffffffddH

; 363  : 		return true;

  0033f	b0 01		 mov	 al, 1
  00341	eb 41		 jmp	 SHORT $LN1@DecomposeL
$LN35@DecomposeL:

; 364  : 	case 0x01b0: // L'ư'
; 365  : 		*letter = (char)0xfd;

  00343	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00346	c6 00 fd	 mov	 BYTE PTR [eax], -3	; fffffffdH

; 366  : 		return true;

  00349	b0 01		 mov	 al, 1
  0034b	eb 37		 jmp	 SHORT $LN1@DecomposeL
$LN36@DecomposeL:

; 367  : 	case 0x20ab: // L'₫'
; 368  : 		*letter = (char)0xfe;

  0034d	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00350	c6 00 fe	 mov	 BYTE PTR [eax], -2	; fffffffeH

; 369  : 		return true;

  00353	b0 01		 mov	 al, 1
  00355	eb 2d		 jmp	 SHORT $LN1@DecomposeL
$LN37@DecomposeL:

; 370  : 	case 0x201c: // L'“'
; 371  : 		*letter = (char)'"';

  00357	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0035a	c6 00 22	 mov	 BYTE PTR [eax], 34	; 00000022H

; 372  : 		return true;

  0035d	b0 01		 mov	 al, 1
  0035f	eb 23		 jmp	 SHORT $LN1@DecomposeL
$LN38@DecomposeL:

; 373  : 	case 0x201d: // L'”'
; 374  : 		*letter = (char)'"';

  00361	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00364	c6 00 22	 mov	 BYTE PTR [eax], 34	; 00000022H

; 375  : 		return true;

  00367	b0 01		 mov	 al, 1
  00369	eb 19		 jmp	 SHORT $LN1@DecomposeL
$LN2@DecomposeL:

; 376  : 	}
; 377  : 
; 378  : 	if(input < 256)

  0036b	0f b7 45 08	 movzx	 eax, WORD PTR _input$[ebp]
  0036f	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00374	7d 0c		 jge	 SHORT $LN39@DecomposeL

; 379  : 	{
; 380  : 		*letter = (char)input;

  00376	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00379	8a 4d 08	 mov	 cl, BYTE PTR _input$[ebp]
  0037c	88 08		 mov	 BYTE PTR [eax], cl

; 381  : 		return true;

  0037e	b0 01		 mov	 al, 1
  00380	eb 02		 jmp	 SHORT $LN1@DecomposeL
$LN39@DecomposeL:

; 382  : 	}
; 383  :     return false;

  00382	32 c0		 xor	 al, al
$LN1@DecomposeL:

; 384  : }

  00384	c9		 leave
  00385	c3		 ret	 0
  00386	66 90		 npad	 2
$LN47@DecomposeL:
  00388	00 00 00 00	 DD	 $LN4@DecomposeL
  0038c	00 00 00 00	 DD	 $LN10@DecomposeL
  00390	00 00 00 00	 DD	 $LN14@DecomposeL
  00394	00 00 00 00	 DD	 $LN16@DecomposeL
  00398	00 00 00 00	 DD	 $LN22@DecomposeL
  0039c	00 00 00 00	 DD	 $LN26@DecomposeL
  003a0	00 00 00 00	 DD	 $LN5@DecomposeL
  003a4	00 00 00 00	 DD	 $LN11@DecomposeL
  003a8	00 00 00 00	 DD	 $LN15@DecomposeL
  003ac	00 00 00 00	 DD	 $LN17@DecomposeL
  003b0	00 00 00 00	 DD	 $LN23@DecomposeL
  003b4	00 00 00 00	 DD	 $LN2@DecomposeL
$LN46@DecomposeL:
  003b8	00		 DB	 0
  003b9	00		 DB	 0
  003ba	0b		 DB	 11			; 0000000bH
  003bb	00		 DB	 0
  003bc	0b		 DB	 11			; 0000000bH
  003bd	0b		 DB	 11			; 0000000bH
  003be	0b		 DB	 11			; 0000000bH
  003bf	0b		 DB	 11			; 0000000bH
  003c0	01		 DB	 1
  003c1	01		 DB	 1
  003c2	0b		 DB	 11			; 0000000bH
  003c3	0b		 DB	 11			; 0000000bH
  003c4	02		 DB	 2
  003c5	02		 DB	 2
  003c6	0b		 DB	 11			; 0000000bH
  003c7	0b		 DB	 11			; 0000000bH
  003c8	0b		 DB	 11			; 0000000bH
  003c9	0b		 DB	 11			; 0000000bH
  003ca	03		 DB	 3
  003cb	03		 DB	 3
  003cc	0b		 DB	 11			; 0000000bH
  003cd	03		 DB	 3
  003ce	0b		 DB	 11			; 0000000bH
  003cf	0b		 DB	 11			; 0000000bH
  003d0	0b		 DB	 11			; 0000000bH
  003d1	04		 DB	 4
  003d2	04		 DB	 4
  003d3	0b		 DB	 11			; 0000000bH
  003d4	0b		 DB	 11			; 0000000bH
  003d5	05		 DB	 5
  003d6	0b		 DB	 11			; 0000000bH
  003d7	0b		 DB	 11			; 0000000bH
  003d8	06		 DB	 6
  003d9	06		 DB	 6
  003da	0b		 DB	 11			; 0000000bH
  003db	06		 DB	 6
  003dc	0b		 DB	 11			; 0000000bH
  003dd	0b		 DB	 11			; 0000000bH
  003de	0b		 DB	 11			; 0000000bH
  003df	0b		 DB	 11			; 0000000bH
  003e0	07		 DB	 7
  003e1	07		 DB	 7
  003e2	0b		 DB	 11			; 0000000bH
  003e3	0b		 DB	 11			; 0000000bH
  003e4	08		 DB	 8
  003e5	08		 DB	 8
  003e6	0b		 DB	 11			; 0000000bH
  003e7	0b		 DB	 11			; 0000000bH
  003e8	0b		 DB	 11			; 0000000bH
  003e9	0b		 DB	 11			; 0000000bH
  003ea	09		 DB	 9
  003eb	09		 DB	 9
  003ec	0b		 DB	 11			; 0000000bH
  003ed	09		 DB	 9
  003ee	0b		 DB	 11			; 0000000bH
  003ef	0b		 DB	 11			; 0000000bH
  003f0	0b		 DB	 11			; 0000000bH
  003f1	0a		 DB	 10			; 0000000aH
  003f2	0a		 DB	 10			; 0000000aH
  003f3	90		 npad	 1
$LN49@DecomposeL:
  003f4	00 00 00 00	 DD	 $LN5@DecomposeL
  003f8	00 00 00 00	 DD	 $LN8@DecomposeL
  003fc	00 00 00 00	 DD	 $LN9@DecomposeL
  00400	00 00 00 00	 DD	 $LN6@DecomposeL
  00404	00 00 00 00	 DD	 $LN7@DecomposeL
  00408	00 00 00 00	 DD	 $LN10@DecomposeL
  0040c	00 00 00 00	 DD	 $LN11@DecomposeL
  00410	00 00 00 00	 DD	 $LN12@DecomposeL
  00414	00 00 00 00	 DD	 $LN13@DecomposeL
$LN48@DecomposeL:
  00418	00		 DB	 0
  00419	01		 DB	 1
  0041a	02		 DB	 2
  0041b	01		 DB	 1
  0041c	02		 DB	 2
  0041d	01		 DB	 1
  0041e	02		 DB	 2
  0041f	01		 DB	 1
  00420	02		 DB	 2
  00421	01		 DB	 1
  00422	02		 DB	 2
  00423	03		 DB	 3
  00424	04		 DB	 4
  00425	03		 DB	 3
  00426	04		 DB	 4
  00427	03		 DB	 3
  00428	04		 DB	 4
  00429	03		 DB	 3
  0042a	04		 DB	 4
  0042b	03		 DB	 3
  0042c	04		 DB	 4
  0042d	05		 DB	 5
  0042e	06		 DB	 6
  0042f	05		 DB	 5
  00430	06		 DB	 6
  00431	05		 DB	 5
  00432	06		 DB	 6
  00433	07		 DB	 7
  00434	08		 DB	 8
  00435	0f 1f 00	 npad	 3
$LN51@DecomposeL:
  00438	00 00 00 00	 DD	 $LN13@DecomposeL
  0043c	00 00 00 00	 DD	 $LN12@DecomposeL
  00440	00 00 00 00	 DD	 $LN14@DecomposeL
  00444	00 00 00 00	 DD	 $LN15@DecomposeL
  00448	00 00 00 00	 DD	 $LN16@DecomposeL
  0044c	00 00 00 00	 DD	 $LN17@DecomposeL
  00450	00 00 00 00	 DD	 $LN18@DecomposeL
  00454	00 00 00 00	 DD	 $LN19@DecomposeL
  00458	00 00 00 00	 DD	 $LN20@DecomposeL
  0045c	00 00 00 00	 DD	 $LN21@DecomposeL
  00460	00 00 00 00	 DD	 $LN22@DecomposeL
  00464	00 00 00 00	 DD	 $LN23@DecomposeL
  00468	00 00 00 00	 DD	 $LN24@DecomposeL
  0046c	00 00 00 00	 DD	 $LN25@DecomposeL
  00470	00 00 00 00	 DD	 $LN26@DecomposeL
  00474	00 00 00 00	 DD	 $LN27@DecomposeL
$LN50@DecomposeL:
  00478	00		 DB	 0
  00479	01		 DB	 1
  0047a	00		 DB	 0
  0047b	01		 DB	 1
  0047c	00		 DB	 0
  0047d	01		 DB	 1
  0047e	00		 DB	 0
  0047f	02		 DB	 2
  00480	03		 DB	 3
  00481	02		 DB	 2
  00482	03		 DB	 3
  00483	04		 DB	 4
  00484	05		 DB	 5
  00485	04		 DB	 4
  00486	05		 DB	 5
  00487	06		 DB	 6
  00488	07		 DB	 7
  00489	06		 DB	 6
  0048a	07		 DB	 7
  0048b	06		 DB	 6
  0048c	07		 DB	 7
  0048d	06		 DB	 6
  0048e	07		 DB	 7
  0048f	06		 DB	 6
  00490	07		 DB	 7
  00491	08		 DB	 8
  00492	09		 DB	 9
  00493	08		 DB	 8
  00494	09		 DB	 9
  00495	08		 DB	 8
  00496	09		 DB	 9
  00497	08		 DB	 8
  00498	09		 DB	 9
  00499	08		 DB	 8
  0049a	09		 DB	 9
  0049b	0a		 DB	 10			; 0000000aH
  0049c	0b		 DB	 11			; 0000000bH
  0049d	0a		 DB	 10			; 0000000aH
  0049e	0b		 DB	 11			; 0000000bH
  0049f	0c		 DB	 12			; 0000000cH
  004a0	0d		 DB	 13			; 0000000dH
  004a1	0c		 DB	 12			; 0000000cH
  004a2	0d		 DB	 13			; 0000000dH
  004a3	0c		 DB	 12			; 0000000cH
  004a4	0d		 DB	 13			; 0000000dH
  004a5	0c		 DB	 12			; 0000000cH
  004a6	0d		 DB	 13			; 0000000dH
  004a7	0c		 DB	 12			; 0000000cH
  004a8	0d		 DB	 13			; 0000000dH
  004a9	0e		 DB	 14			; 0000000eH
  004aa	0f		 DB	 15			; 0000000fH
  004ab	0e		 DB	 14			; 0000000eH
  004ac	0f		 DB	 15			; 0000000fH
  004ad	0e		 DB	 14			; 0000000eH
  004ae	0f		 DB	 15			; 0000000fH
  004af	0e		 DB	 14			; 0000000eH
  004b0	0f		 DB	 15			; 0000000fH
?DecomposeLetter@@YA_N_WPAD@Z ENDP			; DecomposeLetter
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?ComposeTone@@YA_W_W0@Z
_TEXT	SEGMENT
_col$ = -16						; size = 4
tv65 = -12						; size = 4
_row$ = -8						; size = 4
tv72 = -4						; size = 4
_prev$ = 8						; size = 2
_tone$ = 12						; size = 2
?ComposeTone@@YA_W_W0@Z PROC				; ComposeTone, COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 85   : 	int col, row;
; 86   : 
; 87   : 	switch(tone)

  00006	0f b7 45 0c	 movzx	 eax, WORD PTR _tone$[ebp]
  0000a	89 45 f4	 mov	 DWORD PTR tv65[ebp], eax
  0000d	81 7d f4 00 03
	00 00		 cmp	 DWORD PTR tv65[ebp], 768 ; 00000300H
  00014	74 2c		 je	 SHORT $LN7@ComposeTon
  00016	81 7d f4 01 03
	00 00		 cmp	 DWORD PTR tv65[ebp], 769 ; 00000301H
  0001d	74 1d		 je	 SHORT $LN6@ComposeTon
  0001f	81 7d f4 03 03
	00 00		 cmp	 DWORD PTR tv65[ebp], 771 ; 00000303H
  00026	74 2c		 je	 SHORT $LN9@ComposeTon
  00028	81 7d f4 09 03
	00 00		 cmp	 DWORD PTR tv65[ebp], 777 ; 00000309H
  0002f	74 1a		 je	 SHORT $LN8@ComposeTon
  00031	81 7d f4 23 03
	00 00		 cmp	 DWORD PTR tv65[ebp], 803 ; 00000323H
  00038	74 23		 je	 SHORT $LN10@ComposeTon
  0003a	eb 2a		 jmp	 SHORT $LN11@ComposeTon
$LN6@ComposeTon:

; 88   : 	{
; 89   : 	case 0x0301:	col = 0;	break;

  0003c	83 65 f0 00	 and	 DWORD PTR _col$[ebp], 0
  00040	eb 2d		 jmp	 SHORT $LN2@ComposeTon
$LN7@ComposeTon:

; 90   : 	case 0x0300:	col = 1;	break;

  00042	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _col$[ebp], 1
  00049	eb 24		 jmp	 SHORT $LN2@ComposeTon
$LN8@ComposeTon:

; 91   : 	case 0x0309:	col = 2;	break;

  0004b	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR _col$[ebp], 2
  00052	eb 1b		 jmp	 SHORT $LN2@ComposeTon
$LN9@ComposeTon:

; 92   : 	case 0x0303:	col = 3;	break;

  00054	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _col$[ebp], 3
  0005b	eb 12		 jmp	 SHORT $LN2@ComposeTon
$LN10@ComposeTon:

; 93   : 	case 0x0323:	col = 4;	break;

  0005d	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR _col$[ebp], 4
  00064	eb 09		 jmp	 SHORT $LN2@ComposeTon
$LN11@ComposeTon:

; 94   : 	default:
; 95   : 		return prev;

  00066	66 8b 45 08	 mov	 ax, WORD PTR _prev$[ebp]
  0006a	e9 4f 02 00 00	 jmp	 $LN1@ComposeTon
$LN2@ComposeTon:

; 96   : 	}
; 97   : 
; 98   : 	switch(prev)

  0006f	0f b7 45 08	 movzx	 eax, WORD PTR _prev$[ebp]
  00073	89 45 fc	 mov	 DWORD PTR tv72[ebp], eax
  00076	81 7d fc c2 00
	00 00		 cmp	 DWORD PTR tv72[ebp], 194 ; 000000c2H
  0007d	0f 8f 95 00 00
	00		 jg	 $LN38@ComposeTon
  00083	81 7d fc c2 00
	00 00		 cmp	 DWORD PTR tv72[ebp], 194 ; 000000c2H
  0008a	0f 84 53 01 00
	00		 je	 $LN16@ComposeTon
  00090	83 7d fc 61	 cmp	 DWORD PTR tv72[ebp], 97	; 00000061H
  00094	7f 4b		 jg	 SHORT $LN39@ComposeTon
  00096	83 7d fc 61	 cmp	 DWORD PTR tv72[ebp], 97	; 00000061H
  0009a	0f 84 1f 01 00
	00		 je	 $LN13@ComposeTon
  000a0	83 7d fc 41	 cmp	 DWORD PTR tv72[ebp], 65	; 00000041H
  000a4	0f 84 0c 01 00
	00		 je	 $LN12@ComposeTon
  000aa	83 7d fc 45	 cmp	 DWORD PTR tv72[ebp], 69	; 00000045H
  000ae	0f 84 47 01 00
	00		 je	 $LN18@ComposeTon
  000b4	83 7d fc 49	 cmp	 DWORD PTR tv72[ebp], 73	; 00000049H
  000b8	0f 84 6d 01 00
	00		 je	 $LN22@ComposeTon
  000be	83 7d fc 4f	 cmp	 DWORD PTR tv72[ebp], 79	; 0000004fH
  000c2	0f 84 75 01 00
	00		 je	 $LN24@ComposeTon
  000c8	83 7d fc 55	 cmp	 DWORD PTR tv72[ebp], 85	; 00000055H
  000cc	0f 84 a1 01 00
	00		 je	 $LN30@ComposeTon
  000d2	83 7d fc 59	 cmp	 DWORD PTR tv72[ebp], 89	; 00000059H
  000d6	0f 84 bb 01 00
	00		 je	 $LN34@ComposeTon
  000dc	e9 c8 01 00 00	 jmp	 $LN36@ComposeTon
$LN39@ComposeTon:
  000e1	83 7d fc 65	 cmp	 DWORD PTR tv72[ebp], 101 ; 00000065H
  000e5	0f 84 1c 01 00
	00		 je	 $LN19@ComposeTon
  000eb	83 7d fc 69	 cmp	 DWORD PTR tv72[ebp], 105 ; 00000069H
  000ef	0f 84 3f 01 00
	00		 je	 $LN23@ComposeTon
  000f5	83 7d fc 6f	 cmp	 DWORD PTR tv72[ebp], 111 ; 0000006fH
  000f9	0f 84 47 01 00
	00		 je	 $LN25@ComposeTon
  000ff	83 7d fc 75	 cmp	 DWORD PTR tv72[ebp], 117 ; 00000075H
  00103	0f 84 73 01 00
	00		 je	 $LN31@ComposeTon
  00109	83 7d fc 79	 cmp	 DWORD PTR tv72[ebp], 121 ; 00000079H
  0010d	0f 84 8d 01 00
	00		 je	 $LN35@ComposeTon
  00113	e9 91 01 00 00	 jmp	 $LN36@ComposeTon
$LN38@ComposeTon:
  00118	81 7d fc 02 01
	00 00		 cmp	 DWORD PTR tv72[ebp], 258 ; 00000102H
  0011f	7f 53		 jg	 SHORT $LN40@ComposeTon
  00121	81 7d fc 02 01
	00 00		 cmp	 DWORD PTR tv72[ebp], 258 ; 00000102H
  00128	0f 84 9d 00 00
	00		 je	 $LN14@ComposeTon
  0012e	81 7d fc ca 00
	00 00		 cmp	 DWORD PTR tv72[ebp], 202 ; 000000caH
  00135	0f 84 d8 00 00
	00		 je	 $LN20@ComposeTon
  0013b	81 7d fc d4 00
	00 00		 cmp	 DWORD PTR tv72[ebp], 212 ; 000000d4H
  00142	0f 84 07 01 00
	00		 je	 $LN26@ComposeTon
  00148	81 7d fc e2 00
	00 00		 cmp	 DWORD PTR tv72[ebp], 226 ; 000000e2H
  0014f	0f 84 9a 00 00
	00		 je	 $LN17@ComposeTon
  00155	81 7d fc ea 00
	00 00		 cmp	 DWORD PTR tv72[ebp], 234 ; 000000eaH
  0015c	0f 84 bd 00 00
	00		 je	 $LN21@ComposeTon
  00162	81 7d fc f4 00
	00 00		 cmp	 DWORD PTR tv72[ebp], 244 ; 000000f4H
  00169	0f 84 e9 00 00
	00		 je	 $LN27@ComposeTon
  0016f	e9 35 01 00 00	 jmp	 $LN36@ComposeTon
$LN40@ComposeTon:
  00174	81 7d fc 03 01
	00 00		 cmp	 DWORD PTR tv72[ebp], 259 ; 00000103H
  0017b	74 5a		 je	 SHORT $LN15@ComposeTon
  0017d	81 7d fc a0 01
	00 00		 cmp	 DWORD PTR tv72[ebp], 416 ; 000001a0H
  00184	0f 84 d7 00 00
	00		 je	 $LN28@ComposeTon
  0018a	81 7d fc a1 01
	00 00		 cmp	 DWORD PTR tv72[ebp], 417 ; 000001a1H
  00191	0f 84 d3 00 00
	00		 je	 $LN29@ComposeTon
  00197	81 7d fc af 01
	00 00		 cmp	 DWORD PTR tv72[ebp], 431 ; 000001afH
  0019e	0f 84 e1 00 00
	00		 je	 $LN32@ComposeTon
  001a4	81 7d fc b0 01
	00 00		 cmp	 DWORD PTR tv72[ebp], 432 ; 000001b0H
  001ab	0f 84 dd 00 00
	00		 je	 $LN33@ComposeTon
  001b1	e9 f3 00 00 00	 jmp	 $LN36@ComposeTon
$LN12@ComposeTon:

; 99   : 	{
; 100  : 	case 0x0041:	row = 0;	break;

  001b6	83 65 f8 00	 and	 DWORD PTR _row$[ebp], 0
  001ba	e9 f0 00 00 00	 jmp	 $LN4@ComposeTon
$LN13@ComposeTon:

; 101  : 	case 0x0061:	row = 1;	break;

  001bf	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _row$[ebp], 1
  001c6	e9 e4 00 00 00	 jmp	 $LN4@ComposeTon
$LN14@ComposeTon:

; 102  : 	case 0x0102:	row = 2;	break;

  001cb	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _row$[ebp], 2
  001d2	e9 d8 00 00 00	 jmp	 $LN4@ComposeTon
$LN15@ComposeTon:

; 103  : 	case 0x0103:	row = 3;	break;

  001d7	c7 45 f8 03 00
	00 00		 mov	 DWORD PTR _row$[ebp], 3
  001de	e9 cc 00 00 00	 jmp	 $LN4@ComposeTon
$LN16@ComposeTon:

; 104  : 	case 0x00C2:	row = 4;	break;

  001e3	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _row$[ebp], 4
  001ea	e9 c0 00 00 00	 jmp	 $LN4@ComposeTon
$LN17@ComposeTon:

; 105  : 	case 0x00E2:	row = 5;	break;

  001ef	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _row$[ebp], 5
  001f6	e9 b4 00 00 00	 jmp	 $LN4@ComposeTon
$LN18@ComposeTon:

; 106  : 	case 0x0045:	row = 6;	break;

  001fb	c7 45 f8 06 00
	00 00		 mov	 DWORD PTR _row$[ebp], 6
  00202	e9 a8 00 00 00	 jmp	 $LN4@ComposeTon
$LN19@ComposeTon:

; 107  : 	case 0x0065:	row = 7;	break;

  00207	c7 45 f8 07 00
	00 00		 mov	 DWORD PTR _row$[ebp], 7
  0020e	e9 9c 00 00 00	 jmp	 $LN4@ComposeTon
$LN20@ComposeTon:

; 108  : 	case 0x00CA:	row = 8;	break;

  00213	c7 45 f8 08 00
	00 00		 mov	 DWORD PTR _row$[ebp], 8
  0021a	e9 90 00 00 00	 jmp	 $LN4@ComposeTon
$LN21@ComposeTon:

; 109  : 	case 0x00EA:	row = 9;	break;

  0021f	c7 45 f8 09 00
	00 00		 mov	 DWORD PTR _row$[ebp], 9
  00226	e9 84 00 00 00	 jmp	 $LN4@ComposeTon
$LN22@ComposeTon:

; 110  : 	case 0x0049:	row = 10;	break;

  0022b	c7 45 f8 0a 00
	00 00		 mov	 DWORD PTR _row$[ebp], 10 ; 0000000aH
  00232	eb 7b		 jmp	 SHORT $LN4@ComposeTon
$LN23@ComposeTon:

; 111  : 	case 0x0069:	row = 11;	break;

  00234	c7 45 f8 0b 00
	00 00		 mov	 DWORD PTR _row$[ebp], 11 ; 0000000bH
  0023b	eb 72		 jmp	 SHORT $LN4@ComposeTon
$LN24@ComposeTon:

; 112  : 	case 0x004F:	row = 12;	break;

  0023d	c7 45 f8 0c 00
	00 00		 mov	 DWORD PTR _row$[ebp], 12 ; 0000000cH
  00244	eb 69		 jmp	 SHORT $LN4@ComposeTon
$LN25@ComposeTon:

; 113  : 	case 0x006F:	row = 13;	break;

  00246	c7 45 f8 0d 00
	00 00		 mov	 DWORD PTR _row$[ebp], 13 ; 0000000dH
  0024d	eb 60		 jmp	 SHORT $LN4@ComposeTon
$LN26@ComposeTon:

; 114  : 	case 0x00D4:	row = 14;	break;

  0024f	c7 45 f8 0e 00
	00 00		 mov	 DWORD PTR _row$[ebp], 14 ; 0000000eH
  00256	eb 57		 jmp	 SHORT $LN4@ComposeTon
$LN27@ComposeTon:

; 115  : 	case 0x00F4:	row = 15;	break;

  00258	c7 45 f8 0f 00
	00 00		 mov	 DWORD PTR _row$[ebp], 15 ; 0000000fH
  0025f	eb 4e		 jmp	 SHORT $LN4@ComposeTon
$LN28@ComposeTon:

; 116  : 	case 0x01A0:	row = 16;	break;

  00261	c7 45 f8 10 00
	00 00		 mov	 DWORD PTR _row$[ebp], 16 ; 00000010H
  00268	eb 45		 jmp	 SHORT $LN4@ComposeTon
$LN29@ComposeTon:

; 117  : 	case 0x01A1:	row = 17;	break;

  0026a	c7 45 f8 11 00
	00 00		 mov	 DWORD PTR _row$[ebp], 17 ; 00000011H
  00271	eb 3c		 jmp	 SHORT $LN4@ComposeTon
$LN30@ComposeTon:

; 118  : 	case 0x0055:	row = 18;	break;

  00273	c7 45 f8 12 00
	00 00		 mov	 DWORD PTR _row$[ebp], 18 ; 00000012H
  0027a	eb 33		 jmp	 SHORT $LN4@ComposeTon
$LN31@ComposeTon:

; 119  : 	case 0x0075:	row = 19;	break;

  0027c	c7 45 f8 13 00
	00 00		 mov	 DWORD PTR _row$[ebp], 19 ; 00000013H
  00283	eb 2a		 jmp	 SHORT $LN4@ComposeTon
$LN32@ComposeTon:

; 120  : 	case 0x01AF:	row = 20;	break;

  00285	c7 45 f8 14 00
	00 00		 mov	 DWORD PTR _row$[ebp], 20 ; 00000014H
  0028c	eb 21		 jmp	 SHORT $LN4@ComposeTon
$LN33@ComposeTon:

; 121  : 	case 0x01B0:	row = 21;	break;

  0028e	c7 45 f8 15 00
	00 00		 mov	 DWORD PTR _row$[ebp], 21 ; 00000015H
  00295	eb 18		 jmp	 SHORT $LN4@ComposeTon
$LN34@ComposeTon:

; 122  : 	case 0x0059:	row = 22;	break;

  00297	c7 45 f8 16 00
	00 00		 mov	 DWORD PTR _row$[ebp], 22 ; 00000016H
  0029e	eb 0f		 jmp	 SHORT $LN4@ComposeTon
$LN35@ComposeTon:

; 123  : 	case 0x0079:	row = 23;	break;

  002a0	c7 45 f8 17 00
	00 00		 mov	 DWORD PTR _row$[ebp], 23 ; 00000017H
  002a7	eb 06		 jmp	 SHORT $LN4@ComposeTon
$LN36@ComposeTon:

; 124  : 	default:
; 125  : 		return prev;

  002a9	66 8b 45 08	 mov	 ax, WORD PTR _prev$[ebp]
  002ad	eb 0f		 jmp	 SHORT $LN1@ComposeTon
$LN4@ComposeTon:

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  002af	6b 45 f8 0a	 imul	 eax, DWORD PTR _row$[ebp], 10
  002b3	8b 4d f0	 mov	 ecx, DWORD PTR _col$[ebp]
  002b6	66 8b 84 48 00
	00 00 00	 mov	 ax, WORD PTR ?cp1258_composed_table@@3PAY04_WA[eax+ecx*2]
$LN1@ComposeTon:

; 129  : }

  002be	c9		 leave
  002bf	c3		 ret	 0
?ComposeTone@@YA_W_W0@Z ENDP				; ComposeTone
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?IsTone@@YA_N_W@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
_tone$ = 8						; size = 2
?IsTone@@YA_N_W@Z PROC					; IsTone, COMDAT

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 70   : 	switch(tone)

  00004	0f b7 45 08	 movzx	 eax, WORD PTR _tone$[ebp]
  00008	89 45 fc	 mov	 DWORD PTR tv65[ebp], eax
  0000b	81 7d fc 00 03
	00 00		 cmp	 DWORD PTR tv65[ebp], 768 ; 00000300H
  00012	7c 2a		 jl	 SHORT $LN5@IsTone
  00014	81 7d fc 01 03
	00 00		 cmp	 DWORD PTR tv65[ebp], 769 ; 00000301H
  0001b	7e 1d		 jle	 SHORT $LN4@IsTone
  0001d	81 7d fc 03 03
	00 00		 cmp	 DWORD PTR tv65[ebp], 771 ; 00000303H
  00024	74 14		 je	 SHORT $LN4@IsTone
  00026	81 7d fc 09 03
	00 00		 cmp	 DWORD PTR tv65[ebp], 777 ; 00000309H
  0002d	74 0b		 je	 SHORT $LN4@IsTone
  0002f	81 7d fc 23 03
	00 00		 cmp	 DWORD PTR tv65[ebp], 803 ; 00000323H
  00036	74 02		 je	 SHORT $LN4@IsTone
  00038	eb 04		 jmp	 SHORT $LN5@IsTone
$LN4@IsTone:

; 71   : 	{
; 72   : 	case 0x0300:
; 73   : 	case 0x0301:
; 74   : 	case 0x0309:
; 75   : 	case 0x0303:
; 76   : 	case 0x0323:
; 77   : 		return true;

  0003a	b0 01		 mov	 al, 1
  0003c	eb 02		 jmp	 SHORT $LN1@IsTone
$LN5@IsTone:

; 78   : 	default:
; 79   : 		return false;

  0003e	32 c0		 xor	 al, al
$LN1@IsTone:

; 80   : 	}
; 81   : }

  00040	c9		 leave
  00041	c3		 ret	 0
?IsTone@@YA_N_W@Z ENDP					; IsTone
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z
_TEXT	SEGMENT
_src$ = -12						; size = 4
_dest$ = -8						; size = 4
_tone$1 = -2						; size = 1
_letter$2 = -1						; size = 1
_wide$ = 8						; size = 4
_wideLen$ = 12						; size = 4
_multi$ = 16						; size = 4
_multiLen$ = 20						; size = 4
?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z PROC	; EL_String_Encode_Vietnamese, COMDAT

; 526  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 527  : 	if(wideLen < 0)

  00006	83 7d 0c 00	 cmp	 DWORD PTR _wideLen$[ebp], 0
  0000a	7d 0d		 jge	 SHORT $LN4@EL_String_

; 528  : 		wideLen = (int)wcslen(wide) + 1;

  0000c	ff 75 08	 push	 DWORD PTR _wide$[ebp]
  0000f	e8 00 00 00 00	 call	 _wcslen
  00014	59		 pop	 ecx
  00015	40		 inc	 eax
  00016	89 45 0c	 mov	 DWORD PTR _wideLen$[ebp], eax
$LN4@EL_String_:

; 529  : 
; 530  : 	int src = 0;

  00019	83 65 f4 00	 and	 DWORD PTR _src$[ebp], 0

; 531  : 	int dest = 0;

  0001d	83 65 f8 00	 and	 DWORD PTR _dest$[ebp], 0

; 532  : 
; 533  : 	if(wideLen > 0)

  00021	83 7d 0c 00	 cmp	 DWORD PTR _wideLen$[ebp], 0
  00025	7e 7f		 jle	 SHORT $LN5@EL_String_
$LN2@EL_String_:

; 534  : 	{
; 535  : 		while(src < wideLen && dest < multiLen)

  00027	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  0002a	3b 45 0c	 cmp	 eax, DWORD PTR _wideLen$[ebp]
  0002d	7d 77		 jge	 SHORT $LN5@EL_String_
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _dest$[ebp]
  00032	3b 45 14	 cmp	 eax, DWORD PTR _multiLen$[ebp]
  00035	7d 6f		 jge	 SHORT $LN5@EL_String_

; 536  : 		{
; 537  : 			char letter;
; 538  : 			if(DecomposeLetter(wide[src], &letter))

  00037	8d 45 ff	 lea	 eax, DWORD PTR _letter$2[ebp]
  0003a	50		 push	 eax
  0003b	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _wide$[ebp]
  00041	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?DecomposeLetter@@YA_N_WPAD@Z ; DecomposeLetter
  0004b	59		 pop	 ecx
  0004c	59		 pop	 ecx
  0004d	0f b6 c0	 movzx	 eax, al
  00050	85 c0		 test	 eax, eax
  00052	74 12		 je	 SHORT $LN6@EL_String_

; 539  : 			{
; 540  : 				multi[dest++] = letter;

  00054	8b 45 10	 mov	 eax, DWORD PTR _multi$[ebp]
  00057	03 45 f8	 add	 eax, DWORD PTR _dest$[ebp]
  0005a	8a 4d ff	 mov	 cl, BYTE PTR _letter$2[ebp]
  0005d	88 08		 mov	 BYTE PTR [eax], cl
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _dest$[ebp]
  00062	40		 inc	 eax
  00063	89 45 f8	 mov	 DWORD PTR _dest$[ebp], eax
$LN6@EL_String_:

; 541  : 			}
; 542  : 
; 543  : 			char tone;
; 544  : 			if(DecomposeTone(wide[src], &tone) && dest < multiLen)

  00066	8d 45 fe	 lea	 eax, DWORD PTR _tone$1[ebp]
  00069	50		 push	 eax
  0006a	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _wide$[ebp]
  00070	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?DecomposeTone@@YA_N_WPAD@Z ; DecomposeTone
  0007a	59		 pop	 ecx
  0007b	59		 pop	 ecx
  0007c	0f b6 c0	 movzx	 eax, al
  0007f	85 c0		 test	 eax, eax
  00081	74 1a		 je	 SHORT $LN7@EL_String_
  00083	8b 45 f8	 mov	 eax, DWORD PTR _dest$[ebp]
  00086	3b 45 14	 cmp	 eax, DWORD PTR _multiLen$[ebp]
  00089	7d 12		 jge	 SHORT $LN7@EL_String_

; 545  : 			{
; 546  : 				multi[dest++] = tone;

  0008b	8b 45 10	 mov	 eax, DWORD PTR _multi$[ebp]
  0008e	03 45 f8	 add	 eax, DWORD PTR _dest$[ebp]
  00091	8a 4d fe	 mov	 cl, BYTE PTR _tone$1[ebp]
  00094	88 08		 mov	 BYTE PTR [eax], cl
  00096	8b 45 f8	 mov	 eax, DWORD PTR _dest$[ebp]
  00099	40		 inc	 eax
  0009a	89 45 f8	 mov	 DWORD PTR _dest$[ebp], eax
$LN7@EL_String_:

; 547  : 			}
; 548  : 
; 549  : 			++src;

  0009d	8b 45 f4	 mov	 eax, DWORD PTR _src$[ebp]
  000a0	40		 inc	 eax
  000a1	89 45 f4	 mov	 DWORD PTR _src$[ebp], eax

; 550  : 		}

  000a4	eb 81		 jmp	 SHORT $LN2@EL_String_
$LN5@EL_String_:

; 551  : 	}
; 552  : 
; 553  : 	return dest;

  000a6	8b 45 f8	 mov	 eax, DWORD PTR _dest$[ebp]

; 554  : }

  000a9	c9		 leave
  000aa	c3		 ret	 0
?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z ENDP	; EL_String_Encode_Vietnamese
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z
_TEXT	SEGMENT
_unicode$1 = -16					; size = 2
_prev$2 = -12						; size = 2
_src$ = -8						; size = 4
_dest$ = -4						; size = 4
_multi$ = 8						; size = 4
_multiLen$ = 12						; size = 4
_wide$ = 16						; size = 4
_wideLen$ = 20						; size = 4
?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z PROC	; EL_String_Decode_Vietnamese, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  : 	if(multiLen < 0)

  00006	83 7d 0c 00	 cmp	 DWORD PTR _multiLen$[ebp], 0
  0000a	7d 0d		 jge	 SHORT $LN4@EL_String_

; 134  : 		multiLen = (int)strlen(multi) + 1;

  0000c	ff 75 08	 push	 DWORD PTR _multi$[ebp]
  0000f	e8 00 00 00 00	 call	 _strlen
  00014	59		 pop	 ecx
  00015	40		 inc	 eax
  00016	89 45 0c	 mov	 DWORD PTR _multiLen$[ebp], eax
$LN4@EL_String_:

; 135  : 
; 136  : 	int src = 0;

  00019	83 65 f8 00	 and	 DWORD PTR _src$[ebp], 0

; 137  : 	int dest = 0;

  0001d	83 65 fc 00	 and	 DWORD PTR _dest$[ebp], 0

; 138  : 
; 139  : 	if(multiLen > 0)

  00021	83 7d 0c 00	 cmp	 DWORD PTR _multiLen$[ebp], 0
  00025	0f 8e a7 00 00
	00		 jle	 $LN5@EL_String_

; 140  : 	{
; 141  : 		/* 첫글자는 무조건 변경 */ 
; 142  : 		wchar_t prev = cp1258_to_unicode[(BYTE)multi[src++]];

  0002b	8b 45 08	 mov	 eax, DWORD PTR _multi$[ebp]
  0002e	03 45 f8	 add	 eax, DWORD PTR _src$[ebp]
  00031	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00034	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR ?cp1258_to_unicode@@3PA_WA[eax*2]
  0003c	66 89 45 f4	 mov	 WORD PTR _prev$2[ebp], ax
  00040	8b 45 f8	 mov	 eax, DWORD PTR _src$[ebp]
  00043	40		 inc	 eax
  00044	89 45 f8	 mov	 DWORD PTR _src$[ebp], eax
$LN2@EL_String_:

; 143  : 
; 144  : 		while(src < multiLen)

  00047	8b 45 f8	 mov	 eax, DWORD PTR _src$[ebp]
  0004a	3b 45 0c	 cmp	 eax, DWORD PTR _multiLen$[ebp]
  0004d	7d 66		 jge	 SHORT $LN3@EL_String_

; 145  : 		{
; 146  : 			wchar_t unicode = cp1258_to_unicode[(BYTE)multi[src]];

  0004f	8b 45 08	 mov	 eax, DWORD PTR _multi$[ebp]
  00052	03 45 f8	 add	 eax, DWORD PTR _src$[ebp]
  00055	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00058	66 8b 04 45 00
	00 00 00	 mov	 ax, WORD PTR ?cp1258_to_unicode@@3PA_WA[eax*2]
  00060	66 89 45 f0	 mov	 WORD PTR _unicode$1[ebp], ax

; 147  : 
; 148  : 			/* 다음 문자가 Tone 인가? */ 
; 149  : 			if(IsTone(unicode))

  00064	ff 75 f0	 push	 DWORD PTR _unicode$1[ebp]
  00067	e8 00 00 00 00	 call	 ?IsTone@@YA_N_W@Z	; IsTone
  0006c	59		 pop	 ecx
  0006d	0f b6 c0	 movzx	 eax, al
  00070	85 c0		 test	 eax, eax
  00072	74 13		 je	 SHORT $LN6@EL_String_

; 150  : 			{
; 151  : 				/* 앞의 문자와 합하자. */ 
; 152  : 				prev = ComposeTone(prev, unicode);

  00074	ff 75 f0	 push	 DWORD PTR _unicode$1[ebp]
  00077	ff 75 f4	 push	 DWORD PTR _prev$2[ebp]
  0007a	e8 00 00 00 00	 call	 ?ComposeTone@@YA_W_W0@Z	; ComposeTone
  0007f	59		 pop	 ecx
  00080	59		 pop	 ecx
  00081	66 89 45 f4	 mov	 WORD PTR _prev$2[ebp], ax

; 153  : 			}

  00085	eb 25		 jmp	 SHORT $LN7@EL_String_
$LN6@EL_String_:

; 154  : 			else
; 155  : 			{
; 156  : 				/* 일반 문자가 왔다. 앞 문자를 변환 */ 
; 157  : 				if(dest < wideLen)

  00087	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  0008a	3b 45 14	 cmp	 eax, DWORD PTR _wideLen$[ebp]
  0008d	7d 15		 jge	 SHORT $LN8@EL_String_

; 158  : 					wide[dest++] = prev;

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  00092	8b 4d 10	 mov	 ecx, DWORD PTR _wide$[ebp]
  00095	66 8b 55 f4	 mov	 dx, WORD PTR _prev$2[ebp]
  00099	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0009d	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  000a0	40		 inc	 eax
  000a1	89 45 fc	 mov	 DWORD PTR _dest$[ebp], eax
$LN8@EL_String_:

; 159  : 				prev = unicode;

  000a4	66 8b 45 f0	 mov	 ax, WORD PTR _unicode$1[ebp]
  000a8	66 89 45 f4	 mov	 WORD PTR _prev$2[ebp], ax
$LN7@EL_String_:

; 160  : 			}
; 161  : 			++src;

  000ac	8b 45 f8	 mov	 eax, DWORD PTR _src$[ebp]
  000af	40		 inc	 eax
  000b0	89 45 f8	 mov	 DWORD PTR _src$[ebp], eax

; 162  : 		}

  000b3	eb 92		 jmp	 SHORT $LN2@EL_String_
$LN3@EL_String_:

; 163  : 
; 164  : 		if(dest < wideLen)

  000b5	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  000b8	3b 45 14	 cmp	 eax, DWORD PTR _wideLen$[ebp]
  000bb	7d 15		 jge	 SHORT $LN5@EL_String_

; 165  : 			wide[dest++] = prev;

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  000c0	8b 4d 10	 mov	 ecx, DWORD PTR _wide$[ebp]
  000c3	66 8b 55 f4	 mov	 dx, WORD PTR _prev$2[ebp]
  000c7	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  000cb	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]
  000ce	40		 inc	 eax
  000cf	89 45 fc	 mov	 DWORD PTR _dest$[ebp], eax
$LN5@EL_String_:

; 166  : 	}
; 167  : 
; 168  : 	return dest;

  000d2	8b 45 fc	 mov	 eax, DWORD PTR _dest$[ebp]

; 169  : }

  000d5	c9		 leave
  000d6	c3		 ret	 0
?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z ENDP	; EL_String_Decode_Vietnamese
_TEXT	ENDS
END
