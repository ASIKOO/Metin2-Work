; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLocale\Japanese.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ShiftJIS_IsLeadByte@@YAHD@Z			; ShiftJIS_IsLeadByte
PUBLIC	?ShiftJIS_IsTrailByte@@YAHD@Z			; ShiftJIS_IsTrailByte
PUBLIC	?ShiftJIS_StringCompareCI@@YAHPBD0I@Z		; ShiftJIS_StringCompareCI
EXTRN	_tolower:PROC
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLocale\Japanese.cpp
;	COMDAT ?ShiftJIS_StringCompareCI@@YAHPBD0I@Z
_TEXT	SEGMENT
tv67 = -28						; size = 4
tv164 = -24						; size = 4
tv88 = -20						; size = 4
_uszString1$ = -16					; size = 4
_uszString2$ = -12					; size = 4
_c1$ = -8						; size = 2
_c2$ = -4						; size = 2
_szStringLeft$ = 8					; size = 4
_szStringRight$ = 12					; size = 4
_sizeLength$ = 16					; size = 4
?ShiftJIS_StringCompareCI@@YAHPBD0I@Z PROC		; ShiftJIS_StringCompareCI, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 27   : 	const unsigned char* uszString1 = (const unsigned char*) szStringLeft;

  00006	8b 45 08	 mov	 eax, DWORD PTR _szStringLeft$[ebp]
  00009	89 45 f0	 mov	 DWORD PTR _uszString1$[ebp], eax

; 28   : 	const unsigned char* uszString2 = (const unsigned char*) szStringRight;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _szStringRight$[ebp]
  0000f	89 45 f4	 mov	 DWORD PTR _uszString2$[ebp], eax

; 29   : 	unsigned short c1, c2;
; 30   : 
; 31   : 	if( sizeLength == 0 )

  00012	83 7d 10 00	 cmp	 DWORD PTR _sizeLength$[ebp], 0
  00016	75 07		 jne	 SHORT $LN2@ShiftJIS_S

; 32   : 		return 0;

  00018	33 c0		 xor	 eax, eax
  0001a	e9 ca 01 00 00	 jmp	 $LN1@ShiftJIS_S
$LN2@ShiftJIS_S:

; 33   : 	while( sizeLength-- ) {

  0001f	8b 45 10	 mov	 eax, DWORD PTR _sizeLength$[ebp]
  00022	89 45 e4	 mov	 DWORD PTR tv67[ebp], eax
  00025	8b 45 10	 mov	 eax, DWORD PTR _sizeLength$[ebp]
  00028	48		 dec	 eax
  00029	89 45 10	 mov	 DWORD PTR _sizeLength$[ebp], eax
  0002c	83 7d e4 00	 cmp	 DWORD PTR tv67[ebp], 0
  00030	0f 84 b1 01 00
	00		 je	 $LN3@ShiftJIS_S

; 34   : 		c1 = *uszString1++;

  00036	8b 45 f0	 mov	 eax, DWORD PTR _uszString1$[ebp]
  00039	66 0f b6 00	 movzx	 ax, BYTE PTR [eax]
  0003d	66 89 45 f8	 mov	 WORD PTR _c1$[ebp], ax
  00041	8b 45 f0	 mov	 eax, DWORD PTR _uszString1$[ebp]
  00044	40		 inc	 eax
  00045	89 45 f0	 mov	 DWORD PTR _uszString1$[ebp], eax

; 35   : 		if( MACRO_IsLeadByte(c1) ) {

  00048	0f b7 45 f8	 movzx	 eax, WORD PTR _c1$[ebp]
  0004c	3d 81 00 00 00	 cmp	 eax, 129		; 00000081H
  00051	7c 0b		 jl	 SHORT $LN8@ShiftJIS_S
  00053	0f b7 45 f8	 movzx	 eax, WORD PTR _c1$[ebp]
  00057	3d 9f 00 00 00	 cmp	 eax, 159		; 0000009fH
  0005c	7e 1e		 jle	 SHORT $LN7@ShiftJIS_S
$LN8@ShiftJIS_S:
  0005e	0f b7 45 f8	 movzx	 eax, WORD PTR _c1$[ebp]
  00062	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  00067	0f 8c 9e 00 00
	00		 jl	 $LN5@ShiftJIS_S
  0006d	0f b7 45 f8	 movzx	 eax, WORD PTR _c1$[ebp]
  00071	3d fc 00 00 00	 cmp	 eax, 252		; 000000fcH
  00076	0f 8f 8f 00 00
	00		 jg	 $LN5@ShiftJIS_S
$LN7@ShiftJIS_S:

; 36   : 			if( sizeLength == 0 ) {

  0007c	83 7d 10 00	 cmp	 DWORD PTR _sizeLength$[ebp], 0
  00080	75 5b		 jne	 SHORT $LN9@ShiftJIS_S

; 37   : 				c1 = 0;

  00082	33 c0		 xor	 eax, eax
  00084	66 89 45 f8	 mov	 WORD PTR _c1$[ebp], ax

; 38   : 				c2 = MACRO_IsLeadByte( *uszString2 ) ? 0 : *uszString2;

  00088	8b 45 f4	 mov	 eax, DWORD PTR _uszString2$[ebp]
  0008b	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0008e	3d 81 00 00 00	 cmp	 eax, 129		; 00000081H
  00093	7c 0d		 jl	 SHORT $LN24@ShiftJIS_S
  00095	8b 45 f4	 mov	 eax, DWORD PTR _uszString2$[ebp]
  00098	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0009b	3d 9f 00 00 00	 cmp	 eax, 159		; 0000009fH
  000a0	7e 25		 jle	 SHORT $LN26@ShiftJIS_S
$LN24@ShiftJIS_S:
  000a2	8b 45 f4	 mov	 eax, DWORD PTR _uszString2$[ebp]
  000a5	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000a8	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  000ad	7c 0d		 jl	 SHORT $LN25@ShiftJIS_S
  000af	8b 45 f4	 mov	 eax, DWORD PTR _uszString2$[ebp]
  000b2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000b5	3d fc 00 00 00	 cmp	 eax, 252		; 000000fcH
  000ba	7e 0b		 jle	 SHORT $LN26@ShiftJIS_S
$LN25@ShiftJIS_S:
  000bc	8b 45 f4	 mov	 eax, DWORD PTR _uszString2$[ebp]
  000bf	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000c2	89 45 ec	 mov	 DWORD PTR tv88[ebp], eax
  000c5	eb 04		 jmp	 SHORT $LN27@ShiftJIS_S
$LN26@ShiftJIS_S:
  000c7	83 65 ec 00	 and	 DWORD PTR tv88[ebp], 0
$LN27@ShiftJIS_S:
  000cb	66 8b 45 ec	 mov	 ax, WORD PTR tv88[ebp]
  000cf	66 89 45 fc	 mov	 WORD PTR _c2$[ebp], ax

; 39   : 				goto test;

  000d3	e9 d4 00 00 00	 jmp	 $test$30
  000d8	e9 cf 00 00 00	 jmp	 $test$30
$LN9@ShiftJIS_S:

; 40   : 			}
; 41   : 			if( *uszString1 == '\0' )

  000dd	8b 45 f0	 mov	 eax, DWORD PTR _uszString1$[ebp]
  000e0	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000e3	85 c0		 test	 eax, eax
  000e5	75 08		 jne	 SHORT $LN11@ShiftJIS_S

; 42   : 				c1 = 0;

  000e7	33 c0		 xor	 eax, eax
  000e9	66 89 45 f8	 mov	 WORD PTR _c1$[ebp], ax
  000ed	eb 1a		 jmp	 SHORT $LN12@ShiftJIS_S
$LN11@ShiftJIS_S:

; 43   : 			else {
; 44   : 				c1 = ((c1 << 8) | *uszString1++);

  000ef	0f b7 45 f8	 movzx	 eax, WORD PTR _c1$[ebp]
  000f3	c1 e0 08	 shl	 eax, 8
  000f6	8b 4d f0	 mov	 ecx, DWORD PTR _uszString1$[ebp]
  000f9	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000fc	0b c1		 or	 eax, ecx
  000fe	66 89 45 f8	 mov	 WORD PTR _c1$[ebp], ax
  00102	8b 45 f0	 mov	 eax, DWORD PTR _uszString1$[ebp]
  00105	40		 inc	 eax
  00106	89 45 f0	 mov	 DWORD PTR _uszString1$[ebp], eax
$LN12@ShiftJIS_S:

; 45   : 			}
; 46   : 		} else

  00109	eb 0f		 jmp	 SHORT $LN6@ShiftJIS_S
$LN5@ShiftJIS_S:

; 47   : 			c1 = tolower(c1);

  0010b	0f b7 45 f8	 movzx	 eax, WORD PTR _c1$[ebp]
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _tolower
  00115	59		 pop	 ecx
  00116	66 89 45 f8	 mov	 WORD PTR _c1$[ebp], ax
$LN6@ShiftJIS_S:

; 48   : 
; 49   : 		c2 = *uszString2++;

  0011a	8b 45 f4	 mov	 eax, DWORD PTR _uszString2$[ebp]
  0011d	66 0f b6 00	 movzx	 ax, BYTE PTR [eax]
  00121	66 89 45 fc	 mov	 WORD PTR _c2$[ebp], ax
  00125	8b 45 f4	 mov	 eax, DWORD PTR _uszString2$[ebp]
  00128	40		 inc	 eax
  00129	89 45 f4	 mov	 DWORD PTR _uszString2$[ebp], eax

; 50   : 		if( MACRO_IsLeadByte(c2) ) {

  0012c	0f b7 45 fc	 movzx	 eax, WORD PTR _c2$[ebp]
  00130	3d 81 00 00 00	 cmp	 eax, 129		; 00000081H
  00135	7c 0b		 jl	 SHORT $LN16@ShiftJIS_S
  00137	0f b7 45 fc	 movzx	 eax, WORD PTR _c2$[ebp]
  0013b	3d 9f 00 00 00	 cmp	 eax, 159		; 0000009fH
  00140	7e 16		 jle	 SHORT $LN15@ShiftJIS_S
$LN16@ShiftJIS_S:
  00142	0f b7 45 fc	 movzx	 eax, WORD PTR _c2$[ebp]
  00146	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  0014b	7c 50		 jl	 SHORT $LN13@ShiftJIS_S
  0014d	0f b7 45 fc	 movzx	 eax, WORD PTR _c2$[ebp]
  00151	3d fc 00 00 00	 cmp	 eax, 252		; 000000fcH
  00156	7f 45		 jg	 SHORT $LN13@ShiftJIS_S
$LN15@ShiftJIS_S:

; 51   : 			if( sizeLength == 0 ) {

  00158	83 7d 10 00	 cmp	 DWORD PTR _sizeLength$[ebp], 0
  0015c	75 0a		 jne	 SHORT $LN17@ShiftJIS_S

; 52   : 				c2 = 0;

  0015e	33 c0		 xor	 eax, eax
  00160	66 89 45 fc	 mov	 WORD PTR _c2$[ebp], ax

; 53   : 				goto test;

  00164	eb 46		 jmp	 SHORT $test$30
  00166	eb 44		 jmp	 SHORT $test$30
$LN17@ShiftJIS_S:

; 54   : 			}
; 55   : 			sizeLength--;

  00168	8b 45 10	 mov	 eax, DWORD PTR _sizeLength$[ebp]
  0016b	48		 dec	 eax
  0016c	89 45 10	 mov	 DWORD PTR _sizeLength$[ebp], eax

; 56   : 			if( *uszString2 == '\0' )

  0016f	8b 45 f4	 mov	 eax, DWORD PTR _uszString2$[ebp]
  00172	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00175	85 c0		 test	 eax, eax
  00177	75 08		 jne	 SHORT $LN19@ShiftJIS_S

; 57   : 				c2 = 0;

  00179	33 c0		 xor	 eax, eax
  0017b	66 89 45 fc	 mov	 WORD PTR _c2$[ebp], ax
  0017f	eb 1a		 jmp	 SHORT $LN20@ShiftJIS_S
$LN19@ShiftJIS_S:

; 58   : 			else {
; 59   : 				c2 = ((c2 << 8) | *uszString2++);

  00181	0f b7 45 fc	 movzx	 eax, WORD PTR _c2$[ebp]
  00185	c1 e0 08	 shl	 eax, 8
  00188	8b 4d f4	 mov	 ecx, DWORD PTR _uszString2$[ebp]
  0018b	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0018e	0b c1		 or	 eax, ecx
  00190	66 89 45 fc	 mov	 WORD PTR _c2$[ebp], ax
  00194	8b 45 f4	 mov	 eax, DWORD PTR _uszString2$[ebp]
  00197	40		 inc	 eax
  00198	89 45 f4	 mov	 DWORD PTR _uszString2$[ebp], eax
$LN20@ShiftJIS_S:

; 60   : 			}
; 61   : 		} else

  0019b	eb 0f		 jmp	 SHORT $test$30
$LN13@ShiftJIS_S:

; 62   : 			c2 = tolower(c2);

  0019d	0f b7 45 fc	 movzx	 eax, WORD PTR _c2$[ebp]
  001a1	50		 push	 eax
  001a2	e8 00 00 00 00	 call	 _tolower
  001a7	59		 pop	 ecx
  001a8	66 89 45 fc	 mov	 WORD PTR _c2$[ebp], ax
$test$30:

; 63   : test:
; 64   :         if (c1 != c2)

  001ac	0f b7 45 f8	 movzx	 eax, WORD PTR _c1$[ebp]
  001b0	0f b7 4d fc	 movzx	 ecx, WORD PTR _c2$[ebp]
  001b4	3b c1		 cmp	 eax, ecx
  001b6	74 1e		 je	 SHORT $LN21@ShiftJIS_S

; 65   :             return( (c1 > c2) ? 1 : -1);

  001b8	0f b7 45 f8	 movzx	 eax, WORD PTR _c1$[ebp]
  001bc	0f b7 4d fc	 movzx	 ecx, WORD PTR _c2$[ebp]
  001c0	3b c1		 cmp	 eax, ecx
  001c2	7e 09		 jle	 SHORT $LN28@ShiftJIS_S
  001c4	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv164[ebp], 1
  001cb	eb 04		 jmp	 SHORT $LN29@ShiftJIS_S
$LN28@ShiftJIS_S:
  001cd	83 4d e8 ff	 or	 DWORD PTR tv164[ebp], -1
$LN29@ShiftJIS_S:
  001d1	8b 45 e8	 mov	 eax, DWORD PTR tv164[ebp]
  001d4	eb 13		 jmp	 SHORT $LN1@ShiftJIS_S
$LN21@ShiftJIS_S:

; 66   : 
; 67   :         if (c1 == 0)

  001d6	0f b7 45 f8	 movzx	 eax, WORD PTR _c1$[ebp]
  001da	85 c0		 test	 eax, eax
  001dc	75 04		 jne	 SHORT $LN22@ShiftJIS_S

; 68   :             return(0);

  001de	33 c0		 xor	 eax, eax
  001e0	eb 07		 jmp	 SHORT $LN1@ShiftJIS_S
$LN22@ShiftJIS_S:

; 69   : 	}

  001e2	e9 38 fe ff ff	 jmp	 $LN2@ShiftJIS_S
$LN3@ShiftJIS_S:

; 70   : 	return 0;

  001e7	33 c0		 xor	 eax, eax
$LN1@ShiftJIS_S:

; 71   : }

  001e9	c9		 leave
  001ea	c3		 ret	 0
?ShiftJIS_StringCompareCI@@YAHPBD0I@Z ENDP		; ShiftJIS_StringCompareCI
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLocale\Japanese.cpp
;	COMDAT ?ShiftJIS_IsTrailByte@@YAHD@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_byByte$ = -1						; size = 1
_chByte$ = 8						; size = 1
?ShiftJIS_IsTrailByte@@YAHD@Z PROC			; ShiftJIS_IsTrailByte, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 20   : 	const unsigned char byByte = (const unsigned char) chByte;

  00005	8a 45 08	 mov	 al, BYTE PTR _chByte$[ebp]
  00008	88 45 ff	 mov	 BYTE PTR _byByte$[ebp], al

; 21   : 
; 22   : 	return MACRO_IsTailByte( byByte );

  0000b	0f b6 45 ff	 movzx	 eax, BYTE PTR _byByte$[ebp]
  0000f	83 f8 40	 cmp	 eax, 64			; 00000040H
  00012	7c 09		 jl	 SHORT $LN3@ShiftJIS_I
  00014	0f b6 45 ff	 movzx	 eax, BYTE PTR _byByte$[ebp]
  00018	83 f8 7e	 cmp	 eax, 126		; 0000007eH
  0001b	7e 1c		 jle	 SHORT $LN5@ShiftJIS_I
$LN3@ShiftJIS_I:
  0001d	0f b6 45 ff	 movzx	 eax, BYTE PTR _byByte$[ebp]
  00021	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00026	7c 0b		 jl	 SHORT $LN4@ShiftJIS_I
  00028	0f b6 45 ff	 movzx	 eax, BYTE PTR _byByte$[ebp]
  0002c	3d fc 00 00 00	 cmp	 eax, 252		; 000000fcH
  00031	7e 06		 jle	 SHORT $LN5@ShiftJIS_I
$LN4@ShiftJIS_I:
  00033	83 65 f8 00	 and	 DWORD PTR tv72[ebp], 0
  00037	eb 07		 jmp	 SHORT $LN6@ShiftJIS_I
$LN5@ShiftJIS_I:
  00039	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
$LN6@ShiftJIS_I:
  00040	8b 45 f8	 mov	 eax, DWORD PTR tv72[ebp]

; 23   : }

  00043	c9		 leave
  00044	c3		 ret	 0
?ShiftJIS_IsTrailByte@@YAHD@Z ENDP			; ShiftJIS_IsTrailByte
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLocale\Japanese.cpp
;	COMDAT ?ShiftJIS_IsLeadByte@@YAHD@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_byByte$ = -1						; size = 1
_chByte$ = 8						; size = 1
?ShiftJIS_IsLeadByte@@YAHD@Z PROC			; ShiftJIS_IsLeadByte, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 13   : 	const unsigned char byByte = (const unsigned char) chByte;

  00005	8a 45 08	 mov	 al, BYTE PTR _chByte$[ebp]
  00008	88 45 ff	 mov	 BYTE PTR _byByte$[ebp], al

; 14   : 
; 15   : 	return MACRO_IsLeadByte( byByte );

  0000b	0f b6 45 ff	 movzx	 eax, BYTE PTR _byByte$[ebp]
  0000f	3d 81 00 00 00	 cmp	 eax, 129		; 00000081H
  00014	7c 0b		 jl	 SHORT $LN3@ShiftJIS_I
  00016	0f b6 45 ff	 movzx	 eax, BYTE PTR _byByte$[ebp]
  0001a	3d 9f 00 00 00	 cmp	 eax, 159		; 0000009fH
  0001f	7e 1c		 jle	 SHORT $LN5@ShiftJIS_I
$LN3@ShiftJIS_I:
  00021	0f b6 45 ff	 movzx	 eax, BYTE PTR _byByte$[ebp]
  00025	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  0002a	7c 0b		 jl	 SHORT $LN4@ShiftJIS_I
  0002c	0f b6 45 ff	 movzx	 eax, BYTE PTR _byByte$[ebp]
  00030	3d fc 00 00 00	 cmp	 eax, 252		; 000000fcH
  00035	7e 06		 jle	 SHORT $LN5@ShiftJIS_I
$LN4@ShiftJIS_I:
  00037	83 65 f8 00	 and	 DWORD PTR tv72[ebp], 0
  0003b	eb 07		 jmp	 SHORT $LN6@ShiftJIS_I
$LN5@ShiftJIS_I:
  0003d	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
$LN6@ShiftJIS_I:
  00044	8b 45 f8	 mov	 eax, DWORD PTR tv72[ebp]

; 16   : }

  00047	c9		 leave
  00048	c3		 ret	 0
?ShiftJIS_IsLeadByte@@YAHD@Z ENDP			; ShiftJIS_IsLeadByte
_TEXT	ENDS
END
