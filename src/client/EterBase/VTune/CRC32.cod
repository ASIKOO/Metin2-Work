; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\CRC32.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GetCRC32@@YAKPBDI@Z				; GetCRC32
PUBLIC	?GetCaseCRC32@@YAKPBDI@Z			; GetCaseCRC32
PUBLIC	?GetHFILECRC32@@YAKPAX@Z			; GetHFILECRC32
PUBLIC	?GetFileCRC32@@YAKPBD@Z				; GetFileCRC32
PUBLIC	?GetFileSize@@YAKPBD@Z				; GetFileSize
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__GetFileSize@8:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetSystemInfo@4:PROC
EXTRN	__imp__MapViewOfFile@20:PROC
EXTRN	__imp__UnmapViewOfFile@4:PROC
EXTRN	__imp__CreateFileMappingA@24:PROC
_DATA	SEGMENT
?CRCTable@@3PAKA DD 00H					; CRCTable
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
_DATA	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\CRC32.cpp
;	COMDAT ?GetFileSize@@YAKPBD@Z
_TEXT	SEGMENT
_dwSize$ = -8						; size = 4
_hFile$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
?GetFileSize@@YAKPBD@Z PROC				; GetFileSize, COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 195  : 	HANDLE hFile = CreateFile(c_szFileName,					// name of the file

  00005	6a 00		 push	 0
  00007	68 80 00 00 00	 push	 128			; 00000080H
  0000c	6a 03		 push	 3
  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00017	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00020	89 45 fc	 mov	 DWORD PTR _hFile$[ebp], eax

; 196  : 						 GENERIC_READ,					// desired access
; 197  : 						 FILE_SHARE_READ,			// share mode
; 198  : 						 NULL,						// security attributes
; 199  : 						 OPEN_EXISTING,			// creation disposition
; 200  : 						 FILE_ATTRIBUTE_NORMAL,		// flags and attr
; 201  : 						 NULL);						// template file
; 202  : 
; 203  : 	if (INVALID_HANDLE_VALUE == hFile)

  00023	83 7d fc ff	 cmp	 DWORD PTR _hFile$[ebp], -1
  00027	75 04		 jne	 SHORT $LN2@GetFileSiz

; 204  : 		return 0;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 1a		 jmp	 SHORT $LN1@GetFileSiz
$LN2@GetFileSiz:

; 205  : 
; 206  : 	DWORD dwSize = GetFileSize(hFile, NULL);

  0002d	6a 00		 push	 0
  0002f	ff 75 fc	 push	 DWORD PTR _hFile$[ebp]
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  00038	89 45 f8	 mov	 DWORD PTR _dwSize$[ebp], eax

; 207  : 
; 208  : 	CloseHandle(hFile);

  0003b	ff 75 fc	 push	 DWORD PTR _hFile$[ebp]
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 209  : 
; 210  : 	return dwSize;

  00044	8b 45 f8	 mov	 eax, DWORD PTR _dwSize$[ebp]
$LN1@GetFileSiz:

; 211  : }

  00047	c9		 leave
  00048	c3		 ret	 0
?GetFileSize@@YAKPBD@Z ENDP				; GetFileSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\CRC32.cpp
;	COMDAT ?GetFileCRC32@@YAKPBD@Z
_TEXT	SEGMENT
_dwRetCRC32$ = -8					; size = 4
_hFile$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
?GetFileCRC32@@YAKPBD@Z PROC				; GetFileCRC32, COMDAT

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 174  : 	HANDLE hFile = CreateFile(c_szFileName,					// name of the file

  00005	6a 00		 push	 0
  00007	68 80 00 00 00	 push	 128			; 00000080H
  0000c	6a 03		 push	 3
  0000e	6a 00		 push	 0
  00010	6a 01		 push	 1
  00012	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00017	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00020	89 45 fc	 mov	 DWORD PTR _hFile$[ebp], eax

; 175  : 						 GENERIC_READ,					// desired access
; 176  : 						 FILE_SHARE_READ,			// share mode
; 177  : 						 NULL,						// security attributes
; 178  : 						 OPEN_EXISTING,			// creation disposition
; 179  : 						 FILE_ATTRIBUTE_NORMAL,		// flags and attr
; 180  : 						 NULL);						// template file
; 181  : 
; 182  : 	if (INVALID_HANDLE_VALUE == hFile)

  00023	83 7d fc ff	 cmp	 DWORD PTR _hFile$[ebp], -1
  00027	75 04		 jne	 SHORT $LN2@GetFileCRC

; 183  : 		return 0;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 18		 jmp	 SHORT $LN1@GetFileCRC
$LN2@GetFileCRC:

; 184  : 
; 185  : 	
; 186  : 	DWORD dwRetCRC32=GetHFILECRC32(hFile);

  0002d	ff 75 fc	 push	 DWORD PTR _hFile$[ebp]
  00030	e8 00 00 00 00	 call	 ?GetHFILECRC32@@YAKPAX@Z ; GetHFILECRC32
  00035	59		 pop	 ecx
  00036	89 45 f8	 mov	 DWORD PTR _dwRetCRC32$[ebp], eax

; 187  : 	
; 188  : 	CloseHandle(hFile);

  00039	ff 75 fc	 push	 DWORD PTR _hFile$[ebp]
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 189  : 
; 190  : 	return dwRetCRC32;

  00042	8b 45 f8	 mov	 eax, DWORD PTR _dwRetCRC32$[ebp]
$LN1@GetFileCRC:

; 191  : }

  00045	c9		 leave
  00046	c3		 ret	 0
?GetFileCRC32@@YAKPBD@Z ENDP				; GetFileCRC32
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\CRC32.cpp
;	COMDAT ?GetHFILECRC32@@YAKPAX@Z
_TEXT	SEGMENT
_SysInfo$ = -72						; size = 36
_dwFileMapStart$ = -36					; size = 4
_dwMapViewSize$ = -32					; size = 4
_dwRetCRC32$ = -28					; size = 4
_dwFileSize$ = -24					; size = 4
_mapSize$ = -20						; size = 4
_hFM$ = -16						; size = 4
_lpMapData$1 = -12					; size = 4
_dataOffset$ = -8					; size = 4
_dwSysGran$ = -4					; size = 4
_hFile$ = 8						; size = 4
?GetHFILECRC32@@YAKPAX@Z PROC				; GetHFILECRC32, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H

; 128  : 	DWORD dwRetCRC32=0;

  00006	83 65 e4 00	 and	 DWORD PTR _dwRetCRC32$[ebp], 0

; 129  : 
; 130  : 	DWORD dwFileSize = GetFileSize(hFile, NULL);

  0000a	6a 00		 push	 0
  0000c	ff 75 08	 push	 DWORD PTR _hFile$[ebp]
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileSize@8
  00015	89 45 e8	 mov	 DWORD PTR _dwFileSize$[ebp], eax

; 131  : 
; 132  : 	DWORD dataOffset=0;

  00018	83 65 f8 00	 and	 DWORD PTR _dataOffset$[ebp], 0

; 133  : 	DWORD mapSize=dwFileSize;

  0001c	8b 45 e8	 mov	 eax, DWORD PTR _dwFileSize$[ebp]
  0001f	89 45 ec	 mov	 DWORD PTR _mapSize$[ebp], eax

; 134  : 
; 135  : 	SYSTEM_INFO SysInfo;
; 136  : 	GetSystemInfo(&SysInfo);

  00022	8d 45 b8	 lea	 eax, DWORD PTR _SysInfo$[ebp]
  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemInfo@4

; 137  : 	
; 138  : 	DWORD dwSysGran = SysInfo.dwAllocationGranularity;

  0002c	8b 45 d4	 mov	 eax, DWORD PTR _SysInfo$[ebp+28]
  0002f	89 45 fc	 mov	 DWORD PTR _dwSysGran$[ebp], eax

; 139  : 	DWORD dwFileMapStart = (dataOffset / dwSysGran) * dwSysGran;

  00032	8b 45 f8	 mov	 eax, DWORD PTR _dataOffset$[ebp]
  00035	33 d2		 xor	 edx, edx
  00037	f7 75 fc	 div	 DWORD PTR _dwSysGran$[ebp]
  0003a	0f af 45 fc	 imul	 eax, DWORD PTR _dwSysGran$[ebp]
  0003e	89 45 dc	 mov	 DWORD PTR _dwFileMapStart$[ebp], eax

; 140  : 	DWORD dwMapViewSize = (dataOffset % dwSysGran) + mapSize;

  00041	8b 45 f8	 mov	 eax, DWORD PTR _dataOffset$[ebp]
  00044	33 d2		 xor	 edx, edx
  00046	f7 75 fc	 div	 DWORD PTR _dwSysGran$[ebp]
  00049	03 55 ec	 add	 edx, DWORD PTR _mapSize$[ebp]
  0004c	89 55 e0	 mov	 DWORD PTR _dwMapViewSize$[ebp], edx

; 141  : 	//INT iViewDelta = dataOffset - dwFileMapStart;
; 142  : 
; 143  : 	HANDLE hFM = CreateFileMapping(hFile,				// handle

  0004f	6a 00		 push	 0
  00051	8b 45 f8	 mov	 eax, DWORD PTR _dataOffset$[ebp]
  00054	03 45 ec	 add	 eax, DWORD PTR _mapSize$[ebp]
  00057	50		 push	 eax
  00058	6a 00		 push	 0
  0005a	6a 02		 push	 2
  0005c	6a 00		 push	 0
  0005e	ff 75 08	 push	 DWORD PTR _hFile$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileMappingA@24
  00067	89 45 f0	 mov	 DWORD PTR _hFM$[ebp], eax

; 144  : 							  NULL,					// security
; 145  : 							  PAGE_READONLY,		// flProtect
; 146  : 							  0,					// high
; 147  : 							  dataOffset + mapSize,	// low
; 148  : 							  NULL);				// name
; 149  : 	if (hFM)

  0006a	83 7d f0 00	 cmp	 DWORD PTR _hFM$[ebp], 0
  0006e	74 3e		 je	 SHORT $LN2@GetHFILECR

; 150  : 	{	
; 151  : 		LPVOID lpMapData = MapViewOfFile(hFM,

  00070	ff 75 e0	 push	 DWORD PTR _dwMapViewSize$[ebp]
  00073	ff 75 dc	 push	 DWORD PTR _dwFileMapStart$[ebp]
  00076	6a 00		 push	 0
  00078	6a 04		 push	 4
  0007a	ff 75 f0	 push	 DWORD PTR _hFM$[ebp]
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MapViewOfFile@20
  00083	89 45 f4	 mov	 DWORD PTR _lpMapData$1[ebp], eax

; 152  : 									FILE_MAP_READ,
; 153  : 									0,
; 154  : 									dwFileMapStart,							
; 155  : 									dwMapViewSize);
; 156  : 
; 157  : 		dwRetCRC32=GetCRC32((const char*)lpMapData, dwFileSize);

  00086	ff 75 e8	 push	 DWORD PTR _dwFileSize$[ebp]
  00089	ff 75 f4	 push	 DWORD PTR _lpMapData$1[ebp]
  0008c	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00091	59		 pop	 ecx
  00092	59		 pop	 ecx
  00093	89 45 e4	 mov	 DWORD PTR _dwRetCRC32$[ebp], eax

; 158  : 
; 159  : 		
; 160  : 		if (lpMapData)

  00096	83 7d f4 00	 cmp	 DWORD PTR _lpMapData$1[ebp], 0
  0009a	74 09		 je	 SHORT $LN3@GetHFILECR

; 161  : 		{
; 162  : 
; 163  : 			UnmapViewOfFile(lpMapData);

  0009c	ff 75 f4	 push	 DWORD PTR _lpMapData$1[ebp]
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UnmapViewOfFile@4
$LN3@GetHFILECR:

; 164  : 		}
; 165  : 		
; 166  : 		CloseHandle(hFM);

  000a5	ff 75 f0	 push	 DWORD PTR _hFM$[ebp]
  000a8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
$LN2@GetHFILECR:

; 167  : 	}
; 168  : 
; 169  : 	return dwRetCRC32;

  000ae	8b 45 e4	 mov	 eax, DWORD PTR _dwRetCRC32$[ebp]

; 170  : }

  000b1	c9		 leave
  000b2	c3		 ret	 0
?GetHFILECRC32@@YAKPAX@Z ENDP				; GetHFILECRC32
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\CRC32.cpp
;	COMDAT ?GetCaseCRC32@@YAKPBDI@Z
_TEXT	SEGMENT
tv468 = -72						; size = 4
tv442 = -68						; size = 4
tv420 = -64						; size = 4
tv398 = -60						; size = 4
tv376 = -56						; size = 4
tv354 = -52						; size = 4
tv332 = -48						; size = 4
tv310 = -44						; size = 4
tv288 = -40						; size = 4
tv266 = -36						; size = 4
tv244 = -32						; size = 4
tv222 = -28						; size = 4
tv200 = -24						; size = 4
tv178 = -20						; size = 4
tv156 = -16						; size = 4
tv134 = -12						; size = 4
tv80 = -8						; size = 4
_crc$ = -4						; size = 4
_buf$ = 8						; size = 4
_len$ = 12						; size = 4
?GetCaseCRC32@@YAKPBDI@Z PROC				; GetCaseCRC32, COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H

; 98   :     DWORD crc = 0xffffffff;

  00006	83 4d fc ff	 or	 DWORD PTR _crc$[ebp], -1

; 99   : 
; 100  :     if (16 <= len)

  0000a	83 7d 0c 10	 cmp	 DWORD PTR _len$[ebp], 16 ; 00000010H
  0000e	0f 82 58 06 00
	00		 jb	 $LN8@GetCaseCRC
$LN4@GetCaseCRC:

; 101  :     {
; 102  :         do
; 103  :         {
; 104  :             DO16CI(buf, 0);

  00014	33 c0		 xor	 eax, eax
  00016	40		 inc	 eax
  00017	6b c0 00	 imul	 eax, eax, 0
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0001d	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00021	83 f8 61	 cmp	 eax, 97			; 00000061H
  00024	7c 27		 jl	 SHORT $LN11@GetCaseCRC
  00026	33 c0		 xor	 eax, eax
  00028	40		 inc	 eax
  00029	6b c0 00	 imul	 eax, eax, 0
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0002f	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00033	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00036	7f 15		 jg	 SHORT $LN11@GetCaseCRC
  00038	33 c0		 xor	 eax, eax
  0003a	40		 inc	 eax
  0003b	6b c0 00	 imul	 eax, eax, 0
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00041	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00045	83 e8 20	 sub	 eax, 32			; 00000020H
  00048	89 45 f8	 mov	 DWORD PTR tv80[ebp], eax
  0004b	eb 10		 jmp	 SHORT $LN12@GetCaseCRC
$LN11@GetCaseCRC:
  0004d	33 c0		 xor	 eax, eax
  0004f	40		 inc	 eax
  00050	6b c0 00	 imul	 eax, eax, 0
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00056	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0005a	89 45 f8	 mov	 DWORD PTR tv80[ebp], eax
$LN12@GetCaseCRC:
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  00060	33 45 f8	 xor	 eax, DWORD PTR tv80[ebp]
  00063	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0006b	c1 e9 08	 shr	 ecx, 8
  0006e	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00075	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00078	33 c0		 xor	 eax, eax
  0007a	40		 inc	 eax
  0007b	c1 e0 00	 shl	 eax, 0
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00081	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00085	83 f8 61	 cmp	 eax, 97			; 00000061H
  00088	7c 27		 jl	 SHORT $LN13@GetCaseCRC
  0008a	33 c0		 xor	 eax, eax
  0008c	40		 inc	 eax
  0008d	c1 e0 00	 shl	 eax, 0
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00093	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00097	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0009a	7f 15		 jg	 SHORT $LN13@GetCaseCRC
  0009c	33 c0		 xor	 eax, eax
  0009e	40		 inc	 eax
  0009f	c1 e0 00	 shl	 eax, 0
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  000a5	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  000a9	83 e8 20	 sub	 eax, 32			; 00000020H
  000ac	89 45 f4	 mov	 DWORD PTR tv134[ebp], eax
  000af	eb 10		 jmp	 SHORT $LN14@GetCaseCRC
$LN13@GetCaseCRC:
  000b1	33 c0		 xor	 eax, eax
  000b3	40		 inc	 eax
  000b4	c1 e0 00	 shl	 eax, 0
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  000ba	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  000be	89 45 f4	 mov	 DWORD PTR tv134[ebp], eax
$LN14@GetCaseCRC:
  000c1	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  000c4	33 45 f4	 xor	 eax, DWORD PTR tv134[ebp]
  000c7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000cc	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  000cf	c1 e9 08	 shr	 ecx, 8
  000d2	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  000d9	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  000dc	33 c0		 xor	 eax, eax
  000de	40		 inc	 eax
  000df	d1 e0		 shl	 eax, 1
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  000e4	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  000e8	83 f8 61	 cmp	 eax, 97			; 00000061H
  000eb	7c 25		 jl	 SHORT $LN15@GetCaseCRC
  000ed	33 c0		 xor	 eax, eax
  000ef	40		 inc	 eax
  000f0	d1 e0		 shl	 eax, 1
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  000f5	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  000f9	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  000fc	7f 14		 jg	 SHORT $LN15@GetCaseCRC
  000fe	33 c0		 xor	 eax, eax
  00100	40		 inc	 eax
  00101	d1 e0		 shl	 eax, 1
  00103	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00106	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0010a	83 e8 20	 sub	 eax, 32			; 00000020H
  0010d	89 45 f0	 mov	 DWORD PTR tv156[ebp], eax
  00110	eb 0f		 jmp	 SHORT $LN16@GetCaseCRC
$LN15@GetCaseCRC:
  00112	33 c0		 xor	 eax, eax
  00114	40		 inc	 eax
  00115	d1 e0		 shl	 eax, 1
  00117	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0011a	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0011e	89 45 f0	 mov	 DWORD PTR tv156[ebp], eax
$LN16@GetCaseCRC:
  00121	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  00124	33 45 f0	 xor	 eax, DWORD PTR tv156[ebp]
  00127	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0012c	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0012f	c1 e9 08	 shr	 ecx, 8
  00132	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00139	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  0013c	33 c0		 xor	 eax, eax
  0013e	40		 inc	 eax
  0013f	6b c0 03	 imul	 eax, eax, 3
  00142	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00145	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00149	83 f8 61	 cmp	 eax, 97			; 00000061H
  0014c	7c 27		 jl	 SHORT $LN17@GetCaseCRC
  0014e	33 c0		 xor	 eax, eax
  00150	40		 inc	 eax
  00151	6b c0 03	 imul	 eax, eax, 3
  00154	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00157	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0015b	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0015e	7f 15		 jg	 SHORT $LN17@GetCaseCRC
  00160	33 c0		 xor	 eax, eax
  00162	40		 inc	 eax
  00163	6b c0 03	 imul	 eax, eax, 3
  00166	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00169	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0016d	83 e8 20	 sub	 eax, 32			; 00000020H
  00170	89 45 ec	 mov	 DWORD PTR tv178[ebp], eax
  00173	eb 10		 jmp	 SHORT $LN18@GetCaseCRC
$LN17@GetCaseCRC:
  00175	33 c0		 xor	 eax, eax
  00177	40		 inc	 eax
  00178	6b c0 03	 imul	 eax, eax, 3
  0017b	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0017e	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00182	89 45 ec	 mov	 DWORD PTR tv178[ebp], eax
$LN18@GetCaseCRC:
  00185	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  00188	33 45 ec	 xor	 eax, DWORD PTR tv178[ebp]
  0018b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00190	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00193	c1 e9 08	 shr	 ecx, 8
  00196	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  0019d	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  001a0	33 c0		 xor	 eax, eax
  001a2	40		 inc	 eax
  001a3	c1 e0 02	 shl	 eax, 2
  001a6	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  001a9	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  001ad	83 f8 61	 cmp	 eax, 97			; 00000061H
  001b0	7c 27		 jl	 SHORT $LN19@GetCaseCRC
  001b2	33 c0		 xor	 eax, eax
  001b4	40		 inc	 eax
  001b5	c1 e0 02	 shl	 eax, 2
  001b8	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  001bb	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  001bf	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  001c2	7f 15		 jg	 SHORT $LN19@GetCaseCRC
  001c4	33 c0		 xor	 eax, eax
  001c6	40		 inc	 eax
  001c7	c1 e0 02	 shl	 eax, 2
  001ca	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  001cd	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  001d1	83 e8 20	 sub	 eax, 32			; 00000020H
  001d4	89 45 e8	 mov	 DWORD PTR tv200[ebp], eax
  001d7	eb 10		 jmp	 SHORT $LN20@GetCaseCRC
$LN19@GetCaseCRC:
  001d9	33 c0		 xor	 eax, eax
  001db	40		 inc	 eax
  001dc	c1 e0 02	 shl	 eax, 2
  001df	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  001e2	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  001e6	89 45 e8	 mov	 DWORD PTR tv200[ebp], eax
$LN20@GetCaseCRC:
  001e9	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  001ec	33 45 e8	 xor	 eax, DWORD PTR tv200[ebp]
  001ef	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001f4	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  001f7	c1 e9 08	 shr	 ecx, 8
  001fa	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00201	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00204	33 c0		 xor	 eax, eax
  00206	40		 inc	 eax
  00207	6b c0 05	 imul	 eax, eax, 5
  0020a	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0020d	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00211	83 f8 61	 cmp	 eax, 97			; 00000061H
  00214	7c 27		 jl	 SHORT $LN21@GetCaseCRC
  00216	33 c0		 xor	 eax, eax
  00218	40		 inc	 eax
  00219	6b c0 05	 imul	 eax, eax, 5
  0021c	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0021f	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00223	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00226	7f 15		 jg	 SHORT $LN21@GetCaseCRC
  00228	33 c0		 xor	 eax, eax
  0022a	40		 inc	 eax
  0022b	6b c0 05	 imul	 eax, eax, 5
  0022e	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00231	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00235	83 e8 20	 sub	 eax, 32			; 00000020H
  00238	89 45 e4	 mov	 DWORD PTR tv222[ebp], eax
  0023b	eb 10		 jmp	 SHORT $LN22@GetCaseCRC
$LN21@GetCaseCRC:
  0023d	33 c0		 xor	 eax, eax
  0023f	40		 inc	 eax
  00240	6b c0 05	 imul	 eax, eax, 5
  00243	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00246	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0024a	89 45 e4	 mov	 DWORD PTR tv222[ebp], eax
$LN22@GetCaseCRC:
  0024d	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  00250	33 45 e4	 xor	 eax, DWORD PTR tv222[ebp]
  00253	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00258	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0025b	c1 e9 08	 shr	 ecx, 8
  0025e	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00265	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00268	33 c0		 xor	 eax, eax
  0026a	40		 inc	 eax
  0026b	6b c0 06	 imul	 eax, eax, 6
  0026e	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00271	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00275	83 f8 61	 cmp	 eax, 97			; 00000061H
  00278	7c 27		 jl	 SHORT $LN23@GetCaseCRC
  0027a	33 c0		 xor	 eax, eax
  0027c	40		 inc	 eax
  0027d	6b c0 06	 imul	 eax, eax, 6
  00280	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00283	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00287	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0028a	7f 15		 jg	 SHORT $LN23@GetCaseCRC
  0028c	33 c0		 xor	 eax, eax
  0028e	40		 inc	 eax
  0028f	6b c0 06	 imul	 eax, eax, 6
  00292	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00295	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00299	83 e8 20	 sub	 eax, 32			; 00000020H
  0029c	89 45 e0	 mov	 DWORD PTR tv244[ebp], eax
  0029f	eb 10		 jmp	 SHORT $LN24@GetCaseCRC
$LN23@GetCaseCRC:
  002a1	33 c0		 xor	 eax, eax
  002a3	40		 inc	 eax
  002a4	6b c0 06	 imul	 eax, eax, 6
  002a7	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  002aa	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  002ae	89 45 e0	 mov	 DWORD PTR tv244[ebp], eax
$LN24@GetCaseCRC:
  002b1	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  002b4	33 45 e0	 xor	 eax, DWORD PTR tv244[ebp]
  002b7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002bc	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  002bf	c1 e9 08	 shr	 ecx, 8
  002c2	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  002c9	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  002cc	33 c0		 xor	 eax, eax
  002ce	40		 inc	 eax
  002cf	6b c0 07	 imul	 eax, eax, 7
  002d2	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  002d5	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  002d9	83 f8 61	 cmp	 eax, 97			; 00000061H
  002dc	7c 27		 jl	 SHORT $LN25@GetCaseCRC
  002de	33 c0		 xor	 eax, eax
  002e0	40		 inc	 eax
  002e1	6b c0 07	 imul	 eax, eax, 7
  002e4	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  002e7	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  002eb	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  002ee	7f 15		 jg	 SHORT $LN25@GetCaseCRC
  002f0	33 c0		 xor	 eax, eax
  002f2	40		 inc	 eax
  002f3	6b c0 07	 imul	 eax, eax, 7
  002f6	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  002f9	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  002fd	83 e8 20	 sub	 eax, 32			; 00000020H
  00300	89 45 dc	 mov	 DWORD PTR tv266[ebp], eax
  00303	eb 10		 jmp	 SHORT $LN26@GetCaseCRC
$LN25@GetCaseCRC:
  00305	33 c0		 xor	 eax, eax
  00307	40		 inc	 eax
  00308	6b c0 07	 imul	 eax, eax, 7
  0030b	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0030e	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00312	89 45 dc	 mov	 DWORD PTR tv266[ebp], eax
$LN26@GetCaseCRC:
  00315	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  00318	33 45 dc	 xor	 eax, DWORD PTR tv266[ebp]
  0031b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00320	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00323	c1 e9 08	 shr	 ecx, 8
  00326	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  0032d	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00330	33 c0		 xor	 eax, eax
  00332	40		 inc	 eax
  00333	c1 e0 03	 shl	 eax, 3
  00336	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00339	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0033d	83 f8 61	 cmp	 eax, 97			; 00000061H
  00340	7c 27		 jl	 SHORT $LN27@GetCaseCRC
  00342	33 c0		 xor	 eax, eax
  00344	40		 inc	 eax
  00345	c1 e0 03	 shl	 eax, 3
  00348	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0034b	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0034f	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00352	7f 15		 jg	 SHORT $LN27@GetCaseCRC
  00354	33 c0		 xor	 eax, eax
  00356	40		 inc	 eax
  00357	c1 e0 03	 shl	 eax, 3
  0035a	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0035d	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00361	83 e8 20	 sub	 eax, 32			; 00000020H
  00364	89 45 d8	 mov	 DWORD PTR tv288[ebp], eax
  00367	eb 10		 jmp	 SHORT $LN28@GetCaseCRC
$LN27@GetCaseCRC:
  00369	33 c0		 xor	 eax, eax
  0036b	40		 inc	 eax
  0036c	c1 e0 03	 shl	 eax, 3
  0036f	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00372	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00376	89 45 d8	 mov	 DWORD PTR tv288[ebp], eax
$LN28@GetCaseCRC:
  00379	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  0037c	33 45 d8	 xor	 eax, DWORD PTR tv288[ebp]
  0037f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00384	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00387	c1 e9 08	 shr	 ecx, 8
  0038a	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00391	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00394	33 c0		 xor	 eax, eax
  00396	40		 inc	 eax
  00397	6b c0 09	 imul	 eax, eax, 9
  0039a	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0039d	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  003a1	83 f8 61	 cmp	 eax, 97			; 00000061H
  003a4	7c 27		 jl	 SHORT $LN29@GetCaseCRC
  003a6	33 c0		 xor	 eax, eax
  003a8	40		 inc	 eax
  003a9	6b c0 09	 imul	 eax, eax, 9
  003ac	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  003af	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  003b3	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  003b6	7f 15		 jg	 SHORT $LN29@GetCaseCRC
  003b8	33 c0		 xor	 eax, eax
  003ba	40		 inc	 eax
  003bb	6b c0 09	 imul	 eax, eax, 9
  003be	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  003c1	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  003c5	83 e8 20	 sub	 eax, 32			; 00000020H
  003c8	89 45 d4	 mov	 DWORD PTR tv310[ebp], eax
  003cb	eb 10		 jmp	 SHORT $LN30@GetCaseCRC
$LN29@GetCaseCRC:
  003cd	33 c0		 xor	 eax, eax
  003cf	40		 inc	 eax
  003d0	6b c0 09	 imul	 eax, eax, 9
  003d3	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  003d6	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  003da	89 45 d4	 mov	 DWORD PTR tv310[ebp], eax
$LN30@GetCaseCRC:
  003dd	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  003e0	33 45 d4	 xor	 eax, DWORD PTR tv310[ebp]
  003e3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003e8	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  003eb	c1 e9 08	 shr	 ecx, 8
  003ee	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  003f5	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  003f8	33 c0		 xor	 eax, eax
  003fa	40		 inc	 eax
  003fb	6b c0 0a	 imul	 eax, eax, 10
  003fe	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00401	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00405	83 f8 61	 cmp	 eax, 97			; 00000061H
  00408	7c 27		 jl	 SHORT $LN31@GetCaseCRC
  0040a	33 c0		 xor	 eax, eax
  0040c	40		 inc	 eax
  0040d	6b c0 0a	 imul	 eax, eax, 10
  00410	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00413	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00417	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0041a	7f 15		 jg	 SHORT $LN31@GetCaseCRC
  0041c	33 c0		 xor	 eax, eax
  0041e	40		 inc	 eax
  0041f	6b c0 0a	 imul	 eax, eax, 10
  00422	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00425	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00429	83 e8 20	 sub	 eax, 32			; 00000020H
  0042c	89 45 d0	 mov	 DWORD PTR tv332[ebp], eax
  0042f	eb 10		 jmp	 SHORT $LN32@GetCaseCRC
$LN31@GetCaseCRC:
  00431	33 c0		 xor	 eax, eax
  00433	40		 inc	 eax
  00434	6b c0 0a	 imul	 eax, eax, 10
  00437	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0043a	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0043e	89 45 d0	 mov	 DWORD PTR tv332[ebp], eax
$LN32@GetCaseCRC:
  00441	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  00444	33 45 d0	 xor	 eax, DWORD PTR tv332[ebp]
  00447	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0044c	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0044f	c1 e9 08	 shr	 ecx, 8
  00452	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00459	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  0045c	33 c0		 xor	 eax, eax
  0045e	40		 inc	 eax
  0045f	6b c0 0b	 imul	 eax, eax, 11
  00462	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00465	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00469	83 f8 61	 cmp	 eax, 97			; 00000061H
  0046c	7c 27		 jl	 SHORT $LN33@GetCaseCRC
  0046e	33 c0		 xor	 eax, eax
  00470	40		 inc	 eax
  00471	6b c0 0b	 imul	 eax, eax, 11
  00474	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00477	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0047b	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0047e	7f 15		 jg	 SHORT $LN33@GetCaseCRC
  00480	33 c0		 xor	 eax, eax
  00482	40		 inc	 eax
  00483	6b c0 0b	 imul	 eax, eax, 11
  00486	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00489	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0048d	83 e8 20	 sub	 eax, 32			; 00000020H
  00490	89 45 cc	 mov	 DWORD PTR tv354[ebp], eax
  00493	eb 10		 jmp	 SHORT $LN34@GetCaseCRC
$LN33@GetCaseCRC:
  00495	33 c0		 xor	 eax, eax
  00497	40		 inc	 eax
  00498	6b c0 0b	 imul	 eax, eax, 11
  0049b	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0049e	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  004a2	89 45 cc	 mov	 DWORD PTR tv354[ebp], eax
$LN34@GetCaseCRC:
  004a5	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  004a8	33 45 cc	 xor	 eax, DWORD PTR tv354[ebp]
  004ab	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004b0	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  004b3	c1 e9 08	 shr	 ecx, 8
  004b6	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  004bd	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  004c0	33 c0		 xor	 eax, eax
  004c2	40		 inc	 eax
  004c3	6b c0 0c	 imul	 eax, eax, 12
  004c6	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  004c9	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  004cd	83 f8 61	 cmp	 eax, 97			; 00000061H
  004d0	7c 27		 jl	 SHORT $LN35@GetCaseCRC
  004d2	33 c0		 xor	 eax, eax
  004d4	40		 inc	 eax
  004d5	6b c0 0c	 imul	 eax, eax, 12
  004d8	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  004db	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  004df	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  004e2	7f 15		 jg	 SHORT $LN35@GetCaseCRC
  004e4	33 c0		 xor	 eax, eax
  004e6	40		 inc	 eax
  004e7	6b c0 0c	 imul	 eax, eax, 12
  004ea	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  004ed	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  004f1	83 e8 20	 sub	 eax, 32			; 00000020H
  004f4	89 45 c8	 mov	 DWORD PTR tv376[ebp], eax
  004f7	eb 10		 jmp	 SHORT $LN36@GetCaseCRC
$LN35@GetCaseCRC:
  004f9	33 c0		 xor	 eax, eax
  004fb	40		 inc	 eax
  004fc	6b c0 0c	 imul	 eax, eax, 12
  004ff	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00502	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00506	89 45 c8	 mov	 DWORD PTR tv376[ebp], eax
$LN36@GetCaseCRC:
  00509	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  0050c	33 45 c8	 xor	 eax, DWORD PTR tv376[ebp]
  0050f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00514	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00517	c1 e9 08	 shr	 ecx, 8
  0051a	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00521	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00524	33 c0		 xor	 eax, eax
  00526	40		 inc	 eax
  00527	6b c0 0d	 imul	 eax, eax, 13
  0052a	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0052d	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00531	83 f8 61	 cmp	 eax, 97			; 00000061H
  00534	7c 27		 jl	 SHORT $LN37@GetCaseCRC
  00536	33 c0		 xor	 eax, eax
  00538	40		 inc	 eax
  00539	6b c0 0d	 imul	 eax, eax, 13
  0053c	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0053f	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00543	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00546	7f 15		 jg	 SHORT $LN37@GetCaseCRC
  00548	33 c0		 xor	 eax, eax
  0054a	40		 inc	 eax
  0054b	6b c0 0d	 imul	 eax, eax, 13
  0054e	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00551	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00555	83 e8 20	 sub	 eax, 32			; 00000020H
  00558	89 45 c4	 mov	 DWORD PTR tv398[ebp], eax
  0055b	eb 10		 jmp	 SHORT $LN38@GetCaseCRC
$LN37@GetCaseCRC:
  0055d	33 c0		 xor	 eax, eax
  0055f	40		 inc	 eax
  00560	6b c0 0d	 imul	 eax, eax, 13
  00563	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00566	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0056a	89 45 c4	 mov	 DWORD PTR tv398[ebp], eax
$LN38@GetCaseCRC:
  0056d	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  00570	33 45 c4	 xor	 eax, DWORD PTR tv398[ebp]
  00573	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00578	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0057b	c1 e9 08	 shr	 ecx, 8
  0057e	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00585	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00588	33 c0		 xor	 eax, eax
  0058a	40		 inc	 eax
  0058b	6b c0 0e	 imul	 eax, eax, 14
  0058e	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00591	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00595	83 f8 61	 cmp	 eax, 97			; 00000061H
  00598	7c 27		 jl	 SHORT $LN39@GetCaseCRC
  0059a	33 c0		 xor	 eax, eax
  0059c	40		 inc	 eax
  0059d	6b c0 0e	 imul	 eax, eax, 14
  005a0	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  005a3	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  005a7	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  005aa	7f 15		 jg	 SHORT $LN39@GetCaseCRC
  005ac	33 c0		 xor	 eax, eax
  005ae	40		 inc	 eax
  005af	6b c0 0e	 imul	 eax, eax, 14
  005b2	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  005b5	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  005b9	83 e8 20	 sub	 eax, 32			; 00000020H
  005bc	89 45 c0	 mov	 DWORD PTR tv420[ebp], eax
  005bf	eb 10		 jmp	 SHORT $LN40@GetCaseCRC
$LN39@GetCaseCRC:
  005c1	33 c0		 xor	 eax, eax
  005c3	40		 inc	 eax
  005c4	6b c0 0e	 imul	 eax, eax, 14
  005c7	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  005ca	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  005ce	89 45 c0	 mov	 DWORD PTR tv420[ebp], eax
$LN40@GetCaseCRC:
  005d1	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  005d4	33 45 c0	 xor	 eax, DWORD PTR tv420[ebp]
  005d7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005dc	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  005df	c1 e9 08	 shr	 ecx, 8
  005e2	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  005e9	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  005ec	33 c0		 xor	 eax, eax
  005ee	40		 inc	 eax
  005ef	6b c0 0f	 imul	 eax, eax, 15
  005f2	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  005f5	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  005f9	83 f8 61	 cmp	 eax, 97			; 00000061H
  005fc	7c 27		 jl	 SHORT $LN41@GetCaseCRC
  005fe	33 c0		 xor	 eax, eax
  00600	40		 inc	 eax
  00601	6b c0 0f	 imul	 eax, eax, 15
  00604	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00607	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0060b	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0060e	7f 15		 jg	 SHORT $LN41@GetCaseCRC
  00610	33 c0		 xor	 eax, eax
  00612	40		 inc	 eax
  00613	6b c0 0f	 imul	 eax, eax, 15
  00616	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00619	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0061d	83 e8 20	 sub	 eax, 32			; 00000020H
  00620	89 45 bc	 mov	 DWORD PTR tv442[ebp], eax
  00623	eb 10		 jmp	 SHORT $LN42@GetCaseCRC
$LN41@GetCaseCRC:
  00625	33 c0		 xor	 eax, eax
  00627	40		 inc	 eax
  00628	6b c0 0f	 imul	 eax, eax, 15
  0062b	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0062e	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00632	89 45 bc	 mov	 DWORD PTR tv442[ebp], eax
$LN42@GetCaseCRC:
  00635	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  00638	33 45 bc	 xor	 eax, DWORD PTR tv442[ebp]
  0063b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00640	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00643	c1 e9 08	 shr	 ecx, 8
  00646	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  0064d	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx

; 105  : 
; 106  :             buf += 16;

  00650	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00653	83 c0 10	 add	 eax, 16			; 00000010H
  00656	89 45 08	 mov	 DWORD PTR _buf$[ebp], eax

; 107  :             len -= 16;

  00659	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  0065c	83 e8 10	 sub	 eax, 16			; 00000010H
  0065f	89 45 0c	 mov	 DWORD PTR _len$[ebp], eax

; 108  :         } while (len >= 16);

  00662	83 7d 0c 10	 cmp	 DWORD PTR _len$[ebp], 16 ; 00000010H
  00666	0f 83 a8 f9 ff
	ff		 jae	 $LN4@GetCaseCRC
$LN8@GetCaseCRC:

; 109  :     }
; 110  : 
; 111  :     if (0 != len)

  0066c	83 7d 0c 00	 cmp	 DWORD PTR _len$[ebp], 0
  00670	74 74		 je	 SHORT $LN9@GetCaseCRC
$LN7@GetCaseCRC:

; 112  :     {
; 113  :         do
; 114  :         {
; 115  :             DO1CI(buf, 0);

  00672	33 c0		 xor	 eax, eax
  00674	40		 inc	 eax
  00675	6b c0 00	 imul	 eax, eax, 0
  00678	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0067b	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0067f	83 f8 61	 cmp	 eax, 97			; 00000061H
  00682	7c 27		 jl	 SHORT $LN43@GetCaseCRC
  00684	33 c0		 xor	 eax, eax
  00686	40		 inc	 eax
  00687	6b c0 00	 imul	 eax, eax, 0
  0068a	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0068d	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00691	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00694	7f 15		 jg	 SHORT $LN43@GetCaseCRC
  00696	33 c0		 xor	 eax, eax
  00698	40		 inc	 eax
  00699	6b c0 00	 imul	 eax, eax, 0
  0069c	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0069f	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  006a3	83 e8 20	 sub	 eax, 32			; 00000020H
  006a6	89 45 b8	 mov	 DWORD PTR tv468[ebp], eax
  006a9	eb 10		 jmp	 SHORT $LN44@GetCaseCRC
$LN43@GetCaseCRC:
  006ab	33 c0		 xor	 eax, eax
  006ad	40		 inc	 eax
  006ae	6b c0 00	 imul	 eax, eax, 0
  006b1	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  006b4	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  006b8	89 45 b8	 mov	 DWORD PTR tv468[ebp], eax
$LN44@GetCaseCRC:
  006bb	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  006be	33 45 b8	 xor	 eax, DWORD PTR tv468[ebp]
  006c1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  006c6	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  006c9	c1 e9 08	 shr	 ecx, 8
  006cc	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  006d3	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx

; 116  : 
; 117  :             ++buf;

  006d6	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  006d9	40		 inc	 eax
  006da	89 45 08	 mov	 DWORD PTR _buf$[ebp], eax

; 118  :             --len;

  006dd	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  006e0	48		 dec	 eax
  006e1	89 45 0c	 mov	 DWORD PTR _len$[ebp], eax

; 119  :         } while (len > 0);

  006e4	75 8c		 jne	 SHORT $LN7@GetCaseCRC
$LN9@GetCaseCRC:

; 120  :     }
; 121  : 
; 122  :     crc ^= 0xffffffff;

  006e6	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  006e9	83 f0 ff	 xor	 eax, -1
  006ec	89 45 fc	 mov	 DWORD PTR _crc$[ebp], eax

; 123  :     return crc;

  006ef	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]

; 124  : }

  006f2	c9		 leave
  006f3	c3		 ret	 0
?GetCaseCRC32@@YAKPBDI@Z ENDP				; GetCaseCRC32
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\CRC32.cpp
;	COMDAT ?GetCRC32@@YAKPBDI@Z
_TEXT	SEGMENT
_crc$ = -4						; size = 4
_buf$ = 8						; size = 4
_len$ = 12						; size = 4
?GetCRC32@@YAKPBDI@Z PROC				; GetCRC32, COMDAT

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 59   :     DWORD crc = 0xffffffff;

  00004	83 4d fc ff	 or	 DWORD PTR _crc$[ebp], -1

; 60   : 
; 61   :     if (len >= 16)

  00008	83 7d 0c 10	 cmp	 DWORD PTR _len$[ebp], 16 ; 00000010H
  0000c	0f 82 6b 02 00
	00		 jb	 $LN8@GetCRC32
$LN4@GetCRC32:

; 62   :     {
; 63   :         do
; 64   :         {
; 65   :             DO16(buf, 0);

  00012	33 c0		 xor	 eax, eax
  00014	40		 inc	 eax
  00015	6b c0 00	 imul	 eax, eax, 0
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0001b	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0001f	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  00022	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0002a	c1 e9 08	 shr	 ecx, 8
  0002d	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00034	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00037	33 c0		 xor	 eax, eax
  00039	40		 inc	 eax
  0003a	c1 e0 00	 shl	 eax, 0
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00040	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00044	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  00047	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0004f	c1 e9 08	 shr	 ecx, 8
  00052	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00059	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  0005c	33 c0		 xor	 eax, eax
  0005e	40		 inc	 eax
  0005f	d1 e0		 shl	 eax, 1
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00064	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00068	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  0006b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00073	c1 e9 08	 shr	 ecx, 8
  00076	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  0007d	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00080	33 c0		 xor	 eax, eax
  00082	40		 inc	 eax
  00083	6b c0 03	 imul	 eax, eax, 3
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00089	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0008d	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  00090	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00095	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00098	c1 e9 08	 shr	 ecx, 8
  0009b	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  000a2	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  000a5	33 c0		 xor	 eax, eax
  000a7	40		 inc	 eax
  000a8	c1 e0 02	 shl	 eax, 2
  000ab	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  000ae	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  000b2	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  000b5	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000ba	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  000bd	c1 e9 08	 shr	 ecx, 8
  000c0	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  000c7	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  000ca	33 c0		 xor	 eax, eax
  000cc	40		 inc	 eax
  000cd	6b c0 05	 imul	 eax, eax, 5
  000d0	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  000d3	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  000d7	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  000da	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000df	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  000e2	c1 e9 08	 shr	 ecx, 8
  000e5	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  000ec	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  000ef	33 c0		 xor	 eax, eax
  000f1	40		 inc	 eax
  000f2	6b c0 06	 imul	 eax, eax, 6
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  000f8	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  000fc	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  000ff	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00104	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00107	c1 e9 08	 shr	 ecx, 8
  0010a	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00111	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00114	33 c0		 xor	 eax, eax
  00116	40		 inc	 eax
  00117	6b c0 07	 imul	 eax, eax, 7
  0011a	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0011d	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00121	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  00124	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00129	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0012c	c1 e9 08	 shr	 ecx, 8
  0012f	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00136	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00139	33 c0		 xor	 eax, eax
  0013b	40		 inc	 eax
  0013c	c1 e0 03	 shl	 eax, 3
  0013f	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00142	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00146	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  00149	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0014e	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00151	c1 e9 08	 shr	 ecx, 8
  00154	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  0015b	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  0015e	33 c0		 xor	 eax, eax
  00160	40		 inc	 eax
  00161	6b c0 09	 imul	 eax, eax, 9
  00164	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00167	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  0016b	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  0016e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00173	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00176	c1 e9 08	 shr	 ecx, 8
  00179	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00180	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00183	33 c0		 xor	 eax, eax
  00185	40		 inc	 eax
  00186	6b c0 0a	 imul	 eax, eax, 10
  00189	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0018c	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00190	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  00193	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00198	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0019b	c1 e9 08	 shr	 ecx, 8
  0019e	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  001a5	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  001a8	33 c0		 xor	 eax, eax
  001aa	40		 inc	 eax
  001ab	6b c0 0b	 imul	 eax, eax, 11
  001ae	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  001b1	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  001b5	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  001b8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001bd	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  001c0	c1 e9 08	 shr	 ecx, 8
  001c3	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  001ca	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  001cd	33 c0		 xor	 eax, eax
  001cf	40		 inc	 eax
  001d0	6b c0 0c	 imul	 eax, eax, 12
  001d3	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  001d6	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  001da	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  001dd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001e2	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  001e5	c1 e9 08	 shr	 ecx, 8
  001e8	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  001ef	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  001f2	33 c0		 xor	 eax, eax
  001f4	40		 inc	 eax
  001f5	6b c0 0d	 imul	 eax, eax, 13
  001f8	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  001fb	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  001ff	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  00202	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00207	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0020a	c1 e9 08	 shr	 ecx, 8
  0020d	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00214	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  00217	33 c0		 xor	 eax, eax
  00219	40		 inc	 eax
  0021a	6b c0 0e	 imul	 eax, eax, 14
  0021d	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00220	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00224	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  00227	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0022c	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0022f	c1 e9 08	 shr	 ecx, 8
  00232	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  00239	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx
  0023c	33 c0		 xor	 eax, eax
  0023e	40		 inc	 eax
  0023f	6b c0 0f	 imul	 eax, eax, 15
  00242	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  00245	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00249	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  0024c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00251	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  00254	c1 e9 08	 shr	 ecx, 8
  00257	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  0025e	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx

; 66   : 
; 67   :             buf += 16;

  00261	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00264	83 c0 10	 add	 eax, 16			; 00000010H
  00267	89 45 08	 mov	 DWORD PTR _buf$[ebp], eax

; 68   :             len -= 16;

  0026a	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  0026d	83 e8 10	 sub	 eax, 16			; 00000010H
  00270	89 45 0c	 mov	 DWORD PTR _len$[ebp], eax

; 69   :         } while (len >= 16);

  00273	83 7d 0c 10	 cmp	 DWORD PTR _len$[ebp], 16 ; 00000010H
  00277	0f 83 95 fd ff
	ff		 jae	 $LN4@GetCRC32
$LN8@GetCRC32:

; 70   :     }
; 71   : 
; 72   :     if (len != 0)

  0027d	83 7d 0c 00	 cmp	 DWORD PTR _len$[ebp], 0
  00281	74 35		 je	 SHORT $LN9@GetCRC32
$LN7@GetCRC32:

; 73   :     {
; 74   :         do
; 75   :         {
; 76   :             DO1(buf, 0);

  00283	33 c0		 xor	 eax, eax
  00285	40		 inc	 eax
  00286	6b c0 00	 imul	 eax, eax, 0
  00289	8b 4d 08	 mov	 ecx, DWORD PTR _buf$[ebp]
  0028c	0f be 04 01	 movsx	 eax, BYTE PTR [ecx+eax]
  00290	33 45 fc	 xor	 eax, DWORD PTR _crc$[ebp]
  00293	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00298	8b 4d fc	 mov	 ecx, DWORD PTR _crc$[ebp]
  0029b	c1 e9 08	 shr	 ecx, 8
  0029e	33 0c 85 00 00
	00 00		 xor	 ecx, DWORD PTR ?CRCTable@@3PAKA[eax*4]
  002a5	89 4d fc	 mov	 DWORD PTR _crc$[ebp], ecx

; 77   :             ++buf;

  002a8	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  002ab	40		 inc	 eax
  002ac	89 45 08	 mov	 DWORD PTR _buf$[ebp], eax

; 78   :             --len;

  002af	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  002b2	48		 dec	 eax
  002b3	89 45 0c	 mov	 DWORD PTR _len$[ebp], eax

; 79   :         } while (len > 0);

  002b6	75 cb		 jne	 SHORT $LN7@GetCRC32
$LN9@GetCRC32:

; 80   :     }
; 81   : 	
; 82   : 	crc ^= 0xffffffff;

  002b8	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]
  002bb	83 f0 ff	 xor	 eax, -1
  002be	89 45 fc	 mov	 DWORD PTR _crc$[ebp], eax

; 83   : 	return crc;

  002c1	8b 45 fc	 mov	 eax, DWORD PTR _crc$[ebp]

; 84   : }

  002c4	c9		 leave
  002c5	c3		 ret	 0
?GetCRC32@@YAKPBDI@Z ENDP				; GetCRC32
_TEXT	ENDS
END
