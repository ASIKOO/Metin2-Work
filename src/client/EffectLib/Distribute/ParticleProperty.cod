; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CParticleProperty@@QAE@XZ			; CParticleProperty::CParticleProperty
PUBLIC	??1CParticleProperty@@UAE@XZ			; CParticleProperty::~CParticleProperty
PUBLIC	?Clear@CParticleProperty@@QAEXXZ		; CParticleProperty::Clear
PUBLIC	?InsertTexture@CParticleProperty@@QAEXPBD@Z	; CParticleProperty::InsertTexture
PUBLIC	?SetTexture@CParticleProperty@@QAE_NPBD@Z	; CParticleProperty::SetTexture
PUBLIC	??4?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::operator=
PUBLIC	?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
PUBLIC	?_Xlength@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Xlength
PUBLIC	?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Xlength
PUBLIC	??4CParticleProperty@@QAEAAV0@ABV0@@Z		; CParticleProperty::operator=
PUBLIC	??_GCParticleProperty@@UAEPAXI@Z		; CParticleProperty::`scalar deleting destructor'
PUBLIC	??$_Emplace_reallocate@ABQAVCGraphicImage@@@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@QAEPAPAVCGraphicImage@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Emplace_reallocate<CGraphicImage * const &>
PUBLIC	??$_Destroy_range@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAXPAPAVCGraphicImage@@QAPAV1@AAV?$allocator@PAVCGraphicImage@@@0@@Z ; std::_Destroy_range<std::allocator<CGraphicImage *> >
PUBLIC	??$_Pocca@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAXAAV?$allocator@PAVCGraphicImage@@@0@ABV10@@Z ; std::_Pocca<std::allocator<CGraphicImage *> >
PUBLIC	??$_Destroy_range@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAXPAV?$CTimeEvent@UDWORDCOLOR@@@@QAV1@AAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@@Z ; std::_Destroy_range<std::allocator<CTimeEvent<DWORDCOLOR> > >
PUBLIC	??$_Pocca@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAXAAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@ABV10@@Z ; std::_Pocca<std::allocator<CTimeEvent<DWORDCOLOR> > >
PUBLIC	??$_Destroy_range@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXPAV?$CTimeEvent@M@@QAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z ; std::_Destroy_range<std::allocator<CTimeEvent<float> > >
PUBLIC	??$_Pocca@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXAAV?$allocator@V?$CTimeEvent@M@@@0@ABV10@@Z ; std::_Pocca<std::allocator<CTimeEvent<float> > >
PUBLIC	??$_Assign_range@PAV?$CTimeEvent@UDWORDCOLOR@@@@@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@AAEXPAV?$CTimeEvent@UDWORDCOLOR@@@@0Uforward_iterator_tag@1@@Z ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Assign_range<CTimeEvent<DWORDCOLOR> *>
PUBLIC	??$_Uninitialized_move@PAPAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAPAPAVCGraphicImage@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImage@@@0@@Z ; std::_Uninitialized_move<CGraphicImage * *,std::allocator<CGraphicImage *> >
PUBLIC	??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImage * *,CGraphicImage * *>
PUBLIC	??$_Refancy@PAPAVCGraphicImage@@$0A@@std@@YAPAPAVCGraphicImage@@PAPAV1@@Z ; std::_Refancy<CGraphicImage * *,0>
PUBLIC	??$_Uninitialized_copy@PAV?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAPAV?$CTimeEvent@UDWORDCOLOR@@@@QAV1@0PAV1@AAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@@Z ; std::_Uninitialized_copy<CTimeEvent<DWORDCOLOR> *,std::allocator<CTimeEvent<DWORDCOLOR> > >
PUBLIC	??$_Uninitialized_copy@PAV?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAPAV?$CTimeEvent@M@@QAV1@0PAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z ; std::_Uninitialized_copy<CTimeEvent<float> *,std::allocator<CTimeEvent<float> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CParticleProperty@@6B@			; CParticleProperty::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CParticleProperty@@6B@			; CParticleProperty::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCParticleProperty@@@8			; CParticleProperty `RTTI Type Descriptor'
PUBLIC	??_R3CParticleProperty@@8			; CParticleProperty::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CParticleProperty@@8			; CParticleProperty::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CParticleProperty@@8		; CParticleProperty::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	??_ECParticleProperty@@UAEPAXI@Z:PROC		; CParticleProperty::`vector deleting destructor'
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	__CxxThrowException@8:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@CParticleProperty@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CParticleProperty@@8 DD FLAT:??_R0?AVCParticleProperty@@@8 ; CParticleProperty::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CParticleProperty@@8
rdata$r	ENDS
;	COMDAT ??_R2CParticleProperty@@8
rdata$r	SEGMENT
??_R2CParticleProperty@@8 DD FLAT:??_R1A@?0A@EA@CParticleProperty@@8 ; CParticleProperty::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CParticleProperty@@8
rdata$r	SEGMENT
??_R3CParticleProperty@@8 DD 00H			; CParticleProperty::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CParticleProperty@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCParticleProperty@@@8
data$rs	SEGMENT
??_R0?AVCParticleProperty@@@8 DD FLAT:??_7type_info@@6B@ ; CParticleProperty `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCParticleProperty@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CParticleProperty@@6B@
rdata$r	SEGMENT
??_R4CParticleProperty@@6B@ DD 00H			; CParticleProperty::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCParticleProperty@@@8
	DD	FLAT:??_R3CParticleProperty@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CParticleProperty@@6B@
CONST	SEGMENT
??_7CParticleProperty@@6B@ DD FLAT:??_R4CParticleProperty@@6B@ ; CParticleProperty::`vftable'
	DD	FLAT:??_ECParticleProperty@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAV?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAPAV?$CTimeEvent@M@@QAV1@0PAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAV?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAPAV?$CTimeEvent@M@@QAV1@0PAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z PROC ; std::_Uninitialized_copy<CTimeEvent<float> *,std::allocator<CTimeEvent<float> > >, COMDAT

; 1565 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1566 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1567 :     // note: only called internally from elsewhere in the STL
; 1568 :     using _Ptrval = typename _Alloc::value_type*;
; 1569 : 
; 1570 :     auto _UFirst      = _Get_unwrapped(_First);
; 1571 :     const auto _ULast = _Get_unwrapped(_Last);
; 1572 : 
; 1573 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1574 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1575 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1576 :         _Dest += _ULast - _UFirst;
; 1577 :     } else {
; 1578 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1579 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1565 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00009	57		 push	 edi

; 1566 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1567 :     // note: only called internally from elsewhere in the STL
; 1568 :     using _Ptrval = typename _Alloc::value_type*;
; 1569 : 
; 1570 :     auto _UFirst      = _Get_unwrapped(_First);
; 1571 :     const auto _ULast = _Get_unwrapped(_Last);
; 1572 : 
; 1573 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1574 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1575 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1576 :         _Dest += _ULast - _UFirst;
; 1577 :     } else {
; 1578 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1579 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000a	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000d	3b cf		 cmp	 ecx, edi
  0000f	74 16		 je	 SHORT $LN3@Uninitiali
  00011	56		 push	 esi
$LL4@Uninitiali:

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00012	8b 11		 mov	 edx, DWORD PTR [ecx]
  00014	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]

; 1547 :         ++_Last;

  00017	83 c1 08	 add	 ecx, 8
  0001a	89 10		 mov	 DWORD PTR [eax], edx
  0001c	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001f	83 c0 08	 add	 eax, 8

; 1566 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1567 :     // note: only called internally from elsewhere in the STL
; 1568 :     using _Ptrval = typename _Alloc::value_type*;
; 1569 : 
; 1570 :     auto _UFirst      = _Get_unwrapped(_First);
; 1571 :     const auto _ULast = _Get_unwrapped(_Last);
; 1572 : 
; 1573 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1574 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1575 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1576 :         _Dest += _ULast - _UFirst;
; 1577 :     } else {
; 1578 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1579 :         for (; _UFirst != _ULast; ++_UFirst) {

  00022	3b cf		 cmp	 ecx, edi
  00024	75 ec		 jne	 SHORT $LL4@Uninitiali

; 1580 :             _Backout._Emplace_back(*_UFirst);
; 1581 :         }
; 1582 : 
; 1583 :         _Dest = _Backout._Release();
; 1584 :     }
; 1585 : 
; 1586 :     return _Dest;

  00026	5e		 pop	 esi
$LN3@Uninitiali:
  00027	5f		 pop	 edi

; 1587 : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??$_Uninitialized_copy@PAV?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAPAV?$CTimeEvent@M@@QAV1@0PAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z ENDP ; std::_Uninitialized_copy<CTimeEvent<float> *,std::allocator<CTimeEvent<float> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAV?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAPAV?$CTimeEvent@UDWORDCOLOR@@@@QAV1@0PAV1@AAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAV?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAPAV?$CTimeEvent@UDWORDCOLOR@@@@QAV1@0PAV1@AAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@@Z PROC ; std::_Uninitialized_copy<CTimeEvent<DWORDCOLOR> *,std::allocator<CTimeEvent<DWORDCOLOR> > >, COMDAT

; 1565 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1566 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1567 :     // note: only called internally from elsewhere in the STL
; 1568 :     using _Ptrval = typename _Alloc::value_type*;
; 1569 : 
; 1570 :     auto _UFirst      = _Get_unwrapped(_First);
; 1571 :     const auto _ULast = _Get_unwrapped(_Last);
; 1572 : 
; 1573 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1574 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1575 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1576 :         _Dest += _ULast - _UFirst;
; 1577 :     } else {
; 1578 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1579 :         for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00006	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1565 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00009	57		 push	 edi

; 1566 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1567 :     // note: only called internally from elsewhere in the STL
; 1568 :     using _Ptrval = typename _Alloc::value_type*;
; 1569 : 
; 1570 :     auto _UFirst      = _Get_unwrapped(_First);
; 1571 :     const auto _ULast = _Get_unwrapped(_Last);
; 1572 : 
; 1573 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1574 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1575 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1576 :         _Dest += _ULast - _UFirst;
; 1577 :     } else {
; 1578 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1579 :         for (; _UFirst != _ULast; ++_UFirst) {

  0000a	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000d	3b d7		 cmp	 edx, edi
  0000f	74 1b		 je	 SHORT $LN3@Uninitiali

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00011	56		 push	 esi
  00012	8b f2		 mov	 esi, edx
  00014	2b f0		 sub	 esi, eax
$LL4@Uninitiali:
  00016	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 1547 :         ++_Last;

  00018	83 c2 08	 add	 edx, 8
  0001b	89 08		 mov	 DWORD PTR [eax], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\Type.h

; 137  : 		: m_dwColor(r.m_dwColor)

  0001d	8b 4c 06 04	 mov	 ecx, DWORD PTR [esi+eax+4]
  00021	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1547 :         ++_Last;

  00024	83 c0 08	 add	 eax, 8

; 1566 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1567 :     // note: only called internally from elsewhere in the STL
; 1568 :     using _Ptrval = typename _Alloc::value_type*;
; 1569 : 
; 1570 :     auto _UFirst      = _Get_unwrapped(_First);
; 1571 :     const auto _ULast = _Get_unwrapped(_Last);
; 1572 : 
; 1573 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1574 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1575 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1576 :         _Dest += _ULast - _UFirst;
; 1577 :     } else {
; 1578 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1579 :         for (; _UFirst != _ULast; ++_UFirst) {

  00027	3b d7		 cmp	 edx, edi
  00029	75 eb		 jne	 SHORT $LL4@Uninitiali

; 1580 :             _Backout._Emplace_back(*_UFirst);
; 1581 :         }
; 1582 : 
; 1583 :         _Dest = _Backout._Release();
; 1584 :     }
; 1585 : 
; 1586 :     return _Dest;

  0002b	5e		 pop	 esi
$LN3@Uninitiali:
  0002c	5f		 pop	 edi

; 1587 : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??$_Uninitialized_copy@PAV?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAPAV?$CTimeEvent@UDWORDCOLOR@@@@QAV1@0PAV1@AAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@@Z ENDP ; std::_Uninitialized_copy<CTimeEvent<DWORDCOLOR> *,std::allocator<CTimeEvent<DWORDCOLOR> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Refancy@PAPAVCGraphicImage@@$0A@@std@@YAPAPAVCGraphicImage@@PAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAPAVCGraphicImage@@$0A@@std@@YAPAPAVCGraphicImage@@PAPAV1@@Z PROC ; std::_Refancy<CGraphicImage * *,0>, COMDAT

; 261  : _Pointer _Refancy(_Pointer _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 263  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Refancy@PAPAVCGraphicImage@@$0A@@std@@YAPAPAVCGraphicImage@@PAPAV1@@Z ENDP ; std::_Refancy<CGraphicImage * *,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicImage * *,CGraphicImage * *>, COMDAT

; 4360 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4361 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 4362 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 4363 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 4364 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 4365 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4366 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 4367 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicImage * *,CGraphicImage * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAPAPAVCGraphicImage@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImage@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAPAPAVCGraphicImage@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImage@@@0@@Z PROC ; std::_Uninitialized_move<CGraphicImage * *,std::allocator<CGraphicImage *> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);
; 1690 :     const auto _ULast = _Get_unwrapped(_Last);
; 1691 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1692 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 10	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	53		 push	 ebx
  0000c	57		 push	 edi
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImage * *,CGraphicImage * *>

; 1694 :         return _Dest + (_ULast - _UFirst);

  00015	2b 7d 08	 sub	 edi, DWORD PTR __First$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
  00021	5f		 pop	 edi
  00022	5b		 pop	 ebx

; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1699 :         }
; 1700 : 
; 1701 :         return _Backout._Release();
; 1702 :     }
; 1703 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??$_Uninitialized_move@PAPAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAPAPAVCGraphicImage@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImage@@@0@@Z ENDP ; std::_Uninitialized_move<CGraphicImage * *,std::allocator<CGraphicImage *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Assign_range@PAV?$CTimeEvent@UDWORDCOLOR@@@@@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@AAEXPAV?$CTimeEvent@UDWORDCOLOR@@@@0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -8					; size = 4
__Oldcapacity$1$ = -4					; size = 4
tv673 = 8						; size = 4
__Dest$1$ = 8						; size = 4
__Newcapacity$1$ = 8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Assign_range@PAV?$CTimeEvent@UDWORDCOLOR@@@@@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@AAEXPAV?$CTimeEvent@UDWORDCOLOR@@@@0Uforward_iterator_tag@1@@Z PROC ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Assign_range<CTimeEvent<DWORDCOLOR> *>, COMDAT
; _this$ = ecx

; 1094 :     void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) { // assign forward range [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1794 :         return _Last - _First; // assume the iterator will do debug checking

  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]
  0000d	8b ce		 mov	 ecx, esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1094 :     void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) { // assign forward range [_First, _Last)

  0000f	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1794 :         return _Last - _First; // assume the iterator will do debug checking

  00010	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00013	2b cf		 sub	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1116 :             auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00015	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00018	8b 13		 mov	 edx, DWORD PTR [ebx]
  0001a	89 45 08	 mov	 DWORD PTR __Dest$1$[ebp], eax
  0001d	2b c2		 sub	 eax, edx
  0001f	c1 f8 03	 sar	 eax, 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1794 :         return _Last - _First; // assume the iterator will do debug checking

  00022	c1 f9 03	 sar	 ecx, 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1116 :             auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00025	89 45 f8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1117 : 
; 1118 :             if (_Newsize > _Oldsize) {

  00028	3b c8		 cmp	 ecx, eax
  0002a	0f 86 fd 00 00
	00		 jbe	 $LN2@Assign_ran

; 1119 :                 const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00030	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00033	2b c2		 sub	 eax, edx
  00035	c1 f8 03	 sar	 eax, 3
  00038	89 45 fc	 mov	 DWORD PTR __Oldcapacity$1$[ebp], eax

; 1120 :                 if (_Newsize > _Oldcapacity) { // reallocate

  0003b	3b c8		 cmp	 ecx, eax
  0003d	0f 86 95 00 00
	00		 jbe	 $LN63@Assign_ran

; 1285 :         if (_Newsize > max_size()) {

  00043	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00049	0f 87 06 01 00
	00		 ja	 $LN67@Assign_ran

; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004f	8b f0		 mov	 esi, eax
  00051	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  00056	d1 ee		 shr	 esi, 1
  00058	2b c6		 sub	 eax, esi
  0005a	89 75 08	 mov	 DWORD PTR tv673[ebp], esi
  0005d	8b 75 fc	 mov	 esi, DWORD PTR __Oldcapacity$1$[ebp]
  00060	3b f0		 cmp	 esi, eax
  00062	76 09		 jbe	 SHORT $LN13@Assign_ran

; 1621 :             return _Max; // geometric growth would overflow

  00064	c7 45 08 ff ff
	ff 1f		 mov	 DWORD PTR __Newcapacity$1$[ebp], 536870911 ; 1fffffffH
  0006b	eb 0d		 jmp	 SHORT $LN14@Assign_ran
$LN13@Assign_ran:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0006d	8b 45 08	 mov	 eax, DWORD PTR tv673[ebp]
  00070	03 c6		 add	 eax, esi

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  00072	3b c1		 cmp	 eax, ecx
  00074	0f 42 c1	 cmovb	 eax, ecx
  00077	89 45 08	 mov	 DWORD PTR __Newcapacity$1$[ebp], eax
$LN14@Assign_ran:

; 1291 :         if (_Myfirst) { // destroy and deallocate old array

  0007a	85 d2		 test	 edx, edx
  0007c	74 25		 je	 SHORT $LN10@Assign_ran
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007e	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  00085	50		 push	 eax
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1295 :             _Myfirst = pointer();

  0008c	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1296 :             _Mylast  = pointer();

  00095	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1297 :             _Myend   = pointer();

  0009c	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN10@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000a3	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$1$[ebp]
  000a6	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  000ab	0f 87 a9 00 00
	00		 ja	 $LN68@Assign_ran

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000b1	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000be	8b d0		 mov	 edx, eax
  000c0	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1644 :         _Myfirst           = _Newvec;

  000c3	89 13		 mov	 DWORD PTR [ebx], edx

; 1121 :                     _Clear_and_reserve_geometric(_Newsize);
; 1122 :                     _Oldsize = 0;

  000c5	33 c0		 xor	 eax, eax

; 1645 :         _Mylast            = _Newvec;

  000c7	89 53 04	 mov	 DWORD PTR [ebx+4], edx

; 1121 :                     _Clear_and_reserve_geometric(_Newsize);
; 1122 :                     _Oldsize = 0;

  000ca	89 55 08	 mov	 DWORD PTR __Dest$1$[ebp], edx

; 1646 :         _Myend             = _Newvec + _Newcapacity;

  000cd	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]

; 1121 :                     _Clear_and_reserve_geometric(_Newsize);
; 1122 :                     _Oldsize = 0;

  000d0	8b 75 0c	 mov	 esi, DWORD PTR __Last$[ebp]

; 1646 :         _Myend             = _Newvec + _Newcapacity;

  000d3	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 1120 :                 if (_Newsize > _Oldcapacity) { // reallocate

  000d6	eb 03		 jmp	 SHORT $LN4@Assign_ran
$LN63@Assign_ran:
  000d8	8b 45 f8	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
$LN4@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1714 :         _Where += _Off;

  000db	8d 0c c7	 lea	 ecx, DWORD PTR [edi+eax*8]

; 4392 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  000de	3b f9		 cmp	 edi, ecx
  000e0	74 30		 je	 SHORT $LN64@Assign_ran

; 1714 :         _Where += _Off;

  000e2	2b d7		 sub	 edx, edi
$LL38@Assign_ran:
  000e4	8b 07		 mov	 eax, DWORD PTR [edi]
  000e6	89 04 3a	 mov	 DWORD PTR [edx+edi], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\Type.h

; 142  : 		m_dwColor = r.m_dwColor;

  000e9	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000ec	89 44 3a 04	 mov	 DWORD PTR [edx+edi+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4392 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  000f0	83 c7 08	 add	 edi, 8
  000f3	3b f9		 cmp	 edi, ecx
  000f5	75 ed		 jne	 SHORT $LL38@Assign_ran
  000f7	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1588 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  000fa	53		 push	 ebx
  000fb	50		 push	 eax
  000fc	56		 push	 esi
  000fd	51		 push	 ecx
  000fe	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAV?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAPAV?$CTimeEvent@UDWORDCOLOR@@@@QAV1@0PAV1@AAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@@Z ; std::_Uninitialized_copy<CTimeEvent<DWORDCOLOR> *,std::allocator<CTimeEvent<DWORDCOLOR> > >
  00103	83 c4 10	 add	 esp, 16			; 00000010H

; 1123 :                 }
; 1124 : 
; 1125 :                 // performance note: traversing [_First, _Mid) twice
; 1126 :                 const _Iter _Mid = _STD next(_First, static_cast<difference_type>(_Oldsize));
; 1127 :                 _Copy_unchecked(_First, _Mid, _Myfirst);
; 1128 :                 _Mylast = _Ucopy(_Mid, _Last, _Mylast);

  00106	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00109	5f		 pop	 edi

; 1136 :     }

  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx
  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 0c 00	 ret	 12			; 0000000cH
$LN64@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4392 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00112	8b 45 08	 mov	 eax, DWORD PTR __Dest$1$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1588 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  00115	53		 push	 ebx
  00116	50		 push	 eax
  00117	56		 push	 esi
  00118	51		 push	 ecx
  00119	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAV?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAPAV?$CTimeEvent@UDWORDCOLOR@@@@QAV1@0PAV1@AAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@@Z ; std::_Uninitialized_copy<CTimeEvent<DWORDCOLOR> *,std::allocator<CTimeEvent<DWORDCOLOR> > >
  0011e	83 c4 10	 add	 esp, 16			; 00000010H

; 1123 :                 }
; 1124 : 
; 1125 :                 // performance note: traversing [_First, _Mid) twice
; 1126 :                 const _Iter _Mid = _STD next(_First, static_cast<difference_type>(_Oldsize));
; 1127 :                 _Copy_unchecked(_First, _Mid, _Myfirst);
; 1128 :                 _Mylast = _Ucopy(_Mid, _Last, _Mylast);

  00121	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00124	5f		 pop	 edi

; 1136 :     }

  00125	5e		 pop	 esi
  00126	5b		 pop	 ebx
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c2 0c 00	 ret	 12			; 0000000cH
$LN2@Assign_ran:

; 1129 :             } else {
; 1130 :                 const pointer _Newlast = _Myfirst + _Newsize;

  0012d	8d 0c ca	 lea	 ecx, DWORD PTR [edx+ecx*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4392 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00130	3b fe		 cmp	 edi, esi
  00132	74 15		 je	 SHORT $LN48@Assign_ran
$LL49@Assign_ran:
  00134	8b 07		 mov	 eax, DWORD PTR [edi]
  00136	8d 52 08	 lea	 edx, DWORD PTR [edx+8]
  00139	89 42 f8	 mov	 DWORD PTR [edx-8], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\Type.h

; 142  : 		m_dwColor = r.m_dwColor;

  0013c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4392 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  0013f	83 c7 08	 add	 edi, 8
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\Type.h

; 142  : 		m_dwColor = r.m_dwColor;

  00142	89 42 fc	 mov	 DWORD PTR [edx-4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4392 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00145	3b fe		 cmp	 edi, esi
  00147	75 eb		 jne	 SHORT $LL49@Assign_ran
$LN48@Assign_ran:
  00149	5f		 pop	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1136 :     }

  0014a	5e		 pop	 esi
  0014b	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  0014e	5b		 pop	 ebx
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c2 0c 00	 ret	 12			; 0000000cH
$LN67@Assign_ran:

; 1286 :             _Xlength();

  00155	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Xlength
$LN68@Assign_ran:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0015a	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN65@Assign_ran:
  0015f	cc		 int	 3
??$_Assign_range@PAV?$CTimeEvent@UDWORDCOLOR@@@@@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@AAEXPAV?$CTimeEvent@UDWORDCOLOR@@@@0Uforward_iterator_tag@1@@Z ENDP ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Assign_range<CTimeEvent<DWORDCOLOR> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXAAV?$allocator@V?$CTimeEvent@M@@@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXAAV?$allocator@V?$CTimeEvent@M@@@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<CTimeEvent<float> > >, COMDAT

; 886  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 887  :         _Left = _Right;
; 888  :     }
; 889  : }

  00000	c2 00 00	 ret	 0
??$_Pocca@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXAAV?$allocator@V?$CTimeEvent@M@@@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<CTimeEvent<float> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXPAV?$CTimeEvent@M@@QAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXPAV?$CTimeEvent@M@@QAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CTimeEvent<float> > >, COMDAT

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAXPAV?$CTimeEvent@M@@QAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CTimeEvent<float> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAXAAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAXAAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<CTimeEvent<DWORDCOLOR> > >, COMDAT

; 886  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 887  :         _Left = _Right;
; 888  :     }
; 889  : }

  00000	c2 00 00	 ret	 0
??$_Pocca@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAXAAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<CTimeEvent<DWORDCOLOR> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAXPAV?$CTimeEvent@UDWORDCOLOR@@@@QAV1@AAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAXPAV?$CTimeEvent@UDWORDCOLOR@@@@QAV1@AAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CTimeEvent<DWORDCOLOR> > >, COMDAT

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@YAXPAV?$CTimeEvent@UDWORDCOLOR@@@@QAV1@AAV?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CTimeEvent<DWORDCOLOR> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAXAAV?$allocator@PAVCGraphicImage@@@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAXAAV?$allocator@PAVCGraphicImage@@@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<CGraphicImage *> >, COMDAT

; 886  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 887  :         _Left = _Right;
; 888  :     }
; 889  : }

  00000	c2 00 00	 ret	 0
??$_Pocca@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAXAAV?$allocator@PAVCGraphicImage@@@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<CGraphicImage *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAXPAPAVCGraphicImage@@QAPAV1@AAV?$allocator@PAVCGraphicImage@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAXPAPAVCGraphicImage@@QAPAV1@AAV?$allocator@PAVCGraphicImage@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CGraphicImage *> >, COMDAT

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAXPAPAVCGraphicImage@@QAPAV1@AAV?$allocator@PAVCGraphicImage@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CGraphicImage *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCGraphicImage@@@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@QAEPAPAVCGraphicImage@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv435 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
tv434 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCGraphicImage@@@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@QAEPAPAVCGraphicImage@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Emplace_reallocate<CGraphicImage * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 c4 00 00
	00		 je	 $LN39@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 3a		 jbe	 SHORT $LN12@Emplace_re

; 1621 :             return _Max; // geometric growth would overflow

  00045	b9 ff ff ff 3f	 mov	 ecx, 1073741823		; 3fffffffH
$LN20@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 65   :     return _Count * _Ty_size;

  0004a	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00051	50		 push	 eax

; 65   :     return _Count * _Ty_size;

  00052	89 45 f4	 mov	 DWORD PTR tv435[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00055	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005d	8b f8		 mov	 edi, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0005f	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00062	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00065	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  00068	89 45 fc	 mov	 DWORD PTR tv434[ebp], eax
  0006b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006d	89 08		 mov	 DWORD PTR [eax], ecx
  0006f	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00072	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00074	3b da		 cmp	 ebx, edx
  00076	75 1b		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  00078	8b 5d fc	 mov	 ebx, DWORD PTR tv434[ebp]

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0007b	8b c7		 mov	 eax, edi

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);
; 754  :         } else { // provide basic guarantee

  0007d	eb 2b		 jmp	 SHORT $LN5@Emplace_re
$LN12@Emplace_re:

; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0007f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00082	8b cf		 mov	 ecx, edi
  00084	3b c7		 cmp	 eax, edi
  00086	0f 43 c8	 cmovae	 ecx, eax
  00089	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0008f	77 60		 ja	 SHORT $LN40@Emplace_re
  00091	eb b7		 jmp	 SHORT $LN20@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00093	56		 push	 esi
  00094	57		 push	 edi
  00095	53		 push	 ebx
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAPAPAVCGraphicImage@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImage@@@0@@Z ; std::_Uninitialized_move<CGraphicImage * *,std::allocator<CGraphicImage *> >
  0009c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0009f	8b cb		 mov	 ecx, ebx

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a1	8b 5d fc	 mov	 ebx, DWORD PTR tv434[ebp]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000a4	83 c4 10	 add	 esp, 16			; 00000010H

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000a7	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  000aa	56		 push	 esi
  000ab	50		 push	 eax
  000ac	52		 push	 edx
  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@YAPAPAVCGraphicImage@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCGraphicImage@@@0@@Z ; std::_Uninitialized_move<CGraphicImage * *,std::allocator<CGraphicImage *> >

; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  000b3	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);
; 756  :             _Constructed_first = _Newvec;
; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000b5	83 c4 10	 add	 esp, 16			; 00000010H

; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  000b8	85 c9		 test	 ecx, ecx
  000ba	74 12		 je	 SHORT $LN33@Emplace_re

; 1677 :             _Destroy(_Myfirst, _Mylast);
; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000bc	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000bf	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c1	83 e0 fc	 and	 eax, -4			; fffffffcH
  000c4	50		 push	 eax
  000c5	51		 push	 ecx
  000c6	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000cb	83 c4 08	 add	 esp, 8
$LN33@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1682 :         _Mylast  = _Newvec + _Newsize;

  000ce	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  000d1	89 3e		 mov	 DWORD PTR [esi], edi
  000d3	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000d6	8b c3		 mov	 eax, ebx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  000d8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000db	8b 4d f4	 mov	 ecx, DWORD PTR tv435[ebp]
  000de	03 cf		 add	 ecx, edi

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000e0	5f		 pop	 edi

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000e1	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx

; 767  :     }

  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 08 00	 ret	 8
$LN39@Emplace_re:

; 738  :             _Xlength();

  000ec	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Xlength
$LN40@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000f1	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN37@Emplace_re:
  000f6	cc		 int	 3
??$_Emplace_reallocate@ABQAVCGraphicImage@@@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@QAEPAPAVCGraphicImage@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Emplace_reallocate<CGraphicImage * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCParticleProperty@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCParticleProperty@@UAEPAXI@Z PROC			; CParticleProperty::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CParticleProperty@@UAE@XZ ; CParticleProperty::~CParticleProperty
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 88 00 00 00	 push	 136			; 00000088H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCParticleProperty@@UAEPAXI@Z ENDP			; CParticleProperty::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
;	COMDAT ??4CParticleProperty@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
__First$1$ = -4						; size = 4
__Last$1$ = 8						; size = 4
$T1 = 8							; size = 1
_c_ParticleProperty$ = 8				; size = 4
??4CParticleProperty@@QAEAAV0@ABV0@@Z PROC		; CParticleProperty::operator=, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi

; 82   : 	m_byTexAniType = c_ParticleProperty.m_byTexAniType;

  00008	8b 75 08	 mov	 esi, DWORD PTR _c_ParticleProperty$[ebp]
  0000b	57		 push	 edi

; 83   : 	m_fTexAniDelay = c_ParticleProperty.m_fTexAniDelay;
; 84   : 	m_bTexAniRandomStartFrameFlag = c_ParticleProperty.m_bTexAniRandomStartFrameFlag;
; 85   : 	
; 86   : 	m_bySrcBlendType = c_ParticleProperty.m_bySrcBlendType;
; 87   : 	m_byDestBlendType = c_ParticleProperty.m_byDestBlendType;
; 88   : 	m_byColorOperationType = c_ParticleProperty.m_byColorOperationType;
; 89   : 	
; 90   : 	m_byBillboardType = c_ParticleProperty.m_byBillboardType;
; 91   : 	
; 92   : 	m_byRotationType = c_ParticleProperty.m_byRotationType;
; 93   : 	m_fRotationSpeed = c_ParticleProperty.m_fRotationSpeed;
; 94   : 	m_wRotationRandomStartingBegin = c_ParticleProperty.m_wRotationRandomStartingBegin;
; 95   : 	m_wRotationRandomStartingEnd = c_ParticleProperty.m_wRotationRandomStartingEnd;
; 96   : 	
; 97   : 	m_bAttachFlag = c_ParticleProperty.m_bAttachFlag;
; 98   : 	m_bStretchFlag = c_ParticleProperty.m_bStretchFlag;
; 99   : 	
; 100  : 	m_TimeEventGravity = c_ParticleProperty.m_TimeEventGravity;

  0000c	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  0000f	0f b6 46 04	 movzx	 eax, BYTE PTR [esi+4]
  00013	88 43 04	 mov	 BYTE PTR [ebx+4], al
  00016	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00019	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0001c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001f	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  00022	0f b6 46 10	 movzx	 eax, BYTE PTR [esi+16]
  00026	88 43 10	 mov	 BYTE PTR [ebx+16], al
  00029	0f b6 46 11	 movzx	 eax, BYTE PTR [esi+17]
  0002d	88 43 11	 mov	 BYTE PTR [ebx+17], al
  00030	0f b6 46 12	 movzx	 eax, BYTE PTR [esi+18]
  00034	88 43 12	 mov	 BYTE PTR [ebx+18], al
  00037	0f b6 46 13	 movzx	 eax, BYTE PTR [esi+19]
  0003b	88 43 13	 mov	 BYTE PTR [ebx+19], al
  0003e	0f b6 46 14	 movzx	 eax, BYTE PTR [esi+20]
  00042	88 43 14	 mov	 BYTE PTR [ebx+20], al
  00045	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00048	89 43 18	 mov	 DWORD PTR [ebx+24], eax
  0004b	0f b7 46 1c	 movzx	 eax, WORD PTR [esi+28]
  0004f	66 89 43 1c	 mov	 WORD PTR [ebx+28], ax
  00053	0f b7 46 1e	 movzx	 eax, WORD PTR [esi+30]
  00057	66 89 43 1e	 mov	 WORD PTR [ebx+30], ax
  0005b	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0005e	89 43 20	 mov	 DWORD PTR [ebx+32], eax
  00061	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00064	89 43 24	 mov	 DWORD PTR [ebx+36], eax
  00067	8d 46 28	 lea	 eax, DWORD PTR [esi+40]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??4?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::operator=

; 101  : 	m_TimeEventAirResistance = c_ParticleProperty.m_TimeEventAirResistance;

  00070	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  00073	50		 push	 eax
  00074	8d 4b 34	 lea	 ecx, DWORD PTR [ebx+52]
  00077	e8 00 00 00 00	 call	 ??4?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::operator=

; 102  : 	
; 103  : 	m_TimeEventScaleX = c_ParticleProperty.m_TimeEventScaleX;

  0007c	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  0007f	50		 push	 eax
  00080	8d 4b 40	 lea	 ecx, DWORD PTR [ebx+64]
  00083	e8 00 00 00 00	 call	 ??4?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::operator=

; 104  : 	m_TimeEventScaleY = c_ParticleProperty.m_TimeEventScaleY;

  00088	8d 46 4c	 lea	 eax, DWORD PTR [esi+76]
  0008b	50		 push	 eax
  0008c	8d 4b 4c	 lea	 ecx, DWORD PTR [ebx+76]
  0008f	e8 00 00 00 00	 call	 ??4?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::operator=

; 105  : 
; 106  : #ifdef WORLD_EDITOR
; 107  : 	m_TimeEventColorRed = c_ParticleProperty.m_TimeEventColorRed;
; 108  : 	m_TimeEventColorGreen = c_ParticleProperty.m_TimeEventColorGreen;
; 109  : 	m_TimeEventColorBlue = c_ParticleProperty.m_TimeEventColorBlue;
; 110  : 	m_TimeEventAlpha = c_ParticleProperty.m_TimeEventAlpha;
; 111  : 
; 112  : 	m_TextureNameVector = c_ParticleProperty.m_TextureNameVector;
; 113  : #else
; 114  : 	m_TimeEventColor = c_ParticleProperty.m_TimeEventColor;

  00094	8d 46 58	 lea	 eax, DWORD PTR [esi+88]
  00097	8d 4b 58	 lea	 ecx, DWORD PTR [ebx+88]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1168 :         if (this != _STD addressof(_Right)) {

  0009a	3b c8		 cmp	 ecx, eax
  0009c	74 0d		 je	 SHORT $LN4@operator

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  0009e	ff 75 08	 push	 DWORD PTR $T1[ebp]
  000a1	ff 70 04	 push	 DWORD PTR [eax+4]
  000a4	ff 30		 push	 DWORD PTR [eax]
  000a6	e8 00 00 00 00	 call	 ??$_Assign_range@PAV?$CTimeEvent@UDWORDCOLOR@@@@@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@AAEXPAV?$CTimeEvent@UDWORDCOLOR@@@@0Uforward_iterator_tag@1@@Z ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Assign_range<CTimeEvent<DWORDCOLOR> *>
$LN4@operator:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp

; 116  : 	m_TimeEventRotation = c_ParticleProperty.m_TimeEventRotation;

  000ab	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  000ae	50		 push	 eax
  000af	8d 4b 64	 lea	 ecx, DWORD PTR [ebx+100]
  000b2	e8 00 00 00 00	 call	 ??4?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::operator=

; 117  : 
; 118  : 	m_ImageVector = c_ParticleProperty.m_ImageVector;

  000b7	83 c6 70	 add	 esi, 112		; 00000070H
  000ba	8d 7b 70	 lea	 edi, DWORD PTR [ebx+112]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1168 :         if (this != _STD addressof(_Right)) {

  000bd	3b fe		 cmp	 edi, esi
  000bf	0f 84 ac 00 00
	00		 je	 $LN44@operator

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  000c5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1794 :         return _Last - _First; // assume the iterator will do debug checking

  000c8	8b d0		 mov	 edx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  000ca	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1794 :         return _Last - _First; // assume the iterator will do debug checking

  000cc	2b d1		 sub	 edx, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  000ce	89 4d fc	 mov	 DWORD PTR __First$1$[ebp], ecx

; 1107 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  000d1	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  000d4	89 45 08	 mov	 DWORD PTR __Last$1$[ebp], eax

; 1107 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  000d7	8b 07		 mov	 eax, DWORD PTR [edi]
  000d9	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1794 :         return _Last - _First; // assume the iterator will do debug checking

  000db	c1 fa 02	 sar	 edx, 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1107 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  000de	c1 f9 02	 sar	 ecx, 2

; 1108 :             if (_Newsize > _Oldcapacity) {

  000e1	3b d1		 cmp	 edx, ecx
  000e3	76 74		 jbe	 SHORT $LN42@operator

; 1285 :         if (_Newsize > max_size()) {

  000e5	81 fa ff ff ff
	3f		 cmp	 edx, 1073741823		; 3fffffffH
  000eb	0f 87 8b 00 00
	00		 ja	 $LN51@operator

; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  000f1	8b f1		 mov	 esi, ecx
  000f3	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  000f8	d1 ee		 shr	 esi, 1
  000fa	2b c6		 sub	 eax, esi
  000fc	3b c8		 cmp	 ecx, eax
  000fe	76 07		 jbe	 SHORT $LN27@operator

; 1621 :             return _Max; // geometric growth would overflow

  00100	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
  00105	eb 07		 jmp	 SHORT $LN28@operator
$LN27@operator:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00107	03 f1		 add	 esi, ecx

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  00109	3b f2		 cmp	 esi, edx
  0010b	0f 42 f2	 cmovb	 esi, edx
$LN28@operator:

; 1291 :         if (_Myfirst) { // destroy and deallocate old array

  0010e	8b 17		 mov	 edx, DWORD PTR [edi]
  00110	85 d2		 test	 edx, edx
  00112	74 25		 je	 SHORT $LN24@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00114	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0011b	50		 push	 eax
  0011c	52		 push	 edx
  0011d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1295 :             _Myfirst = pointer();

  00122	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00128	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1296 :             _Mylast  = pointer();

  0012b	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1297 :             _Myend   = pointer();

  00132	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN24@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00139	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0013f	77 40		 ja	 SHORT $LN52@operator

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00141	c1 e6 02	 shl	 esi, 2

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00144	56		 push	 esi
  00145	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1644 :         _Myfirst           = _Newvec;

  0014a	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0014c	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1645 :         _Mylast            = _Newvec;

  0014f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1646 :         _Myend             = _Newvec + _Newcapacity;

  00152	03 c6		 add	 eax, esi
  00154	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00157	8b 07		 mov	 eax, DWORD PTR [edi]
$LN42@operator:

; 1112 :             _Mylast = _Refancy<pointer>(_Copy_memmove(_First, _Last, _Unfancy(_Myfirst)));

  00159	50		 push	 eax
  0015a	ff 75 08	 push	 DWORD PTR __Last$1$[ebp]
  0015d	ff 75 fc	 push	 DWORD PTR __First$1$[ebp]
  00160	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImage@@PAPAV1@@std@@YAPAPAVCGraphicImage@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImage * *,CGraphicImage * *>
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 ??$_Refancy@PAPAVCGraphicImage@@$0A@@std@@YAPAPAVCGraphicImage@@PAPAV1@@Z ; std::_Refancy<CGraphicImage * *,0>
  0016b	83 c4 10	 add	 esp, 16			; 00000010H
  0016e	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN44@operator:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp

; 120  : 	return *this;

  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	8b c3		 mov	 eax, ebx
  00175	5b		 pop	 ebx

; 121  : }

  00176	8b e5		 mov	 esp, ebp
  00178	5d		 pop	 ebp
  00179	c2 04 00	 ret	 4
$LN51@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1286 :             _Xlength();

  0017c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Xlength
$LN52@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00181	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN49@operator:
  00186	cc		 int	 3
??4CParticleProperty@@QAEAAV0@ABV0@@Z ENDP		; CParticleProperty::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Xlength, COMDAT

; 1705 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@CAXXZ PROC ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Xlength, COMDAT

; 1705 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$CTimeEvent@UDWORDCOLOR@@@@V?$allocator@V?$CTimeEvent@UDWORDCOLOR@@@@@std@@@std@@CAXXZ ENDP ; std::vector<CTimeEvent<DWORDCOLOR>,std::allocator<CTimeEvent<DWORDCOLOR> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength, COMDAT

; 1705 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??4?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Last$1$ = -4						; size = 4
tv602 = 8						; size = 4
__Newcapacity$1$ = 8					; size = 4
__Newlast$1$ = 8					; size = 4
__Right$ = 8						; size = 4
??4?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::operator=, COMDAT
; _this$ = ecx

; 1167 :     vector& operator=(const vector& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 1168 :         if (this != _STD addressof(_Right)) {

  00006	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	3b de		 cmp	 ebx, esi
  0000d	0f 84 29 01 00
	00		 je	 $LN10@operator

; 1116 :             auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00013	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00016	8b 13		 mov	 edx, DWORD PTR [ebx]
  00018	2b c2		 sub	 eax, edx

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  0001a	57		 push	 edi
  0001b	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1794 :         return _Last - _First; // assume the iterator will do debug checking

  0001e	8b cf		 mov	 ecx, edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  00020	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1794 :         return _Last - _First; // assume the iterator will do debug checking

  00022	2b ce		 sub	 ecx, esi
  00024	c1 f9 03	 sar	 ecx, 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1116 :             auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00027	c1 f8 03	 sar	 eax, 3

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  0002a	89 7d fc	 mov	 DWORD PTR __Last$1$[ebp], edi

; 1118 :             if (_Newsize > _Oldsize) {

  0002d	3b c8		 cmp	 ecx, eax
  0002f	0f 86 dd 00 00
	00		 jbe	 $LN9@operator

; 1119 :                 const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00035	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  00038	2b fa		 sub	 edi, edx
  0003a	c1 ff 03	 sar	 edi, 3

; 1120 :                 if (_Newsize > _Oldcapacity) { // reallocate

  0003d	3b cf		 cmp	 ecx, edi
  0003f	0f 86 8f 00 00
	00		 jbe	 $LN69@operator

; 1285 :         if (_Newsize > max_size()) {

  00045	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  0004b	0f 87 f5 00 00
	00		 ja	 $LN73@operator

; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00051	8b c7		 mov	 eax, edi
  00053	d1 e8		 shr	 eax, 1
  00055	89 45 08	 mov	 DWORD PTR tv602[ebp], eax
  00058	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  0005d	2b 45 08	 sub	 eax, DWORD PTR tv602[ebp]
  00060	3b f8		 cmp	 edi, eax
  00062	76 09		 jbe	 SHORT $LN20@operator

; 1621 :             return _Max; // geometric growth would overflow

  00064	c7 45 08 ff ff
	ff 1f		 mov	 DWORD PTR __Newcapacity$1$[ebp], 536870911 ; 1fffffffH
  0006b	eb 0d		 jmp	 SHORT $LN21@operator
$LN20@operator:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0006d	8b 45 08	 mov	 eax, DWORD PTR tv602[ebp]
  00070	03 c7		 add	 eax, edi

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  00072	3b c1		 cmp	 eax, ecx
  00074	0f 42 c1	 cmovb	 eax, ecx
  00077	89 45 08	 mov	 DWORD PTR __Newcapacity$1$[ebp], eax
$LN21@operator:

; 1291 :         if (_Myfirst) { // destroy and deallocate old array

  0007a	85 d2		 test	 edx, edx
  0007c	74 25		 je	 SHORT $LN17@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007e	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]
  00085	50		 push	 eax
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1295 :             _Myfirst = pointer();

  0008c	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1296 :             _Mylast  = pointer();

  00095	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1297 :             _Myend   = pointer();

  0009c	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN17@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000a3	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$1$[ebp]
  000a6	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  000ab	0f 87 9a 00 00
	00		 ja	 $LN74@operator

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000b1	8d 3c c5 00 00
	00 00		 lea	 edi, DWORD PTR [eax*8]

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b8	57		 push	 edi
  000b9	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000be	8b d0		 mov	 edx, eax
  000c0	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1644 :         _Myfirst           = _Newvec;

  000c3	89 13		 mov	 DWORD PTR [ebx], edx

; 1122 :                     _Oldsize = 0;

  000c5	33 c0		 xor	 eax, eax

; 1645 :         _Mylast            = _Newvec;

  000c7	89 53 04	 mov	 DWORD PTR [ebx+4], edx

; 1646 :         _Myend             = _Newvec + _Newcapacity;

  000ca	8d 0c 17	 lea	 ecx, DWORD PTR [edi+edx]
  000cd	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 1122 :                     _Oldsize = 0;

  000d0	8b ca		 mov	 ecx, edx
  000d2	eb 03		 jmp	 SHORT $LN11@operator
$LN69@operator:

; 1120 :                 if (_Newsize > _Oldcapacity) { // reallocate

  000d4	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN11@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1714 :         _Where += _Off;

  000d7	8d 3c c6	 lea	 edi, DWORD PTR [esi+eax*8]

; 4392 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  000da	3b f7		 cmp	 esi, edi
  000dc	74 18		 je	 SHORT $LN44@operator

; 1714 :         _Where += _Off;

  000de	2b d6		 sub	 edx, esi
$LL61@operator:

; 4393 :         *_Dest = *_First;

  000e0	8b 06		 mov	 eax, DWORD PTR [esi]
  000e2	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000e5	89 04 32	 mov	 DWORD PTR [edx+esi], eax
  000e8	89 4c 32 04	 mov	 DWORD PTR [edx+esi+4], ecx
  000ec	83 c6 08	 add	 esi, 8
  000ef	3b f7		 cmp	 esi, edi
  000f1	75 ed		 jne	 SHORT $LL61@operator
  000f3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN44@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1588 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  000f6	53		 push	 ebx
  000f7	51		 push	 ecx
  000f8	ff 75 fc	 push	 DWORD PTR __Last$1$[ebp]
  000fb	57		 push	 edi
  000fc	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAV?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@YAPAV?$CTimeEvent@M@@QAV1@0PAV1@AAV?$allocator@V?$CTimeEvent@M@@@0@@Z ; std::_Uninitialized_copy<CTimeEvent<float> *,std::allocator<CTimeEvent<float> > >
  00101	83 c4 10	 add	 esp, 16			; 00000010H

; 1133 :                 _Mylast = _Newlast;

  00104	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1169 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});
; 1170 :         }
; 1171 : 
; 1172 :         return *this;

  00107	8b c3		 mov	 eax, ebx
  00109	5f		 pop	 edi
  0010a	5e		 pop	 esi
  0010b	5b		 pop	 ebx

; 1173 :     }

  0010c	8b e5		 mov	 esp, ebp
  0010e	5d		 pop	 ebp
  0010f	c2 04 00	 ret	 4
$LN9@operator:

; 1130 :                 const pointer _Newlast = _Myfirst + _Newsize;

  00112	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00115	89 45 08	 mov	 DWORD PTR __Newlast$1$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4392 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00118	3b f7		 cmp	 esi, edi
  0011a	74 1c		 je	 SHORT $LN51@operator
  0011c	0f 1f 40 00	 npad	 4
$LL63@operator:

; 4393 :         *_Dest = *_First;

  00120	8b 06		 mov	 eax, DWORD PTR [esi]
  00122	8d 52 08	 lea	 edx, DWORD PTR [edx+8]
  00125	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00128	83 c6 08	 add	 esi, 8
  0012b	89 42 f8	 mov	 DWORD PTR [edx-8], eax
  0012e	89 4a fc	 mov	 DWORD PTR [edx-4], ecx
  00131	3b f7		 cmp	 esi, edi
  00133	75 eb		 jne	 SHORT $LL63@operator
  00135	8b 45 08	 mov	 eax, DWORD PTR __Newlast$1$[ebp]
$LN51@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1133 :                 _Mylast = _Newlast;

  00138	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0013b	5f		 pop	 edi
$LN10@operator:

; 1169 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});
; 1170 :         }
; 1171 : 
; 1172 :         return *this;

  0013c	5e		 pop	 esi
  0013d	8b c3		 mov	 eax, ebx
  0013f	5b		 pop	 ebx

; 1173 :     }

  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 04 00	 ret	 4
$LN73@operator:

; 1286 :             _Xlength();

  00146	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
$LN74@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0014b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN71@operator:
  00150	cc		 int	 3
??4?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
;	COMDAT ?SetTexture@CParticleProperty@@QAE_NPBD@Z
_TEXT	SEGMENT
_c_szFileName$ = 8					; size = 4
?SetTexture@CParticleProperty@@QAE_NPBD@Z PROC		; CParticleProperty::SetTexture, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00006	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  00009	2b c2		 sub	 eax, edx
  0000b	c1 f8 02	 sar	 eax, 2
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp

; 17   : 	if (m_ImageVector.size() > 1)

  0000e	83 f8 01	 cmp	 eax, 1
  00011	76 06		 jbe	 SHORT $LN2@SetTexture

; 18   : 	{
; 19   : 		assert(false);
; 20   : 		return false;

  00013	32 c0		 xor	 al, al

; 28   : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN2@SetTexture:

; 21   : 	}
; 22   : 	m_ImageVector.clear();
; 23   : #ifdef WORLD_EDITOR
; 24   : 	m_TextureNameVector.clear();
; 25   : #endif
; 26   : 	InsertTexture(c_szFileName);

  00019	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  0001c	89 51 74	 mov	 DWORD PTR [ecx+116], edx
  0001f	e8 00 00 00 00	 call	 ?InsertTexture@CParticleProperty@@QAEXPBD@Z ; CParticleProperty::InsertTexture

; 27   : 	return true;

  00024	b0 01		 mov	 al, 1

; 28   : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?SetTexture@CParticleProperty@@QAE_NPBD@Z ENDP		; CParticleProperty::SetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
;	COMDAT ?InsertTexture@CParticleProperty@@QAEXPBD@Z
_TEXT	SEGMENT
_pImage$ = 8						; size = 4
_c_szFileName$ = 8					; size = 4
?InsertTexture@CParticleProperty@@QAEXPBD@Z PROC	; CParticleProperty::InsertTexture, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 7    : 	CGraphicImage * pImage = (CGraphicImage *)CResourceManager::Instance().GetResourcePointer(c_szFileName);

  00004	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0000f	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  00014	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp

; 9    : 	m_ImageVector.push_back(pImage);

  00017	8d 4e 70	 lea	 ecx, DWORD PTR [esi+112]
  0001a	89 45 08	 mov	 DWORD PTR _pImage$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  0001d	5e		 pop	 esi
  0001e	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00021	74 0a		 je	 SHORT $LN6@InsertText

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00023	89 02		 mov	 DWORD PTR [edx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  00025	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp

; 13   : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
$LN6@InsertText:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002d	8d 45 08	 lea	 eax, DWORD PTR _pImage$[ebp]
  00030	50		 push	 eax
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicImage@@@?$vector@PAVCGraphicImage@@V?$allocator@PAVCGraphicImage@@@std@@@std@@QAEPAPAVCGraphicImage@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImage *,std::allocator<CGraphicImage *> >::_Emplace_reallocate<CGraphicImage * const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp

; 13   : }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
?InsertTexture@CParticleProperty@@QAEXPBD@Z ENDP	; CParticleProperty::InsertTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
;	COMDAT ?Clear@CParticleProperty@@QAEXXZ
_TEXT	SEGMENT
?Clear@CParticleProperty@@QAEXXZ PROC			; CParticleProperty::Clear, COMDAT
; _this$ = ecx

; 32   : 	m_byRotationType = 0;
; 33   : 	m_fRotationSpeed = 0.0f;
; 34   : 	m_wRotationRandomStartingBegin = 0;

  00000	33 c0		 xor	 eax, eax

; 35   : 	m_wRotationRandomStartingEnd = 0;
; 36   : 
; 37   : 	m_bAttachFlag = FALSE;
; 38   : 	m_bStretchFlag = FALSE;
; 39   : 
; 40   : 	m_bySrcBlendType = D3DBLEND_SRCALPHA;
; 41   : 	m_byDestBlendType = D3DBLEND_ONE;
; 42   : 	m_byColorOperationType = D3DTOP_MODULATE; 
; 43   : 
; 44   : 	m_byBillboardType = BILLBOARD_TYPE_NONE;

  00002	66 c7 41 13 00
	00		 mov	 WORD PTR [ecx+19], 0
  00008	89 41 1c	 mov	 DWORD PTR [ecx+28], eax
  0000b	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0000e	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 45   : 
; 46   : 	m_byTexAniType = TEXTURE_ANIMATION_TYPE_NONE;

  00011	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 47   : 	m_fTexAniDelay = 0.05f;
; 48   : 	m_bTexAniRandomStartFrameFlag = FALSE;

  00014	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 49   : 
; 50   : 	//m_fGravity = 0.0f;
; 51   : 	//m_fAirResistance = 0.0f;
; 52   : 
; 53   : 	m_TimeEventGravity.clear();

  00017	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  0001a	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 54   : 	m_TimeEventAirResistance.clear();

  0001d	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00020	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 55   : 
; 56   : 	m_TimeEventScaleX.clear();

  00023	8b 41 40	 mov	 eax, DWORD PTR [ecx+64]
  00026	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 57   : 	m_TimeEventScaleY.clear();

  00029	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  0002c	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 58   : 	//m_TimeEventScaleXY.clear();
; 59   : #ifdef WORLD_EDITOR
; 60   : 	m_TimeEventColorRed.clear();
; 61   : 	m_TimeEventColorGreen.clear();
; 62   : 	m_TimeEventColorBlue.clear();
; 63   : 	m_TimeEventAlpha.clear();
; 64   : 	m_TextureNameVector.clear();
; 65   : #else
; 66   : 	m_TimeEventColor.clear();

  0002f	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00032	89 41 5c	 mov	 DWORD PTR [ecx+92], eax

; 67   : #endif
; 68   : 	m_TimeEventRotation.clear();

  00035	8b 41 64	 mov	 eax, DWORD PTR [ecx+100]
  00038	89 41 68	 mov	 DWORD PTR [ecx+104], eax

; 69   : 
; 70   : 	m_ImageVector.clear();

  0003b	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  0003e	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00045	66 c7 41 10 05
	02		 mov	 WORD PTR [ecx+16], 517	; 00000205H
  0004b	c6 41 12 04	 mov	 BYTE PTR [ecx+18], 4
  0004f	c7 41 08 cd cc
	4c 3d		 mov	 DWORD PTR [ecx+8], 1028443341 ; 3d4ccccdH
  00056	89 41 74	 mov	 DWORD PTR [ecx+116], eax

; 71   : }

  00059	c3		 ret	 0
?Clear@CParticleProperty@@QAEXXZ ENDP			; CParticleProperty::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
;	COMDAT ??1CParticleProperty@@UAE@XZ
_TEXT	SEGMENT
??1CParticleProperty@@UAE@XZ PROC			; CParticleProperty::~CParticleProperty, COMDAT
; _this$ = ecx

; 77   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CParticleProperty@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 27		 je	 SHORT $LN6@CParticleP

; 1695 :             _Destroy(_Myfirst, _Mylast);
; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00013	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e0 fc	 and	 eax, -4			; fffffffcH
  00018	50		 push	 eax
  00019	51		 push	 ecx
  0001a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  0001f	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1699 :             _Mylast  = pointer();

  00029	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 1700 :             _Myend   = pointer();

  00030	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
$LN6@CParticleP:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00037	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  0003a	85 c9		 test	 ecx, ecx
  0003c	74 27		 je	 SHORT $LN13@CParticleP

; 1695 :             _Destroy(_Myfirst, _Mylast);
; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0003e	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00041	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00043	83 e0 f8	 and	 eax, -8			; fffffff8H
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  0004d	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1699 :             _Mylast  = pointer();

  00057	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 1700 :             _Myend   = pointer();

  0005e	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0
$LN13@CParticleP:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00065	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00068	85 c9		 test	 ecx, ecx
  0006a	74 27		 je	 SHORT $LN20@CParticleP

; 1695 :             _Destroy(_Myfirst, _Mylast);
; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0006c	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0006f	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00071	83 e0 f8	 and	 eax, -8			; fffffff8H
  00074	50		 push	 eax
  00075	51		 push	 ecx
  00076	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  0007b	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00082	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1699 :             _Mylast  = pointer();

  00085	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1700 :             _Myend   = pointer();

  0008c	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
$LN20@CParticleP:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00093	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00096	85 c9		 test	 ecx, ecx
  00098	74 27		 je	 SHORT $LN27@CParticleP

; 1695 :             _Destroy(_Myfirst, _Mylast);
; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0009a	8b 46 54	 mov	 eax, DWORD PTR [esi+84]
  0009d	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009f	83 e0 f8	 and	 eax, -8			; fffffff8H
  000a2	50		 push	 eax
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  000a9	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000b0	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1699 :             _Mylast  = pointer();

  000b3	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0

; 1700 :             _Myend   = pointer();

  000ba	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
$LN27@CParticleP:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  000c1	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 27		 je	 SHORT $LN34@CParticleP

; 1695 :             _Destroy(_Myfirst, _Mylast);
; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000c8	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  000cb	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000cd	83 e0 f8	 and	 eax, -8			; fffffff8H
  000d0	50		 push	 eax
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  000d7	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000de	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1699 :             _Mylast  = pointer();

  000e1	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0

; 1700 :             _Myend   = pointer();

  000e8	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
$LN34@CParticleP:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  000ef	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  000f2	85 c9		 test	 ecx, ecx
  000f4	74 27		 je	 SHORT $LN41@CParticleP

; 1695 :             _Destroy(_Myfirst, _Mylast);
; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000f6	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  000f9	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fb	83 e0 f8	 and	 eax, -8			; fffffff8H
  000fe	50		 push	 eax
  000ff	51		 push	 ecx
  00100	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00105	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010c	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1699 :             _Mylast  = pointer();

  0010f	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 1700 :             _Myend   = pointer();

  00116	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
$LN41@CParticleP:

; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  0011d	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00120	85 c9		 test	 ecx, ecx
  00122	74 27		 je	 SHORT $LN48@CParticleP

; 1695 :             _Destroy(_Myfirst, _Mylast);
; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00124	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00127	2b c1		 sub	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00129	83 e0 f8	 and	 eax, -8			; fffffff8H
  0012c	50		 push	 eax
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00133	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0013a	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1699 :             _Mylast  = pointer();

  0013d	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 1700 :             _Myend   = pointer();

  00144	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN48@CParticleP:
  0014b	5e		 pop	 esi
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp

; 78   : }

  0014c	c3		 ret	 0
??1CParticleProperty@@UAE@XZ ENDP			; CParticleProperty::~CParticleProperty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp
;	COMDAT ??0CParticleProperty@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CParticleProperty@@QAE@XZ PROC			; CParticleProperty::CParticleProperty, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CParticleProperty@@6B@

; 75   : }

  0000a	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000c	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  00013	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  0001a	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  00021	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
  00028	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  0002f	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0
  00036	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0
  0003d	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0
  00044	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0
  0004b	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00052	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  00059	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0
  00060	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0
  00067	c7 41 5c 00 00
	00 00		 mov	 DWORD PTR [ecx+92], 0
  0006e	c7 41 60 00 00
	00 00		 mov	 DWORD PTR [ecx+96], 0
  00075	c7 41 64 00 00
	00 00		 mov	 DWORD PTR [ecx+100], 0
  0007c	c7 41 68 00 00
	00 00		 mov	 DWORD PTR [ecx+104], 0
  00083	c7 41 6c 00 00
	00 00		 mov	 DWORD PTR [ecx+108], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp

; 74   : {

  0008a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0008d	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0
  00094	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0
  0009b	c7 41 78 00 00
	00 00		 mov	 DWORD PTR [ecx+120], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\ParticleProperty.cpp

; 75   : }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
??0CParticleProperty@@QAE@XZ ENDP			; CParticleProperty::CParticleProperty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
