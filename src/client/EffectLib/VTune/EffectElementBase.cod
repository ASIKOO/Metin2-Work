; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CEffectElementBase@@QAE@XZ			; CEffectElementBase::CEffectElementBase
PUBLIC	??1CEffectElementBase@@UAE@XZ			; CEffectElementBase::~CEffectElementBase
PUBLIC	?Clear@CEffectElementBase@@QAEXXZ		; CEffectElementBase::Clear
PUBLIC	?isData@CEffectElementBase@@QAE_NXZ		; CEffectElementBase::isData
PUBLIC	?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z ; CEffectElementBase::LoadScript
PUBLIC	?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ; CEffectElementBase::GetPosition
PUBLIC	?GetStartTime@CEffectElementBase@@QAEMXZ	; CEffectElementBase::GetStartTime
PUBLIC	?deallocate@?$allocator@USEffectPosition@@@std@@QAEXQAUSEffectPosition@@I@Z ; std::allocator<SEffectPosition>::deallocate
PUBLIC	?clear@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::clear
PUBLIC	?_Destroy@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXPAUSEffectPosition@@0@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@ABEII@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXQAUSEffectPosition@@II@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Change_array
PUBLIC	?_Tidy@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Tidy
PUBLIC	?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
PUBLIC	??_GCEffectElementBase@@UAEPAXI@Z		; CEffectElementBase::`scalar deleting destructor'
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@QAE@PAUSEffectPosition@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Const_cast@$$CBUSEffectPosition@@@std@@YAPAUSEffectPosition@@PBU1@@Z ; std::_Const_cast<SEffectPosition const >
PUBLIC	??$emplace_back@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEXABUSEffectPosition@@@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::emplace_back<SEffectPosition const &>
PUBLIC	??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
PUBLIC	??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Destroy_range<std::allocator<SEffectPosition> >
PUBLIC	??$lower_bound@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@MU?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@0@V10@V10@ABMU?$less@X@0@@Z ; std::lower_bound<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >,float,std::less<void> >
PUBLIC	??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Uninitialized_move<SEffectPosition *,std::allocator<SEffectPosition> >
PUBLIC	??$_Refancy@PAUSEffectPosition@@$0A@@std@@YAPAUSEffectPosition@@PAU1@@Z ; std::_Refancy<SEffectPosition *,0>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CEffectElementBase@@6B@			; CEffectElementBase::`vftable'
PUBLIC	??_C@_09EJLICMCM@starttime@			; `string'
PUBLIC	??_C@_0BC@KPMBIEBE@timeeventposition@		; `string'
PUBLIC	??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@	; `string'
PUBLIC	??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@		; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CEffectElementBase@@6B@			; CEffectElementBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCEffectElementBase@@@8			; CEffectElementBase `RTTI Type Descriptor'
PUBLIC	??_R3CEffectElementBase@@8			; CEffectElementBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEffectElementBase@@8			; CEffectElementBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CEffectElementBase@@8		; CEffectElementBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_strlen:PROC
EXTRN	_fabs:PROC
EXTRN	_atof:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z:PROC ; CTextFileLoader::GetTokenVector
EXTRN	?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z:PROC ; CTextFileLoader::GetTokenFloat
EXTRN	??_ECEffectElementBase@@UAEPAXI@Z:PROC		; CEffectElementBase::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CEffectElementBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEffectElementBase@@8 DD FLAT:??_R0?AVCEffectElementBase@@@8 ; CEffectElementBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CEffectElementBase@@8
rdata$r	SEGMENT
??_R2CEffectElementBase@@8 DD FLAT:??_R1A@?0A@EA@CEffectElementBase@@8 ; CEffectElementBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEffectElementBase@@8
rdata$r	SEGMENT
??_R3CEffectElementBase@@8 DD 00H			; CEffectElementBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEffectElementBase@@@8
data$rs	SEGMENT
??_R0?AVCEffectElementBase@@@8 DD FLAT:??_7type_info@@6B@ ; CEffectElementBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEffectElementBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CEffectElementBase@@6B@
rdata$r	SEGMENT
??_R4CEffectElementBase@@6B@ DD 00H			; CEffectElementBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCEffectElementBase@@@8
	DD	FLAT:??_R3CEffectElementBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@
CONST	SEGMENT
??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@ DB 'MOVING_TYPE_DIRECT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@
CONST	SEGMENT
??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@ DB 'MOVING_TYPE_BEZIER_CURVE'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KPMBIEBE@timeeventposition@
CONST	SEGMENT
??_C@_0BC@KPMBIEBE@timeeventposition@ DB 'timeeventposition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EJLICMCM@starttime@
CONST	SEGMENT
??_C@_09EJLICMCM@starttime@ DB 'starttime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CEffectElementBase@@6B@
CONST	SEGMENT
??_7CEffectElementBase@@6B@ DD FLAT:??_R4CEffectElementBase@@6B@ ; CEffectElementBase::`vftable'
	DD	FLAT:??_ECEffectElementBase@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z$32 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z$32
__ehfuncinfo$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$1
__ehfuncinfo$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Refancy@PAUSEffectPosition@@$0A@@std@@YAPAUSEffectPosition@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAUSEffectPosition@@$0A@@std@@YAPAUSEffectPosition@@PAU1@@Z PROC ; std::_Refancy<SEffectPosition *,0>, COMDAT

; 261  : _Pointer _Refancy(_Pointer _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 263  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Refancy@PAUSEffectPosition@@$0A@@std@@YAPAUSEffectPosition@@PAU1@@Z ENDP ; std::_Refancy<SEffectPosition *,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z
_TEXT	SEGMENT
__Backout$1 = -52					; size = 12
___formal$ = -40					; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
__Ptr$ = -16						; size = 4
$T7 = -12						; size = 4
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z PROC ; std::_Uninitialized_move<SEffectPosition *,std::allocator<SEffectPosition> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

  00008	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000b	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00014	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00017	89 45 cc	 mov	 DWORD PTR __Backout$1[ebp], eax
  0001a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001d	89 45 d0	 mov	 DWORD PTR __Backout$1[ebp+4], eax
  00020	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00023	89 45 d4	 mov	 DWORD PTR __Backout$1[ebp+8], eax

; 1691 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1692 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1694 :         return _Dest + (_ULast - _UFirst);
; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {

  00026	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00028	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0002b	83 c0 20	 add	 eax, 32			; 00000020H
  0002e	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
  00031	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00034	3b 45 f8	 cmp	 eax, DWORD PTR __ULast$[ebp]
  00037	74 40		 je	 SHORT $LN3@Uninitiali
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00039	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0003c	89 45 f4	 mov	 DWORD PTR $T7[ebp], eax

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003f	8b 45 f4	 mov	 eax, DWORD PTR $T7[ebp]
  00042	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00045	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00048	89 45 f0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0004b	8b 45 f0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0004e	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00051	8b 45 d4	 mov	 eax, DWORD PTR __Backout$1[ebp+8]
  00054	89 45 d8	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00057	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp]
  0005a	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0005d	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  00060	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00063	6a 08		 push	 8
  00065	59		 pop	 ecx
  00066	8b 75 e4	 mov	 esi, DWORD PTR $T4[ebp]
  00069	8b 7d e0	 mov	 edi, DWORD PTR $T3[ebp]
  0006c	f3 a5		 rep movsd

; 1547 :         ++_Last;

  0006e	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00071	83 c0 20	 add	 eax, 32			; 00000020H
  00074	89 45 d0	 mov	 DWORD PTR __Backout$1[ebp+4], eax

; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1699 :         }

  00077	eb af		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1551 :         _First = _Last;

  00079	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  0007c	89 45 cc	 mov	 DWORD PTR __Backout$1[ebp], eax

; 1552 :         return _Last;

  0007f	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00082	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax

; 1541 :         _Destroy_range(_First, _Last, _Al);

  00085	ff 75 d4	 push	 DWORD PTR __Backout$1[ebp+8]
  00088	ff 75 d0	 push	 DWORD PTR __Backout$1[ebp+4]
  0008b	ff 75 cc	 push	 DWORD PTR __Backout$1[ebp]
  0008e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Destroy_range<std::allocator<SEffectPosition> >
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1700 : 
; 1701 :         return _Backout._Release();

  00096	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]

; 1702 :     }
; 1703 : }

  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	c9		 leave
  0009c	c3		 ret	 0
??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z ENDP ; std::_Uninitialized_move<SEffectPosition *,std::allocator<SEffectPosition> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\Type.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$lower_bound@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@MU?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@0@V10@V10@ABMU?$less@X@0@@Z
_TEXT	SEGMENT
__It$ = -56						; size = 4
$T1 = -52						; size = 4
$T2 = -48						; size = 4
__Ptr$3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Ptr$6 = -32						; size = 4
__UMid$7 = -28						; size = 4
tv137 = -24						; size = 4
__Count2$8 = -20					; size = 4
__First$ = -16						; size = 4
__First$ = -12						; size = 4
__UFirst$ = -8						; size = 4
__Count$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$lower_bound@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@MU?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@0@V10@V10@ABMU?$less@X@0@@Z PROC ; std::lower_bound<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >,float,std::less<void> >, COMDAT

; 5849 : _NODISCARD _CONSTEXPR20 _FwdIt lower_bound(_FwdIt _First, const _FwdIt _Last, const _Ty& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 e0	 mov	 DWORD PTR __Ptr$6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0000c	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$6[ebp]
  0000f	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  00012	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  00015	89 45 d8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 5852 :     auto _UFirst                = _Get_unwrapped(_First);

  00018	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  0001b	89 45 f8	 mov	 DWORD PTR __UFirst$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00021	89 45 d4	 mov	 DWORD PTR __Ptr$3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00024	8b 45 d4	 mov	 eax, DWORD PTR __Ptr$3[ebp]
  00027	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  0002a	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  0002d	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1794 :         return _Last - _First; // assume the iterator will do debug checking

  00030	8b 45 cc	 mov	 eax, DWORD PTR $T1[ebp]
  00033	2b 45 f8	 sub	 eax, DWORD PTR __UFirst$[ebp]
  00036	c1 f8 05	 sar	 eax, 5

; 5853 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _Get_unwrapped(_Last));

  00039	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
$LN2@lower_boun:

; 5854 : 
; 5855 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0003c	83 7d fc 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00040	7e 72		 jle	 SHORT $LN3@lower_boun

; 5856 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00042	8b 45 fc	 mov	 eax, DWORD PTR __Count$[ebp]
  00045	99		 cdq
  00046	2b c2		 sub	 eax, edx
  00048	d1 f8		 sar	 eax, 1
  0004a	89 45 ec	 mov	 DWORD PTR __Count2$8[ebp], eax

; 5857 :         const auto _UMid                   = _STD next(_UFirst, _Count2);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00050	89 45 f4	 mov	 DWORD PTR __First$[ebp], eax

; 1714 :         _Where += _Off;

  00053	8b 45 ec	 mov	 eax, DWORD PTR __Count2$8[ebp]
  00056	c1 e0 05	 shl	 eax, 5
  00059	03 45 f4	 add	 eax, DWORD PTR __First$[ebp]
  0005c	89 45 f4	 mov	 DWORD PTR __First$[ebp], eax

; 5857 :         const auto _UMid                   = _STD next(_UFirst, _Count2);

  0005f	8b 45 f4	 mov	 eax, DWORD PTR __First$[ebp]
  00062	89 45 e4	 mov	 DWORD PTR __UMid$7[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\Type.h

; 113  : 	return lhs.m_fTime < rhs;

  00065	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  00068	8b 4d e4	 mov	 ecx, DWORD PTR __UMid$7[ebp]
  0006b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0006f	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  00072	76 09		 jbe	 SHORT $LN35@lower_boun
  00074	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv137[ebp], 1
  0007b	eb 04		 jmp	 SHORT $LN36@lower_boun
$LN35@lower_boun:
  0007d	83 65 e8 00	 and	 DWORD PTR tv137[ebp], 0
$LN36@lower_boun:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 5858 :         if (_Pred(*_UMid, _Val)) { // try top half

  00081	0f b6 45 e8	 movzx	 eax, BYTE PTR tv137[ebp]
  00085	85 c0		 test	 eax, eax
  00087	74 23		 je	 SHORT $LN4@lower_boun

; 5859 :             _UFirst = _Next_iter(_UMid);

  00089	8b 45 e4	 mov	 eax, DWORD PTR __UMid$7[ebp]
  0008c	89 45 f0	 mov	 DWORD PTR __First$[ebp], eax

; 1837 :     return ++_First;

  0008f	8b 45 f0	 mov	 eax, DWORD PTR __First$[ebp]
  00092	83 c0 20	 add	 eax, 32			; 00000020H
  00095	89 45 f0	 mov	 DWORD PTR __First$[ebp], eax

; 5859 :             _UFirst = _Next_iter(_UMid);

  00098	8b 45 f0	 mov	 eax, DWORD PTR __First$[ebp]
  0009b	89 45 f8	 mov	 DWORD PTR __UFirst$[ebp], eax

; 5860 :             _Count -= _Count2 + 1;

  0009e	8b 45 ec	 mov	 eax, DWORD PTR __Count2$8[ebp]
  000a1	40		 inc	 eax
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR __Count$[ebp]
  000a5	2b c8		 sub	 ecx, eax
  000a7	89 4d fc	 mov	 DWORD PTR __Count$[ebp], ecx

; 5861 :         } else {

  000aa	eb 06		 jmp	 SHORT $LN5@lower_boun
$LN4@lower_boun:

; 5862 :             _Count = _Count2;

  000ac	8b 45 ec	 mov	 eax, DWORD PTR __Count2$8[ebp]
  000af	89 45 fc	 mov	 DWORD PTR __Count$[ebp], eax
$LN5@lower_boun:

; 5863 :         }
; 5864 :     }

  000b2	eb 88		 jmp	 SHORT $LN2@lower_boun
$LN3@lower_boun:

; 1490 :         _It._Seek_to(static_cast<_UIter&&>(_UIt));

  000b4	8b 45 f8	 mov	 eax, DWORD PTR __UFirst$[ebp]
  000b7	89 45 c8	 mov	 DWORD PTR __It$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 195  :         _Ptr = _Refancy<_Tptr>(const_cast<value_type*>(_It));

  000ba	ff 75 c8	 push	 DWORD PTR __It$[ebp]
  000bd	e8 00 00 00 00	 call	 ??$_Refancy@PAUSEffectPosition@@$0A@@std@@YAPAUSEffectPosition@@PAU1@@Z ; std::_Refancy<SEffectPosition *,0>
  000c2	59		 pop	 ecx
  000c3	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 5867 :     return _First;

  000c6	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000c9	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  000cc	89 08		 mov	 DWORD PTR [eax], ecx
  000ce	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 5868 : }

  000d1	c9		 leave
  000d2	c3		 ret	 0
??$lower_bound@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@MU?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@0@V10@V10@ABMU?$less@X@0@@Z ENDP ; std::lower_bound<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >,float,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SEffectPosition> >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SEffectPosition> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Max_possible$2 = -68					; size = 4
$T3 = -64						; size = 4
__Al$ = -60						; size = 4
__Last$ = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
__First$ = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T8 = -24						; size = 4
$T9 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T10 = 0						; size = 4
$T11 = 4						; size = 4
$T12 = 8						; size = 4
$T13 = 12						; size = 4
$T14 = 16						; size = 4
$T15 = 20						; size = 4
$T16 = 24						; size = 4
$T17 = 28						; size = 4
$T18 = 32						; size = 4
$T19 = 36						; size = 4
$T20 = 40						; size = 4
__Newsize$ = 44						; size = 4
__Constructed_last$ = 48				; size = 4
__Oldsize$ = 52						; size = 4
tv172 = 56						; size = 4
$T21 = 60						; size = 4
$T22 = 64						; size = 4
__My_data$ = 68						; size = 4
__Constructed_first$ = 72				; size = 4
___formal$ = 76						; size = 1
__Overflow_is_possible$23 = 83				; size = 1
__Newcapacity$ = 84					; size = 4
__Mylast$ = 88						; size = 4
__Myfirst$ = 92						; size = 4
__Whereoff$ = 96					; size = 4
$T24 = 103						; size = 1
_this$ = 104						; size = 4
__Newvec$ = 108						; size = 4
__Whereptr$ = 120					; size = 4
_<_Val_0>$ = 124					; size = 4
??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	83 ec 70	 sub	 esp, 112		; 00000070H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	83 ec 34	 sub	 esp, 52			; 00000034H
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d 68	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00037	89 45 28	 mov	 DWORD PTR $T20[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0003a	8b 45 28	 mov	 eax, DWORD PTR $T20[ebp]
  0003d	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;

  00040	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
  00043	89 45 44	 mov	 DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

  00046	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  00049	89 45 5c	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

  0004c	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004f	83 c0 04	 add	 eax, 4
  00052	89 45 58	 mov	 DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00055	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00058	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0005b	2b 08		 sub	 ecx, DWORD PTR [eax]
  0005d	c1 f9 05	 sar	 ecx, 5
  00060	89 4d 60	 mov	 DWORD PTR __Whereoff$[ebp], ecx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00063	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00066	8b 4d 5c	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00069	8b 00		 mov	 eax, DWORD PTR [eax]
  0006b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0006d	c1 f8 05	 sar	 eax, 5
  00070	89 45 34	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00073	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00076	89 45 24	 mov	 DWORD PTR $T19[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00079	8b 45 24	 mov	 eax, DWORD PTR $T19[ebp]
  0007c	89 45 c0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0007f	c7 45 40 ff ff
	ff 07		 mov	 DWORD PTR $T22[ebp], 134217727 ; 07ffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00086	c7 45 20 ff ff
	ff 7f		 mov	 DWORD PTR $T18[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0008d	8b 45 20	 mov	 eax, DWORD PTR $T18[ebp]
  00090	89 45 3c	 mov	 DWORD PTR $T21[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00093	8b 45 40	 mov	 eax, DWORD PTR $T22[ebp]
  00096	3b 45 3c	 cmp	 eax, DWORD PTR $T21[ebp]
  00099	73 08		 jae	 SHORT $LN34@Emplace_re
  0009b	8d 45 40	 lea	 eax, DWORD PTR $T22[ebp]
  0009e	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
  000a1	eb 06		 jmp	 SHORT $LN35@Emplace_re
$LN34@Emplace_re:
  000a3	8d 45 3c	 lea	 eax, DWORD PTR $T21[ebp]
  000a6	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
$LN35@Emplace_re:
  000a9	8b 45 38	 mov	 eax, DWORD PTR tv172[ebp]
  000ac	89 45 1c	 mov	 DWORD PTR $T17[ebp], eax
  000af	8b 45 1c	 mov	 eax, DWORD PTR $T17[ebp]
  000b2	89 45 18	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  000b5	8b 45 18	 mov	 eax, DWORD PTR $T16[ebp]
  000b8	8b 00		 mov	 eax, DWORD PTR [eax]
  000ba	89 45 14	 mov	 DWORD PTR $T15[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  000bd	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000c0	3b 45 14	 cmp	 eax, DWORD PTR $T15[ebp]
  000c3	75 05		 jne	 SHORT $LN2@Emplace_re

; 738  :             _Xlength();

  000c5	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  000ca	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000cd	40		 inc	 eax
  000ce	89 45 2c	 mov	 DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000d1	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  000d4	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@ABEII@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Calculate_growth
  000dc	89 45 54	 mov	 DWORD PTR __Newcapacity$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000df	c6 45 53 01	 mov	 BYTE PTR __Overflow_is_possible$23[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000e3	c7 45 bc ff ff
	ff 07		 mov	 DWORD PTR __Max_possible$2[ebp], 134217727 ; 07ffffffH

; 60   :         if (_Count > _Max_possible) {

  000ea	81 7d 54 ff ff
	ff 07		 cmp	 DWORD PTR __Newcapacity$[ebp], 134217727 ; 07ffffffH
  000f1	76 05		 jbe	 SHORT $LN67@Emplace_re

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000f3	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN67@Emplace_re:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000f8	8b 45 54	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  000fb	c1 e0 05	 shl	 eax, 5
  000fe	89 45 10	 mov	 DWORD PTR $T14[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00101	ff 75 10	 push	 DWORD PTR $T14[ebp]
  00104	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00109	59		 pop	 ecx
  0010a	89 45 6c	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  0010d	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  00110	c1 e0 05	 shl	 eax, 5
  00113	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00116	8d 44 01 20	 lea	 eax, DWORD PTR [ecx+eax+32]
  0011a	89 45 30	 mov	 DWORD PTR __Constructed_last$[ebp], eax

; 746  :         pointer _Constructed_first      = _Constructed_last;

  0011d	8b 45 30	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00120	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

  00123	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00127	8b 45 7c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0012a	89 45 08	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0012d	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  00130	c1 e0 05	 shl	 eax, 5
  00133	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00136	89 45 0c	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00139	8b 45 0c	 mov	 eax, DWORD PTR $T13[ebp]
  0013c	89 45 00	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0013f	8b 45 08	 mov	 eax, DWORD PTR $T12[ebp]
  00142	89 45 04	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00145	6a 08		 push	 8
  00147	59		 pop	 ecx
  00148	8b 75 04	 mov	 esi, DWORD PTR $T11[ebp]
  0014b	8b 7d 00	 mov	 edi, DWORD PTR $T10[ebp]
  0014e	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 750  :         _Constructed_first = _Newvec + _Whereoff;

  00150	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  00153	c1 e0 05	 shl	 eax, 5
  00156	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
  00159	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0015c	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0015f	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00162	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00164	75 3d		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00166	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00169	8b 00		 mov	 eax, DWORD PTR [eax]
  0016b	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  0016e	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00171	8b 00		 mov	 eax, DWORD PTR [eax]
  00173	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00176	33 c0		 xor	 eax, eax
  00178	88 45 67	 mov	 BYTE PTR $T24[ebp], al
  0017b	8a 45 67	 mov	 al, BYTE PTR $T24[ebp]
  0017e	88 45 4c	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  00181	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00184	89 45 ec	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00187	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp]
  0018a	89 45 e8	 mov	 DWORD PTR $T8[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0018d	ff 75 e8	 push	 DWORD PTR $T8[ebp]
  00190	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00193	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  00196	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  00199	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Uninitialized_move<SEffectPosition *,std::allocator<SEffectPosition> >
  0019e	83 c4 10	 add	 esp, 16			; 00000010H

; 754  :         } else { // provide basic guarantee

  001a1	eb 61		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  001a3	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  001a6	8b 00		 mov	 eax, DWORD PTR [eax]
  001a8	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001ab	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001ae	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001b1	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  001b4	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001b7	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  001ba	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  001bd	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001c0	ff 75 d4	 push	 DWORD PTR __First$[ebp]
  001c3	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Uninitialized_move<SEffectPosition *,std::allocator<SEffectPosition> >
  001c8	83 c4 10	 add	 esp, 16			; 00000010H

; 756  :             _Constructed_first = _Newvec;

  001cb	8b 45 6c	 mov	 eax, DWORD PTR __Newvec$[ebp]
  001ce	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001d1	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  001d4	8b 00		 mov	 eax, DWORD PTR [eax]
  001d6	89 45 c8	 mov	 DWORD PTR __Last$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001d9	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001dc	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001df	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  001e2	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001e5	ff 75 cc	 push	 DWORD PTR $T4[ebp]

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001e8	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  001eb	c1 e0 05	 shl	 eax, 5
  001ee	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001f1	8d 44 01 20	 lea	 eax, DWORD PTR [ecx+eax+32]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001f5	50		 push	 eax
  001f6	ff 75 c8	 push	 DWORD PTR __Last$[ebp]
  001f9	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001fc	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@YAPAUSEffectPosition@@QAU1@0PAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Uninitialized_move<SEffectPosition *,std::allocator<SEffectPosition> >
  00201	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Emplace_re:

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00204	eb 2b		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  00206	ff 75 30	 push	 DWORD PTR __Constructed_last$[ebp]
  00209	ff 75 48	 push	 DWORD PTR __Constructed_first$[ebp]
  0020c	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  0020f	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXPAUSEffectPosition@@0@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  00214	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  00217	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  0021a	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  0021d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USEffectPosition@@@std@@QAEXQAUSEffectPosition@@I@Z ; std::allocator<SEffectPosition>::deallocate

; 762  :         _RERAISE;

  00222	6a 00		 push	 0
  00224	6a 00		 push	 0
  00226	e8 00 00 00 00	 call	 __CxxThrowException@8

; 763  :         _CATCH_END

  0022b	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  00230	c3		 ret	 0
$LN7@Emplace_re:
  00231	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00235	eb 04		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z$1
$LN10@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  00237	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  0023b	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  0023e	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  00241	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00244	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  00247	e8 00 00 00 00	 call	 ?_Change_array@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXQAUSEffectPosition@@II@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  0024c	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  0024f	c1 e0 05	 shl	 eax, 5
  00252	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN70@Emplace_re:

; 767  :     }

  00255	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00258	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025f	59		 pop	 ecx
  00260	5f		 pop	 edi
  00261	5e		 pop	 esi
  00262	5b		 pop	 ebx
  00263	83 c5 70	 add	 ebp, 112		; 00000070H
  00266	c9		 leave
  00267	c2 08 00	 ret	 8
  0026a	cc		 int	 3
  0026b	cc		 int	 3
  0026c	cc		 int	 3
  0026d	cc		 int	 3
  0026e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$emplace_back@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEXABUSEffectPosition@@@Z
_TEXT	SEGMENT
__Result$ = -64						; size = 4
__Result$1 = -60					; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
$T8 = -32						; size = 4
__Ptr$ = -28						; size = 4
$T9 = -24						; size = 4
__My_data$10 = -20					; size = 4
__Mylast$ = -16						; size = 4
__My_data$ = -12					; size = 4
_this$ = -8						; size = 4
__Mylast$11 = -4					; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEXABUSEffectPosition@@@Z PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::emplace_back<SEffectPosition const &>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

  0000b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	89 45 f4	 mov	 DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

  00011	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

  0001a	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0001d	8b 4d f4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00025	74 63		 je	 SHORT $LN2@emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00027	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0002a	89 45 e8	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 684  :         auto& _My_data   = _Mypair._Myval2;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	89 45 ec	 mov	 DWORD PTR __My_data$10[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

  00033	8b 45 ec	 mov	 eax, DWORD PTR __My_data$10[ebp]
  00036	83 c0 04	 add	 eax, 4
  00039	89 45 fc	 mov	 DWORD PTR __Mylast$11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003c	8b 45 e8	 mov	 eax, DWORD PTR $T9[ebp]
  0003f	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00042	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 e4	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0004a	8b 45 e4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0004d	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00053	89 45 e0	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00056	8b 45 e0	 mov	 eax, DWORD PTR $T8[ebp]
  00059	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0005c	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  0005f	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T6[ebp]
  00065	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00068	6a 08		 push	 8
  0006a	59		 pop	 ecx
  0006b	8b 75 d4	 mov	 esi, DWORD PTR $T5[ebp]
  0006e	8b 7d d0	 mov	 edi, DWORD PTR $T4[ebp]
  00071	f3 a5		 rep movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 689  :         _Ty& _Result = *_Mylast;

  00073	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  00076	8b 00		 mov	 eax, DWORD PTR [eax]
  00078	89 45 c4	 mov	 DWORD PTR __Result$1[ebp], eax

; 690  :         ++_Mylast;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	83 c0 20	 add	 eax, 32			; 00000020H
  00083	8b 4d fc	 mov	 ecx, DWORD PTR __Mylast$11[ebp]
  00086	89 01		 mov	 DWORD PTR [ecx], eax

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00088	eb 19		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0008a	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0008d	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00090	ff 75 cc	 push	 DWORD PTR $T3[ebp]
  00093	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00096	ff 30		 push	 DWORD PTR [eax]
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEPAUSEffectPosition@@QAU2@ABU2@@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Emplace_reallocate<SEffectPosition const &>
  000a0	89 45 c0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	c9		 leave
  000a6	c2 04 00	 ret	 4
??$emplace_back@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEXABUSEffectPosition@@@Z ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::emplace_back<SEffectPosition const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Const_cast@$$CBUSEffectPosition@@@std@@YAPAUSEffectPosition@@PBU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Const_cast@$$CBUSEffectPosition@@@std@@YAPAUSEffectPosition@@PBU1@@Z PROC ; std::_Const_cast<SEffectPosition const >, COMDAT

; 292  : auto _Const_cast(_Ty* _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 293  :     return const_cast<remove_const_t<_Ty>*>(_Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 294  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Const_cast@$$CBUSEffectPosition@@@std@@YAPAUSEffectPosition@@PBU1@@Z ENDP ; std::_Const_cast<SEffectPosition const >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4564 : _NODISCARD bool operator==(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4565 :     return _Left._Equal(_Right);

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	e8 00 00 00 00	 call	 ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal

; 4566 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@QAE@PAUSEffectPosition@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@QAE@PAUSEffectPosition@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >, COMDAT
; _this$ = ecx

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Parg$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx

; 43   :         this->_Adopt(_Pvector);
; 44   :     }

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c9		 leave
  00013	c2 08 00	 ret	 8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@QAE@PAUSEffectPosition@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GCEffectElementBase@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCEffectElementBase@@UAEPAXI@Z PROC			; CEffectElementBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CEffectElementBase@@UAE@XZ ; CEffectElementBase::~CEffectElementBase
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 14		 push	 20			; 00000014H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GCEffectElementBase@@UAEPAXI@Z ENDP			; CEffectElementBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 :         _Xlength_error("vector too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@CAXXZ ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
?_Tidy@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXXZ PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1687 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();
; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 74		 je	 SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Destroy_range<std::allocator<SEffectPosition> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	c1 f8 05	 sar	 eax, 5
  00075	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00078	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00080	8b 45 d4	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	c1 e0 05	 shl	 eax, 5
  00086	50		 push	 eax
  00087	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008f	59		 pop	 ecx
  00090	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00091	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00094	83 20 00	 and	 DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

  00097	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0009a	83 20 00	 and	 DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

  0009d	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a0	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

  000a3	c9		 leave
  000a4	c3		 ret	 0
?_Tidy@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXXZ ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXQAUSEffectPosition@@II@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXQAUSEffectPosition@@II@Z PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();
; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 62		 je	 SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Destroy_range<std::allocator<SEffectPosition> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	c1 f8 05	 sar	 eax, 5
  00075	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00078	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00080	8b 45 d4	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	c1 e0 05	 shl	 eax, 5
  00086	50		 push	 eax
  00087	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008f	59		 pop	 ecx
  00090	59		 pop	 ecx
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  00091	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00094	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00097	89 08		 mov	 DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  00099	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0009c	c1 e0 05	 shl	 eax, 5
  0009f	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000a2	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000a5	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000a7	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  000aa	c1 e0 05	 shl	 eax, 5
  000ad	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000b0	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b3	89 01		 mov	 DWORD PTR [ecx], eax

; 1684 :     }

  000b5	c9		 leave
  000b6	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXQAUSEffectPosition@@II@Z ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Geometric$ = -32					; size = 4
__Max$ = -28						; size = 4
tv82 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$8 = -8					; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@ABEII@Z PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$8[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	c1 f8 05	 sar	 eax, 5
  0001d	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00020	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00023	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00026	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  00029	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0002c	c7 45 f0 ff ff
	ff 07		 mov	 DWORD PTR $T7[ebp], 134217727 ; 07ffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00033	c7 45 d8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0003a	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00040	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00043	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  00046	73 08		 jae	 SHORT $LN25@Calculate_
  00048	8d 45 f0	 lea	 eax, DWORD PTR $T7[ebp]
  0004b	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
  0004e	eb 06		 jmp	 SHORT $LN26@Calculate_
$LN25@Calculate_:
  00050	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00053	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
$LN26@Calculate_:
  00056	8b 45 e8	 mov	 eax, DWORD PTR tv82[ebp]
  00059	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  0005c	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  0005f	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00062	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 :         const auto _Max              = max_size();
; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006a	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  0006d	d1 e8		 shr	 eax, 1
  0006f	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  00072	2b c8		 sub	 ecx, eax
  00074	39 4d fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], ecx
  00077	76 05		 jbe	 SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

  00079	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  0007c	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00081	d1 e8		 shr	 eax, 1
  00083	03 45 fc	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00086	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  00089	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0008c	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  0008f	73 05		 jae	 SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

  00091	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00094	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

  00096	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

  00099	c9		 leave
  0009a	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@ABEII@Z ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXPAUSEffectPosition@@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXPAUSEffectPosition@@0@Z PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00015	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00018	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Destroy_range<std::allocator<SEffectPosition> >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00026	c9		 leave
  00027	c2 08 00	 ret	 8
?_Destroy@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXPAUSEffectPosition@@0@Z ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?clear@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T1 = -24						; size = 4
$T2 = -20						; size = 4
__Myfirst$ = -16					; size = 4
__Mylast$ = -12						; size = 4
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
?clear@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEXXZ PROC ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::clear, COMDAT
; _this$ = ecx

; 1383 :     void clear() noexcept { // erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1384 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR __My_data$[ebp], eax

; 1385 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 f0	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1386 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1387 : 
; 1388 :         _My_data._Orphan_all();
; 1389 :         _Destroy(_Myfirst, _Mylast);

  0001e	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  00026	8b 45 f0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00031	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00037	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0003a	ff 75 e8	 push	 DWORD PTR $T1[ebp]
  0003d	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  00040	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  00043	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USEffectPosition@@@std@@@std@@YAXPAUSEffectPosition@@QAU1@AAV?$allocator@USEffectPosition@@@0@@Z ; std::_Destroy_range<std::allocator<SEffectPosition> >
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1390 :         _Mylast = _Myfirst;

  0004b	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00051	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00053	89 08		 mov	 DWORD PTR [eax], ecx

; 1391 :     }

  00055	c9		 leave
  00056	c3		 ret	 0
?clear@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEXXZ ENDP ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::clear
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@USEffectPosition@@@std@@QAEXQAUSEffectPosition@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USEffectPosition@@@std@@QAEXQAUSEffectPosition@@I@Z PROC ; std::allocator<SEffectPosition>::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	c1 e0 05	 shl	 eax, 5
  0000d	50		 push	 eax
  0000e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00011	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00016	59		 pop	 ecx
  00017	59		 pop	 ecx

; 811  :     }

  00018	c9		 leave
  00019	c2 08 00	 ret	 8
?deallocate@?$allocator@USEffectPosition@@@std@@QAEXQAUSEffectPosition@@I@Z ENDP ; std::allocator<SEffectPosition>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?GetStartTime@CEffectElementBase@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetStartTime@CEffectElementBase@@QAEMXZ PROC		; CEffectElementBase::GetStartTime, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 159  : 	return m_fStartTime;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	d9 40 04	 fld	 DWORD PTR [eax+4]

; 160  : }

  0000d	c9		 leave
  0000e	c3		 ret	 0
?GetStartTime@CEffectElementBase@@QAEMXZ ENDP		; CEffectElementBase::GetStartTime
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
$T1 = -500						; size = 4
_fz$ = -496						; size = 4
$T2 = -492						; size = 4
___param0$ = -488					; size = 4
$T3 = -484						; size = 4
$T4 = -480						; size = 4
__My_data$5 = -476					; size = 4
$T6 = -472						; size = 4
__My_data$7 = -468					; size = 4
$T8 = -464						; size = 4
__My_data$9 = -460					; size = 4
$T10 = -456						; size = 4
__My_data$11 = -452					; size = 4
$T12 = -448						; size = 4
__My_data$13 = -444					; size = 4
_fz$ = -440						; size = 4
_fy$ = -436						; size = 4
_fx$ = -432						; size = 4
_fz$ = -428						; size = 4
_fy$ = -424						; size = 4
_fx$ = -420						; size = 4
_fz$ = -416						; size = 4
_fy$ = -412						; size = 4
_fx$ = -408						; size = 4
_fz$ = -404						; size = 4
_fy$ = -400						; size = 4
_fx$ = -396						; size = 4
_fz$ = -392						; size = 4
_fy$ = -388						; size = 4
_fx$ = -384						; size = 4
$T14 = -380						; size = 4
_fy$ = -376						; size = 4
_fx$ = -372						; size = 4
_fz$ = -368						; size = 4
_fy$ = -364						; size = 4
_fx$ = -360						; size = 4
_fz$ = -356						; size = 4
_fy$ = -352						; size = 4
_fx$ = -348						; size = 4
_fz$ = -344						; size = 4
_fy$ = -340						; size = 4
_fx$ = -336						; size = 4
_fz$ = -332						; size = 4
_fy$ = -328						; size = 4
_fx$ = -324						; size = 4
_fz$ = -320						; size = 4
_fy$ = -316						; size = 4
_fx$ = -312						; size = 4
_fz$ = -308						; size = 4
_fy$ = -304						; size = 4
_fx$ = -300						; size = 4
_fz$ = -296						; size = 4
_fy$ = -292						; size = 4
_fx$ = -288						; size = 4
$T15 = -284						; size = 4
$T16 = -280						; size = 4
__Xx$ = -276						; size = 4
__Xx$ = -272						; size = 4
$T17 = -268						; size = 4
$T18 = -264						; size = 4
__Xx$ = -260						; size = 4
__Xx$ = -256						; size = 4
$T19 = -252						; size = 4
$T20 = -248						; size = 4
$T21 = -244						; size = 4
$T22 = -240						; size = 4
$T23 = -236						; size = 4
$T24 = -232						; size = 4
$T25 = -228						; size = 4
$T26 = -224						; size = 4
___param0$ = -220					; size = 4
$T27 = -216						; size = 4
$T28 = -212						; size = 4
__First$ = -208						; size = 4
__Last$ = -204						; size = 4
$T29 = -200						; size = 1
$T30 = -196						; size = 4
$T31 = -192						; size = 4
$T32 = -188						; size = 4
___param0$ = -184					; size = 4
$T33 = -180						; size = 4
__My_data$34 = -176					; size = 4
__My_data$35 = -172					; size = 4
tv280 = -168						; size = 4
_iMovingType$ = -164					; size = 4
_rPrev$ = -160						; size = 4
tv398 = -156						; size = 4
tv407 = -152						; size = 4
__My_data$36 = -148					; size = 4
__My_data$37 = -144					; size = 4
__My_data$38 = -140					; size = 4
_this$ = -136						; size = 4
_Tail$39 = -132						; size = 4
_this$ = -128						; size = 4
_Head$40 = -124						; size = 4
_this$ = -120						; size = 4
_this$ = -116						; size = 4
_v$ = -112						; size = 4
_f$ = -108						; size = 4
_this$ = -104						; size = 4
_f$ = -100						; size = 4
_f$ = -96						; size = 4
__Tmp$41 = -92						; size = 4
_result$ = -88						; size = 4
$T42 = -81						; size = 1
_rEffectPosition$ = -80					; size = 4
$T43 = -74						; size = 1
$T44 = -73						; size = 1
_rPrevEffectPosition$ = -72				; size = 4
_this$ = -68						; size = 4
_ft$45 = -64						; size = 4
$T46 = -60						; size = 12
$T47 = -48						; size = 12
$T48 = -36						; size = 12
$T49 = -24						; size = 12
$T50 = -12						; size = 12
$T51 = 0						; size = 12
$T52 = 12						; size = 12
$T53 = 24						; size = 12
$T54 = 36						; size = 12
$T55 = 48						; size = 12
$T56 = 60						; size = 12
$T57 = 72						; size = 12
$T58 = 84						; size = 12
$T59 = 96						; size = 12
__$ArrayPad$ = 108					; size = 4
_fTime$ = 120						; size = 4
_rPosition$ = 124					; size = 4
?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z PROC ; CEffectElementBase::GetPosition, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	81 ec 64 02 00
	00		 sub	 esp, 612		; 00000264H
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 6c	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	89 4d bc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1478 :         auto& _My_data = _Mypair._Myval2;

  0001a	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c0 08	 add	 eax, 8
  00020	89 85 54 ff ff
	ff		 mov	 DWORD PTR __My_data$35[ebp], eax

; 1479 :         return _My_data._Myfirst == _My_data._Mylast;

  00026	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR __My_data$35[ebp]
  0002c	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR __My_data$35[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00037	75 0c		 jne	 SHORT $LN14@GetPositio
  00039	c7 85 58 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv280[ebp], 1
  00043	eb 07		 jmp	 SHORT $LN15@GetPositio
$LN14@GetPositio:
  00045	83 a5 58 ff ff
	ff 00		 and	 DWORD PTR tv280[ebp], 0
$LN15@GetPositio:
  0004c	8a 85 58 ff ff
	ff		 mov	 al, BYTE PTR tv280[ebp]
  00052	88 45 af	 mov	 BYTE PTR $T42[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 7    : 	if (m_TimeEventTablePosition.empty())

  00055	0f b6 45 af	 movzx	 eax, BYTE PTR $T42[ebp]
  00059	85 c0		 test	 eax, eax
  0005b	74 26		 je	 SHORT $LN2@GetPositio
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  0005d	0f 57 c0	 xorps	 xmm0, xmm0
  00060	f3 0f 11 45 c4	 movss	 DWORD PTR $T46[ebp], xmm0

; 181  :     y = fy;

  00065	0f 57 c0	 xorps	 xmm0, xmm0
  00068	f3 0f 11 45 c8	 movss	 DWORD PTR $T46[ebp+4], xmm0

; 182  :     z = fz;

  0006d	0f 57 c0	 xorps	 xmm0, xmm0
  00070	f3 0f 11 45 cc	 movss	 DWORD PTR $T46[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 9    : 		rPosition = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00075	8d 75 c4	 lea	 esi, DWORD PTR $T46[ebp]
  00078	8b 7d 7c	 mov	 edi, DWORD PTR _rPosition$[ebp]
  0007b	a5		 movsd
  0007c	a5		 movsd
  0007d	a5		 movsd

; 10   : 		return;

  0007e	e9 16 0a 00 00	 jmp	 $LN1@GetPositio
$LN2@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  00083	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00086	83 c0 08	 add	 eax, 8
  00089	89 85 50 ff ff
	ff		 mov	 DWORD PTR __My_data$34[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0008f	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR __My_data$34[ebp]
  00095	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR __My_data$34[ebp]
  0009b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0009e	2b 01		 sub	 eax, DWORD PTR [ecx]
  000a0	c1 f8 05	 sar	 eax, 5
  000a3	89 85 84 fe ff
	ff		 mov	 DWORD PTR $T14[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 12   : 	if (m_TimeEventTablePosition.size()==1)

  000a9	83 bd 84 fe ff
	ff 01		 cmp	 DWORD PTR $T14[ebp], 1
  000b0	75 33		 jne	 SHORT $LN3@GetPositio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  000b2	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  000b5	83 c0 08	 add	 eax, 8
  000b8	89 85 44 fe ff
	ff		 mov	 DWORD PTR __My_data$13[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  000be	33 c0		 xor	 eax, eax
  000c0	c1 e0 05	 shl	 eax, 5
  000c3	8b 8d 44 fe ff
	ff		 mov	 ecx, DWORD PTR __My_data$13[ebp]
  000c9	03 01		 add	 eax, DWORD PTR [ecx]
  000cb	89 85 40 fe ff
	ff		 mov	 DWORD PTR $T12[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 14   : 		rPosition = m_TimeEventTablePosition[0].m_vecPosition;

  000d1	8b b5 40 fe ff
	ff		 mov	 esi, DWORD PTR $T12[ebp]
  000d7	83 c6 04	 add	 esi, 4
  000da	8b 7d 7c	 mov	 edi, DWORD PTR _rPosition$[ebp]
  000dd	a5		 movsd
  000de	a5		 movsd
  000df	a5		 movsd

; 15   : 		return;

  000e0	e9 b4 09 00 00	 jmp	 $LN1@GetPositio
$LN3@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1536 :         auto& _My_data = _Mypair._Myval2;

  000e5	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  000e8	83 c0 08	 add	 eax, 8
  000eb	89 85 3c fe ff
	ff		 mov	 DWORD PTR __My_data$11[ebp], eax

; 1537 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1538 :         _STL_VERIFY(_My_data._Myfirst != _My_data._Mylast, "front() called on empty vector");
; 1539 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1540 : 
; 1541 :         return *_My_data._Myfirst;

  000f1	8b 85 3c fe ff
	ff		 mov	 eax, DWORD PTR __My_data$11[ebp]
  000f7	8b 00		 mov	 eax, DWORD PTR [eax]
  000f9	89 85 38 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 17   : 	if (m_TimeEventTablePosition.front().m_fTime > fTime)

  000ff	8b 85 38 fe ff
	ff		 mov	 eax, DWORD PTR $T10[ebp]
  00105	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00109	0f 2f 45 78	 comiss	 xmm0, DWORD PTR _fTime$[ebp]
  0010d	76 2e		 jbe	 SHORT $LN4@GetPositio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1536 :         auto& _My_data = _Mypair._Myval2;

  0010f	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00112	83 c0 08	 add	 eax, 8
  00115	89 85 34 fe ff
	ff		 mov	 DWORD PTR __My_data$9[ebp], eax

; 1537 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1538 :         _STL_VERIFY(_My_data._Myfirst != _My_data._Mylast, "front() called on empty vector");
; 1539 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1540 : 
; 1541 :         return *_My_data._Myfirst;

  0011b	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR __My_data$9[ebp]
  00121	8b 00		 mov	 eax, DWORD PTR [eax]
  00123	89 85 30 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 19   : 		rPosition = m_TimeEventTablePosition.front().m_vecPosition;

  00129	8b b5 30 fe ff
	ff		 mov	 esi, DWORD PTR $T8[ebp]
  0012f	83 c6 04	 add	 esi, 4
  00132	8b 7d 7c	 mov	 edi, DWORD PTR _rPosition$[ebp]
  00135	a5		 movsd
  00136	a5		 movsd
  00137	a5		 movsd

; 20   : 		return;

  00138	e9 5c 09 00 00	 jmp	 $LN1@GetPositio
$LN4@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1554 :         auto& _My_data = _Mypair._Myval2;

  0013d	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00140	83 c0 08	 add	 eax, 8
  00143	89 85 2c fe ff
	ff		 mov	 DWORD PTR __My_data$7[ebp], eax

; 1555 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1556 :         _STL_VERIFY(_My_data._Myfirst != _My_data._Mylast, "back() called on empty vector");
; 1557 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1558 : 
; 1559 :         return _My_data._Mylast[-1];

  00149	6a 20		 push	 32			; 00000020H
  0014b	58		 pop	 eax
  0014c	6b c0 ff	 imul	 eax, eax, -1
  0014f	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR __My_data$7[ebp]
  00155	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00158	89 85 28 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 22   : 	if (m_TimeEventTablePosition.back().m_fTime < fTime)

  0015e	8b 85 28 fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00164	f3 0f 10 45 78	 movss	 xmm0, DWORD PTR _fTime$[ebp]
  00169	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  0016c	76 35		 jbe	 SHORT $LN5@GetPositio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1554 :         auto& _My_data = _Mypair._Myval2;

  0016e	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  00171	83 c0 08	 add	 eax, 8
  00174	89 85 24 fe ff
	ff		 mov	 DWORD PTR __My_data$5[ebp], eax

; 1555 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1556 :         _STL_VERIFY(_My_data._Myfirst != _My_data._Mylast, "back() called on empty vector");
; 1557 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1558 : 
; 1559 :         return _My_data._Mylast[-1];

  0017a	6a 20		 push	 32			; 00000020H
  0017c	58		 pop	 eax
  0017d	6b c0 ff	 imul	 eax, eax, -1
  00180	8b 8d 24 fe ff
	ff		 mov	 ecx, DWORD PTR __My_data$5[ebp]
  00186	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  00189	89 85 20 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 24   : 		rPosition = m_TimeEventTablePosition.back().m_vecPosition;

  0018f	8b b5 20 fe ff
	ff		 mov	 esi, DWORD PTR $T4[ebp]
  00195	83 c6 04	 add	 esi, 4
  00198	8b 7d 7c	 mov	 edi, DWORD PTR _rPosition$[ebp]
  0019b	a5		 movsd
  0019c	a5		 movsd
  0019d	a5		 movsd

; 25   : 		return;

  0019e	e9 f6 08 00 00	 jmp	 $LN1@GetPositio
$LN5@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1420 :         auto& _My_data = _Mypair._Myval2;

  001a3	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  001a6	83 c0 08	 add	 eax, 8
  001a9	89 85 74 ff ff
	ff		 mov	 DWORD PTR __My_data$38[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  001af	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR __My_data$38[ebp]
  001b5	89 85 1c fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  001bb	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR __My_data$38[ebp]
  001c1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c4	89 85 18 fe ff
	ff		 mov	 DWORD PTR ___param0$[ebp], eax
  001ca	ff b5 1c fe ff
	ff		 push	 DWORD PTR $T3[ebp]
  001d0	ff b5 18 fe ff
	ff		 push	 DWORD PTR ___param0$[ebp]
  001d6	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  001dc	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@QAE@PAUSEffectPosition@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >
  001e1	8d 85 14 fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  001e7	89 85 40 ff ff
	ff		 mov	 DWORD PTR $T31[ebp], eax

; 1410 :         auto& _My_data = _Mypair._Myval2;

  001ed	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  001f0	83 c0 08	 add	 eax, 8
  001f3	89 85 70 ff ff
	ff		 mov	 DWORD PTR __My_data$37[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  001f9	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR __My_data$37[ebp]
  001ff	89 85 4c ff ff
	ff		 mov	 DWORD PTR $T33[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00205	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR __My_data$37[ebp]
  0020b	8b 00		 mov	 eax, DWORD PTR [eax]
  0020d	89 85 48 ff ff
	ff		 mov	 DWORD PTR ___param0$[ebp], eax
  00213	ff b5 4c ff ff
	ff		 push	 DWORD PTR $T33[ebp]
  00219	ff b5 48 ff ff
	ff		 push	 DWORD PTR ___param0$[ebp]
  0021f	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  00225	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@QAE@PAUSEffectPosition@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >
  0022a	8d 85 44 ff ff
	ff		 lea	 eax, DWORD PTR $T32[ebp]
  00230	89 85 3c ff ff
	ff		 mov	 DWORD PTR $T30[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 29   : 	iterator result = std::lower_bound( m_TimeEventTablePosition.begin(), m_TimeEventTablePosition.end(), fTime );

  00236	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR $T31[ebp]
  0023c	8b 00		 mov	 eax, DWORD PTR [eax]
  0023e	89 85 34 ff ff
	ff		 mov	 DWORD PTR __Last$[ebp], eax
  00244	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR $T30[ebp]
  0024a	8b 00		 mov	 eax, DWORD PTR [eax]
  0024c	89 85 30 ff ff
	ff		 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 5873 :     return _STD lower_bound(_First, _Last, _Val, less<>{});

  00252	33 c0		 xor	 eax, eax
  00254	88 85 38 ff ff
	ff		 mov	 BYTE PTR $T29[ebp], al
  0025a	ff b5 38 ff ff
	ff		 push	 DWORD PTR $T29[ebp]
  00260	8d 45 78	 lea	 eax, DWORD PTR _fTime$[ebp]
  00263	50		 push	 eax
  00264	ff b5 34 ff ff
	ff		 push	 DWORD PTR __Last$[ebp]
  0026a	ff b5 30 ff ff
	ff		 push	 DWORD PTR __First$[ebp]
  00270	8d 45 a8	 lea	 eax, DWORD PTR _result$[ebp]
  00273	50		 push	 eax
  00274	e8 00 00 00 00	 call	 ??$lower_bound@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@MU?$less@X@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@0@V10@V10@ABMU?$less@X@0@@Z ; std::lower_bound<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >,float,std::less<void> >
  00279	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 54   :         return *_Ptr;

  0027c	8b 45 a8	 mov	 eax, DWORD PTR _result$[ebp]
  0027f	89 85 2c ff ff
	ff		 mov	 DWORD PTR $T28[ebp], eax

; 252  :         return const_cast<reference>(_Mybase::operator*());

  00285	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T28[ebp]
  0028b	89 45 b0	 mov	 DWORD PTR _rEffectPosition$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 32   : 	iterator rPrev = result;

  0028e	8b 45 a8	 mov	 eax, DWORD PTR _result$[ebp]
  00291	89 85 60 ff ff
	ff		 mov	 DWORD PTR _rPrev$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1410 :         auto& _My_data = _Mypair._Myval2;

  00297	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0029a	83 c0 08	 add	 eax, 8
  0029d	89 85 6c ff ff
	ff		 mov	 DWORD PTR __My_data$36[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  002a3	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR __My_data$36[ebp]
  002a9	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T27[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  002af	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR __My_data$36[ebp]
  002b5	8b 00		 mov	 eax, DWORD PTR [eax]
  002b7	89 85 24 ff ff
	ff		 mov	 DWORD PTR ___param0$[ebp], eax
  002bd	ff b5 28 ff ff
	ff		 push	 DWORD PTR $T27[ebp]
  002c3	ff b5 24 ff ff
	ff		 push	 DWORD PTR ___param0$[ebp]
  002c9	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  002cf	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USEffectPosition@@@std@@@std@@@std@@QAE@PAUSEffectPosition@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<SEffectPosition> > >
  002d4	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T26[ebp]
  002da	89 85 1c ff ff
	ff		 mov	 DWORD PTR $T25[ebp], eax

; 149  :         return _Ptr == _Right._Ptr;

  002e0	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR $T25[ebp]
  002e6	8b 00		 mov	 eax, DWORD PTR [eax]
  002e8	3b 45 a8	 cmp	 eax, DWORD PTR _result$[ebp]
  002eb	75 0c		 jne	 SHORT $LN79@GetPositio
  002ed	c7 85 68 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv407[ebp], 1
  002f7	eb 07		 jmp	 SHORT $LN80@GetPositio
$LN79@GetPositio:
  002f9	83 a5 68 ff ff
	ff 00		 and	 DWORD PTR tv407[ebp], 0
$LN80@GetPositio:
  00300	8a 85 68 ff ff
	ff		 mov	 al, BYTE PTR tv407[ebp]
  00306	88 45 b7	 mov	 BYTE PTR $T44[ebp], al

; 153  :         return !(*this == _Right);

  00309	0f b6 45 b7	 movzx	 eax, BYTE PTR $T44[ebp]
  0030d	85 c0		 test	 eax, eax
  0030f	75 0c		 jne	 SHORT $LN74@GetPositio
  00311	c7 85 64 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv398[ebp], 1
  0031b	eb 07		 jmp	 SHORT $LN75@GetPositio
$LN74@GetPositio:
  0031d	83 a5 64 ff ff
	ff 00		 and	 DWORD PTR tv398[ebp], 0
$LN75@GetPositio:
  00324	8a 85 64 ff ff
	ff		 mov	 al, BYTE PTR tv398[ebp]
  0032a	88 45 b6	 mov	 BYTE PTR $T43[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 33   : 	if (m_TimeEventTablePosition.begin() != result)

  0032d	0f b6 45 b6	 movzx	 eax, BYTE PTR $T43[ebp]
  00331	85 c0		 test	 eax, eax
  00333	74 50		 je	 SHORT $LN6@GetPositio
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 299  :         _Vector_iterator _Tmp = *this;

  00335	8b 45 a8	 mov	 eax, DWORD PTR _result$[ebp]
  00338	89 45 a4	 mov	 DWORD PTR __Tmp$41[ebp], eax

; 130  :         return *this += -_Off;

  0033b	33 c0		 xor	 eax, eax
  0033d	40		 inc	 eax
  0033e	f7 d8		 neg	 eax

; 120  :         _Ptr += _Off;

  00340	c1 e0 05	 shl	 eax, 5
  00343	03 45 a4	 add	 eax, DWORD PTR __Tmp$41[ebp]
  00346	89 45 a4	 mov	 DWORD PTR __Tmp$41[ebp], eax

; 121  :         return *this;

  00349	8d 45 a4	 lea	 eax, DWORD PTR __Tmp$41[ebp]
  0034c	89 85 0c fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax

; 293  :         return *this;

  00352	8d 45 a4	 lea	 eax, DWORD PTR __Tmp$41[ebp]
  00355	89 85 18 ff ff
	ff		 mov	 DWORD PTR $T24[ebp], eax

; 300  :         return _Tmp -= _Off;

  0035b	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR $T24[ebp]
  00361	8b 00		 mov	 eax, DWORD PTR [eax]
  00363	89 85 14 ff ff
	ff		 mov	 DWORD PTR $T23[ebp], eax
  00369	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T23[ebp]
  0036f	89 85 10 ff ff
	ff		 mov	 DWORD PTR $T22[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 35   : 		rPrev = result-1;

  00375	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR $T22[ebp]
  0037b	8b 00		 mov	 eax, DWORD PTR [eax]
  0037d	89 85 60 ff ff
	ff		 mov	 DWORD PTR _rPrev$[ebp], eax

; 36   : 	}

  00383	eb 2f		 jmp	 SHORT $LN7@GetPositio
$LN6@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 65   :         return _Ptr;

  00385	8b 45 a8	 mov	 eax, DWORD PTR _result$[ebp]
  00388	89 85 0c ff ff
	ff		 mov	 DWORD PTR $T21[ebp], eax

; 256  :         return _Const_cast(_Mybase::operator->());

  0038e	ff b5 0c ff ff
	ff		 push	 DWORD PTR $T21[ebp]
  00394	e8 00 00 00 00	 call	 ??$_Const_cast@$$CBUSEffectPosition@@@std@@YAPAUSEffectPosition@@PBU1@@Z ; std::_Const_cast<SEffectPosition const >
  00399	59		 pop	 ecx
  0039a	89 85 08 ff ff
	ff		 mov	 DWORD PTR $T20[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 39   : 		rPosition = result->m_vecPosition;

  003a0	8b b5 08 ff ff
	ff		 mov	 esi, DWORD PTR $T20[ebp]
  003a6	83 c6 04	 add	 esi, 4
  003a9	8b 7d 7c	 mov	 edi, DWORD PTR _rPosition$[ebp]
  003ac	a5		 movsd
  003ad	a5		 movsd
  003ae	a5		 movsd

; 40   : 		return;

  003af	e9 e5 06 00 00	 jmp	 $LN1@GetPositio
$LN7@GetPositio:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 54   :         return *_Ptr;

  003b4	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _rPrev$[ebp]
  003ba	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T19[ebp], eax

; 252  :         return const_cast<reference>(_Mybase::operator*());

  003c0	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR $T19[ebp]
  003c6	89 45 b8	 mov	 DWORD PTR _rPrevEffectPosition$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 43   : 	int iMovingType = rPrevEffectPosition.m_iMovingType;

  003c9	8b 45 b8	 mov	 eax, DWORD PTR _rPrevEffectPosition$[ebp]
  003cc	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  003cf	89 85 5c ff ff
	ff		 mov	 DWORD PTR _iMovingType$[ebp], eax

; 44   : 
; 45   : 	if (MOVING_TYPE_DIRECT == iMovingType)

  003d5	83 bd 5c ff ff
	ff 00		 cmp	 DWORD PTR _iMovingType$[ebp], 0
  003dc	0f 85 59 02 00
	00		 jne	 $LN8@GetPositio

; 47   : 		float Head = fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  003e2	8b 45 b0	 mov	 eax, DWORD PTR _rEffectPosition$[ebp]
  003e5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003e9	f3 0f 5c 45 78	 subss	 xmm0, DWORD PTR _fTime$[ebp]
  003ee	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  003f6	f3 0f 5a 85 00
	ff ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  003fe	51		 push	 ecx
  003ff	51		 push	 ecx
  00400	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00405	e8 00 00 00 00	 call	 _fabs
  0040a	59		 pop	 ecx
  0040b	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  0040c	d9 9d f8 fe ff
	ff		 fstp	 DWORD PTR $T18[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 47   : 		float Head = fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  00412	8b 45 b0	 mov	 eax, DWORD PTR _rEffectPosition$[ebp]
  00415	8b 4d b8	 mov	 ecx, DWORD PTR _rPrevEffectPosition$[ebp]
  00418	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0041c	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00420	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  00428	f3 0f 5a 85 fc
	fe ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  00430	51		 push	 ecx
  00431	51		 push	 ecx
  00432	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00437	e8 00 00 00 00	 call	 _fabs
  0043c	59		 pop	 ecx
  0043d	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  0043e	d9 9d f4 fe ff
	ff		 fstp	 DWORD PTR $T17[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 47   : 		float Head = fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  00444	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR $T18[ebp]
  0044c	f3 0f 5e 85 f4
	fe ff ff	 divss	 xmm0, DWORD PTR $T17[ebp]
  00454	f3 0f 11 45 84	 movss	 DWORD PTR _Head$40[ebp], xmm0

; 48   : 		float Tail = 1.0f - fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  00459	8b 45 b0	 mov	 eax, DWORD PTR _rEffectPosition$[ebp]
  0045c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00460	f3 0f 5c 45 78	 subss	 xmm0, DWORD PTR _fTime$[ebp]
  00465	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  0046d	f3 0f 5a 85 f0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  00475	51		 push	 ecx
  00476	51		 push	 ecx
  00477	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0047c	e8 00 00 00 00	 call	 _fabs
  00481	59		 pop	 ecx
  00482	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  00483	d9 9d e8 fe ff
	ff		 fstp	 DWORD PTR $T16[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 48   : 		float Tail = 1.0f - fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  00489	8b 45 b0	 mov	 eax, DWORD PTR _rEffectPosition$[ebp]
  0048c	8b 4d b8	 mov	 ecx, DWORD PTR _rPrevEffectPosition$[ebp]
  0048f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00493	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00497	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR __Xx$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 672  :             return (float)fabs(_X);

  0049f	f3 0f 5a 85 ec
	fe ff ff	 cvtss2sd xmm0, DWORD PTR __Xx$[ebp]
  004a7	51		 push	 ecx
  004a8	51		 push	 ecx
  004a9	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004ae	e8 00 00 00 00	 call	 _fabs
  004b3	59		 pop	 ecx
  004b4	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\cmath

; 95   :     return _CSTD fabsf(_Xx);

  004b5	d9 9d e4 fe ff
	ff		 fstp	 DWORD PTR $T15[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 48   : 		float Tail = 1.0f - fabs(rEffectPosition.m_fTime - fTime) / fabs(rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  004bb	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR $T16[ebp]
  004c3	f3 0f 5e 85 e4
	fe ff ff	 divss	 xmm0, DWORD PTR $T15[ebp]
  004cb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  004d3	f3 0f 5c c8	 subss	 xmm1, xmm0
  004d7	f3 0f 11 8d 7c
	ff ff ff	 movss	 DWORD PTR _Tail$39[ebp], xmm1

; 49   : 		rPosition = (rPrevEffectPosition.m_vecPosition*Head) + (rEffectPosition.m_vecPosition*Tail);

  004df	8b 45 b0	 mov	 eax, DWORD PTR _rEffectPosition$[ebp]
  004e2	83 c0 04	 add	 eax, 4
  004e5	89 85 78 ff ff
	ff		 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  004eb	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  004f1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004f5	f3 0f 59 85 7c
	ff ff ff	 mulss	 xmm0, DWORD PTR _Tail$39[ebp]
  004fd	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  00505	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  0050b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00510	f3 0f 59 85 7c
	ff ff ff	 mulss	 xmm0, DWORD PTR _Tail$39[ebp]
  00518	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  00520	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _this$[ebp]
  00526	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0052b	f3 0f 59 85 7c
	ff ff ff	 mulss	 xmm0, DWORD PTR _Tail$39[ebp]
  00533	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  0053b	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00543	f3 0f 11 45 3c	 movss	 DWORD PTR $T56[ebp], xmm0

; 181  :     y = fy;

  00548	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00550	f3 0f 11 45 40	 movss	 DWORD PTR $T56[ebp+4], xmm0

; 182  :     z = fz;

  00555	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0055d	f3 0f 11 45 44	 movss	 DWORD PTR $T56[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 49   : 		rPosition = (rPrevEffectPosition.m_vecPosition*Head) + (rEffectPosition.m_vecPosition*Tail);

  00562	8b 45 b8	 mov	 eax, DWORD PTR _rPrevEffectPosition$[ebp]
  00565	83 c0 04	 add	 eax, 4
  00568	89 45 80	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0056b	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  0056e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00572	f3 0f 59 45 84	 mulss	 xmm0, DWORD PTR _Head$40[ebp]
  00577	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  0057f	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  00582	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00587	f3 0f 59 45 84	 mulss	 xmm0, DWORD PTR _Head$40[ebp]
  0058c	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  00594	8b 45 80	 mov	 eax, DWORD PTR _this$[ebp]
  00597	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0059c	f3 0f 59 45 84	 mulss	 xmm0, DWORD PTR _Head$40[ebp]
  005a1	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  005a9	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  005b1	f3 0f 11 45 30	 movss	 DWORD PTR $T55[ebp], xmm0

; 181  :     y = fy;

  005b6	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  005be	f3 0f 11 45 34	 movss	 DWORD PTR $T55[ebp+4], xmm0

; 182  :     z = fz;

  005c3	f3 0f 10 85 cc
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  005cb	f3 0f 11 45 38	 movss	 DWORD PTR $T55[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  005d0	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR $T55[ebp]
  005d5	f3 0f 58 45 3c	 addss	 xmm0, DWORD PTR $T56[ebp]
  005da	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  005e2	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR $T55[ebp+4]
  005e7	f3 0f 58 45 40	 addss	 xmm0, DWORD PTR $T56[ebp+4]
  005ec	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  005f4	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR $T55[ebp+8]
  005f9	f3 0f 58 45 44	 addss	 xmm0, DWORD PTR $T56[ebp+8]
  005fe	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  00606	f3 0f 10 85 c8
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0060e	f3 0f 11 45 d0	 movss	 DWORD PTR $T47[ebp], xmm0

; 181  :     y = fy;

  00613	f3 0f 10 85 c4
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0061b	f3 0f 11 45 d4	 movss	 DWORD PTR $T47[ebp+4], xmm0

; 182  :     z = fz;

  00620	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00628	f3 0f 11 45 d8	 movss	 DWORD PTR $T47[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 49   : 		rPosition = (rPrevEffectPosition.m_vecPosition*Head) + (rEffectPosition.m_vecPosition*Tail);

  0062d	8d 75 d0	 lea	 esi, DWORD PTR $T47[ebp]
  00630	8b 7d 7c	 mov	 edi, DWORD PTR _rPosition$[ebp]
  00633	a5		 movsd
  00634	a5		 movsd
  00635	a5		 movsd

; 50   : 	}

  00636	e9 5e 04 00 00	 jmp	 $LN10@GetPositio
$LN8@GetPositio:

; 51   : 	else if (MOVING_TYPE_BEZIER_CURVE == iMovingType)

  0063b	83 bd 5c ff ff
	ff 01		 cmp	 DWORD PTR _iMovingType$[ebp], 1
  00642	0f 85 51 04 00
	00		 jne	 $LN10@GetPositio

; 52   : 	{
; 53   : 		float ft = (fTime - rPrevEffectPosition.m_fTime) / (rEffectPosition.m_fTime - rPrevEffectPosition.m_fTime);

  00648	8b 45 b8	 mov	 eax, DWORD PTR _rPrevEffectPosition$[ebp]
  0064b	f3 0f 10 45 78	 movss	 xmm0, DWORD PTR _fTime$[ebp]
  00650	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]
  00654	8b 45 b0	 mov	 eax, DWORD PTR _rEffectPosition$[ebp]
  00657	8b 4d b8	 mov	 ecx, DWORD PTR _rPrevEffectPosition$[ebp]
  0065a	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0065e	f3 0f 5c 09	 subss	 xmm1, DWORD PTR [ecx]
  00662	f3 0f 5e c1	 divss	 xmm0, xmm1
  00666	f3 0f 11 45 c0	 movss	 DWORD PTR _ft$45[ebp], xmm0

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  0066b	8b 45 b0	 mov	 eax, DWORD PTR _rEffectPosition$[ebp]
  0066e	83 c0 04	 add	 eax, 4
  00671	89 45 88	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00674	8b 45 88	 mov	 eax, DWORD PTR _this$[ebp]
  00677	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0067b	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _ft$45[ebp]
  00680	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  00688	8b 45 88	 mov	 eax, DWORD PTR _this$[ebp]
  0068b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00690	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _ft$45[ebp]
  00695	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  0069d	8b 45 88	 mov	 eax, DWORD PTR _this$[ebp]
  006a0	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  006a5	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _ft$45[ebp]
  006aa	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  006b2	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  006ba	f3 0f 11 45 54	 movss	 DWORD PTR $T58[ebp], xmm0

; 181  :     y = fy;

  006bf	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  006c7	f3 0f 11 45 58	 movss	 DWORD PTR $T58[ebp+4], xmm0

; 182  :     z = fz;

  006cc	f3 0f 10 85 b4
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  006d4	f3 0f 11 45 5c	 movss	 DWORD PTR $T58[ebp+8], xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  006d9	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR $T58[ebp]
  006de	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _ft$45[ebp]
  006e3	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  006eb	f3 0f 10 45 58	 movss	 xmm0, DWORD PTR $T58[ebp+4]
  006f0	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _ft$45[ebp]
  006f5	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  006fd	f3 0f 10 45 5c	 movss	 xmm0, DWORD PTR $T58[ebp+8]
  00702	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _ft$45[ebp]
  00707	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  0070f	f3 0f 10 85 b0
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00717	f3 0f 11 45 24	 movss	 DWORD PTR $T54[ebp], xmm0

; 181  :     y = fy;

  0071c	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00724	f3 0f 11 45 28	 movss	 DWORD PTR $T54[ebp+4], xmm0

; 182  :     z = fz;

  00729	f3 0f 10 85 a8
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00731	f3 0f 11 45 2c	 movss	 DWORD PTR $T54[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00736	8b 45 b8	 mov	 eax, DWORD PTR _rPrevEffectPosition$[ebp]
  00739	83 c0 14	 add	 eax, 20			; 00000014H
  0073c	89 45 90	 mov	 DWORD PTR _v$[ebp], eax
  0073f	8b 45 b8	 mov	 eax, DWORD PTR _rPrevEffectPosition$[ebp]
  00742	83 c0 04	 add	 eax, 4
  00745	89 45 8c	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00748	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  0074b	8b 4d 90	 mov	 ecx, DWORD PTR _v$[ebp]
  0074e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00752	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00756	f3 0f 11 85 a4
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  0075e	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00761	8b 4d 90	 mov	 ecx, DWORD PTR _v$[ebp]
  00764	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00769	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0076e	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  00776	8b 45 8c	 mov	 eax, DWORD PTR _this$[ebp]
  00779	8b 4d 90	 mov	 ecx, DWORD PTR _v$[ebp]
  0077c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00781	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  00786	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  0078e	f3 0f 10 85 a4
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00796	f3 0f 11 45 60	 movss	 DWORD PTR $T59[ebp], xmm0

; 181  :     y = fy;

  0079b	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  007a3	f3 0f 11 45 64	 movss	 DWORD PTR $T59[ebp+4], xmm0

; 182  :     z = fz;

  007a8	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  007b0	f3 0f 11 45 68	 movss	 DWORD PTR $T59[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  007b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007bd	f3 0f 5c 45 c0	 subss	 xmm0, DWORD PTR _ft$45[ebp]
  007c2	f3 0f 11 45 94	 movss	 DWORD PTR _f$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  007c7	f3 0f 10 45 60	 movss	 xmm0, DWORD PTR $T59[ebp]
  007cc	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _f$[ebp]
  007d1	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  007d9	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR $T59[ebp+4]
  007de	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _f$[ebp]
  007e3	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  007eb	f3 0f 10 45 68	 movss	 xmm0, DWORD PTR $T59[ebp+8]
  007f0	f3 0f 59 45 94	 mulss	 xmm0, DWORD PTR _f$[ebp]
  007f5	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  007fd	f3 0f 10 85 98
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00805	f3 0f 11 45 e8	 movss	 DWORD PTR $T49[ebp], xmm0

; 181  :     y = fy;

  0080a	f3 0f 10 85 94
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00812	f3 0f 11 45 ec	 movss	 DWORD PTR $T49[ebp+4], xmm0

; 182  :     z = fz;

  00817	f3 0f 10 85 90
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0081f	f3 0f 11 45 f0	 movss	 DWORD PTR $T49[ebp+8], xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00824	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR $T49[ebp]
  00829	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _ft$45[ebp]
  0082e	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  00836	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR $T49[ebp+4]
  0083b	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _ft$45[ebp]
  00840	f3 0f 11 85 88
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  00848	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR $T49[ebp+8]
  0084d	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _ft$45[ebp]
  00852	f3 0f 11 85 48
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  0085a	f3 0f 10 85 8c
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00862	f3 0f 11 45 f4	 movss	 DWORD PTR $T50[ebp], xmm0

; 181  :     y = fy;

  00867	f3 0f 10 85 88
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0086f	f3 0f 11 45 f8	 movss	 DWORD PTR $T50[ebp+4], xmm0

; 182  :     z = fz;

  00874	f3 0f 10 85 48
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0087c	f3 0f 11 45 fc	 movss	 DWORD PTR $T50[ebp+8], xmm0

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00881	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR $T50[ebp]
  00886	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  0088e	f3 0f 11 85 80
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  00896	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR $T50[ebp+4]
  0089b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  008a3	f3 0f 11 85 7c
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  008ab	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR $T50[ebp+8]
  008b0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  008b8	f3 0f 11 85 78
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  008c0	f3 0f 10 85 80
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  008c8	f3 0f 11 45 0c	 movss	 DWORD PTR $T52[ebp], xmm0

; 181  :     y = fy;

  008cd	f3 0f 10 85 7c
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  008d5	f3 0f 11 45 10	 movss	 DWORD PTR $T52[ebp+4], xmm0

; 182  :     z = fz;

  008da	f3 0f 10 85 78
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  008e2	f3 0f 11 45 14	 movss	 DWORD PTR $T52[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  008e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008ef	f3 0f 5c 45 c0	 subss	 xmm0, DWORD PTR _ft$45[ebp]
  008f4	f3 0f 11 45 9c	 movss	 DWORD PTR _f$[ebp], xmm0
  008f9	8b 45 b8	 mov	 eax, DWORD PTR _rPrevEffectPosition$[ebp]
  008fc	83 c0 04	 add	 eax, 4
  008ff	89 45 98	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00902	8b 45 98	 mov	 eax, DWORD PTR _this$[ebp]
  00905	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00909	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _f$[ebp]
  0090e	f3 0f 11 85 74
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  00916	8b 45 98	 mov	 eax, DWORD PTR _this$[ebp]
  00919	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0091e	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00923	f3 0f 11 85 70
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  0092b	8b 45 98	 mov	 eax, DWORD PTR _this$[ebp]
  0092e	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00933	f3 0f 59 45 9c	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00938	f3 0f 11 85 6c
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  00940	f3 0f 10 85 74
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00948	f3 0f 11 45 00	 movss	 DWORD PTR $T51[ebp], xmm0

; 181  :     y = fy;

  0094d	f3 0f 10 85 70
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00955	f3 0f 11 45 04	 movss	 DWORD PTR $T51[ebp+4], xmm0

; 182  :     z = fz;

  0095a	f3 0f 10 85 6c
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00962	f3 0f 11 45 08	 movss	 DWORD PTR $T51[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00967	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0096f	f3 0f 5c 45 c0	 subss	 xmm0, DWORD PTR _ft$45[ebp]
  00974	f3 0f 11 45 a0	 movss	 DWORD PTR _f$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00979	f3 0f 10 45 00	 movss	 xmm0, DWORD PTR $T51[ebp]
  0097e	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00983	f3 0f 11 85 68
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  0098b	f3 0f 10 45 04	 movss	 xmm0, DWORD PTR $T51[ebp+4]
  00990	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _f$[ebp]
  00995	f3 0f 11 85 64
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  0099d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR $T51[ebp+8]
  009a2	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _f$[ebp]
  009a7	f3 0f 11 85 60
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  009af	f3 0f 10 85 68
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  009b7	f3 0f 11 45 48	 movss	 DWORD PTR $T57[ebp], xmm0

; 181  :     y = fy;

  009bc	f3 0f 10 85 64
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  009c4	f3 0f 11 45 4c	 movss	 DWORD PTR $T57[ebp+4], xmm0

; 182  :     z = fz;

  009c9	f3 0f 10 85 60
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  009d1	f3 0f 11 45 50	 movss	 DWORD PTR $T57[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  009d6	f3 0f 10 45 48	 movss	 xmm0, DWORD PTR $T57[ebp]
  009db	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR $T52[ebp]
  009e0	f3 0f 11 85 5c
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  009e8	f3 0f 10 45 4c	 movss	 xmm0, DWORD PTR $T57[ebp+4]
  009ed	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR $T52[ebp+4]
  009f2	f3 0f 11 85 58
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  009fa	f3 0f 10 45 50	 movss	 xmm0, DWORD PTR $T57[ebp+8]
  009ff	f3 0f 58 45 14	 addss	 xmm0, DWORD PTR $T52[ebp+8]
  00a04	f3 0f 11 85 54
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  00a0c	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00a14	f3 0f 11 45 18	 movss	 DWORD PTR $T53[ebp], xmm0

; 181  :     y = fy;

  00a19	f3 0f 10 85 58
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00a21	f3 0f 11 45 1c	 movss	 DWORD PTR $T53[ebp+4], xmm0

; 182  :     z = fz;

  00a26	f3 0f 10 85 54
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00a2e	f3 0f 11 45 20	 movss	 DWORD PTR $T53[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a33	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR $T53[ebp]
  00a38	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR $T54[ebp]
  00a3d	f3 0f 11 85 50
	fe ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  00a45	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR $T53[ebp+4]
  00a4a	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR $T54[ebp+4]
  00a4f	f3 0f 11 85 4c
	fe ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  00a57	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR $T53[ebp+8]
  00a5c	f3 0f 58 45 2c	 addss	 xmm0, DWORD PTR $T54[ebp+8]
  00a61	f3 0f 11 85 10
	fe ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  00a69	f3 0f 10 85 50
	fe ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00a71	f3 0f 11 45 dc	 movss	 DWORD PTR $T48[ebp], xmm0

; 181  :     y = fy;

  00a76	f3 0f 10 85 4c
	fe ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00a7e	f3 0f 11 45 e0	 movss	 DWORD PTR $T48[ebp+4], xmm0

; 182  :     z = fz;

  00a83	f3 0f 10 85 10
	fe ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00a8b	f3 0f 11 45 e4	 movss	 DWORD PTR $T48[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 55   : 		rPosition = rPrevEffectPosition.m_vecPosition * (1.0f - ft) * (1.0f - ft) +

  00a90	8d 75 dc	 lea	 esi, DWORD PTR $T48[ebp]
  00a93	8b 7d 7c	 mov	 edi, DWORD PTR _rPosition$[ebp]
  00a96	a5		 movsd
  00a97	a5		 movsd
  00a98	a5		 movsd
$LN10@GetPositio:
$LN1@GetPositio:

; 56   : 					(rPrevEffectPosition.m_vecPosition + rPrevEffectPosition.m_vecControlPoint) * (1.0f - ft) * ft * 2 +
; 57   : 					rEffectPosition.m_vecPosition * ft * ft;
; 58   : 	}
; 59   : }

  00a99	5f		 pop	 edi
  00a9a	5e		 pop	 esi
  00a9b	8b 4d 6c	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a9e	33 cd		 xor	 ecx, ebp
  00aa0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00aa5	83 c5 70	 add	 ebp, 112		; 00000070H
  00aa8	c9		 leave
  00aa9	c2 08 00	 ret	 8
?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ENDP ; CEffectElementBase::GetPosition
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
_TEXT	SEGMENT
tv188 = -128						; size = 4
tv172 = -124						; size = 4
$T2 = -120						; size = 4
$T3 = -116						; size = 4
tv295 = -112						; size = 4
tv293 = -108						; size = 4
tv279 = -104						; size = 4
tv277 = -100						; size = 4
tv263 = -96						; size = 4
tv261 = -92						; size = 4
tv238 = -88						; size = 4
tv236 = -84						; size = 4
tv222 = -80						; size = 4
tv220 = -76						; size = 4
tv206 = -72						; size = 4
tv204 = -68						; size = 4
$T4 = -64						; size = 4
$T5 = -60						; size = 4
$T6 = -56						; size = 4
$T7 = -52						; size = 4
tv156 = -48						; size = 4
$T8 = -44						; size = 4
$T9 = -40						; size = 4
tv131 = -36						; size = 4
$T10 = -32						; size = 4
_this$ = -28						; size = 4
$T11 = -24						; size = 4
__My_data$12 = -20					; size = 4
_dwIndex$13 = -16					; size = 4
__$EHRec$ = -12						; size = 12
tv74 = 0						; size = 4
_this$ = 4						; size = 4
$T14 = 11						; size = 1
_pTokenVector$ = 12					; size = 4
_i$15 = 16						; size = 4
$T16 = 20						; size = 24
$T17 = 44						; size = 24
$T18 = 68						; size = 12
_EffectPosition$19 = 80					; size = 32
__$ArrayPad$ = 112					; size = 4
_rTextFileLoader$ = 124					; size = 4
?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z PROC ; CEffectElementBase::LoadScript, COMDAT
; _this$ = ecx

; 104  : {

  00000	55		 push	 ebp
  00001	8d 6c 24 8c	 lea	 ebp, DWORD PTR [esp-116]
  00005	83 ec 74	 sub	 esp, 116		; 00000074H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 74	 sub	 esp, 116		; 00000074H
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 70	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	56		 push	 esi
  00024	57		 push	 edi
  00025	50		 push	 eax
  00026	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00029	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002f	89 4d 04	 mov	 DWORD PTR _this$[ebp], ecx

; 106  : 	if (!rTextFileLoader.GetTokenFloat("starttime",&m_fStartTime))

  00032	68 00 00 00 00	 push	 OFFSET ??_C@_09EJLICMCM@starttime@
  00037	8d 4d 14	 lea	 ecx, DWORD PTR $T16[ebp]
  0003a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00043	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp]
  00046	83 c0 04	 add	 eax, 4
  00049	50		 push	 eax
  0004a	8d 45 14	 lea	 eax, DWORD PTR $T16[ebp]
  0004d	50		 push	 eax
  0004e	8b 4d 7c	 mov	 ecx, DWORD PTR _rTextFileLoader$[ebp]
  00051	e8 00 00 00 00	 call	 ?GetTokenFloat@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAM@Z ; CTextFileLoader::GetTokenFloat
  00056	85 c0		 test	 eax, eax
  00058	75 09		 jne	 SHORT $LN12@LoadScript
  0005a	c7 45 00 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
  00061	eb 04		 jmp	 SHORT $LN13@LoadScript
$LN12@LoadScript:
  00063	83 65 00 00	 and	 DWORD PTR tv74[ebp], 0
$LN13@LoadScript:
  00067	8a 45 00	 mov	 al, BYTE PTR tv74[ebp]
  0006a	88 45 0b	 mov	 BYTE PTR $T14[ebp], al
  0006d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00071	8d 4d 14	 lea	 ecx, DWORD PTR $T16[ebp]
  00074	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 106  : 	if (!rTextFileLoader.GetTokenFloat("starttime",&m_fStartTime))

  00079	0f b6 45 0b	 movzx	 eax, BYTE PTR $T14[ebp]
  0007d	85 c0		 test	 eax, eax
  0007f	74 0b		 je	 SHORT $LN5@LoadScript

; 107  : 	{
; 108  : 		m_fStartTime = 0.0f;

  00081	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp]
  00084	0f 57 c0	 xorps	 xmm0, xmm0
  00087	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
$LN5@LoadScript:

; 110  : 	if (rTextFileLoader.GetTokenVector("timeeventposition", &pTokenVector))

  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KPMBIEBE@timeeventposition@
  00091	8d 4d 2c	 lea	 ecx, DWORD PTR $T17[ebp]
  00094	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00099	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000a0	8d 45 0c	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  000a3	50		 push	 eax
  000a4	8d 45 2c	 lea	 eax, DWORD PTR $T17[ebp]
  000a7	50		 push	 eax
  000a8	8b 4d 7c	 mov	 ecx, DWORD PTR _rTextFileLoader$[ebp]
  000ab	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
  000b0	89 45 e8	 mov	 DWORD PTR $T11[ebp], eax
  000b3	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  000b7	8d 4d 2c	 lea	 ecx, DWORD PTR $T17[ebp]
  000ba	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 110  : 	if (rTextFileLoader.GetTokenVector("timeeventposition", &pTokenVector))

  000bf	83 7d e8 00	 cmp	 DWORD PTR $T11[ebp], 0
  000c3	0f 84 bd 02 00
	00		 je	 $LN3@LoadScript

; 111  : 	{	
; 112  : 		m_TimeEventTablePosition.clear();

  000c9	8b 4d 04	 mov	 ecx, DWORD PTR _this$[ebp]
  000cc	83 c1 08	 add	 ecx, 8
  000cf	e8 00 00 00 00	 call	 ?clear@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::clear

; 113  : 		
; 114  : 		DWORD dwIndex = 0;

  000d4	83 65 f0 00	 and	 DWORD PTR _dwIndex$13[ebp], 0

; 115  : 		for (DWORD i = 0; i < pTokenVector->size(); ++dwIndex)

  000d8	83 65 10 00	 and	 DWORD PTR _i$15[ebp], 0
  000dc	eb 07		 jmp	 SHORT $LN4@LoadScript
$LN2@LoadScript:
  000de	8b 45 f0	 mov	 eax, DWORD PTR _dwIndex$13[ebp]
  000e1	40		 inc	 eax
  000e2	89 45 f0	 mov	 DWORD PTR _dwIndex$13[ebp], eax
$LN4@LoadScript:
  000e5	8b 45 0c	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  000e8	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  000eb	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  000ee	89 45 ec	 mov	 DWORD PTR __My_data$12[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f1	8b 45 ec	 mov	 eax, DWORD PTR __My_data$12[ebp]
  000f4	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$12[ebp]
  000f7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000fa	2b 01		 sub	 eax, DWORD PTR [ecx]
  000fc	99		 cdq
  000fd	6a 18		 push	 24			; 00000018H
  000ff	59		 pop	 ecx
  00100	f7 f9		 idiv	 ecx
  00102	89 45 e0	 mov	 DWORD PTR $T10[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 115  : 		for (DWORD i = 0; i < pTokenVector->size(); ++dwIndex)

  00105	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  00108	3b 45 e0	 cmp	 eax, DWORD PTR $T10[ebp]
  0010b	0f 83 75 02 00
	00		 jae	 $LN3@LoadScript

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00111	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  00114	89 45 dc	 mov	 DWORD PTR tv131[ebp], eax
  00117	ff 75 dc	 push	 DWORD PTR tv131[ebp]
  0011a	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  0011d	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  00122	89 45 d8	 mov	 DWORD PTR $T9[ebp], eax
  00125	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  00128	40		 inc	 eax
  00129	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3752 :         return _Mypair._Myval2._Myptr();

  0012c	8b 4d d8	 mov	 ecx, DWORD PTR $T9[ebp]
  0012f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00134	89 45 d4	 mov	 DWORD PTR $T8[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 118  : 			EffectPosition.m_fTime = atof(pTokenVector->at(i++).c_str());

  00137	ff 75 d4	 push	 DWORD PTR $T8[ebp]
  0013a	e8 00 00 00 00	 call	 _atof
  0013f	59		 pop	 ecx
  00140	d9 5d 50	 fstp	 DWORD PTR _EffectPosition$19[ebp]

; 119  : 			if (pTokenVector->at(i)=="MOVING_TYPE_BEZIER_CURVE")

  00143	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KLFENJDI@MOVING_TYPE_BEZIER_CURVE@
  00148	ff 75 10	 push	 DWORD PTR _i$15[ebp]
  0014b	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  0014e	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  00159	59		 pop	 ecx
  0015a	59		 pop	 ecx
  0015b	0f b6 c0	 movzx	 eax, al
  0015e	85 c0		 test	 eax, eax
  00160	0f 84 30 01 00
	00		 je	 $LN7@LoadScript

; 120  : 			{
; 121  : 				i++;

  00166	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  00169	40		 inc	 eax
  0016a	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax

; 122  : 
; 123  : 				EffectPosition.m_iMovingType = MOVING_TYPE_BEZIER_CURVE;

  0016d	c7 45 60 01 00
	00 00		 mov	 DWORD PTR _EffectPosition$19[ebp+16], 1

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  00174	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  00177	89 45 d0	 mov	 DWORD PTR tv156[ebp], eax
  0017a	ff 75 d0	 push	 DWORD PTR tv156[ebp]
  0017d	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  00180	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  00185	89 45 cc	 mov	 DWORD PTR $T7[ebp], eax
  00188	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  0018b	40		 inc	 eax
  0018c	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3752 :         return _Mypair._Myval2._Myptr();

  0018f	8b 4d cc	 mov	 ecx, DWORD PTR $T7[ebp]
  00192	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00197	89 45 c8	 mov	 DWORD PTR $T6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 125  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  0019a	ff 75 c8	 push	 DWORD PTR $T6[ebp]
  0019d	e8 00 00 00 00	 call	 _atof
  001a2	59		 pop	 ecx
  001a3	d9 5d 54	 fstp	 DWORD PTR _EffectPosition$19[ebp+4]

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  001a6	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  001a9	89 45 84	 mov	 DWORD PTR tv172[ebp], eax
  001ac	ff 75 84	 push	 DWORD PTR tv172[ebp]
  001af	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  001b2	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  001b7	89 45 88	 mov	 DWORD PTR $T2[ebp], eax
  001ba	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  001bd	40		 inc	 eax
  001be	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3752 :         return _Mypair._Myval2._Myptr();

  001c1	8b 4d 88	 mov	 ecx, DWORD PTR $T2[ebp]
  001c4	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  001c9	89 45 8c	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 126  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  001cc	ff 75 8c	 push	 DWORD PTR $T3[ebp]
  001cf	e8 00 00 00 00	 call	 _atof
  001d4	59		 pop	 ecx
  001d5	d9 5d 58	 fstp	 DWORD PTR _EffectPosition$19[ebp+8]

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  001d8	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  001db	89 45 80	 mov	 DWORD PTR tv188[ebp], eax
  001de	ff 75 80	 push	 DWORD PTR tv188[ebp]
  001e1	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  001e4	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  001e9	89 45 c4	 mov	 DWORD PTR $T5[ebp], eax
  001ec	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  001ef	40		 inc	 eax
  001f0	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3752 :         return _Mypair._Myval2._Myptr();

  001f3	8b 4d c4	 mov	 ecx, DWORD PTR $T5[ebp]
  001f6	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  001fb	89 45 c0	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 127  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  001fe	ff 75 c0	 push	 DWORD PTR $T4[ebp]
  00201	e8 00 00 00 00	 call	 _atof
  00206	59		 pop	 ecx
  00207	d9 5d 5c	 fstp	 DWORD PTR _EffectPosition$19[ebp+12]

; 128  : 
; 129  : 				EffectPosition.m_vecControlPoint.x = atof(pTokenVector->at(i++).c_str());

  0020a	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  0020d	89 45 bc	 mov	 DWORD PTR tv204[ebp], eax
  00210	ff 75 bc	 push	 DWORD PTR tv204[ebp]
  00213	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  00216	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  0021b	89 45 b8	 mov	 DWORD PTR tv206[ebp], eax
  0021e	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  00221	40		 inc	 eax
  00222	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax
  00225	8b 4d b8	 mov	 ecx, DWORD PTR tv206[ebp]
  00228	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 _atof
  00233	59		 pop	 ecx
  00234	d9 5d 64	 fstp	 DWORD PTR _EffectPosition$19[ebp+20]

; 130  : 				EffectPosition.m_vecControlPoint.y = atof(pTokenVector->at(i++).c_str());

  00237	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  0023a	89 45 b4	 mov	 DWORD PTR tv220[ebp], eax
  0023d	ff 75 b4	 push	 DWORD PTR tv220[ebp]
  00240	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  00243	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  00248	89 45 b0	 mov	 DWORD PTR tv222[ebp], eax
  0024b	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  0024e	40		 inc	 eax
  0024f	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax
  00252	8b 4d b0	 mov	 ecx, DWORD PTR tv222[ebp]
  00255	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0025a	50		 push	 eax
  0025b	e8 00 00 00 00	 call	 _atof
  00260	59		 pop	 ecx
  00261	d9 5d 68	 fstp	 DWORD PTR _EffectPosition$19[ebp+24]

; 131  : 				EffectPosition.m_vecControlPoint.z = atof(pTokenVector->at(i++).c_str());

  00264	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  00267	89 45 ac	 mov	 DWORD PTR tv236[ebp], eax
  0026a	ff 75 ac	 push	 DWORD PTR tv236[ebp]
  0026d	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  00270	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  00275	89 45 a8	 mov	 DWORD PTR tv238[ebp], eax
  00278	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  0027b	40		 inc	 eax
  0027c	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax
  0027f	8b 4d a8	 mov	 ecx, DWORD PTR tv238[ebp]
  00282	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00287	50		 push	 eax
  00288	e8 00 00 00 00	 call	 _atof
  0028d	59		 pop	 ecx
  0028e	d9 5d 6c	 fstp	 DWORD PTR _EffectPosition$19[ebp+28]

; 132  : 			}

  00291	e9 dc 00 00 00	 jmp	 $LN10@LoadScript
$LN7@LoadScript:

; 133  : 			else if (pTokenVector->at(i) == "MOVING_TYPE_DIRECT")

  00296	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GHJOMHEM@MOVING_TYPE_DIRECT@
  0029b	ff 75 10	 push	 DWORD PTR _i$15[ebp]
  0029e	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  002a1	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  002ac	59		 pop	 ecx
  002ad	59		 pop	 ecx
  002ae	0f b6 c0	 movzx	 eax, al
  002b1	85 c0		 test	 eax, eax
  002b3	0f 84 b5 00 00
	00		 je	 $LN9@LoadScript

; 134  : 			{
; 135  : 				i++;

  002b9	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  002bc	40		 inc	 eax
  002bd	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax

; 136  : 
; 137  : 				EffectPosition.m_iMovingType = MOVING_TYPE_DIRECT;

  002c0	83 65 60 00	 and	 DWORD PTR _EffectPosition$19[ebp+16], 0

; 138  : 
; 139  : 				EffectPosition.m_vecPosition.x = atof(pTokenVector->at(i++).c_str());

  002c4	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  002c7	89 45 a4	 mov	 DWORD PTR tv261[ebp], eax
  002ca	ff 75 a4	 push	 DWORD PTR tv261[ebp]
  002cd	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  002d0	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  002d5	89 45 a0	 mov	 DWORD PTR tv263[ebp], eax
  002d8	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  002db	40		 inc	 eax
  002dc	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax
  002df	8b 4d a0	 mov	 ecx, DWORD PTR tv263[ebp]
  002e2	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  002e7	50		 push	 eax
  002e8	e8 00 00 00 00	 call	 _atof
  002ed	59		 pop	 ecx
  002ee	d9 5d 54	 fstp	 DWORD PTR _EffectPosition$19[ebp+4]

; 140  : 				EffectPosition.m_vecPosition.y = atof(pTokenVector->at(i++).c_str());

  002f1	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  002f4	89 45 9c	 mov	 DWORD PTR tv277[ebp], eax
  002f7	ff 75 9c	 push	 DWORD PTR tv277[ebp]
  002fa	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  002fd	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  00302	89 45 98	 mov	 DWORD PTR tv279[ebp], eax
  00305	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  00308	40		 inc	 eax
  00309	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax
  0030c	8b 4d 98	 mov	 ecx, DWORD PTR tv279[ebp]
  0030f	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00314	50		 push	 eax
  00315	e8 00 00 00 00	 call	 _atof
  0031a	59		 pop	 ecx
  0031b	d9 5d 58	 fstp	 DWORD PTR _EffectPosition$19[ebp+8]

; 141  : 				EffectPosition.m_vecPosition.z = atof(pTokenVector->at(i++).c_str());

  0031e	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  00321	89 45 94	 mov	 DWORD PTR tv293[ebp], eax
  00324	ff 75 94	 push	 DWORD PTR tv293[ebp]
  00327	8b 4d 0c	 mov	 ecx, DWORD PTR _pTokenVector$[ebp]
  0032a	e8 00 00 00 00	 call	 ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
  0032f	89 45 90	 mov	 DWORD PTR tv295[ebp], eax
  00332	8b 45 10	 mov	 eax, DWORD PTR _i$15[ebp]
  00335	40		 inc	 eax
  00336	89 45 10	 mov	 DWORD PTR _i$15[ebp], eax
  00339	8b 4d 90	 mov	 ecx, DWORD PTR tv295[ebp]
  0033c	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00341	50		 push	 eax
  00342	e8 00 00 00 00	 call	 _atof
  00347	59		 pop	 ecx
  00348	d9 5d 5c	 fstp	 DWORD PTR _EffectPosition$19[ebp+12]
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 180  :     x = fx;

  0034b	0f 57 c0	 xorps	 xmm0, xmm0
  0034e	f3 0f 11 45 44	 movss	 DWORD PTR $T18[ebp], xmm0

; 181  :     y = fy;

  00353	0f 57 c0	 xorps	 xmm0, xmm0
  00356	f3 0f 11 45 48	 movss	 DWORD PTR $T18[ebp+4], xmm0

; 182  :     z = fz;

  0035b	0f 57 c0	 xorps	 xmm0, xmm0
  0035e	f3 0f 11 45 4c	 movss	 DWORD PTR $T18[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 143  : 				EffectPosition.m_vecControlPoint = D3DXVECTOR3(0.0f,0.0f,0.0f);

  00363	8d 75 44	 lea	 esi, DWORD PTR $T18[ebp]
  00366	8d 7d 64	 lea	 edi, DWORD PTR _EffectPosition$19[ebp+20]
  00369	a5		 movsd
  0036a	a5		 movsd
  0036b	a5		 movsd

; 144  : 			}

  0036c	eb 04		 jmp	 SHORT $LN10@LoadScript
$LN9@LoadScript:

; 145  : 			else
; 146  : 			{
; 147  : 				return FALSE;

  0036e	33 c0		 xor	 eax, eax
  00370	eb 22		 jmp	 SHORT $LN1@LoadScript
$LN10@LoadScript:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  00372	8d 45 50	 lea	 eax, DWORD PTR _EffectPosition$19[ebp]
  00375	50		 push	 eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 150  : 			m_TimeEventTablePosition.push_back(EffectPosition);

  00376	8b 4d 04	 mov	 ecx, DWORD PTR _this$[ebp]
  00379	83 c1 08	 add	 ecx, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  0037c	e8 00 00 00 00	 call	 ??$emplace_back@ABUSEffectPosition@@@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@QAEXABUSEffectPosition@@@Z ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::emplace_back<SEffectPosition const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 151  : 		}

  00381	e9 58 fd ff ff	 jmp	 $LN2@LoadScript
$LN3@LoadScript:

; 152  : 	}	
; 153  : 	
; 154  : 	return OnLoadScript(rTextFileLoader);

  00386	ff 75 7c	 push	 DWORD PTR _rTextFileLoader$[ebp]
  00389	8b 45 04	 mov	 eax, DWORD PTR _this$[ebp]
  0038c	8b 00		 mov	 eax, DWORD PTR [eax]
  0038e	8b 4d 04	 mov	 ecx, DWORD PTR _this$[ebp]
  00391	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN1@LoadScript:

; 155  : }

  00394	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00397	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0039e	59		 pop	 ecx
  0039f	5f		 pop	 edi
  003a0	5e		 pop	 esi
  003a1	8b 4d 70	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a4	33 cd		 xor	 ecx, ebp
  003a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ab	83 c5 74	 add	 ebp, 116		; 00000074H
  003ae	c9		 leave
  003af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$0:
  00000	8d 4d 14	 lea	 ecx, DWORD PTR $T16[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z$1:
  00008	8d 4d 2c	 lea	 ecx, DWORD PTR $T17[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a 7c	 mov	 ecx, DWORD PTR [edx+124]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadScript@CEffectElementBase@@QAEHAAVCTextFileLoader@@@Z ENDP ; CEffectElementBase::LoadScript
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?isData@CEffectElementBase@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isData@CEffectElementBase@@QAE_NXZ PROC		; CEffectElementBase::isData, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : 	return OnIsData();

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	ff 50 08	 call	 DWORD PTR [eax+8]

; 94   : }

  00012	c9		 leave
  00013	c3		 ret	 0
?isData@CEffectElementBase@@QAE_NXZ ENDP		; CEffectElementBase::isData
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
;	COMDAT ?Clear@CEffectElementBase@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CEffectElementBase@@QAEXXZ PROC			; CEffectElementBase::Clear, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 	m_fStartTime = 0.0f;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 99   : 
; 100  : 	OnClear();

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 00		 mov	 eax, DWORD PTR [eax]
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	ff 50 04	 call	 DWORD PTR [eax+4]

; 101  : }

  0001d	c9		 leave
  0001e	c3		 ret	 0
?Clear@CEffectElementBase@@QAEXXZ ENDP			; CEffectElementBase::Clear
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
;	COMDAT ??1CEffectElementBase@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CEffectElementBase@@UAE@XZ PROC			; CEffectElementBase::~CEffectElementBase, COMDAT
; _this$ = ecx

; 167  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CEffectElementBase@@6B@

; 168  : }

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  00016	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USEffectPosition@@V?$allocator@USEffectPosition@@@std@@@std@@AAEXXZ ; std::vector<SEffectPosition,std::allocator<SEffectPosition> >::_Tidy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 168  : }

  0001b	c9		 leave
  0001c	c3		 ret	 0
??1CEffectElementBase@@UAE@XZ ENDP			; CEffectElementBase::~CEffectElementBase
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp
;	COMDAT ??0CEffectElementBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_this$ = -12						; size = 4
_this$1 = -8						; size = 4
_this$ = -4						; size = 4
??0CEffectElementBase@@QAE@XZ PROC			; CEffectElementBase::CEffectElementBase, COMDAT
; _this$ = ecx

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CEffectElementBase@@6B@
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	83 c0 08	 add	 eax, 8
  00018	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  0001b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00021	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00024	89 45 f8	 mov	 DWORD PTR _this$1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$1[ebp]
  0002a	83 20 00	 and	 DWORD PTR [eax], 0
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$1[ebp]
  00030	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$1[ebp]
  00037	83 60 08 00	 and	 DWORD PTR [eax+8], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EffectLib\EffectElementBase.cpp

; 164  : 	m_fStartTime = 0.0f;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	0f 57 c0	 xorps	 xmm0, xmm0
  00041	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 165  : }

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c9		 leave
  0004a	c3		 ret	 0
??0CEffectElementBase@@QAE@XZ ENDP			; CEffectElementBase::CEffectElementBase
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Block_size$ = -8					; size = 4
__Ptr_container$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00012	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00015	77 05		 ja	 SHORT $LN12@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  00017	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Allocate_m:

; 77   :         return ::operator new(_Bytes);

  0001c	ff 75 f8	 push	 DWORD PTR __Block_size$[ebp]
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	59		 pop	 ecx

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00025	89 45 fc	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00028	83 7d fc 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0002c	74 02		 je	 SHORT $LN7@Allocate_m
  0002e	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00035	33 c0		 xor	 eax, eax
  00037	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  00039	33 c0		 xor	 eax, eax
  0003b	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00040	83 c0 23	 add	 eax, 35			; 00000023H
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00046	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00049	6a 04		 push	 4
  0004b	58		 pop	 eax
  0004c	6b c0 ff	 imul	 eax, eax, -1
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00055	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0b		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00014	59		 pop	 ecx
  00015	eb 13		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00017	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001b	74 0b		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001d	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	59		 pop	 ecx

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00028	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 0f		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  0003a	ff 75 0c	 push	 DWORD PTR __Bytes$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 222  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	c9		 leave
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00018	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00022	c9		 leave
  00023	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Al$ = -40						; size = 4
__Ptr$ = -36						; size = 4
__Ptr$ = -32						; size = 4
$T1 = -28						; size = 4
__Old_capacity$ = -24					; size = 4
$T2 = -20						; size = 4
__New_capacity$ = -16					; size = 4
__New_ptr$ = -12					; size = 4
_this$ = -8						; size = 4
__Overflow_is_possible$3 = -2				; size = 1
$T4 = -1						; size = 1
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4302 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4303 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4304 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4305 :         if (_New_size > max_size()) {

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00014	76 05		 jbe	 SHORT $LN2@Reallocate

; 4306 :             _Xlen_string(); // result too long

  00016	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4307 :         }
; 4308 : 
; 4309 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00021	89 45 e8	 mov	 DWORD PTR __Old_capacity$[ebp], eax

; 4310 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00024	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0002f	89 45 f0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00035	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00038	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  0003b	89 45 d8	 mov	 DWORD PTR __Al$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0003e	c6 45 fe 00	 mov	 BYTE PTR __Overflow_is_possible$3[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00042	8b 45 f0	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00045	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0004c	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0004d	89 45 f4	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4313 :         _Mypair._Myval2._Orphan_all();
; 4314 :         _Mypair._Myval2._Mysize = _New_size;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00056	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4315 :         _Mypair._Myval2._Myres  = _New_capacity;

  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0005f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4316 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  00062	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  00065	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00068	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0006b	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006e	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00071	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00074	ff 75 ec	 push	 DWORD PTR $T2[ebp]
  00077	e8 00 00 00 00	 call	 _memcpy
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0007f	c6 45 ff 00	 mov	 BYTE PTR $T4[ebp], 0

; 428  :         _Left = _Right;

  00083	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00086	03 45 08	 add	 eax, DWORD PTR __New_size$[ebp]
  00089	8a 4d ff	 mov	 cl, BYTE PTR $T4[ebp]
  0008c	88 08		 mov	 BYTE PTR [eax], cl

; 4317 :         if (_BUF_SIZE <= _Old_capacity) {

  0008e	83 7d e8 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  00092	72 21		 jb	 SHORT $LN3@Reallocate

; 4318 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
  00099	89 45 dc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0009c	8b 45 e8	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  0009f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a0	50		 push	 eax
  000a1	ff 75 dc	 push	 DWORD PTR __Ptr$[ebp]
  000a4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a9	59		 pop	 ecx
  000aa	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4319 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000ab	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000b1	89 08		 mov	 DWORD PTR [eax], ecx

; 4320 :         } else {

  000b3	eb 0e		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4321 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000b5	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000b8	50		 push	 eax
  000b9	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000c1	59		 pop	 ecx
  000c2	59		 pop	 ecx
$LN4@Reallocate:

; 4322 :         }
; 4323 : 
; 4324 :         return *this;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4325 :     }

  000c6	c9		 leave
  000c7	c2 0c 00	 ret	 12			; 0000000cH
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 270  : /* _CONSTEXPR20_DYNALLOC */ void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 1708 :     [[noreturn]] static void _Xrange() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1709 :         _Xout_of_range("invalid vector subscript");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00008	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN2@Xrange:

; 1710 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
__Pos$ = 8						; size = 4
?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at, COMDAT
; _this$ = ecx

; 1517 :     _NODISCARD _Ty& at(const size_type _Pos) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1518 :         auto& _My_data = _Mypair._Myval2;

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	89 45 fc	 mov	 DWORD PTR __My_data$[ebp], eax

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	2b 01		 sub	 eax, DWORD PTR [ecx]
  00019	99		 cdq
  0001a	6a 18		 push	 24			; 00000018H
  0001c	59		 pop	 ecx
  0001d	f7 f9		 idiv	 ecx
  0001f	3b 45 08	 cmp	 eax, DWORD PTR __Pos$[ebp]
  00022	77 05		 ja	 SHORT $LN2@at

; 1520 :             _Xrange();

  00024	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN2@at:

; 1521 :         }
; 1522 : 
; 1523 :         return _My_data._Myfirst[_Pos];

  00029	6b 45 08 18	 imul	 eax, DWORD PTR __Pos$[ebp], 24
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00030	03 01		 add	 eax, DWORD PTR [ecx]
$LN3@at:

; 1524 :     }

  00032	c9		 leave
  00033	c2 04 00	 ret	 4
?at@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::at
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Al$1 = -28						; size = 4
__Ptr$2 = -24						; size = 4
__Count$ = -20						; size = 4
$T3 = -16						; size = 4
tv68 = -12						; size = 4
_this$ = -8						; size = 4
$T4 = -2						; size = 1
$T5 = -1						; size = 1
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4383 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2227 :         return _BUF_SIZE <= _Myres;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00010	72 09		 jb	 SHORT $LN9@Tidy_deall
  00012	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00019	eb 04		 jmp	 SHORT $LN10@Tidy_deall
$LN9@Tidy_deall:
  0001b	83 65 f4 00	 and	 DWORD PTR tv68[ebp], 0
$LN10@Tidy_deall:
  0001f	8a 45 f4	 mov	 al, BYTE PTR tv68[ebp]
  00022	88 45 ff	 mov	 BYTE PTR $T5[ebp], al

; 4384 :         _Mypair._Myval2._Orphan_all();
; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00025	0f b6 45 ff	 movzx	 eax, BYTE PTR $T5[ebp]
  00029	85 c0		 test	 eax, eax
  0002b	74 34		 je	 SHORT $LN2@Tidy_deall

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	89 45 e8	 mov	 DWORD PTR __Ptr$2[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00038	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  0003b	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0003e	89 45 e4	 mov	 DWORD PTR __Al$1[ebp], eax

; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00041	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  00049	59		 pop	 ecx

; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00050	40		 inc	 eax
  00051	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	ff 75 ec	 push	 DWORD PTR __Count$[ebp]
  00057	ff 75 e8	 push	 DWORD PTR __Ptr$2[ebp]
  0005a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN2@Tidy_deall:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  00061	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00072	c6 45 fe 00	 mov	 BYTE PTR $T4[ebp], 0
  00076	33 c0		 xor	 eax, eax
  00078	40		 inc	 eax
  00079	6b c0 00	 imul	 eax, eax, 0

; 428  :         _Left = _Right;

  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	8a 55 fe	 mov	 dl, BYTE PTR $T4[ebp]
  00082	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4396 :     }

  00085	c9		 leave
  00086	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4376 :     void _Tidy_init() noexcept { // initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4377 :         _Mypair._Myval2._Mysize = 0;

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 4378 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4379 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4380 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00019	c6 45 ff 00	 mov	 BYTE PTR $T1[ebp], 0
  0001d	33 c0		 xor	 eax, eax
  0001f	40		 inc	 eax
  00020	6b c0 00	 imul	 eax, eax, 0

; 428  :         _Left = _Right;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8a 55 ff	 mov	 dl, BYTE PTR $T1[ebp]
  00029	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4381 :     }

  0002c	c9		 leave
  0002d	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
tv93 = -28						; size = 4
$T3 = -24						; size = 4
_this$ = -20						; size = 4
$T4 = -16						; size = 4
__Masked$5 = -12					; size = 4
__Old$ = -8						; size = 4
__Max$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4297 :     _NODISCARD size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	89 45 fc	 mov	 DWORD PTR __Max$[ebp], eax
  00014	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001a	89 45 f8	 mov	 DWORD PTR __Old$[ebp], eax

; 4285 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0001d	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00020	83 c8 0f	 or	 eax, 15			; 0000000fH
  00023	89 45 f4	 mov	 DWORD PTR __Masked$5[ebp], eax

; 4286 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00026	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  00029	3b 45 fc	 cmp	 eax, DWORD PTR __Max$[ebp]
  0002c	76 08		 jbe	 SHORT $LN29@Calculate_

; 4287 :             return _Max;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00031	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  00034	eb 4c		 jmp	 SHORT $LN31@Calculate_
$LN29@Calculate_:

; 4288 :         }
; 4289 : 
; 4290 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00036	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00039	d1 e8		 shr	 eax, 1
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __Max$[ebp]
  0003e	2b c8		 sub	 ecx, eax
  00040	39 4d f8	 cmp	 DWORD PTR __Old$[ebp], ecx
  00043	76 08		 jbe	 SHORT $LN30@Calculate_

; 4291 :             return _Max;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00048	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  0004b	eb 35		 jmp	 SHORT $LN31@Calculate_
$LN30@Calculate_:

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00050	d1 e8		 shr	 eax, 1
  00052	03 45 f8	 add	 eax, DWORD PTR __Old$[ebp]
  00055	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  0005b	3b 45 e8	 cmp	 eax, DWORD PTR $T3[ebp]
  0005e	73 08		 jae	 SHORT $LN35@Calculate_
  00060	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00063	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
  00066	eb 06		 jmp	 SHORT $LN36@Calculate_
$LN35@Calculate_:
  00068	8d 45 f4	 lea	 eax, DWORD PTR __Masked$5[ebp]
  0006b	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
$LN36@Calculate_:
  0006e	8b 45 e4	 mov	 eax, DWORD PTR tv93[ebp]
  00071	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00074	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00077	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0007a	8b 45 dc	 mov	 eax, DWORD PTR $T1[ebp]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
$LN31@Calculate_:

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00082	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]

; 4299 :     }

  00085	c9		 leave
  00086	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z
_TEXT	SEGMENT
$T1 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
__Ptr$ = -32						; size = 4
tv95 = -28						; size = 4
__Left_size$ = -24					; size = 4
_this$ = -20						; size = 4
__Result$4 = -16					; size = 4
tv91 = -12						; size = 4
_this$ = -8						; size = 4
$T5 = -2						; size = 1
$T6 = -1						; size = 1
__Ptr$ = 8						; size = 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT
; _this$ = ecx

; 4179 :     bool _Equal(_In_z_ const _Elem* const _Ptr) const noexcept { // compare [0, size()) with _Ptr for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000c	e8 00 00 00 00	 call	 _strlen
  00011	59		 pop	 ecx
  00012	89 45 dc	 mov	 DWORD PTR $T3[ebp], eax

; 4180 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00015	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00018	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 2218 :         const value_type* _Result = _Bx._Buf;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR __Result$4[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  00021	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00028	72 09		 jb	 SHORT $LN12@Equal
  0002a	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv91[ebp], 1
  00031	eb 04		 jmp	 SHORT $LN13@Equal
$LN12@Equal:
  00033	83 65 f4 00	 and	 DWORD PTR tv91[ebp], 0
$LN13@Equal:
  00037	8a 45 f4	 mov	 al, BYTE PTR tv91[ebp]
  0003a	88 45 ff	 mov	 BYTE PTR $T6[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  0003d	0f b6 45 ff	 movzx	 eax, BYTE PTR $T6[ebp]
  00041	85 c0		 test	 eax, eax
  00043	74 0e		 je	 SHORT $LN7@Equal

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 00		 mov	 eax, DWORD PTR [eax]
  0004a	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0004d	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00050	89 45 f0	 mov	 DWORD PTR __Result$4[ebp], eax
$LN7@Equal:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  00053	8b 45 f0	 mov	 eax, DWORD PTR __Result$4[ebp]
  00056	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax

; 4180 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00059	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0005f	89 45 e8	 mov	 DWORD PTR __Left_size$[ebp], eax

; 561  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00062	8b 45 e8	 mov	 eax, DWORD PTR __Left_size$[ebp]
  00065	3b 45 dc	 cmp	 eax, DWORD PTR $T3[ebp]
  00068	75 23		 jne	 SHORT $LN20@Equal

; 369  :         return _CSTD memcmp(_First1, _First2, _Count);

  0006a	ff 75 e8	 push	 DWORD PTR __Left_size$[ebp]
  0006d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00070	ff 75 d8	 push	 DWORD PTR $T2[ebp]
  00073	e8 00 00 00 00	 call	 _memcmp
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	89 45 d4	 mov	 DWORD PTR $T1[ebp], eax

; 561  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007e	83 7d d4 00	 cmp	 DWORD PTR $T1[ebp], 0
  00082	75 09		 jne	 SHORT $LN20@Equal
  00084	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv95[ebp], 1
  0008b	eb 04		 jmp	 SHORT $LN21@Equal
$LN20@Equal:
  0008d	83 65 e4 00	 and	 DWORD PTR tv95[ebp], 0
$LN21@Equal:
  00091	8a 45 e4	 mov	 al, BYTE PTR tv95[ebp]
  00094	88 45 fe	 mov	 BYTE PTR $T5[ebp], al

; 4180 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00097	8a 45 fe	 mov	 al, BYTE PTR $T5[ebp]

; 4181 :     }

  0009a	c9		 leave
  0009b	c2 04 00	 ret	 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -60						; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
__Storage_max$ = -44					; size = 4
$T5 = -40						; size = 4
$T6 = -36						; size = 4
$T7 = -32						; size = 4
_this$ = -28						; size = 4
tv70 = -24						; size = 4
$T8 = -20						; size = 4
$T9 = -16						; size = 4
tv67 = -12						; size = 4
__Alloc_max$ = -8					; size = 4
$T10 = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3773 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 4413 :         return _Mypair._Get_first();

  00009	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0000c	89 45 e0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4413 :         return _Mypair._Get_first();

  0000f	8b 45 e0	 mov	 eax, DWORD PTR $T7[ebp]
  00012	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00015	83 4d f8 ff	 or	 DWORD PTR __Alloc_max$[ebp], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00019	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR $T10[ebp], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Alloc_max$[ebp]
  00023	3b 45 fc	 cmp	 eax, DWORD PTR $T10[ebp]
  00026	73 08		 jae	 SHORT $LN14@max_size
  00028	8d 45 fc	 lea	 eax, DWORD PTR $T10[ebp]
  0002b	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
  0002e	eb 06		 jmp	 SHORT $LN15@max_size
$LN14@max_size:
  00030	8d 45 f8	 lea	 eax, DWORD PTR __Alloc_max$[ebp]
  00033	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
$LN15@max_size:
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv67[ebp]
  00039	89 45 dc	 mov	 DWORD PTR $T6[ebp], eax
  0003c	8b 45 dc	 mov	 eax, DWORD PTR $T6[ebp]
  0003f	89 45 d8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00042	8b 45 d8	 mov	 eax, DWORD PTR $T5[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 d4	 mov	 DWORD PTR __Storage_max$[ebp], eax

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  0004a	8b 45 d4	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  0004d	48		 dec	 eax
  0004e	89 45 f0	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00051	c7 45 d0 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00058	8b 45 d0	 mov	 eax, DWORD PTR $T4[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0005e	8b 45 f0	 mov	 eax, DWORD PTR $T9[ebp]
  00061	3b 45 ec	 cmp	 eax, DWORD PTR $T8[ebp]
  00064	73 08		 jae	 SHORT $LN22@max_size
  00066	8d 45 f0	 lea	 eax, DWORD PTR $T9[ebp]
  00069	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
  0006c	eb 06		 jmp	 SHORT $LN23@max_size
$LN22@max_size:
  0006e	8d 45 ec	 lea	 eax, DWORD PTR $T8[ebp]
  00071	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
$LN23@max_size:
  00074	8b 45 e8	 mov	 eax, DWORD PTR tv70[ebp]
  00077	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
  0007a	8b 45 cc	 mov	 eax, DWORD PTR $T3[ebp]
  0007d	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00080	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00083	8b 00		 mov	 eax, DWORD PTR [eax]

; 3778 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3779 :         );
; 3780 :     }

  00085	c9		 leave
  00086	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
$T1 = -28						; size = 4
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__Result$2 = -16					; size = 4
tv80 = -12						; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3751 :     _NODISCARD _Ret_z_ const _Elem* c_str() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3752 :         return _Mypair._Myval2._Myptr();

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 2218 :         const value_type* _Result = _Bx._Buf;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	89 45 f0	 mov	 DWORD PTR __Result$2[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  00015	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0001c	72 09		 jb	 SHORT $LN9@c_str
  0001e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
  00025	eb 04		 jmp	 SHORT $LN10@c_str
$LN9@c_str:
  00027	83 65 f4 00	 and	 DWORD PTR tv80[ebp], 0
$LN10@c_str:
  0002b	8a 45 f4	 mov	 al, BYTE PTR tv80[ebp]
  0002e	88 45 ff	 mov	 BYTE PTR $T3[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  00031	0f b6 45 ff	 movzx	 eax, BYTE PTR $T3[ebp]
  00035	85 c0		 test	 eax, eax
  00037	74 0e		 je	 SHORT $LN4@c_str

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
  0003e	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00041	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00044	89 45 f0	 mov	 DWORD PTR __Result$2[ebp], eax
$LN4@c_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  00047	8b 45 f0	 mov	 eax, DWORD PTR __Result$2[ebp]
  0004a	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax

; 3752 :         return _Mypair._Myval2._Myptr();

  0004d	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]

; 3753 :     }

  00050	c9		 leave
  00051	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -16						; size = 1
__Old_ptr$2 = -12					; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3042 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3043 :         // assign [_Ptr, _Ptr + _Count)
; 3044 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00012	77 39		 ja	 SHORT $LN2@assign

; 3045 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001c	89 45 f4	 mov	 DWORD PTR __Old_ptr$2[ebp], eax

; 3046 :             _Mypair._Myval2._Mysize = _Count;

  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00025	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0002e	ff 75 f4	 push	 DWORD PTR __Old_ptr$2[ebp]
  00031	e8 00 00 00 00	 call	 _memmove
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3047 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3048 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00039	c6 45 ff 00	 mov	 BYTE PTR $T3[ebp], 0

; 428  :         _Left = _Right;

  0003d	8b 45 f4	 mov	 eax, DWORD PTR __Old_ptr$2[ebp]
  00040	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00043	8a 4d ff	 mov	 cl, BYTE PTR $T3[ebp]
  00046	88 08		 mov	 BYTE PTR [eax], cl

; 3049 :             return *this;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	eb 16		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3050 :         }
; 3051 : 
; 3052 :         return _Reallocate_for(

  0004d	33 c0		 xor	 eax, eax
  0004f	88 45 f0	 mov	 BYTE PTR $T1[ebp], al
  00052	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00055	ff 75 f0	 push	 DWORD PTR $T1[ebp]
  00058	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 3053 :             _Count,
; 3054 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3055 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3057 :             },
; 3058 :             _Ptr);
; 3059 :     }

  00063	c9		 leave
  00064	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2800 :     ~basic_string() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2801 :         _Tidy_deallocate();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2802 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2803 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2804 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2805 :         _Mypair._Myval2._Myproxy = nullptr;
; 2806 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2807 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2808 :     }

  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__Alproxy$ = -40					; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
_this$ = -28						; size = 4
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_$S6$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2413 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0002e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00031	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00034	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  0003b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 2413 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00042	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2414 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00046	8d 45 f3	 lea	 eax, DWORD PTR _$S6$[ebp]
  00049	89 45 d8	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2415 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2416 :         _Tidy_init();

  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00054	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00057	e8 00 00 00 00	 call	 _strlen
  0005c	59		 pop	 ecx
  0005d	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  00060	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  00063	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00066	ff 75 dc	 push	 DWORD PTR $T2[ebp]
  00069	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0006c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2417 :         assign(_Ptr);
; 2418 :         _Proxy._Release();
; 2419 :     }

  00074	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00078	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	c9		 leave
  00087	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__Result$ = -16						; size = 4
tv76 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2217 :     const value_type* _Myptr() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2218 :         const value_type* _Result = _Bx._Buf;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00016	72 09		 jb	 SHORT $LN6@Myptr
  00018	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  0001f	eb 04		 jmp	 SHORT $LN7@Myptr
$LN6@Myptr:
  00021	83 65 f4 00	 and	 DWORD PTR tv76[ebp], 0
$LN7@Myptr:
  00025	8a 45 f4	 mov	 al, BYTE PTR tv76[ebp]
  00028	88 45 ff	 mov	 BYTE PTR $T1[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  0002b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0e		 je	 SHORT $LN2@Myptr

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0003b	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  00041	8b 45 f0	 mov	 eax, DWORD PTR __Result$[ebp]

; 2224 :     }

  00044	c9		 leave
  00045	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__Result$ = -16						; size = 4
tv76 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2208 :     value_type* _Myptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2209 :         value_type* _Result = _Bx._Buf;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00016	72 09		 jb	 SHORT $LN6@Myptr
  00018	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  0001f	eb 04		 jmp	 SHORT $LN7@Myptr
$LN6@Myptr:
  00021	83 65 f4 00	 and	 DWORD PTR tv76[ebp], 0
$LN7@Myptr:
  00025	8a 45 f4	 mov	 al, BYTE PTR tv76[ebp]
  00028	88 45 ff	 mov	 BYTE PTR $T1[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  0002b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0e		 je	 SHORT $LN2@Myptr

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0003b	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  00041	8b 45 f0	 mov	 eax, DWORD PTR __Result$[ebp]

; 2215 :     }

  00044	c9		 leave
  00045	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2274 : [[noreturn]] inline void _Xlen_string() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2275 :     _Xlength_error("string too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2276 : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	83 c0 23	 add	 eax, 35			; 00000023H
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f4	 mov	 DWORD PTR __Ptr_user$[ebp], eax

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	6a 04		 push	 4
  0001d	58		 pop	 eax
  0001e	6b c0 ff	 imul	 eax, eax, -1
  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00024	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00027	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	2b 45 f8	 sub	 eax, DWORD PTR __Ptr_container$[ebp]
  00039	89 45 fc	 mov	 DWORD PTR __Back_shift$[ebp], eax
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00040	72 08		 jb	 SHORT $LN7@Adjust_man
  00042	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00046	77 02		 ja	 SHORT $LN7@Adjust_man
  00048	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0004f	33 c0		 xor	 eax, eax
  00051	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00053	33 c0		 xor	 eax, eax
  00055	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 130  :     {

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 141  :     {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c9		 leave
  0003d	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 0b		 je	 SHORT $LN3@what
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00023	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00026	c9		 leave
  00027	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx

; 74   :     }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
