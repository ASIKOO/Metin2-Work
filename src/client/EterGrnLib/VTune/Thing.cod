; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	??_ECGrannyModel@@UAEPAXI@Z			; CGrannyModel::`vector deleting destructor'
PUBLIC	??_ECGrannyMotion@@UAEPAXI@Z			; CGrannyMotion::`vector deleting destructor'
PUBLIC	?Type@CGraphicThing@@SAKXZ			; CGraphicThing::Type
PUBLIC	??0CGraphicThing@@QAE@PBD@Z			; CGraphicThing::CGraphicThing
PUBLIC	??1CGraphicThing@@UAE@XZ			; CGraphicThing::~CGraphicThing
PUBLIC	?CreateDeviceObjects@CGraphicThing@@UAE_NXZ	; CGraphicThing::CreateDeviceObjects
PUBLIC	?DestroyDeviceObjects@CGraphicThing@@UAEXXZ	; CGraphicThing::DestroyDeviceObjects
PUBLIC	?CheckModelIndex@CGraphicThing@@QBE_NH@Z	; CGraphicThing::CheckModelIndex
PUBLIC	?GetModelPointer@CGraphicThing@@QAEPAVCGrannyModel@@H@Z ; CGraphicThing::GetModelPointer
PUBLIC	?GetModelCount@CGraphicThing@@QBEHXZ		; CGraphicThing::GetModelCount
PUBLIC	?CheckMotionIndex@CGraphicThing@@QBE_NH@Z	; CGraphicThing::CheckMotionIndex
PUBLIC	?GetMotionPointer@CGraphicThing@@QAEPAVCGrannyMotion@@H@Z ; CGraphicThing::GetMotionPointer
PUBLIC	?GetMotionCount@CGraphicThing@@QBEHXZ		; CGraphicThing::GetMotionCount
PUBLIC	?Initialize@CGraphicThing@@IAEXXZ		; CGraphicThing::Initialize
PUBLIC	?LoadModels@CGraphicThing@@IAE_NXZ		; CGraphicThing::LoadModels
PUBLIC	?LoadMotions@CGraphicThing@@IAE_NXZ		; CGraphicThing::LoadMotions
PUBLIC	?OnLoad@CGraphicThing@@MAE_NHPBX@Z		; CGraphicThing::OnLoad
PUBLIC	?OnClear@CGraphicThing@@MAEXXZ			; CGraphicThing::OnClear
PUBLIC	?OnIsEmpty@CGraphicThing@@MBE_NXZ		; CGraphicThing::OnIsEmpty
PUBLIC	?OnIsType@CGraphicThing@@MAE_NK@Z		; CGraphicThing::OnIsType
PUBLIC	??_GCGraphicThing@@UAEPAXI@Z			; CGraphicThing::`scalar deleting destructor'
PUBLIC	?GetModelLocalPath@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; GetModelLocalPath
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7CGraphicThing@@6B@				; CGraphicThing::`vftable'
PUBLIC	??_C@_0O@POMHALBA@CGraphicThing@		; `string'
PUBLIC	??_C@_0BM@CNDJBDNK@m_pgrnFileInfo?5?$DN?$DN?5NULL?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CGraphicThing@@6B@				; CGraphicThing::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicThing@@@8			; CGraphicThing `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicThing@@8				; CGraphicThing::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicThing@@8				; CGraphicThing::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicThing@@8			; CGraphicThing::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CResource@@8			; CResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCResource@@@8				; CResource `RTTI Type Descriptor'
PUBLIC	??_R3CResource@@8				; CResource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CResource@@8				; CResource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CReferenceObject@@8		; CReferenceObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCReferenceObject@@@8			; CReferenceObject `RTTI Type Descriptor'
PUBLIC	??_R3CReferenceObject@@8			; CReferenceObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CReferenceObject@@8			; CReferenceObject::`RTTI Base Class Array'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__imp__GrannyReadEntireFileFromMemory@8:PROC
EXTRN	__imp__GrannyFreeFileSection@8:PROC
EXTRN	__imp__GrannyFreeFile@4:PROC
EXTRN	__imp__GrannyGetFileInfo@4:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?Clear@CResource@@QAEXXZ:PROC			; CResource::Clear
EXTRN	?StringToType@CResource@@SAKPBD@Z:PROC		; CResource::StringToType
EXTRN	??0CResource@@QAE@PBD@Z:PROC			; CResource::CResource
EXTRN	??1CResource@@UAE@XZ:PROC			; CResource::~CResource
EXTRN	?OnIsType@CResource@@MAE_NK@Z:PROC		; CResource::OnIsType
EXTRN	?OnConstruct@CResource@@MAEXXZ:PROC		; CResource::OnConstruct
EXTRN	?OnSelfDestruct@CResource@@MAEXXZ:PROC		; CResource::OnSelfDestruct
EXTRN	??0CGrannyModel@@QAE@XZ:PROC			; CGrannyModel::CGrannyModel
EXTRN	??1CGrannyModel@@UAE@XZ:PROC			; CGrannyModel::~CGrannyModel
EXTRN	?CreateFromGrannyModelPointer@CGrannyModel@@QAE_NPAUgranny_model@@@Z:PROC ; CGrannyModel::CreateFromGrannyModelPointer
EXTRN	?CreateDeviceObjects@CGrannyModel@@QAE_NXZ:PROC	; CGrannyModel::CreateDeviceObjects
EXTRN	?DestroyDeviceObjects@CGrannyModel@@QAEXXZ:PROC	; CGrannyModel::DestroyDeviceObjects
EXTRN	??0CGrannyMotion@@QAE@XZ:PROC			; CGrannyMotion::CGrannyMotion
EXTRN	??1CGrannyMotion@@UAE@XZ:PROC			; CGrannyMotion::~CGrannyMotion
EXTRN	?BindGrannyAnimation@CGrannyMotion@@QAE_NPAUgranny_animation@@@Z:PROC ; CGrannyMotion::BindGrannyAnimation
EXTRN	??_ECGraphicThing@@UAEPAXI@Z:PROC		; CGraphicThing::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?s_type@?1??Type@CGraphicThing@@SAKXZ@4KA
_BSS	SEGMENT
?s_type@?1??Type@CGraphicThing@@SAKXZ@4KA DD 01H DUP (?) ; `CGraphicThing::Type'::`2'::s_type
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Type@CGraphicThing@@SAKXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Type@CGraphicThing@@SAKXZ@4HA DD 01H DUP (?)	; `CGraphicThing::Type'::`2'::$TSS0
_BSS	ENDS
_BSS	SEGMENT
?gs_modelLocalPath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 018H DUP (?) ; gs_modelLocalPath
_BSS	ENDS
CRT$XCU	SEGMENT
?gs_modelLocalPath$initializer$@@3P6AXXZA DD FLAT:??__Egs_modelLocalPath@@YAXXZ ; gs_modelLocalPath$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R2CReferenceObject@@8
rdata$r	SEGMENT
??_R2CReferenceObject@@8 DD FLAT:??_R1A@?0A@EA@CReferenceObject@@8 ; CReferenceObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CReferenceObject@@8
rdata$r	SEGMENT
??_R3CReferenceObject@@8 DD 00H				; CReferenceObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCReferenceObject@@@8
data$rs	SEGMENT
??_R0?AVCReferenceObject@@@8 DD FLAT:??_7type_info@@6B@	; CReferenceObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCReferenceObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CReferenceObject@@8 DD FLAT:??_R0?AVCReferenceObject@@@8 ; CReferenceObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CResource@@8
rdata$r	SEGMENT
??_R2CResource@@8 DD FLAT:??_R1A@?0A@EA@CResource@@8	; CResource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CResource@@8
rdata$r	SEGMENT
??_R3CResource@@8 DD 00H				; CResource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CResource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCResource@@@8
data$rs	SEGMENT
??_R0?AVCResource@@@8 DD FLAT:??_7type_info@@6B@	; CResource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCResource@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CResource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CResource@@8 DD FLAT:??_R0?AVCResource@@@8 ; CResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CResource@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicThing@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicThing@@8 DD FLAT:??_R0?AVCGraphicThing@@@8 ; CGraphicThing::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicThing@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicThing@@8
rdata$r	SEGMENT
??_R2CGraphicThing@@8 DD FLAT:??_R1A@?0A@EA@CGraphicThing@@8 ; CGraphicThing::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CResource@@8
	DD	FLAT:??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicThing@@8
rdata$r	SEGMENT
??_R3CGraphicThing@@8 DD 00H				; CGraphicThing::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicThing@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicThing@@@8
data$rs	SEGMENT
??_R0?AVCGraphicThing@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicThing `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicThing@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicThing@@6B@
rdata$r	SEGMENT
??_R4CGraphicThing@@6B@ DD 00H				; CGraphicThing::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicThing@@@8
	DD	FLAT:??_R3CGraphicThing@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CNDJBDNK@m_pgrnFileInfo?5?$DN?$DN?5NULL?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BM@CNDJBDNK@m_pgrnFileInfo?5?$DN?$DN?5NULL?3?5?$CFs?6@ DB 'm_pgrnF'
	DB	'ileInfo == NULL: %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@POMHALBA@CGraphicThing@
CONST	SEGMENT
??_C@_0O@POMHALBA@CGraphicThing@ DB 'CGraphicThing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicThing@@6B@
CONST	SEGMENT
??_7CGraphicThing@@6B@ DD FLAT:??_R4CGraphicThing@@6B@	; CGraphicThing::`vftable'
	DD	FLAT:??_ECGraphicThing@@UAEPAXI@Z
	DD	FLAT:?OnConstruct@CResource@@MAEXXZ
	DD	FLAT:?OnSelfDestruct@CResource@@MAEXXZ
	DD	FLAT:?CreateDeviceObjects@CGraphicThing@@UAE_NXZ
	DD	FLAT:?DestroyDeviceObjects@CGraphicThing@@UAEXXZ
	DD	FLAT:?OnLoad@CGraphicThing@@MAE_NHPBX@Z
	DD	FLAT:?OnClear@CGraphicThing@@MAEXXZ
	DD	FLAT:?OnIsEmpty@CGraphicThing@@MBE_NXZ
	DD	FLAT:?OnIsType@CGraphicThing@@MAE_NK@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadMotions@CGraphicThing@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadMotions@CGraphicThing@@IAE_NXZ$0
__ehfuncinfo$?LoadMotions@CGraphicThing@@IAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadMotions@CGraphicThing@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadModels@CGraphicThing@@IAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadModels@CGraphicThing@@IAE_NXZ$0
__ehfuncinfo$?LoadModels@CGraphicThing@@IAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadModels@CGraphicThing@@IAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicThing@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphicThing@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicThing@@QAE@PBD@Z$0
__ehfuncinfo$??0CGraphicThing@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CGraphicThing@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Type@CGraphicThing@@SAKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Type@CGraphicThing@@SAKXZ$0
__ehfuncinfo$?Type@CGraphicThing@@SAKXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Type@CGraphicThing@@SAKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECGrannyMotion@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ECGrannyModel@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Block_size$ = -8					; size = 4
__Ptr_container$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00012	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00015	77 05		 ja	 SHORT $LN12@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  00017	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Allocate_m:

; 77   :         return ::operator new(_Bytes);

  0001c	ff 75 f8	 push	 DWORD PTR __Block_size$[ebp]
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	59		 pop	 ecx

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00025	89 45 fc	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00028	83 7d fc 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0002c	74 02		 je	 SHORT $LN7@Allocate_m
  0002e	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00035	33 c0		 xor	 eax, eax
  00037	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  00039	33 c0		 xor	 eax, eax
  0003b	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00040	83 c0 23	 add	 eax, 35			; 00000023H
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00046	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00049	6a 04		 push	 4
  0004b	58		 pop	 eax
  0004c	6b c0 ff	 imul	 eax, eax, -1
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00055	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0b		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00014	59		 pop	 ecx
  00015	eb 13		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00017	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001b	74 0b		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001d	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	59		 pop	 ecx

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00028	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 0f		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  0003a	ff 75 0c	 push	 DWORD PTR __Bytes$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 222  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	c9		 leave
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00018	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00022	c9		 leave
  00023	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Al$ = -40						; size = 4
__Ptr$ = -36						; size = 4
__Ptr$ = -32						; size = 4
$T1 = -28						; size = 4
__Old_capacity$ = -24					; size = 4
$T2 = -20						; size = 4
__New_capacity$ = -16					; size = 4
__New_ptr$ = -12					; size = 4
_this$ = -8						; size = 4
__Overflow_is_possible$3 = -2				; size = 1
$T4 = -1						; size = 1
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4302 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4303 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4304 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4305 :         if (_New_size > max_size()) {

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00014	76 05		 jbe	 SHORT $LN2@Reallocate

; 4306 :             _Xlen_string(); // result too long

  00016	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4307 :         }
; 4308 : 
; 4309 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00021	89 45 e8	 mov	 DWORD PTR __Old_capacity$[ebp], eax

; 4310 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00024	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0002f	89 45 f0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00035	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00038	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  0003b	89 45 d8	 mov	 DWORD PTR __Al$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0003e	c6 45 fe 00	 mov	 BYTE PTR __Overflow_is_possible$3[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00042	8b 45 f0	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00045	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0004c	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0004d	89 45 f4	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4313 :         _Mypair._Myval2._Orphan_all();
; 4314 :         _Mypair._Myval2._Mysize = _New_size;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00056	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4315 :         _Mypair._Myval2._Myres  = _New_capacity;

  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0005f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4316 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  00062	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  00065	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00068	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0006b	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006e	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00071	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00074	ff 75 ec	 push	 DWORD PTR $T2[ebp]
  00077	e8 00 00 00 00	 call	 _memcpy
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0007f	c6 45 ff 00	 mov	 BYTE PTR $T4[ebp], 0

; 428  :         _Left = _Right;

  00083	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00086	03 45 08	 add	 eax, DWORD PTR __New_size$[ebp]
  00089	8a 4d ff	 mov	 cl, BYTE PTR $T4[ebp]
  0008c	88 08		 mov	 BYTE PTR [eax], cl

; 4317 :         if (_BUF_SIZE <= _Old_capacity) {

  0008e	83 7d e8 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  00092	72 21		 jb	 SHORT $LN3@Reallocate

; 4318 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
  00099	89 45 dc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0009c	8b 45 e8	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  0009f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a0	50		 push	 eax
  000a1	ff 75 dc	 push	 DWORD PTR __Ptr$[ebp]
  000a4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a9	59		 pop	 ecx
  000aa	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4319 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000ab	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000b1	89 08		 mov	 DWORD PTR [eax], ecx

; 4320 :         } else {

  000b3	eb 0e		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4321 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000b5	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000b8	50		 push	 eax
  000b9	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000c1	59		 pop	 ecx
  000c2	59		 pop	 ecx
$LN4@Reallocate:

; 4322 :         }
; 4323 : 
; 4324 :         return *this;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4325 :     }

  000c6	c9		 leave
  000c7	c2 0c 00	 ret	 12			; 0000000cH
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 270  : /* _CONSTEXPR20_DYNALLOC */ void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?GetModelLocalPath@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetModelLocalPath@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; GetModelLocalPath, COMDAT

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 	return gs_modelLocalPath;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?gs_modelLocalPath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 183  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?GetModelLocalPath@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; GetModelLocalPath
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??__Fgs_modelLocalPath@@YAXXZ
text$yd	SEGMENT
??__Fgs_modelLocalPath@@YAXXZ PROC			; `dynamic atexit destructor for 'gs_modelLocalPath'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2801 :         _Tidy_deallocate();

  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_modelLocalPath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00008	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??__Fgs_modelLocalPath@@YAXXZ ENDP			; `dynamic atexit destructor for 'gs_modelLocalPath''
text$yd	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ??__Egs_modelLocalPath@@YAXXZ
text$di	SEGMENT
??__Egs_modelLocalPath@@YAXXZ PROC			; `dynamic initializer for 'gs_modelLocalPath'', COMDAT

; 178  : static std::string gs_modelLocalPath;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_modelLocalPath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00008	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0000d	68 00 00 00 00	 push	 OFFSET ??__Fgs_modelLocalPath@@YAXXZ ; `dynamic atexit destructor for 'gs_modelLocalPath''
  00012	e8 00 00 00 00	 call	 _atexit
  00017	59		 pop	 ecx
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??__Egs_modelLocalPath@@YAXXZ ENDP			; `dynamic initializer for 'gs_modelLocalPath''
text$di	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GCGraphicThing@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCGraphicThing@@UAEPAXI@Z PROC			; CGraphicThing::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CGraphicThing@@UAE@XZ ; CGraphicThing::~CGraphicThing
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 40		 push	 64			; 00000040H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GCGraphicThing@@UAEPAXI@Z ENDP			; CGraphicThing::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?OnIsType@CGraphicThing@@MAE_NK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 4
?OnIsType@CGraphicThing@@MAE_NK@Z PROC			; CGraphicThing::OnIsType, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 	if (CGraphicThing::Type() == type)

  00007	e8 00 00 00 00	 call	 ?Type@CGraphicThing@@SAKXZ ; CGraphicThing::Type
  0000c	3b 45 08	 cmp	 eax, DWORD PTR _type$[ebp]
  0000f	75 04		 jne	 SHORT $LN2@OnIsType

; 55   : 		return true;

  00011	b0 01		 mov	 al, 1
  00013	eb 0b		 jmp	 SHORT $LN1@OnIsType
$LN2@OnIsType:

; 56   : 
; 57   : 	return CResource::OnIsType(type);

  00015	ff 75 08	 push	 DWORD PTR _type$[ebp]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?OnIsType@CResource@@MAE_NK@Z ; CResource::OnIsType
$LN1@OnIsType:

; 58   : }

  00020	c9		 leave
  00021	c2 04 00	 ret	 4
?OnIsType@CGraphicThing@@MAE_NK@Z ENDP			; CGraphicThing::OnIsType
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?OnIsEmpty@CGraphicThing@@MBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -1						; size = 1
?OnIsEmpty@CGraphicThing@@MBE_NXZ PROC			; CGraphicThing::OnIsEmpty, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 	return m_pgrnFile ? false : true;

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0000f	74 06		 je	 SHORT $LN3@OnIsEmpty
  00011	c6 45 ff 00	 mov	 BYTE PTR tv66[ebp], 0
  00015	eb 04		 jmp	 SHORT $LN4@OnIsEmpty
$LN3@OnIsEmpty:
  00017	c6 45 ff 01	 mov	 BYTE PTR tv66[ebp], 1
$LN4@OnIsEmpty:
  0001b	8a 45 ff	 mov	 al, BYTE PTR tv66[ebp]

; 50   : }

  0001e	c9		 leave
  0001f	c3		 ret	 0
?OnIsEmpty@CGraphicThing@@MBE_NXZ ENDP			; CGraphicThing::OnIsEmpty
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?OnClear@CGraphicThing@@MAEXXZ
_TEXT	SEGMENT
tv131 = -36						; size = 4
tv79 = -32						; size = 4
tv130 = -28						; size = 4
tv78 = -24						; size = 4
$T1 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
?OnClear@CGraphicThing@@MAEXXZ PROC			; CGraphicThing::OnClear, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 29   : 	if (m_motions)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00010	74 4f		 je	 SHORT $LN2@OnClear

; 30   : 		delete [] m_motions;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  00018	89 45 f8	 mov	 DWORD PTR $T4[ebp], eax
  0001b	8b 45 f8	 mov	 eax, DWORD PTR $T4[ebp]
  0001e	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax
  00021	83 7d f4 00	 cmp	 DWORD PTR $T3[ebp], 0
  00025	74 36		 je	 SHORT $LN8@OnClear
  00027	8b 45 f4	 mov	 eax, DWORD PTR $T3[ebp]
  0002a	83 78 fc 00	 cmp	 DWORD PTR [eax-4], 0
  0002e	74 11		 je	 SHORT $LN6@OnClear
  00030	6a 03		 push	 3
  00032	8b 45 f8	 mov	 eax, DWORD PTR $T4[ebp]
  00035	8b 00		 mov	 eax, DWORD PTR [eax]
  00037	8b 4d f8	 mov	 ecx, DWORD PTR $T4[ebp]
  0003a	ff 10		 call	 DWORD PTR [eax]
  0003c	89 45 e8	 mov	 DWORD PTR tv78[ebp], eax
  0003f	eb 14		 jmp	 SHORT $LN7@OnClear
$LN6@OnClear:
  00041	6a 04		 push	 4
  00043	8b 45 f4	 mov	 eax, DWORD PTR $T3[ebp]
  00046	83 e8 04	 sub	 eax, 4
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0004f	59		 pop	 ecx
  00050	59		 pop	 ecx
  00051	83 65 e8 00	 and	 DWORD PTR tv78[ebp], 0
$LN7@OnClear:
  00055	8b 45 e8	 mov	 eax, DWORD PTR tv78[ebp]
  00058	89 45 e0	 mov	 DWORD PTR tv79[ebp], eax
  0005b	eb 04		 jmp	 SHORT $LN2@OnClear
$LN8@OnClear:
  0005d	83 65 e0 00	 and	 DWORD PTR tv79[ebp], 0
$LN2@OnClear:

; 31   : 
; 32   : 	if (m_models)

  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	83 78 38 00	 cmp	 DWORD PTR [eax+56], 0
  00068	74 4f		 je	 SHORT $LN3@OnClear

; 33   : 		delete [] m_models;

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00070	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00073	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00076	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  00079	83 7d ec 00	 cmp	 DWORD PTR $T1[ebp], 0
  0007d	74 36		 je	 SHORT $LN12@OnClear
  0007f	8b 45 ec	 mov	 eax, DWORD PTR $T1[ebp]
  00082	83 78 fc 00	 cmp	 DWORD PTR [eax-4], 0
  00086	74 11		 je	 SHORT $LN10@OnClear
  00088	6a 03		 push	 3
  0008a	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  0008d	8b 00		 mov	 eax, DWORD PTR [eax]
  0008f	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  00092	ff 10		 call	 DWORD PTR [eax]
  00094	89 45 e4	 mov	 DWORD PTR tv130[ebp], eax
  00097	eb 14		 jmp	 SHORT $LN11@OnClear
$LN10@OnClear:
  00099	6a 04		 push	 4
  0009b	8b 45 ec	 mov	 eax, DWORD PTR $T1[ebp]
  0009e	83 e8 04	 sub	 eax, 4
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  000a7	59		 pop	 ecx
  000a8	59		 pop	 ecx
  000a9	83 65 e4 00	 and	 DWORD PTR tv130[ebp], 0
$LN11@OnClear:
  000ad	8b 45 e4	 mov	 eax, DWORD PTR tv130[ebp]
  000b0	89 45 dc	 mov	 DWORD PTR tv131[ebp], eax
  000b3	eb 04		 jmp	 SHORT $LN3@OnClear
$LN12@OnClear:
  000b5	83 65 dc 00	 and	 DWORD PTR tv131[ebp], 0
$LN3@OnClear:

; 34   : 
; 35   : 	if (m_pgrnFile)

  000b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  000c0	74 0c		 je	 SHORT $LN4@OnClear

; 36   : 		GrannyFreeFile(m_pgrnFile);

  000c2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c5	ff 70 2c	 push	 DWORD PTR [eax+44]
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyFreeFile@4
$LN4@OnClear:

; 37   : 
; 38   : 	Initialize();

  000ce	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	e8 00 00 00 00	 call	 ?Initialize@CGraphicThing@@IAEXXZ ; CGraphicThing::Initialize

; 39   : }

  000d6	c9		 leave
  000d7	c3		 ret	 0
?OnClear@CGraphicThing@@MAEXXZ ENDP			; CGraphicThing::OnClear
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?OnLoad@CGraphicThing@@MAE_NHPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iSize$ = 8						; size = 4
_c_pvBuf$ = 12						; size = 4
?OnLoad@CGraphicThing@@MAE_NHPBX@Z PROC			; CGraphicThing::OnLoad, COMDAT
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 159  : 	if (!c_pvBuf)

  00007	83 7d 0c 00	 cmp	 DWORD PTR _c_pvBuf$[ebp], 0
  0000b	75 04		 jne	 SHORT $LN2@OnLoad

; 160  : 		return false;

  0000d	32 c0		 xor	 al, al
  0000f	eb 50		 jmp	 SHORT $LN1@OnLoad
$LN2@OnLoad:

; 161  : 
; 162  : 	m_pgrnFile = GrannyReadEntireFileFromMemory(iSize, (void *) c_pvBuf);

  00011	ff 75 0c	 push	 DWORD PTR _c_pvBuf$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _iSize$[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyReadEntireFileFromMemory@8
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 163  : 
; 164  : 	if (!m_pgrnFile)

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0002a	75 04		 jne	 SHORT $LN3@OnLoad

; 165  : 		return false;

  0002c	32 c0		 xor	 al, al
  0002e	eb 31		 jmp	 SHORT $LN1@OnLoad
$LN3@OnLoad:

; 166  : 
; 167  :     m_pgrnFileInfo = GrannyGetFileInfo(m_pgrnFile);

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	ff 70 2c	 push	 DWORD PTR [eax+44]
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetFileInfo@4
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 168  : 
; 169  : 	if (!m_pgrnFileInfo)

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  00049	75 04		 jne	 SHORT $LN4@OnLoad

; 170  : 		return false;

  0004b	32 c0		 xor	 al, al
  0004d	eb 12		 jmp	 SHORT $LN1@OnLoad
$LN4@OnLoad:

; 171  : 
; 172  : 	LoadModels();

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?LoadModels@CGraphicThing@@IAE_NXZ ; CGraphicThing::LoadModels

; 173  : 	LoadMotions();

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?LoadMotions@CGraphicThing@@IAE_NXZ ; CGraphicThing::LoadMotions

; 174  : 	return true;

  0005f	b0 01		 mov	 al, 1
$LN1@OnLoad:

; 175  : }

  00061	c9		 leave
  00062	c2 08 00	 ret	 8
?OnLoad@CGraphicThing@@MAE_NHPBX@Z ENDP			; CGraphicThing::OnLoad
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?LoadMotions@CGraphicThing@@IAE_NXZ
_TEXT	SEGMENT
$T2 = -40						; size = 4
_motionCount$ = -36					; size = 4
tv138 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
_m$5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?LoadMotions@CGraphicThing@@IAE_NXZ PROC		; CGraphicThing::LoadMotions, COMDAT
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadMotions@CGraphicThing@@IAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 227  : 	assert(m_pgrnFile != NULL);
; 228  : 	assert(m_motions == NULL);
; 229  : 
; 230  : 	if (m_pgrnFileInfo->AnimationCount <= 0)

  00029	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0002f	83 78 4c 00	 cmp	 DWORD PTR [eax+76], 0
  00033	7f 07		 jg	 SHORT $LN5@LoadMotion

; 231  : 		return false;

  00035	32 c0		 xor	 al, al
  00037	e9 cc 00 00 00	 jmp	 $LN1@LoadMotion
$LN5@LoadMotion:

; 232  : 	
; 233  : 	int motionCount = m_pgrnFileInfo->AnimationCount;

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00042	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  00045	89 45 dc	 mov	 DWORD PTR _motionCount$[ebp], eax

; 234  : 
; 235  : 	m_motions = new CGrannyMotion[motionCount];

  00048	8b 45 dc	 mov	 eax, DWORD PTR _motionCount$[ebp]
  0004b	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
  0004e	33 c9		 xor	 ecx, ecx
  00050	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00053	6a 08		 push	 8
  00055	5a		 pop	 edx
  00056	f7 e2		 mul	 edx
  00058	0f 90 c1	 seto	 cl
  0005b	f7 d9		 neg	 ecx
  0005d	0b c8		 or	 ecx, eax
  0005f	33 c0		 xor	 eax, eax
  00061	83 c1 04	 add	 ecx, 4
  00064	0f 92 c0	 setb	 al
  00067	f7 d8		 neg	 eax
  00069	0b c1		 or	 eax, ecx
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00071	59		 pop	 ecx
  00072	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
  00075	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00079	83 7d e8 00	 cmp	 DWORD PTR $T4[ebp], 0
  0007d	74 2e		 je	 SHORT $LN8@LoadMotion
  0007f	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00082	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  00085	89 08		 mov	 DWORD PTR [eax], ecx
  00087	68 00 00 00 00	 push	 OFFSET ??1CGrannyMotion@@UAE@XZ ; CGrannyMotion::~CGrannyMotion
  0008c	68 00 00 00 00	 push	 OFFSET ??0CGrannyMotion@@QAE@XZ ; CGrannyMotion::CGrannyMotion
  00091	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  00094	6a 08		 push	 8
  00096	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00099	83 c0 04	 add	 eax, 4
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  000a2	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  000a5	83 c0 04	 add	 eax, 4
  000a8	89 45 e0	 mov	 DWORD PTR tv138[ebp], eax
  000ab	eb 04		 jmp	 SHORT $LN9@LoadMotion
$LN8@LoadMotion:
  000ad	83 65 e0 00	 and	 DWORD PTR tv138[ebp], 0
$LN9@LoadMotion:
  000b1	8b 45 e0	 mov	 eax, DWORD PTR tv138[ebp]
  000b4	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
  000b7	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000bb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000be	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
  000c1	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 236  : 	
; 237  : 	for (int m = 0; m < motionCount; ++m)

  000c4	83 65 ec 00	 and	 DWORD PTR _m$5[ebp], 0
  000c8	eb 07		 jmp	 SHORT $LN4@LoadMotion
$LN2@LoadMotion:
  000ca	8b 45 ec	 mov	 eax, DWORD PTR _m$5[ebp]
  000cd	40		 inc	 eax
  000ce	89 45 ec	 mov	 DWORD PTR _m$5[ebp], eax
$LN4@LoadMotion:
  000d1	8b 45 ec	 mov	 eax, DWORD PTR _m$5[ebp]
  000d4	3b 45 dc	 cmp	 eax, DWORD PTR _motionCount$[ebp]
  000d7	7d 2d		 jge	 SHORT $LN3@LoadMotion

; 238  : 		if (!m_motions[m].BindGrannyAnimation(m_pgrnFileInfo->Animations[m]))

  000d9	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  000df	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  000e2	8b 4d ec	 mov	 ecx, DWORD PTR _m$5[ebp]
  000e5	ff 34 88	 push	 DWORD PTR [eax+ecx*4]
  000e8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  000ee	8b 4d ec	 mov	 ecx, DWORD PTR _m$5[ebp]
  000f1	8d 0c c8	 lea	 ecx, DWORD PTR [eax+ecx*8]
  000f4	e8 00 00 00 00	 call	 ?BindGrannyAnimation@CGrannyMotion@@QAE_NPAUgranny_animation@@@Z ; CGrannyMotion::BindGrannyAnimation
  000f9	0f b6 c0	 movzx	 eax, al
  000fc	85 c0		 test	 eax, eax
  000fe	75 04		 jne	 SHORT $LN6@LoadMotion

; 239  : 			return false;

  00100	32 c0		 xor	 al, al
  00102	eb 04		 jmp	 SHORT $LN1@LoadMotion
$LN6@LoadMotion:
  00104	eb c4		 jmp	 SHORT $LN2@LoadMotion
$LN3@LoadMotion:

; 240  : 
; 241  : 	return true;

  00106	b0 01		 mov	 al, 1
$LN1@LoadMotion:

; 242  : }

  00108	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0010b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00112	59		 pop	 ecx
  00113	5b		 pop	 ebx
  00114	c9		 leave
  00115	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadMotions@CGraphicThing@@IAE_NXZ$0:
  00000	33 db		 xor	 ebx, ebx
  00002	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00005	6a 08		 push	 8
  00007	59		 pop	 ecx
  00008	f7 e1		 mul	 ecx
  0000a	0f 90 c3	 seto	 bl
  0000d	f7 db		 neg	 ebx
  0000f	0b d8		 or	 ebx, eax
  00011	33 c0		 xor	 eax, eax
  00013	83 c3 04	 add	 ebx, 4
  00016	0f 92 c0	 setb	 al
  00019	f7 d8		 neg	 eax
  0001b	0b c3		 or	 eax, ebx
  0001d	50		 push	 eax
  0001e	ff 75 e8	 push	 DWORD PTR $T4[ebp]
  00021	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00026	59		 pop	 ecx
  00027	59		 pop	 ecx
  00028	c3		 ret	 0
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
__ehhandler$?LoadMotions@CGraphicThing@@IAE_NXZ:
  0002e	90		 npad	 1
  0002f	90		 npad	 1
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadMotions@CGraphicThing@@IAE_NXZ
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadMotions@CGraphicThing@@IAE_NXZ ENDP		; CGraphicThing::LoadMotions
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterlib\Resource.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?LoadModels@CGraphicThing@@IAE_NXZ
_TEXT	SEGMENT
_rModel$2 = -60						; size = 4
_pgrnModel$3 = -56					; size = 4
$T4 = -52						; size = 4
_sepPos$5 = -48						; size = 4
$T6 = -44						; size = 4
_modelCount$ = -40					; size = 4
tv161 = -36						; size = 4
$T7 = -32						; size = 4
$T8 = -28						; size = 4
_fileName$ = -24					; size = 4
_m$9 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?LoadModels@CGraphicThing@@IAE_NXZ PROC			; CGraphicThing::LoadModels, COMDAT
; _this$ = ecx

; 187  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadModels@CGraphicThing@@IAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 188  : 	assert(m_pgrnFile != NULL);
; 189  : 	assert(m_models == NULL);
; 190  : 	
; 191  : 	if (m_pgrnFileInfo->ModelCount <= 0)

  00029	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0002f	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00033	7f 07		 jg	 SHORT $LN12@LoadModels

; 192  : 		return false;	

  00035	32 c0		 xor	 al, al
  00037	e9 63 01 00 00	 jmp	 $LN1@LoadModels
$LN12@LoadModels:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterlib\Resource.h

; 47   : 		const std::string& GetFileNameString() const { return m_stFileName;	}

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	83 c0 0c	 add	 eax, 12			; 0000000cH
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp

; 195  : 	const std::string& fileName = GetFileNameString();

  00042	89 45 e8	 mov	 DWORD PTR _fileName$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3766 :         return _Mypair._Myval2._Mysize;

  00045	8b 45 e8	 mov	 eax, DWORD PTR _fileName$[ebp]
  00048	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004b	89 45 d4	 mov	 DWORD PTR $T6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp

; 198  : 	if (fileName.length() > 2 && fileName[1] != ':')

  0004e	83 7d d4 02	 cmp	 DWORD PTR $T6[ebp], 2
  00052	76 35		 jbe	 SHORT $LN6@LoadModels
  00054	6a 01		 push	 1
  00056	8b 4d e8	 mov	 ecx, DWORD PTR _fileName$[ebp]
  00059	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0005e	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00061	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  00064	74 23		 je	 SHORT $LN6@LoadModels

; 199  : 	{				
; 200  : 		int sepPos = fileName.rfind('\\');

  00066	6a ff		 push	 -1
  00068	6a 5c		 push	 92			; 0000005cH
  0006a	8b 4d e8	 mov	 ecx, DWORD PTR _fileName$[ebp]
  0006d	e8 00 00 00 00	 call	 ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
  00072	89 45 d0	 mov	 DWORD PTR _sepPos$5[ebp], eax

; 201  : 		gs_modelLocalPath.assign(fileName, 0, sepPos+1);

  00075	8b 45 d0	 mov	 eax, DWORD PTR _sepPos$5[ebp]
  00078	40		 inc	 eax
  00079	50		 push	 eax
  0007a	6a 00		 push	 0
  0007c	ff 75 e8	 push	 DWORD PTR _fileName$[ebp]
  0007f	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_modelLocalPath@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00084	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN6@LoadModels:

; 202  : 	}
; 203  : 	// END_OF_SUPPORT_LOCAL_TEXTURE
; 204  : 
; 205  : 	int modelCount = m_pgrnFileInfo->ModelCount;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0008f	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  00092	89 45 d8	 mov	 DWORD PTR _modelCount$[ebp], eax

; 206  : 
; 207  : 	m_models = new CGrannyModel[modelCount];

  00095	8b 45 d8	 mov	 eax, DWORD PTR _modelCount$[ebp]
  00098	89 45 e0	 mov	 DWORD PTR $T7[ebp], eax
  0009b	33 c9		 xor	 ecx, ecx
  0009d	8b 45 e0	 mov	 eax, DWORD PTR $T7[ebp]
  000a0	ba 90 00 00 00	 mov	 edx, 144		; 00000090H
  000a5	f7 e2		 mul	 edx
  000a7	0f 90 c1	 seto	 cl
  000aa	f7 d9		 neg	 ecx
  000ac	0b c8		 or	 ecx, eax
  000ae	33 c0		 xor	 eax, eax
  000b0	83 c1 04	 add	 ecx, 4
  000b3	0f 92 c0	 setb	 al
  000b6	f7 d8		 neg	 eax
  000b8	0b c1		 or	 eax, ecx
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000c0	59		 pop	 ecx
  000c1	89 45 e4	 mov	 DWORD PTR $T8[ebp], eax
  000c4	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  000c8	83 7d e4 00	 cmp	 DWORD PTR $T8[ebp], 0
  000cc	74 31		 je	 SHORT $LN9@LoadModels
  000ce	8b 45 e4	 mov	 eax, DWORD PTR $T8[ebp]
  000d1	8b 4d e0	 mov	 ecx, DWORD PTR $T7[ebp]
  000d4	89 08		 mov	 DWORD PTR [eax], ecx
  000d6	68 00 00 00 00	 push	 OFFSET ??1CGrannyModel@@UAE@XZ ; CGrannyModel::~CGrannyModel
  000db	68 00 00 00 00	 push	 OFFSET ??0CGrannyModel@@QAE@XZ ; CGrannyModel::CGrannyModel
  000e0	ff 75 e0	 push	 DWORD PTR $T7[ebp]
  000e3	68 90 00 00 00	 push	 144			; 00000090H
  000e8	8b 45 e4	 mov	 eax, DWORD PTR $T8[ebp]
  000eb	83 c0 04	 add	 eax, 4
  000ee	50		 push	 eax
  000ef	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  000f4	8b 45 e4	 mov	 eax, DWORD PTR $T8[ebp]
  000f7	83 c0 04	 add	 eax, 4
  000fa	89 45 dc	 mov	 DWORD PTR tv161[ebp], eax
  000fd	eb 04		 jmp	 SHORT $LN10@LoadModels
$LN9@LoadModels:
  000ff	83 65 dc 00	 and	 DWORD PTR tv161[ebp], 0
$LN10@LoadModels:
  00103	8b 45 dc	 mov	 eax, DWORD PTR tv161[ebp]
  00106	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax
  00109	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0010d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00110	8b 4d cc	 mov	 ecx, DWORD PTR $T4[ebp]
  00113	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 208  : 
; 209  : 	for (int m = 0; m < modelCount; ++m)

  00116	83 65 ec 00	 and	 DWORD PTR _m$9[ebp], 0
  0011a	eb 07		 jmp	 SHORT $LN4@LoadModels
$LN2@LoadModels:
  0011c	8b 45 ec	 mov	 eax, DWORD PTR _m$9[ebp]
  0011f	40		 inc	 eax
  00120	89 45 ec	 mov	 DWORD PTR _m$9[ebp], eax
$LN4@LoadModels:
  00123	8b 45 ec	 mov	 eax, DWORD PTR _m$9[ebp]
  00126	3b 45 d8	 cmp	 eax, DWORD PTR _modelCount$[ebp]
  00129	7d 3a		 jge	 SHORT $LN3@LoadModels

; 210  : 	{
; 211  : 		CGrannyModel & rModel = m_models[m];

  0012b	69 45 ec 90 00
	00 00		 imul	 eax, DWORD PTR _m$9[ebp], 144
  00132	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	03 41 38	 add	 eax, DWORD PTR [ecx+56]
  00138	89 45 c4	 mov	 DWORD PTR _rModel$2[ebp], eax

; 212  : 		granny_model * pgrnModel = m_pgrnFileInfo->Models[m];

  0013b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0013e	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00141	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  00144	8b 4d ec	 mov	 ecx, DWORD PTR _m$9[ebp]
  00147	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0014a	89 45 c8	 mov	 DWORD PTR _pgrnModel$3[ebp], eax

; 213  : 
; 214  : 		if (!rModel.CreateFromGrannyModelPointer(pgrnModel))

  0014d	ff 75 c8	 push	 DWORD PTR _pgrnModel$3[ebp]
  00150	8b 4d c4	 mov	 ecx, DWORD PTR _rModel$2[ebp]
  00153	e8 00 00 00 00	 call	 ?CreateFromGrannyModelPointer@CGrannyModel@@QAE_NPAUgranny_model@@@Z ; CGrannyModel::CreateFromGrannyModelPointer
  00158	0f b6 c0	 movzx	 eax, al
  0015b	85 c0		 test	 eax, eax
  0015d	75 04		 jne	 SHORT $LN7@LoadModels

; 215  : 			return false;

  0015f	32 c0		 xor	 al, al
  00161	eb 3c		 jmp	 SHORT $LN1@LoadModels
$LN7@LoadModels:

; 216  : 	}

  00163	eb b7		 jmp	 SHORT $LN2@LoadModels
$LN3@LoadModels:

; 217  : 
; 218  : 	GrannyFreeFileSection(m_pgrnFile, GrannyStandardRigidVertexSection);

  00165	6a 01		 push	 1
  00167	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0016a	ff 70 2c	 push	 DWORD PTR [eax+44]
  0016d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyFreeFileSection@8

; 219  : 	GrannyFreeFileSection(m_pgrnFile, GrannyStandardRigidIndexSection);

  00173	6a 02		 push	 2
  00175	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00178	ff 70 2c	 push	 DWORD PTR [eax+44]
  0017b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyFreeFileSection@8

; 220  : 	GrannyFreeFileSection(m_pgrnFile, GrannyStandardDeformableIndexSection);

  00181	6a 04		 push	 4
  00183	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00186	ff 70 2c	 push	 DWORD PTR [eax+44]
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyFreeFileSection@8

; 221  : 	GrannyFreeFileSection(m_pgrnFile, GrannyStandardTextureSection);

  0018f	6a 05		 push	 5
  00191	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00194	ff 70 2c	 push	 DWORD PTR [eax+44]
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyFreeFileSection@8

; 222  : 	return true;

  0019d	b0 01		 mov	 al, 1
$LN1@LoadModels:

; 223  : }

  0019f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a9	59		 pop	 ecx
  001aa	5b		 pop	 ebx
  001ab	c9		 leave
  001ac	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadModels@CGraphicThing@@IAE_NXZ$0:
  00000	33 db		 xor	 ebx, ebx
  00002	8b 45 e0	 mov	 eax, DWORD PTR $T7[ebp]
  00005	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0000a	f7 e1		 mul	 ecx
  0000c	0f 90 c3	 seto	 bl
  0000f	f7 db		 neg	 ebx
  00011	0b d8		 or	 ebx, eax
  00013	33 c0		 xor	 eax, eax
  00015	83 c3 04	 add	 ebx, 4
  00018	0f 92 c0	 setb	 al
  0001b	f7 d8		 neg	 eax
  0001d	0b c3		 or	 eax, ebx
  0001f	50		 push	 eax
  00020	ff 75 e4	 push	 DWORD PTR $T8[ebp]
  00023	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00028	59		 pop	 ecx
  00029	59		 pop	 ecx
  0002a	c3		 ret	 0
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
  0002e	cc		 int	 3
  0002f	cc		 int	 3
__ehhandler$?LoadModels@CGraphicThing@@IAE_NXZ:
  00030	90		 npad	 1
  00031	90		 npad	 1
  00032	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00036	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00039	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  0003c	33 c8		 xor	 ecx, eax
  0003e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00043	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadModels@CGraphicThing@@IAE_NXZ
  00048	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadModels@CGraphicThing@@IAE_NXZ ENDP			; CGraphicThing::LoadModels
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?Initialize@CGraphicThing@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Initialize@CGraphicThing@@IAEXXZ PROC			; CGraphicThing::Initialize, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : 	m_pgrnFile = NULL;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 60 2c 00	 and	 DWORD PTR [eax+44], 0

; 20   : 	m_pgrnFileInfo = NULL;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 60 30 00	 and	 DWORD PTR [eax+48], 0

; 21   : 	m_pgrnAni = NULL;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 60 34 00	 and	 DWORD PTR [eax+52], 0

; 22   : 
; 23   : 	m_models = NULL;

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 60 38 00	 and	 DWORD PTR [eax+56], 0

; 24   : 	m_motions = NULL;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	83 60 3c 00	 and	 DWORD PTR [eax+60], 0

; 25   : }

  0002a	c9		 leave
  0002b	c3		 ret	 0
?Initialize@CGraphicThing@@IAEXXZ ENDP			; CGraphicThing::Initialize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?GetMotionCount@CGraphicThing@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMotionCount@CGraphicThing@@QBEHXZ PROC		; CGraphicThing::GetMotionCount, COMDAT
; _this$ = ecx

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 151  : 	if (!m_pgrnFileInfo)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0000e	75 04		 jne	 SHORT $LN2@GetMotionC

; 152  : 		return 0;

  00010	33 c0		 xor	 eax, eax
  00012	eb 09		 jmp	 SHORT $LN1@GetMotionC
$LN2@GetMotionC:

; 153  : 
; 154  : 	return (m_pgrnFileInfo->AnimationCount);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0001a	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
$LN1@GetMotionC:

; 155  : }

  0001d	c9		 leave
  0001e	c3		 ret	 0
?GetMotionCount@CGraphicThing@@QBEHXZ ENDP		; CGraphicThing::GetMotionCount
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?GetMotionPointer@CGraphicThing@@QAEPAVCGrannyMotion@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMotion$ = 8						; size = 4
?GetMotionPointer@CGraphicThing@@QAEPAVCGrannyMotion@@H@Z PROC ; CGraphicThing::GetMotionPointer, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 132  : 	assert(CheckMotionIndex(iMotion));
; 133  : 
; 134  : 	if (iMotion >= m_pgrnFileInfo->AnimationCount)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _iMotion$[ebp]
  00010	3b 48 4c	 cmp	 ecx, DWORD PTR [eax+76]
  00013	7c 04		 jl	 SHORT $LN2@GetMotionP

; 135  : 		return NULL;

  00015	33 c0		 xor	 eax, eax
  00017	eb 0c		 jmp	 SHORT $LN1@GetMotionP
$LN2@GetMotionP:

; 136  : 
; 137  : 	assert(m_motions != NULL);
; 138  : 	return (m_motions + iMotion);

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _iMotion$[ebp]
  00022	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
$LN1@GetMotionP:

; 139  : }

  00025	c9		 leave
  00026	c2 04 00	 ret	 4
?GetMotionPointer@CGraphicThing@@QAEPAVCGrannyMotion@@H@Z ENDP ; CGraphicThing::GetMotionPointer
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?CheckMotionIndex@CGraphicThing@@QBE_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iMotion$ = 8						; size = 4
?CheckMotionIndex@CGraphicThing@@QBE_NH@Z PROC		; CGraphicThing::CheckMotionIndex, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 	// Temporary
; 108  : 	if (!m_pgrnFileInfo)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0000e	75 04		 jne	 SHORT $LN2@CheckMotio

; 109  : 		return false;

  00010	32 c0		 xor	 al, al
  00012	eb 1e		 jmp	 SHORT $LN1@CheckMotio
$LN2@CheckMotio:

; 110  : 	// Temporary
; 111  : 
; 112  : 	assert(m_pgrnFileInfo != NULL);
; 113  : 
; 114  : 	if (iMotion < 0)

  00014	83 7d 08 00	 cmp	 DWORD PTR _iMotion$[ebp], 0
  00018	7d 04		 jge	 SHORT $LN3@CheckMotio

; 115  : 		return false;

  0001a	32 c0		 xor	 al, al
  0001c	eb 14		 jmp	 SHORT $LN1@CheckMotio
$LN3@CheckMotio:

; 116  : 	
; 117  : 	if (iMotion >= m_pgrnFileInfo->AnimationCount)

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _iMotion$[ebp]
  00027	3b 48 4c	 cmp	 ecx, DWORD PTR [eax+76]
  0002a	7c 04		 jl	 SHORT $LN4@CheckMotio

; 118  : 		return false;

  0002c	32 c0		 xor	 al, al
  0002e	eb 02		 jmp	 SHORT $LN1@CheckMotio
$LN4@CheckMotio:

; 119  : 
; 120  : 	return true;

  00030	b0 01		 mov	 al, 1
$LN1@CheckMotio:

; 121  : }

  00032	c9		 leave
  00033	c2 04 00	 ret	 4
?CheckMotionIndex@CGraphicThing@@QBE_NH@Z ENDP		; CGraphicThing::CheckMotionIndex
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?GetModelCount@CGraphicThing@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetModelCount@CGraphicThing@@QBEHXZ PROC		; CGraphicThing::GetModelCount, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 143  : 	if (!m_pgrnFileInfo)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0000e	75 04		 jne	 SHORT $LN2@GetModelCo

; 144  : 		return 0;

  00010	33 c0		 xor	 eax, eax
  00012	eb 09		 jmp	 SHORT $LN1@GetModelCo
$LN2@GetModelCo:

; 145  : 
; 146  : 	return (m_pgrnFileInfo->ModelCount);

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  0001a	8b 40 3c	 mov	 eax, DWORD PTR [eax+60]
$LN1@GetModelCo:

; 147  : }

  0001d	c9		 leave
  0001e	c3		 ret	 0
?GetModelCount@CGraphicThing@@QBEHXZ ENDP		; CGraphicThing::GetModelCount
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?GetModelPointer@CGraphicThing@@QAEPAVCGrannyModel@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iModel$ = 8						; size = 4
?GetModelPointer@CGraphicThing@@QAEPAVCGrannyModel@@H@Z PROC ; CGraphicThing::GetModelPointer, COMDAT
; _this$ = ecx

; 124  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 125  : 	assert(CheckModelIndex(iModel));
; 126  : 	assert(m_models != NULL);
; 127  : 	return m_models + iModel;

  00007	69 45 08 90 00
	00 00		 imul	 eax, DWORD PTR _iModel$[ebp], 144
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	03 41 38	 add	 eax, DWORD PTR [ecx+56]

; 128  : }

  00014	c9		 leave
  00015	c2 04 00	 ret	 4
?GetModelPointer@CGraphicThing@@QAEPAVCGrannyModel@@H@Z ENDP ; CGraphicThing::GetModelPointer
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?CheckModelIndex@CGraphicThing@@QBE_NH@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_iModel$ = 8						; size = 4
?CheckModelIndex@CGraphicThing@@QBE_NH@Z PROC		; CGraphicThing::CheckModelIndex, COMDAT
; _this$ = ecx

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 88   : 	if (!m_pgrnFileInfo)

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  0000f	75 21		 jne	 SHORT $LN2@CheckModel
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3752 :         return _Mypair._Myval2._Myptr();

  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00017	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001c	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp

; 90   : 		Tracef("m_pgrnFileInfo == NULL: %s\n", GetFileName());

  0001f	ff 75 f8	 push	 DWORD PTR $T1[ebp]
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@CNDJBDNK@m_pgrnFileInfo?5?$DN?$DN?5NULL?3?5?$CFs?6@
  00027	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  0002c	59		 pop	 ecx
  0002d	59		 pop	 ecx

; 91   : 		return false;

  0002e	32 c0		 xor	 al, al
  00030	eb 1e		 jmp	 SHORT $LN1@CheckModel
$LN2@CheckModel:

; 92   : 	}
; 93   : 
; 94   : 	assert(m_pgrnFileInfo != NULL);
; 95   : 
; 96   : 	if (iModel < 0)

  00032	83 7d 08 00	 cmp	 DWORD PTR _iModel$[ebp], 0
  00036	7d 04		 jge	 SHORT $LN3@CheckModel

; 97   : 		return false;

  00038	32 c0		 xor	 al, al
  0003a	eb 14		 jmp	 SHORT $LN1@CheckModel
$LN3@CheckModel:

; 98   : 
; 99   : 	if (iModel >= m_pgrnFileInfo->ModelCount)

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00042	8b 4d 08	 mov	 ecx, DWORD PTR _iModel$[ebp]
  00045	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  00048	7c 04		 jl	 SHORT $LN4@CheckModel

; 100  : 		return false;

  0004a	32 c0		 xor	 al, al
  0004c	eb 02		 jmp	 SHORT $LN1@CheckModel
$LN4@CheckModel:

; 101  : 
; 102  : 	return true;

  0004e	b0 01		 mov	 al, 1
$LN1@CheckModel:

; 103  : }

  00050	c9		 leave
  00051	c2 04 00	 ret	 4
?CheckModelIndex@CGraphicThing@@QBE_NH@Z ENDP		; CGraphicThing::CheckModelIndex
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?DestroyDeviceObjects@CGraphicThing@@UAEXXZ
_TEXT	SEGMENT
_rModel$1 = -12						; size = 4
_this$ = -8						; size = 4
_m$2 = -4						; size = 4
?DestroyDeviceObjects@CGraphicThing@@UAEXXZ PROC	; CGraphicThing::DestroyDeviceObjects, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 76   : 	if (!m_pgrnFileInfo)

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  00010	75 02		 jne	 SHORT $LN5@DestroyDev

; 77   : 		return;

  00012	eb 35		 jmp	 SHORT $LN1@DestroyDev
$LN5@DestroyDev:

; 78   : 
; 79   : 	for (int m = 0; m < m_pgrnFileInfo->ModelCount; ++m)

  00014	83 65 fc 00	 and	 DWORD PTR _m$2[ebp], 0
  00018	eb 07		 jmp	 SHORT $LN4@DestroyDev
$LN2@DestroyDev:
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _m$2[ebp]
  0001d	40		 inc	 eax
  0001e	89 45 fc	 mov	 DWORD PTR _m$2[ebp], eax
$LN4@DestroyDev:
  00021	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _m$2[ebp]
  0002a	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  0002d	7d 1a		 jge	 SHORT $LN1@DestroyDev

; 80   : 	{
; 81   : 		CGrannyModel & rModel = m_models[m];

  0002f	69 45 fc 90 00
	00 00		 imul	 eax, DWORD PTR _m$2[ebp], 144
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	03 41 38	 add	 eax, DWORD PTR [ecx+56]
  0003c	89 45 f4	 mov	 DWORD PTR _rModel$1[ebp], eax

; 82   : 		rModel.DestroyDeviceObjects();

  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _rModel$1[ebp]
  00042	e8 00 00 00 00	 call	 ?DestroyDeviceObjects@CGrannyModel@@QAEXXZ ; CGrannyModel::DestroyDeviceObjects

; 83   : 	}

  00047	eb d1		 jmp	 SHORT $LN2@DestroyDev
$LN1@DestroyDev:

; 84   : }

  00049	c9		 leave
  0004a	c3		 ret	 0
?DestroyDeviceObjects@CGraphicThing@@UAEXXZ ENDP	; CGraphicThing::DestroyDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?CreateDeviceObjects@CGraphicThing@@UAE_NXZ
_TEXT	SEGMENT
_rModel$1 = -12						; size = 4
_this$ = -8						; size = 4
_m$2 = -4						; size = 4
?CreateDeviceObjects@CGraphicThing@@UAE_NXZ PROC	; CGraphicThing::CreateDeviceObjects, COMDAT
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 	if (!m_pgrnFileInfo)

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 30 00	 cmp	 DWORD PTR [eax+48], 0
  00010	75 04		 jne	 SHORT $LN5@CreateDevi

; 63   : 		return true;

  00012	b0 01		 mov	 al, 1
  00014	eb 37		 jmp	 SHORT $LN1@CreateDevi
$LN5@CreateDevi:

; 64   : 	
; 65   : 	for (int m = 0; m < m_pgrnFileInfo->ModelCount; ++m)

  00016	83 65 fc 00	 and	 DWORD PTR _m$2[ebp], 0
  0001a	eb 07		 jmp	 SHORT $LN4@CreateDevi
$LN2@CreateDevi:
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _m$2[ebp]
  0001f	40		 inc	 eax
  00020	89 45 fc	 mov	 DWORD PTR _m$2[ebp], eax
$LN4@CreateDevi:
  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _m$2[ebp]
  0002c	3b 48 3c	 cmp	 ecx, DWORD PTR [eax+60]
  0002f	7d 1a		 jge	 SHORT $LN3@CreateDevi

; 66   : 	{
; 67   : 		CGrannyModel & rModel = m_models[m];

  00031	69 45 fc 90 00
	00 00		 imul	 eax, DWORD PTR _m$2[ebp], 144
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	03 41 38	 add	 eax, DWORD PTR [ecx+56]
  0003e	89 45 f4	 mov	 DWORD PTR _rModel$1[ebp], eax

; 68   : 		rModel.CreateDeviceObjects();

  00041	8b 4d f4	 mov	 ecx, DWORD PTR _rModel$1[ebp]
  00044	e8 00 00 00 00	 call	 ?CreateDeviceObjects@CGrannyModel@@QAE_NXZ ; CGrannyModel::CreateDeviceObjects

; 69   : 	}

  00049	eb d1		 jmp	 SHORT $LN2@CreateDevi
$LN3@CreateDevi:

; 70   : 
; 71   : 	return true;

  0004b	b0 01		 mov	 al, 1
$LN1@CreateDevi:

; 72   : }

  0004d	c9		 leave
  0004e	c3		 ret	 0
?CreateDeviceObjects@CGraphicThing@@UAE_NXZ ENDP	; CGraphicThing::CreateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ??1CGraphicThing@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CGraphicThing@@UAE@XZ PROC				; CGraphicThing::~CGraphicThing, COMDAT
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicThing@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGraphicThing@@6B@

; 13   : 	//OnClear();
; 14   : 	Clear();

  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?Clear@CResource@@QAEXXZ ; CResource::Clear

; 15   : }

  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??1CResource@@UAE@XZ	; CResource::~CResource
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	c9		 leave
  0004b	c3		 ret	 0
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
  0004f	cc		 int	 3
  00050	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicThing@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicThing@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicThing@@UAE@XZ ENDP				; CGraphicThing::~CGraphicThing
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ??0CGraphicThing@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
??0CGraphicThing@@QAE@PBD@Z PROC			; CGraphicThing::CGraphicThing, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicThing@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 6    : CGraphicThing::CGraphicThing(const char* c_szFileName) : CResource(c_szFileName)

  00026	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ??0CResource@@QAE@PBD@Z	; CResource::CResource
  00031	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 7    : {

  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGraphicThing@@6B@

; 8    : 	Initialize();	

  0003e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ?Initialize@CGraphicThing@@IAEXXZ ; CGraphicThing::Initialize

; 9    : }

  00046	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	c9		 leave
  00059	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicThing@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CResource@@UAE@XZ	; CResource::~CResource
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CGraphicThing@@QAE@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicThing@@QAE@PBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicThing@@QAE@PBD@Z ENDP			; CGraphicThing::CGraphicThing
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\Thing.cpp
;	COMDAT ?Type@CGraphicThing@@SAKXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Type@CGraphicThing@@SAKXZ PROC				; CGraphicThing::Type, COMDAT

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Type@CGraphicThing@@SAKXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 43   : 	static TType s_type = StringToType("CGraphicThing");

  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  00027	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  0002e	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$TSS0@?1??Type@CGraphicThing@@SAKXZ@4HA
  00037	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR __Init_thread_epoch[eax]
  0003d	7e 37		 jle	 SHORT $LN2@Type
  0003f	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicThing@@SAKXZ@4HA
  00044	e8 00 00 00 00	 call	 __Init_thread_header
  00049	59		 pop	 ecx
  0004a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Type@CGraphicThing@@SAKXZ@4HA, -1
  00051	75 23		 jne	 SHORT $LN2@Type
  00053	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0O@POMHALBA@CGraphicThing@
  0005c	e8 00 00 00 00	 call	 ?StringToType@CResource@@SAKPBD@Z ; CResource::StringToType
  00061	59		 pop	 ecx
  00062	a3 00 00 00 00	 mov	 DWORD PTR ?s_type@?1??Type@CGraphicThing@@SAKXZ@4KA, eax
  00067	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0006b	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicThing@@SAKXZ@4HA
  00070	e8 00 00 00 00	 call	 __Init_thread_footer
  00075	59		 pop	 ecx
$LN2@Type:

; 44   : 	return s_type;

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_type@?1??Type@CGraphicThing@@SAKXZ@4KA

; 45   : }

  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	c9		 leave
  00087	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Type@CGraphicThing@@SAKXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicThing@@SAKXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Type@CGraphicThing@@SAKXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Type@CGraphicThing@@SAKXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Type@CGraphicThing@@SAKXZ ENDP				; CGraphicThing::Type
; Function compile flags: /Odspy
;	COMDAT ??_ECGrannyMotion@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECGrannyMotion@@UAEPAXI@Z PROC			; CGrannyMotion::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECGrannyMotion@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00029	83 e0 02	 and	 eax, 2
  0002c	74 41		 je	 SHORT $LN2@vector
  0002e	68 00 00 00 00	 push	 OFFSET ??1CGrannyMotion@@UAE@XZ ; CGrannyMotion::~CGrannyMotion
  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	ff 70 fc	 push	 DWORD PTR [eax-4]
  00039	6a 08		 push	 8
  0003b	ff 75 f0	 push	 DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00043	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00046	83 e0 01	 and	 eax, 1
  00049	74 1c		 je	 SHORT $LN3@vector
  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
  00051	8d 04 c5 04 00
	00 00		 lea	 eax, DWORD PTR [eax*8+4]
  00058	50		 push	 eax
  00059	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	83 e8 04	 sub	 eax, 4
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00065	59		 pop	 ecx
  00066	59		 pop	 ecx
$LN3@vector:
  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	83 e8 04	 sub	 eax, 4
  0006d	eb 1f		 jmp	 SHORT $LN5@vector
$LN2@vector:
  0006f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	e8 00 00 00 00	 call	 ??1CGrannyMotion@@UAE@XZ ; CGrannyMotion::~CGrannyMotion
  00077	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0007a	83 e0 01	 and	 eax, 1
  0007d	74 0c		 je	 SHORT $LN4@vector
  0007f	6a 08		 push	 8
  00081	ff 75 f0	 push	 DWORD PTR _this$[ebp]
  00084	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00089	59		 pop	 ecx
  0008a	59		 pop	 ecx
$LN4@vector:
  0008b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  0008e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00098	59		 pop	 ecx
  00099	c9		 leave
  0009a	c2 04 00	 ret	 4
  0009d	cc		 int	 3
  0009e	cc		 int	 3
  0009f	cc		 int	 3
  000a0	cc		 int	 3
  000a1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECGrannyMotion@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECGrannyMotion@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECGrannyMotion@@UAEPAXI@Z ENDP			; CGrannyMotion::`vector deleting destructor'
; Function compile flags: /Odspy
;	COMDAT ??_ECGrannyModel@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ECGrannyModel@@UAEPAXI@Z PROC			; CGrannyModel::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ECGrannyModel@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00029	83 e0 02	 and	 eax, 2
  0002c	74 44		 je	 SHORT $LN2@vector
  0002e	68 00 00 00 00	 push	 OFFSET ??1CGrannyModel@@UAE@XZ ; CGrannyModel::~CGrannyModel
  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	ff 70 fc	 push	 DWORD PTR [eax-4]
  00039	68 90 00 00 00	 push	 144			; 00000090H
  0003e	ff 75 f0	 push	 DWORD PTR _this$[ebp]
  00041	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00046	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00049	83 e0 01	 and	 eax, 1
  0004c	74 1c		 je	 SHORT $LN3@vector
  0004e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00051	69 40 fc 90 00
	00 00		 imul	 eax, DWORD PTR [eax-4], 144
  00058	83 c0 04	 add	 eax, 4
  0005b	50		 push	 eax
  0005c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	83 e8 04	 sub	 eax, 4
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00068	59		 pop	 ecx
  00069	59		 pop	 ecx
$LN3@vector:
  0006a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	83 e8 04	 sub	 eax, 4
  00070	eb 22		 jmp	 SHORT $LN5@vector
$LN2@vector:
  00072	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ??1CGrannyModel@@UAE@XZ	; CGrannyModel::~CGrannyModel
  0007a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0007d	83 e0 01	 and	 eax, 1
  00080	74 0f		 je	 SHORT $LN4@vector
  00082	68 90 00 00 00	 push	 144			; 00000090H
  00087	ff 75 f0	 push	 DWORD PTR _this$[ebp]
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008f	59		 pop	 ecx
  00090	59		 pop	 ecx
$LN4@vector:
  00091	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@vector:
  00094	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00097	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009e	59		 pop	 ecx
  0009f	c9		 leave
  000a0	c2 04 00	 ret	 4
  000a3	cc		 int	 3
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
  000a7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ECGrannyModel@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ECGrannyModel@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ECGrannyModel@@UAEPAXI@Z ENDP			; CGrannyModel::`vector deleting destructor'
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Al$1 = -28						; size = 4
__Ptr$2 = -24						; size = 4
__Count$ = -20						; size = 4
$T3 = -16						; size = 4
tv68 = -12						; size = 4
_this$ = -8						; size = 4
$T4 = -2						; size = 1
$T5 = -1						; size = 1
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4383 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2227 :         return _BUF_SIZE <= _Myres;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00010	72 09		 jb	 SHORT $LN9@Tidy_deall
  00012	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00019	eb 04		 jmp	 SHORT $LN10@Tidy_deall
$LN9@Tidy_deall:
  0001b	83 65 f4 00	 and	 DWORD PTR tv68[ebp], 0
$LN10@Tidy_deall:
  0001f	8a 45 f4	 mov	 al, BYTE PTR tv68[ebp]
  00022	88 45 ff	 mov	 BYTE PTR $T5[ebp], al

; 4384 :         _Mypair._Myval2._Orphan_all();
; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00025	0f b6 45 ff	 movzx	 eax, BYTE PTR $T5[ebp]
  00029	85 c0		 test	 eax, eax
  0002b	74 34		 je	 SHORT $LN2@Tidy_deall

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	89 45 e8	 mov	 DWORD PTR __Ptr$2[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00038	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  0003b	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0003e	89 45 e4	 mov	 DWORD PTR __Al$1[ebp], eax

; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00041	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  00049	59		 pop	 ecx

; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00050	40		 inc	 eax
  00051	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	ff 75 ec	 push	 DWORD PTR __Count$[ebp]
  00057	ff 75 e8	 push	 DWORD PTR __Ptr$2[ebp]
  0005a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN2@Tidy_deall:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  00061	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00072	c6 45 fe 00	 mov	 BYTE PTR $T4[ebp], 0
  00076	33 c0		 xor	 eax, eax
  00078	40		 inc	 eax
  00079	6b c0 00	 imul	 eax, eax, 0

; 428  :         _Left = _Right;

  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	8a 55 fe	 mov	 dl, BYTE PTR $T4[ebp]
  00082	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4396 :     }

  00085	c9		 leave
  00086	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4376 :     void _Tidy_init() noexcept { // initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4377 :         _Mypair._Myval2._Mysize = 0;

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 4378 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4379 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4380 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00019	c6 45 ff 00	 mov	 BYTE PTR $T1[ebp], 0
  0001d	33 c0		 xor	 eax, eax
  0001f	40		 inc	 eax
  00020	6b c0 00	 imul	 eax, eax, 0

; 428  :         _Left = _Right;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8a 55 ff	 mov	 dl, BYTE PTR $T1[ebp]
  00029	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4381 :     }

  0002c	c9		 leave
  0002d	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
tv93 = -28						; size = 4
$T3 = -24						; size = 4
_this$ = -20						; size = 4
$T4 = -16						; size = 4
__Masked$5 = -12					; size = 4
__Old$ = -8						; size = 4
__Max$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4297 :     _NODISCARD size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	89 45 fc	 mov	 DWORD PTR __Max$[ebp], eax
  00014	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001a	89 45 f8	 mov	 DWORD PTR __Old$[ebp], eax

; 4285 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0001d	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00020	83 c8 0f	 or	 eax, 15			; 0000000fH
  00023	89 45 f4	 mov	 DWORD PTR __Masked$5[ebp], eax

; 4286 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00026	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  00029	3b 45 fc	 cmp	 eax, DWORD PTR __Max$[ebp]
  0002c	76 08		 jbe	 SHORT $LN29@Calculate_

; 4287 :             return _Max;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00031	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  00034	eb 4c		 jmp	 SHORT $LN31@Calculate_
$LN29@Calculate_:

; 4288 :         }
; 4289 : 
; 4290 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00036	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00039	d1 e8		 shr	 eax, 1
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __Max$[ebp]
  0003e	2b c8		 sub	 ecx, eax
  00040	39 4d f8	 cmp	 DWORD PTR __Old$[ebp], ecx
  00043	76 08		 jbe	 SHORT $LN30@Calculate_

; 4291 :             return _Max;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00048	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  0004b	eb 35		 jmp	 SHORT $LN31@Calculate_
$LN30@Calculate_:

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00050	d1 e8		 shr	 eax, 1
  00052	03 45 f8	 add	 eax, DWORD PTR __Old$[ebp]
  00055	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  0005b	3b 45 e8	 cmp	 eax, DWORD PTR $T3[ebp]
  0005e	73 08		 jae	 SHORT $LN35@Calculate_
  00060	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00063	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
  00066	eb 06		 jmp	 SHORT $LN36@Calculate_
$LN35@Calculate_:
  00068	8d 45 f4	 lea	 eax, DWORD PTR __Masked$5[ebp]
  0006b	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
$LN36@Calculate_:
  0006e	8b 45 e4	 mov	 eax, DWORD PTR tv93[ebp]
  00071	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00074	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00077	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0007a	8b 45 dc	 mov	 eax, DWORD PTR $T1[ebp]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
$LN31@Calculate_:

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00082	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]

; 4299 :     }

  00085	c9		 leave
  00086	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
$T2 = -68						; size = 4
__Ptr$ = -64						; size = 4
$T3 = -60						; size = 4
tv135 = -56						; size = 4
tv133 = -52						; size = 4
__Start_at$ = -48					; size = 4
$T4 = -44						; size = 4
__Hay_size$ = -40					; size = 4
_this$ = -36						; size = 4
__Result$5 = -32					; size = 4
tv88 = -28						; size = 4
$T6 = -24						; size = 4
_this$ = -20						; size = 4
__Match_try$7 = -16					; size = 4
$T8 = -9						; size = 1
__Ch$ = -8						; size = 1
$T9 = -1						; size = 1
__Ch$ = 8						; size = 1
__Off$ = 12						; size = 4
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind, COMDAT
; _this$ = ecx

; 4005 :     _NODISCARD size_type rfind(const _Elem _Ch, const size_type _Off = npos) const noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 4006 :         // look for _Ch before _Off
; 4007 :         return static_cast<size_type>(

  00009	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 2218 :         const value_type* _Result = _Bx._Buf;

  0000f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00012	89 45 e0	 mov	 DWORD PTR __Result$5[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  00015	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0001c	72 09		 jb	 SHORT $LN9@rfind
  0001e	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  00025	eb 04		 jmp	 SHORT $LN10@rfind
$LN9@rfind:
  00027	83 65 e4 00	 and	 DWORD PTR tv88[ebp], 0
$LN10@rfind:
  0002b	8a 45 e4	 mov	 al, BYTE PTR tv88[ebp]
  0002e	88 45 ff	 mov	 BYTE PTR $T9[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  00031	0f b6 45 ff	 movzx	 eax, BYTE PTR $T9[ebp]
  00035	85 c0		 test	 eax, eax
  00037	74 0e		 je	 SHORT $LN4@rfind

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00039	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
  0003e	89 45 c0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00041	8b 45 c0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00044	89 45 e0	 mov	 DWORD PTR __Result$5[ebp], eax
$LN4@rfind:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  00047	8b 45 e0	 mov	 eax, DWORD PTR __Result$5[ebp]
  0004a	89 45 e8	 mov	 DWORD PTR $T6[ebp], eax

; 4006 :         // look for _Ch before _Off
; 4007 :         return static_cast<size_type>(

  0004d	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]
  00050	88 45 f8	 mov	 BYTE PTR __Ch$[ebp], al
  00053	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00056	89 45 d0	 mov	 DWORD PTR __Start_at$[ebp], eax
  00059	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0005f	89 45 d8	 mov	 DWORD PTR __Hay_size$[ebp], eax

; 661  :     if (_Hay_size != 0) { // room for match, look for it

  00062	83 7d d8 00	 cmp	 DWORD PTR __Hay_size$[ebp], 0
  00066	74 7d		 je	 SHORT $LN19@rfind

; 662  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00068	8b 45 d8	 mov	 eax, DWORD PTR __Hay_size$[ebp]
  0006b	48		 dec	 eax
  0006c	89 45 d4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0006f	8b 45 d4	 mov	 eax, DWORD PTR $T4[ebp]
  00072	3b 45 d0	 cmp	 eax, DWORD PTR __Start_at$[ebp]
  00075	73 08		 jae	 SHORT $LN26@rfind
  00077	8d 45 d4	 lea	 eax, DWORD PTR $T4[ebp]
  0007a	89 45 cc	 mov	 DWORD PTR tv133[ebp], eax
  0007d	eb 06		 jmp	 SHORT $LN27@rfind
$LN26@rfind:
  0007f	8d 45 d0	 lea	 eax, DWORD PTR __Start_at$[ebp]
  00082	89 45 cc	 mov	 DWORD PTR tv133[ebp], eax
$LN27@rfind:
  00085	8b 45 cc	 mov	 eax, DWORD PTR tv133[ebp]
  00088	89 45 bc	 mov	 DWORD PTR $T2[ebp], eax
  0008b	8b 45 bc	 mov	 eax, DWORD PTR $T2[ebp]
  0008e	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 662  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00091	8b 45 b8	 mov	 eax, DWORD PTR $T1[ebp]
  00094	8b 4d e8	 mov	 ecx, DWORD PTR $T6[ebp]
  00097	03 08		 add	 ecx, DWORD PTR [eax]
  00099	89 4d f0	 mov	 DWORD PTR __Match_try$7[ebp], ecx
  0009c	eb 07		 jmp	 SHORT $LN18@rfind
$LN16@rfind:
  0009e	8b 45 f0	 mov	 eax, DWORD PTR __Match_try$7[ebp]
  000a1	48		 dec	 eax
  000a2	89 45 f0	 mov	 DWORD PTR __Match_try$7[ebp], eax
$LN18@rfind:

; 432  :         return _Left == _Right;

  000a5	8b 45 f0	 mov	 eax, DWORD PTR __Match_try$7[ebp]
  000a8	0f be 00	 movsx	 eax, BYTE PTR [eax]
  000ab	0f be 4d f8	 movsx	 ecx, BYTE PTR __Ch$[ebp]
  000af	3b c1		 cmp	 eax, ecx
  000b1	75 09		 jne	 SHORT $LN31@rfind
  000b3	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR tv135[ebp], 1
  000ba	eb 04		 jmp	 SHORT $LN32@rfind
$LN31@rfind:
  000bc	83 65 c8 00	 and	 DWORD PTR tv135[ebp], 0
$LN32@rfind:
  000c0	8a 45 c8	 mov	 al, BYTE PTR tv135[ebp]
  000c3	88 45 f7	 mov	 BYTE PTR $T8[ebp], al

; 663  :             if (_Traits::eq(*_Match_try, _Ch)) {

  000c6	0f b6 45 f7	 movzx	 eax, BYTE PTR $T8[ebp]
  000ca	85 c0		 test	 eax, eax
  000cc	74 0b		 je	 SHORT $LN20@rfind

; 664  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  000ce	8b 45 f0	 mov	 eax, DWORD PTR __Match_try$7[ebp]
  000d1	2b 45 e8	 sub	 eax, DWORD PTR $T6[ebp]
  000d4	89 45 c4	 mov	 DWORD PTR $T3[ebp], eax
  000d7	eb 10		 jmp	 SHORT $LN22@rfind
$LN20@rfind:

; 665  :             }
; 666  : 
; 667  :             if (_Match_try == _Haystack) {

  000d9	8b 45 f0	 mov	 eax, DWORD PTR __Match_try$7[ebp]
  000dc	3b 45 e8	 cmp	 eax, DWORD PTR $T6[ebp]
  000df	75 02		 jne	 SHORT $LN21@rfind

; 668  :                 break; // at beginning, no more chance for match

  000e1	eb 02		 jmp	 SHORT $LN19@rfind
$LN21@rfind:

; 669  :             }
; 670  :         }

  000e3	eb b9		 jmp	 SHORT $LN16@rfind
$LN19@rfind:

; 671  :     }
; 672  : 
; 673  :     return static_cast<size_t>(-1); // no match

  000e5	83 4d c4 ff	 or	 DWORD PTR $T3[ebp], -1
$LN22@rfind:

; 4006 :         // look for _Ch before _Off
; 4007 :         return static_cast<size_type>(

  000e9	8b 45 c4	 mov	 eax, DWORD PTR $T3[ebp]

; 4008 :             _Traits_rfind_ch<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Off, _Ch));
; 4009 :     }

  000ec	c9		 leave
  000ed	c2 08 00	 ret	 8
?rfind@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::rfind
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -60						; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
__Storage_max$ = -44					; size = 4
$T5 = -40						; size = 4
$T6 = -36						; size = 4
$T7 = -32						; size = 4
_this$ = -28						; size = 4
tv70 = -24						; size = 4
$T8 = -20						; size = 4
$T9 = -16						; size = 4
tv67 = -12						; size = 4
__Alloc_max$ = -8					; size = 4
$T10 = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3773 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 4413 :         return _Mypair._Get_first();

  00009	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0000c	89 45 e0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4413 :         return _Mypair._Get_first();

  0000f	8b 45 e0	 mov	 eax, DWORD PTR $T7[ebp]
  00012	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00015	83 4d f8 ff	 or	 DWORD PTR __Alloc_max$[ebp], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00019	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR $T10[ebp], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Alloc_max$[ebp]
  00023	3b 45 fc	 cmp	 eax, DWORD PTR $T10[ebp]
  00026	73 08		 jae	 SHORT $LN14@max_size
  00028	8d 45 fc	 lea	 eax, DWORD PTR $T10[ebp]
  0002b	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
  0002e	eb 06		 jmp	 SHORT $LN15@max_size
$LN14@max_size:
  00030	8d 45 f8	 lea	 eax, DWORD PTR __Alloc_max$[ebp]
  00033	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
$LN15@max_size:
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv67[ebp]
  00039	89 45 dc	 mov	 DWORD PTR $T6[ebp], eax
  0003c	8b 45 dc	 mov	 eax, DWORD PTR $T6[ebp]
  0003f	89 45 d8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00042	8b 45 d8	 mov	 eax, DWORD PTR $T5[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 d4	 mov	 DWORD PTR __Storage_max$[ebp], eax

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  0004a	8b 45 d4	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  0004d	48		 dec	 eax
  0004e	89 45 f0	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00051	c7 45 d0 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00058	8b 45 d0	 mov	 eax, DWORD PTR $T4[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0005e	8b 45 f0	 mov	 eax, DWORD PTR $T9[ebp]
  00061	3b 45 ec	 cmp	 eax, DWORD PTR $T8[ebp]
  00064	73 08		 jae	 SHORT $LN22@max_size
  00066	8d 45 f0	 lea	 eax, DWORD PTR $T9[ebp]
  00069	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
  0006c	eb 06		 jmp	 SHORT $LN23@max_size
$LN22@max_size:
  0006e	8d 45 ec	 lea	 eax, DWORD PTR $T8[ebp]
  00071	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
$LN23@max_size:
  00074	8b 45 e8	 mov	 eax, DWORD PTR tv70[ebp]
  00077	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
  0007a	8b 45 cc	 mov	 eax, DWORD PTR $T3[ebp]
  0007d	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00080	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00083	8b 00		 mov	 eax, DWORD PTR [eax]

; 3778 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3779 :         );
; 3780 :     }

  00085	c9		 leave
  00086	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
_TEXT	SEGMENT
$T1 = -28						; size = 4
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__Result$2 = -16					; size = 4
tv82 = -12						; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 3677 :     _NODISCARD const_reference operator[](const size_type _Off) const noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3678 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3679 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");
; 3680 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3681 :         return _Mypair._Myval2._Myptr()[_Off];

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 2218 :         const value_type* _Result = _Bx._Buf;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	89 45 f0	 mov	 DWORD PTR __Result$2[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  00015	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0001c	72 09		 jb	 SHORT $LN9@operator
  0001e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv82[ebp], 1
  00025	eb 04		 jmp	 SHORT $LN10@operator
$LN9@operator:
  00027	83 65 f4 00	 and	 DWORD PTR tv82[ebp], 0
$LN10@operator:
  0002b	8a 45 f4	 mov	 al, BYTE PTR tv82[ebp]
  0002e	88 45 ff	 mov	 BYTE PTR $T3[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  00031	0f b6 45 ff	 movzx	 eax, BYTE PTR $T3[ebp]
  00035	85 c0		 test	 eax, eax
  00037	74 0e		 je	 SHORT $LN4@operator

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
  0003e	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00041	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00044	89 45 f0	 mov	 DWORD PTR __Result$2[ebp], eax
$LN4@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  00047	8b 45 f0	 mov	 eax, DWORD PTR __Result$2[ebp]
  0004a	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax

; 3678 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3679 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");
; 3680 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3681 :         return _Mypair._Myval2._Myptr()[_Off];

  0004d	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  00050	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]

; 3682 :     }

  00053	c9		 leave
  00054	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -16						; size = 1
__Old_ptr$2 = -12					; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3042 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3043 :         // assign [_Ptr, _Ptr + _Count)
; 3044 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00012	77 39		 ja	 SHORT $LN2@assign

; 3045 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001c	89 45 f4	 mov	 DWORD PTR __Old_ptr$2[ebp], eax

; 3046 :             _Mypair._Myval2._Mysize = _Count;

  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00025	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0002e	ff 75 f4	 push	 DWORD PTR __Old_ptr$2[ebp]
  00031	e8 00 00 00 00	 call	 _memmove
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3047 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3048 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00039	c6 45 ff 00	 mov	 BYTE PTR $T3[ebp], 0

; 428  :         _Left = _Right;

  0003d	8b 45 f4	 mov	 eax, DWORD PTR __Old_ptr$2[ebp]
  00040	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00043	8a 4d ff	 mov	 cl, BYTE PTR $T3[ebp]
  00046	88 08		 mov	 BYTE PTR [eax], cl

; 3049 :             return *this;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	eb 16		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3050 :         }
; 3051 : 
; 3052 :         return _Reallocate_for(

  0004d	33 c0		 xor	 eax, eax
  0004f	88 45 f0	 mov	 BYTE PTR $T1[ebp], al
  00052	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00055	ff 75 f0	 push	 DWORD PTR $T1[ebp]
  00058	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 3053 :             _Count,
; 3054 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3055 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3057 :             },
; 3058 :             _Ptr);
; 3059 :     }

  00063	c9		 leave
  00064	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T1 = -44						; size = 4
__Ptr$ = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
__Result$4 = -28					; size = 4
tv128 = -24						; size = 4
tv89 = -20						; size = 4
__Size$ = -16						; size = 4
$T5 = -12						; size = 4
_this$ = -8						; size = 4
$T6 = -1						; size = 1
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3020 :     basic_string& assign(const basic_string& _Right, const size_type _Roff, size_type _Count = npos) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 2231 :         if (_Mysize < _Off) {

  00009	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000f	3b 45 0c	 cmp	 eax, DWORD PTR __Roff$[ebp]
  00012	73 05		 jae	 SHORT $LN5@assign

; 2232 :             _Xran();

  00014	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN5@assign:

; 3021 :         // assign _Right [_Roff, _Roff + _Count)
; 3022 :         _Right._Mypair._Myval2._Check_offset(_Roff);
; 3023 :         _Count = _Right._Mypair._Myval2._Clamp_suffix_size(_Roff, _Count);

  00019	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  0001c	89 45 f0	 mov	 DWORD PTR __Size$[ebp], eax

; 2248 :         return (_STD min)(_Size, _Mysize - _Off);

  0001f	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00022	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00025	2b 45 0c	 sub	 eax, DWORD PTR __Roff$[ebp]
  00028	89 45 f4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0002b	8b 45 f4	 mov	 eax, DWORD PTR $T5[ebp]
  0002e	3b 45 f0	 cmp	 eax, DWORD PTR __Size$[ebp]
  00031	73 08		 jae	 SHORT $LN12@assign
  00033	8d 45 f4	 lea	 eax, DWORD PTR $T5[ebp]
  00036	89 45 ec	 mov	 DWORD PTR tv89[ebp], eax
  00039	eb 06		 jmp	 SHORT $LN13@assign
$LN12@assign:
  0003b	8d 45 f0	 lea	 eax, DWORD PTR __Size$[ebp]
  0003e	89 45 ec	 mov	 DWORD PTR tv89[ebp], eax
$LN13@assign:
  00041	8b 45 ec	 mov	 eax, DWORD PTR tv89[ebp]
  00044	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
  00047	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  0004a	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2248 :         return (_STD min)(_Size, _Mysize - _Off);

  0004d	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]
  00050	8b 00		 mov	 eax, DWORD PTR [eax]
  00052	89 45 10	 mov	 DWORD PTR __Count$[ebp], eax

; 3024 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  00055	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00058	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 2218 :         const value_type* _Result = _Bx._Buf;

  0005b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	89 45 e4	 mov	 DWORD PTR __Result$4[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  00061	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00068	72 09		 jb	 SHORT $LN21@assign
  0006a	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv128[ebp], 1
  00071	eb 04		 jmp	 SHORT $LN22@assign
$LN21@assign:
  00073	83 65 e8 00	 and	 DWORD PTR tv128[ebp], 0
$LN22@assign:
  00077	8a 45 e8	 mov	 al, BYTE PTR tv128[ebp]
  0007a	88 45 ff	 mov	 BYTE PTR $T6[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  0007d	0f b6 45 ff	 movzx	 eax, BYTE PTR $T6[ebp]
  00081	85 c0		 test	 eax, eax
  00083	74 0e		 je	 SHORT $LN16@assign

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00085	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 00		 mov	 eax, DWORD PTR [eax]
  0008a	89 45 d8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0008d	8b 45 d8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00090	89 45 e4	 mov	 DWORD PTR __Result$4[ebp], eax
$LN16@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  00093	8b 45 e4	 mov	 eax, DWORD PTR __Result$4[ebp]
  00096	89 45 d4	 mov	 DWORD PTR $T1[ebp], eax

; 3024 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  00099	ff 75 10	 push	 DWORD PTR __Count$[ebp]
  0009c	8b 45 d4	 mov	 eax, DWORD PTR $T1[ebp]
  0009f	03 45 0c	 add	 eax, DWORD PTR __Roff$[ebp]
  000a2	50		 push	 eax
  000a3	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN6@assign:

; 3025 :     }

  000ab	c9		 leave
  000ac	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2365 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00015	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  0001c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 2366 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2367 :         _Tidy_init();

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2368 :     }

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c9		 leave
  0002f	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2242 :     [[noreturn]] static void _Xran() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2243 :         _Xout_of_range("invalid string position");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00008	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 2244 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__Result$ = -16						; size = 4
tv76 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2217 :     const value_type* _Myptr() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2218 :         const value_type* _Result = _Bx._Buf;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00016	72 09		 jb	 SHORT $LN6@Myptr
  00018	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  0001f	eb 04		 jmp	 SHORT $LN7@Myptr
$LN6@Myptr:
  00021	83 65 f4 00	 and	 DWORD PTR tv76[ebp], 0
$LN7@Myptr:
  00025	8a 45 f4	 mov	 al, BYTE PTR tv76[ebp]
  00028	88 45 ff	 mov	 BYTE PTR $T1[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  0002b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0e		 je	 SHORT $LN2@Myptr

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0003b	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  00041	8b 45 f0	 mov	 eax, DWORD PTR __Result$[ebp]

; 2224 :     }

  00044	c9		 leave
  00045	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__Result$ = -16						; size = 4
tv76 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2208 :     value_type* _Myptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2209 :         value_type* _Result = _Bx._Buf;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00016	72 09		 jb	 SHORT $LN6@Myptr
  00018	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  0001f	eb 04		 jmp	 SHORT $LN7@Myptr
$LN6@Myptr:
  00021	83 65 f4 00	 and	 DWORD PTR tv76[ebp], 0
$LN7@Myptr:
  00025	8a 45 f4	 mov	 al, BYTE PTR tv76[ebp]
  00028	88 45 ff	 mov	 BYTE PTR $T1[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  0002b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0e		 je	 SHORT $LN2@Myptr

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0003b	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  00041	8b 45 f0	 mov	 eax, DWORD PTR __Result$[ebp]

; 2215 :     }

  00044	c9		 leave
  00045	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2274 : [[noreturn]] inline void _Xlen_string() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2275 :     _Xlength_error("string too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2276 : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	83 c0 23	 add	 eax, 35			; 00000023H
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f4	 mov	 DWORD PTR __Ptr_user$[ebp], eax

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	6a 04		 push	 4
  0001d	58		 pop	 eax
  0001e	6b c0 ff	 imul	 eax, eax, -1
  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00024	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00027	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	2b 45 f8	 sub	 eax, DWORD PTR __Ptr_container$[ebp]
  00039	89 45 fc	 mov	 DWORD PTR __Back_shift$[ebp], eax
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00040	72 08		 jb	 SHORT $LN7@Adjust_man
  00042	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00046	77 02		 ja	 SHORT $LN7@Adjust_man
  00048	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0004f	33 c0		 xor	 eax, eax
  00051	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00053	33 c0		 xor	 eax, eax
  00055	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 130  :     {

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 141  :     {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c9		 leave
  0003d	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 0b		 je	 SHORT $LN3@what
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00023	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00026	c9		 leave
  00027	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx

; 74   :     }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
