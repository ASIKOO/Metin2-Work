; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?GetMeshMatrixPointer@CGrannyModelInstance@@QBE_NHPAPBUD3DXMATRIX@@@Z ; CGrannyModelInstance::GetMeshMatrixPointer
PUBLIC	?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z ; CGrannyModelInstance::Intersect
PUBLIC	?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z ; CGrannyModelInstance::MakeBoundBox
PUBLIC	?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z ; CGrannyModelInstance::GetBoundBox
PUBLIC	??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z	; stl_stack_pool<SBoundBox>::stl_stack_pool<SBoundBox>
PUBLIC	?alloc@?$stl_stack_pool@USBoundBox@@@@QAEPAUSBoundBox@@XZ ; stl_stack_pool<SBoundBox>::alloc
PUBLIC	?deallocate@?$allocator@USBoundBox@@@std@@QAEXQAUSBoundBox@@I@Z ; std::allocator<SBoundBox>::deallocate
PUBLIC	??1?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAE@XZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::~vector<SBoundBox,std::allocator<SBoundBox> >
PUBLIC	?clear@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAEXXZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::clear
PUBLIC	?_Destroy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXPAUSBoundBox@@0@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@ABEII@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXQAUSBoundBox@@II@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Change_array
PUBLIC	?_Tidy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXXZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Tidy
PUBLIC	?_Xlength@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@CAXXZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Xlength
PUBLIC	?_Getal@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEAAV?$allocator@USBoundBox@@@2@XZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Getal
PUBLIC	??_G?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z	; stl_stack_pool<SBoundBox>::`scalar deleting destructor'
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Destroy_range@V?$allocator@USBoundBox@@@std@@@std@@YAXPAUSBoundBox@@QAU1@AAV?$allocator@USBoundBox@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundBox> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USBoundBox@@@std@@@std@@YAPAUSBoundBox@@PAU1@IAAV?$allocator@USBoundBox@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SBoundBox> >
PUBLIC	??$_Uninitialized_move@PAUSBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@YAPAUSBoundBox@@QAU1@0PAU1@AAV?$allocator@USBoundBox@@@0@@Z ; std::_Uninitialized_move<SBoundBox *,std::allocator<SBoundBox> >
PUBLIC	??$_Copy_memmove@PAUSBoundBox@@PAU1@@std@@YAPAUSBoundBox@@PAU1@00@Z ; std::_Copy_memmove<SBoundBox *,SBoundBox *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7?$stl_stack_pool@USBoundBox@@@@6B@		; stl_stack_pool<SBoundBox>::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$stl_stack_pool@USBoundBox@@@@6B@		; stl_stack_pool<SBoundBox>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$stl_stack_pool@USBoundBox@@@@@8	; stl_stack_pool<SBoundBox> `RTTI Type Descriptor'
PUBLIC	??_R3?$stl_stack_pool@USBoundBox@@@@8		; stl_stack_pool<SBoundBox>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$stl_stack_pool@USBoundBox@@@@8		; stl_stack_pool<SBoundBox>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$stl_stack_pool@USBoundBox@@@@8	; stl_stack_pool<SBoundBox>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@47c35000
PUBLIC	__real@4b189680
PUBLIC	__real@4cbebc20
PUBLIC	__real@c7c35000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__imp__GrannyGetWorldPose4x4@8:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memmove:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?IntersectCube@CGraphicCollisionObject@@IAE_NPBUD3DXMATRIX@@MMMMMMAAUD3DXVECTOR3@@1PAM22@Z:PROC ; CGraphicCollisionObject::IntersectCube
EXTRN	?GetMeshCount@CGrannyModel@@QBEHXZ:PROC		; CGrannyModel::GetMeshCount
EXTRN	?GetGrannyModelPointer@CGrannyModel@@QAEPAUgranny_model@@XZ:PROC ; CGrannyModel::GetGrannyModelPointer
EXTRN	?__GetMeshBoneIndices@CGrannyModelInstance@@IBEPAHI@Z:PROC ; CGrannyModelInstance::__GetMeshBoneIndices
EXTRN	?__GetWorldPosePtr@CGrannyModelInstance@@IBEPAUgranny_world_pose@@XZ:PROC ; CGrannyModelInstance::__GetWorldPosePtr
EXTRN	??_E?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z:PROC ; stl_stack_pool<SBoundBox>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A:BYTE ; CGraphicBase::ms_vtPickRayOrig
EXTRN	?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A:BYTE ; CGraphicBase::ms_vtPickRayDir
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A
_BSS	SEGMENT
?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A DB 014H DUP (?) ; `CGrannyModelInstance::Intersect'::`2'::s_boundBoxPool
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA DD 01H DUP (?) ; `CGrannyModelInstance::Intersect'::`2'::$TSS0
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c7c35000
CONST	SEGMENT
__real@c7c35000 DD 0c7c35000r			; -100000
CONST	ENDS
;	COMDAT __real@4cbebc20
CONST	SEGMENT
__real@4cbebc20 DD 04cbebc20r			; 1e+08
CONST	ENDS
;	COMDAT __real@4b189680
CONST	SEGMENT
__real@4b189680 DD 04b189680r			; 1e+07
CONST	ENDS
;	COMDAT __real@47c35000
CONST	SEGMENT
__real@47c35000 DD 047c35000r			; 100000
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$stl_stack_pool@USBoundBox@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$stl_stack_pool@USBoundBox@@@@8 DD FLAT:??_R0?AV?$stl_stack_pool@USBoundBox@@@@@8 ; stl_stack_pool<SBoundBox>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$stl_stack_pool@USBoundBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$stl_stack_pool@USBoundBox@@@@8
rdata$r	SEGMENT
??_R2?$stl_stack_pool@USBoundBox@@@@8 DD FLAT:??_R1A@?0A@EA@?$stl_stack_pool@USBoundBox@@@@8 ; stl_stack_pool<SBoundBox>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$stl_stack_pool@USBoundBox@@@@8
rdata$r	SEGMENT
??_R3?$stl_stack_pool@USBoundBox@@@@8 DD 00H		; stl_stack_pool<SBoundBox>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$stl_stack_pool@USBoundBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$stl_stack_pool@USBoundBox@@@@@8
data$rs	SEGMENT
??_R0?AV?$stl_stack_pool@USBoundBox@@@@@8 DD FLAT:??_7type_info@@6B@ ; stl_stack_pool<SBoundBox> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$stl_stack_pool@USBoundBox@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$stl_stack_pool@USBoundBox@@@@6B@
rdata$r	SEGMENT
??_R4?$stl_stack_pool@USBoundBox@@@@6B@ DD 00H		; stl_stack_pool<SBoundBox>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$stl_stack_pool@USBoundBox@@@@@8
	DD	FLAT:??_R3?$stl_stack_pool@USBoundBox@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$stl_stack_pool@USBoundBox@@@@6B@
CONST	SEGMENT
??_7?$stl_stack_pool@USBoundBox@@@@6B@ DD FLAT:??_R4?$stl_stack_pool@USBoundBox@@@@6B@ ; stl_stack_pool<SBoundBox>::`vftable'
	DD	FLAT:??_E?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$26 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$26
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z$0
__ehfuncinfo$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z$0
__ehfuncinfo$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSBoundBox@@PAU1@@std@@YAPAUSBoundBox@@PAU1@00@Z
_TEXT	SEGMENT
__Last_ch$ = -16					; size = 4
__Count$ = -12						; size = 4
__Dest_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSBoundBox@@PAU1@@std@@YAPAUSBoundBox@@PAU1@00@Z PROC ; std::_Copy_memmove<SBoundBox *,SBoundBox *>, COMDAT

; 4360 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 4361 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 4362 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 f0	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 4363 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f8	 mov	 DWORD PTR __Dest_ch$[ebp], eax

; 4364 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00018	8b 45 f0	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0001b	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0001e	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax

; 4365 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00021	ff 75 f4	 push	 DWORD PTR __Count$[ebp]
  00024	ff 75 fc	 push	 DWORD PTR __First_ch$[ebp]
  00027	ff 75 f8	 push	 DWORD PTR __Dest_ch$[ebp]
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4366 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00035	03 45 f4	 add	 eax, DWORD PTR __Count$[ebp]

; 4367 : }

  00038	c9		 leave
  00039	c3		 ret	 0
??$_Copy_memmove@PAUSBoundBox@@PAU1@@std@@YAPAUSBoundBox@@PAU1@00@Z ENDP ; std::_Copy_memmove<SBoundBox *,SBoundBox *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@YAPAUSBoundBox@@QAU1@0PAU1@AAV?$allocator@USBoundBox@@@0@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__UFirst$ = -8						; size = 4
__ULast$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@YAPAUSBoundBox@@QAU1@0PAU1@AAV?$allocator@USBoundBox@@@0@@Z PROC ; std::_Uninitialized_move<SBoundBox *,std::allocator<SBoundBox> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR __ULast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00018	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  0001b	ff 75 fc	 push	 DWORD PTR __ULast$[ebp]
  0001e	ff 75 f8	 push	 DWORD PTR __UFirst$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSBoundBox@@PAU1@@std@@YAPAUSBoundBox@@PAU1@00@Z ; std::_Copy_memmove<SBoundBox *,SBoundBox *>
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1694 :         return _Dest + (_ULast - _UFirst);

  00029	8b 45 fc	 mov	 eax, DWORD PTR __ULast$[ebp]
  0002c	2b 45 f8	 sub	 eax, DWORD PTR __UFirst$[ebp]
  0002f	c1 f8 05	 sar	 eax, 5
  00032	c1 e0 05	 shl	 eax, 5
  00035	03 45 10	 add	 eax, DWORD PTR __Dest$[ebp]

; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1699 :         }
; 1700 : 
; 1701 :         return _Backout._Release();
; 1702 :     }
; 1703 : }

  00038	c9		 leave
  00039	c3		 ret	 0
??$_Uninitialized_move@PAUSBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@YAPAUSBoundBox@@QAU1@0PAU1@AAV?$allocator@USBoundBox@@@0@@Z ENDP ; std::_Uninitialized_move<SBoundBox *,std::allocator<SBoundBox> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USBoundBox@@@std@@@std@@YAPAUSBoundBox@@PAU1@IAAV?$allocator@USBoundBox@@@0@@Z
_TEXT	SEGMENT
__Backout$1 = -32					; size = 12
___formal$ = -20					; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
__Ptr$ = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USBoundBox@@@std@@@std@@YAPAUSBoundBox@@PAU1@IAAV?$allocator@USBoundBox@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<SBoundBox> >, COMDAT

; 1862 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	57		 push	 edi

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000a	89 45 e0	 mov	 DWORD PTR __Backout$1[ebp], eax
  0000d	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00010	89 45 e4	 mov	 DWORD PTR __Backout$1[ebp+4], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  00016	89 45 e8	 mov	 DWORD PTR __Backout$1[ebp+8], eax

; 1863 :     // value-initialize _Count objects to raw _First, using _Al
; 1864 :     using _Ptrty = typename _Alloc::value_type*;
; 1865 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1866 :         auto _PFirst = _Unfancy(_First);
; 1867 :         _Zero_range(_PFirst, _PFirst + _Count);
; 1868 :         return _First + _Count;
; 1869 :     } else {
; 1870 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1871 :         for (; 0 < _Count; --_Count) {

  00019	eb 07		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  0001b	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0001e	48		 dec	 eax
  0001f	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
$LN4@Uninitiali:
  00022	83 7d 0c 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00026	76 2d		 jbe	 SHORT $LN3@Uninitiali

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00028	8b 45 e4	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  0002b	89 45 fc	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00031	89 45 f8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00034	8b 45 e8	 mov	 eax, DWORD PTR __Backout$1[ebp+8]
  00037	89 45 ec	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR $T4[ebp]
  0003d	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00040	6a 08		 push	 8
  00042	59		 pop	 ecx
  00043	33 c0		 xor	 eax, eax
  00045	8b 7d f4	 mov	 edi, DWORD PTR $T3[ebp]
  00048	f3 ab		 rep stosd

; 1547 :         ++_Last;

  0004a	8b 45 e4	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  0004d	83 c0 20	 add	 eax, 32			; 00000020H
  00050	89 45 e4	 mov	 DWORD PTR __Backout$1[ebp+4], eax

; 1872 :             _Backout._Emplace_back();
; 1873 :         }

  00053	eb c6		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1551 :         _First = _Last;

  00055	8b 45 e4	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00058	89 45 e0	 mov	 DWORD PTR __Backout$1[ebp], eax

; 1552 :         return _Last;

  0005b	8b 45 e4	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  0005e	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax

; 1541 :         _Destroy_range(_First, _Last, _Al);

  00061	ff 75 e8	 push	 DWORD PTR __Backout$1[ebp+8]
  00064	ff 75 e4	 push	 DWORD PTR __Backout$1[ebp+4]
  00067	ff 75 e0	 push	 DWORD PTR __Backout$1[ebp]
  0006a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundBox@@@std@@@std@@YAXPAUSBoundBox@@QAU1@AAV?$allocator@USBoundBox@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundBox> >
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1874 : 
; 1875 :         return _Backout._Release();

  00072	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]

; 1876 :     }
; 1877 : }

  00075	5f		 pop	 edi
  00076	c9		 leave
  00077	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@USBoundBox@@@std@@@std@@YAPAUSBoundBox@@PAU1@IAAV?$allocator@USBoundBox@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<SBoundBox> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Block_size$ = -8					; size = 4
__Ptr_container$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00012	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00015	77 05		 ja	 SHORT $LN12@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  00017	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Allocate_m:

; 77   :         return ::operator new(_Bytes);

  0001c	ff 75 f8	 push	 DWORD PTR __Block_size$[ebp]
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	59		 pop	 ecx

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00025	89 45 fc	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00028	83 7d fc 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0002c	74 02		 je	 SHORT $LN7@Allocate_m
  0002e	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00035	33 c0		 xor	 eax, eax
  00037	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  00039	33 c0		 xor	 eax, eax
  0003b	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00040	83 c0 23	 add	 eax, 35			; 00000023H
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00046	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00049	6a 04		 push	 4
  0004b	58		 pop	 eax
  0004c	6b c0 ff	 imul	 eax, eax, -1
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00055	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Max_possible$2 = -148					; size = 4
$T3 = -144						; size = 4
$T4 = -140						; size = 4
__First$ = -136						; size = 4
__Last$ = -132						; size = 4
$T5 = -128						; size = 4
$T6 = -124						; size = 4
tv244 = -120						; size = 4
$T7 = -116						; size = 4
$T8 = -112						; size = 4
$T9 = -108						; size = 4
$T10 = -104						; size = 4
$T11 = -100						; size = 4
$T12 = -96						; size = 4
$T13 = -92						; size = 4
$T14 = -88						; size = 4
$T15 = -84						; size = 4
__Appended_last$ = -80					; size = 4
__Myfirst$ = -76					; size = 4
__Mylast$ = -72						; size = 4
__Oldsize$ = -68					; size = 4
__My_data$ = -64					; size = 4
tv147 = -60						; size = 4
$T16 = -56						; size = 4
$T17 = -52						; size = 4
__Appended_first$ = -48					; size = 4
___formal$ = -44					; size = 1
___formal$ = -40					; size = 1
__Overflow_is_possible$18 = -33				; size = 1
__Newvec$ = -32						; size = 4
__Newcapacity$ = -28					; size = 4
$T19 = -21						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1737 :         return _Mypair._Get_first();

  00032	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00035	89 45 ac	 mov	 DWORD PTR $T15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00038	8b 45 ac	 mov	 eax, DWORD PTR $T15[ebp]
  0003b	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00041	c7 45 cc ff ff
	ff 07		 mov	 DWORD PTR $T17[ebp], 134217727 ; 07ffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00048	c7 45 a8 ff ff
	ff 7f		 mov	 DWORD PTR $T14[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0004f	8b 45 a8	 mov	 eax, DWORD PTR $T14[ebp]
  00052	89 45 c8	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00055	8b 45 cc	 mov	 eax, DWORD PTR $T17[ebp]
  00058	3b 45 c8	 cmp	 eax, DWORD PTR $T16[ebp]
  0005b	73 08		 jae	 SHORT $LN26@Resize_rea
  0005d	8d 45 cc	 lea	 eax, DWORD PTR $T17[ebp]
  00060	89 45 c4	 mov	 DWORD PTR tv147[ebp], eax
  00063	eb 06		 jmp	 SHORT $LN27@Resize_rea
$LN26@Resize_rea:
  00065	8d 45 c8	 lea	 eax, DWORD PTR $T16[ebp]
  00068	89 45 c4	 mov	 DWORD PTR tv147[ebp], eax
$LN27@Resize_rea:
  0006b	8b 45 c4	 mov	 eax, DWORD PTR tv147[ebp]
  0006e	89 45 a4	 mov	 DWORD PTR $T13[ebp], eax
  00071	8b 45 a4	 mov	 eax, DWORD PTR $T13[ebp]
  00074	89 45 a0	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00077	8b 45 a0	 mov	 eax, DWORD PTR $T12[ebp]
  0007a	8b 00		 mov	 eax, DWORD PTR [eax]
  0007c	89 45 9c	 mov	 DWORD PTR $T11[ebp], eax

; 1183 :         if (_Newsize > max_size()) {

  0007f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00082	3b 45 9c	 cmp	 eax, DWORD PTR $T11[ebp]
  00085	76 05		 jbe	 SHORT $LN2@Resize_rea

; 1184 :             _Xlength();

  00087	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@CAXXZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Xlength
$LN2@Resize_rea:

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;

  0008c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	89 45 c0	 mov	 DWORD PTR __My_data$[ebp], eax

; 1188 :         pointer& _Myfirst = _My_data._Myfirst;

  00092	8b 45 c0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00095	89 45 b4	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1189 :         pointer& _Mylast  = _My_data._Mylast;

  00098	8b 45 c0	 mov	 eax, DWORD PTR __My_data$[ebp]
  0009b	83 c0 04	 add	 eax, 4
  0009e	89 45 b8	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  000a1	8b 45 b8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000a4	8b 4d b4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	2b 01		 sub	 eax, DWORD PTR [ecx]
  000ab	c1 f8 05	 sar	 eax, 5
  000ae	89 45 bc	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1192 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000b1	ff 75 08	 push	 DWORD PTR __Newsize$[ebp]
  000b4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b7	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@ABEII@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Calculate_growth
  000bc	89 45 e4	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  000bf	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000c2	89 45 98	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  000c5	8b 45 98	 mov	 eax, DWORD PTR $T10[ebp]
  000c8	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000ce	c6 45 df 01	 mov	 BYTE PTR __Overflow_is_possible$18[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000d2	c7 85 6c ff ff
	ff ff ff ff 07	 mov	 DWORD PTR __Max_possible$2[ebp], 134217727 ; 07ffffffH

; 60   :         if (_Count > _Max_possible) {

  000dc	81 7d e4 ff ff
	ff 07		 cmp	 DWORD PTR __Newcapacity$[ebp], 134217727 ; 07ffffffH
  000e3	76 05		 jbe	 SHORT $LN65@Resize_rea

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000e5	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN65@Resize_rea:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000ea	8b 45 e4	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  000ed	c1 e0 05	 shl	 eax, 5
  000f0	89 45 94	 mov	 DWORD PTR $T9[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000f3	ff 75 94	 push	 DWORD PTR $T9[ebp]
  000f6	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000fb	59		 pop	 ecx
  000fc	89 45 e0	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1195 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000ff	8b 45 bc	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  00102	c1 e0 05	 shl	 eax, 5
  00105	03 45 e0	 add	 eax, DWORD PTR __Newvec$[ebp]
  00108	89 45 d0	 mov	 DWORD PTR __Appended_first$[ebp], eax

; 1196 :         pointer _Appended_last        = _Appended_first;

  0010b	8b 45 d0	 mov	 eax, DWORD PTR __Appended_first$[ebp]
  0010e	89 45 b0	 mov	 DWORD PTR __Appended_last$[ebp], eax

; 1197 : 
; 1198 :         _TRY_BEGIN

  00111	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  00115	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00118	8a 00		 mov	 al, BYTE PTR [eax]
  0011a	88 45 d8	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  0011d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00120	89 45 90	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00123	8b 45 90	 mov	 eax, DWORD PTR $T8[ebp]
  00126	89 45 8c	 mov	 DWORD PTR $T7[ebp], eax

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00129	ff 75 8c	 push	 DWORD PTR $T7[ebp]

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  0012c	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0012f	2b 45 bc	 sub	 eax, DWORD PTR __Oldsize$[ebp]

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00132	50		 push	 eax
  00133	ff 75 d0	 push	 DWORD PTR __Appended_first$[ebp]
  00136	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USBoundBox@@@std@@@std@@YAPAUSBoundBox@@PAU1@IAAV?$allocator@USBoundBox@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SBoundBox> >
  0013b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013e	89 45 88	 mov	 DWORD PTR tv244[ebp], eax

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  00141	8b 45 88	 mov	 eax, DWORD PTR tv244[ebp]
  00144	89 45 b0	 mov	 DWORD PTR __Appended_last$[ebp], eax

; 1200 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00147	8b 45 b8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0014a	8b 00		 mov	 eax, DWORD PTR [eax]
  0014c	89 85 7c ff ff
	ff		 mov	 DWORD PTR __Last$[ebp], eax
  00152	8b 45 b4	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00155	8b 00		 mov	 eax, DWORD PTR [eax]
  00157	89 85 78 ff ff
	ff		 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  0015d	33 c0		 xor	 eax, eax
  0015f	88 45 eb	 mov	 BYTE PTR $T19[ebp], al
  00162	8a 45 eb	 mov	 al, BYTE PTR $T19[ebp]
  00165	88 45 d4	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  00168	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0016b	89 45 84	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0016e	8b 45 84	 mov	 eax, DWORD PTR $T6[ebp]
  00171	89 45 80	 mov	 DWORD PTR $T5[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00174	ff 75 80	 push	 DWORD PTR $T5[ebp]
  00177	ff 75 e0	 push	 DWORD PTR __Newvec$[ebp]
  0017a	ff b5 7c ff ff
	ff		 push	 DWORD PTR __Last$[ebp]
  00180	ff b5 78 ff ff
	ff		 push	 DWORD PTR __First$[ebp]
  00186	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@YAPAUSBoundBox@@QAU1@0PAU1@AAV?$allocator@USBoundBox@@@0@@Z ; std::_Uninitialized_move<SBoundBox *,std::allocator<SBoundBox> >
  0018b	83 c4 10	 add	 esp, 16			; 00000010H

; 1200 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  0018e	eb 32		 jmp	 SHORT $LN5@Resize_rea
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1201 :         _CATCH_ALL
; 1202 :         _Destroy(_Appended_first, _Appended_last);

  00190	ff 75 b0	 push	 DWORD PTR __Appended_last$[ebp]
  00193	ff 75 d0	 push	 DWORD PTR __Appended_first$[ebp]
  00196	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00199	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXPAUSBoundBox@@0@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Destroy

; 1203 :         _Getal().deallocate(_Newvec, _Newcapacity);

  0019e	ff 75 e4	 push	 DWORD PTR __Newcapacity$[ebp]
  001a1	ff 75 e0	 push	 DWORD PTR __Newvec$[ebp]
  001a4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001a7	e8 00 00 00 00	 call	 ?_Getal@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEAAV?$allocator@USBoundBox@@@2@XZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Getal
  001ac	8b c8		 mov	 ecx, eax
  001ae	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USBoundBox@@@std@@QAEXQAUSBoundBox@@I@Z ; std::allocator<SBoundBox>::deallocate

; 1204 :         _RERAISE;

  001b3	6a 00		 push	 0
  001b5	6a 00		 push	 0
  001b7	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1205 :         _CATCH_END

  001bc	b8 00 00 00 00	 mov	 eax, $LN8@Resize_rea
  001c1	c3		 ret	 0
$LN5@Resize_rea:
  001c2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  001c6	eb 04		 jmp	 SHORT __tryend$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$1
$LN8@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  001c8	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1206 : 
; 1207 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  001cc	ff 75 e4	 push	 DWORD PTR __Newcapacity$[ebp]
  001cf	ff 75 08	 push	 DWORD PTR __Newsize$[ebp]
  001d2	ff 75 e0	 push	 DWORD PTR __Newvec$[ebp]
  001d5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001d8	e8 00 00 00 00	 call	 ?_Change_array@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXQAUSBoundBox@@II@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Change_array
$LN68@Resize_rea:

; 1208 :     }

  001dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e7	59		 pop	 ecx
  001e8	5f		 pop	 edi
  001e9	5e		 pop	 esi
  001ea	5b		 pop	 ebx
  001eb	c9		 leave
  001ec	c2 08 00	 ret	 8
  001ef	cc		 int	 3
  001f0	cc		 int	 3
  001f1	cc		 int	 3
  001f2	cc		 int	 3
  001f3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 68 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-152]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USBoundBox@@@std@@@std@@YAXPAUSBoundBox@@QAU1@AAV?$allocator@USBoundBox@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USBoundBox@@@std@@@std@@YAXPAUSBoundBox@@QAU1@AAV?$allocator@USBoundBox@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SBoundBox> >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@USBoundBox@@@std@@@std@@YAXPAUSBoundBox@@QAU1@AAV?$allocator@USBoundBox@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SBoundBox> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0b		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00014	59		 pop	 ecx
  00015	eb 13		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00017	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001b	74 0b		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001d	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	59		 pop	 ecx

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00028	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 0f		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  0003a	ff 75 0c	 push	 DWORD PTR __Bytes$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 222  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	c9		 leave
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldlast$1 = -56					; size = 4
$T2 = -52						; size = 4
$T3 = -48						; size = 4
__Oldcapacity$4 = -44					; size = 4
__Last$ = -40						; size = 4
$T5 = -36						; size = 4
$T6 = -32						; size = 4
__Newlast$7 = -28					; size = 4
__Oldsize$ = -24					; size = 4
__Myfirst$ = -20					; size = 4
__My_data$ = -16					; size = 4
_this$ = -12						; size = 4
__Mylast$ = -8						; size = 4
___formal$ = -4						; size = 1
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1211 :     void _Resize(const size_type _Newsize, const _Ty2& _Val) { // trim or append elements, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1212 :         auto& _My_data      = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __My_data$[ebp], eax

; 1213 :         pointer& _Myfirst   = _My_data._Myfirst;

  0000f	8b 45 f0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 ec	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1214 :         pointer& _Mylast    = _My_data._Mylast;

  00015	8b 45 f0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f8	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1215 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00021	8b 4d ec	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	2b 01		 sub	 eax, DWORD PTR [ecx]
  00028	c1 f8 05	 sar	 eax, 5
  0002b	89 45 e8	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1216 :         if (_Newsize < _Oldsize) { // trim

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00031	3b 45 e8	 cmp	 eax, DWORD PTR __Oldsize$[ebp]
  00034	73 3d		 jae	 SHORT $LN2@Resize

; 1217 :             const pointer _Newlast = _Myfirst + _Newsize;

  00036	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00039	c1 e0 05	 shl	 eax, 5
  0003c	8b 4d ec	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0003f	03 01		 add	 eax, DWORD PTR [ecx]
  00041	89 45 e4	 mov	 DWORD PTR __Newlast$7[ebp], eax

; 1218 :             _Orphan_range(_Newlast, _Mylast);
; 1219 :             _Destroy(_Newlast, _Mylast);

  00044	8b 45 f8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00047	8b 00		 mov	 eax, DWORD PTR [eax]
  00049	89 45 d8	 mov	 DWORD PTR __Last$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0004c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0004f	89 45 e0	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00052	8b 45 e0	 mov	 eax, DWORD PTR $T6[ebp]
  00055	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00058	ff 75 dc	 push	 DWORD PTR $T5[ebp]
  0005b	ff 75 d8	 push	 DWORD PTR __Last$[ebp]
  0005e	ff 75 e4	 push	 DWORD PTR __Newlast$7[ebp]
  00061	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundBox@@@std@@@std@@YAXPAUSBoundBox@@QAU1@AAV?$allocator@USBoundBox@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundBox> >
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1220 :             _Mylast = _Newlast;

  00069	8b 45 f8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006c	8b 4d e4	 mov	 ecx, DWORD PTR __Newlast$7[ebp]
  0006f	89 08		 mov	 DWORD PTR [eax], ecx

; 1221 :             return;

  00071	eb 67		 jmp	 SHORT $LN1@Resize
$LN2@Resize:

; 1222 :         }
; 1223 : 
; 1224 :         if (_Newsize > _Oldsize) { // append

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	3b 45 e8	 cmp	 eax, DWORD PTR __Oldsize$[ebp]
  00079	76 5f		 jbe	 SHORT $LN1@Resize

; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0007b	8b 45 f0	 mov	 eax, DWORD PTR __My_data$[ebp]
  0007e	8b 4d ec	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00081	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00084	2b 01		 sub	 eax, DWORD PTR [ecx]
  00086	c1 f8 05	 sar	 eax, 5
  00089	89 45 d4	 mov	 DWORD PTR __Oldcapacity$4[ebp], eax

; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate

  0008c	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0008f	3b 45 d4	 cmp	 eax, DWORD PTR __Oldcapacity$4[ebp]
  00092	76 10		 jbe	 SHORT $LN4@Resize

; 1227 :                 _Resize_reallocate(_Newsize, _Val);

  00094	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  00097	ff 75 08	 push	 DWORD PTR __Newsize$[ebp]
  0009a	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0009d	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize_reallocate<std::_Value_init_tag>

; 1228 :                 return;

  000a2	eb 36		 jmp	 SHORT $LN1@Resize
$LN4@Resize:

; 1229 :             }
; 1230 : 
; 1231 :             const pointer _Oldlast = _Mylast;

  000a4	8b 45 f8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000a7	8b 00		 mov	 eax, DWORD PTR [eax]
  000a9	89 45 c8	 mov	 DWORD PTR __Oldlast$1[ebp], eax

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  000ac	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  000af	8a 00		 mov	 al, BYTE PTR [eax]
  000b1	88 45 fc	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  000b4	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000b7	89 45 d0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  000ba	8b 45 d0	 mov	 eax, DWORD PTR $T3[ebp]
  000bd	89 45 cc	 mov	 DWORD PTR $T2[ebp], eax

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  000c0	ff 75 cc	 push	 DWORD PTR $T2[ebp]

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  000c3	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000c6	2b 45 e8	 sub	 eax, DWORD PTR __Oldsize$[ebp]

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  000c9	50		 push	 eax
  000ca	ff 75 c8	 push	 DWORD PTR __Oldlast$1[ebp]
  000cd	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USBoundBox@@@std@@@std@@YAPAUSBoundBox@@PAU1@IAAV?$allocator@USBoundBox@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SBoundBox> >
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  000d5	8b 4d f8	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000d8	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@Resize:

; 1233 :             _Orphan_range(_Oldlast, _Oldlast);
; 1234 :         }
; 1235 : 
; 1236 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1237 :     }

  000da	c9		 leave
  000db	c2 08 00	 ret	 8
??$_Resize@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??__Fs_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@YAXXZ
text$yd	SEGMENT
??__Fs_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@YAXXZ PROC ; `CGrannyModelInstance::Intersect'::`2'::`dynamic atexit destructor for 's_boundBoxPool'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h

; 255  : 		{

  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A, OFFSET ??_7?$stl_stack_pool@USBoundBox@@@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  0000d	b9 08 00 00 00	 mov	 ecx, OFFSET ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A+8
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXXZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Tidy
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??__Fs_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@YAXXZ ENDP ; `CGrannyModelInstance::Intersect'::`2'::`dynamic atexit destructor for 's_boundBoxPool''
text$yd	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??_G?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z PROC	; stl_stack_pool<SBoundBox>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h

; 255  : 		{

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$stl_stack_pool@USBoundBox@@@@6B@

; 256  : 		}

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 08	 add	 ecx, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  00016	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXXZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Tidy
  0001b	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001e	83 e0 01	 and	 eax, 1
  00021	74 0c		 je	 SHORT $LN2@scalar
  00023	6a 14		 push	 20			; 00000014H
  00025	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	59		 pop	 ecx
  0002e	59		 pop	 ecx
$LN2@scalar:
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	c9		 leave
  00033	c2 04 00	 ret	 4
??_G?$stl_stack_pool@USBoundBox@@@@UAEPAXI@Z ENDP	; stl_stack_pool<SBoundBox>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Getal@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEAAV?$allocator@USBoundBox@@@2@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Getal@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEAAV?$allocator@USBoundBox@@@2@XZ PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Getal, COMDAT
; _this$ = ecx

; 1732 :     _Alty& _Getal() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000b	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000e	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 1734 :     }

  00011	c9		 leave
  00012	c3		 ret	 0
?_Getal@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEAAV?$allocator@USBoundBox@@@2@XZ ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@CAXXZ PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 :         _Xlength_error("vector too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@CAXXZ ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
?_Tidy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXXZ PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1687 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();
; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 74		 je	 SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundBox@@@std@@@std@@YAXPAUSBoundBox@@QAU1@AAV?$allocator@USBoundBox@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundBox> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	c1 f8 05	 sar	 eax, 5
  00075	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00078	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00080	8b 45 d4	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	c1 e0 05	 shl	 eax, 5
  00086	50		 push	 eax
  00087	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008f	59		 pop	 ecx
  00090	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00091	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00094	83 20 00	 and	 DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

  00097	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0009a	83 20 00	 and	 DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

  0009d	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a0	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

  000a3	c9		 leave
  000a4	c3		 ret	 0
?_Tidy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXXZ ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXQAUSBoundBox@@II@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXQAUSBoundBox@@II@Z PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();
; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 62		 je	 SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundBox@@@std@@@std@@YAXPAUSBoundBox@@QAU1@AAV?$allocator@USBoundBox@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundBox> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	c1 f8 05	 sar	 eax, 5
  00075	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00078	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00080	8b 45 d4	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	c1 e0 05	 shl	 eax, 5
  00086	50		 push	 eax
  00087	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008f	59		 pop	 ecx
  00090	59		 pop	 ecx
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  00091	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00094	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00097	89 08		 mov	 DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  00099	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0009c	c1 e0 05	 shl	 eax, 5
  0009f	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000a2	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000a5	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000a7	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  000aa	c1 e0 05	 shl	 eax, 5
  000ad	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000b0	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b3	89 01		 mov	 DWORD PTR [ecx], eax

; 1684 :     }

  000b5	c9		 leave
  000b6	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXQAUSBoundBox@@II@Z ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Geometric$ = -32					; size = 4
__Max$ = -28						; size = 4
tv82 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$8 = -8					; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@ABEII@Z PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$8[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	c1 f8 05	 sar	 eax, 5
  0001d	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00020	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00023	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00026	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  00029	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0002c	c7 45 f0 ff ff
	ff 07		 mov	 DWORD PTR $T7[ebp], 134217727 ; 07ffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00033	c7 45 d8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0003a	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00040	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00043	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  00046	73 08		 jae	 SHORT $LN25@Calculate_
  00048	8d 45 f0	 lea	 eax, DWORD PTR $T7[ebp]
  0004b	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
  0004e	eb 06		 jmp	 SHORT $LN26@Calculate_
$LN25@Calculate_:
  00050	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00053	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
$LN26@Calculate_:
  00056	8b 45 e8	 mov	 eax, DWORD PTR tv82[ebp]
  00059	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  0005c	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  0005f	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00062	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 :         const auto _Max              = max_size();
; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006a	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  0006d	d1 e8		 shr	 eax, 1
  0006f	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  00072	2b c8		 sub	 ecx, eax
  00074	39 4d fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], ecx
  00077	76 05		 jbe	 SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

  00079	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  0007c	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00081	d1 e8		 shr	 eax, 1
  00083	03 45 fc	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00086	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  00089	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0008c	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  0008f	73 05		 jae	 SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

  00091	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00094	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

  00096	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

  00099	c9		 leave
  0009a	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@ABEII@Z ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXPAUSBoundBox@@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXPAUSBoundBox@@0@Z PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00015	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00018	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundBox@@@std@@@std@@YAXPAUSBoundBox@@QAU1@AAV?$allocator@USBoundBox@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundBox> >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00026	c9		 leave
  00027	c2 08 00	 ret	 8
?_Destroy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXPAUSBoundBox@@0@Z ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?clear@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T1 = -24						; size = 4
$T2 = -20						; size = 4
__Myfirst$ = -16					; size = 4
__Mylast$ = -12						; size = 4
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
?clear@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAEXXZ PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::clear, COMDAT
; _this$ = ecx

; 1383 :     void clear() noexcept { // erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1384 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR __My_data$[ebp], eax

; 1385 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 f0	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1386 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1387 : 
; 1388 :         _My_data._Orphan_all();
; 1389 :         _Destroy(_Myfirst, _Mylast);

  0001e	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  00026	8b 45 f0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00031	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00037	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0003a	ff 75 e8	 push	 DWORD PTR $T1[ebp]
  0003d	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  00040	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  00043	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundBox@@@std@@@std@@YAXPAUSBoundBox@@QAU1@AAV?$allocator@USBoundBox@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundBox> >
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1390 :         _Mylast = _Myfirst;

  0004b	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00051	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00053	89 08		 mov	 DWORD PTR [eax], ecx

; 1391 :     }

  00055	c9		 leave
  00056	c3		 ret	 0
?clear@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAEXXZ ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::clear
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??1?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAE@XZ PROC ; std::vector<SBoundBox,std::allocator<SBoundBox> >::~vector<SBoundBox,std::allocator<SBoundBox> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 673  :         _Tidy();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXXZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Tidy

; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAE@XZ ENDP ; std::vector<SBoundBox,std::allocator<SBoundBox> >::~vector<SBoundBox,std::allocator<SBoundBox> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@USBoundBox@@@std@@QAEXQAUSBoundBox@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USBoundBox@@@std@@QAEXQAUSBoundBox@@I@Z PROC ; std::allocator<SBoundBox>::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	c1 e0 05	 shl	 eax, 5
  0000d	50		 push	 eax
  0000e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00011	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00016	59		 pop	 ecx
  00017	59		 pop	 ecx

; 811  :     }

  00018	c9		 leave
  00019	c2 08 00	 ret	 8
?deallocate@?$allocator@USBoundBox@@@std@@QAEXQAUSBoundBox@@I@Z ENDP ; std::allocator<SBoundBox>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
;	COMDAT ?alloc@?$stl_stack_pool@USBoundBox@@@@QAEPAUSBoundBox@@XZ
_TEXT	SEGMENT
$T1 = -28						; size = 4
__My_data$2 = -24					; size = 4
$T3 = -20						; size = 4
_max$ = -16						; size = 4
$T4 = -12						; size = 4
__My_data$5 = -8					; size = 4
_this$ = -4						; size = 4
?alloc@?$stl_stack_pool@USBoundBox@@@@QAEPAUSBoundBox@@XZ PROC ; stl_stack_pool<SBoundBox>::alloc, COMDAT
; _this$ = ecx

; 270  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 08	 add	 eax, 8
  0000f	89 45 f8	 mov	 DWORD PTR __My_data$5[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00012	8b 45 f8	 mov	 eax, DWORD PTR __My_data$5[ebp]
  00015	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$5[ebp]
  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001d	c1 f8 05	 sar	 eax, 5
  00020	89 45 f4	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h

; 273  : 			int max = m_dataVector.size();

  00023	8b 45 f4	 mov	 eax, DWORD PTR $T4[ebp]
  00026	89 45 f0	 mov	 DWORD PTR _max$[ebp], eax

; 274  : 
; 275  : 			if (m_pos >= max)

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002f	3b 45 f0	 cmp	 eax, DWORD PTR _max$[ebp]
  00032	7c 07		 jl	 SHORT $LN2@alloc

; 276  : 			{
; 277  : 				assert(!"stl_stack_pool::alloc OUT of memory");
; 278  : 				m_pos = 0;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 60 04 00	 and	 DWORD PTR [eax+4], 0
$LN2@alloc:

; 281  : 			return &m_dataVector[m_pos++];

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00041	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
  00044	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004a	40		 inc	 eax
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	83 c0 08	 add	 eax, 8
  00057	89 45 e8	 mov	 DWORD PTR __My_data$2[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  0005a	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  0005d	c1 e0 05	 shl	 eax, 5
  00060	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$2[ebp]
  00063	03 01		 add	 eax, DWORD PTR [ecx]
  00065	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h

; 281  : 			return &m_dataVector[m_pos++];

  00068	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]

; 282  : 		}

  0006b	c9		 leave
  0006c	c3		 ret	 0
?alloc@?$stl_stack_pool@USBoundBox@@@@QAEPAUSBoundBox@@XZ ENDP ; stl_stack_pool<SBoundBox>::alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
;	COMDAT ??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -32						; size = 4
_this$ = -28						; size = 4
_this$2 = -24						; size = 4
_this$ = -20						; size = 4
$T3 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_capacity$ = 8						; size = 4
??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z PROC		; stl_stack_pool<SBoundBox>::stl_stack_pool<SBoundBox>, COMDAT
; _this$ = ecx

; 248  : 		stl_stack_pool(int capacity)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 249  : 		{

  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$stl_stack_pool@USBoundBox@@@@6B@
  00031	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 c0 08	 add	 eax, 8
  00037	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  0003a	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	89 45 e0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00040	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	89 45 e8	 mov	 DWORD PTR _this$2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00046	8b 45 e8	 mov	 eax, DWORD PTR _this$2[ebp]
  00049	83 20 00	 and	 DWORD PTR [eax], 0
  0004c	8b 45 e8	 mov	 eax, DWORD PTR _this$2[ebp]
  0004f	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00053	8b 45 e8	 mov	 eax, DWORD PTR _this$2[ebp]
  00056	83 60 08 00	 and	 DWORD PTR [eax+8], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h

; 249  : 		{

  0005a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 250  : 			m_pos = 0;

  0005e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00061	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 260  : 			m_dataVector.clear();

  00065	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	83 c1 08	 add	 ecx, 8
  0006b	e8 00 00 00 00	 call	 ?clear@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAEXXZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::clear
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1242 :         _Resize(_Newsize, _Value_init_tag{});

  00070	8d 45 f3	 lea	 eax, DWORD PTR $T3[ebp]
  00073	50		 push	 eax
  00074	ff 75 08	 push	 DWORD PTR _capacity$[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h

; 261  : 			m_dataVector.resize(capacity);

  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	83 c1 08	 add	 ecx, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1242 :         _Resize(_Newsize, _Value_init_tag{});

  0007d	e8 00 00 00 00	 call	 ??$_Resize@U_Value_init_tag@std@@@?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SBoundBox,std::allocator<SBoundBox> >::_Resize<std::_Value_init_tag>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h

; 252  : 		}

  00082	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00086	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00089	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00093	59		 pop	 ecx
  00094	c9		 leave
  00095	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@USBoundBox@@V?$allocator@USBoundBox@@@std@@@std@@QAE@XZ ; std::vector<SBoundBox,std::allocator<SBoundBox> >::~vector<SBoundBox,std::allocator<SBoundBox> >
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z ENDP		; stl_stack_pool<SBoundBox>::stl_stack_pool<SBoundBox>
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
;	COMDAT ?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_boneIndices$1 = -64					; size = 4
_meshCount$ = -60					; size = 4
_rgrnBoneBinding$2 = -56				; size = 4
_pgrnMesh$3 = -52					; size = 4
_b$4 = -48						; size = 4
_m$5 = -44						; size = 4
_this$ = -40						; size = 4
_BoundBox$ = -36					; size = 32
__$ArrayPad$ = -4					; size = 4
_vtMin$ = 8						; size = 4
_vtMax$ = 12						; size = 4
?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z PROC ; CGrannyModelInstance::GetBoundBox, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d8	 mov	 DWORD PTR _this$[ebp], ecx

; 183  : 	if (!m_pgrnModelInstance)

  00013	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00016	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0001a	75 05		 jne	 SHORT $LN8@GetBoundBo

; 184  : 		return;

  0001c	e9 0f 01 00 00	 jmp	 $LN1@GetBoundBo
$LN8@GetBoundBo:

; 185  : 
; 186  : 	TBoundBox BoundBox;
; 187  : 
; 188  : 	vtMin->x = vtMin->y = vtMin->z = +100000.0f;

  00021	8b 45 08	 mov	 eax, DWORD PTR _vtMin$[ebp]
  00024	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@47c35000
  0002c	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
  00031	8b 45 08	 mov	 eax, DWORD PTR _vtMin$[ebp]
  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@47c35000
  0003c	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00041	8b 45 08	 mov	 eax, DWORD PTR _vtMin$[ebp]
  00044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@47c35000
  0004c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 189  : 	vtMax->x = vtMax->y = vtMax->z = -100000.0f;

  00050	8b 45 0c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c7c35000
  0005b	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
  00060	8b 45 0c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00063	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c7c35000
  0006b	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00070	8b 45 0c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00073	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c7c35000
  0007b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 190  : 
; 191  : 	int meshCount = m_pModel->GetMeshCount();

  0007f	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  00082	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00085	e8 00 00 00 00	 call	 ?GetMeshCount@CGrannyModel@@QBEHXZ ; CGrannyModel::GetMeshCount
  0008a	89 45 c4	 mov	 DWORD PTR _meshCount$[ebp], eax

; 192  : 	for (int m = 0; m < meshCount; ++m)

  0008d	83 65 d4 00	 and	 DWORD PTR _m$5[ebp], 0
  00091	eb 07		 jmp	 SHORT $LN4@GetBoundBo
$LN2@GetBoundBo:
  00093	8b 45 d4	 mov	 eax, DWORD PTR _m$5[ebp]
  00096	40		 inc	 eax
  00097	89 45 d4	 mov	 DWORD PTR _m$5[ebp], eax
$LN4@GetBoundBo:
  0009a	8b 45 d4	 mov	 eax, DWORD PTR _m$5[ebp]
  0009d	3b 45 c4	 cmp	 eax, DWORD PTR _meshCount$[ebp]
  000a0	0f 8d 8a 00 00
	00		 jge	 $LN3@GetBoundBo

; 193  : 	{
; 194  : 		//const CGrannyMesh* pMesh = m_pModel->GetMeshPointer(m);
; 195  : 		const granny_mesh* pgrnMesh = m_pModel->GetGrannyModelPointer()->MeshBindings[m].Mesh;

  000a6	8b 45 d8	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000ac	e8 00 00 00 00	 call	 ?GetGrannyModelPointer@CGrannyModel@@QAEPAUgranny_model@@XZ ; CGrannyModel::GetGrannyModelPointer
  000b1	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  000b4	8b 4d d4	 mov	 ecx, DWORD PTR _m$5[ebp]
  000b7	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  000ba	89 45 cc	 mov	 DWORD PTR _pgrnMesh$3[ebp], eax

; 196  : 
; 197  : 		// WORK
; 198  : 		int* boneIndices = __GetMeshBoneIndices(m);

  000bd	ff 75 d4	 push	 DWORD PTR _m$5[ebp]
  000c0	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ?__GetMeshBoneIndices@CGrannyModelInstance@@IBEPAHI@Z ; CGrannyModelInstance::__GetMeshBoneIndices
  000c8	89 45 c0	 mov	 DWORD PTR _boneIndices$1[ebp], eax

; 199  : 		// END_OF_WORK
; 200  : 		for (int b = 0; b < pgrnMesh->BoneBindingCount; ++b)

  000cb	83 65 d0 00	 and	 DWORD PTR _b$4[ebp], 0
  000cf	eb 07		 jmp	 SHORT $LN7@GetBoundBo
$LN5@GetBoundBo:
  000d1	8b 45 d0	 mov	 eax, DWORD PTR _b$4[ebp]
  000d4	40		 inc	 eax
  000d5	89 45 d0	 mov	 DWORD PTR _b$4[ebp], eax
$LN7@GetBoundBo:
  000d8	8b 45 cc	 mov	 eax, DWORD PTR _pgrnMesh$3[ebp]
  000db	8b 4d d0	 mov	 ecx, DWORD PTR _b$4[ebp]
  000de	3b 48 1c	 cmp	 ecx, DWORD PTR [eax+28]
  000e1	7d 48		 jge	 SHORT $LN6@GetBoundBo

; 201  : 		{
; 202  : 			const granny_bone_binding& rgrnBoneBinding = pgrnMesh->BoneBindings[b];

  000e3	6b 45 d0 24	 imul	 eax, DWORD PTR _b$4[ebp], 36
  000e7	8b 4d cc	 mov	 ecx, DWORD PTR _pgrnMesh$3[ebp]
  000ea	03 41 20	 add	 eax, DWORD PTR [ecx+32]
  000ed	89 45 c8	 mov	 DWORD PTR _rgrnBoneBinding$2[ebp], eax

; 203  : 
; 204  : 			MakeBoundBox(&BoundBox,

  000f0	ff 75 0c	 push	 DWORD PTR _vtMax$[ebp]
  000f3	ff 75 08	 push	 DWORD PTR _vtMin$[ebp]
  000f6	8b 45 c8	 mov	 eax, DWORD PTR _rgrnBoneBinding$2[ebp]
  000f9	83 c0 10	 add	 eax, 16			; 00000010H
  000fc	50		 push	 eax
  000fd	8b 45 c8	 mov	 eax, DWORD PTR _rgrnBoneBinding$2[ebp]
  00100	83 c0 04	 add	 eax, 4
  00103	50		 push	 eax
  00104	8b 45 d0	 mov	 eax, DWORD PTR _b$4[ebp]
  00107	8b 4d c0	 mov	 ecx, DWORD PTR _boneIndices$1[ebp]
  0010a	ff 34 81	 push	 DWORD PTR [ecx+eax*4]
  0010d	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00110	e8 00 00 00 00	 call	 ?__GetWorldPosePtr@CGrannyModelInstance@@IBEPAUgranny_world_pose@@XZ ; CGrannyModelInstance::__GetWorldPosePtr
  00115	50		 push	 eax
  00116	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetWorldPose4x4@8
  0011c	50		 push	 eax
  0011d	8d 45 dc	 lea	 eax, DWORD PTR _BoundBox$[ebp]
  00120	50		 push	 eax
  00121	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	e8 00 00 00 00	 call	 ?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z ; CGrannyModelInstance::MakeBoundBox

; 205  : 						 GrannyGetWorldPose4x4(__GetWorldPosePtr(), boneIndices[b]),
; 206  : 						 rgrnBoneBinding.OBBMin, rgrnBoneBinding.OBBMax, vtMin, vtMax);
; 207  : 		}

  00129	eb a6		 jmp	 SHORT $LN5@GetBoundBo
$LN6@GetBoundBo:

; 208  : 	}

  0012b	e9 63 ff ff ff	 jmp	 $LN2@GetBoundBo
$LN3@GetBoundBo:
$LN1@GetBoundBo:

; 209  : }

  00130	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00133	33 cd		 xor	 ecx, ebp
  00135	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013a	c9		 leave
  0013b	c2 08 00	 ret	 8
?GetBoundBox@CGrannyModelInstance@@QAEXPAUD3DXVECTOR3@@0@Z ENDP ; CGrannyModelInstance::GetBoundBox
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
;	COMDAT ?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
tv449 = -48						; size = 4
tv430 = -44						; size = 4
tv411 = -40						; size = 4
tv392 = -36						; size = 4
tv373 = -32						; size = 4
tv354 = -28						; size = 4
tv335 = -24						; size = 4
tv316 = -20						; size = 4
tv297 = -16						; size = 4
tv278 = -12						; size = 4
tv259 = -8						; size = 4
tv240 = -4						; size = 4
_pBoundBox$ = 8						; size = 4
_mat$ = 12						; size = 4
_OBBMin$ = 16						; size = 4
_OBBMax$ = 20						; size = 4
_vtMin$ = 24						; size = 4
_vtMax$ = 28						; size = 4
?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z PROC ; CGrannyModelInstance::MakeBoundBox, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 12   : 	pBoundBox->sx = OBBMin[0] * mat[0] + OBBMin[1] * mat[4] + OBBMin[2] * mat[8] + mat[12];

  0000a	6a 04		 push	 4
  0000c	58		 pop	 eax
  0000d	6b c0 00	 imul	 eax, eax, 0
  00010	6a 04		 push	 4
  00012	59		 pop	 ecx
  00013	6b c9 00	 imul	 ecx, ecx, 0
  00016	8b 55 10	 mov	 edx, DWORD PTR _OBBMin$[ebp]
  00019	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  0001c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00021	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  00026	6a 04		 push	 4
  00028	58		 pop	 eax
  00029	c1 e0 00	 shl	 eax, 0
  0002c	6a 04		 push	 4
  0002e	59		 pop	 ecx
  0002f	c1 e1 02	 shl	 ecx, 2
  00032	8b 55 10	 mov	 edx, DWORD PTR _OBBMin$[ebp]
  00035	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  00038	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0003d	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00042	f3 0f 58 c1	 addss	 xmm0, xmm1
  00046	6a 04		 push	 4
  00048	58		 pop	 eax
  00049	d1 e0		 shl	 eax, 1
  0004b	6a 04		 push	 4
  0004d	59		 pop	 ecx
  0004e	c1 e1 03	 shl	 ecx, 3
  00051	8b 55 10	 mov	 edx, DWORD PTR _OBBMin$[ebp]
  00054	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  00057	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0005c	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00061	f3 0f 58 c1	 addss	 xmm0, xmm1
  00065	6a 04		 push	 4
  00067	58		 pop	 eax
  00068	6b c0 0c	 imul	 eax, eax, 12
  0006b	8b 4d 0c	 mov	 ecx, DWORD PTR _mat$[ebp]
  0006e	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  00073	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  00076	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 13   : 	pBoundBox->sy = OBBMin[0] * mat[1] + OBBMin[1] * mat[5] + OBBMin[2] * mat[9] + mat[13];

  0007a	6a 04		 push	 4
  0007c	58		 pop	 eax
  0007d	6b c0 00	 imul	 eax, eax, 0
  00080	6a 04		 push	 4
  00082	59		 pop	 ecx
  00083	c1 e1 00	 shl	 ecx, 0
  00086	8b 55 10	 mov	 edx, DWORD PTR _OBBMin$[ebp]
  00089	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  0008c	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00091	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  00096	6a 04		 push	 4
  00098	58		 pop	 eax
  00099	c1 e0 00	 shl	 eax, 0
  0009c	6a 04		 push	 4
  0009e	59		 pop	 ecx
  0009f	6b c9 05	 imul	 ecx, ecx, 5
  000a2	8b 55 10	 mov	 edx, DWORD PTR _OBBMin$[ebp]
  000a5	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  000a8	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  000ad	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  000b2	f3 0f 58 c1	 addss	 xmm0, xmm1
  000b6	6a 04		 push	 4
  000b8	58		 pop	 eax
  000b9	d1 e0		 shl	 eax, 1
  000bb	6a 04		 push	 4
  000bd	59		 pop	 ecx
  000be	6b c9 09	 imul	 ecx, ecx, 9
  000c1	8b 55 10	 mov	 edx, DWORD PTR _OBBMin$[ebp]
  000c4	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  000c7	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  000cc	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  000d1	f3 0f 58 c1	 addss	 xmm0, xmm1
  000d5	6a 04		 push	 4
  000d7	58		 pop	 eax
  000d8	6b c0 0d	 imul	 eax, eax, 13
  000db	8b 4d 0c	 mov	 ecx, DWORD PTR _mat$[ebp]
  000de	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  000e3	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  000e6	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 14   : 	pBoundBox->sz = OBBMin[0] * mat[2] + OBBMin[1] * mat[6] + OBBMin[2] * mat[10] + mat[14];

  000eb	6a 04		 push	 4
  000ed	58		 pop	 eax
  000ee	6b c0 00	 imul	 eax, eax, 0
  000f1	6a 04		 push	 4
  000f3	59		 pop	 ecx
  000f4	d1 e1		 shl	 ecx, 1
  000f6	8b 55 10	 mov	 edx, DWORD PTR _OBBMin$[ebp]
  000f9	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  000fc	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00101	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  00106	6a 04		 push	 4
  00108	58		 pop	 eax
  00109	c1 e0 00	 shl	 eax, 0
  0010c	6a 04		 push	 4
  0010e	59		 pop	 ecx
  0010f	6b c9 06	 imul	 ecx, ecx, 6
  00112	8b 55 10	 mov	 edx, DWORD PTR _OBBMin$[ebp]
  00115	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  00118	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0011d	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00122	f3 0f 58 c1	 addss	 xmm0, xmm1
  00126	6a 04		 push	 4
  00128	58		 pop	 eax
  00129	d1 e0		 shl	 eax, 1
  0012b	6a 04		 push	 4
  0012d	59		 pop	 ecx
  0012e	6b c9 0a	 imul	 ecx, ecx, 10
  00131	8b 55 10	 mov	 edx, DWORD PTR _OBBMin$[ebp]
  00134	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  00137	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0013c	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00141	f3 0f 58 c1	 addss	 xmm0, xmm1
  00145	6a 04		 push	 4
  00147	58		 pop	 eax
  00148	6b c0 0e	 imul	 eax, eax, 14
  0014b	8b 4d 0c	 mov	 ecx, DWORD PTR _mat$[ebp]
  0014e	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  00153	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  00156	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 15   : 
; 16   : 	pBoundBox->ex = OBBMax[0] * mat[0] + OBBMax[1] * mat[4] + OBBMax[2] * mat[8] + mat[12];

  0015b	6a 04		 push	 4
  0015d	58		 pop	 eax
  0015e	6b c0 00	 imul	 eax, eax, 0
  00161	6a 04		 push	 4
  00163	59		 pop	 ecx
  00164	6b c9 00	 imul	 ecx, ecx, 0
  00167	8b 55 14	 mov	 edx, DWORD PTR _OBBMax$[ebp]
  0016a	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  0016d	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00172	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  00177	6a 04		 push	 4
  00179	58		 pop	 eax
  0017a	c1 e0 00	 shl	 eax, 0
  0017d	6a 04		 push	 4
  0017f	59		 pop	 ecx
  00180	c1 e1 02	 shl	 ecx, 2
  00183	8b 55 14	 mov	 edx, DWORD PTR _OBBMax$[ebp]
  00186	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  00189	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0018e	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00193	f3 0f 58 c1	 addss	 xmm0, xmm1
  00197	6a 04		 push	 4
  00199	58		 pop	 eax
  0019a	d1 e0		 shl	 eax, 1
  0019c	6a 04		 push	 4
  0019e	59		 pop	 ecx
  0019f	c1 e1 03	 shl	 ecx, 3
  001a2	8b 55 14	 mov	 edx, DWORD PTR _OBBMax$[ebp]
  001a5	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  001a8	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  001ad	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  001b2	f3 0f 58 c1	 addss	 xmm0, xmm1
  001b6	6a 04		 push	 4
  001b8	58		 pop	 eax
  001b9	6b c0 0c	 imul	 eax, eax, 12
  001bc	8b 4d 0c	 mov	 ecx, DWORD PTR _mat$[ebp]
  001bf	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  001c4	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  001c7	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0

; 17   : 	pBoundBox->ey = OBBMax[0] * mat[1] + OBBMax[1] * mat[5] + OBBMax[2] * mat[9] + mat[13];

  001cc	6a 04		 push	 4
  001ce	58		 pop	 eax
  001cf	6b c0 00	 imul	 eax, eax, 0
  001d2	6a 04		 push	 4
  001d4	59		 pop	 ecx
  001d5	c1 e1 00	 shl	 ecx, 0
  001d8	8b 55 14	 mov	 edx, DWORD PTR _OBBMax$[ebp]
  001db	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  001de	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  001e3	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  001e8	6a 04		 push	 4
  001ea	58		 pop	 eax
  001eb	c1 e0 00	 shl	 eax, 0
  001ee	6a 04		 push	 4
  001f0	59		 pop	 ecx
  001f1	6b c9 05	 imul	 ecx, ecx, 5
  001f4	8b 55 14	 mov	 edx, DWORD PTR _OBBMax$[ebp]
  001f7	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  001fa	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  001ff	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00204	f3 0f 58 c1	 addss	 xmm0, xmm1
  00208	6a 04		 push	 4
  0020a	58		 pop	 eax
  0020b	d1 e0		 shl	 eax, 1
  0020d	6a 04		 push	 4
  0020f	59		 pop	 ecx
  00210	6b c9 09	 imul	 ecx, ecx, 9
  00213	8b 55 14	 mov	 edx, DWORD PTR _OBBMax$[ebp]
  00216	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  00219	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0021e	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00223	f3 0f 58 c1	 addss	 xmm0, xmm1
  00227	6a 04		 push	 4
  00229	58		 pop	 eax
  0022a	6b c0 0d	 imul	 eax, eax, 13
  0022d	8b 4d 0c	 mov	 ecx, DWORD PTR _mat$[ebp]
  00230	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  00235	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  00238	f3 0f 11 40 10	 movss	 DWORD PTR [eax+16], xmm0

; 18   : 	pBoundBox->ez = OBBMax[0] * mat[2] + OBBMax[1] * mat[6] + OBBMax[2] * mat[10] + mat[14];

  0023d	6a 04		 push	 4
  0023f	58		 pop	 eax
  00240	6b c0 00	 imul	 eax, eax, 0
  00243	6a 04		 push	 4
  00245	59		 pop	 ecx
  00246	d1 e1		 shl	 ecx, 1
  00248	8b 55 14	 mov	 edx, DWORD PTR _OBBMax$[ebp]
  0024b	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  0024e	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00253	f3 0f 59 04 0e	 mulss	 xmm0, DWORD PTR [esi+ecx]
  00258	6a 04		 push	 4
  0025a	58		 pop	 eax
  0025b	c1 e0 00	 shl	 eax, 0
  0025e	6a 04		 push	 4
  00260	59		 pop	 ecx
  00261	6b c9 06	 imul	 ecx, ecx, 6
  00264	8b 55 14	 mov	 edx, DWORD PTR _OBBMax$[ebp]
  00267	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  0026a	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0026f	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00274	f3 0f 58 c1	 addss	 xmm0, xmm1
  00278	6a 04		 push	 4
  0027a	58		 pop	 eax
  0027b	d1 e0		 shl	 eax, 1
  0027d	6a 04		 push	 4
  0027f	59		 pop	 ecx
  00280	6b c9 0a	 imul	 ecx, ecx, 10
  00283	8b 55 14	 mov	 edx, DWORD PTR _OBBMax$[ebp]
  00286	8b 75 0c	 mov	 esi, DWORD PTR _mat$[ebp]
  00289	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  0028e	f3 0f 59 0c 0e	 mulss	 xmm1, DWORD PTR [esi+ecx]
  00293	f3 0f 58 c1	 addss	 xmm0, xmm1
  00297	6a 04		 push	 4
  00299	58		 pop	 eax
  0029a	6b c0 0e	 imul	 eax, eax, 14
  0029d	8b 4d 0c	 mov	 ecx, DWORD PTR _mat$[ebp]
  002a0	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  002a5	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  002a8	f3 0f 11 40 14	 movss	 DWORD PTR [eax+20], xmm0

; 19   : 
; 20   : 	vtMin->x = min(vtMin->x, pBoundBox->sx);

  002ad	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  002b0	8b 4d 18	 mov	 ecx, DWORD PTR _vtMin$[ebp]
  002b3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002b7	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  002ba	76 0e		 jbe	 SHORT $LN3@MakeBoundB
  002bc	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  002bf	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002c3	f3 0f 11 45 fc	 movss	 DWORD PTR tv240[ebp], xmm0
  002c8	eb 0c		 jmp	 SHORT $LN4@MakeBoundB
$LN3@MakeBoundB:
  002ca	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  002cd	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002d1	f3 0f 11 45 fc	 movss	 DWORD PTR tv240[ebp], xmm0
$LN4@MakeBoundB:
  002d6	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  002d9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv240[ebp]
  002de	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 21   : 	vtMin->x = min(vtMin->x, pBoundBox->ex);

  002e2	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  002e5	8b 4d 18	 mov	 ecx, DWORD PTR _vtMin$[ebp]
  002e8	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  002ed	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  002f0	76 0e		 jbe	 SHORT $LN5@MakeBoundB
  002f2	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  002f5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002f9	f3 0f 11 45 f8	 movss	 DWORD PTR tv259[ebp], xmm0
  002fe	eb 0d		 jmp	 SHORT $LN6@MakeBoundB
$LN5@MakeBoundB:
  00300	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  00303	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00308	f3 0f 11 45 f8	 movss	 DWORD PTR tv259[ebp], xmm0
$LN6@MakeBoundB:
  0030d	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  00310	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv259[ebp]
  00315	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 22   : 	vtMin->y = min(vtMin->y, pBoundBox->sy);

  00319	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  0031c	8b 4d 18	 mov	 ecx, DWORD PTR _vtMin$[ebp]
  0031f	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00324	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [ecx+4]
  00328	76 0f		 jbe	 SHORT $LN7@MakeBoundB
  0032a	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  0032d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00332	f3 0f 11 45 f4	 movss	 DWORD PTR tv278[ebp], xmm0
  00337	eb 0d		 jmp	 SHORT $LN8@MakeBoundB
$LN7@MakeBoundB:
  00339	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  0033c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00341	f3 0f 11 45 f4	 movss	 DWORD PTR tv278[ebp], xmm0
$LN8@MakeBoundB:
  00346	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  00349	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv278[ebp]
  0034e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 23   : 	vtMin->y = min(vtMin->y, pBoundBox->ey);

  00353	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  00356	8b 4d 18	 mov	 ecx, DWORD PTR _vtMin$[ebp]
  00359	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0035e	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [ecx+4]
  00362	76 0f		 jbe	 SHORT $LN9@MakeBoundB
  00364	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  00367	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0036c	f3 0f 11 45 f0	 movss	 DWORD PTR tv297[ebp], xmm0
  00371	eb 0d		 jmp	 SHORT $LN10@MakeBoundB
$LN9@MakeBoundB:
  00373	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  00376	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0037b	f3 0f 11 45 f0	 movss	 DWORD PTR tv297[ebp], xmm0
$LN10@MakeBoundB:
  00380	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  00383	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR tv297[ebp]
  00388	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 24   : 	vtMin->z = min(vtMin->z, pBoundBox->sz);

  0038d	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  00390	8b 4d 18	 mov	 ecx, DWORD PTR _vtMin$[ebp]
  00393	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00398	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [ecx+8]
  0039c	76 0f		 jbe	 SHORT $LN11@MakeBoundB
  0039e	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  003a1	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  003a6	f3 0f 11 45 ec	 movss	 DWORD PTR tv316[ebp], xmm0
  003ab	eb 0d		 jmp	 SHORT $LN12@MakeBoundB
$LN11@MakeBoundB:
  003ad	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  003b0	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  003b5	f3 0f 11 45 ec	 movss	 DWORD PTR tv316[ebp], xmm0
$LN12@MakeBoundB:
  003ba	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  003bd	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv316[ebp]
  003c2	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 25   : 	vtMin->z = min(vtMin->z, pBoundBox->ez);

  003c7	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  003ca	8b 4d 18	 mov	 ecx, DWORD PTR _vtMin$[ebp]
  003cd	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  003d2	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [ecx+8]
  003d6	76 0f		 jbe	 SHORT $LN13@MakeBoundB
  003d8	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  003db	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  003e0	f3 0f 11 45 e8	 movss	 DWORD PTR tv335[ebp], xmm0
  003e5	eb 0d		 jmp	 SHORT $LN14@MakeBoundB
$LN13@MakeBoundB:
  003e7	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  003ea	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  003ef	f3 0f 11 45 e8	 movss	 DWORD PTR tv335[ebp], xmm0
$LN14@MakeBoundB:
  003f4	8b 45 18	 mov	 eax, DWORD PTR _vtMin$[ebp]
  003f7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR tv335[ebp]
  003fc	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 26   : 
; 27   : 	vtMax->x = max(vtMax->x, pBoundBox->sx);

  00401	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00404	8b 4d 08	 mov	 ecx, DWORD PTR _pBoundBox$[ebp]
  00407	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0040b	0f 2f 01	 comiss	 xmm0, DWORD PTR [ecx]
  0040e	76 0e		 jbe	 SHORT $LN15@MakeBoundB
  00410	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00413	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00417	f3 0f 11 45 e4	 movss	 DWORD PTR tv354[ebp], xmm0
  0041c	eb 0c		 jmp	 SHORT $LN16@MakeBoundB
$LN15@MakeBoundB:
  0041e	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  00421	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00425	f3 0f 11 45 e4	 movss	 DWORD PTR tv354[ebp], xmm0
$LN16@MakeBoundB:
  0042a	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  0042d	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR tv354[ebp]
  00432	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 28   : 	vtMax->x = max(vtMax->x, pBoundBox->ex);

  00436	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00439	8b 4d 08	 mov	 ecx, DWORD PTR _pBoundBox$[ebp]
  0043c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00440	0f 2f 41 0c	 comiss	 xmm0, DWORD PTR [ecx+12]
  00444	76 0e		 jbe	 SHORT $LN17@MakeBoundB
  00446	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00449	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0044d	f3 0f 11 45 e0	 movss	 DWORD PTR tv373[ebp], xmm0
  00452	eb 0d		 jmp	 SHORT $LN18@MakeBoundB
$LN17@MakeBoundB:
  00454	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  00457	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0045c	f3 0f 11 45 e0	 movss	 DWORD PTR tv373[ebp], xmm0
$LN18@MakeBoundB:
  00461	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00464	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR tv373[ebp]
  00469	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 29   : 	vtMax->y = max(vtMax->y, pBoundBox->sy);

  0046d	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00470	8b 4d 08	 mov	 ecx, DWORD PTR _pBoundBox$[ebp]
  00473	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00478	0f 2f 41 04	 comiss	 xmm0, DWORD PTR [ecx+4]
  0047c	76 0f		 jbe	 SHORT $LN19@MakeBoundB
  0047e	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00481	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00486	f3 0f 11 45 dc	 movss	 DWORD PTR tv392[ebp], xmm0
  0048b	eb 0d		 jmp	 SHORT $LN20@MakeBoundB
$LN19@MakeBoundB:
  0048d	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  00490	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00495	f3 0f 11 45 dc	 movss	 DWORD PTR tv392[ebp], xmm0
$LN20@MakeBoundB:
  0049a	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  0049d	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv392[ebp]
  004a2	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 30   : 	vtMax->y = max(vtMax->y, pBoundBox->ey);

  004a7	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  004aa	8b 4d 08	 mov	 ecx, DWORD PTR _pBoundBox$[ebp]
  004ad	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  004b2	0f 2f 41 10	 comiss	 xmm0, DWORD PTR [ecx+16]
  004b6	76 0f		 jbe	 SHORT $LN21@MakeBoundB
  004b8	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  004bb	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  004c0	f3 0f 11 45 d8	 movss	 DWORD PTR tv411[ebp], xmm0
  004c5	eb 0d		 jmp	 SHORT $LN22@MakeBoundB
$LN21@MakeBoundB:
  004c7	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  004ca	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  004cf	f3 0f 11 45 d8	 movss	 DWORD PTR tv411[ebp], xmm0
$LN22@MakeBoundB:
  004d4	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  004d7	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv411[ebp]
  004dc	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 31   : 	vtMax->z = max(vtMax->z, pBoundBox->sz);

  004e1	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  004e4	8b 4d 08	 mov	 ecx, DWORD PTR _pBoundBox$[ebp]
  004e7	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  004ec	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [ecx+8]
  004f0	76 0f		 jbe	 SHORT $LN23@MakeBoundB
  004f2	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  004f5	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  004fa	f3 0f 11 45 d4	 movss	 DWORD PTR tv430[ebp], xmm0
  004ff	eb 0d		 jmp	 SHORT $LN24@MakeBoundB
$LN23@MakeBoundB:
  00501	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  00504	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00509	f3 0f 11 45 d4	 movss	 DWORD PTR tv430[ebp], xmm0
$LN24@MakeBoundB:
  0050e	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  00511	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR tv430[ebp]
  00516	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 32   : 	vtMax->z = max(vtMax->z, pBoundBox->ez);

  0051b	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  0051e	8b 4d 08	 mov	 ecx, DWORD PTR _pBoundBox$[ebp]
  00521	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00526	0f 2f 41 14	 comiss	 xmm0, DWORD PTR [ecx+20]
  0052a	76 0f		 jbe	 SHORT $LN25@MakeBoundB
  0052c	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  0052f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00534	f3 0f 11 45 d0	 movss	 DWORD PTR tv449[ebp], xmm0
  00539	eb 0d		 jmp	 SHORT $LN26@MakeBoundB
$LN25@MakeBoundB:
  0053b	8b 45 08	 mov	 eax, DWORD PTR _pBoundBox$[ebp]
  0053e	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00543	f3 0f 11 45 d0	 movss	 DWORD PTR tv449[ebp], xmm0
$LN26@MakeBoundB:
  00548	8b 45 1c	 mov	 eax, DWORD PTR _vtMax$[ebp]
  0054b	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR tv449[ebp]
  00550	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 33   : }

  00555	5e		 pop	 esi
  00556	c9		 leave
  00557	c2 18 00	 ret	 24			; 00000018H
?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z ENDP ; CGrannyModelInstance::MakeBoundBox
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
;	COMDAT ?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z
_TEXT	SEGMENT
_u$ = -92						; size = 4
_v$ = -88						; size = 4
_t$ = -84						; size = 4
_Transform$2 = -80					; size = 4
_meshCount$ = -76					; size = 4
_rgrnBoneBinding$3 = -72				; size = 4
_pgrnMesh$4 = -68					; size = 4
_max$ = -64						; size = 4
_pBoundBox$5 = -60					; size = 4
_b$6 = -56						; size = 4
_m$7 = -52						; size = 4
_this$ = -48						; size = 4
_ret$ = -41						; size = 1
_vtMin$ = -40						; size = 12
_vtMax$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_pMatrix$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
_pt$ = 20						; size = 4
?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z PROC ; CGrannyModelInstance::Intersect, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	if (!m_pgrnModelInstance)

  0002b	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00032	75 07		 jne	 SHORT $LN9@Intersect

; 39   : 		return false;

  00034	32 c0		 xor	 al, al
  00036	e9 0c 02 00 00	 jmp	 $LN1@Intersect
$LN9@Intersect:

; 40   : 
; 41   : 	float u, v, t;
; 42   : 	bool ret = false;

  0003b	c6 45 d7 00	 mov	 BYTE PTR _ret$[ebp], 0

; 43   : 	*pt = 100000000.0f;

  0003f	8b 45 14	 mov	 eax, DWORD PTR _pt$[ebp]
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4cbebc20
  0004a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 44   : 
; 45   : 	float max = 10000000.0f;

  0004e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4b189680
  00056	f3 0f 11 45 c0	 movss	 DWORD PTR _max$[ebp], xmm0

; 46   : 	D3DXVECTOR3 vtMin, vtMax;
; 47   : 	vtMin.x = vtMin.y = vtMin.z = max;

  0005b	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _max$[ebp]
  00060	f3 0f 11 45 e0	 movss	 DWORD PTR _vtMin$[ebp+8], xmm0
  00065	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _vtMin$[ebp+8]
  0006a	f3 0f 11 45 dc	 movss	 DWORD PTR _vtMin$[ebp+4], xmm0
  0006f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _vtMin$[ebp+4]
  00074	f3 0f 11 45 d8	 movss	 DWORD PTR _vtMin$[ebp], xmm0

; 48   : 	vtMax.x = vtMax.y = vtMax.z = -max;

  00079	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _max$[ebp]
  0007e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00085	f3 0f 11 45 ec	 movss	 DWORD PTR _vtMax$[ebp+8], xmm0
  0008a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _vtMax$[ebp+8]
  0008f	f3 0f 11 45 e8	 movss	 DWORD PTR _vtMax$[ebp+4], xmm0
  00094	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _vtMax$[ebp+4]
  00099	f3 0f 11 45 e4	 movss	 DWORD PTR _vtMax$[ebp], xmm0

; 49   : 
; 50   : 	static stl_stack_pool<TBoundBox> s_boundBoxPool(1024);

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  000a3	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  000aa	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA
  000b3	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR __Init_thread_epoch[eax]
  000b9	7e 41		 jle	 SHORT $LN2@Intersect
  000bb	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA
  000c0	e8 00 00 00 00	 call	 __Init_thread_header
  000c5	59		 pop	 ecx
  000c6	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA, -1
  000cd	75 2d		 jne	 SHORT $LN2@Intersect
  000cf	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  000d3	68 00 04 00 00	 push	 1024			; 00000400H
  000d8	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A
  000dd	e8 00 00 00 00	 call	 ??0?$stl_stack_pool@USBoundBox@@@@QAE@H@Z ; stl_stack_pool<SBoundBox>::stl_stack_pool<SBoundBox>
  000e2	68 00 00 00 00	 push	 OFFSET ??__Fs_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@YAXXZ ; `CGrannyModelInstance::Intersect'::`2'::`dynamic atexit destructor for 's_boundBoxPool''
  000e7	e8 00 00 00 00	 call	 _atexit
  000ec	59		 pop	 ecx
  000ed	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000f1	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA
  000f6	e8 00 00 00 00	 call	 __Init_thread_footer
  000fb	59		 pop	 ecx
$LN2@Intersect:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h

; 266  : 			m_pos = 0;

  000fc	83 25 04 00 00
	00 00		 and	 DWORD PTR ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A+4, 0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\ModelInstanceCollisionDetection.cpp

; 53   : 	int meshCount = m_pModel->GetMeshCount();

  00103	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00106	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00109	e8 00 00 00 00	 call	 ?GetMeshCount@CGrannyModel@@QBEHXZ ; CGrannyModel::GetMeshCount
  0010e	89 45 b4	 mov	 DWORD PTR _meshCount$[ebp], eax

; 54   : 
; 55   : 	for (int m = 0; m < meshCount; ++m)

  00111	83 65 cc 00	 and	 DWORD PTR _m$7[ebp], 0
  00115	eb 07		 jmp	 SHORT $LN5@Intersect
$LN3@Intersect:
  00117	8b 45 cc	 mov	 eax, DWORD PTR _m$7[ebp]
  0011a	40		 inc	 eax
  0011b	89 45 cc	 mov	 DWORD PTR _m$7[ebp], eax
$LN5@Intersect:
  0011e	8b 45 cc	 mov	 eax, DWORD PTR _m$7[ebp]
  00121	3b 45 b4	 cmp	 eax, DWORD PTR _meshCount$[ebp]
  00124	0f 8d ac 00 00
	00		 jge	 $LN4@Intersect

; 56   : 	{
; 57   : 		//const CGrannyMesh * pMesh = m_pModel->GetMeshPointer(m);
; 58   : 		const granny_mesh * pgrnMesh = m_pModel->GetGrannyModelPointer()->MeshBindings[m].Mesh;

  0012a	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0012d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00130	e8 00 00 00 00	 call	 ?GetGrannyModelPointer@CGrannyModel@@QAEPAUgranny_model@@XZ ; CGrannyModel::GetGrannyModelPointer
  00135	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00138	8b 4d cc	 mov	 ecx, DWORD PTR _m$7[ebp]
  0013b	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0013e	89 45 bc	 mov	 DWORD PTR _pgrnMesh$4[ebp], eax

; 59   : 
; 60   : 		for (int b = 0; b < pgrnMesh->BoneBindingCount; ++b)

  00141	83 65 c8 00	 and	 DWORD PTR _b$6[ebp], 0
  00145	eb 07		 jmp	 SHORT $LN8@Intersect
$LN6@Intersect:
  00147	8b 45 c8	 mov	 eax, DWORD PTR _b$6[ebp]
  0014a	40		 inc	 eax
  0014b	89 45 c8	 mov	 DWORD PTR _b$6[ebp], eax
$LN8@Intersect:
  0014e	8b 45 bc	 mov	 eax, DWORD PTR _pgrnMesh$4[ebp]
  00151	8b 4d c8	 mov	 ecx, DWORD PTR _b$6[ebp]
  00154	3b 48 1c	 cmp	 ecx, DWORD PTR [eax+28]
  00157	7d 78		 jge	 SHORT $LN7@Intersect

; 61   : 		{
; 62   : 			const granny_bone_binding& rgrnBoneBinding = pgrnMesh->BoneBindings[b];

  00159	6b 45 c8 24	 imul	 eax, DWORD PTR _b$6[ebp], 36
  0015d	8b 4d bc	 mov	 ecx, DWORD PTR _pgrnMesh$4[ebp]
  00160	03 41 20	 add	 eax, DWORD PTR [ecx+32]
  00163	89 45 b8	 mov	 DWORD PTR _rgrnBoneBinding$3[ebp], eax

; 63   : 
; 64   : 			TBoundBox * pBoundBox = s_boundBoxPool.alloc();

  00166	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_boundBoxPool@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4V?$stl_stack_pool@USBoundBox@@@@A
  0016b	e8 00 00 00 00	 call	 ?alloc@?$stl_stack_pool@USBoundBox@@@@QAEPAUSBoundBox@@XZ ; stl_stack_pool<SBoundBox>::alloc
  00170	89 45 c4	 mov	 DWORD PTR _pBoundBox$5[ebp], eax

; 65   : 
; 66   : 			// WORK
; 67   : 			float * Transform = GrannyGetWorldPose4x4(__GetWorldPosePtr(), __GetMeshBoneIndices(m)[b]);

  00173	ff 75 cc	 push	 DWORD PTR _m$7[ebp]
  00176	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00179	e8 00 00 00 00	 call	 ?__GetMeshBoneIndices@CGrannyModelInstance@@IBEPAHI@Z ; CGrannyModelInstance::__GetMeshBoneIndices
  0017e	8b 4d c8	 mov	 ecx, DWORD PTR _b$6[ebp]
  00181	ff 34 88	 push	 DWORD PTR [eax+ecx*4]
  00184	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00187	e8 00 00 00 00	 call	 ?__GetWorldPosePtr@CGrannyModelInstance@@IBEPAUgranny_world_pose@@XZ ; CGrannyModelInstance::__GetWorldPosePtr
  0018c	50		 push	 eax
  0018d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetWorldPose4x4@8
  00193	89 45 b0	 mov	 DWORD PTR _Transform$2[ebp], eax

; 68   : 			// END_OF_WORK
; 69   : 
; 70   : 			MakeBoundBox(pBoundBox,

  00196	8d 45 e4	 lea	 eax, DWORD PTR _vtMax$[ebp]
  00199	50		 push	 eax
  0019a	8d 45 d8	 lea	 eax, DWORD PTR _vtMin$[ebp]
  0019d	50		 push	 eax
  0019e	8b 45 b8	 mov	 eax, DWORD PTR _rgrnBoneBinding$3[ebp]
  001a1	83 c0 10	 add	 eax, 16			; 00000010H
  001a4	50		 push	 eax
  001a5	8b 45 b8	 mov	 eax, DWORD PTR _rgrnBoneBinding$3[ebp]
  001a8	83 c0 04	 add	 eax, 4
  001ab	50		 push	 eax
  001ac	ff 75 b0	 push	 DWORD PTR _Transform$2[ebp]
  001af	ff 75 c4	 push	 DWORD PTR _pBoundBox$5[ebp]
  001b2	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  001b5	e8 00 00 00 00	 call	 ?MakeBoundBox@CGrannyModelInstance@@QAEXPAUSBoundBox@@PBM11PAUD3DXVECTOR3@@2@Z ; CGrannyModelInstance::MakeBoundBox

; 71   : 						 Transform,
; 72   : 						 rgrnBoneBinding.OBBMin,
; 73   : 						 rgrnBoneBinding.OBBMax,
; 74   : 						 &vtMin,
; 75   : 						 &vtMax);
; 76   : 
; 77   : 			pBoundBox->meshIndex = m;

  001ba	8b 45 c4	 mov	 eax, DWORD PTR _pBoundBox$5[ebp]
  001bd	8b 4d cc	 mov	 ecx, DWORD PTR _m$7[ebp]
  001c0	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 78   : 			pBoundBox->boneIndex = b;

  001c3	8b 45 c4	 mov	 eax, DWORD PTR _pBoundBox$5[ebp]
  001c6	8b 4d c8	 mov	 ecx, DWORD PTR _b$6[ebp]
  001c9	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 79   : 		}

  001cc	e9 76 ff ff ff	 jmp	 $LN6@Intersect
$LN7@Intersect:

; 80   : 	}

  001d1	e9 41 ff ff ff	 jmp	 $LN3@Intersect
$LN4@Intersect:

; 81   : 
; 82   : 	if (!IntersectCube(c_pMatrix,

  001d6	8d 45 ac	 lea	 eax, DWORD PTR _t$[ebp]
  001d9	50		 push	 eax
  001da	8d 45 a8	 lea	 eax, DWORD PTR _v$[ebp]
  001dd	50		 push	 eax
  001de	8d 45 a4	 lea	 eax, DWORD PTR _u$[ebp]
  001e1	50		 push	 eax
  001e2	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayDir
  001e7	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayOrig
  001ec	51		 push	 ecx
  001ed	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _vtMax$[ebp+8]
  001f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f7	51		 push	 ecx
  001f8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _vtMax$[ebp+4]
  001fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00202	51		 push	 ecx
  00203	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _vtMax$[ebp]
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	51		 push	 ecx
  0020e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _vtMin$[ebp+8]
  00213	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00218	51		 push	 ecx
  00219	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _vtMin$[ebp+4]
  0021e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00223	51		 push	 ecx
  00224	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _vtMin$[ebp]
  00229	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0022e	ff 75 08	 push	 DWORD PTR _c_pMatrix$[ebp]
  00231	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00234	e8 00 00 00 00	 call	 ?IntersectCube@CGraphicCollisionObject@@IAE_NPBUD3DXMATRIX@@MMMMMMAAUD3DXVECTOR3@@1PAM22@Z ; CGraphicCollisionObject::IntersectCube
  00239	0f b6 c0	 movzx	 eax, al
  0023c	85 c0		 test	 eax, eax
  0023e	75 05		 jne	 SHORT $LN10@Intersect

; 83   : 					   vtMin.x, vtMin.y, vtMin.z,
; 84   : 					   vtMax.x, vtMax.y, vtMax.z,
; 85   : 					   ms_vtPickRayOrig, ms_vtPickRayDir,
; 86   : 					   &u, &v, &t))
; 87   : 	{
; 88   : 		return ret;

  00240	8a 45 d7	 mov	 al, BYTE PTR _ret$[ebp]
  00243	eb 02		 jmp	 SHORT $LN1@Intersect
$LN10@Intersect:

; 89   : 	}
; 90   : 
; 91   : 	return true;

  00245	b0 01		 mov	 al, 1
$LN1@Intersect:

; 92   : 
; 93   : /*
; 94   : 	TBoundBox* boundBoxs = s_boundBoxPool.base();
; 95   : 	for (int i = 0; i < s_boundBoxPool.size(); ++i)
; 96   : 	{
; 97   : 		TBoundBox& rcurBoundBox=boundBoxs[i];
; 98   : 
; 99   : 		if (!IntersectBoundBox(c_pMatrix, rcurBoundBox, &u, &v, &t)) 
; 100  : 			continue;
; 101  : 
; 102  : 		granny_matrix_4x4* pgrnMatCompositeBuffer = GrannyGetWorldPoseComposite4x4Array(m_pgrnWorldPose);
; 103  : 		const CGrannyMesh* c_pMesh = m_pModel->GetMeshPointer(rcurBoundBox.meshIndex);
; 104  : 		const granny_mesh* c_pgrnMesh = c_pMesh->GetGrannyMeshPointer();
; 105  : 
; 106  : 		if (!GrannyMeshIsRigid(c_pgrnMesh))
; 107  : 		{
; 108  : 			//continue;
; 109  : 			ret = true;
; 110  : 		}
; 111  : 		else
; 112  : 		{
; 113  : 			D3DXMATRIX matMesh;
; 114  : 			int* toBoneIndices = c_pMesh->GetBoneIndices();
; 115  : 			D3DXMatrixMultiply(&matMesh, (D3DXMATRIX*) pgrnMatCompositeBuffer[toBoneIndices[0]], c_pMatrix);
; 116  : 
; 117  : 			granny_tri_material_group* pgrnTriGroups = GrannyGetMeshTriangleGroups(c_pgrnMesh);
; 118  : 			int mtrlCount = c_pMesh->GetGrannyMeshPointer()->MaterialBindingCount;
; 119  : 			int vtxCount = GrannyGetMeshVertexCount(c_pgrnMesh);
; 120  : 			int groupCount = GrannyGetMeshTriangleGroupCount(c_pgrnMesh);
; 121  : 
; 122  : 			TIndex*	modelIndices;
; 123  : 			TPNTVertex*	modelVertices;
; 124  : 
; 125  : 			if (m_pModel->LockVertices((void**)&modelIndices, (void**)&modelVertices))
; 126  : 			{
; 127  : 				TIndex* meshIndices = modelIndices + c_pMesh->GetIndexBasePosition();
; 128  : 				TPNTVertex* meshVertices = modelVertices + c_pMesh->GetVertexBasePosition();
; 129  : 
; 130  : 				for (int i = 0; i < groupCount; ++i)
; 131  : 				{
; 132  : 					granny_tri_material_group& rgrnTriGroup = pgrnTriGroups[i];
; 133  : 
; 134  : 					if (rgrnTriGroup.MaterialIndex < 0 || rgrnTriGroup.MaterialIndex >= mtrlCount)
; 135  : 						continue;
; 136  : 
; 137  : 					if (IntersectMesh(&matMesh,
; 138  : 									  meshVertices,
; 139  : 									  sizeof(TPNTVertex),
; 140  : 									  vtxCount,
; 141  : 									  meshIndices,
; 142  : 									  GrannyGetMeshIndexCount(c_pgrnMesh),
; 143  : 									  ms_vtPickRayOrig,
; 144  : 									  ms_vtPickRayDir,
; 145  : 									  &u, &v, &t))
; 146  : 					{
; 147  : 						ret = true;
; 148  : 						break;
; 149  : 					}
; 150  : 				}
; 151  : 				
; 152  : 				m_pModel->UnlockVertices();
; 153  : 			}
; 154  : 		}
; 155  : 
; 156  : 		if (ret)
; 157  : 		{
; 158  : 			*pu = u;
; 159  : 			*pv = v;
; 160  : 			*pt = -t;
; 161  : 
; 162  : 			if (c_szModelName)
; 163  : 			{
; 164  : 				if (!strncmp(c_pgrnMesh->Name, c_szModelName, strlen(c_szModelName)))
; 165  : 					return ret;
; 166  : 
; 167  : 				ret = false;
; 168  : 				continue;
; 169  : 			}
; 170  : 
; 171  : 			return ret;
; 172  : 		}
; 173  : 	}
; 174  : 
; 175  : 	return (ret);
; 176  : */
; 177  : }

  00247	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0024a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00251	59		 pop	 ecx
  00252	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00255	33 cd		 xor	 ecx, ebp
  00257	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025c	c9		 leave
  0025d	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Intersect@CGrannyModelInstance@@QAE_NPBUD3DXMATRIX@@PAM11@Z ENDP ; CGrannyModelInstance::Intersect
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterGrnLib\ModelInstanceCollisionDetection.cpp
;	COMDAT ?GetMeshMatrixPointer@CGrannyModelInstance@@QBE_NHPAPBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
_meshCount$ = -8					; size = 4
_this$ = -4						; size = 4
_iMesh$ = 8						; size = 4
_c_ppMatrix$ = 12					; size = 4
?GetMeshMatrixPointer@CGrannyModelInstance@@QBE_NHPAPBUD3DXMATRIX@@@Z PROC ; CGrannyModelInstance::GetMeshMatrixPointer, COMDAT
; _this$ = ecx

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 213  : 	if (!m_pgrnModelInstance)

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000f	75 04		 jne	 SHORT $LN2@GetMeshMat

; 214  : 		return false;

  00011	32 c0		 xor	 al, al
  00013	eb 42		 jmp	 SHORT $LN1@GetMeshMat
$LN2@GetMeshMat:

; 215  : 
; 216  : 	int meshCount = m_pModel->GetMeshCount();

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	e8 00 00 00 00	 call	 ?GetMeshCount@CGrannyModel@@QBEHXZ ; CGrannyModel::GetMeshCount
  00020	89 45 f8	 mov	 DWORD PTR _meshCount$[ebp], eax

; 217  : 
; 218  : 	if (meshCount <= 0)

  00023	83 7d f8 00	 cmp	 DWORD PTR _meshCount$[ebp], 0
  00027	7f 04		 jg	 SHORT $LN3@GetMeshMat

; 219  : 		return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 2a		 jmp	 SHORT $LN1@GetMeshMat
$LN3@GetMeshMat:

; 220  : 
; 221  : 	// WORK
; 222  : 	//const CGrannyMesh * pMesh = m_pModel->GetMeshPointer(iMesh);
; 223  : 	*c_ppMatrix = (D3DXMATRIX *)GrannyGetWorldPose4x4(__GetWorldPosePtr(), __GetMeshBoneIndices(iMesh)[0]);

  0002d	ff 75 08	 push	 DWORD PTR _iMesh$[ebp]
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?__GetMeshBoneIndices@CGrannyModelInstance@@IBEPAHI@Z ; CGrannyModelInstance::__GetMeshBoneIndices
  00038	6a 04		 push	 4
  0003a	59		 pop	 ecx
  0003b	6b c9 00	 imul	 ecx, ecx, 0
  0003e	ff 34 08	 push	 DWORD PTR [eax+ecx]
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?__GetWorldPosePtr@CGrannyModelInstance@@IBEPAUgranny_world_pose@@XZ ; CGrannyModelInstance::__GetWorldPosePtr
  00049	50		 push	 eax
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GrannyGetWorldPose4x4@8
  00050	8b 4d 0c	 mov	 ecx, DWORD PTR _c_ppMatrix$[ebp]
  00053	89 01		 mov	 DWORD PTR [ecx], eax

; 224  : 	// END_OF_WORK
; 225  : 
; 226  : 	return true;

  00055	b0 01		 mov	 al, 1
$LN1@GetMeshMat:

; 227  : }

  00057	c9		 leave
  00058	c2 08 00	 ret	 8
?GetMeshMatrixPointer@CGrannyModelInstance@@QBE_NHPAPBUD3DXMATRIX@@@Z ENDP ; CGrannyModelInstance::GetMeshMatrixPointer
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	83 c0 23	 add	 eax, 35			; 00000023H
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f4	 mov	 DWORD PTR __Ptr_user$[ebp], eax

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	6a 04		 push	 4
  0001d	58		 pop	 eax
  0001e	6b c0 ff	 imul	 eax, eax, -1
  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00024	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00027	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	2b 45 f8	 sub	 eax, DWORD PTR __Ptr_container$[ebp]
  00039	89 45 fc	 mov	 DWORD PTR __Back_shift$[ebp], eax
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00040	72 08		 jb	 SHORT $LN7@Adjust_man
  00042	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00046	77 02		 ja	 SHORT $LN7@Adjust_man
  00048	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0004f	33 c0		 xor	 eax, eax
  00051	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00053	33 c0		 xor	 eax, eax
  00055	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 130  :     {

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 141  :     {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c9		 leave
  0003d	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 0b		 je	 SHORT $LN3@what
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00023	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00026	c9		 leave
  00027	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx

; 74   :     }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
