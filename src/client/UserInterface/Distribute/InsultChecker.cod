; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?GetSingleton@CInsultChecker@@QAEAAV1@XZ	; CInsultChecker::GetSingleton
PUBLIC	??0CInsultChecker@@QAE@XZ			; CInsultChecker::CInsultChecker
PUBLIC	??1CInsultChecker@@UAE@XZ			; CInsultChecker::~CInsultChecker
PUBLIC	?Clear@CInsultChecker@@QAEXXZ			; CInsultChecker::Clear
PUBLIC	?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CInsultChecker::AppendInsult
PUBLIC	?IsInsultIn@CInsultChecker@@QAE_NPBDI@Z		; CInsultChecker::IsInsultIn
PUBLIC	?FilterInsult@CInsultChecker@@QAEXPADI@Z	; CInsultChecker::FilterInsult
PUBLIC	?__GetInsultLength@CInsultChecker@@AAE_NPBDPAI@Z ; CInsultChecker::__GetInsultLength
PUBLIC	?__IsInsult@CInsultChecker@@AAE_NPBD@Z		; CInsultChecker::__IsInsult
PUBLIC	??_GCInsultChecker@@UAEPAXI@Z			; CInsultChecker::`scalar deleting destructor'
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@1@PAU01@@Z ; std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *>::_Free_non_head<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >
PUBLIC	??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *,std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> * &>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >
PUBLIC	??$_Destroy_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *>
PUBLIC	??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *,std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> * const &>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CInsultChecker@@6B@				; CInsultChecker::`vftable'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	??_R4CInsultChecker@@6B@			; CInsultChecker::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCInsultChecker@@@8			; CInsultChecker `RTTI Type Descriptor'
PUBLIC	??_R3CInsultChecker@@8				; CInsultChecker::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CInsultChecker@@8				; CInsultChecker::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CInsultChecker@@8			; CInsultChecker::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?LocaleService_IsLeadByte@@YAHD@Z:PROC		; LocaleService_IsLeadByte
EXTRN	?LocaleService_StringCompareCI@@YAHPBD0I@Z:PROC	; LocaleService_StringCompareCI
EXTRN	??_ECInsultChecker@@UAEPAXI@Z:PROC		; CInsultChecker::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?s_kInsultChecker@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4V2@A
_BSS	SEGMENT
?s_kInsultChecker@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4V2@A DB 0cH DUP (?) ; `CInsultChecker::GetSingleton'::`2'::s_kInsultChecker
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4HA DD 01H DUP (?) ; `CInsultChecker::GetSingleton'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@CInsultChecker@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CInsultChecker@@8 DD FLAT:??_R0?AVCInsultChecker@@@8 ; CInsultChecker::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CInsultChecker@@8
rdata$r	ENDS
;	COMDAT ??_R2CInsultChecker@@8
rdata$r	SEGMENT
??_R2CInsultChecker@@8 DD FLAT:??_R1A@?0A@EA@CInsultChecker@@8 ; CInsultChecker::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CInsultChecker@@8
rdata$r	SEGMENT
??_R3CInsultChecker@@8 DD 00H				; CInsultChecker::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CInsultChecker@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCInsultChecker@@@8
data$rs	SEGMENT
??_R0?AVCInsultChecker@@@8 DD FLAT:??_7type_info@@6B@	; CInsultChecker `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCInsultChecker@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CInsultChecker@@6B@
rdata$r	SEGMENT
??_R4CInsultChecker@@6B@ DD 00H				; CInsultChecker::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCInsultChecker@@@8
	DD	FLAT:??_R3CInsultChecker@@8
rdata$r	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CInsultChecker@@6B@
CONST	SEGMENT
??_7CInsultChecker@@6B@ DD FLAT:??_R4CInsultChecker@@6B@ ; CInsultChecker::`vftable'
	DD	FLAT:??_ECInsultChecker@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
__ehfuncinfo$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@1@QAU21@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@1@QAU21@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??$_Emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@1@QAU21@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@1@QAU21@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$1
__ehfuncinfo$?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
__ehfuncinfo$?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSingleton@CInsultChecker@@QAEAAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSingleton@CInsultChecker@@QAEAAV1@XZ$0
__ehfuncinfo$?GetSingleton@CInsultChecker@@QAEAAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetSingleton@CInsultChecker@@QAEAAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *,std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *,std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *>, COMDAT

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >, COMDAT
; _this$ = ecx

; 1057 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN2@Alloc_cons

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6a 20		 push	 32			; 00000020H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0000f	83 c4 08	 add	 esp, 8
$LN2@Alloc_cons:

; 1058 :             _Al.deallocate(_Ptr, 1);
; 1059 :         }
; 1060 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@0@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *,std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *,std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Head$ = 12						; size = 4
??$_Free_non_head@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *>::_Free_non_head<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >, COMDAT

; 323  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 324  :         _Head->_Prev->_Next = nullptr;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Head$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 325  : 
; 326  :         auto _Pnode = _Head->_Next;

  00010	8b 36		 mov	 esi, DWORD PTR [esi]

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00012	85 f6		 test	 esi, esi
  00014	74 3c		 je	 SHORT $LN3@Free_non_h
  00016	57		 push	 edi
$LL4@Free_non_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2227 :         return _BUF_SIZE <= _Myres;

  00017	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 328  :             _Pnext = _Pnode->_Next;

  0001a	8b 3e		 mov	 edi, DWORD PTR [esi]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2227 :         return _BUF_SIZE <= _Myres;

  0001c	83 f8 10	 cmp	 eax, 16			; 00000010H

; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0001f	72 0d		 jb	 SHORT $LN17@Free_non_h

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;
; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);
; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00021	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00022	50		 push	 eax
  00023	ff 76 08	 push	 DWORD PTR [esi+8]
  00026	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0002b	83 c4 08	 add	 esp, 8
$LN17@Free_non_h:

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0002e	6a 20		 push	 32			; 00000020H
  00030	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  00031	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00038	c7 46 1c 0f 00
	00 00		 mov	 DWORD PTR [esi+28], 15	; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0003f	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00043	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00048	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 327  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0004b	8b f7		 mov	 esi, edi
  0004d	85 ff		 test	 edi, edi
  0004f	75 c6		 jne	 SHORT $LL4@Free_non_h
  00051	5f		 pop	 edi
$LN3@Free_non_h:
  00052	5e		 pop	 esi

; 329  :             _Freenode(_Al, _Pnode);
; 330  :         }
; 331  :     }

  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *>::_Free_non_head<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs_kInsultChecker@?1??GetSingleton@CInsultChecker@@QAEAAV1@XZ@YAXXZ
text$yd	SEGMENT
??__Fs_kInsultChecker@?1??GetSingleton@CInsultChecker@@QAEAAV1@XZ@YAXXZ PROC ; `CInsultChecker::GetSingleton'::`2'::`dynamic atexit destructor for 's_kInsultChecker'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kInsultChecker@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4V2@A
  00005	e9 00 00 00 00	 jmp	 ??1CInsultChecker@@UAE@XZ ; CInsultChecker::~CInsultChecker
??__Fs_kInsultChecker@?1??GetSingleton@CInsultChecker@@QAEAAV1@XZ@YAXXZ ENDP ; `CInsultChecker::GetSingleton'::`2'::`dynamic atexit destructor for 's_kInsultChecker''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCInsultChecker@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCInsultChecker@@UAEPAXI@Z PROC			; CInsultChecker::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CInsultChecker@@UAE@XZ ; CInsultChecker::~CInsultChecker
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 0c		 push	 12			; 0000000cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCInsultChecker@@UAEPAXI@Z ENDP			; CInsultChecker::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
;	COMDAT ?__IsInsult@CInsultChecker@@AAE_NPBD@Z
_TEXT	SEGMENT
_uInsultLen$ = -4					; size = 4
_c_szWord$ = 8						; size = 4
?__IsInsult@CInsultChecker@@AAE_NPBD@Z PROC		; CInsultChecker::__IsInsult, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 49   : 	UINT uInsultLen;
; 50   : 	return __GetInsultLength(c_szWord, &uInsultLen);

  00004	8d 45 fc	 lea	 eax, DWORD PTR _uInsultLen$[ebp]
  00007	50		 push	 eax
  00008	ff 75 08	 push	 DWORD PTR _c_szWord$[ebp]
  0000b	e8 00 00 00 00	 call	 ?__GetInsultLength@CInsultChecker@@AAE_NPBDPAI@Z ; CInsultChecker::__GetInsultLength

; 51   : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?__IsInsult@CInsultChecker@@AAE_NPBD@Z ENDP		; CInsultChecker::__IsInsult
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
;	COMDAT ?__GetInsultLength@CInsultChecker@@AAE_NPBDPAI@Z
_TEXT	SEGMENT
_c_szWord$ = 8						; size = 4
_puInsultLen$ = 12					; size = 4
?__GetInsultLength@CInsultChecker@@AAE_NPBDPAI@Z PROC	; CInsultChecker::__GetInsultLength, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 1092 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00008	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 39   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0000b	8b 30		 mov	 esi, DWORD PTR [eax]
  0000d	3b f0		 cmp	 esi, eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp

; 32   : 	for (i=m_kList_stInsult.begin(); i!=m_kList_stInsult.end(); ++i)

  0000f	74 26		 je	 SHORT $LN3@GetInsultL
$LL24@GetInsultL:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2227 :         return _BUF_SIZE <= _Myres;

  00011	83 7e 1c 10	 cmp	 DWORD PTR [esi+28], 16	; 00000010H

; 2218 :         const value_type* _Result = _Bx._Buf;

  00015	8d 46 08	 lea	 eax, DWORD PTR [esi+8]

; 2219 :         if (_Large_string_engaged()) {

  00018	72 03		 jb	 SHORT $LN44@GetInsultL

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  0001a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$LN44@GetInsultL:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp

; 36   : 		int ret=LocaleService_StringCompareCI(c_szWord, rstInsult.c_str(), rstInsult.length());		

  0001d	ff 76 18	 push	 DWORD PTR [esi+24]
  00020	50		 push	 eax
  00021	ff 75 08	 push	 DWORD PTR _c_szWord$[ebp]
  00024	e8 00 00 00 00	 call	 ?LocaleService_StringCompareCI@@YAHPBD0I@Z ; LocaleService_StringCompareCI
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 37   : 		if (0==ret)

  0002c	85 c0		 test	 eax, eax
  0002e	74 10		 je	 SHORT $LN49@GetInsultL
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 166  :         this->_Ptr = this->_Ptr->_Next;

  00030	8b 36		 mov	 esi, DWORD PTR [esi]

; 199  :         return this->_Ptr == _Right._Ptr;

  00032	3b 73 04	 cmp	 esi, DWORD PTR [ebx+4]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp

; 32   : 	for (i=m_kList_stInsult.begin(); i!=m_kList_stInsult.end(); ++i)

  00035	75 da		 jne	 SHORT $LL24@GetInsultL
$LN3@GetInsultL:
  00037	5f		 pop	 edi

; 40   : 			return true;
; 41   : 		}
; 42   : 	}
; 43   : 
; 44   : 	return false;
; 45   : }

  00038	5e		 pop	 esi
  00039	32 c0		 xor	 al, al
  0003b	5b		 pop	 ebx
  0003c	5d		 pop	 ebp
  0003d	c2 08 00	 ret	 8
$LN49@GetInsultL:

; 38   : 		{
; 39   : 			*puInsultLen=rstInsult.length();

  00040	8b 45 0c	 mov	 eax, DWORD PTR _puInsultLen$[ebp]
  00043	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00046	5f		 pop	 edi

; 40   : 			return true;
; 41   : 		}
; 42   : 	}
; 43   : 
; 44   : 	return false;
; 45   : }

  00047	5e		 pop	 esi
  00048	89 08		 mov	 DWORD PTR [eax], ecx
  0004a	b0 01		 mov	 al, 1
  0004c	5b		 pop	 ebx
  0004d	5d		 pop	 ebp
  0004e	c2 08 00	 ret	 8
?__GetInsultLength@CInsultChecker@@AAE_NPBDPAI@Z ENDP	; CInsultChecker::__GetInsultLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
;	COMDAT ?FilterInsult@CInsultChecker@@QAEXPADI@Z
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
_bChr$1 = -8						; size = 1
_uInsultLen$2 = -4					; size = 4
_szLine$ = 8						; size = 4
_uLineLen$ = 12						; size = 4
?FilterInsult@CInsultChecker@@QAEXPADI@Z PROC		; CInsultChecker::FilterInsult, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 55   : 	const char INSULT_FILTER_CHAR = '*'; 
; 56   : 	for (UINT uPos=0; uPos<uLineLen;)

  00007	33 f6		 xor	 esi, esi
  00009	89 4d f4	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000c	39 75 0c	 cmp	 DWORD PTR _uLineLen$[ebp], esi
  0000f	76 4c		 jbe	 SHORT $LN3@FilterInsu
  00011	53		 push	 ebx
  00012	57		 push	 edi
$LL2@FilterInsu:

; 57   : 	{
; 58   : 		BYTE bChr=szLine[uPos];

  00013	8b 5d 08	 mov	 ebx, DWORD PTR _szLine$[ebp]
  00016	03 de		 add	 ebx, esi
  00018	8a 03		 mov	 al, BYTE PTR [ebx]
  0001a	88 45 f8	 mov	 BYTE PTR _bChr$1[ebp], al

; 59   : 		UINT uInsultLen;
; 60   : 		if (__GetInsultLength(szLine+uPos, &uInsultLen))

  0001d	8d 45 fc	 lea	 eax, DWORD PTR _uInsultLen$2[ebp]
  00020	50		 push	 eax
  00021	53		 push	 ebx
  00022	e8 00 00 00 00	 call	 ?__GetInsultLength@CInsultChecker@@AAE_NPBDPAI@Z ; CInsultChecker::__GetInsultLength
  00027	84 c0		 test	 al, al
  00029	74 13		 je	 SHORT $LN5@FilterInsu

; 61   : 		{
; 62   : 			memset(szLine+uPos, INSULT_FILTER_CHAR, uInsultLen);

  0002b	8b 7d fc	 mov	 edi, DWORD PTR _uInsultLen$2[ebp]
  0002e	57		 push	 edi
  0002f	6a 2a		 push	 42			; 0000002aH
  00031	53		 push	 ebx
  00032	e8 00 00 00 00	 call	 _memset
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 63   : 			uPos += uInsultLen;

  0003a	03 f7		 add	 esi, edi

; 64   : 		}

  0003c	eb 15		 jmp	 SHORT $LN8@FilterInsu
$LN5@FilterInsu:

; 65   : 		else
; 66   : 		{
; 67   : 			if ( LocaleService_IsLeadByte( bChr ) )

  0003e	ff 75 f8	 push	 DWORD PTR _bChr$1[ebp]
  00041	e8 00 00 00 00	 call	 ?LocaleService_IsLeadByte@@YAHD@Z ; LocaleService_IsLeadByte
  00046	83 c4 04	 add	 esp, 4
  00049	85 c0		 test	 eax, eax
  0004b	74 05		 je	 SHORT $LN7@FilterInsu

; 68   : 				uPos += 2;

  0004d	83 c6 02	 add	 esi, 2
  00050	eb 01		 jmp	 SHORT $LN8@FilterInsu
$LN7@FilterInsu:

; 69   : 			else
; 70   : 				uPos++;

  00052	46		 inc	 esi
$LN8@FilterInsu:

; 55   : 	const char INSULT_FILTER_CHAR = '*'; 
; 56   : 	for (UINT uPos=0; uPos<uLineLen;)

  00053	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00056	3b 75 0c	 cmp	 esi, DWORD PTR _uLineLen$[ebp]
  00059	72 b8		 jb	 SHORT $LL2@FilterInsu
  0005b	5f		 pop	 edi
  0005c	5b		 pop	 ebx
$LN3@FilterInsu:
  0005d	5e		 pop	 esi

; 71   : 		}
; 72   : 	}
; 73   : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 08 00	 ret	 8
?FilterInsult@CInsultChecker@@QAEXPADI@Z ENDP		; CInsultChecker::FilterInsult
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
;	COMDAT ?IsInsultIn@CInsultChecker@@QAE_NPBDI@Z
_TEXT	SEGMENT
_c_szLine$ = 8						; size = 4
_uLineLen$ = 12						; size = 4
?IsInsultIn@CInsultChecker@@QAE_NPBDI@Z PROC		; CInsultChecker::IsInsultIn, COMDAT
; _this$ = ecx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 77   : 	for (UINT uPos=0; uPos<uLineLen;)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _uLineLen$[ebp]
  00007	56		 push	 esi
  00008	33 f6		 xor	 esi, esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	85 db		 test	 ebx, ebx
  0000f	74 31		 je	 SHORT $LN3@IsInsultIn
$LL2@IsInsultIn:

; 78   : 	{
; 79   : 		BYTE bChr=c_szLine[uPos];

  00011	8b 45 08	 mov	 eax, DWORD PTR _c_szLine$[ebp]

; 80   : 		if (bChr & 0x80)

  00014	8b cf		 mov	 ecx, edi
  00016	03 c6		 add	 eax, esi
  00018	50		 push	 eax
  00019	80 38 00	 cmp	 BYTE PTR [eax], 0
  0001c	7d 10		 jge	 SHORT $LN5@IsInsultIn

; 81   : 		{
; 82   : 			if (__IsInsult(c_szLine+uPos))

  0001e	e8 00 00 00 00	 call	 ?__IsInsult@CInsultChecker@@AAE_NPBD@Z ; CInsultChecker::__IsInsult
  00023	84 c0		 test	 al, al
  00025	75 24		 jne	 SHORT $LN12@IsInsultIn

; 83   : 				return true;
; 84   : 
; 85   : 			uPos+=2;

  00027	b8 02 00 00 00	 mov	 eax, 2

; 86   : 		}

  0002c	eb 0e		 jmp	 SHORT $LN6@IsInsultIn
$LN5@IsInsultIn:

; 87   : 		else
; 88   : 		{
; 89   : 			if (__IsInsult(c_szLine+uPos))

  0002e	e8 00 00 00 00	 call	 ?__IsInsult@CInsultChecker@@AAE_NPBD@Z ; CInsultChecker::__IsInsult
  00033	84 c0		 test	 al, al
  00035	75 14		 jne	 SHORT $LN12@IsInsultIn

; 90   : 				return true;
; 91   : 
; 92   : 			uPos++;

  00037	b8 01 00 00 00	 mov	 eax, 1
$LN6@IsInsultIn:

; 77   : 	for (UINT uPos=0; uPos<uLineLen;)

  0003c	03 f0		 add	 esi, eax
  0003e	3b f3		 cmp	 esi, ebx
  00040	72 cf		 jb	 SHORT $LL2@IsInsultIn
$LN3@IsInsultIn:
  00042	5f		 pop	 edi

; 93   : 		}
; 94   : 	}
; 95   : 
; 96   : 	return false;
; 97   : }

  00043	5e		 pop	 esi
  00044	32 c0		 xor	 al, al
  00046	5b		 pop	 ebx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
$LN12@IsInsultIn:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	b0 01		 mov	 al, 1
  0004f	5b		 pop	 ebx
  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?IsInsultIn@CInsultChecker@@QAE_NPBDI@Z ENDP		; CInsultChecker::IsInsultIn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
;	COMDAT ?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T2 = -40						; size = 4
__Insert_after$3 = -40					; size = 4
_this$1$ = -36						; size = 4
__Op$4 = -32						; size = 8
__New_array$5 = -28					; size = 4
__Where$1$ = -24					; size = 4
__Op$1$ = -20						; size = 4
__Right_size$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
$T6 = 8							; size = 4
__Insert_before$7 = 8					; size = 4
_c_rstInsult$ = 8					; size = 4
?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CInsultChecker::AppendInsult, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 25   : 	if (c_rstInsult.length()>0)

  00027	8b 7d 08	 mov	 edi, DWORD PTR _c_rstInsult$[ebp]
  0002a	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0002e	0f 86 ef 00 00
	00		 jbe	 $LN74@AppendInsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 1014 :         if (_Mysize == max_size()) {

  00034	81 79 08 ff ff
	ff 07		 cmp	 DWORD PTR [ecx+8], 134217727 ; 07ffffffH
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp

; 26   : 		m_kList_stInsult.push_back(c_rstInsult);

  0003b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 1252 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  0003e	8b 06		 mov	 eax, DWORD PTR [esi]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp

; 26   : 		m_kList_stInsult.push_back(c_rstInsult);

  00040	89 75 dc	 mov	 DWORD PTR _this$1$[ebp], esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 1252 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00043	89 45 e8	 mov	 DWORD PTR __Where$1$[ebp], eax

; 1014 :         if (_Mysize == max_size()) {

  00046	0f 84 ea 00 00
	00		 je	 $LN83@AppendInsu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1045 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0004c	89 75 e0	 mov	 DWORD PTR __Op$4[ebp], esi

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0004f	6a 20		 push	 32			; 00000020H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 585  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1052 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00058	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __Op$4[ebp+4], 0

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0005f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00064	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0006b	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  0006e	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 2227 :         return _BUF_SIZE <= _Myres;

  00075	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2734 :         const size_type _Right_size   = _Right_data._Mysize;

  00079	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0007c	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1053 :         _Ptr = _Al.allocate(1);

  0007f	89 45 ec	 mov	 DWORD PTR __Op$1$[ebp], eax
  00082	89 45 e4	 mov	 DWORD PTR __Op$4[ebp+4], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 587  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00085	89 4d 08	 mov	 DWORD PTR $T6[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2734 :         const size_type _Right_size   = _Right_data._Mysize;

  00088	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 2219 :         if (_Large_string_engaged()) {

  0008b	72 02		 jb	 SHORT $LN39@AppendInsu

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  0008d	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN39@AppendInsu:

; 2737 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  0008f	83 fa 10	 cmp	 edx, 16			; 00000010H
  00092	73 0d		 jae	 SHORT $LN36@AppendInsu

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00094	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2740 :             _My_data._Myres  = _BUF_SIZE - 1;

  00097	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009c	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 2741 :             return;

  0009f	eb 45		 jmp	 SHORT $LN35@AppendInsu
$LN36@AppendInsu:

; 2745 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  000a1	8b c2		 mov	 eax, edx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  000a3	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2745 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  000a8	83 c8 0f	 or	 eax, 15			; 0000000fH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  000ab	3b c1		 cmp	 eax, ecx
  000ad	0f 47 c1	 cmova	 eax, ecx
  000b0	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2746 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000b3	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2746 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000ba	8b f0		 mov	 esi, eax

; 2747 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  000bc	8d 45 e4	 lea	 eax, DWORD PTR __New_array$5[ebp]
  000bf	50		 push	 eax
  000c0	ff 75 08	 push	 DWORD PTR $T6[ebp]
  000c3	89 75 e4	 mov	 DWORD PTR __New_array$5[ebp], esi
  000c6	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2748 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000cb	8b 4d f0	 mov	 ecx, DWORD PTR __Right_size$1$[ebp]
  000ce	41		 inc	 ecx

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cf	51		 push	 ecx
  000d0	57		 push	 edi
  000d1	56		 push	 esi
  000d2	e8 00 00 00 00	 call	 _memcpy
  000d7	8b 75 dc	 mov	 esi, DWORD PTR _this$1$[ebp]
  000da	83 c4 18	 add	 esp, 24			; 00000018H
  000dd	8b 45 ec	 mov	 eax, DWORD PTR __Op$1$[ebp]
  000e0	8b 4d 08	 mov	 ecx, DWORD PTR $T6[ebp]
  000e3	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
$LN35@AppendInsu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 1019 :         ++_Mysize;

  000e6	8b 7d f0	 mov	 edi, DWORD PTR __Right_size$1$[ebp]
  000e9	89 79 10	 mov	 DWORD PTR [ecx+16], edi
  000ec	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 1020 :         return _Op._Transfer_before(_Where);

  000ef	8b 4d e8	 mov	 ecx, DWORD PTR __Where$1$[ebp]
  000f2	ff 46 04	 inc	 DWORD PTR [esi+4]
  000f5	89 4d 08	 mov	 DWORD PTR __Insert_before$7[ebp], ecx

; 600  :         const pointer _Insert_after = _Insert_before->_Prev;

  000f8	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]

; 601  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  000fb	8d 4d 08	 lea	 ecx, DWORD PTR __Insert_before$7[ebp]
  000fe	51		 push	 ecx
  000ff	50		 push	 eax
  00100	89 75 d8	 mov	 DWORD PTR __Insert_after$3[ebp], esi
  00103	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *,std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> * const &>

; 602  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00108	8b 7d ec	 mov	 edi, DWORD PTR __Op$1$[ebp]
  0010b	8d 45 d8	 lea	 eax, DWORD PTR __Insert_after$3[ebp]
  0010e	50		 push	 eax
  0010f	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *,std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> * const &>

; 603  :         const auto _Result    = this->_Ptr;
; 604  :         this->_Ptr            = pointer{};
; 605  :         _Insert_before->_Prev = _Result;

  00118	8b 45 e8	 mov	 eax, DWORD PTR __Where$1$[ebp]
  0011b	83 c4 10	 add	 esp, 16			; 00000010H
  0011e	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 606  :         _Insert_after->_Next  = _Result;

  00121	89 3e		 mov	 DWORD PTR [esi], edi
$LN74@AppendInsu:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp

; 27   : }

  00123	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00126	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0012d	59		 pop	 ecx
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c2 04 00	 ret	 4
$LN83@AppendInsu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 1015 :             _Xlength_error("list too long");

  00136	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  0013b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN81@AppendInsu:
  00140	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Op$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AppendInsult@CInsultChecker@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CInsultChecker::AppendInsult
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
;	COMDAT ?Clear@CInsultChecker@@QAEXXZ
_TEXT	SEGMENT
?Clear@CInsultChecker@@QAEXXZ PROC			; CInsultChecker::Clear, COMDAT
; _this$ = ecx

; 19   : {

  00000	56		 push	 esi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 1429 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00001	ff 71 04	 push	 DWORD PTR [ecx+4]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp

; 20   : 	m_kList_stInsult.clear();

  00004	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 1429 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00007	56		 push	 esi
  00008	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@1@PAU01@@Z ; std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *>::_Free_non_head<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >

; 1430 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	83 c4 08	 add	 esp, 8
  00012	89 00		 mov	 DWORD PTR [eax], eax

; 1431 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1432 :         _My_data._Mysize        = 0;

  00019	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00020	5e		 pop	 esi
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp

; 21   : }

  00021	c3		 ret	 0
?Clear@CInsultChecker@@QAEXXZ ENDP			; CInsultChecker::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
;	COMDAT ??1CInsultChecker@@UAE@XZ
_TEXT	SEGMENT
??1CInsultChecker@@UAE@XZ PROC				; CInsultChecker::~CInsultChecker, COMDAT
; _this$ = ecx

; 15   : {

  00000	56		 push	 esi

; 16   : }

  00001	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CInsultChecker@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 1440 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  0000a	ff 36		 push	 DWORD PTR [esi]
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@std@@@?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@SAXAAV?$allocator@U?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@@1@PAU01@@Z ; std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *>::_Free_non_head<std::allocator<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00012	6a 20		 push	 32			; 00000020H
  00014	ff 36		 push	 DWORD PTR [esi]
  00016	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0001b	83 c4 10	 add	 esp, 16			; 00000010H
  0001e	5e		 pop	 esi
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp

; 16   : }

  0001f	c3		 ret	 0
??1CInsultChecker@@UAE@XZ ENDP				; CInsultChecker::~CInsultChecker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
;	COMDAT ??0CInsultChecker@@QAE@XZ
_TEXT	SEGMENT
__Newhead$1 = -4					; size = 4
_this$ = -4						; size = 4
??0CInsultChecker@@QAE@XZ PROC				; CInsultChecker::CInsultChecker, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	89 7d fc	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000b	6a 20		 push	 32			; 00000020H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp

; 11   : {

  0000d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CInsultChecker@@6B@
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00021	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list

; 1775 :         auto _Newhead = _Al.allocate(1);

  00026	8b f0		 mov	 esi, eax

; 1776 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00028	8d 45 fc	 lea	 eax, DWORD PTR __Newhead$1[ebp]
  0002b	50		 push	 eax
  0002c	56		 push	 esi
  0002d	89 75 fc	 mov	 DWORD PTR __Newhead$1[ebp], esi
  00030	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *,std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> * &>

; 1777 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00035	8d 45 fc	 lea	 eax, DWORD PTR __Newhead$1[ebp]
  00038	50		 push	 eax
  00039	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0003c	51		 push	 ecx
  0003d	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> *,std::_List_node<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,void *> * &>
  00042	83 c4 14	 add	 esp, 20			; 00000014H

; 1778 :         _Mypair._Myval2._Myhead = _Newhead;

  00045	89 77 04	 mov	 DWORD PTR [edi+4], esi
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp

; 12   : }

  00048	8b c7		 mov	 eax, edi
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??0CInsultChecker@@QAE@XZ ENDP				; CInsultChecker::CInsultChecker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\InsultChecker.cpp
;	COMDAT ?GetSingleton@CInsultChecker@@QAEAAV1@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?GetSingleton@CInsultChecker@@QAEAAV1@XZ PROC		; CInsultChecker::GetSingleton, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSingleton@CInsultChecker@@QAEAAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 6    : 	static CInsultChecker s_kInsultChecker;

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@GetSinglet
$LN5@GetSinglet:

; 7    : 	return s_kInsultChecker;
; 8    : }

  0003e	b8 00 00 00 00	 mov	 eax, OFFSET ?s_kInsultChecker@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4V2@A
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@GetSinglet:

; 6    : 	static CInsultChecker s_kInsultChecker;

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@GetSinglet
  00068	b9 00 00 00 00	 mov	 ecx, OFFSET ?s_kInsultChecker@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4V2@A
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	e8 00 00 00 00	 call	 ??0CInsultChecker@@QAE@XZ ; CInsultChecker::CInsultChecker
  00079	68 00 00 00 00	 push	 OFFSET ??__Fs_kInsultChecker@?1??GetSingleton@CInsultChecker@@QAEAAV1@XZ@YAXXZ ; `CInsultChecker::GetSingleton'::`2'::`dynamic atexit destructor for 's_kInsultChecker''
  0007e	e8 00 00 00 00	 call	 _atexit
  00083	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4HA
  00088	e8 00 00 00 00	 call	 __Init_thread_footer
  0008d	83 c4 08	 add	 esp, 8
  00090	eb ac		 jmp	 SHORT $LN5@GetSinglet
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSingleton@CInsultChecker@@QAEAAV1@XZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GetSingleton@CInsultChecker@@QAEAAV2@XZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?GetSingleton@CInsultChecker@@QAEAAV1@XZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSingleton@CInsultChecker@@QAEAAV1@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSingleton@CInsultChecker@@QAEAAV1@XZ ENDP		; CInsultChecker::GetSingleton
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
