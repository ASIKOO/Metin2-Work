; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?SetSelectPhase@CPythonNetworkStream@@QAEXXZ	; CPythonNetworkStream::SetSelectPhase
PUBLIC	?SendSelectEmpirePacket@CPythonNetworkStream@@QAE_NK@Z ; CPythonNetworkStream::SendSelectEmpirePacket
PUBLIC	?SendSelectCharacterPacket@CPythonNetworkStream@@QAE_NE@Z ; CPythonNetworkStream::SendSelectCharacterPacket
PUBLIC	?SendChangeNamePacket@CPythonNetworkStream@@QAE_NEPBD@Z ; CPythonNetworkStream::SendChangeNamePacket
PUBLIC	?SendCreateCharacterPacket@CPythonNetworkStream@@QAE_NEPBDEEEEEE@Z ; CPythonNetworkStream::SendCreateCharacterPacket
PUBLIC	?SendDestroyCharacterPacket@CPythonNetworkStream@@QAE_NEPBD@Z ; CPythonNetworkStream::SendDestroyCharacterPacket
PUBLIC	?SelectPhase@CPythonNetworkStream@@IAEXXZ	; CPythonNetworkStream::SelectPhase
PUBLIC	?__RecvPlayerCreateSuccessPacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerCreateSuccessPacket
PUBLIC	?__RecvPlayerCreateFailurePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerCreateFailurePacket
PUBLIC	?__RecvPlayerDestroySuccessPacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerDestroySuccessPacket
PUBLIC	?__RecvPlayerDestroyFailurePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerDestroyFailurePacket
PUBLIC	?__RecvChangeName@CPythonNetworkStream@@IAE_NXZ	; CPythonNetworkStream::__RecvChangeName
PUBLIC	?__LeaveSelectPhase@CPythonNetworkStream@@IAEXXZ ; CPythonNetworkStream::__LeaveSelectPhase
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_06HJGPBJLE@Select@			; `string'
PUBLIC	??_C@_0BN@HMHBDFBF@?$CD?$CD?5Network?5?9?5Select?5Phase?5?$CD?$CD@ ; `string'
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ@			; `string'
PUBLIC	??_C@_0BA@FHNDCDDK@SetLoadingPhase@		; `string'
PUBLIC	??_C@_0BI@OHJNHIAD@SetSelectCharacterPhase@	; `string'
PUBLIC	??_C@_0BF@BJJJIJOC@SetSelectEmpirePhase@	; `string'
PUBLIC	??_C@_0BP@MCDDNHPB@SendSelectEmpirePacket?5?9?5Error@ ; `string'
PUBLIC	??_C@_0CC@LCEFGOOP@SendSelectCharacterPacket?5?9?5Err@ ; `string'
PUBLIC	??_C@_0BL@PMHPNGGJ@SendDestroyCharacterPacket@	; `string'
PUBLIC	??_C@_0CE@MAKBOJI@Failed?5to?5SendCreateCharacterPa@ ; `string'
PUBLIC	??_C@_0BP@NACAEM@Failed?5to?5SendChangeNamePacket@ ; `string'
PUBLIC	??_C@_0GF@HIGNNGB@CPythonNetworkStream?3?3RecvPlaye@ ; `string'
PUBLIC	??_C@_0BA@FIEGFADN@OnCreateSuccess@		; `string'
PUBLIC	??_C@_03LIHNMIHG@?$CIi?$CJ@			; `string'
PUBLIC	??_C@_0BA@JBAEOLGH@OnCreateFailure@		; `string'
PUBLIC	??_C@_0BA@NJIPBDGM@OnDeleteSuccess@		; `string'
PUBLIC	??_C@_0BA@BAMNKIDG@OnDeleteFailure@		; `string'
PUBLIC	??_C@_04JMLDJNEM@?$CIis?$CJ@			; `string'
PUBLIC	??_C@_0N@ICACADKM@OnChangeName@			; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_strncpy:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Tracen@@YAXPBD@Z:PROC				; Tracen
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	__imp__Py_BuildValue:PROC
EXTRN	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z:PROC ; PyCallClassMemberFunc
EXTRN	?ELTimer_GetMSec@@YAKXZ:PROC			; ELTimer_GetMSec
EXTRN	?Recv@CNetworkStream@@QAE_NHPAX@Z:PROC		; CNetworkStream::Recv
EXTRN	?Send@CNetworkStream@@QAE_NHPBX@Z:PROC		; CNetworkStream::Send
EXTRN	?SendSequence@CNetworkStream@@QAE_NXZ:PROC	; CNetworkStream::SendSequence
EXTRN	?IsSelectedEmpire@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::IsSelectedEmpire
EXTRN	?RecvHandshakePacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvHandshakePacket
EXTRN	?RecvHandshakeOKPacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvHandshakeOKPacket
EXTRN	?RecvHybridCryptKeyPacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvHybridCryptKeyPacket
EXTRN	?RecvHybridCryptSDBPacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvHybridCryptSDBPacket
EXTRN	?RecvKeyAgreementPacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvKeyAgreementPacket
EXTRN	?RecvKeyAgreementCompletedPacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvKeyAgreementCompletedPacket
EXTRN	?SetEmpireID@CPythonNetworkStream@@QAEXK@Z:PROC	; CPythonNetworkStream::SetEmpireID
EXTRN	?RecvErrorPacket@CPythonNetworkStream@@IAE_NH@Z:PROC ; CPythonNetworkStream::RecvErrorPacket
EXTRN	?RecvPingPacket@CPythonNetworkStream@@IAE_NXZ:PROC ; CPythonNetworkStream::RecvPingPacket
EXTRN	?RecvPhasePacket@CPythonNetworkStream@@IAE_NXZ:PROC ; CPythonNetworkStream::RecvPhasePacket
EXTRN	?__RecvLoginSuccessPacket3@CPythonNetworkStream@@IAE_NXZ:PROC ; CPythonNetworkStream::__RecvLoginSuccessPacket3
EXTRN	?__RecvLoginSuccessPacket4@CPythonNetworkStream@@IAE_NXZ:PROC ; CPythonNetworkStream::__RecvLoginSuccessPacket4
EXTRN	?__RecvEmpirePacket@CPythonNetworkStream@@IAE_NXZ:PROC ; CPythonNetworkStream::__RecvEmpirePacket
EXTRN	?CheckPacket@CPythonNetworkStream@@IAE_NPAE@Z:PROC ; CPythonNetworkStream::CheckPacket
EXTRN	?__DirectEnterMode_IsSet@CPythonNetworkStream@@AAE_NXZ:PROC ; CPythonNetworkStream::__DirectEnterMode_IsSet
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0N@ICACADKM@OnChangeName@
CONST	SEGMENT
??_C@_0N@ICACADKM@OnChangeName@ DB 'OnChangeName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JMLDJNEM@?$CIis?$CJ@
CONST	SEGMENT
??_C@_04JMLDJNEM@?$CIis?$CJ@ DB '(is)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BAMNKIDG@OnDeleteFailure@
CONST	SEGMENT
??_C@_0BA@BAMNKIDG@OnDeleteFailure@ DB 'OnDeleteFailure', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NJIPBDGM@OnDeleteSuccess@
CONST	SEGMENT
??_C@_0BA@NJIPBDGM@OnDeleteSuccess@ DB 'OnDeleteSuccess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JBAEOLGH@OnCreateFailure@
CONST	SEGMENT
??_C@_0BA@JBAEOLGH@OnCreateFailure@ DB 'OnCreateFailure', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LIHNMIHG@?$CIi?$CJ@
CONST	SEGMENT
??_C@_03LIHNMIHG@?$CIi?$CJ@ DB '(i)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FIEGFADN@OnCreateSuccess@
CONST	SEGMENT
??_C@_0BA@FIEGFADN@OnCreateSuccess@ DB 'OnCreateSuccess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@HIGNNGB@CPythonNetworkStream?3?3RecvPlaye@
CONST	SEGMENT
??_C@_0GF@HIGNNGB@CPythonNetworkStream?3?3RecvPlaye@ DB 'CPythonNetworkSt'
	DB	'ream::RecvPlayerCreateSuccessPacket - OUT OF RANGE SLOT(%d) >'
	DB	' PLATER_PER_ACCOUNT(%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NACAEM@Failed?5to?5SendChangeNamePacket@
CONST	SEGMENT
??_C@_0BP@NACAEM@Failed?5to?5SendChangeNamePacket@ DB 'Failed to SendChan'
	DB	'geNamePacket', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MAKBOJI@Failed?5to?5SendCreateCharacterPa@
CONST	SEGMENT
??_C@_0CE@MAKBOJI@Failed?5to?5SendCreateCharacterPa@ DB 'Failed to SendCr'
	DB	'eateCharacterPacket', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PMHPNGGJ@SendDestroyCharacterPacket@
CONST	SEGMENT
??_C@_0BL@PMHPNGGJ@SendDestroyCharacterPacket@ DB 'SendDestroyCharacterPa'
	DB	'cket', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LCEFGOOP@SendSelectCharacterPacket?5?9?5Err@
CONST	SEGMENT
??_C@_0CC@LCEFGOOP@SendSelectCharacterPacket?5?9?5Err@ DB 'SendSelectChar'
	DB	'acterPacket - Error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MCDDNHPB@SendSelectEmpirePacket?5?9?5Error@
CONST	SEGMENT
??_C@_0BP@MCDDNHPB@SendSelectEmpirePacket?5?9?5Error@ DB 'SendSelectEmpir'
	DB	'ePacket - Error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJJJIJOC@SetSelectEmpirePhase@
CONST	SEGMENT
??_C@_0BF@BJJJIJOC@SetSelectEmpirePhase@ DB 'SetSelectEmpirePhase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OHJNHIAD@SetSelectCharacterPhase@
CONST	SEGMENT
??_C@_0BI@OHJNHIAD@SetSelectCharacterPhase@ DB 'SetSelectCharacterPhase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FHNDCDDK@SetLoadingPhase@
CONST	SEGMENT
??_C@_0BA@FHNDCDDK@SetLoadingPhase@ DB 'SetLoadingPhase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ@ DB '()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HMHBDFBF@?$CD?$CD?5Network?5?9?5Select?5Phase?5?$CD?$CD@
CONST	SEGMENT
??_C@_0BN@HMHBDFBF@?$CD?$CD?5Network?5?9?5Select?5Phase?5?$CD?$CD@ DB '##'
	DB	' Network - Select Phase ##', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJGPBJLE@Select@
CONST	SEGMENT
??_C@_06HJGPBJLE@Select@ DB 'Select', 00H		; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4559 : _NODISCARD bool operator==(_In_z_ const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Left$[ebp]

; 4559 : _NODISCARD bool operator==(_In_z_ const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00007	57		 push	 edi

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00008	8b fe		 mov	 edi, esi
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL18@operator:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL18@operator

; 2218 :         const value_type* _Result = _Bx._Buf;

  00017	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001a	2b f9		 sub	 edi, ecx

; 2218 :         const value_type* _Result = _Bx._Buf;

  0001c	8b ca		 mov	 ecx, edx

; 2227 :         return _BUF_SIZE <= _Myres;

  0001e	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 2219 :         if (_Large_string_engaged()) {

  00022	72 02		 jb	 SHORT $LN8@operator

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00024	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN8@operator:

; 4180 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00026	8b 52 10	 mov	 edx, DWORD PTR [edx+16]

; 561  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00029	3b d7		 cmp	 edx, edi
  0002b	75 5b		 jne	 SHORT $LN14@operator

; 369  :         return _CSTD memcmp(_First1, _First2, _Count);

  0002d	83 ea 04	 sub	 edx, 4
  00030	72 11		 jb	 SHORT $LN21@operator
$LL22@operator:
  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	3b 06		 cmp	 eax, DWORD PTR [esi]
  00036	75 10		 jne	 SHORT $LN20@operator
  00038	83 c1 04	 add	 ecx, 4
  0003b	83 c6 04	 add	 esi, 4
  0003e	83 ea 04	 sub	 edx, 4
  00041	73 ef		 jae	 SHORT $LL22@operator
$LN21@operator:
  00043	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00046	74 34		 je	 SHORT $LN19@operator
$LN20@operator:
  00048	8a 01		 mov	 al, BYTE PTR [ecx]
  0004a	3a 06		 cmp	 al, BYTE PTR [esi]
  0004c	75 27		 jne	 SHORT $LN23@operator
  0004e	83 fa fd	 cmp	 edx, -3			; fffffffdH
  00051	74 29		 je	 SHORT $LN19@operator
  00053	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00056	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00059	75 1a		 jne	 SHORT $LN23@operator
  0005b	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0005e	74 1c		 je	 SHORT $LN19@operator
  00060	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00063	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00066	75 0d		 jne	 SHORT $LN23@operator
  00068	83 fa ff	 cmp	 edx, -1
  0006b	74 0f		 je	 SHORT $LN19@operator
  0006d	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00070	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00073	74 07		 je	 SHORT $LN19@operator
$LN23@operator:
  00075	1b c0		 sbb	 eax, eax
  00077	83 c8 01	 or	 eax, 1
  0007a	eb 02		 jmp	 SHORT $LN24@operator
$LN19@operator:
  0007c	33 c0		 xor	 eax, eax
$LN24@operator:

; 561  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007e	85 c0		 test	 eax, eax
  00080	75 06		 jne	 SHORT $LN14@operator
  00082	5f		 pop	 edi
  00083	b0 01		 mov	 al, 1

; 4560 :     return _Right._Equal(_Left);
; 4561 : }

  00085	5e		 pop	 esi
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN14@operator:
  00088	5f		 pop	 edi

; 561  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00089	32 c0		 xor	 al, al

; 4560 :     return _Right._Equal(_Left);
; 4561 : }

  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4575 : _NODISCARD bool operator!=(_In_z_ const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4576 :     return !(_Left == _Right);

  00003	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00006	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  00009	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0000e	83 c4 08	 add	 esp, 8
  00011	34 01		 xor	 al, 1

; 4577 : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStream.h
;	COMDAT ?__LeaveSelectPhase@CPythonNetworkStream@@IAEXXZ
_TEXT	SEGMENT
?__LeaveSelectPhase@CPythonNetworkStream@@IAEXXZ PROC	; CPythonNetworkStream::__LeaveSelectPhase, COMDAT
; _this$ = ecx

; 592  : 		void __LeaveSelectPhase() {}

  00000	c2 00 00	 ret	 0
?__LeaveSelectPhase@CPythonNetworkStream@@IAEXXZ ENDP	; CPythonNetworkStream::__LeaveSelectPhase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?__RecvChangeName@CPythonNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
_ChangeNamePacket$ = -36				; size = 30
__$ArrayPad$ = -4					; size = 4
?__RecvChangeName@CPythonNetworkStream@@IAE_NXZ PROC	; CPythonNetworkStream::__RecvChangeName, COMDAT
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi

; 290  : 	TPacketGCChangeName ChangeNamePacket;
; 291  : 	if (!Recv(sizeof(TPacketGCChangeName), &ChangeNamePacket))

  00011	8d 45 dc	 lea	 eax, DWORD PTR _ChangeNamePacket$[ebp]
  00014	8b f9		 mov	 edi, ecx
  00016	50		 push	 eax
  00017	6a 1e		 push	 30			; 0000001eH
  00019	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  0001e	84 c0		 test	 al, al
  00020	75 0f		 jne	 SHORT $LN5@RecvChange
  00022	5f		 pop	 edi

; 307  : 	return true;
; 308  : }

  00023	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00026	33 cd		 xor	 ecx, ebp
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
$LN5@RecvChange:

; 292  : 		return false;
; 293  : 
; 294  : 	for (int i = 0; i < PLAYER_PER_ACCOUNT4; ++i)

  00031	8b 4d dd	 mov	 ecx, DWORD PTR _ChangeNamePacket$[ebp+1]
  00034	8d 87 9c 01 00
	00		 lea	 eax, DWORD PTR [edi+412]
  0003a	56		 push	 esi
  0003b	33 f6		 xor	 esi, esi
  0003d	0f 1f 00	 npad	 3
$LL4@RecvChange:

; 295  : 	{
; 296  : 		if (ChangeNamePacket.pid == m_akSimplePlayerInfo[i].dwID)

  00040	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00042	74 3c		 je	 SHORT $LN9@RecvChange

; 292  : 		return false;
; 293  : 
; 294  : 	for (int i = 0; i < PLAYER_PER_ACCOUNT4; ++i)

  00044	46		 inc	 esi
  00045	83 c0 3f	 add	 eax, 63			; 0000003fH
  00048	83 fe 04	 cmp	 esi, 4
  0004b	7c f3		 jl	 SHORT $LL4@RecvChange

; 302  : 			return true;
; 303  : 		}
; 304  : 	}
; 305  : 
; 306  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_SELECT], "OnCreateFailure", Py_BuildValue("(i)", 100));

  0004d	6a 64		 push	 100			; 00000064H
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_03LIHNMIHG@?$CIi?$CJ@
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0005a	50		 push	 eax
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JBAEOLGH@OnCreateFailure@
  00060	ff b7 84 01 00
	00		 push	 DWORD PTR [edi+388]
  00066	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  0006b	83 c4 14	 add	 esp, 20			; 00000014H
  0006e	b0 01		 mov	 al, 1
  00070	5e		 pop	 esi
  00071	5f		 pop	 edi

; 307  : 	return true;
; 308  : }

  00072	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00075	33 cd		 xor	 ecx, ebp
  00077	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007c	8b e5		 mov	 esp, ebp
  0007e	5d		 pop	 ebp
  0007f	c3		 ret	 0
$LN9@RecvChange:

; 297  : 		{
; 298  : 			m_akSimplePlayerInfo[i].bChangeName = FALSE;

  00080	8b c6		 mov	 eax, esi

; 299  : 			strncpy(m_akSimplePlayerInfo[i].szName, ChangeNamePacket.name, CHARACTER_NAME_MAX_LEN);

  00082	8d 4d e1	 lea	 ecx, DWORD PTR _ChangeNamePacket$[ebp+5]
  00085	c1 e0 06	 shl	 eax, 6
  00088	2b c6		 sub	 eax, esi
  0008a	6a 18		 push	 24			; 00000018H
  0008c	51		 push	 ecx
  0008d	c6 84 38 c5 01
	00 00 00	 mov	 BYTE PTR [eax+edi+453], 0
  00095	05 a0 01 00 00	 add	 eax, 416		; 000001a0H
  0009a	03 c7		 add	 eax, edi
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 _strncpy

; 300  : 
; 301  : 			PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_SELECT], "OnChangeName", Py_BuildValue("(is)", i, ChangeNamePacket.name));

  000a2	8d 45 e1	 lea	 eax, DWORD PTR _ChangeNamePacket$[ebp+5]
  000a5	50		 push	 eax
  000a6	56		 push	 esi
  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_04JMLDJNEM@?$CIis?$CJ@
  000ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  000b2	50		 push	 eax
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@ICACADKM@OnChangeName@
  000b8	ff b7 84 01 00
	00		 push	 DWORD PTR [edi+388]
  000be	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc

; 307  : 	return true;
; 308  : }

  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	83 c4 24	 add	 esp, 36			; 00000024H
  000c9	33 cd		 xor	 ecx, ebp
  000cb	b0 01		 mov	 al, 1
  000cd	5e		 pop	 esi
  000ce	5f		 pop	 edi
  000cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
?__RecvChangeName@CPythonNetworkStream@@IAE_NXZ ENDP	; CPythonNetworkStream::__RecvChangeName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?__RecvPlayerDestroyFailurePacket@CPythonNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
_packet_blank$ = -1					; size = 1
?__RecvPlayerDestroyFailurePacket@CPythonNetworkStream@@IAE_NXZ PROC ; CPythonNetworkStream::__RecvPlayerDestroyFailurePacket, COMDAT
; _this$ = ecx

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 280  : 	TPacketGCBlank packet_blank;
; 281  : 	if (!Recv(sizeof(TPacketGCBlank), &packet_blank))

  00005	8d 45 ff	 lea	 eax, DWORD PTR _packet_blank$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	50		 push	 eax
  0000b	6a 01		 push	 1
  0000d	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00012	84 c0		 test	 al, al
  00014	75 05		 jne	 SHORT $LN2@RecvPlayer
  00016	5e		 pop	 esi

; 286  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN2@RecvPlayer:

; 282  : 		return false;
; 283  : 
; 284  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_SELECT], "OnDeleteFailure", Py_BuildValue("()"));

  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_02HCKGKOFO@?$CI?$CJ@
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00026	50		 push	 eax
  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BAMNKIDG@OnDeleteFailure@
  0002c	ff b6 84 01 00
	00		 push	 DWORD PTR [esi+388]
  00032	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  00037	83 c4 10	 add	 esp, 16			; 00000010H

; 285  : 	return true;

  0003a	b0 01		 mov	 al, 1
  0003c	5e		 pop	 esi

; 286  : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?__RecvPlayerDestroyFailurePacket@CPythonNetworkStream@@IAE_NXZ ENDP ; CPythonNetworkStream::__RecvPlayerDestroyFailurePacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?__RecvPlayerDestroySuccessPacket@CPythonNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
_packet$ = -4						; size = 2
?__RecvPlayerDestroySuccessPacket@CPythonNetworkStream@@IAE_NXZ PROC ; CPythonNetworkStream::__RecvPlayerDestroySuccessPacket, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 266  : 	TPacketGCDestroyCharacterSuccess packet;
; 267  : 	if (!Recv(sizeof(TPacketGCDestroyCharacterSuccess), &packet))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _packet$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	50		 push	 eax
  0000b	6a 02		 push	 2
  0000d	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00012	84 c0		 test	 al, al
  00014	75 05		 jne	 SHORT $LN2@RecvPlayer
  00016	5e		 pop	 esi

; 276  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN2@RecvPlayer:

; 268  : 		return false;
; 269  : 
; 270  : 	memset(&m_akSimplePlayerInfo[packet.account_index], 0, sizeof(m_akSimplePlayerInfo[packet.account_index]));

  0001b	0f b6 4d fd	 movzx	 ecx, BYTE PTR _packet$[ebp+1]
  0001f	8b c1		 mov	 eax, ecx
  00021	c1 e0 06	 shl	 eax, 6
  00024	2b c1		 sub	 eax, ecx
  00026	6a 3f		 push	 63			; 0000003fH
  00028	05 9c 01 00 00	 add	 eax, 412		; 0000019cH
  0002d	03 c6		 add	 eax, esi
  0002f	6a 00		 push	 0
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _memset

; 271  : 	m_adwGuildID[packet.account_index] = 0;

  00037	0f b6 45 fd	 movzx	 eax, BYTE PTR _packet$[ebp+1]
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003e	c7 84 86 98 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [esi+eax*4+664], 0

; 272  : 	m_astrGuildName[packet.account_index] = "";

  00049	0f b6 45 fd	 movzx	 eax, BYTE PTR _packet$[ebp+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004d	6a 00		 push	 0
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp

; 272  : 	m_astrGuildName[packet.account_index] = "";

  00054	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00057	8d 40 55	 lea	 eax, DWORD PTR [eax+85]
  0005a	8d 0c c6	 lea	 ecx, DWORD PTR [esi+eax*8]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp

; 274  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_SELECT], "OnDeleteSuccess", Py_BuildValue("(i)", packet.account_index));

  00062	0f b6 45 fd	 movzx	 eax, BYTE PTR _packet$[ebp+1]
  00066	50		 push	 eax
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_03LIHNMIHG@?$CIi?$CJ@
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NJIPBDGM@OnDeleteSuccess@
  00078	ff b6 84 01 00
	00		 push	 DWORD PTR [esi+388]
  0007e	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  00083	83 c4 14	 add	 esp, 20			; 00000014H

; 275  : 	return true;

  00086	b0 01		 mov	 al, 1
  00088	5e		 pop	 esi

; 276  : }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
?__RecvPlayerDestroySuccessPacket@CPythonNetworkStream@@IAE_NXZ ENDP ; CPythonNetworkStream::__RecvPlayerDestroySuccessPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?__RecvPlayerCreateFailurePacket@CPythonNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
_packet$ = -4						; size = 2
?__RecvPlayerCreateFailurePacket@CPythonNetworkStream@@IAE_NXZ PROC ; CPythonNetworkStream::__RecvPlayerCreateFailurePacket, COMDAT
; _this$ = ecx

; 253  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 254  : 	TPacketGCCreateFailure packet;
; 255  : 
; 256  : 	if (!Recv(sizeof(TPacketGCCreateFailure), &packet))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _packet$[ebp]
  00008	8b f9		 mov	 edi, ecx
  0000a	50		 push	 eax
  0000b	6a 02		 push	 2
  0000d	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00012	84 c0		 test	 al, al
  00014	75 05		 jne	 SHORT $LN2@RecvPlayer
  00016	5f		 pop	 edi

; 262  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN2@RecvPlayer:

; 257  : 		return false;
; 258  : 
; 259  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_CREATE], "OnCreateFailure", Py_BuildValue("(i)", packet.bType));

  0001b	0f b6 45 fd	 movzx	 eax, BYTE PTR _packet$[ebp+1]
  0001f	50		 push	 eax
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_03LIHNMIHG@?$CIi?$CJ@
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JBAEOLGH@OnCreateFailure@
  00031	ff b7 88 01 00
	00		 push	 DWORD PTR [edi+392]
  00037	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc

; 260  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_SELECT], "OnCreateFailure", Py_BuildValue("(i)", packet.bType));

  0003c	0f b6 45 fd	 movzx	 eax, BYTE PTR _packet$[ebp+1]
  00040	50		 push	 eax
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_03LIHNMIHG@?$CIi?$CJ@
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JBAEOLGH@OnCreateFailure@
  00052	ff b7 84 01 00
	00		 push	 DWORD PTR [edi+388]
  00058	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  0005d	83 c4 28	 add	 esp, 40			; 00000028H

; 261  : 	return true;

  00060	b0 01		 mov	 al, 1
  00062	5f		 pop	 edi

; 262  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c3		 ret	 0
?__RecvPlayerCreateFailurePacket@CPythonNetworkStream@@IAE_NXZ ENDP ; CPythonNetworkStream::__RecvPlayerCreateFailurePacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?__RecvPlayerCreateSuccessPacket@CPythonNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
_kCreateSuccessPacket$ = -72				; size = 65
__$ArrayPad$ = -4					; size = 4
?__RecvPlayerCreateSuccessPacket@CPythonNetworkStream@@IAE_NXZ PROC ; CPythonNetworkStream::__RecvPlayerCreateSuccessPacket, COMDAT
; _this$ = ecx

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 235  : 	TPacketGCPlayerCreateSuccess kCreateSuccessPacket;
; 236  : 
; 237  : 	if (!Recv(sizeof(kCreateSuccessPacket), &kCreateSuccessPacket))

  00011	8d 45 b8	 lea	 eax, DWORD PTR _kCreateSuccessPacket$[ebp]
  00014	8b d9		 mov	 ebx, ecx
  00016	50		 push	 eax
  00017	6a 41		 push	 65			; 00000041H
  00019	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  0001e	84 c0		 test	 al, al
  00020	75 0f		 jne	 SHORT $LN2@RecvPlayer
  00022	5b		 pop	 ebx

; 249  : 	return true;
; 250  : }

  00023	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00026	33 cd		 xor	 ecx, ebp
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
$LN2@RecvPlayer:

; 238  : 		return false;
; 239  : 
; 240  : 	if (kCreateSuccessPacket.bAccountCharacterSlot>=PLAYER_PER_ACCOUNT4)

  00031	8a 45 b9	 mov	 al, BYTE PTR _kCreateSuccessPacket$[ebp+1]
  00034	3c 04		 cmp	 al, 4
  00036	72 24		 jb	 SHORT $LN3@RecvPlayer

; 241  : 	{
; 242  : 		TraceError("CPythonNetworkStream::RecvPlayerCreateSuccessPacket - OUT OF RANGE SLOT(%d) > PLATER_PER_ACCOUNT(%d)",

  00038	6a 04		 push	 4
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0GF@HIGNNGB@CPythonNetworkStream?3?3RecvPlaye@
  00043	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 249  : 	return true;
; 250  : }

  0004b	b0 01		 mov	 al, 1
  0004d	5b		 pop	 ebx
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	33 cd		 xor	 ecx, ebp
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN3@RecvPlayer:

; 243  : 			kCreateSuccessPacket.bAccountCharacterSlot, PLAYER_PER_ACCOUNT4);
; 244  : 		return true;
; 245  : 	}
; 246  : 
; 247  : 	m_akSimplePlayerInfo[kCreateSuccessPacket.bAccountCharacterSlot]=kCreateSuccessPacket.kSimplePlayerInfomation;

  0005c	0f b6 c8	 movzx	 ecx, al
  0005f	56		 push	 esi
  00060	8b c1		 mov	 eax, ecx
  00062	8d 75 ba	 lea	 esi, DWORD PTR _kCreateSuccessPacket$[ebp+2]
  00065	57		 push	 edi
  00066	c1 e0 06	 shl	 eax, 6
  00069	8d bb 9c 01 00
	00		 lea	 edi, DWORD PTR [ebx+412]
  0006f	2b c1		 sub	 eax, ecx
  00071	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00076	03 f8		 add	 edi, eax
  00078	f3 a5		 rep movsd

; 248  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_CREATE], "OnCreateSuccess", Py_BuildValue("()"));

  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_02HCKGKOFO@?$CI?$CJ@
  0007f	66 a5		 movsw
  00081	a4		 movsb
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00088	50		 push	 eax
  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FIEGFADN@OnCreateSuccess@
  0008e	ff b3 88 01 00
	00		 push	 DWORD PTR [ebx+392]
  00094	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc

; 249  : 	return true;
; 250  : }

  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	83 c4 10	 add	 esp, 16			; 00000010H
  0009f	33 cd		 xor	 ecx, ebp
  000a1	b0 01		 mov	 al, 1
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
?__RecvPlayerCreateSuccessPacket@CPythonNetworkStream@@IAE_NXZ ENDP ; CPythonNetworkStream::__RecvPlayerCreateSuccessPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SelectPhase@CPythonNetworkStream@@IAEXXZ
_TEXT	SEGMENT
_header$ = -25						; size = 1
_PointChange$1 = -24					; size = 17
__$ArrayPad$ = -4					; size = 4
?SelectPhase@CPythonNetworkStream@@IAEXXZ PROC		; CPythonNetworkStream::SelectPhase, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 43   : 	TPacketHeader header;
; 44   : 
; 45   : 	if (!CheckPacket(&header))

  00011	8d 45 e7	 lea	 eax, DWORD PTR _header$[ebp]
  00014	8b f1		 mov	 esi, ecx
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?CheckPacket@CPythonNetworkStream@@IAE_NPAE@Z ; CPythonNetworkStream::CheckPacket
  0001c	84 c0		 test	 al, al
  0001e	0f 84 43 01 00
	00		 je	 $LN1@SelectPhas

; 46   : 		return;
; 47   : 
; 48   : 	switch (header)

  00024	0f b6 45 e7	 movzx	 eax, BYTE PTR _header$[ebp]
  00028	83 c0 fa	 add	 eax, -6			; fffffffaH
  0002b	3d f9 00 00 00	 cmp	 eax, 249		; 000000f9H
  00030	0f 87 25 01 00
	00		 ja	 $LN31@SelectPhas
  00036	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN33@SelectPhas[eax]
  0003d	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN34@SelectPhas[eax*4]
$LN5@SelectPhas:

; 49   : 	{
; 50   : 		case HEADER_GC_PHASE:
; 51   : 			if (RecvPhasePacket())

  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?RecvPhasePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::RecvPhasePacket

; 52   : 				return;	
; 53   : 			break;

  0004b	e9 07 01 00 00	 jmp	 $LN36@SelectPhas
$LN7@SelectPhas:

; 54   : 
; 55   : 		case HEADER_GC_EMPIRE:
; 56   : 			if (__RecvEmpirePacket())

  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?__RecvEmpirePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvEmpirePacket

; 57   : 				return;
; 58   : 			break;

  00057	e9 fb 00 00 00	 jmp	 $LN36@SelectPhas
$LN9@SelectPhas:

; 59   : 
; 60   : 		case HEADER_GC_LOGIN_SUCCESS3:
; 61   : 			if (__RecvLoginSuccessPacket3())

  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ?__RecvLoginSuccessPacket3@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvLoginSuccessPacket3

; 62   : 				return;
; 63   : 			break;

  00063	e9 ef 00 00 00	 jmp	 $LN36@SelectPhas
$LN11@SelectPhas:

; 64   : 
; 65   : 		case HEADER_GC_LOGIN_SUCCESS4:
; 66   : 			if (__RecvLoginSuccessPacket4())

  00068	8b ce		 mov	 ecx, esi
  0006a	e8 00 00 00 00	 call	 ?__RecvLoginSuccessPacket4@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvLoginSuccessPacket4

; 67   : 				return;
; 68   : 			break;

  0006f	e9 e3 00 00 00	 jmp	 $LN36@SelectPhas
$LN13@SelectPhas:

; 69   : 
; 70   : 
; 71   : 		case HEADER_GC_PLAYER_CREATE_SUCCESS:
; 72   : 			if (__RecvPlayerCreateSuccessPacket())

  00074	8b ce		 mov	 ecx, esi
  00076	e8 00 00 00 00	 call	 ?__RecvPlayerCreateSuccessPacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerCreateSuccessPacket

; 73   : 				return;
; 74   : 			break;

  0007b	e9 d7 00 00 00	 jmp	 $LN36@SelectPhas
$LN15@SelectPhas:

; 75   : 
; 76   : 		case HEADER_GC_PLAYER_CREATE_FAILURE:
; 77   : 			if (__RecvPlayerCreateFailurePacket())

  00080	8b ce		 mov	 ecx, esi
  00082	e8 00 00 00 00	 call	 ?__RecvPlayerCreateFailurePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerCreateFailurePacket

; 78   : 				return;
; 79   : 			break;

  00087	e9 cb 00 00 00	 jmp	 $LN36@SelectPhas
$LN17@SelectPhas:

; 80   : 
; 81   : 		case HEADER_GC_PLAYER_DELETE_WRONG_SOCIAL_ID:
; 82   : 			if (__RecvPlayerDestroyFailurePacket())

  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ?__RecvPlayerDestroyFailurePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerDestroyFailurePacket

; 83   : 				return;
; 84   : 			break;

  00093	e9 bf 00 00 00	 jmp	 $LN36@SelectPhas
$LN19@SelectPhas:

; 85   : 
; 86   : 		case HEADER_GC_PLAYER_DELETE_SUCCESS:
; 87   : 			if (__RecvPlayerDestroySuccessPacket())

  00098	8b ce		 mov	 ecx, esi
  0009a	e8 00 00 00 00	 call	 ?__RecvPlayerDestroySuccessPacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerDestroySuccessPacket

; 88   : 				return;
; 89   : 			break;

  0009f	e9 b3 00 00 00	 jmp	 $LN36@SelectPhas
$LN21@SelectPhas:

; 90   : 
; 91   : 		case HEADER_GC_CHANGE_NAME:
; 92   : 			if (__RecvChangeName())

  000a4	8b ce		 mov	 ecx, esi
  000a6	e8 00 00 00 00	 call	 ?__RecvChangeName@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvChangeName

; 93   : 				return;
; 94   : 			break;

  000ab	e9 a7 00 00 00	 jmp	 $LN36@SelectPhas
$LN23@SelectPhas:

; 95   : 
; 96   : 		case HEADER_GC_HANDSHAKE:
; 97   : 			RecvHandshakePacket();

  000b0	8b ce		 mov	 ecx, esi
  000b2	e8 00 00 00 00	 call	 ?RecvHandshakePacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvHandshakePacket
  000b7	5e		 pop	 esi

; 143  : }

  000b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bb	33 cd		 xor	 ecx, ebp
  000bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
$LN24@SelectPhas:

; 98   : 			return;
; 99   : 			break;
; 100  : 
; 101  : 		case HEADER_GC_HANDSHAKE_OK:
; 102  : 			RecvHandshakeOKPacket();

  000c6	8b ce		 mov	 ecx, esi
  000c8	e8 00 00 00 00	 call	 ?RecvHandshakeOKPacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvHandshakeOKPacket
  000cd	5e		 pop	 esi

; 143  : }

  000ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	33 cd		 xor	 ecx, ebp
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
$LN25@SelectPhas:

; 103  : 			return;
; 104  : 			break;
; 105  : 
; 106  : 		case HEADER_GC_HYBRIDCRYPT_KEYS:
; 107  : 			RecvHybridCryptKeyPacket();

  000dc	8b ce		 mov	 ecx, esi
  000de	e8 00 00 00 00	 call	 ?RecvHybridCryptKeyPacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvHybridCryptKeyPacket
  000e3	5e		 pop	 esi

; 143  : }

  000e4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e7	33 cd		 xor	 ecx, ebp
  000e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
$LN26@SelectPhas:

; 108  : 			return;
; 109  : 			break;
; 110  : 
; 111  : 		case HEADER_GC_HYBRIDCRYPT_SDB:
; 112  : 			RecvHybridCryptSDBPacket();

  000f2	8b ce		 mov	 ecx, esi
  000f4	e8 00 00 00 00	 call	 ?RecvHybridCryptSDBPacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvHybridCryptSDBPacket
  000f9	5e		 pop	 esi

; 143  : }

  000fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fd	33 cd		 xor	 ecx, ebp
  000ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00104	8b e5		 mov	 esp, ebp
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
$LN27@SelectPhas:

; 113  : 			return;
; 114  : 			break;
; 115  : 
; 116  : 
; 117  : #ifdef _IMPROVED_PACKET_ENCRYPTION_
; 118  : 		case HEADER_GC_KEY_AGREEMENT:
; 119  : 			RecvKeyAgreementPacket();

  00108	8b ce		 mov	 ecx, esi
  0010a	e8 00 00 00 00	 call	 ?RecvKeyAgreementPacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvKeyAgreementPacket
  0010f	5e		 pop	 esi

; 143  : }

  00110	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00113	33 cd		 xor	 ecx, ebp
  00115	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c3		 ret	 0
$LN28@SelectPhas:

; 120  : 			return;
; 121  : 			break;
; 122  : 
; 123  : 		case HEADER_GC_KEY_AGREEMENT_COMPLETED:
; 124  : 			RecvKeyAgreementCompletedPacket();

  0011e	8b ce		 mov	 ecx, esi
  00120	e8 00 00 00 00	 call	 ?RecvKeyAgreementCompletedPacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvKeyAgreementCompletedPacket
  00125	5e		 pop	 esi

; 143  : }

  00126	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00129	33 cd		 xor	 ecx, ebp
  0012b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
$LN29@SelectPhas:

; 125  : 			return;
; 126  : 			break;
; 127  : #endif
; 128  : 
; 129  : 		case HEADER_GC_PLAYER_POINT_CHANGE:
; 130  : 			TPacketGCPointChange PointChange;
; 131  : 			Recv(sizeof(TPacketGCPointChange), &PointChange);

  00134	8d 45 e8	 lea	 eax, DWORD PTR _PointChange$1[ebp]
  00137	8b ce		 mov	 ecx, esi
  00139	50		 push	 eax
  0013a	6a 11		 push	 17			; 00000011H
  0013c	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00141	5e		 pop	 esi

; 143  : }

  00142	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00145	33 cd		 xor	 ecx, ebp
  00147	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
$LN30@SelectPhas:

; 132  : 			return;
; 133  : 			break;
; 134  : 
; 135  : 		///////////////////////////////////////////////////////////////////////////////////////////
; 136  : 		case HEADER_GC_PING:
; 137  : 			if (RecvPingPacket())

  00150	8b ce		 mov	 ecx, esi
  00152	e8 00 00 00 00	 call	 ?RecvPingPacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::RecvPingPacket
$LN36@SelectPhas:

; 138  : 				return;
; 139  : 			break;
; 140  : 	}
; 141  : 
; 142  : 	RecvErrorPacket(header);

  00157	84 c0		 test	 al, al
  00159	75 0c		 jne	 SHORT $LN1@SelectPhas
$LN31@SelectPhas:
  0015b	0f b6 45 e7	 movzx	 eax, BYTE PTR _header$[ebp]
  0015f	8b ce		 mov	 ecx, esi
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 ?RecvErrorPacket@CPythonNetworkStream@@IAE_NH@Z ; CPythonNetworkStream::RecvErrorPacket
$LN1@SelectPhas:

; 143  : }

  00167	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016a	33 cd		 xor	 ecx, ebp
  0016c	5e		 pop	 esi
  0016d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00172	8b e5		 mov	 esp, ebp
  00174	5d		 pop	 ebp
  00175	c3		 ret	 0
  00176	66 90		 npad	 2
$LN34@SelectPhas:
  00178	00 00 00 00	 DD	 $LN9@SelectPhas
  0017c	00 00 00 00	 DD	 $LN13@SelectPhas
  00180	00 00 00 00	 DD	 $LN15@SelectPhas
  00184	00 00 00 00	 DD	 $LN19@SelectPhas
  00188	00 00 00 00	 DD	 $LN17@SelectPhas
  0018c	00 00 00 00	 DD	 $LN29@SelectPhas
  00190	00 00 00 00	 DD	 $LN11@SelectPhas
  00194	00 00 00 00	 DD	 $LN30@SelectPhas
  00198	00 00 00 00	 DD	 $LN7@SelectPhas
  0019c	00 00 00 00	 DD	 $LN21@SelectPhas
  001a0	00 00 00 00	 DD	 $LN25@SelectPhas
  001a4	00 00 00 00	 DD	 $LN26@SelectPhas
  001a8	00 00 00 00	 DD	 $LN28@SelectPhas
  001ac	00 00 00 00	 DD	 $LN27@SelectPhas
  001b0	00 00 00 00	 DD	 $LN24@SelectPhas
  001b4	00 00 00 00	 DD	 $LN5@SelectPhas
  001b8	00 00 00 00	 DD	 $LN23@SelectPhas
  001bc	00 00 00 00	 DD	 $LN31@SelectPhas
$LN33@SelectPhas:
  001c0	00		 DB	 0
  001c1	11		 DB	 17			; 00000011H
  001c2	01		 DB	 1
  001c3	02		 DB	 2
  001c4	03		 DB	 3
  001c5	04		 DB	 4
  001c6	11		 DB	 17			; 00000011H
  001c7	11		 DB	 17			; 00000011H
  001c8	11		 DB	 17			; 00000011H
  001c9	11		 DB	 17			; 00000011H
  001ca	11		 DB	 17			; 00000011H
  001cb	05		 DB	 5
  001cc	11		 DB	 17			; 00000011H
  001cd	11		 DB	 17			; 00000011H
  001ce	11		 DB	 17			; 00000011H
  001cf	11		 DB	 17			; 00000011H
  001d0	11		 DB	 17			; 00000011H
  001d1	11		 DB	 17			; 00000011H
  001d2	11		 DB	 17			; 00000011H
  001d3	11		 DB	 17			; 00000011H
  001d4	11		 DB	 17			; 00000011H
  001d5	11		 DB	 17			; 00000011H
  001d6	11		 DB	 17			; 00000011H
  001d7	11		 DB	 17			; 00000011H
  001d8	11		 DB	 17			; 00000011H
  001d9	11		 DB	 17			; 00000011H
  001da	06		 DB	 6
  001db	11		 DB	 17			; 00000011H
  001dc	11		 DB	 17			; 00000011H
  001dd	11		 DB	 17			; 00000011H
  001de	11		 DB	 17			; 00000011H
  001df	11		 DB	 17			; 00000011H
  001e0	11		 DB	 17			; 00000011H
  001e1	11		 DB	 17			; 00000011H
  001e2	11		 DB	 17			; 00000011H
  001e3	11		 DB	 17			; 00000011H
  001e4	11		 DB	 17			; 00000011H
  001e5	11		 DB	 17			; 00000011H
  001e6	07		 DB	 7
  001e7	11		 DB	 17			; 00000011H
  001e8	11		 DB	 17			; 00000011H
  001e9	11		 DB	 17			; 00000011H
  001ea	11		 DB	 17			; 00000011H
  001eb	11		 DB	 17			; 00000011H
  001ec	11		 DB	 17			; 00000011H
  001ed	11		 DB	 17			; 00000011H
  001ee	11		 DB	 17			; 00000011H
  001ef	11		 DB	 17			; 00000011H
  001f0	11		 DB	 17			; 00000011H
  001f1	11		 DB	 17			; 00000011H
  001f2	11		 DB	 17			; 00000011H
  001f3	11		 DB	 17			; 00000011H
  001f4	11		 DB	 17			; 00000011H
  001f5	11		 DB	 17			; 00000011H
  001f6	11		 DB	 17			; 00000011H
  001f7	11		 DB	 17			; 00000011H
  001f8	11		 DB	 17			; 00000011H
  001f9	11		 DB	 17			; 00000011H
  001fa	11		 DB	 17			; 00000011H
  001fb	11		 DB	 17			; 00000011H
  001fc	11		 DB	 17			; 00000011H
  001fd	11		 DB	 17			; 00000011H
  001fe	11		 DB	 17			; 00000011H
  001ff	11		 DB	 17			; 00000011H
  00200	11		 DB	 17			; 00000011H
  00201	11		 DB	 17			; 00000011H
  00202	11		 DB	 17			; 00000011H
  00203	11		 DB	 17			; 00000011H
  00204	11		 DB	 17			; 00000011H
  00205	11		 DB	 17			; 00000011H
  00206	11		 DB	 17			; 00000011H
  00207	11		 DB	 17			; 00000011H
  00208	11		 DB	 17			; 00000011H
  00209	11		 DB	 17			; 00000011H
  0020a	11		 DB	 17			; 00000011H
  0020b	11		 DB	 17			; 00000011H
  0020c	11		 DB	 17			; 00000011H
  0020d	11		 DB	 17			; 00000011H
  0020e	11		 DB	 17			; 00000011H
  0020f	11		 DB	 17			; 00000011H
  00210	11		 DB	 17			; 00000011H
  00211	11		 DB	 17			; 00000011H
  00212	11		 DB	 17			; 00000011H
  00213	11		 DB	 17			; 00000011H
  00214	08		 DB	 8
  00215	11		 DB	 17			; 00000011H
  00216	11		 DB	 17			; 00000011H
  00217	11		 DB	 17			; 00000011H
  00218	11		 DB	 17			; 00000011H
  00219	11		 DB	 17			; 00000011H
  0021a	11		 DB	 17			; 00000011H
  0021b	11		 DB	 17			; 00000011H
  0021c	11		 DB	 17			; 00000011H
  0021d	11		 DB	 17			; 00000011H
  0021e	11		 DB	 17			; 00000011H
  0021f	11		 DB	 17			; 00000011H
  00220	11		 DB	 17			; 00000011H
  00221	11		 DB	 17			; 00000011H
  00222	11		 DB	 17			; 00000011H
  00223	11		 DB	 17			; 00000011H
  00224	11		 DB	 17			; 00000011H
  00225	09		 DB	 9
  00226	11		 DB	 17			; 00000011H
  00227	11		 DB	 17			; 00000011H
  00228	11		 DB	 17			; 00000011H
  00229	11		 DB	 17			; 00000011H
  0022a	11		 DB	 17			; 00000011H
  0022b	11		 DB	 17			; 00000011H
  0022c	11		 DB	 17			; 00000011H
  0022d	11		 DB	 17			; 00000011H
  0022e	11		 DB	 17			; 00000011H
  0022f	11		 DB	 17			; 00000011H
  00230	11		 DB	 17			; 00000011H
  00231	11		 DB	 17			; 00000011H
  00232	11		 DB	 17			; 00000011H
  00233	11		 DB	 17			; 00000011H
  00234	11		 DB	 17			; 00000011H
  00235	11		 DB	 17			; 00000011H
  00236	11		 DB	 17			; 00000011H
  00237	11		 DB	 17			; 00000011H
  00238	11		 DB	 17			; 00000011H
  00239	11		 DB	 17			; 00000011H
  0023a	11		 DB	 17			; 00000011H
  0023b	11		 DB	 17			; 00000011H
  0023c	11		 DB	 17			; 00000011H
  0023d	11		 DB	 17			; 00000011H
  0023e	11		 DB	 17			; 00000011H
  0023f	11		 DB	 17			; 00000011H
  00240	11		 DB	 17			; 00000011H
  00241	11		 DB	 17			; 00000011H
  00242	11		 DB	 17			; 00000011H
  00243	11		 DB	 17			; 00000011H
  00244	11		 DB	 17			; 00000011H
  00245	11		 DB	 17			; 00000011H
  00246	11		 DB	 17			; 00000011H
  00247	11		 DB	 17			; 00000011H
  00248	11		 DB	 17			; 00000011H
  00249	11		 DB	 17			; 00000011H
  0024a	11		 DB	 17			; 00000011H
  0024b	11		 DB	 17			; 00000011H
  0024c	11		 DB	 17			; 00000011H
  0024d	11		 DB	 17			; 00000011H
  0024e	11		 DB	 17			; 00000011H
  0024f	11		 DB	 17			; 00000011H
  00250	11		 DB	 17			; 00000011H
  00251	11		 DB	 17			; 00000011H
  00252	0a		 DB	 10			; 0000000aH
  00253	0b		 DB	 11			; 0000000bH
  00254	11		 DB	 17			; 00000011H
  00255	11		 DB	 17			; 00000011H
  00256	11		 DB	 17			; 00000011H
  00257	11		 DB	 17			; 00000011H
  00258	11		 DB	 17			; 00000011H
  00259	11		 DB	 17			; 00000011H
  0025a	11		 DB	 17			; 00000011H
  0025b	11		 DB	 17			; 00000011H
  0025c	11		 DB	 17			; 00000011H
  0025d	11		 DB	 17			; 00000011H
  0025e	11		 DB	 17			; 00000011H
  0025f	11		 DB	 17			; 00000011H
  00260	11		 DB	 17			; 00000011H
  00261	11		 DB	 17			; 00000011H
  00262	11		 DB	 17			; 00000011H
  00263	11		 DB	 17			; 00000011H
  00264	11		 DB	 17			; 00000011H
  00265	11		 DB	 17			; 00000011H
  00266	11		 DB	 17			; 00000011H
  00267	11		 DB	 17			; 00000011H
  00268	11		 DB	 17			; 00000011H
  00269	11		 DB	 17			; 00000011H
  0026a	11		 DB	 17			; 00000011H
  0026b	11		 DB	 17			; 00000011H
  0026c	11		 DB	 17			; 00000011H
  0026d	11		 DB	 17			; 00000011H
  0026e	11		 DB	 17			; 00000011H
  0026f	11		 DB	 17			; 00000011H
  00270	11		 DB	 17			; 00000011H
  00271	11		 DB	 17			; 00000011H
  00272	11		 DB	 17			; 00000011H
  00273	11		 DB	 17			; 00000011H
  00274	11		 DB	 17			; 00000011H
  00275	11		 DB	 17			; 00000011H
  00276	11		 DB	 17			; 00000011H
  00277	11		 DB	 17			; 00000011H
  00278	11		 DB	 17			; 00000011H
  00279	11		 DB	 17			; 00000011H
  0027a	11		 DB	 17			; 00000011H
  0027b	11		 DB	 17			; 00000011H
  0027c	11		 DB	 17			; 00000011H
  0027d	11		 DB	 17			; 00000011H
  0027e	11		 DB	 17			; 00000011H
  0027f	11		 DB	 17			; 00000011H
  00280	11		 DB	 17			; 00000011H
  00281	11		 DB	 17			; 00000011H
  00282	11		 DB	 17			; 00000011H
  00283	11		 DB	 17			; 00000011H
  00284	11		 DB	 17			; 00000011H
  00285	11		 DB	 17			; 00000011H
  00286	11		 DB	 17			; 00000011H
  00287	11		 DB	 17			; 00000011H
  00288	11		 DB	 17			; 00000011H
  00289	11		 DB	 17			; 00000011H
  0028a	11		 DB	 17			; 00000011H
  0028b	11		 DB	 17			; 00000011H
  0028c	11		 DB	 17			; 00000011H
  0028d	11		 DB	 17			; 00000011H
  0028e	11		 DB	 17			; 00000011H
  0028f	11		 DB	 17			; 00000011H
  00290	11		 DB	 17			; 00000011H
  00291	11		 DB	 17			; 00000011H
  00292	11		 DB	 17			; 00000011H
  00293	11		 DB	 17			; 00000011H
  00294	11		 DB	 17			; 00000011H
  00295	11		 DB	 17			; 00000011H
  00296	11		 DB	 17			; 00000011H
  00297	11		 DB	 17			; 00000011H
  00298	11		 DB	 17			; 00000011H
  00299	11		 DB	 17			; 00000011H
  0029a	11		 DB	 17			; 00000011H
  0029b	11		 DB	 17			; 00000011H
  0029c	11		 DB	 17			; 00000011H
  0029d	11		 DB	 17			; 00000011H
  0029e	11		 DB	 17			; 00000011H
  0029f	11		 DB	 17			; 00000011H
  002a0	11		 DB	 17			; 00000011H
  002a1	11		 DB	 17			; 00000011H
  002a2	11		 DB	 17			; 00000011H
  002a3	11		 DB	 17			; 00000011H
  002a4	11		 DB	 17			; 00000011H
  002a5	11		 DB	 17			; 00000011H
  002a6	11		 DB	 17			; 00000011H
  002a7	11		 DB	 17			; 00000011H
  002a8	11		 DB	 17			; 00000011H
  002a9	11		 DB	 17			; 00000011H
  002aa	11		 DB	 17			; 00000011H
  002ab	11		 DB	 17			; 00000011H
  002ac	11		 DB	 17			; 00000011H
  002ad	11		 DB	 17			; 00000011H
  002ae	11		 DB	 17			; 00000011H
  002af	11		 DB	 17			; 00000011H
  002b0	11		 DB	 17			; 00000011H
  002b1	11		 DB	 17			; 00000011H
  002b2	11		 DB	 17			; 00000011H
  002b3	11		 DB	 17			; 00000011H
  002b4	0c		 DB	 12			; 0000000cH
  002b5	0d		 DB	 13			; 0000000dH
  002b6	0e		 DB	 14			; 0000000eH
  002b7	0f		 DB	 15			; 0000000fH
  002b8	11		 DB	 17			; 00000011H
  002b9	10		 DB	 16			; 00000010H
?SelectPhase@CPythonNetworkStream@@IAEXXZ ENDP		; CPythonNetworkStream::SelectPhase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SendDestroyCharacterPacket@CPythonNetworkStream@@QAE_NEPBD@Z
_TEXT	SEGMENT
_DestroyCharacterPacket$ = -16				; size = 10
__$ArrayPad$ = -4					; size = 4
_index$ = 8						; size = 1
_szPrivateCode$ = 12					; size = 4
?SendDestroyCharacterPacket@CPythonNetworkStream@@QAE_NEPBD@Z PROC ; CPythonNetworkStream::SendDestroyCharacterPacket, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 179  :     TPacketCGDestroyCharacter DestroyCharacterPacket;
; 180  : 
; 181  : 	DestroyCharacterPacket.header = HEADER_CG_PLAYER_DESTROY;
; 182  : 	DestroyCharacterPacket.index = index;

  00010	8a 45 08	 mov	 al, BYTE PTR _index$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	88 45 f1	 mov	 BYTE PTR _DestroyCharacterPacket$[ebp+1], al
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _szPrivateCode$[ebp]

; 183  : 	strncpy(DestroyCharacterPacket.szPrivateCode, szPrivateCode, PRIVATE_CODE_LENGTH-1);

  0001c	8d 45 f2	 lea	 eax, DWORD PTR _DestroyCharacterPacket$[ebp+2]
  0001f	6a 07		 push	 7
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	c6 45 f0 05	 mov	 BYTE PTR _DestroyCharacterPacket$[ebp], 5
  00027	e8 00 00 00 00	 call	 _strncpy
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 184  : 
; 185  : 	if (!Send(sizeof(TPacketCGDestroyCharacter), &DestroyCharacterPacket))

  0002f	8d 45 f0	 lea	 eax, DWORD PTR _DestroyCharacterPacket$[ebp]
  00032	8b ce		 mov	 ecx, esi
  00034	50		 push	 eax
  00035	6a 0a		 push	 10			; 0000000aH
  00037	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  0003c	84 c0		 test	 al, al
  0003e	75 20		 jne	 SHORT $LN2@SendDestro

; 186  : 	{
; 187  : 		Tracen("SendDestroyCharacterPacket");

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PMHPNGGJ@SendDestroyCharacterPacket@
  00045	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0004a	83 c4 04	 add	 esp, 4

; 188  : 		return false;

  0004d	32 c0		 xor	 al, al
  0004f	5e		 pop	 esi

; 192  : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
$LN2@SendDestro:

; 189  : 	}
; 190  : 
; 191  : 	return SendSequence();

  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?SendSequence@CNetworkStream@@QAE_NXZ ; CNetworkStream::SendSequence

; 192  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	5e		 pop	 esi
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
?SendDestroyCharacterPacket@CPythonNetworkStream@@QAE_NEPBD@Z ENDP ; CPythonNetworkStream::SendDestroyCharacterPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SendCreateCharacterPacket@CPythonNetworkStream@@QAE_NEPBDEEEEEE@Z
_TEXT	SEGMENT
_createCharacterPacket$ = -40				; size = 34
__$ArrayPad$ = -4					; size = 4
_index$ = 8						; size = 1
_name$ = 12						; size = 4
_job$ = 16						; size = 1
_shape$ = 20						; size = 1
_byCON$ = 24						; size = 1
_byINT$ = 28						; size = 1
_bySTR$ = 32						; size = 1
_byDEX$ = 36						; size = 1
?SendCreateCharacterPacket@CPythonNetworkStream@@QAE_NEPBDEEEEEE@Z PROC ; CPythonNetworkStream::SendCreateCharacterPacket, COMDAT
; _this$ = ecx

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 196  : 	TPacketCGCreateCharacter createCharacterPacket;
; 197  : 
; 198  : 	createCharacterPacket.header = HEADER_CG_PLAYER_CREATE;
; 199  : 	createCharacterPacket.index = index;

  00010	8a 45 08	 mov	 al, BYTE PTR _index$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	88 45 d9	 mov	 BYTE PTR _createCharacterPacket$[ebp+1], al
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _name$[ebp]

; 200  : 	strncpy(createCharacterPacket.name, name, CHARACTER_NAME_MAX_LEN);

  0001c	8d 45 da	 lea	 eax, DWORD PTR _createCharacterPacket$[ebp+2]
  0001f	6a 18		 push	 24			; 00000018H
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	c6 45 d8 04	 mov	 BYTE PTR _createCharacterPacket$[ebp], 4
  00027	e8 00 00 00 00	 call	 _strncpy

; 201  : 	createCharacterPacket.job = job;

  0002c	0f b6 45 10	 movzx	 eax, BYTE PTR _job$[ebp]
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	66 89 45 f3	 mov	 WORD PTR _createCharacterPacket$[ebp+27], ax

; 202  : 	createCharacterPacket.shape = shape;
; 203  : 	createCharacterPacket.CON = byCON;
; 204  : 	createCharacterPacket.INT = byINT;
; 205  : 	createCharacterPacket.STR = bySTR;
; 206  : 	createCharacterPacket.DEX = byDEX;
; 207  : 
; 208  : 	if (!Send(sizeof(TPacketCGCreateCharacter), &createCharacterPacket))

  00037	8b ce		 mov	 ecx, esi
  00039	8a 45 14	 mov	 al, BYTE PTR _shape$[ebp]
  0003c	88 45 f5	 mov	 BYTE PTR _createCharacterPacket$[ebp+29], al
  0003f	8a 45 18	 mov	 al, BYTE PTR _byCON$[ebp]
  00042	88 45 f6	 mov	 BYTE PTR _createCharacterPacket$[ebp+30], al
  00045	8a 45 1c	 mov	 al, BYTE PTR _byINT$[ebp]
  00048	88 45 f7	 mov	 BYTE PTR _createCharacterPacket$[ebp+31], al
  0004b	8a 45 20	 mov	 al, BYTE PTR _bySTR$[ebp]
  0004e	88 45 f8	 mov	 BYTE PTR _createCharacterPacket$[ebp+32], al
  00051	8a 45 24	 mov	 al, BYTE PTR _byDEX$[ebp]
  00054	88 45 f9	 mov	 BYTE PTR _createCharacterPacket$[ebp+33], al
  00057	8d 45 d8	 lea	 eax, DWORD PTR _createCharacterPacket$[ebp]
  0005a	50		 push	 eax
  0005b	6a 22		 push	 34			; 00000022H
  0005d	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  00062	84 c0		 test	 al, al
  00064	75 20		 jne	 SHORT $LN2@SendCreate

; 209  : 	{
; 210  : 		Tracen("Failed to SendCreateCharacterPacket");

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MAKBOJI@Failed?5to?5SendCreateCharacterPa@
  0006b	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00070	83 c4 04	 add	 esp, 4

; 211  : 		return false;

  00073	32 c0		 xor	 al, al
  00075	5e		 pop	 esi

; 215  : }

  00076	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	33 cd		 xor	 ecx, ebp
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 20 00	 ret	 32			; 00000020H
$LN2@SendCreate:

; 212  : 	}
; 213  : 
; 214  : 	return SendSequence();

  00086	8b ce		 mov	 ecx, esi
  00088	e8 00 00 00 00	 call	 ?SendSequence@CNetworkStream@@QAE_NXZ ; CNetworkStream::SendSequence

; 215  : }

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	33 cd		 xor	 ecx, ebp
  00092	5e		 pop	 esi
  00093	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 20 00	 ret	 32			; 00000020H
?SendCreateCharacterPacket@CPythonNetworkStream@@QAE_NEPBDEEEEEE@Z ENDP ; CPythonNetworkStream::SendCreateCharacterPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SendChangeNamePacket@CPythonNetworkStream@@QAE_NEPBD@Z
_TEXT	SEGMENT
_ChangeNamePacket$ = -32				; size = 27
__$ArrayPad$ = -4					; size = 4
_index$ = 8						; size = 1
_name$ = 12						; size = 4
?SendChangeNamePacket@CPythonNetworkStream@@QAE_NEPBD@Z PROC ; CPythonNetworkStream::SendChangeNamePacket, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 219  : 	TPacketCGChangeName ChangeNamePacket;
; 220  : 	ChangeNamePacket.header = HEADER_CG_CHANGE_NAME;
; 221  : 	ChangeNamePacket.index = index;

  00010	8a 45 08	 mov	 al, BYTE PTR _index$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	88 45 e1	 mov	 BYTE PTR _ChangeNamePacket$[ebp+1], al
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _name$[ebp]

; 222  : 	strncpy(ChangeNamePacket.name, name, CHARACTER_NAME_MAX_LEN);

  0001c	8d 45 e2	 lea	 eax, DWORD PTR _ChangeNamePacket$[ebp+2]
  0001f	6a 18		 push	 24			; 00000018H
  00021	51		 push	 ecx
  00022	50		 push	 eax
  00023	c6 45 e0 6a	 mov	 BYTE PTR _ChangeNamePacket$[ebp], 106 ; 0000006aH
  00027	e8 00 00 00 00	 call	 _strncpy
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 223  : 
; 224  : 	if (!Send(sizeof(TPacketCGChangeName), &ChangeNamePacket))

  0002f	8d 45 e0	 lea	 eax, DWORD PTR _ChangeNamePacket$[ebp]
  00032	8b ce		 mov	 ecx, esi
  00034	50		 push	 eax
  00035	6a 1b		 push	 27			; 0000001bH
  00037	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  0003c	84 c0		 test	 al, al
  0003e	75 20		 jne	 SHORT $LN2@SendChange

; 225  : 	{
; 226  : 		Tracen("Failed to SendChangeNamePacket");

  00040	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NACAEM@Failed?5to?5SendChangeNamePacket@
  00045	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0004a	83 c4 04	 add	 esp, 4

; 227  : 		return false;

  0004d	32 c0		 xor	 al, al
  0004f	5e		 pop	 esi

; 231  : }

  00050	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00053	33 cd		 xor	 ecx, ebp
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 08 00	 ret	 8
$LN2@SendChange:

; 228  : 	}
; 229  : 
; 230  : 	return SendSequence();

  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?SendSequence@CNetworkStream@@QAE_NXZ ; CNetworkStream::SendSequence

; 231  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	33 cd		 xor	 ecx, ebp
  0006c	5e		 pop	 esi
  0006d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 08 00	 ret	 8
?SendChangeNamePacket@CPythonNetworkStream@@QAE_NEPBD@Z ENDP ; CPythonNetworkStream::SendChangeNamePacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SendSelectCharacterPacket@CPythonNetworkStream@@QAE_NE@Z
_TEXT	SEGMENT
_SelectCharacterPacket$ = -4				; size = 2
_Index$ = 8						; size = 1
?SendSelectCharacterPacket@CPythonNetworkStream@@QAE_NE@Z PROC ; CPythonNetworkStream::SendSelectCharacterPacket, COMDAT
; _this$ = ecx

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 163  : 	TPacketCGSelectCharacter SelectCharacterPacket;
; 164  : 
; 165  : 	SelectCharacterPacket.header = HEADER_CG_PLAYER_SELECT;
; 166  : 	SelectCharacterPacket.player_index = Index;

  00004	8a 45 08	 mov	 al, BYTE PTR _Index$[ebp]
  00007	56		 push	 esi
  00008	88 45 fd	 mov	 BYTE PTR _SelectCharacterPacket$[ebp+1], al
  0000b	8b f1		 mov	 esi, ecx

; 167  : 
; 168  : 	if (!Send(sizeof(TPacketCGSelectCharacter), &SelectCharacterPacket))

  0000d	8d 45 fc	 lea	 eax, DWORD PTR _SelectCharacterPacket$[ebp]
  00010	c6 45 fc 06	 mov	 BYTE PTR _SelectCharacterPacket$[ebp], 6
  00014	50		 push	 eax
  00015	6a 02		 push	 2
  00017	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  0001c	84 c0		 test	 al, al
  0001e	75 16		 jne	 SHORT $LN2@SendSelect

; 169  : 	{
; 170  : 		Tracen("SendSelectCharacterPacket - Error");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LCEFGOOP@SendSelectCharacterPacket?5?9?5Err@
  00025	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0002a	83 c4 04	 add	 esp, 4

; 171  : 		return false;

  0002d	32 c0		 xor	 al, al
  0002f	5e		 pop	 esi

; 175  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN2@SendSelect:

; 172  : 	}
; 173  : 
; 174  : 	return SendSequence();

  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?SendSequence@CNetworkStream@@QAE_NXZ ; CNetworkStream::SendSequence
  0003d	5e		 pop	 esi

; 175  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?SendSelectCharacterPacket@CPythonNetworkStream@@QAE_NE@Z ENDP ; CPythonNetworkStream::SendSelectCharacterPacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SendSelectEmpirePacket@CPythonNetworkStream@@QAE_NK@Z
_TEXT	SEGMENT
_kPacketEmpire$ = -4					; size = 2
_dwEmpireID$ = 8					; size = 4
?SendSelectEmpirePacket@CPythonNetworkStream@@QAE_NK@Z PROC ; CPythonNetworkStream::SendSelectEmpirePacket, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 147  : 	TPacketCGEmpire kPacketEmpire;
; 148  : 	kPacketEmpire.bHeader=HEADER_CG_EMPIRE;
; 149  : 	kPacketEmpire.bEmpire=dwEmpireID;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _dwEmpireID$[ebp]

; 150  : 
; 151  : 	if (!Send(sizeof(kPacketEmpire), &kPacketEmpire))

  00008	8d 45 fc	 lea	 eax, DWORD PTR _kPacketEmpire$[ebp]
  0000b	56		 push	 esi
  0000c	50		 push	 eax
  0000d	6a 02		 push	 2
  0000f	8b f1		 mov	 esi, ecx
  00011	c6 45 fc 5a	 mov	 BYTE PTR _kPacketEmpire$[ebp], 90 ; 0000005aH
  00015	88 5d fd	 mov	 BYTE PTR _kPacketEmpire$[ebp+1], bl
  00018	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  0001d	84 c0		 test	 al, al
  0001f	75 17		 jne	 SHORT $LN2@SendSelect

; 152  : 	{
; 153  : 		Tracen("SendSelectEmpirePacket - Error");

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MCDDNHPB@SendSelectEmpirePacket?5?9?5Error@
  00026	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0002b	83 c4 04	 add	 esp, 4

; 154  : 		return false;

  0002e	32 c0		 xor	 al, al
  00030	5e		 pop	 esi

; 159  : }

  00031	5b		 pop	 ebx
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN2@SendSelect:

; 155  : 	}
; 156  : 
; 157  : 	SetEmpireID(dwEmpireID);

  00038	53		 push	 ebx
  00039	8b ce		 mov	 ecx, esi
  0003b	e8 00 00 00 00	 call	 ?SetEmpireID@CPythonNetworkStream@@QAEXK@Z ; CPythonNetworkStream::SetEmpireID

; 158  : 	return SendSequence();

  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ?SendSequence@CNetworkStream@@QAE_NXZ ; CNetworkStream::SendSequence
  00047	5e		 pop	 esi

; 159  : }

  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?SendSelectEmpirePacket@CPythonNetworkStream@@QAE_NK@Z ENDP ; CPythonNetworkStream::SendSelectEmpirePacket
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\FuncObject.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\FuncObject.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SetSelectPhase@CPythonNetworkStream@@QAEXXZ
_TEXT	SEGMENT
?SetSelectPhase@CPythonNetworkStream@@QAEXXZ PROC	; CPythonNetworkStream::SetSelectPhase, COMDAT
; _this$ = ecx

; 10   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 11   : 	if ("Select" != m_strPhase)

  00004	8d be 0c 01 00
	00		 lea	 edi, DWORD PTR [esi+268]
  0000a	57		 push	 edi
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_06HJGPBJLE@Select@
  00010	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00015	83 c4 08	 add	 esp, 8
  00018	84 c0		 test	 al, al
  0001a	74 1e		 je	 SHORT $LN10@SetSelectP
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\FuncObject.h

; 41   : 			if (m_pSelfObject)

  0001c	8b 86 68 01 00
	00		 mov	 eax, DWORD PTR [esi+360]
  00022	85 c0		 test	 eax, eax
  00024	74 14		 je	 SHORT $LN10@SetSelectP

; 42   : 				if (m_pFuncObject)

  00026	8b 96 70 01 00
	00		 mov	 edx, DWORD PTR [esi+368]
  0002c	85 d2		 test	 edx, edx
  0002e	74 0a		 je	 SHORT $LN10@SetSelectP

; 43   : 					(m_pSelfObject->*m_pFuncObject)();

  00030	8b 8e 74 01 00
	00		 mov	 ecx, DWORD PTR [esi+372]
  00036	03 c8		 add	 ecx, eax
  00038	ff d2		 call	 edx
$LN10@SetSelectP:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp

; 14   : 	Tracen("");

  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0003f	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen

; 15   : 	Tracen("## Network - Select Phase ##");

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HMHBDFBF@?$CD?$CD?5Network?5?9?5Select?5Phase?5?$CD?$CD@
  00049	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen

; 16   : 	Tracen("");

  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00053	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005b	8b cf		 mov	 ecx, edi
  0005d	6a 06		 push	 6
  0005f	68 00 00 00 00	 push	 OFFSET ??_C@_06HJGPBJLE@Select@
  00064	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp

; 24   : 	m_dwChangingPhaseTime = ELTimer_GetMSec();

  00069	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  0006e	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 28   : 	if (__DirectEnterMode_IsSet())

  00074	8b ce		 mov	 ecx, esi
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\FuncObject.h

; 24   : 			m_pSelfObject = pSelfObject;

  00076	89 b6 50 01 00
	00		 mov	 DWORD PTR [esi+336], esi

; 25   : 			m_pFuncObject = pFuncObject;

  0007c	c7 86 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+344], OFFSET ?SelectPhase@CPythonNetworkStream@@IAEXXZ ; CPythonNetworkStream::SelectPhase
  00086	c7 86 5c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+348], 0

; 24   : 			m_pSelfObject = pSelfObject;

  00090	89 b6 68 01 00
	00		 mov	 DWORD PTR [esi+360], esi

; 25   : 			m_pFuncObject = pFuncObject;

  00096	c7 86 70 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+368], OFFSET ?__LeaveSelectPhase@CPythonNetworkStream@@IAEXXZ ; CPythonNetworkStream::__LeaveSelectPhase
  000a0	c7 86 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+372], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp

; 28   : 	if (__DirectEnterMode_IsSet())

  000aa	e8 00 00 00 00	 call	 ?__DirectEnterMode_IsSet@CPythonNetworkStream@@AAE_NXZ ; CPythonNetworkStream::__DirectEnterMode_IsSet
  000af	84 c0		 test	 al, al
  000b1	74 07		 je	 SHORT $LN3@SetSelectP

; 29   : 	{
; 30   : 		PyCallClassMemberFunc(m_poHandler, "SetLoadingPhase", Py_BuildValue("()"));	

  000b3	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BA@FHNDCDDK@SetLoadingPhase@

; 31   : 	}

  000b8	eb 15		 jmp	 SHORT $LN28@SetSelectP
$LN3@SetSelectP:

; 32   : 	else
; 33   : 	{
; 34   : 		if (IsSelectedEmpire())

  000ba	8b ce		 mov	 ecx, esi
  000bc	e8 00 00 00 00	 call	 ?IsSelectedEmpire@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::IsSelectedEmpire

; 35   : 			PyCallClassMemberFunc(m_poHandler, "SetSelectCharacterPhase", Py_BuildValue("()"));

  000c1	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BI@OHJNHIAD@SetSelectCharacterPhase@
  000c6	84 c0		 test	 al, al
  000c8	75 05		 jne	 SHORT $LN28@SetSelectP

; 36   : 		else
; 37   : 			PyCallClassMemberFunc(m_poHandler, "SetSelectEmpirePhase", Py_BuildValue("()"));

  000ca	bf 00 00 00 00	 mov	 edi, OFFSET ??_C@_0BF@BJJJIJOC@SetSelectEmpirePhase@
$LN28@SetSelectP:

; 38   : 	}
; 39   : }

  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_02HCKGKOFO@?$CI?$CJ@
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  000da	83 c4 04	 add	 esp, 4
  000dd	50		 push	 eax
  000de	8b 86 78 01 00
	00		 mov	 eax, DWORD PTR [esi+376]
  000e4	57		 push	 edi
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ee	5f		 pop	 edi
  000ef	5e		 pop	 esi
  000f0	c3		 ret	 0
?SetSelectPhase@CPythonNetworkStream@@QAEXXZ ENDP	; CPythonNetworkStream::SetSelectPhase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 116  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 117  :         _Throw_bad_array_new_length(); // add overflow
; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;
; 129  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0000b	72 09		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000d	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  00010	5d		 pop	 ebp

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00011	e9 00 00 00 00	 jmp	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00016	85 c0		 test	 eax, eax
  00018	74 09		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001a	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 210  : }

  0001d	5d		 pop	 ebp

; 77   :         return ::operator new(_Bytes);

  0001e	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN3@Allocate:

; 206  :         return _Traits::_Allocate(_Bytes);
; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00023	33 c0		 xor	 eax, eax

; 210  : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 18		 jb	 SHORT $LN15@Deallocate

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0000e	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00011	83 c1 23	 add	 ecx, 35			; 00000023H
  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	76 08		 jbe	 SHORT $LN13@Deallocate
  00021	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
$LN15@Deallocate:

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$LN13@Deallocate:

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00029	89 4d 0c	 mov	 DWORD PTR __Bytes$[ebp], ecx
  0002c	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx

; 222  : }

  0002f	5d		 pop	 ebp

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  00030	e9 00 00 00 00	 jmp	 ??3@YAXPAXI@Z		; operator delete
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00003	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  0000b	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old$1$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__New_ptr$1 = 12					; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3042 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 3043 :         // assign [_Ptr, _Ptr + _Count)
; 3044 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR __Old$1$[ebp], ecx
  00012	3b f9		 cmp	 edi, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2209 :         value_type* _Result = _Bx._Buf;

  00016	8b de		 mov	 ebx, esi

; 2227 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2210 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN5@assign:

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	57		 push	 edi
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3045 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3046 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3047 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3048 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 3059 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4305 :         if (_New_size > max_size()) {

  0003e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00044	0f 87 91 00 00
	00		 ja	 $LN36@assign

; 4285 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b df		 mov	 ebx, edi
  0004c	83 cb 0f	 or	 ebx, 15			; 0000000fH
  0004f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 4286 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 07		 jbe	 SHORT $LN19@assign

; 4287 :             return _Max;

  00057	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  0005c	eb 1e		 jmp	 SHORT $LN18@assign
$LN19@assign:

; 4288 :         }
; 4289 : 
; 4290 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0005e	8b d1		 mov	 edx, ecx
  00060	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00065	d1 ea		 shr	 edx, 1
  00067	2b c2		 sub	 eax, edx
  00069	3b c8		 cmp	 ecx, eax
  0006b	76 07		 jbe	 SHORT $LN20@assign

; 4291 :             return _Max;

  0006d	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00072	eb 08		 jmp	 SHORT $LN18@assign
$LN20@assign:

; 4292 :         }
; 4293 : 
; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00074	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00077	3b d8		 cmp	 ebx, eax
  00079	0f 42 d8	 cmovb	 ebx, eax
$LN18@assign:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0007c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00085	57		 push	 edi
  00086	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00089	89 45 0c	 mov	 DWORD PTR __New_ptr$1[ebp], eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008c	50		 push	 eax

; 4314 :         _Mypair._Myval2._Mysize = _New_size;

  0008d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 4315 :         _Mypair._Myval2._Myres  = _New_capacity;

  00090	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00093	e8 00 00 00 00	 call	 _memcpy

; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00098	8b 5d 0c	 mov	 ebx, DWORD PTR __New_ptr$1[ebp]

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009b	83 c4 10	 add	 esp, 16			; 00000010H

; 4317 :         if (_BUF_SIZE <= _Old_capacity) {

  0009e	8b 45 fc	 mov	 eax, DWORD PTR __Old$1$[ebp]

; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000a1	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 4317 :         if (_BUF_SIZE <= _Old_capacity) {

  000a5	83 f8 10	 cmp	 eax, 16			; 00000010H
  000a8	72 19		 jb	 SHORT $LN13@assign

; 4318 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000aa	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ab	50		 push	 eax
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3059 :     }

  000b3	83 c4 08	 add	 esp, 8

; 4319 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000b6	89 1e		 mov	 DWORD PTR [esi], ebx

; 3059 :     }

  000b8	8b c6		 mov	 eax, esi
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
$LN13@assign:

; 4321 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000c3	8d 45 0c	 lea	 eax, DWORD PTR __New_ptr$1[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>

; 3059 :     }

  000cd	83 c4 08	 add	 esp, 8
  000d0	8b c6		 mov	 eax, esi
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi
  000d4	5b		 pop	 ebx
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c2 08 00	 ret	 8
$LN36@assign:

; 4306 :             _Xlen_string(); // result too long

  000db	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN33@assign:
  000e0	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2275 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
