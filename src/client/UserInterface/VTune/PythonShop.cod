; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	?initshop@@YAXXZ				; initshop
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$CSingleton@VCPythonShop@@@@UAE@XZ		; CSingleton<CPythonShop>::~CSingleton<CPythonShop>
PUBLIC	??_G?$CSingleton@VCPythonShop@@@@UAEPAXI@Z	; CSingleton<CPythonShop>::`scalar deleting destructor'
PUBLIC	??0CPythonShop@@QAE@XZ				; CPythonShop::CPythonShop
PUBLIC	??1CPythonShop@@UAE@XZ				; CPythonShop::~CPythonShop
PUBLIC	?Clear@CPythonShop@@QAEXXZ			; CPythonShop::Clear
PUBLIC	?SetItemData@CPythonShop@@QAEXKABUpacket_shop_item@@@Z ; CPythonShop::SetItemData
PUBLIC	?GetItemData@CPythonShop@@QAEHKPAPBUpacket_shop_item@@@Z ; CPythonShop::GetItemData
PUBLIC	?SetItemData@CPythonShop@@QAEXEKABUpacket_shop_item@@@Z ; CPythonShop::SetItemData
PUBLIC	?GetItemData@CPythonShop@@QAEHEKPAPBUpacket_shop_item@@@Z ; CPythonShop::GetItemData
PUBLIC	?SetTabCoinType@CPythonShop@@QAEXEE@Z		; CPythonShop::SetTabCoinType
PUBLIC	?GetTabCoinType@CPythonShop@@QAEEE@Z		; CPythonShop::GetTabCoinType
PUBLIC	?SetTabName@CPythonShop@@QAEXEPBD@Z		; CPythonShop::SetTabName
PUBLIC	?GetTabName@CPythonShop@@QAEPBDE@Z		; CPythonShop::GetTabName
PUBLIC	?Open@CPythonShop@@QAEXHH@Z			; CPythonShop::Open
PUBLIC	?Close@CPythonShop@@QAEXXZ			; CPythonShop::Close
PUBLIC	?IsOpen@CPythonShop@@QAEHXZ			; CPythonShop::IsOpen
PUBLIC	?IsPrivateShop@CPythonShop@@QAEHXZ		; CPythonShop::IsPrivateShop
PUBLIC	?IsMainPlayerPrivateShop@CPythonShop@@QAEHXZ	; CPythonShop::IsMainPlayerPrivateShop
PUBLIC	?ClearPrivateShopStock@CPythonShop@@QAEXXZ	; CPythonShop::ClearPrivateShopStock
PUBLIC	?AddPrivateShopItemStock@CPythonShop@@QAEXUSItemPos@@EK@Z ; CPythonShop::AddPrivateShopItemStock
PUBLIC	?DelPrivateShopItemStock@CPythonShop@@QAEXUSItemPos@@@Z ; CPythonShop::DelPrivateShopItemStock
PUBLIC	?GetPrivateShopItemPrice@CPythonShop@@QAEHUSItemPos@@@Z ; CPythonShop::GetPrivateShopItemPrice
PUBLIC	?BuildPrivateShop@CPythonShop@@QAEXPBD@Z	; CPythonShop::BuildPrivateShop
PUBLIC	??0ShopTab@CPythonShop@@QAE@XZ			; CPythonShop::ShopTab::ShopTab
PUBLIC	??1ShopTab@CPythonShop@@QAE@XZ			; CPythonShop::ShopTab::~ShopTab
PUBLIC	??0?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@USItemPos@@@1@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::~_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::max_size
PUBLIC	?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Erase_unchecked
PUBLIC	?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@0@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Erase_unchecked
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAEIABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::clear
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@@2@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::find
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Check_grow_by_1
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Insert_node
PUBLIC	??1?$map@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@@std@@QAE@XZ ; std::map<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> > >::~map<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> > >
PUBLIC	??_GCPythonShop@@UAEPAXI@Z			; CPythonShop::`scalar deleting destructor'
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0>::operator++
PUBLIC	??$_Eqrange@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@PAU12@@1@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Eqrange<SItemPos>
PUBLIC	?deallocate@?$allocator@USShopItemTable@@@std@@QAEXQAUSShopItemTable@@I@Z ; std::allocator<SShopItemTable>::deallocate
PUBLIC	??1?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAE@XZ ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::~vector<SShopItemTable,std::allocator<SShopItemTable> >
PUBLIC	?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Reallocate_exactly
PUBLIC	?reserve@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEXI@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::reserve
PUBLIC	?_Destroy@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXPAUSShopItemTable@@0@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@ABEII@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXQAUSShopItemTable@@II@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Change_array
PUBLIC	?_Tidy@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXXZ ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Tidy
PUBLIC	?_Xlength@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@CAXXZ ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Xlength
PUBLIC	?_Getal@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEAAV?$allocator@USShopItemTable@@@2@XZ ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@USShopItemTable@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SShopItemTable> >::_Vector_val<std::_Simple_types<SShopItemTable> >
PUBLIC	?shopOpen@@YAPAU_object@@PAU1@0@Z		; shopOpen
PUBLIC	?shopClose@@YAPAU_object@@PAU1@0@Z		; shopClose
PUBLIC	?shopIsOpen@@YAPAU_object@@PAU1@0@Z		; shopIsOpen
PUBLIC	?shopIsPrviateShop@@YAPAU_object@@PAU1@0@Z	; shopIsPrviateShop
PUBLIC	?shopIsMainPlayerPrivateShop@@YAPAU_object@@PAU1@0@Z ; shopIsMainPlayerPrivateShop
PUBLIC	?shopGetItemID@@YAPAU_object@@PAU1@0@Z		; shopGetItemID
PUBLIC	?shopGetItemCount@@YAPAU_object@@PAU1@0@Z	; shopGetItemCount
PUBLIC	?shopGetItemPrice@@YAPAU_object@@PAU1@0@Z	; shopGetItemPrice
PUBLIC	?shopGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z	; shopGetItemMetinSocket
PUBLIC	?shopGetItemAttribute@@YAPAU_object@@PAU1@0@Z	; shopGetItemAttribute
PUBLIC	?shopClearPrivateShopStock@@YAPAU_object@@PAU1@0@Z ; shopClearPrivateShopStock
PUBLIC	?shopAddPrivateShopItemStock@@YAPAU_object@@PAU1@0@Z ; shopAddPrivateShopItemStock
PUBLIC	?shopDelPrivateShopItemStock@@YAPAU_object@@PAU1@0@Z ; shopDelPrivateShopItemStock
PUBLIC	?shopGetPrivateShopItemPrice@@YAPAU_object@@PAU1@0@Z ; shopGetPrivateShopItemPrice
PUBLIC	?shopBuildPrivateShop@@YAPAU_object@@PAU1@0@Z	; shopBuildPrivateShop
PUBLIC	?shopGetTabCount@@YAPAU_object@@PAU1@0@Z	; shopGetTabCount
PUBLIC	?shopGetTabName@@YAPAU_object@@PAU1@0@Z		; shopGetTabName
PUBLIC	?shopGetTabCoinType@@YAPAU_object@@PAU1@0@Z	; shopGetTabCoinType
PUBLIC	??$emplace_back@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEXABUSShopItemTable@@@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::emplace_back<SShopItemTable const &>
PUBLIC	??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Emplace_reallocate<SShopItemTable const &>
PUBLIC	??$_Find@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Find<SItemPos>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
PUBLIC	??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAHV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@0@0@Z ; std::distance<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0> >
PUBLIC	??$_Destroy_range@V?$allocator@USShopItemTable@@@std@@@std@@YAXPAUSShopItemTable@@QAU1@AAV?$allocator@USShopItemTable@@@0@@Z ; std::_Destroy_range<std::allocator<SShopItemTable> >
PUBLIC	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
PUBLIC	??$_Uninitialized_move@PAUSShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@YAPAUSShopItemTable@@QAU1@0PAU1@AAV?$allocator@USShopItemTable@@@0@@Z ; std::_Uninitialized_move<SShopItemTable *,std::allocator<SShopItemTable> >
PUBLIC	??$emplace@U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::emplace<std::pair<SItemPos,SShopItemTable> >
PUBLIC	??$_Sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0HUItemStockSortFunc@@@Z ; std::_Sort_unchecked<SShopItemTable *,ItemStockSortFunc>
PUBLIC	??$_Find_lower_bound@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Find_lower_bound<SItemPos>
PUBLIC	??$_Lower_bound_duplicate@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Lower_bound_duplicate<SItemPos>
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * const &>
PUBLIC	??$_Emplace@U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@_N@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Emplace<std::pair<SItemPos,SShopItemTable> >
PUBLIC	??$_Insertion_sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAPAUSShopItemTable@@QAU1@0UItemStockSortFunc@@@Z ; std::_Insertion_sort_unchecked<SShopItemTable *,ItemStockSortFunc>
PUBLIC	??$_Make_heap_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0UItemStockSortFunc@@@Z ; std::_Make_heap_unchecked<SShopItemTable *,ItemStockSortFunc>
PUBLIC	??$_Partition_by_median_guess_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YA?AU?$pair@PAUSShopItemTable@@PAU1@@0@PAUSShopItemTable@@0UItemStockSortFunc@@@Z ; std::_Partition_by_median_guess_unchecked<SShopItemTable *,ItemStockSortFunc>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *>
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
PUBLIC	??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > ><std::pair<SItemPos,SShopItemTable> >
PUBLIC	??$_Pop_heap_hole_by_index@PAUSShopItemTable@@U1@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@HH$$QAU1@UItemStockSortFunc@@@Z ; std::_Pop_heap_hole_by_index<SShopItemTable *,SShopItemTable,ItemStockSortFunc>
PUBLIC	??$_Pop_heap_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0UItemStockSortFunc@@@Z ; std::_Pop_heap_unchecked<SShopItemTable *,ItemStockSortFunc>
PUBLIC	??$_Guess_median_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z ; std::_Guess_median_unchecked<SShopItemTable *,ItemStockSortFunc>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * &>
PUBLIC	??$_Copy_backward_memmove@PAUSShopItemTable@@PAU1@@std@@YAPAUSShopItemTable@@PAU1@00@Z ; std::_Copy_backward_memmove<SShopItemTable *,SShopItemTable *>
PUBLIC	??$_Med3_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z ; std::_Med3_unchecked<SShopItemTable *,ItemStockSortFunc>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
PUBLIC	??_7?$CSingleton@VCPythonShop@@@@6B@		; CSingleton<CPythonShop>::`vftable'
PUBLIC	??_7CPythonShop@@6B@				; CPythonShop::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCPythonNetworkStream@@@@0PAVCPythonNetworkStream@@A ; CSingleton<CPythonNetworkStream>::ms_singleton
PUBLIC	??_C@_0CP@FJEENICJ@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@ ; `string'
PUBLIC	??_C@_0FC@PFANBFHB@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@ ; `string'
PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_02PDIHAGKM@ii@				; `string'
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_04DNCDCIAE@Open@				; `string'
PUBLIC	??_C@_05LGELBCGM@Close@				; `string'
PUBLIC	??_C@_06DKEIEPKC@IsOpen@			; `string'
PUBLIC	??_C@_0O@EDCBOPPA@IsPrivateShop@		; `string'
PUBLIC	??_C@_0BI@HHPKCPJD@IsMainPlayerPrivateShop@	; `string'
PUBLIC	??_C@_09GMBNEEAB@GetItemID@			; `string'
PUBLIC	??_C@_0N@LEKALLIG@GetItemCount@			; `string'
PUBLIC	??_C@_0N@OIFMMAOE@GetItemPrice@			; `string'
PUBLIC	??_C@_0BD@JBOBKHIE@GetItemMetinSocket@		; `string'
PUBLIC	??_C@_0BB@GOKPPDHH@GetItemAttribute@		; `string'
PUBLIC	??_C@_0M@PGHDAHMM@GetTabCount@			; `string'
PUBLIC	??_C@_0L@HEMHLKHB@GetTabName@			; `string'
PUBLIC	??_C@_0P@CFALBIIJ@GetTabCoinType@		; `string'
PUBLIC	??_C@_0BG@BMKKEDKK@ClearPrivateShopStock@	; `string'
PUBLIC	??_C@_0BI@JLNKJOOM@AddPrivateShopItemStock@	; `string'
PUBLIC	??_C@_0BI@FBMJKJEA@DelPrivateShopItemStock@	; `string'
PUBLIC	??_C@_0BI@KLFPJJHF@GetPrivateShopItemPrice@	; `string'
PUBLIC	??_C@_0BB@MDMPBIAN@BuildPrivateShop@		; `string'
PUBLIC	??_C@_04BFIJLIPK@shop@				; `string'
PUBLIC	??_C@_0BA@MMIAEKCC@SHOP_SLOT_COUNT@		; `string'
PUBLIC	??_C@_0BE@FOBHCAAH@SHOP_COIN_TYPE_GOLD@		; `string'
PUBLIC	??_C@_0BO@GEPHLMDC@SHOP_COIN_TYPE_SECONDARY_COIN@ ; `string'
PUBLIC	??_R4CPythonShop@@6B@				; CPythonShop::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPythonShop@@@8				; CPythonShop `RTTI Type Descriptor'
PUBLIC	??_R3CPythonShop@@8				; CPythonShop::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPythonShop@@8				; CPythonShop::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPythonShop@@8			; CPythonShop::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPythonShop@@@@8	; CSingleton<CPythonShop>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCPythonShop@@@@@8		; CSingleton<CPythonShop> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCPythonShop@@@@8		; CSingleton<CPythonShop>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCPythonShop@@@@8		; CSingleton<CPythonShop>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCPythonShop@@@@6B@		; CSingleton<CPythonShop>::`RTTI Complete Object Locator'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	__imp__Py_BuildValue:PROC
EXTRN	__imp__PyModule_AddIntConstant:PROC
EXTRN	__imp__Py_InitModule4:PROC
EXTRN	?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z:PROC ; PyTuple_GetString
EXTRN	?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z:PROC ; PyTuple_GetInteger
EXTRN	?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z:PROC ; PyTuple_GetInteger
EXTRN	?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z:PROC ; PyTuple_GetInteger
EXTRN	?Py_BuildException@@YAPAU_object@@PBDZZ:PROC	; Py_BuildException
EXTRN	?Py_BuildNone@@YAPAU_object@@XZ:PROC		; Py_BuildNone
EXTRN	??_E?$CSingleton@VCPythonShop@@@@UAEPAXI@Z:PROC	; CSingleton<CPythonShop>::`vector deleting destructor'
EXTRN	??_ECPythonShop@@UAEPAXI@Z:PROC			; CPythonShop::`vector deleting destructor'
EXTRN	?SendBuildPrivateShopPacket@CPythonNetworkStream@@QAE_NPBDABV?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@@Z:PROC ; CPythonNetworkStream::SendBuildPrivateShopPacket
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A DD 01H DUP (?) ; CSingleton<CPythonShop>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonNetworkStream@@@@0PAVCPythonNetworkStream@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonNetworkStream@@@@0PAVCPythonNetworkStream@@A DD 01H DUP (?) ; CSingleton<CPythonNetworkStream>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R4?$CSingleton@VCPythonShop@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPythonShop@@@@6B@ DD 00H		; CSingleton<CPythonShop>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPythonShop@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPythonShop@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPythonShop@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPythonShop@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonShop@@@@8 ; CSingleton<CPythonShop>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCPythonShop@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPythonShop@@@@8 DD 00H		; CSingleton<CPythonShop>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPythonShop@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPythonShop@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCPythonShop@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPythonShop> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPythonShop@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPythonShop@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPythonShop@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonShop@@@@@8 ; CSingleton<CPythonShop>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonShop@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonShop@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonShop@@8 DD FLAT:??_R0?AVCPythonShop@@@8 ; CPythonShop::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonShop@@8
rdata$r	ENDS
;	COMDAT ??_R2CPythonShop@@8
rdata$r	SEGMENT
??_R2CPythonShop@@8 DD FLAT:??_R1A@?0A@EA@CPythonShop@@8 ; CPythonShop::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonShop@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CPythonShop@@8
rdata$r	SEGMENT
??_R3CPythonShop@@8 DD 00H				; CPythonShop::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPythonShop@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonShop@@@8
data$rs	SEGMENT
??_R0?AVCPythonShop@@@8 DD FLAT:??_7type_info@@6B@	; CPythonShop `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonShop@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CPythonShop@@6B@
rdata$r	SEGMENT
??_R4CPythonShop@@6B@ DD 00H				; CPythonShop::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonShop@@@8
	DD	FLAT:??_R3CPythonShop@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BO@GEPHLMDC@SHOP_COIN_TYPE_SECONDARY_COIN@
CONST	SEGMENT
??_C@_0BO@GEPHLMDC@SHOP_COIN_TYPE_SECONDARY_COIN@ DB 'SHOP_COIN_TYPE_SECO'
	DB	'NDARY_COIN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FOBHCAAH@SHOP_COIN_TYPE_GOLD@
CONST	SEGMENT
??_C@_0BE@FOBHCAAH@SHOP_COIN_TYPE_GOLD@ DB 'SHOP_COIN_TYPE_GOLD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MMIAEKCC@SHOP_SLOT_COUNT@
CONST	SEGMENT
??_C@_0BA@MMIAEKCC@SHOP_SLOT_COUNT@ DB 'SHOP_SLOT_COUNT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFIJLIPK@shop@
CONST	SEGMENT
??_C@_04BFIJLIPK@shop@ DB 'shop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MDMPBIAN@BuildPrivateShop@
CONST	SEGMENT
??_C@_0BB@MDMPBIAN@BuildPrivateShop@ DB 'BuildPrivateShop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KLFPJJHF@GetPrivateShopItemPrice@
CONST	SEGMENT
??_C@_0BI@KLFPJJHF@GetPrivateShopItemPrice@ DB 'GetPrivateShopItemPrice', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FBMJKJEA@DelPrivateShopItemStock@
CONST	SEGMENT
??_C@_0BI@FBMJKJEA@DelPrivateShopItemStock@ DB 'DelPrivateShopItemStock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JLNKJOOM@AddPrivateShopItemStock@
CONST	SEGMENT
??_C@_0BI@JLNKJOOM@AddPrivateShopItemStock@ DB 'AddPrivateShopItemStock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BMKKEDKK@ClearPrivateShopStock@
CONST	SEGMENT
??_C@_0BG@BMKKEDKK@ClearPrivateShopStock@ DB 'ClearPrivateShopStock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CFALBIIJ@GetTabCoinType@
CONST	SEGMENT
??_C@_0P@CFALBIIJ@GetTabCoinType@ DB 'GetTabCoinType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HEMHLKHB@GetTabName@
CONST	SEGMENT
??_C@_0L@HEMHLKHB@GetTabName@ DB 'GetTabName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PGHDAHMM@GetTabCount@
CONST	SEGMENT
??_C@_0M@PGHDAHMM@GetTabCount@ DB 'GetTabCount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GOKPPDHH@GetItemAttribute@
CONST	SEGMENT
??_C@_0BB@GOKPPDHH@GetItemAttribute@ DB 'GetItemAttribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JBOBKHIE@GetItemMetinSocket@
CONST	SEGMENT
??_C@_0BD@JBOBKHIE@GetItemMetinSocket@ DB 'GetItemMetinSocket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OIFMMAOE@GetItemPrice@
CONST	SEGMENT
??_C@_0N@OIFMMAOE@GetItemPrice@ DB 'GetItemPrice', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEKALLIG@GetItemCount@
CONST	SEGMENT
??_C@_0N@LEKALLIG@GetItemCount@ DB 'GetItemCount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GMBNEEAB@GetItemID@
CONST	SEGMENT
??_C@_09GMBNEEAB@GetItemID@ DB 'GetItemID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HHPKCPJD@IsMainPlayerPrivateShop@
CONST	SEGMENT
??_C@_0BI@HHPKCPJD@IsMainPlayerPrivateShop@ DB 'IsMainPlayerPrivateShop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EDCBOPPA@IsPrivateShop@
CONST	SEGMENT
??_C@_0O@EDCBOPPA@IsPrivateShop@ DB 'IsPrivateShop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKEIEPKC@IsOpen@
CONST	SEGMENT
??_C@_06DKEIEPKC@IsOpen@ DB 'IsOpen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LGELBCGM@Close@
CONST	SEGMENT
??_C@_05LGELBCGM@Close@ DB 'Close', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DNCDCIAE@Open@
CONST	SEGMENT
??_C@_04DNCDCIAE@Open@ DB 'Open', 00H			; `string'
CONST	ENDS
;	COMDAT ?s_methods@?1??initshop@@YAXXZ@4PAUPyMethodDef@@A
_DATA	SEGMENT
?s_methods@?1??initshop@@YAXXZ@4PAUPyMethodDef@@A DD FLAT:??_C@_04DNCDCIAE@Open@ ; `initshop'::`2'::s_methods
	DD	FLAT:?shopOpen@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_05LGELBCGM@Close@
	DD	FLAT:?shopClose@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_06DKEIEPKC@IsOpen@
	DD	FLAT:?shopIsOpen@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0O@EDCBOPPA@IsPrivateShop@
	DD	FLAT:?shopIsPrviateShop@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BI@HHPKCPJD@IsMainPlayerPrivateShop@
	DD	FLAT:?shopIsMainPlayerPrivateShop@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_09GMBNEEAB@GetItemID@
	DD	FLAT:?shopGetItemID@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0N@LEKALLIG@GetItemCount@
	DD	FLAT:?shopGetItemCount@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0N@OIFMMAOE@GetItemPrice@
	DD	FLAT:?shopGetItemPrice@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BD@JBOBKHIE@GetItemMetinSocket@
	DD	FLAT:?shopGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@GOKPPDHH@GetItemAttribute@
	DD	FLAT:?shopGetItemAttribute@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0M@PGHDAHMM@GetTabCount@
	DD	FLAT:?shopGetTabCount@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0L@HEMHLKHB@GetTabName@
	DD	FLAT:?shopGetTabName@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0P@CFALBIIJ@GetTabCoinType@
	DD	FLAT:?shopGetTabCoinType@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BG@BMKKEDKK@ClearPrivateShopStock@
	DD	FLAT:?shopClearPrivateShopStock@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BI@JLNKJOOM@AddPrivateShopItemStock@
	DD	FLAT:?shopAddPrivateShopItemStock@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BI@FBMJKJEA@DelPrivateShopItemStock@
	DD	FLAT:?shopDelPrivateShopItemStock@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BI@KLFPJJHF@GetPrivateShopItemPrice@
	DD	FLAT:?shopGetPrivateShopItemPrice@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@MDMPBIAN@BuildPrivateShop@
	DD	FLAT:?shopBuildPrivateShop@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
_DATA	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02PDIHAGKM@ii@
CONST	SEGMENT
??_C@_02PDIHAGKM@ii@ DB 'ii', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@PFANBFHB@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@
CONST	SEGMENT
??_C@_0FC@PFANBFHB@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@ DB 'Ou'
	DB	't of Index. tabIdx(%d) must be less than %d. dwSlotPos(%d) mu'
	DB	'st be less than %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@FJEENICJ@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@
CONST	SEGMENT
??_C@_0CP@FJEENICJ@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@ DB 'Ou'
	DB	't of Index. tabIdx(%d) must be less than %d.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CPythonShop@@6B@
CONST	SEGMENT
??_7CPythonShop@@6B@ DD FLAT:??_R4CPythonShop@@6B@	; CPythonShop::`vftable'
	DD	FLAT:??_ECPythonShop@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCPythonShop@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPythonShop@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPythonShop@@@@6B@ ; CSingleton<CPythonShop>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPythonShop@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z$32 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z$32
__ehfuncinfo$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z$11 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z$0
__unwindtable$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z$11
__ehfuncinfo$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?BuildPrivateShop@CPythonShop@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?BuildPrivateShop@CPythonShop@@QAEXPBD@Z$0
__ehfuncinfo$?BuildPrivateShop@CPythonShop@@QAEXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?BuildPrivateShop@CPythonShop@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CPythonShop@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CPythonShop@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPythonShop@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPythonShop@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CPythonShop@@QAE@XZ$2
__ehfuncinfo$??0CPythonShop@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CPythonShop@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z
_TEXT	SEGMENT
__Tmp$1 = -96						; size = 13
__Tmp$2 = -80						; size = 13
__Tmp$3 = -64						; size = 13
$T4 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
$T8 = -32						; size = 4
$T9 = -28						; size = 4
$T10 = -24						; size = 4
$T11 = -20						; size = 4
$T12 = -16						; size = 4
tv138 = -12						; size = 4
tv130 = -8						; size = 4
tv93 = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Med3_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z PROC ; std::_Med3_unchecked<SShopItemTable *,ItemStockSortFunc>, COMDAT

; 7434 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	56		 push	 esi
  00007	57		 push	 edi
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  00008	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0000b	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  0000f	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00012	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  00016	3b c1		 cmp	 eax, ecx
  00018	7d 09		 jge	 SHORT $LN8@Med3_unche
  0001a	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv93[ebp], 1
  00021	eb 04		 jmp	 SHORT $LN6@Med3_unche
$LN8@Med3_unche:
  00023	83 65 fc 00	 and	 DWORD PTR tv93[ebp], 0
$LN6@Med3_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7436 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00027	0f b6 45 fc	 movzx	 eax, BYTE PTR tv93[ebp]
  0002b	85 c0		 test	 eax, eax
  0002d	74 30		 je	 SHORT $LN2@Med3_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0002f	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00032	89 45 f0	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  00035	8b 75 f0	 mov	 esi, DWORD PTR $T12[ebp]
  00038	8d 7d c0	 lea	 edi, DWORD PTR __Tmp$3[ebp]
  0003b	a5		 movsd
  0003c	a5		 movsd
  0003d	a5		 movsd
  0003e	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0003f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00042	89 45 ec	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  00045	8b 75 ec	 mov	 esi, DWORD PTR $T11[ebp]
  00048	8b 7d 0c	 mov	 edi, DWORD PTR __Mid$[ebp]
  0004b	a5		 movsd
  0004c	a5		 movsd
  0004d	a5		 movsd
  0004e	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0004f	8d 45 c0	 lea	 eax, DWORD PTR __Tmp$3[ebp]
  00052	89 45 e8	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  00055	8b 75 e8	 mov	 esi, DWORD PTR $T10[ebp]
  00058	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0005b	a5		 movsd
  0005c	a5		 movsd
  0005d	a5		 movsd
  0005e	a4		 movsb
$LN2@Med3_unche:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  0005f	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00062	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00069	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  0006d	3b c1		 cmp	 eax, ecx
  0006f	7d 09		 jge	 SHORT $LN26@Med3_unche
  00071	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv130[ebp], 1
  00078	eb 04		 jmp	 SHORT $LN24@Med3_unche
$LN26@Med3_unche:
  0007a	83 65 f8 00	 and	 DWORD PTR tv130[ebp], 0
$LN24@Med3_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7440 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0007e	0f b6 45 f8	 movzx	 eax, BYTE PTR tv130[ebp]
  00082	85 c0		 test	 eax, eax
  00084	0f 84 87 00 00
	00		 je	 $LN1@Med3_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0008a	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  0008d	89 45 e4	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  00090	8b 75 e4	 mov	 esi, DWORD PTR $T9[ebp]
  00093	8d 7d b0	 lea	 edi, DWORD PTR __Tmp$2[ebp]
  00096	a5		 movsd
  00097	a5		 movsd
  00098	a5		 movsd
  00099	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0009a	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0009d	89 45 e0	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  000a0	8b 75 e0	 mov	 esi, DWORD PTR $T8[ebp]
  000a3	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  000a6	a5		 movsd
  000a7	a5		 movsd
  000a8	a5		 movsd
  000a9	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  000aa	8d 45 b0	 lea	 eax, DWORD PTR __Tmp$2[ebp]
  000ad	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  000b0	8b 75 dc	 mov	 esi, DWORD PTR $T7[ebp]
  000b3	8b 7d 0c	 mov	 edi, DWORD PTR __Mid$[ebp]
  000b6	a5		 movsd
  000b7	a5		 movsd
  000b8	a5		 movsd
  000b9	a4		 movsb
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  000ba	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  000bd	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000c4	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  000c8	3b c1		 cmp	 eax, ecx
  000ca	7d 09		 jge	 SHORT $LN44@Med3_unche
  000cc	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv138[ebp], 1
  000d3	eb 04		 jmp	 SHORT $LN42@Med3_unche
$LN44@Med3_unche:
  000d5	83 65 f4 00	 and	 DWORD PTR tv138[ebp], 0
$LN42@Med3_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7443 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000d9	0f b6 45 f4	 movzx	 eax, BYTE PTR tv138[ebp]
  000dd	85 c0		 test	 eax, eax
  000df	74 30		 je	 SHORT $LN1@Med3_unche
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  000e1	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  000e4	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  000e7	8b 75 d8	 mov	 esi, DWORD PTR $T6[ebp]
  000ea	8d 7d a0	 lea	 edi, DWORD PTR __Tmp$1[ebp]
  000ed	a5		 movsd
  000ee	a5		 movsd
  000ef	a5		 movsd
  000f0	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  000f1	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000f4	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  000f7	8b 75 d4	 mov	 esi, DWORD PTR $T5[ebp]
  000fa	8b 7d 0c	 mov	 edi, DWORD PTR __Mid$[ebp]
  000fd	a5		 movsd
  000fe	a5		 movsd
  000ff	a5		 movsd
  00100	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00101	8d 45 a0	 lea	 eax, DWORD PTR __Tmp$1[ebp]
  00104	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  00107	8b 75 d0	 mov	 esi, DWORD PTR $T4[ebp]
  0010a	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0010d	a5		 movsd
  0010e	a5		 movsd
  0010f	a5		 movsd
  00110	a4		 movsb
$LN1@Med3_unche:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7447 : }

  00111	5f		 pop	 edi
  00112	5e		 pop	 esi
  00113	c9		 leave
  00114	c3		 ret	 0
??$_Med3_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z ENDP ; std::_Med3_unchecked<SShopItemTable *,ItemStockSortFunc>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAUSShopItemTable@@PAU1@@std@@YAPAUSShopItemTable@@PAU1@00@Z
_TEXT	SEGMENT
__Dest_ch$ = -16					; size = 4
__Last_ch$ = -12					; size = 4
__Count$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAUSShopItemTable@@PAU1@@std@@YAPAUSShopItemTable@@PAU1@00@Z PROC ; std::_Copy_backward_memmove<SShopItemTable *,SShopItemTable *>, COMDAT

; 4535 : _BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 4536 :     // implement copy_backward-like function as memmove
; 4537 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 4538 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 f4	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 4539 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f0	 mov	 DWORD PTR __Dest_ch$[ebp], eax

; 4540 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00018	8b 45 f4	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0001b	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0001e	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax

; 4541 :     return static_cast<_BidIt2>(_CSTD memmove(_Dest_ch - _Count, _First_ch, _Count));

  00021	ff 75 f8	 push	 DWORD PTR __Count$[ebp]
  00024	ff 75 fc	 push	 DWORD PTR __First_ch$[ebp]
  00027	8b 45 f0	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  0002a	2b 45 f8	 sub	 eax, DWORD PTR __Count$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _memmove
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4542 : }

  00036	c9		 leave
  00037	c3		 ret	 0
??$_Copy_backward_memmove@PAUSShopItemTable@@PAU1@@std@@YAPAUSShopItemTable@@PAU1@00@Z ENDP ; std::_Copy_backward_memmove<SShopItemTable *,SShopItemTable *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00018	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00022	c9		 leave
  00023	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z
_TEXT	SEGMENT
__Two_step$1 = -12					; size = 4
__Count$ = -8						; size = 4
__Step$2 = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z PROC ; std::_Guess_median_unchecked<SShopItemTable *,ItemStockSortFunc>, COMDAT

; 7450 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 7451 :     // sort median element to middle
; 7452 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 7453 :     const _Diff _Count = _Last - _First;

  00006	8b 45 10	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000c	99		 cdq
  0000d	6a 0d		 push	 13			; 0000000dH
  0000f	59		 pop	 ecx
  00010	f7 f9		 idiv	 ecx
  00012	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax

; 7454 :     if (40 < _Count) { // Tukey's ninther

  00015	83 7d f8 28	 cmp	 DWORD PTR __Count$[ebp], 40 ; 00000028H
  00019	0f 8e 94 00 00
	00		 jle	 $LN2@Guess_medi

; 7455 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  0001f	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  00022	40		 inc	 eax
  00023	c1 f8 03	 sar	 eax, 3
  00026	89 45 fc	 mov	 DWORD PTR __Step$2[ebp], eax

; 7456 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit

  00029	8b 45 fc	 mov	 eax, DWORD PTR __Step$2[ebp]
  0002c	d1 e0		 shl	 eax, 1
  0002e	89 45 f4	 mov	 DWORD PTR __Two_step$1[ebp], eax

; 7457 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00031	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00034	6b 45 f4 0d	 imul	 eax, DWORD PTR __Two_step$1[ebp], 13
  00038	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  0003b	50		 push	 eax
  0003c	6b 45 fc 0d	 imul	 eax, DWORD PTR __Step$2[ebp], 13
  00040	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  00043	50		 push	 eax
  00044	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00047	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z ; std::_Med3_unchecked<SShopItemTable *,ItemStockSortFunc>
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 7458 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  0004f	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00052	6b 45 fc 0d	 imul	 eax, DWORD PTR __Step$2[ebp], 13
  00056	03 45 0c	 add	 eax, DWORD PTR __Mid$[ebp]
  00059	50		 push	 eax
  0005a	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  0005d	6b 45 fc 0d	 imul	 eax, DWORD PTR __Step$2[ebp], 13
  00061	8b 4d 0c	 mov	 ecx, DWORD PTR __Mid$[ebp]
  00064	2b c8		 sub	 ecx, eax
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z ; std::_Med3_unchecked<SShopItemTable *,ItemStockSortFunc>
  0006c	83 c4 10	 add	 esp, 16			; 00000010H

; 7459 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  0006f	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00072	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  00075	6b 45 fc 0d	 imul	 eax, DWORD PTR __Step$2[ebp], 13
  00079	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0007c	2b c8		 sub	 ecx, eax
  0007e	51		 push	 ecx
  0007f	6b 45 f4 0d	 imul	 eax, DWORD PTR __Two_step$1[ebp], 13
  00083	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  00086	2b c8		 sub	 ecx, eax
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z ; std::_Med3_unchecked<SShopItemTable *,ItemStockSortFunc>
  0008e	83 c4 10	 add	 esp, 16			; 00000010H

; 7460 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  00091	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00094	6b 45 fc 0d	 imul	 eax, DWORD PTR __Step$2[ebp], 13
  00098	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0009b	2b c8		 sub	 ecx, eax
  0009d	51		 push	 ecx
  0009e	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  000a1	6b 45 fc 0d	 imul	 eax, DWORD PTR __Step$2[ebp], 13
  000a5	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z ; std::_Med3_unchecked<SShopItemTable *,ItemStockSortFunc>
  000ae	83 c4 10	 add	 esp, 16			; 00000010H

; 7461 :     } else {

  000b1	eb 14		 jmp	 SHORT $LN1@Guess_medi
$LN2@Guess_medi:

; 7462 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  000b3	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000b6	ff 75 10	 push	 DWORD PTR __Last$[ebp]
  000b9	ff 75 0c	 push	 DWORD PTR __Mid$[ebp]
  000bc	ff 75 08	 push	 DWORD PTR __First$[ebp]
  000bf	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z ; std::_Med3_unchecked<SShopItemTable *,ItemStockSortFunc>
  000c4	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Guess_medi:

; 7463 :     }
; 7464 : }

  000c7	c9		 leave
  000c8	c3		 ret	 0
??$_Guess_median_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z ENDP ; std::_Guess_median_unchecked<SShopItemTable *,ItemStockSortFunc>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0UItemStockSortFunc@@@Z
_TEXT	SEGMENT
__Val$1 = -32						; size = 13
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
$T5 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0UItemStockSortFunc@@@Z PROC ; std::_Pop_heap_unchecked<SShopItemTable *,ItemStockSortFunc>, COMDAT

; 6226 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 6227 :     // pop *_First to *(_Last - 1) and reheap
; 6228 :     if (2 <= _Last - _First) {

  00008	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000b	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000e	99		 cdq
  0000f	6a 0d		 push	 13			; 0000000dH
  00011	59		 pop	 ecx
  00012	f7 f9		 idiv	 ecx
  00014	83 f8 02	 cmp	 eax, 2
  00017	7c 55		 jl	 SHORT $LN1@Pop_heap_u

; 6229 :         --_Last;

  00019	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0001c	83 e8 0d	 sub	 eax, 13			; 0000000dH
  0001f	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00022	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00025	89 45 fc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6230 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00028	8b 75 fc	 mov	 esi, DWORD PTR $T5[ebp]
  0002b	8d 7d e0	 lea	 edi, DWORD PTR __Val$1[ebp]
  0002e	a5		 movsd
  0002f	a5		 movsd
  00030	a5		 movsd
  00031	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00032	8d 45 e0	 lea	 eax, DWORD PTR __Val$1[ebp]
  00035	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax
  00038	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0003b	89 45 f8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6219 :     *_Dest      = _STD move(*_First);

  0003e	8b 75 f8	 mov	 esi, DWORD PTR $T4[ebp]
  00041	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00044	a5		 movsd
  00045	a5		 movsd
  00046	a5		 movsd
  00047	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00048	8b 45 f4	 mov	 eax, DWORD PTR $T3[ebp]
  0004b	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6221 :     _Pop_heap_hole_by_index(

  0004e	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00051	ff 75 f0	 push	 DWORD PTR $T2[ebp]
  00054	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00057	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0005a	99		 cdq
  0005b	6a 0d		 push	 13			; 0000000dH
  0005d	59		 pop	 ecx
  0005e	f7 f9		 idiv	 ecx
  00060	50		 push	 eax
  00061	6a 00		 push	 0
  00063	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00066	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAUSShopItemTable@@U1@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@HH$$QAU1@UItemStockSortFunc@@@Z ; std::_Pop_heap_hole_by_index<SShopItemTable *,SShopItemTable,ItemStockSortFunc>
  0006b	83 c4 14	 add	 esp, 20			; 00000014H
$LN1@Pop_heap_u:

; 6231 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 6232 :     }
; 6233 : }

  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	c9		 leave
  00071	c3		 ret	 0
??$_Pop_heap_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0UItemStockSortFunc@@@Z ENDP ; std::_Pop_heap_unchecked<SShopItemTable *,ItemStockSortFunc>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAUSShopItemTable@@U1@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@HH$$QAU1@UItemStockSortFunc@@@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
__Top$ = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
$T5 = -32						; size = 4
tv170 = -28						; size = 4
__Max_sequence_non_leaf$ = -24				; size = 4
tv144 = -20						; size = 4
__Idx$6 = -16						; size = 4
__Hole$ = -12						; size = 4
__Idx$ = -8						; size = 4
__Pred$ = -4						; size = 1
__First$ = 8						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAUSShopItemTable@@U1@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@HH$$QAU1@UItemStockSortFunc@@@Z PROC ; std::_Pop_heap_hole_by_index<SShopItemTable *,SShopItemTable,ItemStockSortFunc>, COMDAT

; 6186 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 6187 :     // percolate _Hole to _Bottom, then push _Val
; 6188 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 6189 : 
; 6190 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 6191 :     const _Diff _Top = _Hole;

  00008	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  0000b	89 45 d4	 mov	 DWORD PTR __Top$[ebp], eax

; 6192 :     _Diff _Idx       = _Hole;

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  00011	89 45 f8	 mov	 DWORD PTR __Idx$[ebp], eax

; 6193 : 
; 6194 :     // Check whether _Idx can have a child before calculating that child's index, since
; 6195 :     // calculating the child's index can trigger integer overflows
; 6196 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00014	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00017	48		 dec	 eax
  00018	d1 f8		 sar	 eax, 1
  0001a	89 45 e8	 mov	 DWORD PTR __Max_sequence_non_leaf$[ebp], eax
$LN2@Pop_heap_h:

; 6197 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0001d	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00020	3b 45 e8	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  00023	7d 65		 jge	 SHORT $LN3@Pop_heap_h

; 6198 :         _Idx = 2 * _Idx + 2;

  00025	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00028	8d 44 00 02	 lea	 eax, DWORD PTR [eax+eax+2]
  0002c	89 45 f8	 mov	 DWORD PTR __Idx$[ebp], eax

; 6199 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  0002f	6b 45 f8 0d	 imul	 eax, DWORD PTR __Idx$[ebp], 13
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  00033	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00036	0f b6 44 01 0c	 movzx	 eax, BYTE PTR [ecx+eax+12]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6199 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  0003b	8b 4d f8	 mov	 ecx, DWORD PTR __Idx$[ebp]
  0003e	49		 dec	 ecx
  0003f	6b c9 0d	 imul	 ecx, ecx, 13
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  00042	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00045	0f b6 4c 0a 0c	 movzx	 ecx, BYTE PTR [edx+ecx+12]
  0004a	3b c1		 cmp	 eax, ecx
  0004c	7d 09		 jge	 SHORT $LN9@Pop_heap_h
  0004e	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv144[ebp], 1
  00055	eb 04		 jmp	 SHORT $LN7@Pop_heap_h
$LN9@Pop_heap_h:
  00057	83 65 ec 00	 and	 DWORD PTR tv144[ebp], 0
$LN7@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6199 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {

  0005b	0f b6 45 ec	 movzx	 eax, BYTE PTR tv144[ebp]
  0005f	85 c0		 test	 eax, eax
  00061	74 07		 je	 SHORT $LN4@Pop_heap_h

; 6200 :             --_Idx;

  00063	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00066	48		 dec	 eax
  00067	89 45 f8	 mov	 DWORD PTR __Idx$[ebp], eax
$LN4@Pop_heap_h:

; 6202 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0006a	6b 45 f8 0d	 imul	 eax, DWORD PTR __Idx$[ebp], 13
  0006e	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00071	89 45 dc	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6202 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00074	6b 7d 0c 0d	 imul	 edi, DWORD PTR __Hole$[ebp], 13
  00078	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  0007b	8b 75 dc	 mov	 esi, DWORD PTR $T4[ebp]
  0007e	a5		 movsd
  0007f	a5		 movsd
  00080	a5		 movsd
  00081	a4		 movsb

; 6203 :         _Hole             = _Idx;

  00082	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  00085	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax

; 6204 :     }

  00088	eb 93		 jmp	 SHORT $LN2@Pop_heap_h
$LN3@Pop_heap_h:

; 6205 : 
; 6206 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  0008a	8b 45 f8	 mov	 eax, DWORD PTR __Idx$[ebp]
  0008d	3b 45 e8	 cmp	 eax, DWORD PTR __Max_sequence_non_leaf$[ebp]
  00090	75 35		 jne	 SHORT $LN5@Pop_heap_h
  00092	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  00095	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0009a	79 05		 jns	 SHORT $LN35@Pop_heap_h
  0009c	48		 dec	 eax
  0009d	83 c8 fe	 or	 eax, -2			; fffffffeH
  000a0	40		 inc	 eax
$LN35@Pop_heap_h:
  000a1	85 c0		 test	 eax, eax
  000a3	75 22		 jne	 SHORT $LN5@Pop_heap_h

; 6207 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  000a5	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000a8	48		 dec	 eax
  000a9	6b c0 0d	 imul	 eax, eax, 13
  000ac	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  000af	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6207 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  000b2	6b 7d 0c 0d	 imul	 edi, DWORD PTR __Hole$[ebp], 13
  000b6	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  000b9	8b 75 d8	 mov	 esi, DWORD PTR $T3[ebp]
  000bc	a5		 movsd
  000bd	a5		 movsd
  000be	a5		 movsd
  000bf	a4		 movsb

; 6208 :         _Hole             = _Bottom - 1;

  000c0	8b 45 10	 mov	 eax, DWORD PTR __Bottom$[ebp]
  000c3	48		 dec	 eax
  000c4	89 45 0c	 mov	 DWORD PTR __Hole$[ebp], eax
$LN5@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  000c7	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  000ca	89 45 e0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6211 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);

  000cd	8a 45 18	 mov	 al, BYTE PTR __Pred$[ebp]
  000d0	88 45 fc	 mov	 BYTE PTR __Pred$[ebp], al
  000d3	8b 45 0c	 mov	 eax, DWORD PTR __Hole$[ebp]
  000d6	89 45 f4	 mov	 DWORD PTR __Hole$[ebp], eax

; 6076 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  000d9	8b 45 f4	 mov	 eax, DWORD PTR __Hole$[ebp]
  000dc	48		 dec	 eax
  000dd	d1 f8		 sar	 eax, 1
  000df	89 45 f0	 mov	 DWORD PTR __Idx$6[ebp], eax
  000e2	eb 09		 jmp	 SHORT $LN23@Pop_heap_h
$LN21@Pop_heap_h:

; 6078 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen

  000e4	8b 45 f4	 mov	 eax, DWORD PTR __Hole$[ebp]
  000e7	48		 dec	 eax
  000e8	d1 f8		 sar	 eax, 1
  000ea	89 45 f0	 mov	 DWORD PTR __Idx$6[ebp], eax
$LN23@Pop_heap_h:

; 6077 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  000ed	8b 45 d4	 mov	 eax, DWORD PTR __Top$[ebp]
  000f0	3b 45 f4	 cmp	 eax, DWORD PTR __Hole$[ebp]
  000f3	7d 4c		 jge	 SHORT $LN22@Pop_heap_h
  000f5	6b 45 f0 0d	 imul	 eax, DWORD PTR __Idx$6[ebp], 13
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  000f9	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000fc	0f b6 44 01 0c	 movzx	 eax, BYTE PTR [ecx+eax+12]
  00101	8b 4d e0	 mov	 ecx, DWORD PTR $T5[ebp]
  00104	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  00108	3b c1		 cmp	 eax, ecx
  0010a	7d 09		 jge	 SHORT $LN27@Pop_heap_h
  0010c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv170[ebp], 1
  00113	eb 04		 jmp	 SHORT $LN25@Pop_heap_h
$LN27@Pop_heap_h:
  00115	83 65 e4 00	 and	 DWORD PTR tv170[ebp], 0
$LN25@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6077 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00119	0f b6 45 e4	 movzx	 eax, BYTE PTR tv170[ebp]
  0011d	85 c0		 test	 eax, eax
  0011f	74 20		 je	 SHORT $LN22@Pop_heap_h

; 6080 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00121	6b 45 f0 0d	 imul	 eax, DWORD PTR __Idx$6[ebp], 13
  00125	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00128	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6080 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0012b	6b 7d f4 0d	 imul	 edi, DWORD PTR __Hole$[ebp], 13
  0012f	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  00132	8b 75 d0	 mov	 esi, DWORD PTR $T2[ebp]
  00135	a5		 movsd
  00136	a5		 movsd
  00137	a5		 movsd
  00138	a4		 movsb

; 6081 :         _Hole             = _Idx;

  00139	8b 45 f0	 mov	 eax, DWORD PTR __Idx$6[ebp]
  0013c	89 45 f4	 mov	 DWORD PTR __Hole$[ebp], eax

; 6082 :     }

  0013f	eb a3		 jmp	 SHORT $LN21@Pop_heap_h
$LN22@Pop_heap_h:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00141	8b 45 e0	 mov	 eax, DWORD PTR $T5[ebp]
  00144	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6084 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  00147	6b 7d f4 0d	 imul	 edi, DWORD PTR __Hole$[ebp], 13
  0014b	03 7d 08	 add	 edi, DWORD PTR __First$[ebp]
  0014e	8b 75 cc	 mov	 esi, DWORD PTR $T1[ebp]
  00151	a5		 movsd
  00152	a5		 movsd
  00153	a5		 movsd
  00154	a4		 movsb

; 6212 : }

  00155	5f		 pop	 edi
  00156	5e		 pop	 esi
  00157	c9		 leave
  00158	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAUSShopItemTable@@U1@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@HH$$QAU1@UItemStockSortFunc@@@Z ENDP ; std::_Pop_heap_hole_by_index<SShopItemTable *,SShopItemTable,ItemStockSortFunc>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z
_TEXT	SEGMENT
___formal$ = -48					; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
$T5 = -32						; size = 4
__Val$ = -28						; size = 4
$T6 = -24						; size = 4
$T7 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Vals_0>$ = 16					; size = 4
??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > ><std::pair<SItemPos,SShopItemTable> >, COMDAT
; _this$ = ecx

; 805  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1045 :     explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0002a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR __Al_$[ebp]
  00030	89 08		 mov	 DWORD PTR [eax], ecx
  00032	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	83 60 04 00	 and	 DWORD PTR [eax+4], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00039	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 785  :         _Alloc_construct_ptr<_Alnode>::_Allocate();

  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::_Allocate

; 786  :     }

  00045	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00049	8b 45 10	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  0004c	89 45 dc	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00055	83 c0 0e	 add	 eax, 14			; 0000000eH
  00058	89 45 e4	 mov	 DWORD PTR __Val$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0005b	8b 45 e4	 mov	 eax, DWORD PTR __Val$[ebp]
  0005e	89 45 e0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00061	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 00		 mov	 eax, DWORD PTR [eax]
  00066	89 45 d0	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00069	8b 45 e0	 mov	 eax, DWORD PTR $T5[ebp]
  0006c	89 45 e8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0006f	8b 45 dc	 mov	 eax, DWORD PTR $T4[ebp]
  00072	89 45 ec	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 246  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00075	8b 45 ec	 mov	 eax, DWORD PTR $T7[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00078	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 246  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  0007b	8b 45 d8	 mov	 eax, DWORD PTR $T3[ebp]
  0007e	8b 4d e8	 mov	 ecx, DWORD PTR $T6[ebp]
  00081	66 8b 10	 mov	 dx, WORD PTR [eax]
  00084	66 89 11	 mov	 WORD PTR [ecx], dx
  00087	8a 40 02	 mov	 al, BYTE PTR [eax+2]
  0008a	88 41 02	 mov	 BYTE PTR [ecx+2], al
  0008d	8b 45 ec	 mov	 eax, DWORD PTR $T7[ebp]
  00090	83 c0 03	 add	 eax, 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00093	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 246  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00096	8b 7d e8	 mov	 edi, DWORD PTR $T6[ebp]
  00099	83 c7 03	 add	 edi, 3
  0009c	8b 75 d4	 mov	 esi, DWORD PTR $T2[ebp]
  0009f	a5		 movsd
  000a0	a5		 movsd
  000a1	a5		 movsd
  000a2	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 807  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000a3	8d 45 0c	 lea	 eax, DWORD PTR __Myhead$[ebp]
  000a6	50		 push	 eax
  000a7	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000aa	ff 70 04	 push	 DWORD PTR [eax+4]
  000ad	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * &>
  000b2	59		 pop	 ecx
  000b3	59		 pop	 ecx

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000b4	8d 45 0c	 lea	 eax, DWORD PTR __Myhead$[ebp]
  000b7	50		 push	 eax
  000b8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000be	83 c0 04	 add	 eax, 4
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * &>
  000c7	59		 pop	 ecx
  000c8	59		 pop	 ecx

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000c9	8d 45 0c	 lea	 eax, DWORD PTR __Myhead$[ebp]
  000cc	50		 push	 eax
  000cd	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000d0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d3	83 c0 08	 add	 eax, 8
  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * &>
  000dc	59		 pop	 ecx
  000dd	59		 pop	 ecx

; 810  :         this->_Ptr->_Color = _Red;

  000de	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e4	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 811  :         this->_Ptr->_Isnil = false;

  000e8	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ee	c6 40 0d 00	 mov	 BYTE PTR [eax+13], 0

; 812  :     }

  000f2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000f5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ff	59		 pop	 ecx
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	c9		 leave
  00103	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > ><std::pair<SItemPos,SShopItemTable> >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
__Val$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >, COMDAT
; _this$ = ecx

; 817  :     ~_Tree_temp_node() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 818  :         if (this->_Ptr) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 3e		 je	 SHORT $LN9@Tree_temp_

; 819  :             _Destroy_in_place(this->_Ptr->_Left);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	ff 70 04	 push	 DWORD PTR [eax+4]
  00018	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *>
  0001d	59		 pop	 ecx

; 820  :             _Destroy_in_place(this->_Ptr->_Parent);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	83 c0 04	 add	 eax, 4
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *>
  0002d	59		 pop	 ecx

; 821  :             _Destroy_in_place(this->_Ptr->_Right);

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	83 c0 08	 add	 eax, 8
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *>
  0003d	59		 pop	 ecx

; 822  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	83 c0 0e	 add	 eax, 14			; 0000000eH
  00047	89 45 f8	 mov	 DWORD PTR __Val$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR __Val$[ebp]
  0004d	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN9@Tree_temp_:
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 824  :     }

  00058	c9		 leave
  00059	c3		 ret	 0
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__Ptr$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >, COMDAT
; _this$ = ecx

; 1056 :     ~_Alloc_construct_ptr() { // if this instance is engaged, deallocate storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1057 :         if (_Ptr) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 22		 je	 SHORT $LN3@Alloc_cons

; 1058 :             _Al.deallocate(_Ptr, 1);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00018	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00023	33 c0		 xor	 eax, eax
  00025	40		 inc	 eax
  00026	c1 e0 05	 shl	 eax, 5
  00029	50		 push	 eax
  0002a	ff 75 f8	 push	 DWORD PTR __Ptr$[ebp]
  0002d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00032	59		 pop	 ecx
  00033	59		 pop	 ecx
$LN3@Alloc_cons:

; 1059 :         }
; 1060 :     }

  00034	c9		 leave
  00035	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Max_possible$1 = -24					; size = 4
_this$ = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
_this$ = -8						; size = 4
__Overflow_is_possible$4 = -1				; size = 1
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1051 :     void _Allocate() { // disengage *this, then allocate a new memory block

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1052 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 1053 :         _Ptr = _Al.allocate(1);

  00010	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00018	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$4[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0001c	c7 45 e8 ff ff
	ff 07		 mov	 DWORD PTR __Max_possible$1[ebp], 134217727 ; 07ffffffH

; 60   :         if (_Count > _Max_possible) {

  00023	33 c0		 xor	 eax, eax
  00025	40		 inc	 eax
  00026	3d ff ff ff 07	 cmp	 eax, 134217727		; 07ffffffH
  0002b	76 05		 jbe	 SHORT $LN6@Allocate

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0002d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN6@Allocate:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00032	33 c0		 xor	 eax, eax
  00034	40		 inc	 eax
  00035	c1 e0 05	 shl	 eax, 5
  00038	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0003b	ff 75 f4	 push	 DWORD PTR $T3[ebp]
  0003e	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00043	59		 pop	 ecx
  00044	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax

; 1053 :         _Ptr = _Al.allocate(1);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  0004d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN9@Allocate:

; 1054 :     }

  00050	c9		 leave
  00051	c3		 ret	 0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *>, COMDAT

; 270  : /* _CONSTEXPR20_DYNALLOC */ void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YA?AU?$pair@PAUSShopItemTable@@PAU1@@0@PAUSShopItemTable@@0UItemStockSortFunc@@@Z
_TEXT	SEGMENT
__Tmp$1 = -216						; size = 13
__Tmp$2 = -200						; size = 13
__Tmp$3 = -184						; size = 13
__Tmp$4 = -168						; size = 13
__Tmp$5 = -152						; size = 13
__Tmp$6 = -136						; size = 13
__Tmp$7 = -120						; size = 13
$T8 = -104						; size = 4
$T9 = -100						; size = 4
$T10 = -96						; size = 4
$T11 = -92						; size = 4
$T12 = -88						; size = 4
$T13 = -84						; size = 4
$T14 = -80						; size = 4
$T15 = -76						; size = 4
$T16 = -72						; size = 4
$T17 = -68						; size = 4
$T18 = -64						; size = 4
$T19 = -60						; size = 4
$T20 = -56						; size = 4
$T21 = -52						; size = 4
$T22 = -48						; size = 4
$T23 = -44						; size = 4
$T24 = -40						; size = 4
$T25 = -36						; size = 4
$T26 = -32						; size = 4
$T27 = -28						; size = 4
$T28 = -24						; size = 4
$T29 = -20						; size = 4
$T30 = -16						; size = 4
__Right$ = -12						; size = 4
__Left$ = -8						; size = 4
__Right$ = -4						; size = 4
__Left$ = 0						; size = 4
__Right$ = 4						; size = 4
__Left$ = 8						; size = 4
__Left$ = 12						; size = 4
tv250 = 16						; size = 4
tv243 = 20						; size = 4
__Left$ = 24						; size = 4
tv238 = 28						; size = 4
tv234 = 32						; size = 4
tv230 = 36						; size = 4
tv226 = 40						; size = 4
tv222 = 44						; size = 4
tv218 = 48						; size = 4
__Mid$ = 52						; size = 4
__First$ = 56						; size = 4
__First$ = 60						; size = 4
__First$ = 64						; size = 4
__First$ = 68						; size = 4
__First$ = 72						; size = 4
__First$ = 76						; size = 4
__First$ = 80						; size = 4
__First$ = 84						; size = 4
__Glast$ = 88						; size = 4
__Gfirst$ = 92						; size = 4
__Plast$ = 96						; size = 4
__Pfirst$ = 100						; size = 4
___$ReturnUdt$ = 112					; size = 4
__First$ = 116						; size = 4
__Last$ = 120						; size = 4
__Pred$ = 124						; size = 1
??$_Partition_by_median_guess_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YA?AU?$pair@PAUSShopItemTable@@PAU1@@0@PAUSShopItemTable@@0UItemStockSortFunc@@@Z PROC ; std::_Partition_by_median_guess_unchecked<SShopItemTable *,ItemStockSortFunc>, COMDAT

; 7467 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8d 6c 24 98	 lea	 ebp, DWORD PTR [esp-104]
  00005	81 ec 40 01 00
	00		 sub	 esp, 320		; 00000140H
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 7468 :     // partition [_First, _Last)
; 7469 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  0000d	8b 45 78	 mov	 eax, DWORD PTR __Last$[ebp]
  00010	2b 45 74	 sub	 eax, DWORD PTR __First$[ebp]
  00013	99		 cdq
  00014	6a 0d		 push	 13			; 0000000dH
  00016	59		 pop	 ecx
  00017	f7 f9		 idiv	 ecx
  00019	d1 f8		 sar	 eax, 1
  0001b	6b c0 0d	 imul	 eax, eax, 13
  0001e	03 45 74	 add	 eax, DWORD PTR __First$[ebp]
  00021	89 45 34	 mov	 DWORD PTR __Mid$[ebp], eax

; 7470 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00024	8b 45 78	 mov	 eax, DWORD PTR __Last$[ebp]
  00027	89 45 50	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  0002a	8b 45 50	 mov	 eax, DWORD PTR __First$[ebp]
  0002d	83 e8 0d	 sub	 eax, 13			; 0000000dH
  00030	89 45 50	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7470 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00033	ff 75 7c	 push	 DWORD PTR __Pred$[ebp]
  00036	ff 75 50	 push	 DWORD PTR __First$[ebp]
  00039	ff 75 34	 push	 DWORD PTR __Mid$[ebp]
  0003c	ff 75 74	 push	 DWORD PTR __First$[ebp]
  0003f	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@00UItemStockSortFunc@@@Z ; std::_Guess_median_unchecked<SShopItemTable *,ItemStockSortFunc>
  00044	83 c4 10	 add	 esp, 16			; 00000010H

; 7471 :     _RanIt _Pfirst = _Mid;

  00047	8b 45 34	 mov	 eax, DWORD PTR __Mid$[ebp]
  0004a	89 45 64	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 7472 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0004d	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00050	89 45 4c	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1837 :     return ++_First;

  00053	8b 45 4c	 mov	 eax, DWORD PTR __First$[ebp]
  00056	83 c0 0d	 add	 eax, 13			; 0000000dH
  00059	89 45 4c	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7472 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0005c	8b 45 4c	 mov	 eax, DWORD PTR __First$[ebp]
  0005f	89 45 60	 mov	 DWORD PTR __Plast$[ebp], eax
$LN2@Partition_:

; 7475 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00062	8b 45 74	 mov	 eax, DWORD PTR __First$[ebp]
  00065	3b 45 64	 cmp	 eax, DWORD PTR __Pfirst$[ebp]
  00068	73 77		 jae	 SHORT $LN4@Partition_
  0006a	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0006d	89 45 48	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  00070	8b 45 48	 mov	 eax, DWORD PTR __First$[ebp]
  00073	83 e8 0d	 sub	 eax, 13			; 0000000dH
  00076	89 45 48	 mov	 DWORD PTR __First$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  00079	8b 45 48	 mov	 eax, DWORD PTR __First$[ebp]
  0007c	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  00080	8b 4d 64	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00083	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  00087	3b c1		 cmp	 eax, ecx
  00089	7d 09		 jge	 SHORT $LN42@Partition_
  0008b	c7 45 30 01 00
	00 00		 mov	 DWORD PTR tv218[ebp], 1
  00092	eb 04		 jmp	 SHORT $LN40@Partition_
$LN42@Partition_:
  00094	83 65 30 00	 and	 DWORD PTR tv218[ebp], 0
$LN40@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7475 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00098	0f b6 45 30	 movzx	 eax, BYTE PTR tv218[ebp]
  0009c	85 c0		 test	 eax, eax
  0009e	75 41		 jne	 SHORT $LN4@Partition_
  000a0	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000a3	89 45 44	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  000a6	8b 45 44	 mov	 eax, DWORD PTR __First$[ebp]
  000a9	83 e8 0d	 sub	 eax, 13			; 0000000dH
  000ac	89 45 44	 mov	 DWORD PTR __First$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  000af	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000b2	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  000b6	8b 4d 44	 mov	 ecx, DWORD PTR __First$[ebp]
  000b9	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  000bd	3b c1		 cmp	 eax, ecx
  000bf	7d 09		 jge	 SHORT $LN48@Partition_
  000c1	c7 45 2c 01 00
	00 00		 mov	 DWORD PTR tv222[ebp], 1
  000c8	eb 04		 jmp	 SHORT $LN46@Partition_
$LN48@Partition_:
  000ca	83 65 2c 00	 and	 DWORD PTR tv222[ebp], 0
$LN46@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7475 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000ce	0f b6 45 2c	 movzx	 eax, BYTE PTR tv222[ebp]
  000d2	85 c0		 test	 eax, eax
  000d4	75 0b		 jne	 SHORT $LN4@Partition_

; 7476 :         --_Pfirst;

  000d6	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  000d9	83 e8 0d	 sub	 eax, 13			; 0000000dH
  000dc	89 45 64	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 7477 :     }

  000df	eb 81		 jmp	 SHORT $LN2@Partition_
$LN4@Partition_:

; 7479 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  000e1	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  000e4	3b 45 78	 cmp	 eax, DWORD PTR __Last$[ebp]
  000e7	73 59		 jae	 SHORT $LN5@Partition_
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  000e9	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  000ec	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  000f0	8b 4d 64	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  000f3	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  000f7	3b c1		 cmp	 eax, ecx
  000f9	7d 09		 jge	 SHORT $LN52@Partition_
  000fb	c7 45 28 01 00
	00 00		 mov	 DWORD PTR tv226[ebp], 1
  00102	eb 04		 jmp	 SHORT $LN50@Partition_
$LN52@Partition_:
  00104	83 65 28 00	 and	 DWORD PTR tv226[ebp], 0
$LN50@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7479 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00108	0f b6 45 28	 movzx	 eax, BYTE PTR tv226[ebp]
  0010c	85 c0		 test	 eax, eax
  0010e	75 32		 jne	 SHORT $LN5@Partition_
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  00110	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00113	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  00117	8b 4d 60	 mov	 ecx, DWORD PTR __Plast$[ebp]
  0011a	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  0011e	3b c1		 cmp	 eax, ecx
  00120	7d 09		 jge	 SHORT $LN56@Partition_
  00122	c7 45 24 01 00
	00 00		 mov	 DWORD PTR tv230[ebp], 1
  00129	eb 04		 jmp	 SHORT $LN54@Partition_
$LN56@Partition_:
  0012b	83 65 24 00	 and	 DWORD PTR tv230[ebp], 0
$LN54@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7479 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  0012f	0f b6 45 24	 movzx	 eax, BYTE PTR tv230[ebp]
  00133	85 c0		 test	 eax, eax
  00135	75 0b		 jne	 SHORT $LN5@Partition_

; 7480 :         ++_Plast;

  00137	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  0013a	83 c0 0d	 add	 eax, 13			; 0000000dH
  0013d	89 45 60	 mov	 DWORD PTR __Plast$[ebp], eax

; 7481 :     }

  00140	eb 9f		 jmp	 SHORT $LN4@Partition_
$LN5@Partition_:

; 7482 : 
; 7483 :     _RanIt _Gfirst = _Plast;

  00142	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  00145	89 45 5c	 mov	 DWORD PTR __Gfirst$[ebp], eax

; 7484 :     _RanIt _Glast  = _Pfirst;

  00148	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0014b	89 45 58	 mov	 DWORD PTR __Glast$[ebp], eax
$LN8@Partition_:

; 7485 : 
; 7486 :     for (;;) { // partition
; 7487 :         for (; _Gfirst < _Last; ++_Gfirst) {

  0014e	eb 09		 jmp	 SHORT $LN11@Partition_
$LN9@Partition_:
  00150	8b 45 5c	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00153	83 c0 0d	 add	 eax, 13			; 0000000dH
  00156	89 45 5c	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN11@Partition_:
  00159	8b 45 5c	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0015c	3b 45 78	 cmp	 eax, DWORD PTR __Last$[ebp]
  0015f	0f 83 ad 00 00
	00		 jae	 $LN10@Partition_
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  00165	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00168	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  0016c	8b 4d 5c	 mov	 ecx, DWORD PTR __Gfirst$[ebp]
  0016f	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  00173	3b c1		 cmp	 eax, ecx
  00175	7d 09		 jge	 SHORT $LN60@Partition_
  00177	c7 45 20 01 00
	00 00		 mov	 DWORD PTR tv234[ebp], 1
  0017e	eb 04		 jmp	 SHORT $LN58@Partition_
$LN60@Partition_:
  00180	83 65 20 00	 and	 DWORD PTR tv234[ebp], 0
$LN58@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7488 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  00184	0f b6 45 20	 movzx	 eax, BYTE PTR tv234[ebp]
  00188	85 c0		 test	 eax, eax
  0018a	74 04		 je	 SHORT $LN15@Partition_

; 7489 :                 continue;

  0018c	eb c2		 jmp	 SHORT $LN9@Partition_

; 7490 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  0018e	eb 7d		 jmp	 SHORT $LN16@Partition_
$LN15@Partition_:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  00190	8b 45 5c	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  00193	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  00197	8b 4d 64	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  0019a	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  0019e	3b c1		 cmp	 eax, ecx
  001a0	7d 09		 jge	 SHORT $LN64@Partition_
  001a2	c7 45 1c 01 00
	00 00		 mov	 DWORD PTR tv238[ebp], 1
  001a9	eb 04		 jmp	 SHORT $LN62@Partition_
$LN64@Partition_:
  001ab	83 65 1c 00	 and	 DWORD PTR tv238[ebp], 0
$LN62@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7490 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  001af	0f b6 45 1c	 movzx	 eax, BYTE PTR tv238[ebp]
  001b3	85 c0		 test	 eax, eax
  001b5	74 04		 je	 SHORT $LN17@Partition_

; 7491 :                 break;

  001b7	eb 59		 jmp	 SHORT $LN10@Partition_
  001b9	eb 52		 jmp	 SHORT $LN16@Partition_
$LN17@Partition_:

; 7492 :             } else if (_Plast != _Gfirst) {

  001bb	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  001be	3b 45 5c	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  001c1	74 41		 je	 SHORT $LN19@Partition_

; 7493 :                 _STD iter_swap(_Plast, _Gfirst);

  001c3	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  001c6	89 45 18	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  001c9	8b 45 18	 mov	 eax, DWORD PTR __Left$[ebp]
  001cc	89 45 f0	 mov	 DWORD PTR $T30[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  001cf	8b 75 f0	 mov	 esi, DWORD PTR $T30[ebp]
  001d2	8d 7d 88	 lea	 edi, DWORD PTR __Tmp$7[ebp]
  001d5	a5		 movsd
  001d6	a5		 movsd
  001d7	a5		 movsd
  001d8	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  001d9	8b 45 5c	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  001dc	89 45 ec	 mov	 DWORD PTR $T29[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  001df	8b 75 ec	 mov	 esi, DWORD PTR $T29[ebp]
  001e2	8b 7d 18	 mov	 edi, DWORD PTR __Left$[ebp]
  001e5	a5		 movsd
  001e6	a5		 movsd
  001e7	a5		 movsd
  001e8	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  001e9	8d 45 88	 lea	 eax, DWORD PTR __Tmp$7[ebp]
  001ec	89 45 e8	 mov	 DWORD PTR $T28[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  001ef	8b 75 e8	 mov	 esi, DWORD PTR $T28[ebp]
  001f2	8b 7d 5c	 mov	 edi, DWORD PTR __Gfirst$[ebp]
  001f5	a5		 movsd
  001f6	a5		 movsd
  001f7	a5		 movsd
  001f8	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7494 :                 ++_Plast;

  001f9	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  001fc	83 c0 0d	 add	 eax, 13			; 0000000dH
  001ff	89 45 60	 mov	 DWORD PTR __Plast$[ebp], eax

; 7495 :             } else {

  00202	eb 09		 jmp	 SHORT $LN16@Partition_
$LN19@Partition_:

; 7496 :                 ++_Plast;

  00204	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  00207	83 c0 0d	 add	 eax, 13			; 0000000dH
  0020a	89 45 60	 mov	 DWORD PTR __Plast$[ebp], eax
$LN16@Partition_:

; 7497 :             }
; 7498 :         }

  0020d	e9 3e ff ff ff	 jmp	 $LN9@Partition_
$LN10@Partition_:

; 7499 : 
; 7500 :         for (; _First < _Glast; --_Glast) {

  00212	eb 09		 jmp	 SHORT $LN14@Partition_
$LN12@Partition_:
  00214	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  00217	83 e8 0d	 sub	 eax, 13			; 0000000dH
  0021a	89 45 58	 mov	 DWORD PTR __Glast$[ebp], eax
$LN14@Partition_:
  0021d	8b 45 74	 mov	 eax, DWORD PTR __First$[ebp]
  00220	3b 45 58	 cmp	 eax, DWORD PTR __Glast$[ebp]
  00223	0f 83 e7 00 00
	00		 jae	 $LN13@Partition_

; 7501 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  00229	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  0022c	89 45 40	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  0022f	8b 45 40	 mov	 eax, DWORD PTR __First$[ebp]
  00232	83 e8 0d	 sub	 eax, 13			; 0000000dH
  00235	89 45 40	 mov	 DWORD PTR __First$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  00238	8b 45 40	 mov	 eax, DWORD PTR __First$[ebp]
  0023b	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  0023f	8b 4d 64	 mov	 ecx, DWORD PTR __Pfirst$[ebp]
  00242	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  00246	3b c1		 cmp	 eax, ecx
  00248	7d 09		 jge	 SHORT $LN84@Partition_
  0024a	c7 45 14 01 00
	00 00		 mov	 DWORD PTR tv243[ebp], 1
  00251	eb 04		 jmp	 SHORT $LN82@Partition_
$LN84@Partition_:
  00253	83 65 14 00	 and	 DWORD PTR tv243[ebp], 0
$LN82@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7501 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  00257	0f b6 45 14	 movzx	 eax, BYTE PTR tv243[ebp]
  0025b	85 c0		 test	 eax, eax
  0025d	74 07		 je	 SHORT $LN21@Partition_

; 7502 :                 continue;

  0025f	eb b3		 jmp	 SHORT $LN12@Partition_
  00261	e9 a5 00 00 00	 jmp	 $LN22@Partition_
$LN21@Partition_:

; 7503 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  00266	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  00269	89 45 3c	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  0026c	8b 45 3c	 mov	 eax, DWORD PTR __First$[ebp]
  0026f	83 e8 0d	 sub	 eax, 13			; 0000000dH
  00272	89 45 3c	 mov	 DWORD PTR __First$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  00275	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00278	0f b6 40 0c	 movzx	 eax, BYTE PTR [eax+12]
  0027c	8b 4d 3c	 mov	 ecx, DWORD PTR __First$[ebp]
  0027f	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  00283	3b c1		 cmp	 eax, ecx
  00285	7d 09		 jge	 SHORT $LN90@Partition_
  00287	c7 45 10 01 00
	00 00		 mov	 DWORD PTR tv250[ebp], 1
  0028e	eb 04		 jmp	 SHORT $LN88@Partition_
$LN90@Partition_:
  00290	83 65 10 00	 and	 DWORD PTR tv250[ebp], 0
$LN88@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7503 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  00294	0f b6 45 10	 movzx	 eax, BYTE PTR tv250[ebp]
  00298	85 c0		 test	 eax, eax
  0029a	74 04		 je	 SHORT $LN23@Partition_

; 7504 :                 break;

  0029c	eb 72		 jmp	 SHORT $LN13@Partition_
  0029e	eb 6b		 jmp	 SHORT $LN22@Partition_
$LN23@Partition_:

; 7505 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  002a0	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  002a3	83 e8 0d	 sub	 eax, 13			; 0000000dH
  002a6	89 45 64	 mov	 DWORD PTR __Pfirst$[ebp], eax
  002a9	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  002ac	89 45 38	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  002af	8b 45 38	 mov	 eax, DWORD PTR __First$[ebp]
  002b2	83 e8 0d	 sub	 eax, 13			; 0000000dH
  002b5	89 45 38	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7505 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  002b8	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  002bb	3b 45 38	 cmp	 eax, DWORD PTR __First$[ebp]
  002be	74 4b		 je	 SHORT $LN22@Partition_

; 7506 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));

  002c0	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  002c3	89 45 54	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1852 :     return --_First;

  002c6	8b 45 54	 mov	 eax, DWORD PTR __First$[ebp]
  002c9	83 e8 0d	 sub	 eax, 13			; 0000000dH
  002cc	89 45 54	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7506 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));

  002cf	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  002d2	89 45 0c	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  002d5	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  002d8	89 45 e4	 mov	 DWORD PTR $T27[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  002db	8b 75 e4	 mov	 esi, DWORD PTR $T27[ebp]
  002de	8d bd 78 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$6[ebp]
  002e4	a5		 movsd
  002e5	a5		 movsd
  002e6	a5		 movsd
  002e7	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  002e8	8b 45 54	 mov	 eax, DWORD PTR __First$[ebp]
  002eb	89 45 e0	 mov	 DWORD PTR $T26[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  002ee	8b 75 e0	 mov	 esi, DWORD PTR $T26[ebp]
  002f1	8b 7d 0c	 mov	 edi, DWORD PTR __Left$[ebp]
  002f4	a5		 movsd
  002f5	a5		 movsd
  002f6	a5		 movsd
  002f7	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  002f8	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR __Tmp$6[ebp]
  002fe	89 45 dc	 mov	 DWORD PTR $T25[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  00301	8b 75 dc	 mov	 esi, DWORD PTR $T25[ebp]
  00304	8b 7d 54	 mov	 edi, DWORD PTR __First$[ebp]
  00307	a5		 movsd
  00308	a5		 movsd
  00309	a5		 movsd
  0030a	a4		 movsb
$LN22@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7508 :         }

  0030b	e9 04 ff ff ff	 jmp	 $LN12@Partition_
$LN13@Partition_:

; 7509 : 
; 7510 :         if (_Glast == _First && _Gfirst == _Last) {

  00310	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  00313	3b 45 74	 cmp	 eax, DWORD PTR __First$[ebp]
  00316	75 31		 jne	 SHORT $LN26@Partition_
  00318	8b 45 5c	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  0031b	3b 45 78	 cmp	 eax, DWORD PTR __Last$[ebp]
  0031e	75 29		 jne	 SHORT $LN26@Partition_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00320	8d 45 64	 lea	 eax, DWORD PTR __Pfirst$[ebp]
  00323	89 45 d8	 mov	 DWORD PTR $T24[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00326	8b 45 70	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00329	8b 4d d8	 mov	 ecx, DWORD PTR $T24[ebp]
  0032c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0032e	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00330	8d 45 60	 lea	 eax, DWORD PTR __Plast$[ebp]
  00333	89 45 d4	 mov	 DWORD PTR $T23[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00336	8b 45 70	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00339	8b 4d d4	 mov	 ecx, DWORD PTR $T23[ebp]
  0033c	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0033e	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7511 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00341	8b 45 70	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00344	e9 ae 01 00 00	 jmp	 $LN1@Partition_
$LN26@Partition_:

; 7512 :         }
; 7513 : 
; 7514 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward

  00349	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  0034c	3b 45 74	 cmp	 eax, DWORD PTR __First$[ebp]
  0034f	0f 85 a6 00 00
	00		 jne	 $LN27@Partition_

; 7515 :             if (_Plast != _Gfirst) {

  00355	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  00358	3b 45 5c	 cmp	 eax, DWORD PTR __Gfirst$[ebp]
  0035b	74 42		 je	 SHORT $LN29@Partition_

; 7516 :                 _STD iter_swap(_Pfirst, _Plast);

  0035d	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  00360	89 45 04	 mov	 DWORD PTR __Right$[ebp], eax
  00363	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00366	89 45 08	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00369	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0036c	89 45 d0	 mov	 DWORD PTR $T22[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  0036f	8b 75 d0	 mov	 esi, DWORD PTR $T22[ebp]
  00372	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$5[ebp]
  00378	a5		 movsd
  00379	a5		 movsd
  0037a	a5		 movsd
  0037b	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0037c	8b 45 04	 mov	 eax, DWORD PTR __Right$[ebp]
  0037f	89 45 cc	 mov	 DWORD PTR $T21[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  00382	8b 75 cc	 mov	 esi, DWORD PTR $T21[ebp]
  00385	8b 7d 08	 mov	 edi, DWORD PTR __Left$[ebp]
  00388	a5		 movsd
  00389	a5		 movsd
  0038a	a5		 movsd
  0038b	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0038c	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR __Tmp$5[ebp]
  00392	89 45 c8	 mov	 DWORD PTR $T20[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  00395	8b 75 c8	 mov	 esi, DWORD PTR $T20[ebp]
  00398	8b 7d 04	 mov	 edi, DWORD PTR __Right$[ebp]
  0039b	a5		 movsd
  0039c	a5		 movsd
  0039d	a5		 movsd
  0039e	a4		 movsb
$LN29@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7519 :             ++_Plast;

  0039f	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  003a2	83 c0 0d	 add	 eax, 13			; 0000000dH
  003a5	89 45 60	 mov	 DWORD PTR __Plast$[ebp], eax

; 7520 :             _STD iter_swap(_Pfirst, _Gfirst);

  003a8	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  003ab	89 45 00	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  003ae	8b 45 00	 mov	 eax, DWORD PTR __Left$[ebp]
  003b1	89 45 c4	 mov	 DWORD PTR $T19[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  003b4	8b 75 c4	 mov	 esi, DWORD PTR $T19[ebp]
  003b7	8d bd 58 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$4[ebp]
  003bd	a5		 movsd
  003be	a5		 movsd
  003bf	a5		 movsd
  003c0	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  003c1	8b 45 5c	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  003c4	89 45 c0	 mov	 DWORD PTR $T18[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  003c7	8b 75 c0	 mov	 esi, DWORD PTR $T18[ebp]
  003ca	8b 7d 00	 mov	 edi, DWORD PTR __Left$[ebp]
  003cd	a5		 movsd
  003ce	a5		 movsd
  003cf	a5		 movsd
  003d0	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  003d1	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR __Tmp$4[ebp]
  003d7	89 45 bc	 mov	 DWORD PTR $T17[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  003da	8b 75 bc	 mov	 esi, DWORD PTR $T17[ebp]
  003dd	8b 7d 5c	 mov	 edi, DWORD PTR __Gfirst$[ebp]
  003e0	a5		 movsd
  003e1	a5		 movsd
  003e2	a5		 movsd
  003e3	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7521 :             ++_Pfirst;

  003e4	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  003e7	83 c0 0d	 add	 eax, 13			; 0000000dH
  003ea	89 45 64	 mov	 DWORD PTR __Pfirst$[ebp], eax

; 7522 :             ++_Gfirst;

  003ed	8b 45 5c	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  003f0	83 c0 0d	 add	 eax, 13			; 0000000dH
  003f3	89 45 5c	 mov	 DWORD PTR __Gfirst$[ebp], eax
  003f6	e9 f7 00 00 00	 jmp	 $LN28@Partition_
$LN27@Partition_:

; 7523 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  003fb	8b 45 5c	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  003fe	3b 45 78	 cmp	 eax, DWORD PTR __Last$[ebp]
  00401	0f 85 a3 00 00
	00		 jne	 $LN30@Partition_

; 7524 :             if (--_Glast != --_Pfirst) {

  00407	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  0040a	83 e8 0d	 sub	 eax, 13			; 0000000dH
  0040d	89 45 58	 mov	 DWORD PTR __Glast$[ebp], eax
  00410	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00413	83 e8 0d	 sub	 eax, 13			; 0000000dH
  00416	89 45 64	 mov	 DWORD PTR __Pfirst$[ebp], eax
  00419	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  0041c	3b 45 64	 cmp	 eax, DWORD PTR __Pfirst$[ebp]
  0041f	74 3c		 je	 SHORT $LN32@Partition_

; 7525 :                 _STD iter_swap(_Glast, _Pfirst);

  00421	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  00424	89 45 fc	 mov	 DWORD PTR __Right$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00427	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  0042a	89 45 b8	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  0042d	8b 75 b8	 mov	 esi, DWORD PTR $T16[ebp]
  00430	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$3[ebp]
  00436	a5		 movsd
  00437	a5		 movsd
  00438	a5		 movsd
  00439	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0043a	8b 45 fc	 mov	 eax, DWORD PTR __Right$[ebp]
  0043d	89 45 b4	 mov	 DWORD PTR $T15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  00440	8b 75 b4	 mov	 esi, DWORD PTR $T15[ebp]
  00443	8b 7d 58	 mov	 edi, DWORD PTR __Glast$[ebp]
  00446	a5		 movsd
  00447	a5		 movsd
  00448	a5		 movsd
  00449	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0044a	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR __Tmp$3[ebp]
  00450	89 45 b0	 mov	 DWORD PTR $T14[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  00453	8b 75 b0	 mov	 esi, DWORD PTR $T14[ebp]
  00456	8b 7d fc	 mov	 edi, DWORD PTR __Right$[ebp]
  00459	a5		 movsd
  0045a	a5		 movsd
  0045b	a5		 movsd
  0045c	a4		 movsb
$LN32@Partition_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7528 :             _STD iter_swap(_Pfirst, --_Plast);

  0045d	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  00460	83 e8 0d	 sub	 eax, 13			; 0000000dH
  00463	89 45 60	 mov	 DWORD PTR __Plast$[ebp], eax
  00466	8b 45 60	 mov	 eax, DWORD PTR __Plast$[ebp]
  00469	89 45 f4	 mov	 DWORD PTR __Right$[ebp], eax
  0046c	8b 45 64	 mov	 eax, DWORD PTR __Pfirst$[ebp]
  0046f	89 45 f8	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00472	8b 45 f8	 mov	 eax, DWORD PTR __Left$[ebp]
  00475	89 45 ac	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  00478	8b 75 ac	 mov	 esi, DWORD PTR $T13[ebp]
  0047b	8d bd 38 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$2[ebp]
  00481	a5		 movsd
  00482	a5		 movsd
  00483	a5		 movsd
  00484	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00485	8b 45 f4	 mov	 eax, DWORD PTR __Right$[ebp]
  00488	89 45 a8	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  0048b	8b 75 a8	 mov	 esi, DWORD PTR $T12[ebp]
  0048e	8b 7d f8	 mov	 edi, DWORD PTR __Left$[ebp]
  00491	a5		 movsd
  00492	a5		 movsd
  00493	a5		 movsd
  00494	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00495	8d 85 38 ff ff
	ff		 lea	 eax, DWORD PTR __Tmp$2[ebp]
  0049b	89 45 a4	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  0049e	8b 75 a4	 mov	 esi, DWORD PTR $T11[ebp]
  004a1	8b 7d f4	 mov	 edi, DWORD PTR __Right$[ebp]
  004a4	a5		 movsd
  004a5	a5		 movsd
  004a6	a5		 movsd
  004a7	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7529 :         } else {

  004a8	eb 48		 jmp	 SHORT $LN28@Partition_
$LN30@Partition_:

; 7530 :             _STD iter_swap(_Gfirst, --_Glast);

  004aa	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  004ad	83 e8 0d	 sub	 eax, 13			; 0000000dH
  004b0	89 45 58	 mov	 DWORD PTR __Glast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  004b3	8b 45 5c	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  004b6	89 45 a0	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  004b9	8b 75 a0	 mov	 esi, DWORD PTR $T10[ebp]
  004bc	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR __Tmp$1[ebp]
  004c2	a5		 movsd
  004c3	a5		 movsd
  004c4	a5		 movsd
  004c5	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  004c6	8b 45 58	 mov	 eax, DWORD PTR __Glast$[ebp]
  004c9	89 45 9c	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  004cc	8b 75 9c	 mov	 esi, DWORD PTR $T9[ebp]
  004cf	8b 7d 5c	 mov	 edi, DWORD PTR __Gfirst$[ebp]
  004d2	a5		 movsd
  004d3	a5		 movsd
  004d4	a5		 movsd
  004d5	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  004d6	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR __Tmp$1[ebp]
  004dc	89 45 98	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  004df	8b 75 98	 mov	 esi, DWORD PTR $T8[ebp]
  004e2	8b 7d 58	 mov	 edi, DWORD PTR __Glast$[ebp]
  004e5	a5		 movsd
  004e6	a5		 movsd
  004e7	a5		 movsd
  004e8	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7531 :             ++_Gfirst;

  004e9	8b 45 5c	 mov	 eax, DWORD PTR __Gfirst$[ebp]
  004ec	83 c0 0d	 add	 eax, 13			; 0000000dH
  004ef	89 45 5c	 mov	 DWORD PTR __Gfirst$[ebp], eax
$LN28@Partition_:

; 7532 :         }
; 7533 :     }

  004f2	e9 57 fc ff ff	 jmp	 $LN8@Partition_
$LN1@Partition_:

; 7534 : }

  004f7	5f		 pop	 edi
  004f8	5e		 pop	 esi
  004f9	83 c5 68	 add	 ebp, 104		; 00000068H
  004fc	c9		 leave
  004fd	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YA?AU?$pair@PAUSShopItemTable@@PAU1@@0@PAUSShopItemTable@@0UItemStockSortFunc@@@Z ENDP ; std::_Partition_by_median_guess_unchecked<SShopItemTable *,ItemStockSortFunc>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0UItemStockSortFunc@@@Z
_TEXT	SEGMENT
__Val$1 = -32						; size = 13
$T2 = -16						; size = 4
$T3 = -12						; size = 4
__Bottom$ = -8						; size = 4
__Hole$4 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Make_heap_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0UItemStockSortFunc@@@Z PROC ; std::_Make_heap_unchecked<SShopItemTable *,ItemStockSortFunc>, COMDAT

; 6357 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 6358 :     // make [_First, _Last) into a heap
; 6359 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 6360 :     _Diff _Bottom = _Last - _First;

  00008	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000b	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000e	99		 cdq
  0000f	6a 0d		 push	 13			; 0000000dH
  00011	59		 pop	 ecx
  00012	f7 f9		 idiv	 ecx
  00014	89 45 f8	 mov	 DWORD PTR __Bottom$[ebp], eax

; 6361 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00017	8b 45 f8	 mov	 eax, DWORD PTR __Bottom$[ebp]
  0001a	d1 f8		 sar	 eax, 1
  0001c	89 45 fc	 mov	 DWORD PTR __Hole$4[ebp], eax
$LN4@Make_heap_:
  0001f	83 7d fc 00	 cmp	 DWORD PTR __Hole$4[ebp], 0
  00023	7e 3a		 jle	 SHORT $LN1@Make_heap_

; 6362 :         // reheap top half, bottom to top
; 6363 :         --_Hole;

  00025	8b 45 fc	 mov	 eax, DWORD PTR __Hole$4[ebp]
  00028	48		 dec	 eax
  00029	89 45 fc	 mov	 DWORD PTR __Hole$4[ebp], eax

; 6364 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  0002c	6b 45 fc 0d	 imul	 eax, DWORD PTR __Hole$4[ebp], 13
  00030	03 45 08	 add	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00033	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6364 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00036	8b 75 f4	 mov	 esi, DWORD PTR $T3[ebp]
  00039	8d 7d e0	 lea	 edi, DWORD PTR __Val$1[ebp]
  0003c	a5		 movsd
  0003d	a5		 movsd
  0003e	a5		 movsd
  0003f	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00040	8d 45 e0	 lea	 eax, DWORD PTR __Val$1[ebp]
  00043	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 6365 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00046	ff 75 10	 push	 DWORD PTR __Pred$[ebp]
  00049	ff 75 f0	 push	 DWORD PTR $T2[ebp]
  0004c	ff 75 f8	 push	 DWORD PTR __Bottom$[ebp]
  0004f	ff 75 fc	 push	 DWORD PTR __Hole$4[ebp]
  00052	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00055	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAUSShopItemTable@@U1@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@HH$$QAU1@UItemStockSortFunc@@@Z ; std::_Pop_heap_hole_by_index<SShopItemTable *,SShopItemTable,ItemStockSortFunc>
  0005a	83 c4 14	 add	 esp, 20			; 00000014H

; 6366 :     }

  0005d	eb c0		 jmp	 SHORT $LN4@Make_heap_
$LN1@Make_heap_:

; 6367 : }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	c9		 leave
  00062	c3		 ret	 0
??$_Make_heap_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0UItemStockSortFunc@@@Z ENDP ; std::_Make_heap_unchecked<SShopItemTable *,ItemStockSortFunc>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAPAUSShopItemTable@@QAU1@0UItemStockSortFunc@@@Z
_TEXT	SEGMENT
__Val$1 = -64						; size = 13
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
$T6 = -32						; size = 4
tv139 = -28						; size = 4
tv132 = -24						; size = 4
__Dest$ = -20						; size = 4
__Prev$7 = -16						; size = 4
__Last$ = -12						; size = 4
__Mid$8 = -8						; size = 4
__Hole$9 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Insertion_sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAPAUSShopItemTable@@QAU1@0UItemStockSortFunc@@@Z PROC ; std::_Insertion_sort_unchecked<SShopItemTable *,ItemStockSortFunc>, COMDAT

; 7410 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 7411 :     // insertion sort [_First, _Last)
; 7412 :     if (_First != _Last) {

  00008	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000b	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0000e	0f 84 1d 01 00
	00		 je	 $LN8@Insertion_

; 7413 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  00014	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00017	89 45 f8	 mov	 DWORD PTR __Mid$8[ebp], eax
$LN4@Insertion_:
  0001a	8b 45 f8	 mov	 eax, DWORD PTR __Mid$8[ebp]
  0001d	83 c0 0d	 add	 eax, 13			; 0000000dH
  00020	89 45 f8	 mov	 DWORD PTR __Mid$8[ebp], eax
  00023	8b 45 f8	 mov	 eax, DWORD PTR __Mid$8[ebp]
  00026	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00029	0f 84 02 01 00
	00		 je	 $LN8@Insertion_

; 7414 :             _BidIt _Hole               = _Mid;

  0002f	8b 45 f8	 mov	 eax, DWORD PTR __Mid$8[ebp]
  00032	89 45 fc	 mov	 DWORD PTR __Hole$9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00035	8b 45 f8	 mov	 eax, DWORD PTR __Mid$8[ebp]
  00038	89 45 e0	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7415 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  0003b	8b 75 e0	 mov	 esi, DWORD PTR $T6[ebp]
  0003e	8d 7d c0	 lea	 edi, DWORD PTR __Val$1[ebp]
  00041	a5		 movsd
  00042	a5		 movsd
  00043	a5		 movsd
  00044	a4		 movsb
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  00045	0f b6 45 cc	 movzx	 eax, BYTE PTR __Val$1[ebp+12]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0004c	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  00050	3b c1		 cmp	 eax, ecx
  00052	7d 09		 jge	 SHORT $LN17@Insertion_
  00054	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv132[ebp], 1
  0005b	eb 04		 jmp	 SHORT $LN15@Insertion_
$LN17@Insertion_:
  0005d	83 65 e8 00	 and	 DWORD PTR tv132[ebp], 0
$LN15@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7417 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  00061	0f b6 45 e8	 movzx	 eax, BYTE PTR tv132[ebp]
  00065	85 c0		 test	 eax, eax
  00067	74 66		 je	 SHORT $LN9@Insertion_

; 7418 :                 _Move_backward_unchecked(_First, _Mid, ++_Hole);

  00069	8b 45 fc	 mov	 eax, DWORD PTR __Hole$9[ebp]
  0006c	83 c0 0d	 add	 eax, 13			; 0000000dH
  0006f	89 45 fc	 mov	 DWORD PTR __Hole$9[ebp], eax
  00072	8b 45 fc	 mov	 eax, DWORD PTR __Hole$9[ebp]
  00075	89 45 ec	 mov	 DWORD PTR __Dest$[ebp], eax
  00078	8b 45 f8	 mov	 eax, DWORD PTR __Mid$8[ebp]
  0007b	89 45 f4	 mov	 DWORD PTR __Last$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4696 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  0007e	ff 75 ec	 push	 DWORD PTR __Dest$[ebp]
  00081	ff 75 f4	 push	 DWORD PTR __Last$[ebp]
  00084	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00087	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAUSShopItemTable@@PAU1@@std@@YAPAUSShopItemTable@@PAU1@00@Z ; std::_Copy_backward_memmove<SShopItemTable *,SShopItemTable *>
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	eb 2c		 jmp	 SHORT $LN19@Insertion_
$LN20@Insertion_:

; 4697 :         }
; 4698 :     }
; 4699 : 
; 4700 :     while (_First != _Last) {

  00091	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00094	3b 45 f4	 cmp	 eax, DWORD PTR __Last$[ebp]
  00097	74 24		 je	 SHORT $LN19@Insertion_

; 4701 :         *--_Dest = _STD move(*--_Last);

  00099	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  0009c	83 e8 0d	 sub	 eax, 13			; 0000000dH
  0009f	89 45 f4	 mov	 DWORD PTR __Last$[ebp], eax
  000a2	8b 45 ec	 mov	 eax, DWORD PTR __Dest$[ebp]
  000a5	83 e8 0d	 sub	 eax, 13			; 0000000dH
  000a8	89 45 ec	 mov	 DWORD PTR __Dest$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  000ab	8b 45 f4	 mov	 eax, DWORD PTR __Last$[ebp]
  000ae	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 4701 :         *--_Dest = _STD move(*--_Last);

  000b1	8b 75 dc	 mov	 esi, DWORD PTR $T5[ebp]
  000b4	8b 7d ec	 mov	 edi, DWORD PTR __Dest$[ebp]
  000b7	a5		 movsd
  000b8	a5		 movsd
  000b9	a5		 movsd
  000ba	a4		 movsb

; 4702 :     }

  000bb	eb d4		 jmp	 SHORT $LN20@Insertion_
$LN19@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  000bd	8d 45 c0	 lea	 eax, DWORD PTR __Val$1[ebp]
  000c0	89 45 d8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7419 :                 *_First = _STD move(_Val);

  000c3	8b 75 d8	 mov	 esi, DWORD PTR $T4[ebp]
  000c6	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  000c9	a5		 movsd
  000ca	a5		 movsd
  000cb	a5		 movsd
  000cc	a4		 movsb

; 7420 :             } else { // look for insertion point after first

  000cd	eb 5d		 jmp	 SHORT $LN10@Insertion_
$LN9@Insertion_:

; 7421 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  000cf	8b 45 fc	 mov	 eax, DWORD PTR __Hole$9[ebp]
  000d2	89 45 f0	 mov	 DWORD PTR __Prev$7[ebp], eax
  000d5	eb 06		 jmp	 SHORT $LN7@Insertion_
$LN5@Insertion_:
  000d7	8b 45 f0	 mov	 eax, DWORD PTR __Prev$7[ebp]
  000da	89 45 fc	 mov	 DWORD PTR __Hole$9[ebp], eax
$LN7@Insertion_:
  000dd	8b 45 f0	 mov	 eax, DWORD PTR __Prev$7[ebp]
  000e0	83 e8 0d	 sub	 eax, 13			; 0000000dH
  000e3	89 45 f0	 mov	 DWORD PTR __Prev$7[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 142  : 		return rkLeft.display_pos < rkRight.display_pos;

  000e6	0f b6 45 cc	 movzx	 eax, BYTE PTR __Val$1[ebp+12]
  000ea	8b 4d f0	 mov	 ecx, DWORD PTR __Prev$7[ebp]
  000ed	0f b6 49 0c	 movzx	 ecx, BYTE PTR [ecx+12]
  000f1	3b c1		 cmp	 eax, ecx
  000f3	7d 09		 jge	 SHORT $LN31@Insertion_
  000f5	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv139[ebp], 1
  000fc	eb 04		 jmp	 SHORT $LN29@Insertion_
$LN31@Insertion_:
  000fe	83 65 e4 00	 and	 DWORD PTR tv139[ebp], 0
$LN29@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7421 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00102	0f b6 45 e4	 movzx	 eax, BYTE PTR tv139[ebp]
  00106	85 c0		 test	 eax, eax
  00108	74 12		 je	 SHORT $LN6@Insertion_
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0010a	8b 45 f0	 mov	 eax, DWORD PTR __Prev$7[ebp]
  0010d	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7422 :                     *_Hole = _STD move(*_Prev); // move hole down

  00110	8b 75 d4	 mov	 esi, DWORD PTR $T3[ebp]
  00113	8b 7d fc	 mov	 edi, DWORD PTR __Hole$9[ebp]
  00116	a5		 movsd
  00117	a5		 movsd
  00118	a5		 movsd
  00119	a4		 movsb

; 7423 :                 }

  0011a	eb bb		 jmp	 SHORT $LN5@Insertion_
$LN6@Insertion_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0011c	8d 45 c0	 lea	 eax, DWORD PTR __Val$1[ebp]
  0011f	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7425 :                 *_Hole = _STD move(_Val); // insert element in hole

  00122	8b 75 d0	 mov	 esi, DWORD PTR $T2[ebp]
  00125	8b 7d fc	 mov	 edi, DWORD PTR __Hole$9[ebp]
  00128	a5		 movsd
  00129	a5		 movsd
  0012a	a5		 movsd
  0012b	a4		 movsb
$LN10@Insertion_:

; 7426 :             }
; 7427 :         }

  0012c	e9 e9 fe ff ff	 jmp	 $LN4@Insertion_
$LN8@Insertion_:

; 7428 :     }
; 7429 : 
; 7430 :     return _Last;

  00131	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 7431 : }

  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	c9		 leave
  00137	c3		 ret	 0
??$_Insertion_sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAPAUSShopItemTable@@QAU1@0UItemStockSortFunc@@@Z ENDP ; std::_Insertion_sort_unchecked<SShopItemTable *,ItemStockSortFunc>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Emplace@U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@_N@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z
_TEXT	SEGMENT
$T1 = -108						; size = 12
__Loc$ = -96						; size = 12
$T2 = -84						; size = 8
$T3 = -76						; size = 4
$T4 = -72						; size = 4
$T5 = -68						; size = 4
__Inserted$ = -64					; size = 4
$T6 = -60						; size = 4
__Old_val$7 = -56					; size = 4
$T8 = -52						; size = 4
$T9 = -48						; size = 4
$T10 = -44						; size = 4
$T11 = -40						; size = 4
$T12 = -36						; size = 4
$T13 = -32						; size = 4
$T14 = -28						; size = 4
$T15 = -24						; size = 4
__Scary$ = -20						; size = 4
__Val$ = -16						; size = 4
__Keyval$16 = -12					; size = 4
_this$ = -8						; size = 4
$T17 = -2						; size = 1
$T18 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
_<_Vals_0>$ = 12					; size = 4
??$_Emplace@U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@_N@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Emplace<std::pair<SItemPos,SShopItemTable> >, COMDAT
; _this$ = ecx

; 1002 :     pair<_Nodeptr, bool> _Emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000e	89 45 e8	 mov	 DWORD PTR $T15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00011	8b 45 e8	 mov	 eax, DWORD PTR $T15[ebp]
  00014	89 45 ec	 mov	 DWORD PTR __Scary$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 2000 :         return _Val.first;

  00017	8b 45 0c	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1008 :             const auto& _Keyval = _In_place_key_extractor::_Extract(_Vals...);

  0001a	89 45 f4	 mov	 DWORD PTR __Keyval$16[ebp], eax

; 1009 :             _Loc                = _Find_lower_bound(_Keyval);

  0001d	ff 75 f4	 push	 DWORD PTR __Keyval$16[ebp]
  00020	8d 45 94	 lea	 eax, DWORD PTR $T1[ebp]
  00023	50		 push	 eax
  00024	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??$_Find_lower_bound@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Find_lower_bound<SItemPos>
  0002c	8b f0		 mov	 esi, eax
  0002e	8d 7d a0	 lea	 edi, DWORD PTR __Loc$[ebp]
  00031	a5		 movsd
  00032	a5		 movsd
  00033	a5		 movsd

; 1010 :             if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  00034	ff 75 f4	 push	 DWORD PTR __Keyval$16[ebp]
  00037	ff 75 a8	 push	 DWORD PTR __Loc$[ebp+8]
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ??$_Lower_bound_duplicate@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Lower_bound_duplicate<SItemPos>
  00042	0f b6 c0	 movzx	 eax, al
  00045	85 c0		 test	 eax, eax
  00047	74 2d		 je	 SHORT $LN2@Emplace

; 1011 :                 return {_Loc._Bound, false};

  00049	c6 45 ff 00	 mov	 BYTE PTR $T18[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0004d	8d 45 a8	 lea	 eax, DWORD PTR __Loc$[ebp+8]
  00050	89 45 e4	 mov	 DWORD PTR $T14[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00053	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00056	8b 4d e4	 mov	 ecx, DWORD PTR $T14[ebp]
  00059	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005b	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0005d	8d 45 ff	 lea	 eax, DWORD PTR $T18[ebp]
  00060	89 45 e0	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00063	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00066	8b 4d e0	 mov	 ecx, DWORD PTR $T13[ebp]
  00069	8a 09		 mov	 cl, BYTE PTR [ecx]
  0006b	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1011 :                 return {_Loc._Bound, false};

  0006e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00071	e9 9d 00 00 00	 jmp	 $LN1@Emplace
$LN2@Emplace:

; 1012 :             }
; 1013 : 
; 1014 :             _Check_grow_by_1();

  00076	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Check_grow_by_1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0007e	8b 45 0c	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00081	89 45 d8	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2039 :         return _Mypair._Myval2._Get_first();

  00084	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00087	89 45 dc	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2039 :         return _Mypair._Myval2._Get_first();

  0008a	8b 45 dc	 mov	 eax, DWORD PTR $T12[ebp]
  0008d	89 45 d4	 mov	 DWORD PTR $T10[ebp], eax

; 1015 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00090	ff 75 d8	 push	 DWORD PTR $T11[ebp]
  00093	8b 45 ec	 mov	 eax, DWORD PTR __Scary$[ebp]
  00096	ff 30		 push	 DWORD PTR [eax]
  00098	ff 75 d4	 push	 DWORD PTR $T10[ebp]
  0009b	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  0009e	e8 00 00 00 00	 call	 ??$?0U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > ><std::pair<SItemPos,SShopItemTable> >
  000a3	89 45 d0	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1048 :         return _STD exchange(_Ptr, nullptr);

  000a6	83 65 cc 00	 and	 DWORD PTR $T8[ebp], 0
  000aa	8b 45 d0	 mov	 eax, DWORD PTR $T9[ebp]
  000ad	83 c0 04	 add	 eax, 4
  000b0	89 45 f0	 mov	 DWORD PTR __Val$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 598  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  000b3	8b 45 f0	 mov	 eax, DWORD PTR __Val$[ebp]
  000b6	8b 00		 mov	 eax, DWORD PTR [eax]
  000b8	89 45 c8	 mov	 DWORD PTR __Old_val$7[ebp], eax

; 599  :     _Val         = static_cast<_Other&&>(_New_val);

  000bb	8b 45 f0	 mov	 eax, DWORD PTR __Val$[ebp]
  000be	8b 4d cc	 mov	 ecx, DWORD PTR $T8[ebp]
  000c1	89 08		 mov	 DWORD PTR [eax], ecx

; 600  :     return _Old_val;

  000c3	8b 45 c8	 mov	 eax, DWORD PTR __Old_val$7[ebp]
  000c6	89 45 c4	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1048 :         return _STD exchange(_Ptr, nullptr);

  000c9	8b 45 c4	 mov	 eax, DWORD PTR $T6[ebp]
  000cc	89 45 c0	 mov	 DWORD PTR __Inserted$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1015 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  000cf	8d 4d ac	 lea	 ecx, DWORD PTR $T2[ebp]
  000d2	e8 00 00 00 00	 call	 ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >

; 1034 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000d7	ff 75 c0	 push	 DWORD PTR __Inserted$[ebp]
  000da	ff 75 a4	 push	 DWORD PTR __Loc$[ebp+4]
  000dd	ff 75 a0	 push	 DWORD PTR __Loc$[ebp]
  000e0	8b 4d ec	 mov	 ecx, DWORD PTR __Scary$[ebp]
  000e3	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Insert_node
  000e8	89 45 bc	 mov	 DWORD PTR $T5[ebp], eax
  000eb	c6 45 fe 01	 mov	 BYTE PTR $T17[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  000ef	8d 45 bc	 lea	 eax, DWORD PTR $T5[ebp]
  000f2	89 45 b8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000f5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000f8	8b 4d b8	 mov	 ecx, DWORD PTR $T4[ebp]
  000fb	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000fd	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  000ff	8d 45 fe	 lea	 eax, DWORD PTR $T17[ebp]
  00102	89 45 b4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00105	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00108	8b 4d b4	 mov	 ecx, DWORD PTR $T3[ebp]
  0010b	8a 09		 mov	 cl, BYTE PTR [ecx]
  0010d	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1034 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00110	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Emplace:

; 1035 :     }

  00113	5f		 pop	 edi
  00114	5e		 pop	 esi
  00115	c9		 leave
  00116	c2 08 00	 ret	 8
??$_Emplace@U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@_N@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Emplace<std::pair<SItemPos,SShopItemTable> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00018	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00022	c9		 leave
  00023	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >, COMDAT

; 368  :     static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 369  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode0 call");
; 370  :         _Destroy_in_place(_Ptr->_Left);

  00003	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00006	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *>
  0000b	59		 pop	 ecx

; 371  :         _Destroy_in_place(_Ptr->_Parent);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000f	83 c0 04	 add	 eax, 4
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *>
  00018	59		 pop	 ecx

; 372  :         _Destroy_in_place(_Ptr->_Right);

  00019	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0001c	83 c0 08	 add	 eax, 8
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *>
  00025	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00026	33 c0		 xor	 eax, eax
  00028	40		 inc	 eax
  00029	c1 e0 05	 shl	 eax, 5
  0002c	50		 push	 eax
  0002d	ff 75 0c	 push	 DWORD PTR __Ptr$[ebp]
  00030	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00035	59		 pop	 ecx
  00036	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 374  :     }

  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
_this$ = -16						; size = 4
tv78 = -12						; size = 4
tv135 = -8						; size = 4
__Right$ = -4						; size = 4
__Bound$ = 8						; size = 4
__Keyval$ = 12						; size = 4
??$_Lower_bound_duplicate@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Lower_bound_duplicate<SItemPos>, COMDAT
; _this$ = ecx

; 1694 :     bool _Lower_bound_duplicate(const _Nodeptr _Bound, const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00009	8b 45 08	 mov	 eax, DWORD PTR __Bound$[ebp]
  0000c	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00010	85 c0		 test	 eax, eax
  00012	75 65		 jne	 SHORT $LN3@Lower_boun

; 2035 :         return _Mypair._Get_first();

  00014	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00017	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2035 :         return _Mypair._Get_first();

  0001a	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0001d	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map

; 69   :         return _Val.first;

  00020	8b 45 08	 mov	 eax, DWORD PTR __Bound$[ebp]
  00023	83 c0 0e	 add	 eax, 14			; 0000000eH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00026	89 45 fc	 mov	 DWORD PTR __Right$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h

; 255  : 		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));

  00029	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0002c	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR __Right$[ebp]
  00032	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00035	3b c1		 cmp	 eax, ecx
  00037	7c 28		 jl	 SHORT $LN18@Lower_boun
  00039	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0003c	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR __Right$[ebp]
  00042	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00045	3b c1		 cmp	 eax, ecx
  00047	75 12		 jne	 SHORT $LN17@Lower_boun
  00049	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0004c	0f b7 40 01	 movzx	 eax, WORD PTR [eax+1]
  00050	8b 4d fc	 mov	 ecx, DWORD PTR __Right$[ebp]
  00053	0f b7 49 01	 movzx	 ecx, WORD PTR [ecx+1]
  00057	3b c1		 cmp	 eax, ecx
  00059	7c 06		 jl	 SHORT $LN18@Lower_boun
$LN17@Lower_boun:
  0005b	83 65 f8 00	 and	 DWORD PTR tv135[ebp], 0
  0005f	eb 07		 jmp	 SHORT $LN13@Lower_boun
$LN18@Lower_boun:
  00061	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv135[ebp], 1
$LN13@Lower_boun:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1695 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00068	0f b6 45 f8	 movzx	 eax, BYTE PTR tv135[ebp]
  0006c	85 c0		 test	 eax, eax
  0006e	75 09		 jne	 SHORT $LN3@Lower_boun
  00070	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  00077	eb 04		 jmp	 SHORT $LN4@Lower_boun
$LN3@Lower_boun:
  00079	83 65 f4 00	 and	 DWORD PTR tv78[ebp], 0
$LN4@Lower_boun:
  0007d	8a 45 f4	 mov	 al, BYTE PTR tv78[ebp]

; 1696 :     }

  00080	c9		 leave
  00081	c2 08 00	 ret	 8
??$_Lower_bound_duplicate@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Lower_bound_duplicate<SItemPos>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Find_lower_bound@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@ABUSItemPos@@@Z
_TEXT	SEGMENT
__Result$ = -44						; size = 12
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
tv142 = -20						; size = 4
_this$ = -16						; size = 4
__Scary$ = -12						; size = 4
__Left$ = -8						; size = 4
__Trynode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@ABUSItemPos@@@Z PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Find_lower_bound<SItemPos>, COMDAT
; _this$ = ecx

; 1699 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000e	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00011	8b 45 e8	 mov	 eax, DWORD PTR $T3[ebp]
  00014	89 45 f4	 mov	 DWORD PTR __Scary$[ebp], eax

; 1700 :         const auto _Scary = _Get_scary();
; 1701 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00017	8b 45 f4	 mov	 eax, DWORD PTR __Scary$[ebp]
  0001a	8b 00		 mov	 eax, DWORD PTR [eax]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001f	89 45 d4	 mov	 DWORD PTR __Result$[ebp], eax
  00022	83 65 d8 00	 and	 DWORD PTR __Result$[ebp+4], 0
  00026	8b 45 f4	 mov	 eax, DWORD PTR __Scary$[ebp]
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 dc	 mov	 DWORD PTR __Result$[ebp+8], eax

; 1702 :         _Nodeptr _Trynode = _Result._Location._Parent;

  0002e	8b 45 d4	 mov	 eax, DWORD PTR __Result$[ebp]
  00031	89 45 fc	 mov	 DWORD PTR __Trynode$[ebp], eax
$LN2@Find_lower:

; 1703 :         while (!_Trynode->_Isnil) {

  00034	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  00037	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  0003b	85 c0		 test	 eax, eax
  0003d	0f 85 8b 00 00
	00		 jne	 $LN3@Find_lower

; 1704 :             _Result._Location._Parent = _Trynode;

  00043	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  00046	89 45 d4	 mov	 DWORD PTR __Result$[ebp], eax

; 2035 :         return _Mypair._Get_first();

  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0004c	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2035 :         return _Mypair._Get_first();

  0004f	8b 45 e4	 mov	 eax, DWORD PTR $T2[ebp]
  00052	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map

; 69   :         return _Val.first;

  00055	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  00058	83 c0 0e	 add	 eax, 14			; 0000000eH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1705 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0005b	89 45 f8	 mov	 DWORD PTR __Left$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h

; 255  : 		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));

  0005e	8b 45 f8	 mov	 eax, DWORD PTR __Left$[ebp]
  00061	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00067	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0006a	3b c1		 cmp	 eax, ecx
  0006c	7c 28		 jl	 SHORT $LN26@Find_lower
  0006e	8b 45 f8	 mov	 eax, DWORD PTR __Left$[ebp]
  00071	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00074	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00077	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  0007a	3b c1		 cmp	 eax, ecx
  0007c	75 12		 jne	 SHORT $LN25@Find_lower
  0007e	8b 45 f8	 mov	 eax, DWORD PTR __Left$[ebp]
  00081	0f b7 40 01	 movzx	 eax, WORD PTR [eax+1]
  00085	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00088	0f b7 49 01	 movzx	 ecx, WORD PTR [ecx+1]
  0008c	3b c1		 cmp	 eax, ecx
  0008e	7c 06		 jl	 SHORT $LN26@Find_lower
$LN25@Find_lower:
  00090	83 65 ec 00	 and	 DWORD PTR tv142[ebp], 0
  00094	eb 07		 jmp	 SHORT $LN21@Find_lower
$LN26@Find_lower:
  00096	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv142[ebp], 1
$LN21@Find_lower:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1705 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0009d	0f b6 45 ec	 movzx	 eax, BYTE PTR tv142[ebp]
  000a1	85 c0		 test	 eax, eax
  000a3	74 0f		 je	 SHORT $LN4@Find_lower

; 1706 :                 _Result._Location._Child = _Tree_child::_Right;

  000a5	83 65 d8 00	 and	 DWORD PTR __Result$[ebp+4], 0

; 1707 :                 _Trynode                 = _Trynode->_Right;

  000a9	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  000ac	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000af	89 45 fc	 mov	 DWORD PTR __Trynode$[ebp], eax

; 1708 :             } else {

  000b2	eb 15		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1709 :                 _Result._Location._Child = _Tree_child::_Left;

  000b4	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR __Result$[ebp+4], 1

; 1710 :                 _Result._Bound           = _Trynode;

  000bb	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  000be	89 45 dc	 mov	 DWORD PTR __Result$[ebp+8], eax

; 1711 :                 _Trynode                 = _Trynode->_Left;

  000c1	8b 45 fc	 mov	 eax, DWORD PTR __Trynode$[ebp]
  000c4	8b 00		 mov	 eax, DWORD PTR [eax]
  000c6	89 45 fc	 mov	 DWORD PTR __Trynode$[ebp], eax
$LN5@Find_lower:

; 1712 :             }
; 1713 :         }

  000c9	e9 66 ff ff ff	 jmp	 $LN2@Find_lower
$LN3@Find_lower:

; 1714 : 
; 1715 :         return _Result;

  000ce	8d 75 d4	 lea	 esi, DWORD PTR __Result$[ebp]
  000d1	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  000d4	a5		 movsd
  000d5	a5		 movsd
  000d6	a5		 movsd
  000d7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1716 :     }

  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	c9		 leave
  000dd	c2 08 00	 ret	 8
??$_Find_lower_bound@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@ABUSItemPos@@@Z ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Find_lower_bound<SItemPos>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0HUItemStockSortFunc@@@Z
_TEXT	SEGMENT
__Mid$1 = -12						; size = 8
__Last$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0HUItemStockSortFunc@@@Z PROC ; std::_Sort_unchecked<SShopItemTable *,ItemStockSortFunc>, COMDAT

; 7537 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
$LN4@Sort_unche:

; 7538 :     // order [_First, _Last)
; 7539 :     for (;;) {
; 7540 :         if (_Last - _First <= _ISORT_MAX) { // small

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000a	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0000d	99		 cdq
  0000e	6a 0d		 push	 13			; 0000000dH
  00010	59		 pop	 ecx
  00011	f7 f9		 idiv	 ecx
  00013	83 f8 20	 cmp	 eax, 32			; 00000020H
  00016	7f 16		 jg	 SHORT $LN5@Sort_unche

; 7541 :             _Insertion_sort_unchecked(_First, _Last, _Pred);

  00018	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0001b	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001e	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Insertion_sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAPAUSShopItemTable@@QAU1@0UItemStockSortFunc@@@Z ; std::_Insertion_sort_unchecked<SShopItemTable *,ItemStockSortFunc>
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7542 :             return;

  00029	e9 cc 00 00 00	 jmp	 $LN1@Sort_unche
$LN5@Sort_unche:

; 7543 :         }
; 7544 : 
; 7545 :         if (_Ideal <= 0) { // heap sort if too many divisions

  0002e	83 7d 10 00	 cmp	 DWORD PTR __Ideal$[ebp], 0
  00032	7f 48		 jg	 SHORT $LN6@Sort_unche

; 7546 :             _Make_heap_unchecked(_First, _Last, _Pred);

  00034	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  00037	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0003a	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0003d	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0UItemStockSortFunc@@@Z ; std::_Make_heap_unchecked<SShopItemTable *,ItemStockSortFunc>
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 7547 :             _Sort_heap_unchecked(_First, _Last, _Pred);

  00045	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00048	89 45 fc	 mov	 DWORD PTR __Last$[ebp], eax

; 6592 :     for (; _Last - _First >= 2; --_Last) {

  0004b	eb 09		 jmp	 SHORT $LN62@Sort_unche
$LN60@Sort_unche:
  0004d	8b 45 fc	 mov	 eax, DWORD PTR __Last$[ebp]
  00050	83 e8 0d	 sub	 eax, 13			; 0000000dH
  00053	89 45 fc	 mov	 DWORD PTR __Last$[ebp], eax
$LN62@Sort_unche:
  00056	8b 45 fc	 mov	 eax, DWORD PTR __Last$[ebp]
  00059	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  0005c	99		 cdq
  0005d	6a 0d		 push	 13			; 0000000dH
  0005f	59		 pop	 ecx
  00060	f7 f9		 idiv	 ecx
  00062	83 f8 02	 cmp	 eax, 2
  00065	7c 13		 jl	 SHORT $LN59@Sort_unche

; 6593 :         _Pop_heap_unchecked(_First, _Last, _Pred);

  00067	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0006a	ff 75 fc	 push	 DWORD PTR __Last$[ebp]
  0006d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00070	e8 00 00 00 00	 call	 ??$_Pop_heap_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0UItemStockSortFunc@@@Z ; std::_Pop_heap_unchecked<SShopItemTable *,ItemStockSortFunc>
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6594 :     }

  00078	eb d3		 jmp	 SHORT $LN60@Sort_unche
$LN59@Sort_unche:

; 7548 :             return;

  0007a	eb 7e		 jmp	 SHORT $LN1@Sort_unche
$LN6@Sort_unche:

; 7549 :         }
; 7550 : 
; 7551 :         // divide and conquer by quicksort
; 7552 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  0007c	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  0007f	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00082	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00085	8d 45 f4	 lea	 eax, DWORD PTR __Mid$1[ebp]
  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YA?AU?$pair@PAUSShopItemTable@@PAU1@@0@PAUSShopItemTable@@0UItemStockSortFunc@@@Z ; std::_Partition_by_median_guess_unchecked<SShopItemTable *,ItemStockSortFunc>
  0008e	83 c4 10	 add	 esp, 16			; 00000010H

; 7553 : 
; 7554 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  00091	8b 45 10	 mov	 eax, DWORD PTR __Ideal$[ebp]
  00094	d1 f8		 sar	 eax, 1
  00096	8b 4d 10	 mov	 ecx, DWORD PTR __Ideal$[ebp]
  00099	c1 f9 02	 sar	 ecx, 2
  0009c	03 c1		 add	 eax, ecx
  0009e	89 45 10	 mov	 DWORD PTR __Ideal$[ebp], eax

; 7555 : 
; 7556 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  000a1	8b 45 f4	 mov	 eax, DWORD PTR __Mid$1[ebp]
  000a4	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
  000a7	99		 cdq
  000a8	6a 0d		 push	 13			; 0000000dH
  000aa	59		 pop	 ecx
  000ab	f7 f9		 idiv	 ecx
  000ad	8b c8		 mov	 ecx, eax
  000af	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  000b2	2b 45 f8	 sub	 eax, DWORD PTR __Mid$1[ebp+4]
  000b5	99		 cdq
  000b6	6a 0d		 push	 13			; 0000000dH
  000b8	5e		 pop	 esi
  000b9	f7 fe		 idiv	 esi
  000bb	3b c8		 cmp	 ecx, eax
  000bd	7d 1c		 jge	 SHORT $LN7@Sort_unche

; 7557 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  000bf	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000c2	ff 75 10	 push	 DWORD PTR __Ideal$[ebp]
  000c5	ff 75 f4	 push	 DWORD PTR __Mid$1[ebp]
  000c8	ff 75 08	 push	 DWORD PTR __First$[ebp]
  000cb	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0HUItemStockSortFunc@@@Z ; std::_Sort_unchecked<SShopItemTable *,ItemStockSortFunc>
  000d0	83 c4 10	 add	 esp, 16			; 00000010H

; 7558 :             _First = _Mid.second;

  000d3	8b 45 f8	 mov	 eax, DWORD PTR __Mid$1[ebp+4]
  000d6	89 45 08	 mov	 DWORD PTR __First$[ebp], eax

; 7559 :         } else { // loop on first half

  000d9	eb 1a		 jmp	 SHORT $LN8@Sort_unche
$LN7@Sort_unche:

; 7560 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  000db	ff 75 14	 push	 DWORD PTR __Pred$[ebp]
  000de	ff 75 10	 push	 DWORD PTR __Ideal$[ebp]
  000e1	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  000e4	ff 75 f8	 push	 DWORD PTR __Mid$1[ebp+4]
  000e7	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0HUItemStockSortFunc@@@Z ; std::_Sort_unchecked<SShopItemTable *,ItemStockSortFunc>
  000ec	83 c4 10	 add	 esp, 16			; 00000010H

; 7561 :             _Last = _Mid.first;

  000ef	8b 45 f4	 mov	 eax, DWORD PTR __Mid$1[ebp]
  000f2	89 45 0c	 mov	 DWORD PTR __Last$[ebp], eax
$LN8@Sort_unche:

; 7562 :         }
; 7563 :     }

  000f5	e9 0d ff ff ff	 jmp	 $LN4@Sort_unche
$LN1@Sort_unche:

; 7564 : }

  000fa	5e		 pop	 esi
  000fb	c9		 leave
  000fc	c3		 ret	 0
??$_Sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0HUItemStockSortFunc@@@Z ENDP ; std::_Sort_unchecked<SShopItemTable *,ItemStockSortFunc>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$emplace@U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z
_TEXT	SEGMENT
__Result$ = -40						; size = 8
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
___param0$ = -16					; size = 4
$T5 = -12						; size = 4
$T6 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_<_Vals_0>$ = 12					; size = 4
??$emplace@U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::emplace<std::pair<SItemPos,SShopItemTable> >, COMDAT
; _this$ = ecx

; 1094 :     pair<iterator, bool> emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 0c	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1095 :         const auto _Result = _Emplace(_STD forward<_Valtys>(_Vals)...);

  0000f	ff 75 f8	 push	 DWORD PTR $T6[ebp]
  00012	8d 45 d8	 lea	 eax, DWORD PTR __Result$[ebp]
  00015	50		 push	 eax
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ??$_Emplace@U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@_N@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Emplace<std::pair<SItemPos,SShopItemTable> >

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00021	89 45 f4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00024	8b 45 f4	 mov	 eax, DWORD PTR $T5[ebp]
  00027	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax

; 1096 :         return {iterator(_Result.first, _Get_scary()), _Result.second};

  0002a	8b 45 d8	 mov	 eax, DWORD PTR __Result$[ebp]
  0002d	89 45 f0	 mov	 DWORD PTR ___param0$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00030	8b 45 f0	 mov	 eax, DWORD PTR ___param0$[ebp]
  00033	89 45 ec	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00036	8d 45 ec	 lea	 eax, DWORD PTR $T4[ebp]
  00039	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0003c	8b 45 e8	 mov	 eax, DWORD PTR $T3[ebp]
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00044	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00046	8d 45 dc	 lea	 eax, DWORD PTR __Result$[ebp+4]
  00049	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0004c	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004f	8b 4d e4	 mov	 ecx, DWORD PTR $T2[ebp]
  00052	8a 09		 mov	 cl, BYTE PTR [ecx]
  00054	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1096 :         return {iterator(_Result.first, _Get_scary()), _Result.second};

  00057	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1097 :     }

  0005a	c9		 leave
  0005b	c2 08 00	 ret	 8
??$emplace@U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::emplace<std::pair<SItemPos,SShopItemTable> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@YAPAUSShopItemTable@@QAU1@0PAU1@AAV?$allocator@USShopItemTable@@@0@@Z
_TEXT	SEGMENT
__Backout$1 = -52					; size = 12
___formal$ = -40					; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
__Ptr$ = -16						; size = 4
$T7 = -12						; size = 4
__ULast$ = -8						; size = 4
__UFirst$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@YAPAUSShopItemTable@@QAU1@0PAU1@AAV?$allocator@USShopItemTable@@@0@@Z PROC ; std::_Uninitialized_move<SShopItemTable *,std::allocator<SShopItemTable> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

  00008	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0000b	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00011	89 45 f8	 mov	 DWORD PTR __ULast$[ebp], eax

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00014	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00017	89 45 cc	 mov	 DWORD PTR __Backout$1[ebp], eax
  0001a	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0001d	89 45 d0	 mov	 DWORD PTR __Backout$1[ebp+4], eax
  00020	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00023	89 45 d4	 mov	 DWORD PTR __Backout$1[ebp+8], eax

; 1691 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1692 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1694 :         return _Dest + (_ULast - _UFirst);
; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {

  00026	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00028	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0002b	83 c0 0d	 add	 eax, 13			; 0000000dH
  0002e	89 45 fc	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
  00031	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00034	3b 45 f8	 cmp	 eax, DWORD PTR __ULast$[ebp]
  00037	74 3f		 je	 SHORT $LN3@Uninitiali
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00039	8b 45 fc	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0003c	89 45 f4	 mov	 DWORD PTR $T7[ebp], eax

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003f	8b 45 f4	 mov	 eax, DWORD PTR $T7[ebp]
  00042	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00045	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00048	89 45 f0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0004b	8b 45 f0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0004e	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00051	8b 45 d4	 mov	 eax, DWORD PTR __Backout$1[ebp+8]
  00054	89 45 d8	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00057	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp]
  0005a	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0005d	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  00060	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00063	8b 75 e4	 mov	 esi, DWORD PTR $T4[ebp]
  00066	8b 7d e0	 mov	 edi, DWORD PTR $T3[ebp]
  00069	a5		 movsd
  0006a	a5		 movsd
  0006b	a5		 movsd
  0006c	a4		 movsb

; 1547 :         ++_Last;

  0006d	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00070	83 c0 0d	 add	 eax, 13			; 0000000dH
  00073	89 45 d0	 mov	 DWORD PTR __Backout$1[ebp+4], eax

; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1699 :         }

  00076	eb b0		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1551 :         _First = _Last;

  00078	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  0007b	89 45 cc	 mov	 DWORD PTR __Backout$1[ebp], eax

; 1552 :         return _Last;

  0007e	8b 45 d0	 mov	 eax, DWORD PTR __Backout$1[ebp+4]
  00081	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax

; 1541 :         _Destroy_range(_First, _Last, _Al);

  00084	ff 75 d4	 push	 DWORD PTR __Backout$1[ebp+8]
  00087	ff 75 d0	 push	 DWORD PTR __Backout$1[ebp+4]
  0008a	ff 75 cc	 push	 DWORD PTR __Backout$1[ebp]
  0008d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USShopItemTable@@@std@@@std@@YAXPAUSShopItemTable@@QAU1@AAV?$allocator@USShopItemTable@@@0@@Z ; std::_Destroy_range<std::allocator<SShopItemTable> >
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1700 : 
; 1701 :         return _Backout._Release();

  00095	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]

; 1702 :     }
; 1703 : }

  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	c9		 leave
  0009b	c3		 ret	 0
??$_Uninitialized_move@PAUSShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@YAPAUSShopItemTable@@QAU1@0PAU1@AAV?$allocator@USShopItemTable@@@0@@Z ENDP ; std::_Uninitialized_move<SShopItemTable *,std::allocator<SShopItemTable> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Max_possible$1 = -20					; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
__Pnode$ = -8						; size = 4
__Overflow_is_possible$4 = -1				; size = 1
__Al$ = 8						; size = 4
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >, COMDAT

; 341  :     static _Nodeptr _Buyheadnode(_Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00006	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$4[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0000a	c7 45 ec ff ff
	ff 07		 mov	 DWORD PTR __Max_possible$1[ebp], 134217727 ; 07ffffffH

; 60   :         if (_Count > _Max_possible) {

  00011	33 c0		 xor	 eax, eax
  00013	40		 inc	 eax
  00014	3d ff ff ff 07	 cmp	 eax, 134217727		; 07ffffffH
  00019	76 05		 jbe	 SHORT $LN6@Buyheadnod

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0001b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN6@Buyheadnod:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00020	33 c0		 xor	 eax, eax
  00022	40		 inc	 eax
  00023	c1 e0 05	 shl	 eax, 5
  00026	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00029	ff 75 f4	 push	 DWORD PTR $T3[ebp]
  0002c	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00031	59		 pop	 ecx
  00032	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 343  :         const auto _Pnode = _Al.allocate(1);

  00035	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00038	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 344  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0003b	8d 45 f8	 lea	 eax, DWORD PTR __Pnode$[ebp]
  0003e	50		 push	 eax
  0003f	ff 75 f8	 push	 DWORD PTR __Pnode$[ebp]
  00042	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * const &>
  00047	59		 pop	 ecx
  00048	59		 pop	 ecx

; 345  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00049	8d 45 f8	 lea	 eax, DWORD PTR __Pnode$[ebp]
  0004c	50		 push	 eax
  0004d	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00050	83 c0 04	 add	 eax, 4
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * const &>
  00059	59		 pop	 ecx
  0005a	59		 pop	 ecx

; 346  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0005b	8d 45 f8	 lea	 eax, DWORD PTR __Pnode$[ebp]
  0005e	50		 push	 eax
  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00062	83 c0 08	 add	 eax, 8
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> *,std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> * const &>
  0006b	59		 pop	 ecx
  0006c	59		 pop	 ecx

; 347  :         _Pnode->_Color = _Black;

  0006d	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00070	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 348  :         _Pnode->_Isnil = true;

  00074	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00077	c6 40 0d 01	 mov	 BYTE PTR [eax+13], 1

; 349  :         return _Pnode;

  0007b	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
$LN9@Buyheadnod:

; 350  :     }

  0007e	c9		 leave
  0007f	c3		 ret	 0
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USShopItemTable@@@std@@@std@@YAXPAUSShopItemTable@@QAU1@AAV?$allocator@USShopItemTable@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USShopItemTable@@@std@@@std@@YAXPAUSShopItemTable@@QAU1@AAV?$allocator@USShopItemTable@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SShopItemTable> >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@USShopItemTable@@@std@@@std@@YAXPAUSShopItemTable@@QAU1@AAV?$allocator@USShopItemTable@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SShopItemTable> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAHV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@0@0@Z
_TEXT	SEGMENT
__ULast$1 = -24						; size = 4
tv95 = -20						; size = 4
tv87 = -16						; size = 4
__UFirst$2 = -12					; size = 4
__Off$3 = -8						; size = 4
$T4 = -2						; size = 1
$T5 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAHV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@0@0@Z PROC ; std::distance<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0> >, COMDAT

; 1792 : _NODISCARD _CONSTEXPR17 _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 1793 :     if constexpr (_Is_random_iter_v<_InIt>) {
; 1794 :         return _Last - _First; // assume the iterator will do debug checking
; 1795 :     } else {
; 1796 :         _Adl_verify_range(_First, _Last);
; 1797 :         auto _UFirst             = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f4	 mov	 DWORD PTR __UFirst$2[ebp], eax

; 1798 :         const auto _ULast        = _Get_unwrapped(_Last);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 e8	 mov	 DWORD PTR __ULast$1[ebp], eax

; 1799 :         _Iter_diff_t<_InIt> _Off = 0;

  00012	83 65 f8 00	 and	 DWORD PTR __Off$3[ebp], 0
  00016	eb 08		 jmp	 SHORT $LN4@distance
$LN2@distance:

; 1800 :         for (; _UFirst != _ULast; ++_UFirst) {

  00018	8d 4d f4	 lea	 ecx, DWORD PTR __UFirst$2[ebp]
  0001b	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0>::operator++
$LN4@distance:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 98   :         return _Ptr == _Right._Ptr;

  00020	8b 45 f4	 mov	 eax, DWORD PTR __UFirst$2[ebp]
  00023	3b 45 e8	 cmp	 eax, DWORD PTR __ULast$1[ebp]
  00026	75 09		 jne	 SHORT $LN31@distance
  00028	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
  0002f	eb 04		 jmp	 SHORT $LN32@distance
$LN31@distance:
  00031	83 65 f0 00	 and	 DWORD PTR tv87[ebp], 0
$LN32@distance:
  00035	8a 45 f0	 mov	 al, BYTE PTR tv87[ebp]
  00038	88 45 ff	 mov	 BYTE PTR $T5[ebp], al

; 102  :         return !(*this == _Right);

  0003b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T5[ebp]
  0003f	85 c0		 test	 eax, eax
  00041	75 09		 jne	 SHORT $LN26@distance
  00043	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv95[ebp], 1
  0004a	eb 04		 jmp	 SHORT $LN27@distance
$LN26@distance:
  0004c	83 65 ec 00	 and	 DWORD PTR tv95[ebp], 0
$LN27@distance:
  00050	8a 45 ec	 mov	 al, BYTE PTR tv95[ebp]
  00053	88 45 fe	 mov	 BYTE PTR $T4[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1800 :         for (; _UFirst != _ULast; ++_UFirst) {

  00056	0f b6 45 fe	 movzx	 eax, BYTE PTR $T4[ebp]
  0005a	85 c0		 test	 eax, eax
  0005c	74 09		 je	 SHORT $LN3@distance

; 1801 :             ++_Off;

  0005e	8b 45 f8	 mov	 eax, DWORD PTR __Off$3[ebp]
  00061	40		 inc	 eax
  00062	89 45 f8	 mov	 DWORD PTR __Off$3[ebp], eax

; 1802 :         }

  00065	eb b1		 jmp	 SHORT $LN2@distance
$LN3@distance:

; 1803 : 
; 1804 :         return _Off;

  00067	8b 45 f8	 mov	 eax, DWORD PTR __Off$3[ebp]

; 1805 :     }
; 1806 : }

  0006a	c9		 leave
  0006b	c3		 ret	 0
??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAHV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@0@0@Z ENDP ; std::distance<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
__Old_val$2 = -16					; size = 4
__New_val$ = -12					; size = 4
_this$ = -8						; size = 4
$T3 = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >, COMDAT
; _this$ = ecx

; 742  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@Erase_tree:

; 743  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  0000c	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00010	85 c0		 test	 eax, eax
  00012	75 43		 jne	 SHORT $LN4@Erase_tree

; 744  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  00017	ff 70 08	 push	 DWORD PTR [eax+8]
  0001a	ff 75 08	 push	 DWORD PTR __Al$[ebp]
  0001d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >

; 745  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));

  00025	8b 45 0c	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  00028	89 45 f4	 mov	 DWORD PTR __New_val$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 598  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  0002e	89 45 f0	 mov	 DWORD PTR __Old_val$2[ebp], eax

; 599  :     _Val         = static_cast<_Other&&>(_New_val);

  00031	8b 45 f4	 mov	 eax, DWORD PTR __New_val$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	89 45 0c	 mov	 DWORD PTR __Rootnode$[ebp], eax

; 600  :     return _Old_val;

  00039	8b 45 f0	 mov	 eax, DWORD PTR __Old_val$2[ebp]
  0003c	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 379  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  0003f	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  00042	83 c0 0e	 add	 eax, 14			; 0000000eH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00045	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 380  :         _Freenode0(_Al, _Ptr);

  00048	ff 75 fc	 push	 DWORD PTR $T3[ebp]
  0004b	ff 75 08	 push	 DWORD PTR __Al$[ebp]
  0004e	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
  00053	59		 pop	 ecx
  00054	59		 pop	 ecx

; 746  :         }

  00055	eb b2		 jmp	 SHORT $LN2@Erase_tree
$LN4@Erase_tree:

; 747  :     }

  00057	c9		 leave
  00058	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Find@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z
_TEXT	SEGMENT
__Loc$ = -24						; size = 12
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Keyval$ = 8						; size = 4
??$_Find@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Find<SItemPos>, COMDAT
; _this$ = ecx

; 1457 :     _NODISCARD _Nodeptr _Find(const _Other& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1458 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00009	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
  0000c	8d 45 e8	 lea	 eax, DWORD PTR __Loc$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Find_lower_bound@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Find_lower_bound<SItemPos>

; 1459 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  00018	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
  0001b	ff 75 f0	 push	 DWORD PTR __Loc$[ebp+8]
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Lower_bound_duplicate@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Lower_bound_duplicate<SItemPos>
  00026	0f b6 c0	 movzx	 eax, al
  00029	85 c0		 test	 eax, eax
  0002b	74 05		 je	 SHORT $LN2@Find

; 1460 :             return _Loc._Bound;

  0002d	8b 45 f0	 mov	 eax, DWORD PTR __Loc$[ebp+8]
  00030	eb 11		 jmp	 SHORT $LN1@Find
$LN2@Find:

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00035	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00038	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0003b	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1461 :         }
; 1462 : 
; 1463 :         return _Get_scary()->_Myhead;

  0003e	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
  00041	8b 00		 mov	 eax, DWORD PTR [eax]
$LN1@Find:

; 1464 :     }

  00043	c9		 leave
  00044	c2 04 00	 ret	 4
??$_Find@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Find<SItemPos>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Max_possible$2 = -68					; size = 4
$T3 = -64						; size = 4
__Al$ = -60						; size = 4
__Last$ = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
__First$ = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T8 = -24						; size = 4
$T9 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T10 = 0						; size = 4
$T11 = 4						; size = 4
$T12 = 8						; size = 4
$T13 = 12						; size = 4
$T14 = 16						; size = 4
$T15 = 20						; size = 4
$T16 = 24						; size = 4
$T17 = 28						; size = 4
$T18 = 32						; size = 4
$T19 = 36						; size = 4
$T20 = 40						; size = 4
__Newsize$ = 44						; size = 4
__Constructed_last$ = 48				; size = 4
__Oldsize$ = 52						; size = 4
tv172 = 56						; size = 4
$T21 = 60						; size = 4
$T22 = 64						; size = 4
__My_data$ = 68						; size = 4
__Constructed_first$ = 72				; size = 4
___formal$ = 76						; size = 1
__Overflow_is_possible$23 = 83				; size = 1
__Newcapacity$ = 84					; size = 4
__Mylast$ = 88						; size = 4
__Myfirst$ = 92						; size = 4
__Whereoff$ = 96					; size = 4
$T24 = 103						; size = 1
_this$ = 104						; size = 4
__Newvec$ = 108						; size = 4
__Whereptr$ = 120					; size = 4
_<_Val_0>$ = 124					; size = 4
??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z PROC ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Emplace_reallocate<SShopItemTable const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	83 ec 70	 sub	 esp, 112		; 00000070H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	83 ec 34	 sub	 esp, 52			; 00000034H
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d 68	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00037	89 45 28	 mov	 DWORD PTR $T20[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0003a	8b 45 28	 mov	 eax, DWORD PTR $T20[ebp]
  0003d	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;

  00040	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
  00043	89 45 44	 mov	 DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

  00046	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  00049	89 45 5c	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

  0004c	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004f	83 c0 04	 add	 eax, 4
  00052	89 45 58	 mov	 DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00055	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00058	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0005b	2b 08		 sub	 ecx, DWORD PTR [eax]
  0005d	8b c1		 mov	 eax, ecx
  0005f	99		 cdq
  00060	6a 0d		 push	 13			; 0000000dH
  00062	59		 pop	 ecx
  00063	f7 f9		 idiv	 ecx
  00065	89 45 60	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00068	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006b	8b 4d 5c	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 0d		 push	 13			; 0000000dH
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 34	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  0007b	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0007e	89 45 24	 mov	 DWORD PTR $T19[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00081	8b 45 24	 mov	 eax, DWORD PTR $T19[ebp]
  00084	89 45 c0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00087	c7 45 40 13 3b
	b1 13		 mov	 DWORD PTR $T22[ebp], 330382099 ; 13b13b13H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  0008e	c7 45 20 ff ff
	ff 7f		 mov	 DWORD PTR $T18[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00095	8b 45 20	 mov	 eax, DWORD PTR $T18[ebp]
  00098	89 45 3c	 mov	 DWORD PTR $T21[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0009b	8b 45 40	 mov	 eax, DWORD PTR $T22[ebp]
  0009e	3b 45 3c	 cmp	 eax, DWORD PTR $T21[ebp]
  000a1	73 08		 jae	 SHORT $LN34@Emplace_re
  000a3	8d 45 40	 lea	 eax, DWORD PTR $T22[ebp]
  000a6	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
  000a9	eb 06		 jmp	 SHORT $LN35@Emplace_re
$LN34@Emplace_re:
  000ab	8d 45 3c	 lea	 eax, DWORD PTR $T21[ebp]
  000ae	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
$LN35@Emplace_re:
  000b1	8b 45 38	 mov	 eax, DWORD PTR tv172[ebp]
  000b4	89 45 1c	 mov	 DWORD PTR $T17[ebp], eax
  000b7	8b 45 1c	 mov	 eax, DWORD PTR $T17[ebp]
  000ba	89 45 18	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  000bd	8b 45 18	 mov	 eax, DWORD PTR $T16[ebp]
  000c0	8b 00		 mov	 eax, DWORD PTR [eax]
  000c2	89 45 14	 mov	 DWORD PTR $T15[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  000c5	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000c8	3b 45 14	 cmp	 eax, DWORD PTR $T15[ebp]
  000cb	75 05		 jne	 SHORT $LN2@Emplace_re

; 738  :             _Xlength();

  000cd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@CAXXZ ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  000d2	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000d5	40		 inc	 eax
  000d6	89 45 2c	 mov	 DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000d9	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  000dc	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@ABEII@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Calculate_growth
  000e4	89 45 54	 mov	 DWORD PTR __Newcapacity$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000e7	c6 45 53 01	 mov	 BYTE PTR __Overflow_is_possible$23[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000eb	c7 45 bc 13 3b
	b1 13		 mov	 DWORD PTR __Max_possible$2[ebp], 330382099 ; 13b13b13H

; 60   :         if (_Count > _Max_possible) {

  000f2	81 7d 54 13 3b
	b1 13		 cmp	 DWORD PTR __Newcapacity$[ebp], 330382099 ; 13b13b13H
  000f9	76 05		 jbe	 SHORT $LN67@Emplace_re

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000fb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN67@Emplace_re:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00100	6b 45 54 0d	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 13
  00104	89 45 10	 mov	 DWORD PTR $T14[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00107	ff 75 10	 push	 DWORD PTR $T14[ebp]
  0010a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0010f	59		 pop	 ecx
  00110	89 45 6c	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00113	6b 45 60 0d	 imul	 eax, DWORD PTR __Whereoff$[ebp], 13
  00117	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0011a	8d 44 01 0d	 lea	 eax, DWORD PTR [ecx+eax+13]
  0011e	89 45 30	 mov	 DWORD PTR __Constructed_last$[ebp], eax

; 746  :         pointer _Constructed_first      = _Constructed_last;

  00121	8b 45 30	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00124	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

  00127	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0012b	8b 45 7c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0012e	89 45 08	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00131	6b 45 60 0d	 imul	 eax, DWORD PTR __Whereoff$[ebp], 13
  00135	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00138	89 45 0c	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0013b	8b 45 0c	 mov	 eax, DWORD PTR $T13[ebp]
  0013e	89 45 00	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00141	8b 45 08	 mov	 eax, DWORD PTR $T12[ebp]
  00144	89 45 04	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00147	8b 75 04	 mov	 esi, DWORD PTR $T11[ebp]
  0014a	8b 7d 00	 mov	 edi, DWORD PTR $T10[ebp]
  0014d	a5		 movsd
  0014e	a5		 movsd
  0014f	a5		 movsd
  00150	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 750  :         _Constructed_first = _Newvec + _Whereoff;

  00151	6b 45 60 0d	 imul	 eax, DWORD PTR __Whereoff$[ebp], 13
  00155	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
  00158	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0015b	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0015e	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00161	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00163	75 3d		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00165	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00168	8b 00		 mov	 eax, DWORD PTR [eax]
  0016a	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  0016d	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00170	8b 00		 mov	 eax, DWORD PTR [eax]
  00172	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00175	33 c0		 xor	 eax, eax
  00177	88 45 67	 mov	 BYTE PTR $T24[ebp], al
  0017a	8a 45 67	 mov	 al, BYTE PTR $T24[ebp]
  0017d	88 45 4c	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  00180	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00183	89 45 ec	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00186	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp]
  00189	89 45 e8	 mov	 DWORD PTR $T8[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0018c	ff 75 e8	 push	 DWORD PTR $T8[ebp]
  0018f	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00192	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  00195	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  00198	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@YAPAUSShopItemTable@@QAU1@0PAU1@AAV?$allocator@USShopItemTable@@@0@@Z ; std::_Uninitialized_move<SShopItemTable *,std::allocator<SShopItemTable> >
  0019d	83 c4 10	 add	 esp, 16			; 00000010H

; 754  :         } else { // provide basic guarantee

  001a0	eb 5f		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  001a2	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  001a5	8b 00		 mov	 eax, DWORD PTR [eax]
  001a7	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001aa	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001ad	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001b0	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  001b3	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001b6	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  001b9	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  001bc	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001bf	ff 75 d4	 push	 DWORD PTR __First$[ebp]
  001c2	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@YAPAUSShopItemTable@@QAU1@0PAU1@AAV?$allocator@USShopItemTable@@@0@@Z ; std::_Uninitialized_move<SShopItemTable *,std::allocator<SShopItemTable> >
  001c7	83 c4 10	 add	 esp, 16			; 00000010H

; 756  :             _Constructed_first = _Newvec;

  001ca	8b 45 6c	 mov	 eax, DWORD PTR __Newvec$[ebp]
  001cd	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001d0	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  001d3	8b 00		 mov	 eax, DWORD PTR [eax]
  001d5	89 45 c8	 mov	 DWORD PTR __Last$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001d8	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001db	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001de	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  001e1	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001e4	ff 75 cc	 push	 DWORD PTR $T4[ebp]

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001e7	6b 45 60 0d	 imul	 eax, DWORD PTR __Whereoff$[ebp], 13
  001eb	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001ee	8d 44 01 0d	 lea	 eax, DWORD PTR [ecx+eax+13]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001f2	50		 push	 eax
  001f3	ff 75 c8	 push	 DWORD PTR __Last$[ebp]
  001f6	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001f9	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@YAPAUSShopItemTable@@QAU1@0PAU1@AAV?$allocator@USShopItemTable@@@0@@Z ; std::_Uninitialized_move<SShopItemTable *,std::allocator<SShopItemTable> >
  001fe	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Emplace_re:

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00201	eb 2b		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  00203	ff 75 30	 push	 DWORD PTR __Constructed_last$[ebp]
  00206	ff 75 48	 push	 DWORD PTR __Constructed_first$[ebp]
  00209	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  0020c	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXPAUSShopItemTable@@0@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  00211	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  00214	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00217	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  0021a	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USShopItemTable@@@std@@QAEXQAUSShopItemTable@@I@Z ; std::allocator<SShopItemTable>::deallocate

; 762  :         _RERAISE;

  0021f	6a 00		 push	 0
  00221	6a 00		 push	 0
  00223	e8 00 00 00 00	 call	 __CxxThrowException@8

; 763  :         _CATCH_END

  00228	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  0022d	c3		 ret	 0
$LN7@Emplace_re:
  0022e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00232	eb 04		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z$1
$LN10@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  00234	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00238	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  0023b	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  0023e	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00241	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  00244	e8 00 00 00 00	 call	 ?_Change_array@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXQAUSShopItemTable@@II@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  00249	6b 45 60 0d	 imul	 eax, DWORD PTR __Whereoff$[ebp], 13
  0024d	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN70@Emplace_re:

; 767  :     }

  00250	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00253	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025a	59		 pop	 ecx
  0025b	5f		 pop	 edi
  0025c	5e		 pop	 esi
  0025d	5b		 pop	 ebx
  0025e	83 c5 70	 add	 ebp, 112		; 00000070H
  00261	c9		 leave
  00262	c2 08 00	 ret	 8
  00265	cc		 int	 3
  00266	cc		 int	 3
  00267	cc		 int	 3
  00268	cc		 int	 3
  00269	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z ENDP ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Emplace_reallocate<SShopItemTable const &>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$emplace_back@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEXABUSShopItemTable@@@Z
_TEXT	SEGMENT
__Result$ = -64						; size = 4
__Result$1 = -60					; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
$T8 = -32						; size = 4
__Ptr$ = -28						; size = 4
$T9 = -24						; size = 4
__My_data$10 = -20					; size = 4
__Mylast$ = -16						; size = 4
__My_data$ = -12					; size = 4
_this$ = -8						; size = 4
__Mylast$11 = -4					; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEXABUSShopItemTable@@@Z PROC ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::emplace_back<SShopItemTable const &>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

  0000b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	89 45 f4	 mov	 DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

  00011	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

  0001a	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0001d	8b 4d f4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00025	74 62		 je	 SHORT $LN2@emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00027	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0002a	89 45 e8	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 684  :         auto& _My_data   = _Mypair._Myval2;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	89 45 ec	 mov	 DWORD PTR __My_data$10[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

  00033	8b 45 ec	 mov	 eax, DWORD PTR __My_data$10[ebp]
  00036	83 c0 04	 add	 eax, 4
  00039	89 45 fc	 mov	 DWORD PTR __Mylast$11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003c	8b 45 e8	 mov	 eax, DWORD PTR $T9[ebp]
  0003f	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00042	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 e4	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0004a	8b 45 e4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0004d	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00053	89 45 e0	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00056	8b 45 e0	 mov	 eax, DWORD PTR $T8[ebp]
  00059	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0005c	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  0005f	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T6[ebp]
  00065	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00068	8b 75 d4	 mov	 esi, DWORD PTR $T5[ebp]
  0006b	8b 7d d0	 mov	 edi, DWORD PTR $T4[ebp]
  0006e	a5		 movsd
  0006f	a5		 movsd
  00070	a5		 movsd
  00071	a4		 movsb
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 689  :         _Ty& _Result = *_Mylast;

  00072	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  00075	8b 00		 mov	 eax, DWORD PTR [eax]
  00077	89 45 c4	 mov	 DWORD PTR __Result$1[ebp], eax

; 690  :         ++_Mylast;

  0007a	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	83 c0 0d	 add	 eax, 13			; 0000000dH
  00082	8b 4d fc	 mov	 ecx, DWORD PTR __Mylast$11[ebp]
  00085	89 01		 mov	 DWORD PTR [ecx], eax

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00087	eb 19		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00089	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0008c	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0008f	ff 75 cc	 push	 DWORD PTR $T3[ebp]
  00092	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00095	ff 30		 push	 DWORD PTR [eax]
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEPAUSShopItemTable@@QAU2@ABU2@@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Emplace_reallocate<SShopItemTable const &>
  0009f	89 45 c0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	c9		 leave
  000a5	c2 04 00	 ret	 4
??$emplace_back@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEXABUSShopItemTable@@@Z ENDP ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::emplace_back<SShopItemTable const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopGetTabCoinType@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_bTabIdx$ = -4						; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopGetTabCoinType@@YAPAU_object@@PAU1@0@Z PROC	; shopGetTabCoinType, COMDAT

; 394  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 395  : 	BYTE bTabIdx;
; 396  : 	if (!PyTuple_GetInteger(poArgs, 0, &bTabIdx))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _bTabIdx$[ebp]
  00008	50		 push	 eax
  00009	6a 00		 push	 0
  0000b	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000e	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z ; PyTuple_GetInteger
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	0f b6 c0	 movzx	 eax, al
  00019	85 c0		 test	 eax, eax
  0001b	75 0a		 jne	 SHORT $LN2@shopGetTab

; 397  : 		return Py_BuildException();

  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00024	59		 pop	 ecx
  00025	eb 24		 jmp	 SHORT $LN1@shopGetTab
$LN2@shopGetTab:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 38   : 		return (*ms_singleton);

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  0002c	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 399  : 	return Py_BuildValue("i", CPythonShop::instance().GetTabCoinType(bTabIdx));

  0002f	ff 75 fc	 push	 DWORD PTR _bTabIdx$[ebp]
  00032	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00035	e8 00 00 00 00	 call	 ?GetTabCoinType@CPythonShop@@QAEEE@Z ; CPythonShop::GetTabCoinType
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00049	59		 pop	 ecx
  0004a	59		 pop	 ecx
$LN1@shopGetTab:

; 400  : }

  0004b	c9		 leave
  0004c	c3		 ret	 0
?shopGetTabCoinType@@YAPAU_object@@PAU1@0@Z ENDP	; shopGetTabCoinType
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopGetTabName@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_bTabIdx$ = -4						; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopGetTabName@@YAPAU_object@@PAU1@0@Z PROC		; shopGetTabName, COMDAT

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 386  : 	BYTE bTabIdx;
; 387  : 	if (!PyTuple_GetInteger(poArgs, 0, &bTabIdx))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _bTabIdx$[ebp]
  00008	50		 push	 eax
  00009	6a 00		 push	 0
  0000b	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000e	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z ; PyTuple_GetInteger
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	0f b6 c0	 movzx	 eax, al
  00019	85 c0		 test	 eax, eax
  0001b	75 0a		 jne	 SHORT $LN2@shopGetTab

; 388  : 		return Py_BuildException();

  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00024	59		 pop	 ecx
  00025	eb 21		 jmp	 SHORT $LN1@shopGetTab
$LN2@shopGetTab:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 38   : 		return (*ms_singleton);

  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  0002c	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 390  : 	return Py_BuildValue("s", CPythonShop::instance().GetTabName(bTabIdx));

  0002f	ff 75 fc	 push	 DWORD PTR _bTabIdx$[ebp]
  00032	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00035	e8 00 00 00 00	 call	 ?GetTabName@CPythonShop@@QAEPBDE@Z ; CPythonShop::GetTabName
  0003a	50		 push	 eax
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_01LKDEMHDF@s@
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00046	59		 pop	 ecx
  00047	59		 pop	 ecx
$LN1@shopGetTab:

; 391  : }

  00048	c9		 leave
  00049	c3		 ret	 0
?shopGetTabName@@YAPAU_object@@PAU1@0@Z ENDP		; shopGetTabName
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopGetTabCount@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -1						; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopGetTabCount@@YAPAU_object@@PAU1@0@Z PROC		; shopGetTabCount, COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 38   : 		return (*ms_singleton);

  00005	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  0000a	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.h

; 35   : 		BYTE GetTabCount() { return m_bTabCount; }

  0000d	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00010	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  00013	88 45 ff	 mov	 BYTE PTR $T2[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 381  : 	return Py_BuildValue("i", CPythonShop::instance().GetTabCount());

  00016	0f b6 45 ff	 movzx	 eax, BYTE PTR $T2[ebp]
  0001a	50		 push	 eax
  0001b	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00026	59		 pop	 ecx
  00027	59		 pop	 ecx

; 382  : }

  00028	c9		 leave
  00029	c3		 ret	 0
?shopGetTabCount@@YAPAU_object@@PAU1@0@Z ENDP		; shopGetTabCount
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopBuildPrivateShop@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_szName$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopBuildPrivateShop@@YAPAU_object@@PAU1@0@Z PROC	; shopBuildPrivateShop, COMDAT

; 370  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 371  : 	char * szName;
; 372  : 	if (!PyTuple_GetString(poArgs, 0, &szName))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _szName$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	0f b6 c0	 movzx	 eax, al
  00018	85 c0		 test	 eax, eax
  0001a	75 0a		 jne	 SHORT $LN4@shopBuildP

; 373  : 		return Py_BuildException();

  0001c	6a 00		 push	 0
  0001e	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00023	59		 pop	 ecx
  00024	eb 13		 jmp	 SHORT $LN1@shopBuildP
$LN4@shopBuildP:

; 374  : 
; 375  : 	CPythonShop::Instance().BuildPrivateShop(szName);

  00026	ff 75 fc	 push	 DWORD PTR _szName$[ebp]
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  0002f	e8 00 00 00 00	 call	 ?BuildPrivateShop@CPythonShop@@QAEXPBD@Z ; CPythonShop::BuildPrivateShop

; 376  : 	return Py_BuildNone();

  00034	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
$LN1@shopBuildP:

; 377  : }

  00039	c9		 leave
  0003a	c3		 ret	 0
?shopBuildPrivateShop@@YAPAU_object@@PAU1@0@Z ENDP	; shopBuildPrivateShop
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopGetPrivateShopItemPrice@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iValue$ = -28						; size = 4
$T1 = -24						; size = 4
$T2 = -19						; size = 3
__cell$ = -16						; size = 2
_wItemSlotIndex$ = -12					; size = 2
__window_type$ = -8					; size = 1
_bItemWindowType$ = -1					; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopGetPrivateShopItemPrice@@YAPAU_object@@PAU1@0@Z PROC ; shopGetPrivateShopItemPrice, COMDAT

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 359  : 	BYTE bItemWindowType;
; 360  : 	if (!PyTuple_GetInteger(poArgs, 0, &bItemWindowType))

  00006	8d 45 ff	 lea	 eax, DWORD PTR _bItemWindowType$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	75 0a		 jne	 SHORT $LN2@shopGetPri

; 361  : 		return Py_BuildException();

  0001e	6a 00		 push	 0
  00020	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00025	59		 pop	 ecx
  00026	eb 71		 jmp	 SHORT $LN1@shopGetPri
$LN2@shopGetPri:

; 362  : 	WORD wItemSlotIndex;
; 363  : 	if (!PyTuple_GetInteger(poArgs, 1, &wItemSlotIndex))

  00028	8d 45 f4	 lea	 eax, DWORD PTR _wItemSlotIndex$[ebp]
  0002b	50		 push	 eax
  0002c	6a 01		 push	 1
  0002e	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00031	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z ; PyTuple_GetInteger
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	0f b6 c0	 movzx	 eax, al
  0003c	85 c0		 test	 eax, eax
  0003e	75 0a		 jne	 SHORT $LN3@shopGetPri

; 364  : 		return Py_BuildException();

  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00047	59		 pop	 ecx
  00048	eb 4f		 jmp	 SHORT $LN1@shopGetPri
$LN3@shopGetPri:

; 366  : 	int iValue = CPythonShop::Instance().GetPrivateShopItemPrice(TItemPos(bItemWindowType, wItemSlotIndex));

  0004a	66 8b 45 f4	 mov	 ax, WORD PTR _wItemSlotIndex$[ebp]
  0004e	66 89 45 f0	 mov	 WORD PTR __cell$[ebp], ax
  00052	8a 45 ff	 mov	 al, BYTE PTR _bItemWindowType$[ebp]
  00055	88 45 f8	 mov	 BYTE PTR __window_type$[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h

; 191  :         window_type = _window_type;

  00058	8a 45 f8	 mov	 al, BYTE PTR __window_type$[ebp]
  0005b	88 45 ed	 mov	 BYTE PTR $T2[ebp], al

; 192  :         cell = _cell;

  0005e	66 8b 45 f0	 mov	 ax, WORD PTR __cell$[ebp]
  00062	66 89 45 ee	 mov	 WORD PTR $T2[ebp+1], ax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  0006b	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 366  : 	int iValue = CPythonShop::Instance().GetPrivateShopItemPrice(TItemPos(bItemWindowType, wItemSlotIndex));

  0006e	51		 push	 ecx
  0006f	8b c4		 mov	 eax, esp
  00071	66 8b 4d ed	 mov	 cx, WORD PTR $T2[ebp]
  00075	66 89 08	 mov	 WORD PTR [eax], cx
  00078	8a 4d ef	 mov	 cl, BYTE PTR $T2[ebp+2]
  0007b	88 48 02	 mov	 BYTE PTR [eax+2], cl
  0007e	8b 4d e8	 mov	 ecx, DWORD PTR $T1[ebp]
  00081	e8 00 00 00 00	 call	 ?GetPrivateShopItemPrice@CPythonShop@@QAEHUSItemPos@@@Z ; CPythonShop::GetPrivateShopItemPrice
  00086	89 45 e4	 mov	 DWORD PTR _iValue$[ebp], eax

; 367  : 	return Py_BuildValue("i", iValue);

  00089	ff 75 e4	 push	 DWORD PTR _iValue$[ebp]
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00097	59		 pop	 ecx
  00098	59		 pop	 ecx
$LN1@shopGetPri:

; 368  : }

  00099	c9		 leave
  0009a	c3		 ret	 0
?shopGetPrivateShopItemPrice@@YAPAU_object@@PAU1@0@Z ENDP ; shopGetPrivateShopItemPrice
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopDelPrivateShopItemStock@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
$T1 = -19						; size = 3
__cell$ = -16						; size = 2
_wItemSlotIndex$ = -12					; size = 2
__window_type$ = -8					; size = 1
_bItemWindowType$ = -1					; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopDelPrivateShopItemStock@@YAPAU_object@@PAU1@0@Z PROC ; shopDelPrivateShopItemStock, COMDAT

; 346  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 347  : 	BYTE bItemWindowType;
; 348  : 	if (!PyTuple_GetInteger(poArgs, 0, &bItemWindowType))

  00006	8d 45 ff	 lea	 eax, DWORD PTR _bItemWindowType$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	75 0a		 jne	 SHORT $LN2@shopDelPri

; 349  : 		return Py_BuildException();

  0001e	6a 00		 push	 0
  00020	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00025	59		 pop	 ecx
  00026	eb 5e		 jmp	 SHORT $LN1@shopDelPri
$LN2@shopDelPri:

; 350  : 	WORD wItemSlotIndex;
; 351  : 	if (!PyTuple_GetInteger(poArgs, 1, &wItemSlotIndex))

  00028	8d 45 f4	 lea	 eax, DWORD PTR _wItemSlotIndex$[ebp]
  0002b	50		 push	 eax
  0002c	6a 01		 push	 1
  0002e	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00031	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z ; PyTuple_GetInteger
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	0f b6 c0	 movzx	 eax, al
  0003c	85 c0		 test	 eax, eax
  0003e	75 0a		 jne	 SHORT $LN3@shopDelPri

; 352  : 		return Py_BuildException();

  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00047	59		 pop	 ecx
  00048	eb 3c		 jmp	 SHORT $LN1@shopDelPri
$LN3@shopDelPri:

; 354  : 	CPythonShop::Instance().DelPrivateShopItemStock(TItemPos(bItemWindowType, wItemSlotIndex));

  0004a	66 8b 45 f4	 mov	 ax, WORD PTR _wItemSlotIndex$[ebp]
  0004e	66 89 45 f0	 mov	 WORD PTR __cell$[ebp], ax
  00052	8a 45 ff	 mov	 al, BYTE PTR _bItemWindowType$[ebp]
  00055	88 45 f8	 mov	 BYTE PTR __window_type$[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h

; 191  :         window_type = _window_type;

  00058	8a 45 f8	 mov	 al, BYTE PTR __window_type$[ebp]
  0005b	88 45 ed	 mov	 BYTE PTR $T1[ebp], al

; 192  :         cell = _cell;

  0005e	66 8b 45 f0	 mov	 ax, WORD PTR __cell$[ebp]
  00062	66 89 45 ee	 mov	 WORD PTR $T1[ebp+1], ax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 354  : 	CPythonShop::Instance().DelPrivateShopItemStock(TItemPos(bItemWindowType, wItemSlotIndex));

  00066	51		 push	 ecx
  00067	8b c4		 mov	 eax, esp
  00069	66 8b 4d ed	 mov	 cx, WORD PTR $T1[ebp]
  0006d	66 89 08	 mov	 WORD PTR [eax], cx
  00070	8a 4d ef	 mov	 cl, BYTE PTR $T1[ebp+2]
  00073	88 48 02	 mov	 BYTE PTR [eax+2], cl
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  0007c	e8 00 00 00 00	 call	 ?DelPrivateShopItemStock@CPythonShop@@QAEXUSItemPos@@@Z ; CPythonShop::DelPrivateShopItemStock

; 355  : 	return Py_BuildNone();

  00081	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
$LN1@shopDelPri:

; 356  : }

  00086	c9		 leave
  00087	c3		 ret	 0
?shopDelPrivateShopItemStock@@YAPAU_object@@PAU1@0@Z ENDP ; shopDelPrivateShopItemStock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopAddPrivateShopItemStock@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iDisplaySlotIndex$ = -28				; size = 4
_iPrice$ = -24						; size = 4
$T1 = -19						; size = 3
__cell$ = -16						; size = 2
_wItemSlotIndex$ = -12					; size = 2
__window_type$ = -8					; size = 1
_bItemWindowType$ = -1					; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopAddPrivateShopItemStock@@YAPAU_object@@PAU1@0@Z PROC ; shopAddPrivateShopItemStock, COMDAT

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 329  : 	BYTE bItemWindowType;
; 330  : 	if (!PyTuple_GetInteger(poArgs, 0, &bItemWindowType))

  00006	8d 45 ff	 lea	 eax, DWORD PTR _bItemWindowType$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	75 0d		 jne	 SHORT $LN2@shopAddPri

; 331  : 		return Py_BuildException();

  0001e	6a 00		 push	 0
  00020	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00025	59		 pop	 ecx
  00026	e9 ab 00 00 00	 jmp	 $LN1@shopAddPri
$LN2@shopAddPri:

; 332  : 	WORD wItemSlotIndex;
; 333  : 	if (!PyTuple_GetInteger(poArgs, 1, &wItemSlotIndex))

  0002b	8d 45 f4	 lea	 eax, DWORD PTR _wItemSlotIndex$[ebp]
  0002e	50		 push	 eax
  0002f	6a 01		 push	 1
  00031	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00034	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z ; PyTuple_GetInteger
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	85 c0		 test	 eax, eax
  00041	75 0d		 jne	 SHORT $LN3@shopAddPri

; 334  : 		return Py_BuildException();

  00043	6a 00		 push	 0
  00045	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  0004a	59		 pop	 ecx
  0004b	e9 86 00 00 00	 jmp	 $LN1@shopAddPri
$LN3@shopAddPri:

; 335  : 	int iDisplaySlotIndex;
; 336  : 	if (!PyTuple_GetInteger(poArgs, 2, &iDisplaySlotIndex))

  00050	8d 45 e4	 lea	 eax, DWORD PTR _iDisplaySlotIndex$[ebp]
  00053	50		 push	 eax
  00054	6a 02		 push	 2
  00056	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00059	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	0f b6 c0	 movzx	 eax, al
  00064	85 c0		 test	 eax, eax
  00066	75 0a		 jne	 SHORT $LN4@shopAddPri

; 337  : 		return Py_BuildException();

  00068	6a 00		 push	 0
  0006a	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  0006f	59		 pop	 ecx
  00070	eb 64		 jmp	 SHORT $LN1@shopAddPri
$LN4@shopAddPri:

; 338  : 	int iPrice;
; 339  : 	if (!PyTuple_GetInteger(poArgs, 3, &iPrice))

  00072	8d 45 e8	 lea	 eax, DWORD PTR _iPrice$[ebp]
  00075	50		 push	 eax
  00076	6a 03		 push	 3
  00078	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0007b	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00080	83 c4 0c	 add	 esp, 12			; 0000000cH
  00083	0f b6 c0	 movzx	 eax, al
  00086	85 c0		 test	 eax, eax
  00088	75 0a		 jne	 SHORT $LN5@shopAddPri

; 340  : 		return Py_BuildException();

  0008a	6a 00		 push	 0
  0008c	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00091	59		 pop	 ecx
  00092	eb 42		 jmp	 SHORT $LN1@shopAddPri
$LN5@shopAddPri:

; 342  : 	CPythonShop::Instance().AddPrivateShopItemStock(TItemPos(bItemWindowType, wItemSlotIndex), iDisplaySlotIndex, iPrice);

  00094	66 8b 45 f4	 mov	 ax, WORD PTR _wItemSlotIndex$[ebp]
  00098	66 89 45 f0	 mov	 WORD PTR __cell$[ebp], ax
  0009c	8a 45 ff	 mov	 al, BYTE PTR _bItemWindowType$[ebp]
  0009f	88 45 f8	 mov	 BYTE PTR __window_type$[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h

; 191  :         window_type = _window_type;

  000a2	8a 45 f8	 mov	 al, BYTE PTR __window_type$[ebp]
  000a5	88 45 ed	 mov	 BYTE PTR $T1[ebp], al

; 192  :         cell = _cell;

  000a8	66 8b 45 f0	 mov	 ax, WORD PTR __cell$[ebp]
  000ac	66 89 45 ee	 mov	 WORD PTR $T1[ebp+1], ax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 342  : 	CPythonShop::Instance().AddPrivateShopItemStock(TItemPos(bItemWindowType, wItemSlotIndex), iDisplaySlotIndex, iPrice);

  000b0	ff 75 e8	 push	 DWORD PTR _iPrice$[ebp]
  000b3	ff 75 e4	 push	 DWORD PTR _iDisplaySlotIndex$[ebp]
  000b6	51		 push	 ecx
  000b7	8b c4		 mov	 eax, esp
  000b9	66 8b 4d ed	 mov	 cx, WORD PTR $T1[ebp]
  000bd	66 89 08	 mov	 WORD PTR [eax], cx
  000c0	8a 4d ef	 mov	 cl, BYTE PTR $T1[ebp+2]
  000c3	88 48 02	 mov	 BYTE PTR [eax+2], cl
  000c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  000cc	e8 00 00 00 00	 call	 ?AddPrivateShopItemStock@CPythonShop@@QAEXUSItemPos@@EK@Z ; CPythonShop::AddPrivateShopItemStock

; 343  : 	return Py_BuildNone();

  000d1	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
$LN1@shopAddPri:

; 344  : }

  000d6	c9		 leave
  000d7	c3		 ret	 0
?shopAddPrivateShopItemStock@@YAPAU_object@@PAU1@0@Z ENDP ; shopAddPrivateShopItemStock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopClearPrivateShopStock@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopClearPrivateShopStock@@YAPAU_object@@PAU1@0@Z PROC	; shopClearPrivateShopStock, COMDAT

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 324  : 	CPythonShop::Instance().ClearPrivateShopStock();

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  00009	e8 00 00 00 00	 call	 ?ClearPrivateShopStock@CPythonShop@@QAEXXZ ; CPythonShop::ClearPrivateShopStock

; 325  : 	return Py_BuildNone();

  0000e	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 326  : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?shopClearPrivateShopStock@@YAPAU_object@@PAU1@0@Z ENDP	; shopClearPrivateShopStock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopGetItemAttribute@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
_iIndex$ = -12						; size = 4
_c_pItemData$2 = -8					; size = 4
_iAttrSlotIndex$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopGetItemAttribute@@YAPAU_object@@PAU1@0@Z PROC	; shopGetItemAttribute, COMDAT

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 305  : 	int iIndex;
; 306  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 f4	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	75 0d		 jne	 SHORT $LN2@shopGetIte

; 307  : 		return Py_BuildException();

  0001e	6a 00		 push	 0
  00020	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00025	59		 pop	 ecx
  00026	e9 85 00 00 00	 jmp	 $LN1@shopGetIte
$LN2@shopGetIte:

; 308  : 	int iAttrSlotIndex;
; 309  : 	if (!PyTuple_GetInteger(poArgs, 1, &iAttrSlotIndex))

  0002b	8d 45 fc	 lea	 eax, DWORD PTR _iAttrSlotIndex$[ebp]
  0002e	50		 push	 eax
  0002f	6a 01		 push	 1
  00031	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00034	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	85 c0		 test	 eax, eax
  00041	75 0a		 jne	 SHORT $LN3@shopGetIte

; 310  : 		return Py_BuildException();

  00043	6a 00		 push	 0
  00045	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  0004a	59		 pop	 ecx
  0004b	eb 63		 jmp	 SHORT $LN1@shopGetIte
$LN3@shopGetIte:

; 311  : 
; 312  : 	if (iAttrSlotIndex >= 0 && iAttrSlotIndex < ITEM_ATTRIBUTE_SLOT_MAX_NUM)

  0004d	83 7d fc 00	 cmp	 DWORD PTR _iAttrSlotIndex$[ebp], 0
  00051	7c 4b		 jl	 SHORT $LN4@shopGetIte
  00053	83 7d fc 07	 cmp	 DWORD PTR _iAttrSlotIndex$[ebp], 7
  00057	7d 45		 jge	 SHORT $LN4@shopGetIte
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  0005e	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 315  : 		if (CPythonShop::Instance().GetItemData(iIndex, &c_pItemData))

  00061	8d 45 f8	 lea	 eax, DWORD PTR _c_pItemData$2[ebp]
  00064	50		 push	 eax
  00065	ff 75 f4	 push	 DWORD PTR _iIndex$[ebp]
  00068	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  0006b	e8 00 00 00 00	 call	 ?GetItemData@CPythonShop@@QAEHKPAPBUpacket_shop_item@@@Z ; CPythonShop::GetItemData
  00070	85 c0		 test	 eax, eax
  00072	74 2a		 je	 SHORT $LN4@shopGetIte

; 316  : 			return Py_BuildValue("ii", c_pItemData->aAttr[iAttrSlotIndex].bType, c_pItemData->aAttr[iAttrSlotIndex].sValue);

  00074	6b 45 fc 03	 imul	 eax, DWORD PTR _iAttrSlotIndex$[ebp], 3
  00078	8b 4d f8	 mov	 ecx, DWORD PTR _c_pItemData$2[ebp]
  0007b	0f bf 44 01 17	 movsx	 eax, WORD PTR [ecx+eax+23]
  00080	50		 push	 eax
  00081	6b 45 fc 03	 imul	 eax, DWORD PTR _iAttrSlotIndex$[ebp], 3
  00085	8b 4d f8	 mov	 ecx, DWORD PTR _c_pItemData$2[ebp]
  00088	0f b6 44 01 16	 movzx	 eax, BYTE PTR [ecx+eax+22]
  0008d	50		 push	 eax
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_02PDIHAGKM@ii@
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00099	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009c	eb 12		 jmp	 SHORT $LN1@shopGetIte
$LN4@shopGetIte:

; 317  : 	}
; 318  : 
; 319  : 	return Py_BuildValue("ii", 0, 0);

  0009e	6a 00		 push	 0
  000a0	6a 00		 push	 0
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_02PDIHAGKM@ii@
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@shopGetIte:

; 320  : }

  000b0	c9		 leave
  000b1	c3		 ret	 0
?shopGetItemAttribute@@YAPAU_object@@PAU1@0@Z ENDP	; shopGetItemAttribute
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_c_pItemData$ = -16					; size = 4
_iMetinSocketIndex$ = -12				; size = 4
$T1 = -8						; size = 4
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z PROC	; shopGetItemMetinSocket, COMDAT

; 288  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 289  : 	int iIndex;
; 290  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	75 0a		 jne	 SHORT $LN2@shopGetIte

; 291  : 		return Py_BuildException();

  0001e	6a 00		 push	 0
  00020	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00025	59		 pop	 ecx
  00026	eb 65		 jmp	 SHORT $LN1@shopGetIte
$LN2@shopGetIte:

; 292  : 	int iMetinSocketIndex;
; 293  : 	if (!PyTuple_GetInteger(poArgs, 1, &iMetinSocketIndex))

  00028	8d 45 f4	 lea	 eax, DWORD PTR _iMetinSocketIndex$[ebp]
  0002b	50		 push	 eax
  0002c	6a 01		 push	 1
  0002e	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00031	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	0f b6 c0	 movzx	 eax, al
  0003c	85 c0		 test	 eax, eax
  0003e	75 0a		 jne	 SHORT $LN3@shopGetIte

; 294  : 		return Py_BuildException();

  00040	6a 00		 push	 0
  00042	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00047	59		 pop	 ecx
  00048	eb 43		 jmp	 SHORT $LN1@shopGetIte
$LN3@shopGetIte:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  0004f	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 297  : 	if (CPythonShop::Instance().GetItemData(iIndex, &c_pItemData))

  00052	8d 45 f0	 lea	 eax, DWORD PTR _c_pItemData$[ebp]
  00055	50		 push	 eax
  00056	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  00059	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0005c	e8 00 00 00 00	 call	 ?GetItemData@CPythonShop@@QAEHKPAPBUpacket_shop_item@@@Z ; CPythonShop::GetItemData
  00061	85 c0		 test	 eax, eax
  00063	74 19		 je	 SHORT $LN4@shopGetIte

; 298  : 		return Py_BuildValue("i", c_pItemData->alSockets[iMetinSocketIndex]);

  00065	8b 45 f4	 mov	 eax, DWORD PTR _iMetinSocketIndex$[ebp]
  00068	8b 4d f0	 mov	 ecx, DWORD PTR _c_pItemData$[ebp]
  0006b	ff 74 81 0a	 push	 DWORD PTR [ecx+eax*4+10]
  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0007a	59		 pop	 ecx
  0007b	59		 pop	 ecx
  0007c	eb 0f		 jmp	 SHORT $LN1@shopGetIte
$LN4@shopGetIte:

; 299  : 
; 300  : 	return Py_BuildValue("i", 0);

  0007e	6a 00		 push	 0
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00085	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0008b	59		 pop	 ecx
  0008c	59		 pop	 ecx
$LN1@shopGetIte:

; 301  : }

  0008d	c9		 leave
  0008e	c3		 ret	 0
?shopGetItemMetinSocket@@YAPAU_object@@PAU1@0@Z ENDP	; shopGetItemMetinSocket
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopGetItemPrice@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_c_pItemData$ = -12					; size = 4
$T1 = -8						; size = 4
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopGetItemPrice@@YAPAU_object@@PAU1@0@Z PROC		; shopGetItemPrice, COMDAT

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 276  : 	int iIndex;
; 277  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	75 0a		 jne	 SHORT $LN2@shopGetIte

; 278  : 		return Py_BuildException();

  0001e	6a 00		 push	 0
  00020	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00025	59		 pop	 ecx
  00026	eb 3f		 jmp	 SHORT $LN1@shopGetIte
$LN2@shopGetIte:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  0002d	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 281  : 	if (CPythonShop::Instance().GetItemData(iIndex, &c_pItemData))

  00030	8d 45 f4	 lea	 eax, DWORD PTR _c_pItemData$[ebp]
  00033	50		 push	 eax
  00034	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  00037	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003a	e8 00 00 00 00	 call	 ?GetItemData@CPythonShop@@QAEHKPAPBUpacket_shop_item@@@Z ; CPythonShop::GetItemData
  0003f	85 c0		 test	 eax, eax
  00041	74 15		 je	 SHORT $LN3@shopGetIte

; 282  : 		return Py_BuildValue("i", c_pItemData->price);

  00043	8b 45 f4	 mov	 eax, DWORD PTR _c_pItemData$[ebp]
  00046	ff 70 04	 push	 DWORD PTR [eax+4]
  00049	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  0004e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00054	59		 pop	 ecx
  00055	59		 pop	 ecx
  00056	eb 0f		 jmp	 SHORT $LN1@shopGetIte
$LN3@shopGetIte:

; 283  : 
; 284  : 	return Py_BuildValue("i", 0);

  00058	6a 00		 push	 0
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00065	59		 pop	 ecx
  00066	59		 pop	 ecx
$LN1@shopGetIte:

; 285  : }

  00067	c9		 leave
  00068	c3		 ret	 0
?shopGetItemPrice@@YAPAU_object@@PAU1@0@Z ENDP		; shopGetItemPrice
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopGetItemCount@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_c_pItemData$ = -12					; size = 4
$T1 = -8						; size = 4
_iIndex$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopGetItemCount@@YAPAU_object@@PAU1@0@Z PROC		; shopGetItemCount, COMDAT

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 263  : 	int iIndex;
; 264  : 	if (!PyTuple_GetInteger(poArgs, 0, &iIndex))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _iIndex$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	75 0a		 jne	 SHORT $LN2@shopGetIte

; 265  : 		return Py_BuildException();

  0001e	6a 00		 push	 0
  00020	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00025	59		 pop	 ecx
  00026	eb 41		 jmp	 SHORT $LN1@shopGetIte
$LN2@shopGetIte:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  0002d	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 268  : 	if (CPythonShop::Instance().GetItemData(iIndex, &c_pItemData))

  00030	8d 45 f4	 lea	 eax, DWORD PTR _c_pItemData$[ebp]
  00033	50		 push	 eax
  00034	ff 75 fc	 push	 DWORD PTR _iIndex$[ebp]
  00037	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003a	e8 00 00 00 00	 call	 ?GetItemData@CPythonShop@@QAEHKPAPBUpacket_shop_item@@@Z ; CPythonShop::GetItemData
  0003f	85 c0		 test	 eax, eax
  00041	74 17		 je	 SHORT $LN3@shopGetIte

; 269  : 		return Py_BuildValue("i", c_pItemData->count);

  00043	8b 45 f4	 mov	 eax, DWORD PTR _c_pItemData$[ebp]
  00046	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  0004a	50		 push	 eax
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00056	59		 pop	 ecx
  00057	59		 pop	 ecx
  00058	eb 0f		 jmp	 SHORT $LN1@shopGetIte
$LN3@shopGetIte:

; 270  : 
; 271  : 	return Py_BuildValue("i", 0);

  0005a	6a 00		 push	 0
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00067	59		 pop	 ecx
  00068	59		 pop	 ecx
$LN1@shopGetIte:

; 272  : }

  00069	c9		 leave
  0006a	c3		 ret	 0
?shopGetItemCount@@YAPAU_object@@PAU1@0@Z ENDP		; shopGetItemCount
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopGetItemID@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_c_pItemData$ = -12					; size = 4
$T1 = -8						; size = 4
_nPos$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopGetItemID@@YAPAU_object@@PAU1@0@Z PROC		; shopGetItemID, COMDAT

; 249  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 250  : 	int nPos;
; 251  : 	if (!PyTuple_GetInteger(poArgs, 0, &nPos))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _nPos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	75 0a		 jne	 SHORT $LN2@shopGetIte

; 252  : 		return Py_BuildException();

  0001e	6a 00		 push	 0
  00020	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00025	59		 pop	 ecx
  00026	eb 3e		 jmp	 SHORT $LN1@shopGetIte
$LN2@shopGetIte:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 27   : 		return (*ms_singleton);

  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  0002d	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 255  : 	if (CPythonShop::Instance().GetItemData(nPos, &c_pItemData))

  00030	8d 45 f4	 lea	 eax, DWORD PTR _c_pItemData$[ebp]
  00033	50		 push	 eax
  00034	ff 75 fc	 push	 DWORD PTR _nPos$[ebp]
  00037	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003a	e8 00 00 00 00	 call	 ?GetItemData@CPythonShop@@QAEHKPAPBUpacket_shop_item@@@Z ; CPythonShop::GetItemData
  0003f	85 c0		 test	 eax, eax
  00041	74 14		 je	 SHORT $LN3@shopGetIte

; 256  : 		return Py_BuildValue("i", c_pItemData->vnum);

  00043	8b 45 f4	 mov	 eax, DWORD PTR _c_pItemData$[ebp]
  00046	ff 30		 push	 DWORD PTR [eax]
  00048	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00053	59		 pop	 ecx
  00054	59		 pop	 ecx
  00055	eb 0f		 jmp	 SHORT $LN1@shopGetIte
$LN3@shopGetIte:

; 257  : 
; 258  : 	return Py_BuildValue("i", 0);

  00057	6a 00		 push	 0
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00064	59		 pop	 ecx
  00065	59		 pop	 ecx
$LN1@shopGetIte:

; 259  : }

  00066	c9		 leave
  00067	c3		 ret	 0
?shopGetItemID@@YAPAU_object@@PAU1@0@Z ENDP		; shopGetItemID
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopIsMainPlayerPrivateShop@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_rkShop$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopIsMainPlayerPrivateShop@@YAPAU_object@@PAU1@0@Z PROC ; shopIsMainPlayerPrivateShop, COMDAT

; 243  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 244  : 	CPythonShop& rkShop=CPythonShop::Instance();

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  00009	89 45 fc	 mov	 DWORD PTR _rkShop$[ebp], eax

; 245  : 	return Py_BuildValue("i", rkShop.IsMainPlayerPrivateShop());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _rkShop$[ebp]
  0000f	e8 00 00 00 00	 call	 ?IsMainPlayerPrivateShop@CPythonShop@@QAEHXZ ; CPythonShop::IsMainPlayerPrivateShop
  00014	50		 push	 eax
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00020	59		 pop	 ecx
  00021	59		 pop	 ecx

; 246  : }

  00022	c9		 leave
  00023	c3		 ret	 0
?shopIsMainPlayerPrivateShop@@YAPAU_object@@PAU1@0@Z ENDP ; shopIsMainPlayerPrivateShop
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopIsPrviateShop@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_rkShop$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopIsPrviateShop@@YAPAU_object@@PAU1@0@Z PROC		; shopIsPrviateShop, COMDAT

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 238  : 	CPythonShop& rkShop=CPythonShop::Instance();

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  00009	89 45 fc	 mov	 DWORD PTR _rkShop$[ebp], eax

; 239  : 	return Py_BuildValue("i", rkShop.IsPrivateShop());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _rkShop$[ebp]
  0000f	e8 00 00 00 00	 call	 ?IsPrivateShop@CPythonShop@@QAEHXZ ; CPythonShop::IsPrivateShop
  00014	50		 push	 eax
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00020	59		 pop	 ecx
  00021	59		 pop	 ecx

; 240  : }

  00022	c9		 leave
  00023	c3		 ret	 0
?shopIsPrviateShop@@YAPAU_object@@PAU1@0@Z ENDP		; shopIsPrviateShop
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopIsOpen@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_rkShop$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopIsOpen@@YAPAU_object@@PAU1@0@Z PROC		; shopIsOpen, COMDAT

; 231  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 232  : 	CPythonShop& rkShop=CPythonShop::Instance();

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  00009	89 45 fc	 mov	 DWORD PTR _rkShop$[ebp], eax

; 233  : 	return Py_BuildValue("i", rkShop.IsOpen());

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _rkShop$[ebp]
  0000f	e8 00 00 00 00	 call	 ?IsOpen@CPythonShop@@QAEHXZ ; CPythonShop::IsOpen
  00014	50		 push	 eax
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00020	59		 pop	 ecx
  00021	59		 pop	 ecx

; 234  : }

  00022	c9		 leave
  00023	c3		 ret	 0
?shopIsOpen@@YAPAU_object@@PAU1@0@Z ENDP		; shopIsOpen
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopClose@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_rkShop$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopClose@@YAPAU_object@@PAU1@0@Z PROC			; shopClose, COMDAT

; 224  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 225  : 	CPythonShop& rkShop=CPythonShop::Instance();

  00004	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  00009	89 45 fc	 mov	 DWORD PTR _rkShop$[ebp], eax

; 226  : 	rkShop.Close();

  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _rkShop$[ebp]
  0000f	e8 00 00 00 00	 call	 ?Close@CPythonShop@@QAEXXZ ; CPythonShop::Close

; 227  : 	return Py_BuildNone();

  00014	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 228  : }

  00019	c9		 leave
  0001a	c3		 ret	 0
?shopClose@@YAPAU_object@@PAU1@0@Z ENDP			; shopClose
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?shopOpen@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_rkShop$ = -12						; size = 4
_isPrivateShop$ = -8					; size = 4
_isMainPrivateShop$ = -4				; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?shopOpen@@YAPAU_object@@PAU1@0@Z PROC			; shopOpen, COMDAT

; 212  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 213  : 	int isPrivateShop = false;

  00006	83 65 f8 00	 and	 DWORD PTR _isPrivateShop$[ebp], 0

; 214  : 	PyTuple_GetInteger(poArgs, 0, &isPrivateShop);

  0000a	8d 45 f8	 lea	 eax, DWORD PTR _isPrivateShop$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00013	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 215  : 	int isMainPrivateShop = false;

  0001b	83 65 fc 00	 and	 DWORD PTR _isMainPrivateShop$[ebp], 0

; 216  : 	PyTuple_GetInteger(poArgs, 1, &isMainPrivateShop);

  0001f	8d 45 fc	 lea	 eax, DWORD PTR _isMainPrivateShop$[ebp]
  00022	50		 push	 eax
  00023	6a 01		 push	 1
  00025	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00028	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 217  : 
; 218  : 	CPythonShop& rkShop=CPythonShop::Instance();

  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A ; CSingleton<CPythonShop>::ms_singleton
  00035	89 45 f4	 mov	 DWORD PTR _rkShop$[ebp], eax

; 219  : 	rkShop.Open(isPrivateShop, isMainPrivateShop);

  00038	ff 75 fc	 push	 DWORD PTR _isMainPrivateShop$[ebp]
  0003b	ff 75 f8	 push	 DWORD PTR _isPrivateShop$[ebp]
  0003e	8b 4d f4	 mov	 ecx, DWORD PTR _rkShop$[ebp]
  00041	e8 00 00 00 00	 call	 ?Open@CPythonShop@@QAEXHH@Z ; CPythonShop::Open

; 220  : 	return Py_BuildNone();

  00046	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 221  : }

  0004b	c9		 leave
  0004c	c3		 ret	 0
?shopOpen@@YAPAU_object@@PAU1@0@Z ENDP			; shopOpen
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@USShopItemTable@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@USShopItemTable@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SShopItemTable> >::_Vector_val<std::_Simple_types<SShopItemTable> >, COMDAT
; _this$ = ecx

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 20 00	 and	 DWORD PTR [eax], 0
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 60 08 00	 and	 DWORD PTR [eax+8], 0
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@USShopItemTable@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SShopItemTable> >::_Vector_val<std::_Simple_types<SShopItemTable> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Getal@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEAAV?$allocator@USShopItemTable@@@2@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Getal@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEAAV?$allocator@USShopItemTable@@@2@XZ PROC ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Getal, COMDAT
; _this$ = ecx

; 1732 :     _Alty& _Getal() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000b	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000e	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 1734 :     }

  00011	c9		 leave
  00012	c3		 ret	 0
?_Getal@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEAAV?$allocator@USShopItemTable@@@2@XZ ENDP ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@CAXXZ PROC ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 :         _Xlength_error("vector too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@CAXXZ ENDP ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
?_Tidy@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXXZ PROC ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1687 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();
; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 75		 je	 SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USShopItemTable@@@std@@@std@@YAXPAUSShopItemTable@@QAU1@AAV?$allocator@USShopItemTable@@@0@@Z ; std::_Destroy_range<std::allocator<SShopItemTable> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 0d		 push	 13			; 0000000dH
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	6b 45 d4 0d	 imul	 eax, DWORD PTR __Count$[ebp], 13
  00087	50		 push	 eax
  00088	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	59		 pop	 ecx
  00091	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00092	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00095	83 20 00	 and	 DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

  00098	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0009b	83 20 00	 and	 DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

  0009e	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a1	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

  000a4	c9		 leave
  000a5	c3		 ret	 0
?_Tidy@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXXZ ENDP ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXQAUSShopItemTable@@II@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXQAUSShopItemTable@@II@Z PROC ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();
; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 63		 je	 SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USShopItemTable@@@std@@@std@@YAXPAUSShopItemTable@@QAU1@AAV?$allocator@USShopItemTable@@@0@@Z ; std::_Destroy_range<std::allocator<SShopItemTable> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 0d		 push	 13			; 0000000dH
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	6b 45 d4 0d	 imul	 eax, DWORD PTR __Count$[ebp], 13
  00087	50		 push	 eax
  00088	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	59		 pop	 ecx
  00091	59		 pop	 ecx
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  00092	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00098	89 08		 mov	 DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  0009a	6b 45 0c 0d	 imul	 eax, DWORD PTR __Newsize$[ebp], 13
  0009e	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000a1	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000a4	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000a6	6b 45 10 0d	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 13
  000aa	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000ad	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b0	89 01		 mov	 DWORD PTR [ecx], eax

; 1684 :     }

  000b2	c9		 leave
  000b3	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXQAUSShopItemTable@@II@Z ENDP ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Geometric$ = -32					; size = 4
__Max$ = -28						; size = 4
tv82 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$8 = -8					; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@ABEII@Z PROC ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$8[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	99		 cdq
  0001b	6a 0d		 push	 13			; 0000000dH
  0001d	59		 pop	 ecx
  0001e	f7 f9		 idiv	 ecx
  00020	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00023	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00026	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00029	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  0002c	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0002f	c7 45 f0 13 3b
	b1 13		 mov	 DWORD PTR $T7[ebp], 330382099 ; 13b13b13H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00036	c7 45 d8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0003d	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  00040	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00043	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00046	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  00049	73 08		 jae	 SHORT $LN25@Calculate_
  0004b	8d 45 f0	 lea	 eax, DWORD PTR $T7[ebp]
  0004e	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
  00051	eb 06		 jmp	 SHORT $LN26@Calculate_
$LN25@Calculate_:
  00053	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00056	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
$LN26@Calculate_:
  00059	8b 45 e8	 mov	 eax, DWORD PTR tv82[ebp]
  0005c	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  0005f	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  00062	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00065	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00068	8b 00		 mov	 eax, DWORD PTR [eax]
  0006a	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 :         const auto _Max              = max_size();
; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006d	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00070	d1 e8		 shr	 eax, 1
  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  00075	2b c8		 sub	 ecx, eax
  00077	39 4d fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], ecx
  0007a	76 05		 jbe	 SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

  0007c	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  0007f	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00081	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00084	d1 e8		 shr	 eax, 1
  00086	03 45 fc	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00089	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  0008c	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0008f	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00092	73 05		 jae	 SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

  00094	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00097	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

  00099	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

  0009c	c9		 leave
  0009d	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@ABEII@Z ENDP ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXPAUSShopItemTable@@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXPAUSShopItemTable@@0@Z PROC ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00015	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00018	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USShopItemTable@@@std@@@std@@YAXPAUSShopItemTable@@QAU1@AAV?$allocator@USShopItemTable@@@0@@Z ; std::_Destroy_range<std::allocator<SShopItemTable> >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00026	c9		 leave
  00027	c2 08 00	 ret	 8
?_Destroy@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXPAUSShopItemTable@@0@Z ENDP ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?reserve@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -48						; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
$T5 = -32						; size = 4
$T6 = -28						; size = 4
$T7 = -24						; size = 4
tv81 = -20						; size = 4
$T8 = -16						; size = 4
$T9 = -12						; size = 4
__My_data$10 = -8					; size = 4
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?reserve@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEXI@Z PROC ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::reserve, COMDAT
; _this$ = ecx

; 1304 :     void reserve(_CRT_GUARDOVERFLOW const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$10[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$10[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$10[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	99		 cdq
  0001b	6a 0d		 push	 13			; 0000000dH
  0001d	59		 pop	 ecx
  0001e	f7 f9		 idiv	 ecx
  00020	89 45 e8	 mov	 DWORD PTR $T7[ebp], eax

; 1305 :         // increase capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1306 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00023	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00026	3b 45 e8	 cmp	 eax, DWORD PTR $T7[ebp]
  00029	76 62		 jbe	 SHORT $LN4@reserve

; 1737 :         return _Mypair._Get_first();

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0002e	89 45 e4	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00031	8b 45 e4	 mov	 eax, DWORD PTR $T6[ebp]
  00034	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00037	c7 45 f4 13 3b
	b1 13		 mov	 DWORD PTR $T9[ebp], 330382099 ; 13b13b13H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  0003e	c7 45 e0 ff ff
	ff 7f		 mov	 DWORD PTR $T5[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00045	8b 45 e0	 mov	 eax, DWORD PTR $T5[ebp]
  00048	89 45 f0	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0004b	8b 45 f4	 mov	 eax, DWORD PTR $T9[ebp]
  0004e	3b 45 f0	 cmp	 eax, DWORD PTR $T8[ebp]
  00051	73 08		 jae	 SHORT $LN25@reserve
  00053	8d 45 f4	 lea	 eax, DWORD PTR $T9[ebp]
  00056	89 45 ec	 mov	 DWORD PTR tv81[ebp], eax
  00059	eb 06		 jmp	 SHORT $LN26@reserve
$LN25@reserve:
  0005b	8d 45 f0	 lea	 eax, DWORD PTR $T8[ebp]
  0005e	89 45 ec	 mov	 DWORD PTR tv81[ebp], eax
$LN26@reserve:
  00061	8b 45 ec	 mov	 eax, DWORD PTR tv81[ebp]
  00064	89 45 dc	 mov	 DWORD PTR $T4[ebp], eax
  00067	8b 45 dc	 mov	 eax, DWORD PTR $T4[ebp]
  0006a	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0006d	8b 45 d8	 mov	 eax, DWORD PTR $T3[ebp]
  00070	8b 00		 mov	 eax, DWORD PTR [eax]
  00072	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax

; 1307 :             if (_Newcapacity > max_size()) {

  00075	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00078	3b 45 d4	 cmp	 eax, DWORD PTR $T2[ebp]
  0007b	76 05		 jbe	 SHORT $LN3@reserve

; 1308 :                 _Xlength();

  0007d	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@CAXXZ ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Xlength
$LN3@reserve:

; 1309 :             }
; 1310 : 
; 1311 :             _Reallocate_exactly(_Newcapacity);

  00082	ff 75 08	 push	 DWORD PTR __Newcapacity$[ebp]
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Reallocate_exactly
$LN4@reserve:

; 1312 :         }
; 1313 :     }

  0008d	c9		 leave
  0008e	c2 04 00	 ret	 4
?reserve@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEXI@Z ENDP ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::reserve
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Max_possible$2 = -80					; size = 4
$T3 = -76						; size = 4
__Size$ = -72						; size = 4
__First$ = -68						; size = 4
__Last$ = -64						; size = 4
$T4 = -60						; size = 4
$T5 = -56						; size = 4
$T6 = -52						; size = 4
$T7 = -48						; size = 4
__Myfirst$ = -44					; size = 4
__Mylast$ = -40						; size = 4
__My_data$ = -36					; size = 4
__Newvec$ = -32						; size = 4
_this$ = -28						; size = 4
___formal$ = -24					; size = 1
__Overflow_is_possible$8 = -18				; size = 1
$T9 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z PROC ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1251 :     void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 40	 sub	 esp, 64			; 00000040H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 1252 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1253 :         auto& _My_data    = _Mypair._Myval2;

  0002f	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00032	89 45 dc	 mov	 DWORD PTR __My_data$[ebp], eax

; 1254 :         pointer& _Myfirst = _My_data._Myfirst;

  00035	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00038	89 45 d4	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1255 :         pointer& _Mylast  = _My_data._Mylast;

  0003b	8b 45 dc	 mov	 eax, DWORD PTR __My_data$[ebp]
  0003e	83 c0 04	 add	 eax, 4
  00041	89 45 d8	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1256 : 
; 1257 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00044	8b 45 d8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00047	8b 4d d4	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0004a	8b 00		 mov	 eax, DWORD PTR [eax]
  0004c	2b 01		 sub	 eax, DWORD PTR [ecx]
  0004e	99		 cdq
  0004f	6a 0d		 push	 13			; 0000000dH
  00051	59		 pop	 ecx
  00052	f7 f9		 idiv	 ecx
  00054	89 45 b8	 mov	 DWORD PTR __Size$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  00057	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005a	89 45 d0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0005d	8b 45 d0	 mov	 eax, DWORD PTR $T7[ebp]
  00060	89 45 b4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00063	c6 45 ee 01	 mov	 BYTE PTR __Overflow_is_possible$8[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00067	c7 45 b0 13 3b
	b1 13		 mov	 DWORD PTR __Max_possible$2[ebp], 330382099 ; 13b13b13H

; 60   :         if (_Count > _Max_possible) {

  0006e	81 7d 08 13 3b
	b1 13		 cmp	 DWORD PTR __Newcapacity$[ebp], 330382099 ; 13b13b13H
  00075	76 05		 jbe	 SHORT $LN17@Reallocate

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00077	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN17@Reallocate:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0007c	6b 45 08 0d	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 13
  00080	89 45 cc	 mov	 DWORD PTR $T6[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00083	ff 75 cc	 push	 DWORD PTR $T6[ebp]
  00086	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0008b	59		 pop	 ecx
  0008c	89 45 e0	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1261 :         _TRY_BEGIN

  0008f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1262 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00093	8b 45 d8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 45 c0	 mov	 DWORD PTR __Last$[ebp], eax
  0009b	8b 45 d4	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0009e	8b 00		 mov	 eax, DWORD PTR [eax]
  000a0	89 45 bc	 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  000a3	33 c0		 xor	 eax, eax
  000a5	88 45 ef	 mov	 BYTE PTR $T9[ebp], al
  000a8	8a 45 ef	 mov	 al, BYTE PTR $T9[ebp]
  000ab	88 45 e8	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  000ae	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000b1	89 45 c8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  000b4	8b 45 c8	 mov	 eax, DWORD PTR $T5[ebp]
  000b7	89 45 c4	 mov	 DWORD PTR $T4[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  000ba	ff 75 c4	 push	 DWORD PTR $T4[ebp]
  000bd	ff 75 e0	 push	 DWORD PTR __Newvec$[ebp]
  000c0	ff 75 c0	 push	 DWORD PTR __Last$[ebp]
  000c3	ff 75 bc	 push	 DWORD PTR __First$[ebp]
  000c6	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@YAPAUSShopItemTable@@QAU1@0PAU1@AAV?$allocator@USShopItemTable@@@0@@Z ; std::_Uninitialized_move<SShopItemTable *,std::allocator<SShopItemTable> >
  000cb	83 c4 10	 add	 esp, 16			; 00000010H

; 1262 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  000ce	eb 24		 jmp	 SHORT $LN4@Reallocate
__catch$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z$0:

; 1263 :         _CATCH_ALL
; 1264 :         _Getal().deallocate(_Newvec, _Newcapacity);

  000d0	ff 75 08	 push	 DWORD PTR __Newcapacity$[ebp]
  000d3	ff 75 e0	 push	 DWORD PTR __Newvec$[ebp]
  000d6	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d9	e8 00 00 00 00	 call	 ?_Getal@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEAAV?$allocator@USShopItemTable@@@2@XZ ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Getal
  000de	8b c8		 mov	 ecx, eax
  000e0	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USShopItemTable@@@std@@QAEXQAUSShopItemTable@@I@Z ; std::allocator<SShopItemTable>::deallocate

; 1265 :         _RERAISE;

  000e5	6a 00		 push	 0
  000e7	6a 00		 push	 0
  000e9	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1266 :         _CATCH_END

  000ee	b8 00 00 00 00	 mov	 eax, $LN7@Reallocate
  000f3	c3		 ret	 0
$LN4@Reallocate:
  000f4	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  000f8	eb 04		 jmp	 SHORT __tryend$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z$1
$LN7@Reallocate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  000fa	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1267 : 
; 1268 :         _Change_array(_Newvec, _Size, _Newcapacity);

  000fe	ff 75 08	 push	 DWORD PTR __Newcapacity$[ebp]
  00101	ff 75 b8	 push	 DWORD PTR __Size$[ebp]
  00104	ff 75 e0	 push	 DWORD PTR __Newvec$[ebp]
  00107	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0010a	e8 00 00 00 00	 call	 ?_Change_array@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXQAUSShopItemTable@@II@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Change_array
$LN20@Reallocate:

; 1269 :     }

  0010f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00112	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00119	59		 pop	 ecx
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx
  0011d	c9		 leave
  0011e	c2 04 00	 ret	 4
  00121	cc		 int	 3
  00122	cc		 int	 3
  00123	cc		 int	 3
  00124	cc		 int	 3
  00125	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate_exactly@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXI@Z ENDP ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Reallocate_exactly
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??1?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAE@XZ PROC ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::~vector<SShopItemTable,std::allocator<SShopItemTable> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 673  :         _Tidy();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXXZ ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Tidy

; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAE@XZ ENDP ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::~vector<SShopItemTable,std::allocator<SShopItemTable> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@USShopItemTable@@@std@@QAEXQAUSShopItemTable@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USShopItemTable@@@std@@QAEXQAUSShopItemTable@@I@Z PROC ; std::allocator<SShopItemTable>::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6b 45 0c 0d	 imul	 eax, DWORD PTR __Count$[ebp], 13
  0000b	50		 push	 eax
  0000c	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	59		 pop	 ecx
  00015	59		 pop	 ecx

; 811  :     }

  00016	c9		 leave
  00017	c2 08 00	 ret	 8
?deallocate@?$allocator@USShopItemTable@@@std@@QAEXQAUSShopItemTable@@I@Z ENDP ; std::allocator<SShopItemTable>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??$_Eqrange@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@PAU12@@1@ABUSItemPos@@@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
__Comp$ = -68						; size = 4
$T2 = -64						; size = 4
$T3 = -60						; size = 4
$T4 = -56						; size = 4
$T5 = -52						; size = 4
$T6 = -48						; size = 4
__Lonode$ = -44						; size = 4
tv212 = -40						; size = 4
tv133 = -36						; size = 4
tv192 = -32						; size = 4
tv177 = -28						; size = 4
__Right$ = -24						; size = 4
_this$ = -20						; size = 4
__Scary$ = -16						; size = 4
__Hinode$ = -12						; size = 4
__Nodekey$7 = -8					; size = 4
__Pnode$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Eqrange@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@PAU12@@1@ABUSItemPos@@@Z PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Eqrange<SItemPos>, COMDAT
; _this$ = ecx

; 1783 :         noexcept(_Nothrow_compare<key_compare, key_type, _Other>&& _Nothrow_compare<key_compare, _Other, key_type>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 d0	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 d0	 mov	 eax, DWORD PTR $T6[ebp]
  00012	89 45 f0	 mov	 DWORD PTR __Scary$[ebp], eax

; 2035 :         return _Mypair._Get_first();

  00015	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00018	89 45 cc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2035 :         return _Mypair._Get_first();

  0001b	8b 45 cc	 mov	 eax, DWORD PTR $T5[ebp]
  0001e	89 45 bc	 mov	 DWORD PTR __Comp$[ebp], eax

; 1784 :         // find range of nodes equivalent to _Keyval
; 1785 :         const auto _Scary = _Get_scary();
; 1786 :         const auto& _Comp = _Getcomp();
; 1787 :         _Nodeptr _Pnode   = _Scary->_Myhead->_Parent;

  00021	8b 45 f0	 mov	 eax, DWORD PTR __Scary$[ebp]
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 1788 :         _Nodeptr _Lonode  = _Scary->_Myhead; // end() if search fails

  0002c	8b 45 f0	 mov	 eax, DWORD PTR __Scary$[ebp]
  0002f	8b 00		 mov	 eax, DWORD PTR [eax]
  00031	89 45 d4	 mov	 DWORD PTR __Lonode$[ebp], eax

; 1789 :         _Nodeptr _Hinode  = _Scary->_Myhead; // end() if search fails

  00034	8b 45 f0	 mov	 eax, DWORD PTR __Scary$[ebp]
  00037	8b 00		 mov	 eax, DWORD PTR [eax]
  00039	89 45 f4	 mov	 DWORD PTR __Hinode$[ebp], eax
$LN2@Eqrange:

; 1790 : 
; 1791 :         while (!_Pnode->_Isnil) {

  0003c	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0003f	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00043	85 c0		 test	 eax, eax
  00045	0f 85 c6 00 00
	00		 jne	 $LN3@Eqrange
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map

; 69   :         return _Val.first;

  0004b	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0004e	83 c0 0e	 add	 eax, 14			; 0000000eH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1792 :             const auto& _Nodekey = _Traits::_Kfn(_Pnode->_Myval);

  00051	89 45 f8	 mov	 DWORD PTR __Nodekey$7[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h

; 255  : 		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));

  00054	8b 45 f8	 mov	 eax, DWORD PTR __Nodekey$7[ebp]
  00057	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  0005d	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00060	3b c1		 cmp	 eax, ecx
  00062	7c 28		 jl	 SHORT $LN33@Eqrange
  00064	8b 45 f8	 mov	 eax, DWORD PTR __Nodekey$7[ebp]
  00067	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  0006d	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00070	3b c1		 cmp	 eax, ecx
  00072	75 12		 jne	 SHORT $LN32@Eqrange
  00074	8b 45 f8	 mov	 eax, DWORD PTR __Nodekey$7[ebp]
  00077	0f b7 40 01	 movzx	 eax, WORD PTR [eax+1]
  0007b	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  0007e	0f b7 49 01	 movzx	 ecx, WORD PTR [ecx+1]
  00082	3b c1		 cmp	 eax, ecx
  00084	7c 06		 jl	 SHORT $LN33@Eqrange
$LN32@Eqrange:
  00086	83 65 e4 00	 and	 DWORD PTR tv177[ebp], 0
  0008a	eb 07		 jmp	 SHORT $LN28@Eqrange
$LN33@Eqrange:
  0008c	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv177[ebp], 1
$LN28@Eqrange:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1793 :             if (_DEBUG_LT_PRED(_Comp, _Nodekey, _Keyval)) {

  00093	0f b6 45 e4	 movzx	 eax, BYTE PTR tv177[ebp]
  00097	85 c0		 test	 eax, eax
  00099	74 0b		 je	 SHORT $LN6@Eqrange

; 1794 :                 _Pnode = _Pnode->_Right; // descend right subtree

  0009b	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0009e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a1	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 1795 :             } else { // _Pnode not less than _Keyval, remember it

  000a4	eb 66		 jmp	 SHORT $LN7@Eqrange
$LN6@Eqrange:

; 1796 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  000a6	8b 45 f4	 mov	 eax, DWORD PTR __Hinode$[ebp]
  000a9	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  000ad	85 c0		 test	 eax, eax
  000af	74 4d		 je	 SHORT $LN8@Eqrange
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h

; 255  : 		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));

  000b1	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  000b4	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000b7	8b 4d f8	 mov	 ecx, DWORD PTR __Nodekey$7[ebp]
  000ba	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000bd	3b c1		 cmp	 eax, ecx
  000bf	7c 28		 jl	 SHORT $LN40@Eqrange
  000c1	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  000c4	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000c7	8b 4d f8	 mov	 ecx, DWORD PTR __Nodekey$7[ebp]
  000ca	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  000cd	3b c1		 cmp	 eax, ecx
  000cf	75 12		 jne	 SHORT $LN39@Eqrange
  000d1	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  000d4	0f b7 40 01	 movzx	 eax, WORD PTR [eax+1]
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR __Nodekey$7[ebp]
  000db	0f b7 49 01	 movzx	 ecx, WORD PTR [ecx+1]
  000df	3b c1		 cmp	 eax, ecx
  000e1	7c 06		 jl	 SHORT $LN40@Eqrange
$LN39@Eqrange:
  000e3	83 65 e0 00	 and	 DWORD PTR tv192[ebp], 0
  000e7	eb 07		 jmp	 SHORT $LN35@Eqrange
$LN40@Eqrange:
  000e9	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv192[ebp], 1
$LN35@Eqrange:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1796 :                 if (_Hinode->_Isnil && _DEBUG_LT_PRED(_Comp, _Keyval, _Nodekey)) {

  000f0	0f b6 45 e0	 movzx	 eax, BYTE PTR tv192[ebp]
  000f4	85 c0		 test	 eax, eax
  000f6	74 06		 je	 SHORT $LN8@Eqrange

; 1797 :                     _Hinode = _Pnode; // _Pnode greater, remember it

  000f8	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000fb	89 45 f4	 mov	 DWORD PTR __Hinode$[ebp], eax
$LN8@Eqrange:

; 1798 :                 }
; 1799 : 
; 1800 :                 _Lonode = _Pnode;

  000fe	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00101	89 45 d4	 mov	 DWORD PTR __Lonode$[ebp], eax

; 1801 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  00104	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00107	8b 00		 mov	 eax, DWORD PTR [eax]
  00109	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN7@Eqrange:

; 1802 :             }
; 1803 :         }

  0010c	e9 2b ff ff ff	 jmp	 $LN2@Eqrange
$LN3@Eqrange:

; 1804 : 
; 1805 :         _Pnode = _Hinode->_Isnil ? _Scary->_Myhead->_Parent : _Hinode->_Left; // continue scan for upper bound

  00111	8b 45 f4	 mov	 eax, DWORD PTR __Hinode$[ebp]
  00114	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00118	85 c0		 test	 eax, eax
  0011a	74 0d		 je	 SHORT $LN12@Eqrange
  0011c	8b 45 f0	 mov	 eax, DWORD PTR __Scary$[ebp]
  0011f	8b 00		 mov	 eax, DWORD PTR [eax]
  00121	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00124	89 45 dc	 mov	 DWORD PTR tv133[ebp], eax
  00127	eb 08		 jmp	 SHORT $LN13@Eqrange
$LN12@Eqrange:
  00129	8b 45 f4	 mov	 eax, DWORD PTR __Hinode$[ebp]
  0012c	8b 00		 mov	 eax, DWORD PTR [eax]
  0012e	89 45 dc	 mov	 DWORD PTR tv133[ebp], eax
$LN13@Eqrange:
  00131	8b 45 dc	 mov	 eax, DWORD PTR tv133[ebp]
  00134	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN4@Eqrange:

; 1806 :         while (!_Pnode->_Isnil) {

  00137	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0013a	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  0013e	85 c0		 test	 eax, eax
  00140	75 7a		 jne	 SHORT $LN5@Eqrange

; 2035 :         return _Mypair._Get_first();

  00142	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00145	89 45 c8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2035 :         return _Mypair._Get_first();

  00148	8b 45 c8	 mov	 eax, DWORD PTR $T4[ebp]
  0014b	89 45 b8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map

; 69   :         return _Val.first;

  0014e	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00151	83 c0 0e	 add	 eax, 14			; 0000000eH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1807 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Pnode->_Myval))) {

  00154	89 45 e8	 mov	 DWORD PTR __Right$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h

; 255  : 		return (window_type < rhs.window_type) || ((window_type == rhs.window_type) && (cell < rhs.cell));

  00157	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0015a	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0015d	8b 4d e8	 mov	 ecx, DWORD PTR __Right$[ebp]
  00160	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00163	3b c1		 cmp	 eax, ecx
  00165	7c 28		 jl	 SHORT $LN55@Eqrange
  00167	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0016a	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0016d	8b 4d e8	 mov	 ecx, DWORD PTR __Right$[ebp]
  00170	0f b6 09	 movzx	 ecx, BYTE PTR [ecx]
  00173	3b c1		 cmp	 eax, ecx
  00175	75 12		 jne	 SHORT $LN54@Eqrange
  00177	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0017a	0f b7 40 01	 movzx	 eax, WORD PTR [eax+1]
  0017e	8b 4d e8	 mov	 ecx, DWORD PTR __Right$[ebp]
  00181	0f b7 49 01	 movzx	 ecx, WORD PTR [ecx+1]
  00185	3b c1		 cmp	 eax, ecx
  00187	7c 06		 jl	 SHORT $LN55@Eqrange
$LN54@Eqrange:
  00189	83 65 d8 00	 and	 DWORD PTR tv212[ebp], 0
  0018d	eb 07		 jmp	 SHORT $LN50@Eqrange
$LN55@Eqrange:
  0018f	c7 45 d8 01 00
	00 00		 mov	 DWORD PTR tv212[ebp], 1
$LN50@Eqrange:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1807 :             if (_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Pnode->_Myval))) {

  00196	0f b6 45 d8	 movzx	 eax, BYTE PTR tv212[ebp]
  0019a	85 c0		 test	 eax, eax
  0019c	74 10		 je	 SHORT $LN9@Eqrange

; 1808 :                 // _Pnode greater than _Keyval, remember it
; 1809 :                 _Hinode = _Pnode;

  0019e	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  001a1	89 45 f4	 mov	 DWORD PTR __Hinode$[ebp], eax

; 1810 :                 _Pnode  = _Pnode->_Left; // descend left subtree

  001a4	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  001a7	8b 00		 mov	 eax, DWORD PTR [eax]
  001a9	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 1811 :             } else {

  001ac	eb 09		 jmp	 SHORT $LN10@Eqrange
$LN9@Eqrange:

; 1812 :                 _Pnode = _Pnode->_Right; // descend right subtree

  001ae	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  001b1	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001b4	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN10@Eqrange:

; 1813 :             }
; 1814 :         }

  001b7	e9 7b ff ff ff	 jmp	 $LN4@Eqrange
$LN5@Eqrange:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  001bc	8d 45 d4	 lea	 eax, DWORD PTR __Lonode$[ebp]
  001bf	89 45 c4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  001c2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001c5	8b 4d c4	 mov	 ecx, DWORD PTR $T3[ebp]
  001c8	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001ca	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  001cc	8d 45 f4	 lea	 eax, DWORD PTR __Hinode$[ebp]
  001cf	89 45 c0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  001d2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  001d5	8b 4d c0	 mov	 ecx, DWORD PTR $T2[ebp]
  001d8	8b 09		 mov	 ecx, DWORD PTR [ecx]
  001da	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1816 :         return {_Lonode, _Hinode};

  001dd	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1817 :     }

  001e0	c9		 leave
  001e1	c2 08 00	 ret	 8
??$_Eqrange@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@PAU12@@1@ABUSItemPos@@@Z ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Eqrange<SItemPos>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
__Pnode$ = -12						; size = 4
__Pnode$2 = -8						; size = 4
_this$ = -4						; size = 4
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 51   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
  0000e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00011	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00015	85 c0		 test	 eax, eax
  00017	74 37		 je	 SHORT $LN4@operator
$LN2@operator:

; 53   :             _Nodeptr _Pnode;
; 54   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00021	89 45 f8	 mov	 DWORD PTR __Pnode$2[ebp], eax
  00024	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$2[ebp]
  00027	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  0002b	85 c0		 test	 eax, eax
  0002d	75 17		 jne	 SHORT $LN3@operator
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  00035	8b 00		 mov	 eax, DWORD PTR [eax]
  00037	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0003a	75 0a		 jne	 SHORT $LN3@operator

; 55   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  00042	89 08		 mov	 DWORD PTR [eax], ecx

; 56   :             }

  00044	eb d3		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 57   : 
; 58   :             _Ptr = _Pnode; // ==> parent (head if end())

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$2[ebp]
  0004c	89 08		 mov	 DWORD PTR [eax], ecx

; 59   :         } else {

  0004e	eb 30		 jmp	 SHORT $LN5@operator
$LN4@operator:

; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 00		 mov	 eax, DWORD PTR [eax]
  00055	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00058	89 45 f4	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN8@operator:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  0005b	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0005e	8b 00		 mov	 eax, DWORD PTR [eax]
  00060	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00064	85 c0		 test	 eax, eax
  00066	75 0a		 jne	 SHORT $LN9@operator

; 452  :             _Pnode = _Pnode->_Left;

  00068	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0006b	8b 00		 mov	 eax, DWORD PTR [eax]
  0006d	89 45 f4	 mov	 DWORD PTR __Pnode$[ebp], eax

; 453  :         }

  00070	eb e9		 jmp	 SHORT $LN8@operator
$LN9@operator:

; 454  : 
; 455  :         return _Pnode;

  00072	8b 45 f4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00075	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax

; 60   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00078	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  0007e	89 08		 mov	 DWORD PTR [eax], ecx
$LN5@operator:

; 61   :         }
; 62   : 
; 63   :         return *this;

  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 64   :     }

  00083	c9		 leave
  00084	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GCPythonShop@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCPythonShop@@UAEPAXI@Z PROC				; CPythonShop::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CPythonShop@@UAE@XZ	; CPythonShop::~CPythonShop
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0f		 je	 SHORT $LN2@scalar
  00017	68 98 14 00 00	 push	 5272			; 00001498H
  0001c	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	59		 pop	 ecx
  00025	59		 pop	 ecx
$LN2@scalar:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c9		 leave
  0002a	c2 04 00	 ret	 4
??_GCPythonShop@@UAEPAXI@Z ENDP				; CPythonShop::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$map@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$map@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@@std@@QAE@XZ PROC ; std::map<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> > >::~map<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::~_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >
  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$map@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> > >::~map<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Parent_sibling$1 = -20				; size = 4
__Parent_sibling$2 = -16				; size = 4
_this$ = -12						; size = 4
__Head$ = -8						; size = 4
__Pnode$3 = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Insert_node, COMDAT
; _this$ = ecx

; 644  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 645  :         ++_Mysize;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	40		 inc	 eax
  00010	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 646  :         const auto _Head  = _Myhead;

  00016	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	89 45 f8	 mov	 DWORD PTR __Head$[ebp], eax

; 647  :         _Newnode->_Parent = _Loc._Parent;

  0001e	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  00024	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 648  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00027	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  0002a	3b 45 f8	 cmp	 eax, DWORD PTR __Head$[ebp]
  0002d	75 29		 jne	 SHORT $LN5@Insert_nod

; 649  :             _Head->_Left     = _Newnode;

  0002f	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  00032	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00035	89 08		 mov	 DWORD PTR [eax], ecx

; 650  :             _Head->_Parent   = _Newnode;

  00037	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  0003a	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  0003d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 651  :             _Head->_Right    = _Newnode;

  00040	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  00043	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00046	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 652  :             _Newnode->_Color = _Black; // the root is black

  00049	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  0004c	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 653  :             return _Newnode;

  00050	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  00053	e9 a3 01 00 00	 jmp	 $LN18@Insert_nod
$LN5@Insert_nod:

; 654  :         }
; 655  : 
; 656  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 657  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00058	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  0005c	75 1f		 jne	 SHORT $LN6@Insert_nod

; 658  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 659  :             _Loc._Parent->_Right = _Newnode;

  0005e	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00061	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00064	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 660  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  00067	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0006d	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00070	75 09		 jne	 SHORT $LN8@Insert_nod

; 661  :                 _Head->_Right = _Newnode;

  00072	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  00075	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00078	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN8@Insert_nod:

; 662  :             }
; 663  :         } else { // add to left of _Loc._Parent

  0007b	eb 1a		 jmp	 SHORT $LN7@Insert_nod
$LN6@Insert_nod:

; 664  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 665  :             _Loc._Parent->_Left = _Newnode;

  0007d	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00080	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00083	89 08		 mov	 DWORD PTR [eax], ecx

; 666  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00085	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  00088	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  0008b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0008d	75 08		 jne	 SHORT $LN7@Insert_nod

; 667  :                 _Head->_Left = _Newnode;

  0008f	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  00092	8b 4d 10	 mov	 ecx, DWORD PTR __Newnode$[ebp]
  00095	89 08		 mov	 DWORD PTR [eax], ecx
$LN7@Insert_nod:

; 668  :             }
; 669  :         }
; 670  : 
; 671  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00097	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
  0009a	89 45 fc	 mov	 DWORD PTR __Pnode$3[ebp], eax
$LN4@Insert_nod:
  0009d	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  000a0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a3	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  000a7	85 c0		 test	 eax, eax
  000a9	0f 85 3f 01 00
	00		 jne	 $LN3@Insert_nod

; 672  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  000af	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  000b2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$3[ebp]
  000bb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000be	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000c0	0f 85 95 00 00
	00		 jne	 $LN10@Insert_nod

; 673  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  000c6	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  000c9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000cc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000cf	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000d2	89 45 f0	 mov	 DWORD PTR __Parent_sibling$2[ebp], eax

; 674  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  000d5	8b 45 f0	 mov	 eax, DWORD PTR __Parent_sibling$2[ebp]
  000d8	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  000dc	85 c0		 test	 eax, eax
  000de	75 2c		 jne	 SHORT $LN12@Insert_nod

; 675  :                     _Pnode->_Parent->_Color          = _Black;

  000e0	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  000e3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000e6	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 676  :                     _Parent_sibling->_Color          = _Black;

  000ea	8b 45 f0	 mov	 eax, DWORD PTR __Parent_sibling$2[ebp]
  000ed	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 677  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  000f4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000fa	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 678  :                     _Pnode                           = _Pnode->_Parent->_Parent;

  000fe	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00101	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00104	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00107	89 45 fc	 mov	 DWORD PTR __Pnode$3[ebp], eax

; 679  :                 } else { // parent's sibling has red and black children

  0010a	eb 4a		 jmp	 SHORT $LN13@Insert_nod
$LN12@Insert_nod:

; 680  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0010c	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  0010f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00112	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$3[ebp]
  00115	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00118	75 14		 jne	 SHORT $LN14@Insert_nod

; 681  :                         _Pnode = _Pnode->_Parent;

  0011a	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  0011d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00120	89 45 fc	 mov	 DWORD PTR __Pnode$3[ebp], eax

; 682  :                         _Lrotate(_Pnode);

  00123	ff 75 fc	 push	 DWORD PTR __Pnode$3[ebp]
  00126	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Lrotate
$LN14@Insert_nod:

; 683  :                     }
; 684  : 
; 685  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0012e	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00131	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00134	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 686  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00138	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  0013b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0013e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00141	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 687  :                     _Rrotate(_Pnode->_Parent->_Parent);

  00145	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00148	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0014b	ff 70 04	 push	 DWORD PTR [eax+4]
  0014e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00151	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Rrotate
$LN13@Insert_nod:

; 688  :                 }
; 689  :             } else { // fixup red-red in right subtree

  00156	e9 8e 00 00 00	 jmp	 $LN11@Insert_nod
$LN10@Insert_nod:

; 690  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;

  0015b	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  0015e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00161	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00164	8b 00		 mov	 eax, DWORD PTR [eax]
  00166	89 45 ec	 mov	 DWORD PTR __Parent_sibling$1[ebp], eax

; 691  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00169	8b 45 ec	 mov	 eax, DWORD PTR __Parent_sibling$1[ebp]
  0016c	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00170	85 c0		 test	 eax, eax
  00172	75 2c		 jne	 SHORT $LN15@Insert_nod

; 692  :                     _Pnode->_Parent->_Color          = _Black;

  00174	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00177	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0017a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 693  :                     _Parent_sibling->_Color          = _Black;

  0017e	8b 45 ec	 mov	 eax, DWORD PTR __Parent_sibling$1[ebp]
  00181	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 694  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00185	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00188	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0018e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 695  :                     _Pnode                           = _Pnode->_Parent->_Parent;

  00192	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  00195	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00198	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0019b	89 45 fc	 mov	 DWORD PTR __Pnode$3[ebp], eax

; 696  :                 } else { // parent's sibling has red and black children

  0019e	eb 49		 jmp	 SHORT $LN11@Insert_nod
$LN15@Insert_nod:

; 697  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  001a0	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  001a3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001a6	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$3[ebp]
  001a9	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001ab	75 14		 jne	 SHORT $LN17@Insert_nod

; 698  :                         _Pnode = _Pnode->_Parent;

  001ad	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  001b0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001b3	89 45 fc	 mov	 DWORD PTR __Pnode$3[ebp], eax

; 699  :                         _Rrotate(_Pnode);

  001b6	ff 75 fc	 push	 DWORD PTR __Pnode$3[ebp]
  001b9	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  001bc	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Rrotate
$LN17@Insert_nod:

; 700  :                     }
; 701  : 
; 702  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  001c1	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  001c4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001c7	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 703  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  001cb	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  001ce	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d4	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 704  :                     _Lrotate(_Pnode->_Parent->_Parent);

  001d8	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$3[ebp]
  001db	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001de	ff 70 04	 push	 DWORD PTR [eax+4]
  001e1	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  001e4	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Lrotate
$LN11@Insert_nod:

; 705  :                 }
; 706  :             }
; 707  :         }

  001e9	e9 af fe ff ff	 jmp	 $LN4@Insert_nod
$LN3@Insert_nod:

; 708  : 
; 709  :         _Head->_Parent->_Color = _Black; // root is always black

  001ee	8b 45 f8	 mov	 eax, DWORD PTR __Head$[ebp]
  001f1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001f4	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 710  :         return _Newnode;

  001f8	8b 45 10	 mov	 eax, DWORD PTR __Newnode$[ebp]
$LN18@Insert_nod:

; 711  :     }

  001fb	c9		 leave
  001fc	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
$T1 = -68						; size = 4
$T2 = -64						; size = 4
$T3 = -60						; size = 4
$T4 = -56						; size = 4
$T5 = -52						; size = 4
__Right$ = -48						; size = 4
__Left$ = -44						; size = 4
tv144 = -40						; size = 4
tv133 = -36						; size = 4
__Pnode$ = -32						; size = 4
__Pnode$ = -28						; size = 4
_this$ = -24						; size = 4
__Erasednode$ = -20					; size = 4
__Fixnode$ = -16					; size = 4
__Fixnodeparent$ = -12					; size = 4
__Pnode$ = -8						; size = 4
__Tmp$6 = -1						; size = 1
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Extract, COMDAT
; _this$ = ecx

; 502  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 503  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00009	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  0000c	89 45 ec	 mov	 DWORD PTR __Erasednode$[ebp], eax

; 504  :         ++_Where; // save successor iterator for return

  0000f	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00012	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0>::operator++

; 505  : 
; 506  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 507  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 508  :         _Nodeptr _Pnode = _Erasednode;

  00017	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 509  : 
; 510  :         if (_Pnode->_Left->_Isnil) {

  0001d	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00026	85 c0		 test	 eax, eax
  00028	74 0b		 je	 SHORT $LN5@Extract

; 511  :             _Fixnode = _Pnode->_Right; // stitch up right subtree

  0002a	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00030	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax
  00033	eb 27		 jmp	 SHORT $LN6@Extract
$LN5@Extract:

; 512  :         } else if (_Pnode->_Right->_Isnil) {

  00035	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00038	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003b	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  0003f	85 c0		 test	 eax, eax
  00041	74 0a		 je	 SHORT $LN7@Extract

; 513  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  00043	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 514  :         } else { // two subtrees, must lift successor node to replace erased

  0004b	eb 0f		 jmp	 SHORT $LN6@Extract
$LN7@Extract:

; 515  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  0004d	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00050	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 516  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00053	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00056	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00059	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax
$LN6@Extract:

; 517  :         }
; 518  : 
; 519  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  0005c	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0005f	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  00062	0f 85 01 01 00
	00		 jne	 $LN9@Extract

; 520  :             _Fixnodeparent = _Erasednode->_Parent;

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0006b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006e	89 45 f4	 mov	 DWORD PTR __Fixnodeparent$[ebp], eax

; 521  :             if (!_Fixnode->_Isnil) {

  00071	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00074	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00078	85 c0		 test	 eax, eax
  0007a	75 09		 jne	 SHORT $LN11@Extract

; 522  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  0007c	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  00082	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN11@Extract:

; 523  :             }
; 524  : 
; 525  :             if (_Myhead->_Parent == _Erasednode) {

  00085	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 00		 mov	 eax, DWORD PTR [eax]
  0008a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008d	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  00090	75 0d		 jne	 SHORT $LN12@Extract

; 526  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00092	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00095	8b 00		 mov	 eax, DWORD PTR [eax]
  00097	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  0009a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0009d	eb 1d		 jmp	 SHORT $LN13@Extract
$LN12@Extract:

; 527  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  0009f	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  000a2	8b 00		 mov	 eax, DWORD PTR [eax]
  000a4	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  000a7	75 0a		 jne	 SHORT $LN14@Extract

; 528  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  000a9	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  000ac	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  000af	89 08		 mov	 DWORD PTR [eax], ecx

; 529  :             } else {

  000b1	eb 09		 jmp	 SHORT $LN13@Extract
$LN14@Extract:

; 530  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  000b3	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  000b6	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  000b9	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN13@Extract:

; 531  :             }
; 532  : 
; 533  :             if (_Myhead->_Left == _Erasednode) {

  000bc	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000bf	8b 00		 mov	 eax, DWORD PTR [eax]
  000c1	8b 00		 mov	 eax, DWORD PTR [eax]
  000c3	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  000c6	75 46		 jne	 SHORT $LN16@Extract

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  000c8	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  000cb	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  000cf	85 c0		 test	 eax, eax
  000d1	74 08		 je	 SHORT $LN42@Extract
  000d3	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  000d6	89 45 dc	 mov	 DWORD PTR tv133[ebp], eax
  000d9	eb 29		 jmp	 SHORT $LN43@Extract
$LN42@Extract:
  000db	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  000de	89 45 e4	 mov	 DWORD PTR __Pnode$[ebp], eax
  000e1	8b 45 c0	 mov	 eax, DWORD PTR $T2[ebp]
  000e4	89 45 dc	 mov	 DWORD PTR tv133[ebp], eax
$LN59@Extract:

; 451  :         while (!_Pnode->_Left->_Isnil) {

  000e7	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000ea	8b 00		 mov	 eax, DWORD PTR [eax]
  000ec	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  000f0	85 c0		 test	 eax, eax
  000f2	75 0a		 jne	 SHORT $LN60@Extract

; 452  :             _Pnode = _Pnode->_Left;

  000f4	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  000f7	8b 00		 mov	 eax, DWORD PTR [eax]
  000f9	89 45 e4	 mov	 DWORD PTR __Pnode$[ebp], eax

; 453  :         }

  000fc	eb e9		 jmp	 SHORT $LN59@Extract
$LN60@Extract:

; 454  : 
; 455  :         return _Pnode;

  000fe	8b 45 e4	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00101	89 45 dc	 mov	 DWORD PTR tv133[ebp], eax
$LN43@Extract:

; 534  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00104	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00107	8b 00		 mov	 eax, DWORD PTR [eax]
  00109	8b 4d dc	 mov	 ecx, DWORD PTR tv133[ebp]
  0010c	89 08		 mov	 DWORD PTR [eax], ecx
$LN16@Extract:

; 535  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 536  :             }
; 537  : 
; 538  :             if (_Myhead->_Right == _Erasednode) {

  0010e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00111	8b 00		 mov	 eax, DWORD PTR [eax]
  00113	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00116	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  00119	75 49		 jne	 SHORT $LN17@Extract

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0011b	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0011e	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00122	85 c0		 test	 eax, eax
  00124	74 08		 je	 SHORT $LN44@Extract
  00126	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00129	89 45 d8	 mov	 DWORD PTR tv144[ebp], eax
  0012c	eb 2b		 jmp	 SHORT $LN45@Extract
$LN44@Extract:
  0012e	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00131	89 45 e0	 mov	 DWORD PTR __Pnode$[ebp], eax
  00134	8b 45 bc	 mov	 eax, DWORD PTR $T1[ebp]
  00137	89 45 d8	 mov	 DWORD PTR tv144[ebp], eax
$LN64@Extract:

; 443  :         while (!_Pnode->_Right->_Isnil) {

  0013a	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0013d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00140	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00144	85 c0		 test	 eax, eax
  00146	75 0b		 jne	 SHORT $LN65@Extract

; 444  :             _Pnode = _Pnode->_Right;

  00148	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0014b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0014e	89 45 e0	 mov	 DWORD PTR __Pnode$[ebp], eax

; 445  :         }

  00151	eb e7		 jmp	 SHORT $LN64@Extract
$LN65@Extract:

; 446  : 
; 447  :         return _Pnode;

  00153	8b 45 e0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00156	89 45 d8	 mov	 DWORD PTR tv144[ebp], eax
$LN45@Extract:

; 539  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  00159	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0015c	8b 00		 mov	 eax, DWORD PTR [eax]
  0015e	8b 4d d8	 mov	 ecx, DWORD PTR tv144[ebp]
  00161	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN17@Extract:

; 540  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 541  :             }
; 542  :         } else { // erased has two subtrees, _Pnode is successor to erased

  00164	e9 f1 00 00 00	 jmp	 $LN10@Extract
$LN9@Extract:

; 543  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  00169	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0016c	8b 00		 mov	 eax, DWORD PTR [eax]
  0016e	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00171	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 544  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down

  00174	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00177	8b 4d ec	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  0017a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0017c	89 08		 mov	 DWORD PTR [eax], ecx

; 545  : 
; 546  :             if (_Pnode == _Erasednode->_Right) {

  0017e	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00181	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00184	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00187	75 08		 jne	 SHORT $LN18@Extract

; 547  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  00189	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0018c	89 45 f4	 mov	 DWORD PTR __Fixnodeparent$[ebp], eax

; 548  :             } else { // successor further down, link in place of erased

  0018f	eb 3d		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 549  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's

  00191	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00194	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00197	89 45 f4	 mov	 DWORD PTR __Fixnodeparent$[ebp], eax

; 550  :                 if (!_Fixnode->_Isnil) {

  0019a	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0019d	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  001a1	85 c0		 test	 eax, eax
  001a3	75 09		 jne	 SHORT $LN20@Extract

; 551  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  001a5	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  001a8	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  001ab	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN20@Extract:

; 552  :                 }
; 553  : 
; 554  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  001ae	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  001b1	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  001b4	89 08		 mov	 DWORD PTR [eax], ecx

; 555  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  001b6	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  001b9	8b 4d ec	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  001bc	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  001bf	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 556  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  001c2	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  001c5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001c8	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  001cb	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN19@Extract:

; 557  :             }
; 558  : 
; 559  :             if (_Myhead->_Parent == _Erasednode) {

  001ce	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001d1	8b 00		 mov	 eax, DWORD PTR [eax]
  001d3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001d6	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  001d9	75 0d		 jne	 SHORT $LN21@Extract

; 560  :                 _Myhead->_Parent = _Pnode; // link down from root

  001db	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  001de	8b 00		 mov	 eax, DWORD PTR [eax]
  001e0	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  001e3	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  001e6	eb 26		 jmp	 SHORT $LN22@Extract
$LN21@Extract:

; 561  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  001e8	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  001eb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001ee	8b 00		 mov	 eax, DWORD PTR [eax]
  001f0	3b 45 ec	 cmp	 eax, DWORD PTR __Erasednode$[ebp]
  001f3	75 0d		 jne	 SHORT $LN23@Extract

; 562  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  001f5	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  001f8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001fb	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  001fe	89 08		 mov	 DWORD PTR [eax], ecx

; 563  :             } else {

  00200	eb 0c		 jmp	 SHORT $LN22@Extract
$LN23@Extract:

; 564  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  00202	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00205	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00208	8b 4d f8	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0020b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN22@Extract:

; 565  :             }
; 566  : 
; 567  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  0020e	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00211	8b 4d ec	 mov	 ecx, DWORD PTR __Erasednode$[ebp]
  00214	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00217	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 568  :             _STD swap(_Pnode->_Color, _Erasednode->_Color); // recolor it

  0021a	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0021d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00220	89 45 d0	 mov	 DWORD PTR __Right$[ebp], eax
  00223	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00226	83 c0 0c	 add	 eax, 12			; 0000000cH
  00229	89 45 d4	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0022c	8b 45 d4	 mov	 eax, DWORD PTR __Left$[ebp]
  0022f	89 45 cc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 104  :     _Ty _Tmp = _STD move(_Left);

  00232	8b 45 cc	 mov	 eax, DWORD PTR $T5[ebp]
  00235	8a 00		 mov	 al, BYTE PTR [eax]
  00237	88 45 ff	 mov	 BYTE PTR __Tmp$6[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0023a	8b 45 d0	 mov	 eax, DWORD PTR __Right$[ebp]
  0023d	89 45 c8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 105  :     _Left    = _STD move(_Right);

  00240	8b 45 d4	 mov	 eax, DWORD PTR __Left$[ebp]
  00243	8b 4d c8	 mov	 ecx, DWORD PTR $T4[ebp]
  00246	8a 09		 mov	 cl, BYTE PTR [ecx]
  00248	88 08		 mov	 BYTE PTR [eax], cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0024a	8d 45 ff	 lea	 eax, DWORD PTR __Tmp$6[ebp]
  0024d	89 45 c4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 106  :     _Right   = _STD move(_Tmp);

  00250	8b 45 d0	 mov	 eax, DWORD PTR __Right$[ebp]
  00253	8b 4d c4	 mov	 ecx, DWORD PTR $T3[ebp]
  00256	8a 09		 mov	 cl, BYTE PTR [ecx]
  00258	88 08		 mov	 BYTE PTR [eax], cl
$LN10@Extract:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 571  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  0025a	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  0025d	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00261	83 f8 01	 cmp	 eax, 1
  00264	0f 85 f4 01 00
	00		 jne	 $LN25@Extract

; 572  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  0026a	eb 09		 jmp	 SHORT $LN4@Extract
$LN2@Extract:
  0026c	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0026f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00272	89 45 f4	 mov	 DWORD PTR __Fixnodeparent$[ebp], eax
$LN4@Extract:
  00275	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00278	8b 00		 mov	 eax, DWORD PTR [eax]
  0027a	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  0027d	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00280	0f 84 d1 01 00
	00		 je	 $LN3@Extract
  00286	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  00289	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  0028d	83 f8 01	 cmp	 eax, 1
  00290	0f 85 c1 01 00
	00		 jne	 $LN3@Extract

; 573  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  00296	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00299	8b 4d f0	 mov	 ecx, DWORD PTR __Fixnode$[ebp]
  0029c	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0029e	0f 85 dd 00 00
	00		 jne	 $LN26@Extract

; 574  :                     _Pnode = _Fixnodeparent->_Right;

  002a4	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  002a7	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  002aa	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 575  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  002ad	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  002b0	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  002b4	85 c0		 test	 eax, eax
  002b6	75 22		 jne	 SHORT $LN28@Extract

; 576  :                         _Pnode->_Color         = _Black;

  002b8	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  002bb	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 577  :                         _Fixnodeparent->_Color = _Red;

  002bf	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  002c2	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 578  :                         _Lrotate(_Fixnodeparent);

  002c6	ff 75 f4	 push	 DWORD PTR __Fixnodeparent$[ebp]
  002c9	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002cc	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Lrotate

; 579  :                         _Pnode = _Fixnodeparent->_Right;

  002d1	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  002d4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  002d7	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN28@Extract:

; 580  :                     }
; 581  : 
; 582  :                     if (_Pnode->_Isnil) {

  002da	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  002dd	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  002e1	85 c0		 test	 eax, eax
  002e3	74 0b		 je	 SHORT $LN29@Extract

; 583  :                         _Fixnode = _Fixnodeparent; // shouldn't happen

  002e5	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  002e8	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 584  :                     } else if (_Pnode->_Left->_Color == _Black

  002eb	e9 8c 00 00 00	 jmp	 $LN30@Extract
$LN29@Extract:

; 585  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  002f0	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  002f3	8b 00		 mov	 eax, DWORD PTR [eax]
  002f5	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  002f9	83 f8 01	 cmp	 eax, 1
  002fc	75 1e		 jne	 SHORT $LN31@Extract
  002fe	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00301	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00304	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00308	83 f8 01	 cmp	 eax, 1
  0030b	75 0f		 jne	 SHORT $LN31@Extract

; 586  :                         _Pnode->_Color = _Red;

  0030d	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00310	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 587  :                         _Fixnode       = _Fixnodeparent;

  00314	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00317	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 588  :                     } else { // must rearrange right subtree

  0031a	eb 60		 jmp	 SHORT $LN30@Extract
$LN31@Extract:

; 589  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  0031c	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0031f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00322	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00326	83 f8 01	 cmp	 eax, 1
  00329	75 24		 jne	 SHORT $LN33@Extract

; 590  :                             _Pnode->_Left->_Color = _Black;

  0032b	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0032e	8b 00		 mov	 eax, DWORD PTR [eax]
  00330	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 591  :                             _Pnode->_Color        = _Red;

  00334	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00337	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 592  :                             _Rrotate(_Pnode);

  0033b	ff 75 f8	 push	 DWORD PTR __Pnode$[ebp]
  0033e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00341	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Rrotate

; 593  :                             _Pnode = _Fixnodeparent->_Right;

  00346	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00349	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0034c	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN33@Extract:

; 594  :                         }
; 595  : 
; 596  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  0034f	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00352	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  00355	8a 49 0c	 mov	 cl, BYTE PTR [ecx+12]
  00358	88 48 0c	 mov	 BYTE PTR [eax+12], cl

; 597  :                         _Fixnodeparent->_Color = _Black;

  0035b	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0035e	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 598  :                         _Pnode->_Right->_Color = _Black;

  00362	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00365	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00368	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 599  :                         _Lrotate(_Fixnodeparent);

  0036c	ff 75 f4	 push	 DWORD PTR __Fixnodeparent$[ebp]
  0036f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00372	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Lrotate

; 600  :                         break; // tree now recolored/rebalanced

  00377	e9 db 00 00 00	 jmp	 $LN3@Extract
$LN30@Extract:

; 601  :                     }
; 602  :                 } else { // fixup right subtree

  0037c	e9 d1 00 00 00	 jmp	 $LN27@Extract
$LN26@Extract:

; 603  :                     _Pnode = _Fixnodeparent->_Left;

  00381	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00384	8b 00		 mov	 eax, DWORD PTR [eax]
  00386	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax

; 604  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  00389	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0038c	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00390	85 c0		 test	 eax, eax
  00392	75 21		 jne	 SHORT $LN34@Extract

; 605  :                         _Pnode->_Color         = _Black;

  00394	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00397	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 606  :                         _Fixnodeparent->_Color = _Red;

  0039b	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  0039e	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 607  :                         _Rrotate(_Fixnodeparent);

  003a2	ff 75 f4	 push	 DWORD PTR __Fixnodeparent$[ebp]
  003a5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  003a8	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Rrotate

; 608  :                         _Pnode = _Fixnodeparent->_Left;

  003ad	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003b0	8b 00		 mov	 eax, DWORD PTR [eax]
  003b2	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN34@Extract:

; 609  :                     }
; 610  : 
; 611  :                     if (_Pnode->_Isnil) {

  003b5	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003b8	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  003bc	85 c0		 test	 eax, eax
  003be	74 0b		 je	 SHORT $LN35@Extract

; 612  :                         _Fixnode = _Fixnodeparent; // shouldn't happen

  003c0	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003c3	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 613  :                     } else if (_Pnode->_Right->_Color == _Black

  003c6	e9 87 00 00 00	 jmp	 $LN27@Extract
$LN35@Extract:

; 614  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  003cb	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003ce	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  003d1	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  003d5	83 f8 01	 cmp	 eax, 1
  003d8	75 1d		 jne	 SHORT $LN37@Extract
  003da	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003dd	8b 00		 mov	 eax, DWORD PTR [eax]
  003df	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  003e3	83 f8 01	 cmp	 eax, 1
  003e6	75 0f		 jne	 SHORT $LN37@Extract

; 615  :                         _Pnode->_Color = _Red;

  003e8	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003eb	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 616  :                         _Fixnode       = _Fixnodeparent;

  003ef	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  003f2	89 45 f0	 mov	 DWORD PTR __Fixnode$[ebp], eax

; 617  :                     } else { // must rearrange left subtree

  003f5	eb 5b		 jmp	 SHORT $LN27@Extract
$LN37@Extract:

; 618  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  003f7	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  003fa	8b 00		 mov	 eax, DWORD PTR [eax]
  003fc	0f be 40 0c	 movsx	 eax, BYTE PTR [eax+12]
  00400	83 f8 01	 cmp	 eax, 1
  00403	75 24		 jne	 SHORT $LN39@Extract

; 619  :                             _Pnode->_Right->_Color = _Black;

  00405	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00408	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0040b	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 620  :                             _Pnode->_Color         = _Red;

  0040f	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00412	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 621  :                             _Lrotate(_Pnode);

  00416	ff 75 f8	 push	 DWORD PTR __Pnode$[ebp]
  00419	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0041c	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Lrotate

; 622  :                             _Pnode = _Fixnodeparent->_Left;

  00421	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00424	8b 00		 mov	 eax, DWORD PTR [eax]
  00426	89 45 f8	 mov	 DWORD PTR __Pnode$[ebp], eax
$LN39@Extract:

; 623  :                         }
; 624  : 
; 625  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00429	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0042c	8b 4d f4	 mov	 ecx, DWORD PTR __Fixnodeparent$[ebp]
  0042f	8a 49 0c	 mov	 cl, BYTE PTR [ecx+12]
  00432	88 48 0c	 mov	 BYTE PTR [eax+12], cl

; 626  :                         _Fixnodeparent->_Color = _Black;

  00435	8b 45 f4	 mov	 eax, DWORD PTR __Fixnodeparent$[ebp]
  00438	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 627  :                         _Pnode->_Left->_Color  = _Black;

  0043c	8b 45 f8	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0043f	8b 00		 mov	 eax, DWORD PTR [eax]
  00441	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 628  :                         _Rrotate(_Fixnodeparent);

  00445	ff 75 f4	 push	 DWORD PTR __Fixnodeparent$[ebp]
  00448	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0044b	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Rrotate

; 629  :                         break; // tree now recolored/rebalanced

  00450	eb 05		 jmp	 SHORT $LN3@Extract
$LN27@Extract:

; 630  :                     }
; 631  :                 }
; 632  :             }

  00452	e9 15 fe ff ff	 jmp	 $LN2@Extract
$LN3@Extract:

; 633  : 
; 634  :             _Fixnode->_Color = _Black; // stopping node is black

  00457	8b 45 f0	 mov	 eax, DWORD PTR __Fixnode$[ebp]
  0045a	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
$LN25@Extract:

; 635  :         }
; 636  : 
; 637  :         if (0 < _Mysize) {

  0045e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00461	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00465	76 0d		 jbe	 SHORT $LN40@Extract

; 638  :             --_Mysize;

  00467	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0046a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0046d	48		 dec	 eax
  0046e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00471	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN40@Extract:

; 639  :         }
; 640  : 
; 641  :         return _Erasednode;

  00474	8b 45 ec	 mov	 eax, DWORD PTR __Erasednode$[ebp]

; 642  :     }

  00477	c9		 leave
  00478	c2 04 00	 ret	 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Rrotate, COMDAT
; _this$ = ecx

; 480  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 481  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00008	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 482  :         _Wherenode->_Left = _Pnode->_Right;

  00010	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00013	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00016	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00019	89 08		 mov	 DWORD PTR [eax], ecx

; 483  : 
; 484  :         if (!_Pnode->_Right->_Isnil) {

  0001b	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0001e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00021	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00025	85 c0		 test	 eax, eax
  00027	75 0c		 jne	 SHORT $LN2@Rrotate

; 485  :             _Pnode->_Right->_Parent = _Wherenode;

  00029	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00032	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN2@Rrotate:

; 486  :         }
; 487  : 
; 488  :         _Pnode->_Parent = _Wherenode->_Parent;

  00035	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0003b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 489  : 
; 490  :         if (_Wherenode == _Myhead->_Parent) {

  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 00		 mov	 eax, DWORD PTR [eax]
  00046	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00049	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0004c	75 0d		 jne	 SHORT $LN3@Rrotate

; 491  :             _Myhead->_Parent = _Pnode;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 00		 mov	 eax, DWORD PTR [eax]
  00053	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00056	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00059	eb 27		 jmp	 SHORT $LN4@Rrotate
$LN3@Rrotate:

; 492  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0005b	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0005e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00061	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00064	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00067	75 0e		 jne	 SHORT $LN5@Rrotate

; 493  :             _Wherenode->_Parent->_Right = _Pnode;

  00069	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0006c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00072	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 494  :         } else {

  00075	eb 0b		 jmp	 SHORT $LN4@Rrotate
$LN5@Rrotate:

; 495  :             _Wherenode->_Parent->_Left = _Pnode;

  00077	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0007a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00080	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@Rrotate:

; 496  :         }
; 497  : 
; 498  :         _Pnode->_Right      = _Wherenode;

  00082	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00085	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00088	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 499  :         _Wherenode->_Parent = _Pnode;

  0008b	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0008e	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00091	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 500  :     }

  00094	c9		 leave
  00095	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = -4						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Lrotate, COMDAT
; _this$ = ecx

; 458  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 459  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00008	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0000b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000e	89 45 fc	 mov	 DWORD PTR __Pnode$[ebp], eax

; 460  :         _Wherenode->_Right = _Pnode->_Left;

  00011	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00014	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00017	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00019	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 461  : 
; 462  :         if (!_Pnode->_Left->_Isnil) {

  0001c	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  00025	85 c0		 test	 eax, eax
  00027	75 0b		 jne	 SHORT $LN2@Lrotate

; 463  :             _Pnode->_Left->_Parent = _Wherenode;

  00029	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00031	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN2@Lrotate:

; 464  :         }
; 465  : 
; 466  :         _Pnode->_Parent = _Wherenode->_Parent;

  00034	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00037	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  0003a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 467  : 
; 468  :         if (_Wherenode == _Myhead->_Parent) {

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 00		 mov	 eax, DWORD PTR [eax]
  00045	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00048	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0004b	75 0d		 jne	 SHORT $LN3@Lrotate

; 469  :             _Myhead->_Parent = _Pnode;

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 00		 mov	 eax, DWORD PTR [eax]
  00052	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00055	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00058	eb 26		 jmp	 SHORT $LN4@Lrotate
$LN3@Lrotate:

; 470  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  0005a	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0005d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00060	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00063	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00065	75 0d		 jne	 SHORT $LN5@Lrotate

; 471  :             _Wherenode->_Parent->_Left = _Pnode;

  00067	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0006a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  00070	89 08		 mov	 DWORD PTR [eax], ecx

; 472  :         } else {

  00072	eb 0c		 jmp	 SHORT $LN4@Lrotate
$LN5@Lrotate:

; 473  :             _Wherenode->_Parent->_Right = _Pnode;

  00074	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00077	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0007d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN4@Lrotate:

; 474  :         }
; 475  : 
; 476  :         _Pnode->_Left       = _Wherenode;

  00080	8b 45 fc	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00083	8b 4d 08	 mov	 ecx, DWORD PTR __Wherenode$[ebp]
  00086	89 08		 mov	 DWORD PTR [eax], ecx

; 477  :         _Wherenode->_Parent = _Pnode;

  00088	8b 45 08	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0008b	8b 4d fc	 mov	 ecx, DWORD PTR __Pnode$[ebp]
  0008e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 478  :     }

  00091	c9		 leave
  00092	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
__Alproxy$ = -28					; size = 4
__Scary$ = -24						; size = 4
$T1 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
_this$ = -8						; size = 4
_$S12$ = -1						; size = 1
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 2017 :     void _Alloc_sentinel_and_proxy() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 f4	 mov	 eax, DWORD PTR $T3[ebp]
  00012	89 45 e8	 mov	 DWORD PTR __Scary$[ebp], eax

; 2018 :         const auto _Scary = _Get_scary();
; 2019 :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

  00015	8d 45 ff	 lea	 eax, DWORD PTR _$S12$[ebp]
  00018	89 45 e4	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2039 :         return _Mypair._Myval2._Get_first();

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0001e	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2039 :         return _Mypair._Myval2._Get_first();

  00021	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00024	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax

; 2020 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);
; 2021 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00027	ff 75 ec	 push	 DWORD PTR $T1[ebp]
  0002a	e8 00 00 00 00	 call	 ??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
  0002f	59		 pop	 ecx
  00030	8b 4d e8	 mov	 ecx, DWORD PTR __Scary$[ebp]
  00033	89 01		 mov	 DWORD PTR [ecx], eax

; 2022 :         _Proxy._Release();
; 2023 :     }

  00035	c9		 leave
  00036	c3		 ret	 0
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Alloc_sentinel_and_proxy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Check_grow_by_1, COMDAT
; _this$ = ecx

; 1718 :     void _Check_grow_by_1() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1719 :         if (max_size() == _Get_scary()->_Mysize) {

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?max_size@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::max_size
  0001d	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00020	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00023	75 05		 jne	 SHORT $LN3@Check_grow

; 1720 :             _Throw_tree_length_error();

  00025	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN3@Check_grow:

; 1721 :         }
; 1722 :     }

  0002a	c9		 leave
  0002b	c3		 ret	 0
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@@2@ABUSItemPos@@@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
___param0$ = -12					; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@@2@ABUSItemPos@@@Z PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::find, COMDAT
; _this$ = ecx

; 1467 :     _NODISCARD iterator find(const key_type& _Keyval) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax

; 1468 :         return iterator(_Find(_Keyval), _Get_scary());

  00015	ff 75 0c	 push	 DWORD PTR __Keyval$[ebp]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ??$_Find@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Find<SItemPos>
  00020	89 45 f4	 mov	 DWORD PTR ___param0$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00026	8b 4d f4	 mov	 ecx, DWORD PTR ___param0$[ebp]
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 1468 :         return iterator(_Find(_Keyval), _Get_scary());

  0002b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1469 :     }

  0002e	c9		 leave
  0002f	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@@2@ABUSItemPos@@@Z ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_this$ = -12						; size = 4
__Scary$ = -8						; size = 4
__Head$ = -4						; size = 4
?clear@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::clear, COMDAT
; _this$ = ecx

; 1444 :     void clear() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00012	89 45 f8	 mov	 DWORD PTR __Scary$[ebp], eax

; 1445 :         const auto _Scary = _Get_scary();
; 1446 :         _Scary->_Orphan_ptr(nullptr);
; 1447 :         auto _Head = _Scary->_Myhead;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __Scary$[ebp]
  00018	8b 00		 mov	 eax, DWORD PTR [eax]
  0001a	89 45 fc	 mov	 DWORD PTR __Head$[ebp], eax

; 2039 :         return _Mypair._Myval2._Get_first();

  0001d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00020	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2039 :         return _Mypair._Myval2._Get_first();

  00023	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00026	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax

; 1448 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00029	8b 45 fc	 mov	 eax, DWORD PTR __Head$[ebp]
  0002c	ff 70 04	 push	 DWORD PTR [eax+4]
  0002f	ff 75 e8	 push	 DWORD PTR $T1[ebp]
  00032	8b 4d f8	 mov	 ecx, DWORD PTR __Scary$[ebp]
  00035	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >

; 1449 :         _Head->_Parent  = _Head;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR __Head$[ebp]
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __Head$[ebp]
  00040	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1450 :         _Head->_Left    = _Head;

  00043	8b 45 fc	 mov	 eax, DWORD PTR __Head$[ebp]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR __Head$[ebp]
  00049	89 08		 mov	 DWORD PTR [eax], ecx

; 1451 :         _Head->_Right   = _Head;

  0004b	8b 45 fc	 mov	 eax, DWORD PTR __Head$[ebp]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __Head$[ebp]
  00051	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1452 :         _Scary->_Mysize = 0;

  00054	8b 45 f8	 mov	 eax, DWORD PTR __Scary$[ebp]
  00057	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 1453 :     }

  0005b	c9		 leave
  0005c	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::clear
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAEIABUSItemPos@@@Z
_TEXT	SEGMENT
__Where$ = -32						; size = 8
__Num$ = -24						; size = 4
__Pnode$ = -20						; size = 4
__Pnode$ = -16						; size = 4
_this$ = -12						; size = 4
__First$ = -8						; size = 4
__Last$ = -4						; size = 4
__Keyval$ = 8						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAEIABUSItemPos@@@Z PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::erase, COMDAT
; _this$ = ecx

; 1435 :     size_type erase(const key_type& _Keyval) noexcept(noexcept(_Eqrange(_Keyval))) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1436 :         const auto _Where = _Eqrange(_Keyval);

  00009	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
  0000c	8d 45 e0	 lea	 eax, DWORD PTR __Where$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Eqrange@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IBE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@PAU12@@1@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Eqrange<SItemPos>

; 1437 :         const _Unchecked_const_iterator _First(_Where.first, nullptr);

  00018	8b 45 e0	 mov	 eax, DWORD PTR __Where$[ebp]
  0001b	89 45 f0	 mov	 DWORD PTR __Pnode$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001e	8b 45 f0	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR __First$[ebp], eax

; 1438 :         const _Unchecked_const_iterator _Last(_Where.second, nullptr);

  00024	8b 45 e4	 mov	 eax, DWORD PTR __Where$[ebp+4]
  00027	89 45 ec	 mov	 DWORD PTR __Pnode$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	8b 45 ec	 mov	 eax, DWORD PTR __Pnode$[ebp]
  0002d	89 45 fc	 mov	 DWORD PTR __Last$[ebp], eax

; 1439 :         const auto _Num = static_cast<size_type>(_STD distance(_First, _Last));

  00030	ff 75 fc	 push	 DWORD PTR __Last$[ebp]
  00033	ff 75 f8	 push	 DWORD PTR __First$[ebp]
  00036	e8 00 00 00 00	 call	 ??$distance@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAHV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@0@0@Z ; std::distance<std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0> >
  0003b	59		 pop	 ecx
  0003c	59		 pop	 ecx
  0003d	89 45 e8	 mov	 DWORD PTR __Num$[ebp], eax

; 1440 :         _Erase_unchecked(_First, _Last);

  00040	ff 75 fc	 push	 DWORD PTR __Last$[ebp]
  00043	ff 75 f8	 push	 DWORD PTR __First$[ebp]
  00046	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@0@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Erase_unchecked

; 1441 :         return _Num;

  0004e	8b 45 e8	 mov	 eax, DWORD PTR __Num$[ebp]

; 1442 :     }

  00051	c9		 leave
  00052	c2 04 00	 ret	 4
?erase@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAEIABUSItemPos@@@Z ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@0@Z
_TEXT	SEGMENT
$T1 = -48						; size = 4
$T2 = -44						; size = 4
__Tmp$3 = -40						; size = 4
__Begin$ = -36						; size = 4
___param0$ = -32					; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
tv153 = -20						; size = 4
tv136 = -16						; size = 4
tv129 = -12						; size = 4
_this$ = -8						; size = 4
$T6 = -3						; size = 1
$T7 = -2						; size = 1
$T8 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Erase_unchecked, COMDAT
; _this$ = ecx

; 1395 :     _Nodeptr _Erase_unchecked(_Unchecked_const_iterator _First, _Unchecked_const_iterator _Last) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  00012	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax

; 1259 :         return _Unchecked_iterator(_Get_scary()->_Myhead->_Left, nullptr);

  00015	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  00018	8b 00		 mov	 eax, DWORD PTR [eax]
  0001a	8b 00		 mov	 eax, DWORD PTR [eax]
  0001c	89 45 e0	 mov	 DWORD PTR ___param0$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001f	8b 45 e0	 mov	 eax, DWORD PTR ___param0$[ebp]
  00022	89 45 dc	 mov	 DWORD PTR __Begin$[ebp], eax

; 98   :         return _Ptr == _Right._Ptr;

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	3b 45 dc	 cmp	 eax, DWORD PTR __Begin$[ebp]
  0002b	75 09		 jne	 SHORT $LN26@Erase_unch
  0002d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv129[ebp], 1
  00034	eb 04		 jmp	 SHORT $LN27@Erase_unch
$LN26@Erase_unch:
  00036	83 65 f4 00	 and	 DWORD PTR tv129[ebp], 0
$LN27@Erase_unch:
  0003a	8a 45 f4	 mov	 al, BYTE PTR tv129[ebp]
  0003d	88 45 ff	 mov	 BYTE PTR $T8[ebp], al

; 1396 :         const auto _Begin = _Unchecked_begin();
; 1397 :         if (_First == _Begin && _Last._Ptr->_Isnil) {

  00040	0f b6 45 ff	 movzx	 eax, BYTE PTR $T8[ebp]
  00044	85 c0		 test	 eax, eax
  00046	74 18		 je	 SHORT $LN2@Erase_unch
  00048	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0004b	0f be 40 0d	 movsx	 eax, BYTE PTR [eax+13]
  0004f	85 c0		 test	 eax, eax
  00051	74 0d		 je	 SHORT $LN2@Erase_unch

; 1398 :             // erase all
; 1399 :             clear();

  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::clear

; 1400 :             return _Last._Ptr;

  0005b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0005e	eb 6a		 jmp	 SHORT $LN5@Erase_unch
$LN2@Erase_unch:

; 98   :         return _Ptr == _Right._Ptr;

  00060	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00063	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00066	75 09		 jne	 SHORT $LN75@Erase_unch
  00068	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv136[ebp], 1
  0006f	eb 04		 jmp	 SHORT $LN76@Erase_unch
$LN75@Erase_unch:
  00071	83 65 f0 00	 and	 DWORD PTR tv136[ebp], 0
$LN76@Erase_unch:
  00075	8a 45 f0	 mov	 al, BYTE PTR tv136[ebp]
  00078	88 45 fe	 mov	 BYTE PTR $T7[ebp], al

; 102  :         return !(*this == _Right);

  0007b	0f b6 45 fe	 movzx	 eax, BYTE PTR $T7[ebp]
  0007f	85 c0		 test	 eax, eax
  00081	75 09		 jne	 SHORT $LN70@Erase_unch
  00083	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv153[ebp], 1
  0008a	eb 04		 jmp	 SHORT $LN71@Erase_unch
$LN70@Erase_unch:
  0008c	83 65 ec 00	 and	 DWORD PTR tv153[ebp], 0
$LN71@Erase_unch:
  00090	8a 45 ec	 mov	 al, BYTE PTR tv153[ebp]
  00093	88 45 fd	 mov	 BYTE PTR $T6[ebp], al

; 1401 :         }
; 1402 : 
; 1403 :         // partial erase, one at a time
; 1404 :         while (_First != _Last) {

  00096	0f b6 45 fd	 movzx	 eax, BYTE PTR $T6[ebp]
  0009a	85 c0		 test	 eax, eax
  0009c	74 29		 je	 SHORT $LN3@Erase_unch

; 67   :         _Tree_unchecked_const_iterator _Tmp = *this;

  0009e	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000a1	89 45 d8	 mov	 DWORD PTR __Tmp$3[ebp], eax

; 68   :         ++*this;

  000a4	8d 4d 08	 lea	 ecx, DWORD PTR __First$[ebp]
  000a7	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0>::operator++

; 69   :         return _Tmp;

  000ac	8b 45 d8	 mov	 eax, DWORD PTR __Tmp$3[ebp]
  000af	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
  000b2	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  000b5	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax

; 1405 :             _Erase_unchecked(_First++);

  000b8	8b 45 d0	 mov	 eax, DWORD PTR $T1[ebp]
  000bb	ff 30		 push	 DWORD PTR [eax]
  000bd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c0	e8 00 00 00 00	 call	 ?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Erase_unchecked

; 1406 :         }

  000c5	eb 99		 jmp	 SHORT $LN2@Erase_unch
$LN3@Erase_unch:

; 1407 : 
; 1408 :         return _Last._Ptr;

  000c7	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
$LN5@Erase_unch:

; 1409 :     }

  000ca	c9		 leave
  000cb	c2 08 00	 ret	 8
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Erase_unchecked
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
$T1 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
__Scary$ = -20						; size = 4
$T4 = -16						; size = 4
__Successor$ = -12					; size = 4
__Erasednode$ = -8					; size = 4
_this$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Erase_unchecked, COMDAT
; _this$ = ecx

; 1385 :     _Nodeptr _Erase_unchecked(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]
  00012	89 45 ec	 mov	 DWORD PTR __Scary$[ebp], eax

; 1386 :         const auto _Scary                    = _Get_scary();
; 1387 :         _Unchecked_const_iterator _Successor = _Where;

  00015	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00018	89 45 f4	 mov	 DWORD PTR __Successor$[ebp], eax

; 1388 :         ++_Successor; // save successor iterator for return

  0001b	8d 4d f4	 lea	 ecx, DWORD PTR __Successor$[ebp]
  0001e	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0>::operator++

; 1389 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00023	ff 75 08	 push	 DWORD PTR __Where$[ebp]
  00026	8b 4d ec	 mov	 ecx, DWORD PTR __Scary$[ebp]
  00029	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Extract
  0002e	89 45 f8	 mov	 DWORD PTR __Erasednode$[ebp], eax

; 2039 :         return _Mypair._Myval2._Get_first();

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00034	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2039 :         return _Mypair._Myval2._Get_first();

  00037	8b 45 e8	 mov	 eax, DWORD PTR $T3[ebp]
  0003a	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax

; 379  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  0003d	8b 45 f8	 mov	 eax, DWORD PTR __Erasednode$[ebp]
  00040	83 c0 0e	 add	 eax, 14			; 0000000eH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00043	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 380  :         _Freenode0(_Al, _Ptr);

  00046	ff 75 f8	 push	 DWORD PTR __Erasednode$[ebp]
  00049	ff 75 e4	 push	 DWORD PTR $T2[ebp]
  0004c	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
  00051	59		 pop	 ecx
  00052	59		 pop	 ecx

; 1390 :         _Scary->_Orphan_ptr(_Erasednode);
; 1391 :         _Node::_Freenode(_Getal(), _Erasednode); // delete erased node
; 1392 :         return _Successor._Ptr; // return successor nodeptr

  00053	8b 45 f4	 mov	 eax, DWORD PTR __Successor$[ebp]

; 1393 :     }

  00056	c9		 leave
  00057	c2 04 00	 ret	 4
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Erase_unchecked
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
tv68 = -12						; size = 4
$T6 = -8						; size = 4
$T7 = -4						; size = 4
?max_size@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1310 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2043 :         return _Mypair._Myval2._Get_first();

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0000c	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2043 :         return _Mypair._Myval2._Get_first();

  0000f	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  00012	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00015	c7 45 fc ff ff
	ff 07		 mov	 DWORD PTR $T7[ebp], 134217727 ; 07ffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  0001c	c7 45 e8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1311 :         return (_STD min)(

  00023	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00026	89 45 f8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00029	8b 45 fc	 mov	 eax, DWORD PTR $T7[ebp]
  0002c	3b 45 f8	 cmp	 eax, DWORD PTR $T6[ebp]
  0002f	73 08		 jae	 SHORT $LN17@max_size
  00031	8d 45 fc	 lea	 eax, DWORD PTR $T7[ebp]
  00034	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
  00037	eb 06		 jmp	 SHORT $LN18@max_size
$LN17@max_size:
  00039	8d 45 f8	 lea	 eax, DWORD PTR $T6[ebp]
  0003c	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
$LN18@max_size:
  0003f	8b 45 f4	 mov	 eax, DWORD PTR tv68[ebp]
  00042	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
  00045	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00048	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 1311 :         return (_STD min)(

  0004b	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  0004e	8b 00		 mov	 eax, DWORD PTR [eax]

; 1312 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1313 :     }

  00050	c9		 leave
  00051	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
_this$ = -8						; size = 4
__Scary$ = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::~_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >, COMDAT
; _this$ = ecx

; 1189 :     ~_Tree() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0000f	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Scary$[ebp], eax

; 2039 :         return _Mypair._Myval2._Get_first();

  00015	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00018	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2039 :         return _Mypair._Myval2._Get_first();

  0001b	8b 45 ec	 mov	 eax, DWORD PTR $T1[ebp]
  0001e	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax

; 752  :         _Erase_tree(_Al, _Myhead->_Parent);

  00021	8b 45 fc	 mov	 eax, DWORD PTR __Scary$[ebp]
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	ff 70 04	 push	 DWORD PTR [eax+4]
  00029	ff 75 f4	 push	 DWORD PTR $T3[ebp]
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR __Scary$[ebp]
  0002f	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >

; 753  :         _Alnode::value_type::_Freenode0(_Al, _Myhead);

  00034	8b 45 fc	 mov	 eax, DWORD PTR __Scary$[ebp]
  00037	ff 30		 push	 DWORD PTR [eax]
  00039	ff 75 f4	 push	 DWORD PTR $T3[ebp]
  0003c	e8 00 00 00 00	 call	 ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<SItemPos const ,SShopItemTable>,void *> > >
  00041	59		 pop	 ecx
  00042	59		 pop	 ecx

; 1190 :         const auto _Scary = _Get_scary();
; 1191 :         _Scary->_Erase_head(_Getal());
; 1192 : #if _ITERATOR_DEBUG_LEVEL != 0 // TRANSITION, ABI
; 1193 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());
; 1194 :         _Delete_plain_internal(_Alproxy, _Scary->_Myproxy);
; 1195 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 1196 :     }

  00043	c9		 leave
  00044	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::~_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@USItemPos@@@1@@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
_this$ = -24						; size = 4
$T1 = -20						; size = 4
_this$2 = -16						; size = 4
_this$ = -12						; size = 4
___formal$ = -8						; size = 1
$T3 = -1						; size = 1
__Parg$ = 8						; size = 4
??0?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@USItemPos@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >, COMDAT
; _this$ = ecx

; 885  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t{}, _Parg, _Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0000f	8d 45 ff	 lea	 eax, DWORD PTR $T3[ebp]
  00012	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1344 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00015	8b 45 ec	 mov	 eax, DWORD PTR $T1[ebp]
  00018	8a 00		 mov	 al, BYTE PTR [eax]
  0001a	88 45 f8	 mov	 BYTE PTR ___formal$[ebp], al
  0001d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00020	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00023	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00026	89 45 f0	 mov	 DWORD PTR _this$2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 435  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00029	8b 45 f0	 mov	 eax, DWORD PTR _this$2[ebp]
  0002c	83 20 00	 and	 DWORD PTR [eax], 0
  0002f	8b 45 f0	 mov	 eax, DWORD PTR _this$2[ebp]
  00032	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 886  :         _Alloc_sentinel_and_proxy();

  00036	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Alloc_sentinel_and_proxy

; 887  :     }

  0003e	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00041	c9		 leave
  00042	c2 04 00	 ret	 4
??0?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@USItemPos@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??1ShopTab@CPythonShop@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ShopTab@CPythonShop@@QAE@XZ PROC			; CPythonShop::ShopTab::~ShopTab, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 04	 add	 ecx, 4

; 2801 :         _Tidy_deallocate();

  0000d	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
  00012	c9		 leave
  00013	c3		 ret	 0
??1ShopTab@CPythonShop@@QAE@XZ ENDP			; CPythonShop::ShopTab::~ShopTab
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.h
;	COMDAT ??0ShopTab@CPythonShop@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ShopTab@CPythonShop@@QAE@XZ PROC			; CPythonShop::ShopTab::ShopTab, COMDAT
; _this$ = ecx

; 68   : 			ShopTab()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 04	 add	 ecx, 4
  0000d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 69   : 			{
; 70   : 				coinType = SHOP_COIN_TYPE_GOLD;

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c6 00 00	 mov	 BYTE PTR [eax], 0

; 71   : 			}

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c9		 leave
  0001c	c3		 ret	 0
??0ShopTab@CPythonShop@@QAE@XZ ENDP			; CPythonShop::ShopTab::ShopTab
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?BuildPrivateShop@CPythonShop@@QAEXPBD@Z
_TEXT	SEGMENT
$T2 = -80						; size = 4
$T3 = -76						; size = 4
$T4 = -72						; size = 4
$T5 = -68						; size = 1
$T6 = -64						; size = 4
__Ptr$7 = -60						; size = 4
__Ptr$8 = -56						; size = 4
__Last$ = -52						; size = 4
$T9 = -48						; size = 4
$T10 = -44						; size = 4
_this$ = -40						; size = 4
__First$ = -36						; size = 4
$T11 = -32						; size = 4
$T12 = -28						; size = 4
$T13 = -24						; size = 4
___param0$ = -20					; size = 4
$T14 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___param0$ = 0						; size = 4
$T15 = 4						; size = 4
$T16 = 8						; size = 4
$T17 = 12						; size = 4
$T18 = 16						; size = 4
$T19 = 20						; size = 4
$T20 = 24						; size = 4
$T21 = 28						; size = 4
___param0$ = 32						; size = 4
__Scary$22 = 36						; size = 4
$T23 = 40						; size = 4
___param0$ = 44						; size = 4
__Scary$24 = 48						; size = 4
$T25 = 52						; size = 4
$T26 = 56						; size = 4
$T27 = 60						; size = 4
$T28 = 64						; size = 4
_ItemStock$ = 68					; size = 12
__UFirst$29 = 80					; size = 4
__ULast$30 = 84						; size = 4
__My_data$31 = 88					; size = 4
__My_data$32 = 92					; size = 4
tv222 = 96						; size = 4
tv249 = 100						; size = 4
_itor$ = 104						; size = 4
_this$ = 108						; size = 4
$T33 = 113						; size = 1
$T34 = 114						; size = 1
$T35 = 115						; size = 1
_c_szName$ = 124					; size = 4
?BuildPrivateShop@CPythonShop@@QAEXPBD@Z PROC		; CPythonShop::BuildPrivateShop, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8d 6c 24 8c	 lea	 ebp, DWORD PTR [esp-116]
  00005	83 ec 74	 sub	 esp, 116		; 00000074H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$?BuildPrivateShop@CPythonShop@@QAEXPBD@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 44	 sub	 esp, 68			; 00000044H
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d 6c	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  0002d	8d 45 44	 lea	 eax, DWORD PTR _ItemStock$[ebp]
  00030	89 45 d8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00033	8b 4d d8	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@USShopItemTable@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SShopItemTable> >::_Vector_val<std::_Simple_types<SShopItemTable> >
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 147  : 	std::vector<TShopItemTable> ItemStock;

  0003b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0003f	8b 45 6c	 mov	 eax, DWORD PTR _this$[ebp]
  00042	05 90 14 00 00	 add	 eax, 5264		; 00001490H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00047	89 45 40	 mov	 DWORD PTR $T28[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2051 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0004a	8b 45 40	 mov	 eax, DWORD PTR $T28[ebp]
  0004d	89 45 3c	 mov	 DWORD PTR $T27[ebp], eax

; 1307 :         return _Get_scary()->_Mysize;

  00050	8b 45 3c	 mov	 eax, DWORD PTR $T27[ebp]
  00053	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00056	89 45 38	 mov	 DWORD PTR $T26[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 148  : 	ItemStock.reserve(m_PrivateShopItemStock.size());

  00059	ff 75 38	 push	 DWORD PTR $T26[ebp]
  0005c	8d 4d 44	 lea	 ecx, DWORD PTR _ItemStock$[ebp]
  0005f	e8 00 00 00 00	 call	 ?reserve@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEXI@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::reserve
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00064	8b 45 6c	 mov	 eax, DWORD PTR _this$[ebp]
  00067	05 90 14 00 00	 add	 eax, 5264		; 00001490H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0006c	89 45 34	 mov	 DWORD PTR $T25[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0006f	8b 45 34	 mov	 eax, DWORD PTR $T25[ebp]
  00072	89 45 30	 mov	 DWORD PTR __Scary$24[ebp], eax

; 1240 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00075	8b 45 30	 mov	 eax, DWORD PTR __Scary$24[ebp]
  00078	8b 00		 mov	 eax, DWORD PTR [eax]
  0007a	8b 00		 mov	 eax, DWORD PTR [eax]
  0007c	89 45 2c	 mov	 DWORD PTR ___param0$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0007f	8b 45 2c	 mov	 eax, DWORD PTR ___param0$[ebp]
  00082	89 45 68	 mov	 DWORD PTR _itor$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 151  : 	for (; itor != m_PrivateShopItemStock.end(); ++itor)

  00085	eb 08		 jmp	 SHORT $LN4@BuildPriva
$LN2@BuildPriva:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 198  :         _Mybase::operator++();

  00087	8d 4d 68	 lea	 ecx, DWORD PTR _itor$[ebp]
  0008a	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<SItemPos const ,SShopItemTable> > >,std::_Iterator_base0>::operator++
$LN4@BuildPriva:

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0008f	8b 45 6c	 mov	 eax, DWORD PTR _this$[ebp]
  00092	05 90 14 00 00	 add	 eax, 5264		; 00001490H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00097	89 45 28	 mov	 DWORD PTR $T23[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0009a	8b 45 28	 mov	 eax, DWORD PTR $T23[ebp]
  0009d	89 45 24	 mov	 DWORD PTR __Scary$22[ebp], eax

; 1250 :         return iterator(_Scary->_Myhead, _Scary);

  000a0	8b 45 24	 mov	 eax, DWORD PTR __Scary$22[ebp]
  000a3	8b 00		 mov	 eax, DWORD PTR [eax]
  000a5	89 45 20	 mov	 DWORD PTR ___param0$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000a8	8b 45 20	 mov	 eax, DWORD PTR ___param0$[ebp]
  000ab	89 45 1c	 mov	 DWORD PTR $T21[ebp], eax

; 1250 :         return iterator(_Scary->_Myhead, _Scary);

  000ae	8d 45 1c	 lea	 eax, DWORD PTR $T21[ebp]
  000b1	89 45 18	 mov	 DWORD PTR $T20[ebp], eax

; 232  :         return this->_Ptr == _Right._Ptr;

  000b4	8b 45 18	 mov	 eax, DWORD PTR $T20[ebp]
  000b7	8b 4d 68	 mov	 ecx, DWORD PTR _itor$[ebp]
  000ba	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000bc	75 09		 jne	 SHORT $LN122@BuildPriva
  000be	c7 45 64 01 00
	00 00		 mov	 DWORD PTR tv249[ebp], 1
  000c5	eb 04		 jmp	 SHORT $LN123@BuildPriva
$LN122@BuildPriva:
  000c7	83 65 64 00	 and	 DWORD PTR tv249[ebp], 0
$LN123@BuildPriva:
  000cb	8a 45 64	 mov	 al, BYTE PTR tv249[ebp]
  000ce	88 45 73	 mov	 BYTE PTR $T35[ebp], al

; 236  :         return !(*this == _Right);

  000d1	0f b6 45 73	 movzx	 eax, BYTE PTR $T35[ebp]
  000d5	85 c0		 test	 eax, eax
  000d7	75 09		 jne	 SHORT $LN117@BuildPriva
  000d9	c7 45 60 01 00
	00 00		 mov	 DWORD PTR tv222[ebp], 1
  000e0	eb 04		 jmp	 SHORT $LN118@BuildPriva
$LN117@BuildPriva:
  000e2	83 65 60 00	 and	 DWORD PTR tv222[ebp], 0
$LN118@BuildPriva:
  000e6	8a 45 60	 mov	 al, BYTE PTR tv222[ebp]
  000e9	88 45 72	 mov	 BYTE PTR $T34[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 151  : 	for (; itor != m_PrivateShopItemStock.end(); ++itor)

  000ec	0f b6 45 72	 movzx	 eax, BYTE PTR $T34[ebp]
  000f0	85 c0		 test	 eax, eax
  000f2	74 35		 je	 SHORT $LN3@BuildPriva
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 185  :         return this->_Ptr->_Myval;

  000f4	8b 45 68	 mov	 eax, DWORD PTR _itor$[ebp]
  000f7	83 c0 0e	 add	 eax, 14			; 0000000eH
  000fa	89 45 14	 mov	 DWORD PTR $T19[ebp], eax

; 273  :         return const_cast<reference>(_Mybase::operator*());

  000fd	8b 45 14	 mov	 eax, DWORD PTR $T19[ebp]
  00100	89 45 10	 mov	 DWORD PTR $T18[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00103	8b 45 10	 mov	 eax, DWORD PTR $T18[ebp]
  00106	89 45 0c	 mov	 DWORD PTR $T17[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  00109	8b 45 0c	 mov	 eax, DWORD PTR $T17[ebp]
  0010c	89 45 08	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 277  :         return pointer_traits<pointer>::pointer_to(**this);

  0010f	8b 45 08	 mov	 eax, DWORD PTR $T16[ebp]
  00112	89 45 04	 mov	 DWORD PTR $T15[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 153  : 		ItemStock.push_back(itor->second);

  00115	8b 45 04	 mov	 eax, DWORD PTR $T15[ebp]
  00118	83 c0 03	 add	 eax, 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  0011b	50		 push	 eax
  0011c	8d 4d 44	 lea	 ecx, DWORD PTR _ItemStock$[ebp]
  0011f	e8 00 00 00 00	 call	 ??$emplace_back@ABUSShopItemTable@@@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAEXABUSShopItemTable@@@Z ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::emplace_back<SShopItemTable const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 154  : 	}

  00124	e9 5e ff ff ff	 jmp	 $LN2@BuildPriva
$LN3@BuildPriva:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1420 :         auto& _My_data = _Mypair._Myval2;

  00129	8d 45 44	 lea	 eax, DWORD PTR _ItemStock$[ebp]
  0012c	89 45 5c	 mov	 DWORD PTR __My_data$32[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0012f	8b 45 5c	 mov	 eax, DWORD PTR __My_data$32[ebp]
  00132	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  00135	8b 45 5c	 mov	 eax, DWORD PTR __My_data$32[ebp]
  00138	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0013b	89 45 00	 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0013e	8b 45 00	 mov	 eax, DWORD PTR ___param0$[ebp]
  00141	89 45 f0	 mov	 DWORD PTR $T14[ebp], eax

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  00144	8d 45 f0	 lea	 eax, DWORD PTR $T14[ebp]
  00147	89 45 e4	 mov	 DWORD PTR $T12[ebp], eax

; 1410 :         auto& _My_data = _Mypair._Myval2;

  0014a	8d 45 44	 lea	 eax, DWORD PTR _ItemStock$[ebp]
  0014d	89 45 58	 mov	 DWORD PTR __My_data$31[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00150	8b 45 58	 mov	 eax, DWORD PTR __My_data$31[ebp]
  00153	89 45 b4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00156	8b 45 58	 mov	 eax, DWORD PTR __My_data$31[ebp]
  00159	8b 00		 mov	 eax, DWORD PTR [eax]
  0015b	89 45 ec	 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0015e	8b 45 ec	 mov	 eax, DWORD PTR ___param0$[ebp]
  00161	89 45 e8	 mov	 DWORD PTR $T13[ebp], eax

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00164	8d 45 e8	 lea	 eax, DWORD PTR $T13[ebp]
  00167	89 45 e0	 mov	 DWORD PTR $T11[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 156  : 	std::sort(ItemStock.begin(), ItemStock.end(), ItemStockSortFunc());

  0016a	8b 45 e4	 mov	 eax, DWORD PTR $T12[ebp]
  0016d	8b 00		 mov	 eax, DWORD PTR [eax]
  0016f	89 45 cc	 mov	 DWORD PTR __Last$[ebp], eax
  00172	8b 45 e0	 mov	 eax, DWORD PTR $T11[ebp]
  00175	8b 00		 mov	 eax, DWORD PTR [eax]
  00177	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  0017a	8b 45 dc	 mov	 eax, DWORD PTR __First$[ebp]
  0017d	89 45 c4	 mov	 DWORD PTR __Ptr$7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00180	8b 45 c4	 mov	 eax, DWORD PTR __Ptr$7[ebp]
  00183	89 45 d4	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  00186	8b 45 d4	 mov	 eax, DWORD PTR $T10[ebp]
  00189	89 45 d0	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7569 :     const auto _UFirst = _Get_unwrapped(_First);

  0018c	8b 45 d0	 mov	 eax, DWORD PTR $T9[ebp]
  0018f	89 45 50	 mov	 DWORD PTR __UFirst$29[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  00192	8b 45 cc	 mov	 eax, DWORD PTR __Last$[ebp]
  00195	89 45 c8	 mov	 DWORD PTR __Ptr$8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00198	8b 45 c8	 mov	 eax, DWORD PTR __Ptr$8[ebp]
  0019b	89 45 b8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 310  :         return _Unfancy(this->_Ptr);

  0019e	8b 45 b8	 mov	 eax, DWORD PTR $T4[ebp]
  001a1	89 45 c0	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\algorithm

; 7570 :     const auto _ULast  = _Get_unwrapped(_Last);

  001a4	8b 45 c0	 mov	 eax, DWORD PTR $T6[ebp]
  001a7	89 45 54	 mov	 DWORD PTR __ULast$30[ebp], eax

; 7571 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  001aa	8a 45 71	 mov	 al, BYTE PTR $T33[ebp]
  001ad	88 45 bc	 mov	 BYTE PTR $T5[ebp], al
  001b0	ff 75 bc	 push	 DWORD PTR $T5[ebp]
  001b3	8b 45 54	 mov	 eax, DWORD PTR __ULast$30[ebp]
  001b6	2b 45 50	 sub	 eax, DWORD PTR __UFirst$29[ebp]
  001b9	99		 cdq
  001ba	6a 0d		 push	 13			; 0000000dH
  001bc	59		 pop	 ecx
  001bd	f7 f9		 idiv	 ecx
  001bf	50		 push	 eax
  001c0	ff 75 54	 push	 DWORD PTR __ULast$30[ebp]
  001c3	ff 75 50	 push	 DWORD PTR __UFirst$29[ebp]
  001c6	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAUSShopItemTable@@UItemStockSortFunc@@@std@@YAXPAUSShopItemTable@@0HUItemStockSortFunc@@@Z ; std::_Sort_unchecked<SShopItemTable *,ItemStockSortFunc>
  001cb	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 158  : 	CPythonNetworkStream::Instance().SendBuildPrivateShopPacket(c_szName, ItemStock);

  001ce	8d 45 44	 lea	 eax, DWORD PTR _ItemStock$[ebp]
  001d1	50		 push	 eax
  001d2	ff 75 7c	 push	 DWORD PTR _c_szName$[ebp]
  001d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonNetworkStream@@@@0PAVCPythonNetworkStream@@A ; CSingleton<CPythonNetworkStream>::ms_singleton
  001db	e8 00 00 00 00	 call	 ?SendBuildPrivateShopPacket@CPythonNetworkStream@@QAE_NPBDABV?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@@Z ; CPythonNetworkStream::SendBuildPrivateShopPacket

; 159  : }

  001e0	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  001e4	8d 4d 44	 lea	 ecx, DWORD PTR _ItemStock$[ebp]
  001e7	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@AAEXXZ ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::_Tidy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 159  : }

  001ec	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f6	59		 pop	 ecx
  001f7	83 c5 74	 add	 ebp, 116		; 00000074H
  001fa	c9		 leave
  001fb	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?BuildPrivateShop@CPythonShop@@QAEXPBD@Z$0:
  00000	8d 4d 44	 lea	 ecx, DWORD PTR _ItemStock$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@USShopItemTable@@V?$allocator@USShopItemTable@@@std@@@std@@QAE@XZ ; std::vector<SShopItemTable,std::allocator<SShopItemTable> >::~vector<SShopItemTable,std::allocator<SShopItemTable> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?BuildPrivateShop@CPythonShop@@QAEXPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?BuildPrivateShop@CPythonShop@@QAEXPBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?BuildPrivateShop@CPythonShop@@QAEXPBD@Z ENDP		; CPythonShop::BuildPrivateShop
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?GetPrivateShopItemPrice@CPythonShop@@QAEHUSItemPos@@@Z
_TEXT	SEGMENT
_rShopItemTable$ = -60					; size = 4
$T1 = -56						; size = 4
$T2 = -52						; size = 4
$T3 = -48						; size = 4
$T4 = -44						; size = 4
$T5 = -40						; size = 4
$T6 = -36						; size = 4
$T7 = -32						; size = 4
___param0$ = -28					; size = 4
__Scary$8 = -24						; size = 4
$T9 = -20						; size = 4
_itor$ = -16						; size = 4
tv179 = -12						; size = 4
_this$ = -8						; size = 4
$T10 = -1						; size = 1
_ItemPos$ = 8						; size = 3
?GetPrivateShopItemPrice@CPythonShop@@QAEHUSItemPos@@@Z PROC ; CPythonShop::GetPrivateShopItemPrice, COMDAT
; _this$ = ecx

; 129  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 130  : 	TPrivateShopItemStock::iterator itor = m_PrivateShopItemStock.find(ItemPos);

  00009	8d 45 08	 lea	 eax, DWORD PTR _ItemPos$[ebp]
  0000c	50		 push	 eax
  0000d	8d 45 f0	 lea	 eax, DWORD PTR _itor$[ebp]
  00010	50		 push	 eax
  00011	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	81 c1 90 14 00
	00		 add	 ecx, 5264		; 00001490H
  0001a	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@@2@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::find
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	05 90 14 00 00	 add	 eax, 5264		; 00001490H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00027	89 45 ec	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0002a	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp]
  0002d	89 45 e8	 mov	 DWORD PTR __Scary$8[ebp], eax

; 1250 :         return iterator(_Scary->_Myhead, _Scary);

  00030	8b 45 e8	 mov	 eax, DWORD PTR __Scary$8[ebp]
  00033	8b 00		 mov	 eax, DWORD PTR [eax]
  00035	89 45 e4	 mov	 DWORD PTR ___param0$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00038	8b 45 e4	 mov	 eax, DWORD PTR ___param0$[ebp]
  0003b	89 45 e0	 mov	 DWORD PTR $T7[ebp], eax

; 1250 :         return iterator(_Scary->_Myhead, _Scary);

  0003e	8d 45 e0	 lea	 eax, DWORD PTR $T7[ebp]
  00041	89 45 dc	 mov	 DWORD PTR $T6[ebp], eax

; 232  :         return this->_Ptr == _Right._Ptr;

  00044	8b 45 dc	 mov	 eax, DWORD PTR $T6[ebp]
  00047	8b 00		 mov	 eax, DWORD PTR [eax]
  00049	3b 45 f0	 cmp	 eax, DWORD PTR _itor$[ebp]
  0004c	75 09		 jne	 SHORT $LN75@GetPrivate
  0004e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv179[ebp], 1
  00055	eb 04		 jmp	 SHORT $LN76@GetPrivate
$LN75@GetPrivate:
  00057	83 65 f4 00	 and	 DWORD PTR tv179[ebp], 0
$LN76@GetPrivate:
  0005b	8a 45 f4	 mov	 al, BYTE PTR tv179[ebp]
  0005e	88 45 ff	 mov	 BYTE PTR $T10[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 132  : 	if (m_PrivateShopItemStock.end() == itor)

  00061	0f b6 45 ff	 movzx	 eax, BYTE PTR $T10[ebp]
  00065	85 c0		 test	 eax, eax
  00067	74 04		 je	 SHORT $LN2@GetPrivate

; 133  : 		return 0;

  00069	33 c0		 xor	 eax, eax
  0006b	eb 30		 jmp	 SHORT $LN1@GetPrivate
$LN2@GetPrivate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 185  :         return this->_Ptr->_Myval;

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _itor$[ebp]
  00070	83 c0 0e	 add	 eax, 14			; 0000000eH
  00073	89 45 d8	 mov	 DWORD PTR $T5[ebp], eax

; 273  :         return const_cast<reference>(_Mybase::operator*());

  00076	8b 45 d8	 mov	 eax, DWORD PTR $T5[ebp]
  00079	89 45 d4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0007c	8b 45 d4	 mov	 eax, DWORD PTR $T4[ebp]
  0007f	89 45 d0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 151  :         return _STD addressof(_Val);

  00082	8b 45 d0	 mov	 eax, DWORD PTR $T3[ebp]
  00085	89 45 cc	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 277  :         return pointer_traits<pointer>::pointer_to(**this);

  00088	8b 45 cc	 mov	 eax, DWORD PTR $T2[ebp]
  0008b	89 45 c8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 135  : 	TShopItemTable & rShopItemTable = itor->second;

  0008e	8b 45 c8	 mov	 eax, DWORD PTR $T1[ebp]
  00091	83 c0 03	 add	 eax, 3
  00094	89 45 c4	 mov	 DWORD PTR _rShopItemTable$[ebp], eax

; 136  : 	return rShopItemTable.price;

  00097	8b 45 c4	 mov	 eax, DWORD PTR _rShopItemTable$[ebp]
  0009a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$LN1@GetPrivate:

; 137  : }

  0009d	c9		 leave
  0009e	c2 04 00	 ret	 4
?GetPrivateShopItemPrice@CPythonShop@@QAEHUSItemPos@@@Z ENDP ; CPythonShop::GetPrivateShopItemPrice
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?DelPrivateShopItemStock@CPythonShop@@QAEXUSItemPos@@@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
___param0$ = -36					; size = 4
__Scary$5 = -32						; size = 4
$T6 = -28						; size = 4
___param0$ = -24					; size = 4
$T7 = -20						; size = 4
tv197 = -16						; size = 4
_this$ = -12						; size = 4
_this$ = -8						; size = 4
$T8 = -1						; size = 1
_ItemPos$ = 8						; size = 3
?DelPrivateShopItemStock@CPythonShop@@QAEXUSItemPos@@@Z PROC ; CPythonShop::DelPrivateShopItemStock, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 123  : 	if (m_PrivateShopItemStock.end() == m_PrivateShopItemStock.find(ItemPos))

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	05 90 14 00 00	 add	 eax, 5264		; 00001490H
  00011	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00014	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00017	89 45 ec	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  0001a	8b 45 ec	 mov	 eax, DWORD PTR $T7[ebp]
  0001d	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1468 :         return iterator(_Find(_Keyval), _Get_scary());

  00020	8d 45 08	 lea	 eax, DWORD PTR _ItemPos$[ebp]
  00023	50		 push	 eax
  00024	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??$_Find@USItemPos@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@PAX@1@ABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Find<SItemPos>
  0002c	89 45 e8	 mov	 DWORD PTR ___param0$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002f	8b 45 e8	 mov	 eax, DWORD PTR ___param0$[ebp]
  00032	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	05 90 14 00 00	 add	 eax, 5264		; 00001490H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0003d	89 45 e4	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree

; 2047 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00040	8b 45 e4	 mov	 eax, DWORD PTR $T6[ebp]
  00043	89 45 e0	 mov	 DWORD PTR __Scary$5[ebp], eax

; 1250 :         return iterator(_Scary->_Myhead, _Scary);

  00046	8b 45 e0	 mov	 eax, DWORD PTR __Scary$5[ebp]
  00049	8b 00		 mov	 eax, DWORD PTR [eax]
  0004b	89 45 dc	 mov	 DWORD PTR ___param0$[ebp], eax

; 39   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0004e	8b 45 dc	 mov	 eax, DWORD PTR ___param0$[ebp]
  00051	89 45 d8	 mov	 DWORD PTR $T4[ebp], eax

; 1250 :         return iterator(_Scary->_Myhead, _Scary);

  00054	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  00057	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax

; 232  :         return this->_Ptr == _Right._Ptr;

  0005a	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  0005d	8b 00		 mov	 eax, DWORD PTR [eax]
  0005f	3b 45 d0	 cmp	 eax, DWORD PTR $T2[ebp]
  00062	75 09		 jne	 SHORT $LN75@DelPrivate
  00064	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv197[ebp], 1
  0006b	eb 04		 jmp	 SHORT $LN76@DelPrivate
$LN75@DelPrivate:
  0006d	83 65 f0 00	 and	 DWORD PTR tv197[ebp], 0
$LN76@DelPrivate:
  00071	8a 45 f0	 mov	 al, BYTE PTR tv197[ebp]
  00074	88 45 ff	 mov	 BYTE PTR $T8[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 123  : 	if (m_PrivateShopItemStock.end() == m_PrivateShopItemStock.find(ItemPos))

  00077	0f b6 45 ff	 movzx	 eax, BYTE PTR $T8[ebp]
  0007b	85 c0		 test	 eax, eax
  0007d	74 02		 je	 SHORT $LN2@DelPrivate

; 124  : 		return;

  0007f	eb 12		 jmp	 SHORT $LN1@DelPrivate
$LN2@DelPrivate:

; 125  : 
; 126  : 	m_PrivateShopItemStock.erase(ItemPos);

  00081	8d 45 08	 lea	 eax, DWORD PTR _ItemPos$[ebp]
  00084	50		 push	 eax
  00085	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	81 c1 90 14 00
	00		 add	 ecx, 5264		; 00001490H
  0008e	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAEIABUSItemPos@@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::erase
$LN1@DelPrivate:

; 127  : }

  00093	c9		 leave
  00094	c2 04 00	 ret	 4
?DelPrivateShopItemStock@CPythonShop@@QAEXUSItemPos@@@Z ENDP ; CPythonShop::DelPrivateShopItemStock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?AddPrivateShopItemStock@CPythonShop@@QAEXUSItemPos@@EK@Z
_TEXT	SEGMENT
$T1 = -72						; size = 16
_SellingItem$ = -56					; size = 13
$T2 = -40						; size = 8
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
$T8 = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_ItemPos$ = 8						; size = 3
_dwDisplayPos$ = 12					; size = 1
_dwPrice$ = 16						; size = 4
?AddPrivateShopItemStock@CPythonShop@@QAEXUSItemPos@@EK@Z PROC ; CPythonShop::AddPrivateShopItemStock, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 111  : 	DelPrivateShopItemStock(ItemPos);

  0000b	51		 push	 ecx
  0000c	8b c4		 mov	 eax, esp
  0000e	66 8b 4d 08	 mov	 cx, WORD PTR _ItemPos$[ebp]
  00012	66 89 08	 mov	 WORD PTR [eax], cx
  00015	8a 4d 0a	 mov	 cl, BYTE PTR _ItemPos$[ebp+2]
  00018	88 48 02	 mov	 BYTE PTR [eax+2], cl
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?DelPrivateShopItemStock@CPythonShop@@QAEXUSItemPos@@@Z ; CPythonShop::DelPrivateShopItemStock
  00023	8d 45 cd	 lea	 eax, DWORD PTR _SellingItem$[ebp+5]
  00026	89 45 fc	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\GameType.h

; 186  : 		window_type =     INVENTORY;

  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	c6 00 01	 mov	 BYTE PTR [eax], 1

; 187  : 		cell = WORD_MAX;

  0002f	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	66 89 41 01	 mov	 WORD PTR [ecx+1], ax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 114  : 	SellingItem.vnum = 0;

  0003b	83 65 c8 00	 and	 DWORD PTR _SellingItem$[ebp], 0

; 115  : 	SellingItem.count = 0;

  0003f	c6 45 cc 00	 mov	 BYTE PTR _SellingItem$[ebp+4], 0

; 116  : 	SellingItem.pos = ItemPos;

  00043	66 8b 45 08	 mov	 ax, WORD PTR _ItemPos$[ebp]
  00047	66 89 45 cd	 mov	 WORD PTR _SellingItem$[ebp+5], ax
  0004b	8a 45 0a	 mov	 al, BYTE PTR _ItemPos$[ebp+2]
  0004e	88 45 cf	 mov	 BYTE PTR _SellingItem$[ebp+7], al

; 117  : 	SellingItem.price = dwPrice;

  00051	8b 45 10	 mov	 eax, DWORD PTR _dwPrice$[ebp]
  00054	89 45 d0	 mov	 DWORD PTR _SellingItem$[ebp+8], eax

; 118  : 	SellingItem.display_pos = dwDisplayPos;

  00057	8a 45 0c	 mov	 al, BYTE PTR _dwDisplayPos$[ebp]
  0005a	88 45 d4	 mov	 BYTE PTR _SellingItem$[ebp+12], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0005d	8d 45 c8	 lea	 eax, DWORD PTR _SellingItem$[ebp]
  00060	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
  00063	8d 45 08	 lea	 eax, DWORD PTR _ItemPos$[ebp]
  00066	89 45 f4	 mov	 DWORD PTR $T8[ebp], eax
  00069	8b 45 f4	 mov	 eax, DWORD PTR $T8[ebp]
  0006c	89 45 f0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  0006f	8d 45 b8	 lea	 eax, DWORD PTR $T1[ebp]
  00072	8b 4d f0	 mov	 ecx, DWORD PTR $T7[ebp]
  00075	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00078	66 89 10	 mov	 WORD PTR [eax], dx
  0007b	8a 49 02	 mov	 cl, BYTE PTR [ecx+2]
  0007e	88 48 02	 mov	 BYTE PTR [eax+2], cl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00081	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp]
  00084	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00087	8d 7d bb	 lea	 edi, DWORD PTR $T1[ebp+3]
  0008a	8b 75 e8	 mov	 esi, DWORD PTR $T5[ebp]
  0008d	a5		 movsd
  0008e	a5		 movsd
  0008f	a5		 movsd
  00090	a4		 movsb

; 392  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

  00091	8d 45 b8	 lea	 eax, DWORD PTR $T1[ebp]
  00094	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00097	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  0009a	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map

; 165  :         return this->emplace(_STD forward<_Valty>(_Val));

  0009d	ff 75 e0	 push	 DWORD PTR $T3[ebp]
  000a0	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  000a3	50		 push	 eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 119  : 	m_PrivateShopItemStock.insert(make_pair(ItemPos, SellingItem));

  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	81 c1 90 14 00
	00		 add	 ecx, 5264		; 00001490H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map

; 165  :         return this->emplace(_STD forward<_Valty>(_Val));

  000ad	e8 00 00 00 00	 call	 ??$emplace@U?$pair@USItemPos@@USShopItemTable@@@std@@@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@USItemPos@@USShopItemTable@@@1@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::emplace<std::pair<SItemPos,SShopItemTable> >
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 120  : }

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	c9		 leave
  000b5	c2 0c 00	 ret	 12			; 0000000cH
?AddPrivateShopItemStock@CPythonShop@@QAEXUSItemPos@@EK@Z ENDP ; CPythonShop::AddPrivateShopItemStock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?ClearPrivateShopStock@CPythonShop@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ClearPrivateShopStock@CPythonShop@@QAEXXZ PROC		; CPythonShop::ClearPrivateShopStock, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 	m_PrivateShopItemStock.clear();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	81 c1 90 14 00
	00		 add	 ecx, 5264		; 00001490H
  00010	e8 00 00 00 00	 call	 ?clear@?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::clear

; 108  : }

  00015	c9		 leave
  00016	c3		 ret	 0
?ClearPrivateShopStock@CPythonShop@@QAEXXZ ENDP		; CPythonShop::ClearPrivateShopStock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?IsMainPlayerPrivateShop@CPythonShop@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsMainPlayerPrivateShop@CPythonShop@@QAEHXZ PROC	; CPythonShop::IsMainPlayerPrivateShop, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 	return m_isMainPlayerPrivateShop;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 188  : }

  0000d	c9		 leave
  0000e	c3		 ret	 0
?IsMainPlayerPrivateShop@CPythonShop@@QAEHXZ ENDP	; CPythonShop::IsMainPlayerPrivateShop
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?IsPrivateShop@CPythonShop@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPrivateShop@CPythonShop@@QAEHXZ PROC			; CPythonShop::IsPrivateShop, COMDAT
; _this$ = ecx

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 182  : 	return m_isPrivateShop;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 183  : }

  0000d	c9		 leave
  0000e	c3		 ret	 0
?IsPrivateShop@CPythonShop@@QAEHXZ ENDP			; CPythonShop::IsPrivateShop
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?IsOpen@CPythonShop@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOpen@CPythonShop@@QAEHXZ PROC			; CPythonShop::IsOpen, COMDAT
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 177  : 	return m_isShoping;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 178  : }

  0000d	c9		 leave
  0000e	c3		 ret	 0
?IsOpen@CPythonShop@@QAEHXZ ENDP			; CPythonShop::IsOpen
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?Close@CPythonShop@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CPythonShop@@QAEXXZ PROC				; CPythonShop::Close, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 170  : 	m_isShoping = FALSE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 171  : 	m_isPrivateShop = FALSE;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 60 08 00	 and	 DWORD PTR [eax+8], 0

; 172  : 	m_isMainPlayerPrivateShop = FALSE;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 60 0c 00	 and	 DWORD PTR [eax+12], 0

; 173  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?Close@CPythonShop@@QAEXXZ ENDP				; CPythonShop::Close
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?Open@CPythonShop@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_isPrivateShop$ = 8					; size = 4
_isMainPrivateShop$ = 12				; size = 4
?Open@CPythonShop@@QAEXHH@Z PROC			; CPythonShop::Open, COMDAT
; _this$ = ecx

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 163  : 	m_isShoping = TRUE;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [eax+4], 1

; 164  : 	m_isPrivateShop = isPrivateShop;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _isPrivateShop$[ebp]
  00017	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 165  : 	m_isMainPlayerPrivateShop = isMainPrivateShop;

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _isMainPrivateShop$[ebp]
  00020	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 166  : }

  00023	c9		 leave
  00024	c2 08 00	 ret	 8
?Open@CPythonShop@@QAEXHH@Z ENDP			; CPythonShop::Open
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?GetTabName@CPythonShop@@QAEPBDE@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_tabIdx$ = 8						; size = 1
?GetTabName@CPythonShop@@QAEPBDE@Z PROC			; CPythonShop::GetTabName, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 	if (tabIdx >= m_bTabCount)

  00008	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	0f b6 49 10	 movzx	 ecx, BYTE PTR [ecx+16]
  00013	3b c1		 cmp	 eax, ecx
  00015	7c 18		 jl	 SHORT $LN2@GetTabName

; 49   : 	{
; 50   : 		TraceError("Out of Index. tabIdx(%d) must be less than %d.", tabIdx, SHOP_TAB_COUNT_MAX);

  00017	6a 03		 push	 3
  00019	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  0001d	50		 push	 eax
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@FJEENICJ@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@
  00023	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 		return NULL;

  0002b	33 c0		 xor	 eax, eax
  0002d	eb 1c		 jmp	 SHORT $LN1@GetTabName
$LN2@GetTabName:

; 54   : 	return m_aShoptabs[tabIdx].name.c_str();

  0002f	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  00033	69 c0 d4 06 00
	00		 imul	 eax, eax, 1748
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3752 :         return _Mypair._Myval2._Myptr();

  00039	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	8d 4c 01 18	 lea	 ecx, DWORD PTR [ecx+eax+24]
  00040	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00045	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 54   : 	return m_aShoptabs[tabIdx].name.c_str();

  00048	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
$LN1@GetTabName:

; 55   : }

  0004b	c9		 leave
  0004c	c2 04 00	 ret	 4
?GetTabName@CPythonShop@@QAEPBDE@Z ENDP			; CPythonShop::GetTabName
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?SetTabName@CPythonShop@@QAEXEPBD@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
_tabIdx$ = 8						; size = 1
_name$ = 12						; size = 4
?SetTabName@CPythonShop@@QAEXEPBD@Z PROC		; CPythonShop::SetTabName, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	if (tabIdx >= m_bTabCount)

  00009	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	0f b6 49 10	 movzx	 ecx, BYTE PTR [ecx+16]
  00014	3b c1		 cmp	 eax, ecx
  00016	7c 16		 jl	 SHORT $LN2@SetTabName

; 39   : 	{	
; 40   : 		TraceError("Out of Index. tabIdx(%d) must be less than %d.", tabIdx, SHOP_TAB_COUNT_MAX);

  00018	6a 03		 push	 3
  0001a	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  0001e	50		 push	 eax
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@FJEENICJ@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@
  00024	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH

; 41   : 		return;

  0002c	eb 2e		 jmp	 SHORT $LN1@SetTabName
$LN2@SetTabName:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0002e	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00031	e8 00 00 00 00	 call	 _strlen
  00036	59		 pop	 ecx
  00037	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0003d	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00040	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00043	ff 75 0c	 push	 DWORD PTR _name$[ebp]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 43   : 	m_aShoptabs[tabIdx].name = name;

  00046	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  0004a	69 c0 d4 06 00
	00		 imul	 eax, eax, 1748
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8d 4c 01 18	 lea	 ecx, DWORD PTR [ecx+eax+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00057	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN1@SetTabName:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 44   : }

  0005c	c9		 leave
  0005d	c2 08 00	 ret	 8
?SetTabName@CPythonShop@@QAEXEPBD@Z ENDP		; CPythonShop::SetTabName
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?GetTabCoinType@CPythonShop@@QAEEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tabIdx$ = 8						; size = 1
?GetTabCoinType@CPythonShop@@QAEEE@Z PROC		; CPythonShop::GetTabCoinType, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 	if (tabIdx >= m_bTabCount)

  00007	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	0f b6 49 10	 movzx	 ecx, BYTE PTR [ecx+16]
  00012	3b c1		 cmp	 eax, ecx
  00014	7c 18		 jl	 SHORT $LN2@GetTabCoin

; 29   : 	{
; 30   : 		TraceError("Out of Index. tabIdx(%d) must be less than %d.", tabIdx, SHOP_TAB_COUNT_MAX);

  00016	6a 03		 push	 3
  00018	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@FJEENICJ@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@
  00022	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 31   : 		return 0xff;

  0002a	0c ff		 or	 al, 255			; 000000ffH
  0002c	eb 11		 jmp	 SHORT $LN1@GetTabCoin
$LN2@GetTabCoin:

; 32   : 	}
; 33   : 	return m_aShoptabs[tabIdx].coinType;

  0002e	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  00032	69 c0 d4 06 00
	00		 imul	 eax, eax, 1748
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8a 44 01 14	 mov	 al, BYTE PTR [ecx+eax+20]
$LN1@GetTabCoin:

; 34   : }

  0003f	c9		 leave
  00040	c2 04 00	 ret	 4
?GetTabCoinType@CPythonShop@@QAEEE@Z ENDP		; CPythonShop::GetTabCoinType
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?SetTabCoinType@CPythonShop@@QAEXEE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tabIdx$ = 8						; size = 1
_coinType$ = 12						; size = 1
?SetTabCoinType@CPythonShop@@QAEXEE@Z PROC		; CPythonShop::SetTabCoinType, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 18   : 	if (tabIdx >= m_bTabCount)

  00007	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	0f b6 49 10	 movzx	 ecx, BYTE PTR [ecx+16]
  00012	3b c1		 cmp	 eax, ecx
  00014	7c 16		 jl	 SHORT $LN2@SetTabCoin

; 19   : 	{	
; 20   : 		TraceError("Out of Index. tabIdx(%d) must be less than %d.", tabIdx, SHOP_TAB_COUNT_MAX);

  00016	6a 03		 push	 3
  00018	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@FJEENICJ@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@
  00022	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 21   : 		return;

  0002a	eb 14		 jmp	 SHORT $LN1@SetTabCoin
$LN2@SetTabCoin:

; 22   : 	}
; 23   : 	m_aShoptabs[tabIdx].coinType = coinType;

  0002c	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  00030	69 c0 d4 06 00
	00		 imul	 eax, eax, 1748
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8a 55 0c	 mov	 dl, BYTE PTR _coinType$[ebp]
  0003c	88 54 01 14	 mov	 BYTE PTR [ecx+eax+20], dl
$LN1@SetTabCoin:

; 24   : }

  00040	c9		 leave
  00041	c2 08 00	 ret	 8
?SetTabCoinType@CPythonShop@@QAEXEE@Z ENDP		; CPythonShop::SetTabCoinType
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?GetItemData@CPythonShop@@QAEHEKPAPBUpacket_shop_item@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tabIdx$ = 8						; size = 1
_dwSlotPos$ = 12					; size = 4
_c_ppItemData$ = 16					; size = 4
?GetItemData@CPythonShop@@QAEHEKPAPBUpacket_shop_item@@@Z PROC ; CPythonShop::GetItemData, COMDAT
; _this$ = ecx

; 85   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 86   : 	if (tabIdx >= SHOP_TAB_COUNT_MAX || dwSlotPos >= SHOP_HOST_ITEM_MAX_NUM)

  00007	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  0000b	83 f8 03	 cmp	 eax, 3
  0000e	7d 06		 jge	 SHORT $LN3@GetItemDat
  00010	83 7d 0c 28	 cmp	 DWORD PTR _dwSlotPos$[ebp], 40 ; 00000028H
  00014	72 1d		 jb	 SHORT $LN2@GetItemDat
$LN3@GetItemDat:

; 87   : 	{
; 88   : 		TraceError("Out of Index. tabIdx(%d) must be less than %d. dwSlotPos(%d) must be less than %d", tabIdx, SHOP_TAB_COUNT_MAX, dwSlotPos, SHOP_HOST_ITEM_MAX_NUM);

  00016	6a 28		 push	 40			; 00000028H
  00018	ff 75 0c	 push	 DWORD PTR _dwSlotPos$[ebp]
  0001b	6a 03		 push	 3
  0001d	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  00021	50		 push	 eax
  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@PFANBFHB@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@
  00027	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0002c	83 c4 14	 add	 esp, 20			; 00000014H

; 89   : 		return FALSE;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 21		 jmp	 SHORT $LN1@GetItemDat
$LN2@GetItemDat:

; 90   : 	}
; 91   : 
; 92   : 	*c_ppItemData = &m_aShoptabs[tabIdx].items[dwSlotPos];

  00033	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  00037	69 c0 d4 06 00
	00		 imul	 eax, eax, 1748
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	8d 44 01 14	 lea	 eax, DWORD PTR [ecx+eax+20]
  00044	6b 4d 0c 2b	 imul	 ecx, DWORD PTR _dwSlotPos$[ebp], 43
  00048	8d 44 08 1c	 lea	 eax, DWORD PTR [eax+ecx+28]
  0004c	8b 4d 10	 mov	 ecx, DWORD PTR _c_ppItemData$[ebp]
  0004f	89 01		 mov	 DWORD PTR [ecx], eax

; 93   : 
; 94   : 	return TRUE;

  00051	33 c0		 xor	 eax, eax
  00053	40		 inc	 eax
$LN1@GetItemDat:

; 95   : }

  00054	c9		 leave
  00055	c2 0c 00	 ret	 12			; 0000000cH
?GetItemData@CPythonShop@@QAEHEKPAPBUpacket_shop_item@@@Z ENDP ; CPythonShop::GetItemData
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?SetItemData@CPythonShop@@QAEXEKABUpacket_shop_item@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_tabIdx$ = 8						; size = 1
_dwSlotPos$ = 12					; size = 4
_c_rShopItemData$ = 16					; size = 4
?SetItemData@CPythonShop@@QAEXEKABUpacket_shop_item@@@Z PROC ; CPythonShop::SetItemData, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 75   : 	if (tabIdx >= SHOP_TAB_COUNT_MAX || dwSlotPos >= SHOP_HOST_ITEM_MAX_NUM)

  00009	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  0000d	83 f8 03	 cmp	 eax, 3
  00010	7d 06		 jge	 SHORT $LN3@SetItemDat
  00012	83 7d 0c 28	 cmp	 DWORD PTR _dwSlotPos$[ebp], 40 ; 00000028H
  00016	72 1b		 jb	 SHORT $LN2@SetItemDat
$LN3@SetItemDat:

; 76   : 	{
; 77   : 		TraceError("Out of Index. tabIdx(%d) must be less than %d. dwSlotPos(%d) must be less than %d", tabIdx, SHOP_TAB_COUNT_MAX, dwSlotPos, SHOP_HOST_ITEM_MAX_NUM);

  00018	6a 28		 push	 40			; 00000028H
  0001a	ff 75 0c	 push	 DWORD PTR _dwSlotPos$[ebp]
  0001d	6a 03		 push	 3
  0001f	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  00023	50		 push	 eax
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@PFANBFHB@Out?5of?5Index?4?5tabIdx?$CI?$CFd?$CJ?5must?5b@
  00029	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0002e	83 c4 14	 add	 esp, 20			; 00000014H

; 78   : 		return;

  00031	eb 24		 jmp	 SHORT $LN1@SetItemDat
$LN2@SetItemDat:

; 79   : 	}
; 80   : 
; 81   : 	m_aShoptabs[tabIdx].items[dwSlotPos] = c_rShopItemData;

  00033	0f b6 45 08	 movzx	 eax, BYTE PTR _tabIdx$[ebp]
  00037	69 c0 d4 06 00
	00		 imul	 eax, eax, 1748
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	8d 44 01 14	 lea	 eax, DWORD PTR [ecx+eax+20]
  00044	6b 4d 0c 2b	 imul	 ecx, DWORD PTR _dwSlotPos$[ebp], 43
  00048	8d 7c 08 1c	 lea	 edi, DWORD PTR [eax+ecx+28]
  0004c	6a 0a		 push	 10			; 0000000aH
  0004e	59		 pop	 ecx
  0004f	8b 75 10	 mov	 esi, DWORD PTR _c_rShopItemData$[ebp]
  00052	f3 a5		 rep movsd
  00054	66 a5		 movsw
  00056	a4		 movsb
$LN1@SetItemDat:

; 82   : }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	c9		 leave
  0005a	c2 0c 00	 ret	 12			; 0000000cH
?SetItemData@CPythonShop@@QAEXEKABUpacket_shop_item@@@Z ENDP ; CPythonShop::SetItemData
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?GetItemData@CPythonShop@@QAEHKPAPBUpacket_shop_item@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_tabIdx$ = -8						; size = 1
_dwSlotPos$ = -4					; size = 4
_dwIndex$ = 8						; size = 4
_c_ppItemData$ = 12					; size = 4
?GetItemData@CPythonShop@@QAEHKPAPBUpacket_shop_item@@@Z PROC ; CPythonShop::GetItemData, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 67   : 	BYTE tabIdx = dwIndex / SHOP_HOST_ITEM_MAX_NUM;

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  0000c	33 d2		 xor	 edx, edx
  0000e	6a 28		 push	 40			; 00000028H
  00010	59		 pop	 ecx
  00011	f7 f1		 div	 ecx
  00013	88 45 f8	 mov	 BYTE PTR _tabIdx$[ebp], al

; 68   : 	DWORD dwSlotPos = dwIndex % SHOP_HOST_ITEM_MAX_NUM;

  00016	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00019	33 d2		 xor	 edx, edx
  0001b	6a 28		 push	 40			; 00000028H
  0001d	59		 pop	 ecx
  0001e	f7 f1		 div	 ecx
  00020	89 55 fc	 mov	 DWORD PTR _dwSlotPos$[ebp], edx

; 69   : 
; 70   : 	return GetItemData(tabIdx, dwSlotPos, c_ppItemData);

  00023	ff 75 0c	 push	 DWORD PTR _c_ppItemData$[ebp]
  00026	ff 75 fc	 push	 DWORD PTR _dwSlotPos$[ebp]
  00029	ff 75 f8	 push	 DWORD PTR _tabIdx$[ebp]
  0002c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?GetItemData@CPythonShop@@QAEHEKPAPBUpacket_shop_item@@@Z ; CPythonShop::GetItemData

; 71   : }

  00034	c9		 leave
  00035	c2 08 00	 ret	 8
?GetItemData@CPythonShop@@QAEHKPAPBUpacket_shop_item@@@Z ENDP ; CPythonShop::GetItemData
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?SetItemData@CPythonShop@@QAEXKABUpacket_shop_item@@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_tabIdx$ = -8						; size = 1
_dwSlotPos$ = -4					; size = 4
_dwIndex$ = 8						; size = 4
_c_rShopItemData$ = 12					; size = 4
?SetItemData@CPythonShop@@QAEXKABUpacket_shop_item@@@Z PROC ; CPythonShop::SetItemData, COMDAT
; _this$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 59   : 	BYTE tabIdx = dwIndex / SHOP_HOST_ITEM_MAX_NUM;

  00009	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  0000c	33 d2		 xor	 edx, edx
  0000e	6a 28		 push	 40			; 00000028H
  00010	59		 pop	 ecx
  00011	f7 f1		 div	 ecx
  00013	88 45 f8	 mov	 BYTE PTR _tabIdx$[ebp], al

; 60   : 	DWORD dwSlotPos = dwIndex % SHOP_HOST_ITEM_MAX_NUM;

  00016	8b 45 08	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  00019	33 d2		 xor	 edx, edx
  0001b	6a 28		 push	 40			; 00000028H
  0001d	59		 pop	 ecx
  0001e	f7 f1		 div	 ecx
  00020	89 55 fc	 mov	 DWORD PTR _dwSlotPos$[ebp], edx

; 61   : 	
; 62   : 	SetItemData(tabIdx, dwSlotPos, c_rShopItemData);

  00023	ff 75 0c	 push	 DWORD PTR _c_rShopItemData$[ebp]
  00026	ff 75 fc	 push	 DWORD PTR _dwSlotPos$[ebp]
  00029	ff 75 f8	 push	 DWORD PTR _tabIdx$[ebp]
  0002c	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?SetItemData@CPythonShop@@QAEXEKABUpacket_shop_item@@@Z ; CPythonShop::SetItemData

; 63   : }

  00034	c9		 leave
  00035	c2 08 00	 ret	 8
?SetItemData@CPythonShop@@QAEXKABUpacket_shop_item@@@Z ENDP ; CPythonShop::SetItemData
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?Clear@CPythonShop@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@CPythonShop@@QAEXXZ PROC				; CPythonShop::Clear, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 192  : 	m_isShoping = FALSE;

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 193  : 	m_isPrivateShop = FALSE;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 60 08 00	 and	 DWORD PTR [eax+8], 0

; 194  : 	m_isMainPlayerPrivateShop = FALSE;

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 60 0c 00	 and	 DWORD PTR [eax+12], 0

; 195  : 	ClearPrivateShopStock();

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ?ClearPrivateShopStock@CPythonShop@@QAEXXZ ; CPythonShop::ClearPrivateShopStock

; 196  : 	m_bTabCount = 1;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	c6 40 10 01	 mov	 BYTE PTR [eax+16], 1

; 197  : 
; 198  : 	for (int i = 0; i < SHOP_TAB_COUNT_MAX; i++)

  0002c	83 65 f8 00	 and	 DWORD PTR _i$1[ebp], 0
  00030	eb 07		 jmp	 SHORT $LN4@Clear
$LN2@Clear:
  00032	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00035	40		 inc	 eax
  00036	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@Clear:
  00039	83 7d f8 03	 cmp	 DWORD PTR _i$1[ebp], 3
  0003d	7d 20		 jge	 SHORT $LN1@Clear

; 199  : 		memset (m_aShoptabs[i].items, 0, sizeof(TShopItemData) * SHOP_HOST_ITEM_MAX_NUM);

  0003f	68 b8 06 00 00	 push	 1720			; 000006b8H
  00044	6a 00		 push	 0
  00046	69 45 f8 d4 06
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 1748
  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	8d 44 01 30	 lea	 eax, DWORD PTR [ecx+eax+48]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 _memset
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	eb d3		 jmp	 SHORT $LN2@Clear
$LN1@Clear:

; 200  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?Clear@CPythonShop@@QAEXXZ ENDP				; CPythonShop::Clear
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ??1CPythonShop@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CPythonShop@@UAE@XZ PROC				; CPythonShop::~CPythonShop, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CPythonShop@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPythonShop@@6B@

; 209  : }

  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	81 c1 90 14 00
	00		 add	 ecx, 5264		; 00001490H
  00038	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::~_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >
  0003d	68 00 00 00 00	 push	 OFFSET ??1ShopTab@CPythonShop@@QAE@XZ
  00042	6a 03		 push	 3
  00044	68 d4 06 00 00	 push	 1748			; 000006d4H
  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	83 c0 14	 add	 eax, 20			; 00000014H
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 19   : 	{ 

  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CSingleton@VCPythonShop@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  0005e	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A, 0 ; CSingleton<CPythonShop>::ms_singleton
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 209  : }

  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	c9		 leave
  00071	c3		 ret	 0
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
  00076	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CPythonShop@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CPythonShop@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CPythonShop@@UAE@XZ ENDP				; CPythonShop::~CPythonShop
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ??0CPythonShop@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
_offset$2 = -24						; size = 4
_this$ = -20						; size = 4
$T3 = -13						; size = 1
__$EHRec$ = -12						; size = 12
??0CPythonShop@@QAE@XZ PROC				; CPythonShop::CPythonShop, COMDAT
; _this$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPythonShop@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h

; 12   : 	{ 

  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CSingleton@VCPythonShop@@@@6B@

; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 

  00031	33 c0		 xor	 eax, eax
  00033	89 45 e8	 mov	 DWORD PTR _offset$2[ebp], eax

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00036	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00039	03 45 e8	 add	 eax, DWORD PTR _offset$2[ebp]
  0003c	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A, eax ; CSingleton<CPythonShop>::ms_singleton
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 203  : {

  00041	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00048	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPythonShop@@6B@
  0004e	68 00 00 00 00	 push	 OFFSET ??1ShopTab@CPythonShop@@QAE@XZ
  00053	68 00 00 00 00	 push	 OFFSET ??0ShopTab@CPythonShop@@QAE@XZ ; CPythonShop::ShopTab::ShopTab
  00058	6a 03		 push	 3
  0005a	68 d4 06 00 00	 push	 1748			; 000006d4H
  0005f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00062	83 c0 14	 add	 eax, 20			; 00000014H
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  0006b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00072	05 90 14 00 00	 add	 eax, 5264		; 00001490H
  00077	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\map

; 107  :     map() : _Mybase(key_compare()) {}

  0007a	8d 45 f3	 lea	 eax, DWORD PTR $T3[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	e8 00 00 00 00	 call	 ??0?$_Tree@V?$_Tmap_traits@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@USItemPos@@@1@@Z ; std::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >::_Tree<std::_Tmap_traits<SItemPos,SShopItemTable,std::less<SItemPos>,std::allocator<std::pair<SItemPos const ,SShopItemTable> >,0> >
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp

; 203  : {

  00086	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 204  : 	Clear();

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ?Clear@CPythonShop@@QAEXXZ ; CPythonShop::Clear

; 205  : }

  00092	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00096	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a3	59		 pop	 ecx
  000a4	c9		 leave
  000a5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPythonShop@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCPythonShop@@@@UAE@XZ ; CSingleton<CPythonShop>::~CSingleton<CPythonShop>
__unwindfunclet$??0CPythonShop@@QAE@XZ$1:
  00008	68 00 00 00 00	 push	 OFFSET ??1ShopTab@CPythonShop@@QAE@XZ
  0000d	6a 03		 push	 3
  0000f	68 d4 06 00 00	 push	 1748			; 000006d4H
  00014	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 c0 14	 add	 eax, 20			; 00000014H
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00020	c3		 ret	 0
__unwindfunclet$??0CPythonShop@@QAE@XZ$2:
  00021	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	81 c1 90 14 00
	00		 add	 ecx, 5264		; 00001490H
  0002a	e9 00 00 00 00	 jmp	 ??1?$map@USItemPos@@USShopItemTable@@U?$less@USItemPos@@@std@@V?$allocator@U?$pair@$$CBUSItemPos@@USShopItemTable@@@std@@@4@@std@@QAE@XZ
  0002f	cc		 int	 3
  00030	cc		 int	 3
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
__ehhandler$??0CPythonShop@@QAE@XZ:
  00034	90		 npad	 1
  00035	90		 npad	 1
  00036	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPythonShop@@QAE@XZ
  0004c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPythonShop@@QAE@XZ ENDP				; CPythonShop::CPythonShop
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCPythonShop@@@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPythonShop@@@@UAEPAXI@Z PROC		; CSingleton<CPythonShop>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : 	{ 

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CSingleton@VCPythonShop@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00010	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A, 0 ; CSingleton<CPythonShop>::ms_singleton
  00017	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	74 0c		 je	 SHORT $LN2@scalar
  0001f	6a 04		 push	 4
  00021	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	59		 pop	 ecx
  0002a	59		 pop	 ecx
$LN2@scalar:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c9		 leave
  0002f	c2 04 00	 ret	 4
??_G?$CSingleton@VCPythonShop@@@@UAEPAXI@Z ENDP		; CSingleton<CPythonShop>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCPythonShop@@@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CSingleton@VCPythonShop@@@@UAE@XZ PROC		; CSingleton<CPythonShop>::~CSingleton<CPythonShop>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CSingleton@VCPythonShop@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00010	83 25 00 00 00
	00 00		 and	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonShop@@@@0PAVCPythonShop@@A, 0 ; CSingleton<CPythonShop>::ms_singleton

; 22   : 	}

  00017	c9		 leave
  00018	c3		 ret	 0
??1?$CSingleton@VCPythonShop@@@@UAE@XZ ENDP		; CSingleton<CPythonShop>::~CSingleton<CPythonShop>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Block_size$ = -8					; size = 4
__Ptr_container$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00012	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00015	77 05		 ja	 SHORT $LN12@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  00017	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Allocate_m:

; 77   :         return ::operator new(_Bytes);

  0001c	ff 75 f8	 push	 DWORD PTR __Block_size$[ebp]
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	59		 pop	 ecx

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00025	89 45 fc	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00028	83 7d fc 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0002c	74 02		 je	 SHORT $LN7@Allocate_m
  0002e	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00035	33 c0		 xor	 eax, eax
  00037	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  00039	33 c0		 xor	 eax, eax
  0003b	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00040	83 c0 23	 add	 eax, 35			; 00000023H
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00046	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00049	6a 04		 push	 4
  0004b	58		 pop	 eax
  0004c	6b c0 ff	 imul	 eax, eax, -1
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00055	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0b		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00014	59		 pop	 ecx
  00015	eb 13		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00017	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001b	74 0b		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001d	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	59		 pop	 ecx

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00028	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 0f		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  0003a	ff 75 0c	 push	 DWORD PTR __Bytes$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 222  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	c9		 leave
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00018	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00022	c9		 leave
  00023	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Al$ = -40						; size = 4
__Ptr$ = -36						; size = 4
__Ptr$ = -32						; size = 4
$T1 = -28						; size = 4
__Old_capacity$ = -24					; size = 4
$T2 = -20						; size = 4
__New_capacity$ = -16					; size = 4
__New_ptr$ = -12					; size = 4
_this$ = -8						; size = 4
__Overflow_is_possible$3 = -2				; size = 1
$T4 = -1						; size = 1
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4302 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4303 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4304 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4305 :         if (_New_size > max_size()) {

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00014	76 05		 jbe	 SHORT $LN2@Reallocate

; 4306 :             _Xlen_string(); // result too long

  00016	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4307 :         }
; 4308 : 
; 4309 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00021	89 45 e8	 mov	 DWORD PTR __Old_capacity$[ebp], eax

; 4310 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00024	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0002f	89 45 f0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00035	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00038	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  0003b	89 45 d8	 mov	 DWORD PTR __Al$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0003e	c6 45 fe 00	 mov	 BYTE PTR __Overflow_is_possible$3[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00042	8b 45 f0	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00045	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0004c	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0004d	89 45 f4	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4313 :         _Mypair._Myval2._Orphan_all();
; 4314 :         _Mypair._Myval2._Mysize = _New_size;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00056	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4315 :         _Mypair._Myval2._Myres  = _New_capacity;

  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0005f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4316 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  00062	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  00065	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00068	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0006b	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006e	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00071	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00074	ff 75 ec	 push	 DWORD PTR $T2[ebp]
  00077	e8 00 00 00 00	 call	 _memcpy
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0007f	c6 45 ff 00	 mov	 BYTE PTR $T4[ebp], 0

; 428  :         _Left = _Right;

  00083	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00086	03 45 08	 add	 eax, DWORD PTR __New_size$[ebp]
  00089	8a 4d ff	 mov	 cl, BYTE PTR $T4[ebp]
  0008c	88 08		 mov	 BYTE PTR [eax], cl

; 4317 :         if (_BUF_SIZE <= _Old_capacity) {

  0008e	83 7d e8 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  00092	72 21		 jb	 SHORT $LN3@Reallocate

; 4318 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
  00099	89 45 dc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0009c	8b 45 e8	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  0009f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a0	50		 push	 eax
  000a1	ff 75 dc	 push	 DWORD PTR __Ptr$[ebp]
  000a4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a9	59		 pop	 ecx
  000aa	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4319 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000ab	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000b1	89 08		 mov	 DWORD PTR [eax], ecx

; 4320 :         } else {

  000b3	eb 0e		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4321 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000b5	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000b8	50		 push	 eax
  000b9	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000c1	59		 pop	 ecx
  000c2	59		 pop	 ecx
$LN4@Reallocate:

; 4322 :         }
; 4323 : 
; 4324 :         return *this;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4325 :     }

  000c6	c9		 leave
  000c7	c2 0c 00	 ret	 12			; 0000000cH
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 270  : /* _CONSTEXPR20_DYNALLOC */ void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonShop.cpp
;	COMDAT ?initshop@@YAXXZ
_TEXT	SEGMENT
_poModule$ = -4						; size = 4
?initshop@@YAXXZ PROC					; initshop, COMDAT

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 404  : 	static PyMethodDef s_methods[] =
; 405  : 	{
; 406  : 		// Shop
; 407  : 		{ "Open",						shopOpen,						METH_VARARGS },
; 408  : 		{ "Close",						shopClose,						METH_VARARGS },
; 409  : 		{ "IsOpen",						shopIsOpen,						METH_VARARGS },
; 410  : 		{ "IsPrivateShop",				shopIsPrviateShop,				METH_VARARGS },
; 411  : 		{ "IsMainPlayerPrivateShop",	shopIsMainPlayerPrivateShop,	METH_VARARGS },
; 412  : 		{ "GetItemID",					shopGetItemID,					METH_VARARGS },
; 413  : 		{ "GetItemCount",				shopGetItemCount,				METH_VARARGS },
; 414  : 		{ "GetItemPrice",				shopGetItemPrice,				METH_VARARGS },
; 415  : 		{ "GetItemMetinSocket",			shopGetItemMetinSocket,			METH_VARARGS },
; 416  : 		{ "GetItemAttribute",			shopGetItemAttribute,			METH_VARARGS },
; 417  : 		{ "GetTabCount",				shopGetTabCount,				METH_VARARGS },
; 418  : 		{ "GetTabName",					shopGetTabName,					METH_VARARGS },
; 419  : 		{ "GetTabCoinType",				shopGetTabCoinType,				METH_VARARGS },
; 420  : 
; 421  : 		// Private Shop
; 422  : 		{ "ClearPrivateShopStock",		shopClearPrivateShopStock,		METH_VARARGS },
; 423  : 		{ "AddPrivateShopItemStock",	shopAddPrivateShopItemStock,	METH_VARARGS },
; 424  : 		{ "DelPrivateShopItemStock",	shopDelPrivateShopItemStock,	METH_VARARGS },
; 425  : 		{ "GetPrivateShopItemPrice",	shopGetPrivateShopItemPrice,	METH_VARARGS },
; 426  : 		{ "BuildPrivateShop",			shopBuildPrivateShop,			METH_VARARGS },
; 427  : 		{ NULL,							NULL,							NULL },
; 428  : 	};
; 429  : 	PyObject * poModule = Py_InitModule("shop", s_methods);

  00004	68 f5 03 00 00	 push	 1013			; 000003f5H
  00009	6a 00		 push	 0
  0000b	6a 00		 push	 0
  0000d	68 00 00 00 00	 push	 OFFSET ?s_methods@?1??initshop@@YAXXZ@4PAUPyMethodDef@@A
  00012	68 00 00 00 00	 push	 OFFSET ??_C@_04BFIJLIPK@shop@
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_InitModule4
  0001d	83 c4 14	 add	 esp, 20			; 00000014H
  00020	89 45 fc	 mov	 DWORD PTR _poModule$[ebp], eax

; 430  : 
; 431  : 	PyModule_AddIntConstant(poModule, "SHOP_SLOT_COUNT", SHOP_HOST_ITEM_MAX_NUM);

  00023	6a 28		 push	 40			; 00000028H
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MMIAEKCC@SHOP_SLOT_COUNT@
  0002a	ff 75 fc	 push	 DWORD PTR _poModule$[ebp]
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyModule_AddIntConstant
  00033	83 c4 0c	 add	 esp, 12			; 0000000cH

; 432  : 	PyModule_AddIntConstant(poModule, "SHOP_COIN_TYPE_GOLD", SHOP_COIN_TYPE_GOLD);

  00036	6a 00		 push	 0
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@FOBHCAAH@SHOP_COIN_TYPE_GOLD@
  0003d	ff 75 fc	 push	 DWORD PTR _poModule$[ebp]
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyModule_AddIntConstant
  00046	83 c4 0c	 add	 esp, 12			; 0000000cH

; 433  : 	PyModule_AddIntConstant(poModule, "SHOP_COIN_TYPE_SECONDARY_COIN", SHOP_COIN_TYPE_SECONDARY_COIN);

  00049	6a 01		 push	 1
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GEPHLMDC@SHOP_COIN_TYPE_SECONDARY_COIN@
  00050	ff 75 fc	 push	 DWORD PTR _poModule$[ebp]
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyModule_AddIntConstant
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 434  : }

  0005c	c9		 leave
  0005d	c3		 ret	 0
?initshop@@YAXXZ ENDP					; initshop
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 414  : [[noreturn]] inline void _Throw_tree_length_error() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  :     _Xlength_error("map/set too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Throw_tree:

; 416  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Al$1 = -28						; size = 4
__Ptr$2 = -24						; size = 4
__Count$ = -20						; size = 4
$T3 = -16						; size = 4
tv68 = -12						; size = 4
_this$ = -8						; size = 4
$T4 = -2						; size = 1
$T5 = -1						; size = 1
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4383 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2227 :         return _BUF_SIZE <= _Myres;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00010	72 09		 jb	 SHORT $LN9@Tidy_deall
  00012	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00019	eb 04		 jmp	 SHORT $LN10@Tidy_deall
$LN9@Tidy_deall:
  0001b	83 65 f4 00	 and	 DWORD PTR tv68[ebp], 0
$LN10@Tidy_deall:
  0001f	8a 45 f4	 mov	 al, BYTE PTR tv68[ebp]
  00022	88 45 ff	 mov	 BYTE PTR $T5[ebp], al

; 4384 :         _Mypair._Myval2._Orphan_all();
; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00025	0f b6 45 ff	 movzx	 eax, BYTE PTR $T5[ebp]
  00029	85 c0		 test	 eax, eax
  0002b	74 34		 je	 SHORT $LN2@Tidy_deall

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	89 45 e8	 mov	 DWORD PTR __Ptr$2[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00038	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  0003b	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0003e	89 45 e4	 mov	 DWORD PTR __Al$1[ebp], eax

; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00041	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  00049	59		 pop	 ecx

; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00050	40		 inc	 eax
  00051	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	ff 75 ec	 push	 DWORD PTR __Count$[ebp]
  00057	ff 75 e8	 push	 DWORD PTR __Ptr$2[ebp]
  0005a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN2@Tidy_deall:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  00061	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00072	c6 45 fe 00	 mov	 BYTE PTR $T4[ebp], 0
  00076	33 c0		 xor	 eax, eax
  00078	40		 inc	 eax
  00079	6b c0 00	 imul	 eax, eax, 0

; 428  :         _Left = _Right;

  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	8a 55 fe	 mov	 dl, BYTE PTR $T4[ebp]
  00082	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4396 :     }

  00085	c9		 leave
  00086	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4376 :     void _Tidy_init() noexcept { // initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4377 :         _Mypair._Myval2._Mysize = 0;

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 4378 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4379 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4380 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00019	c6 45 ff 00	 mov	 BYTE PTR $T1[ebp], 0
  0001d	33 c0		 xor	 eax, eax
  0001f	40		 inc	 eax
  00020	6b c0 00	 imul	 eax, eax, 0

; 428  :         _Left = _Right;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8a 55 ff	 mov	 dl, BYTE PTR $T1[ebp]
  00029	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4381 :     }

  0002c	c9		 leave
  0002d	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
tv93 = -28						; size = 4
$T3 = -24						; size = 4
_this$ = -20						; size = 4
$T4 = -16						; size = 4
__Masked$5 = -12					; size = 4
__Old$ = -8						; size = 4
__Max$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4297 :     _NODISCARD size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	89 45 fc	 mov	 DWORD PTR __Max$[ebp], eax
  00014	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001a	89 45 f8	 mov	 DWORD PTR __Old$[ebp], eax

; 4285 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0001d	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00020	83 c8 0f	 or	 eax, 15			; 0000000fH
  00023	89 45 f4	 mov	 DWORD PTR __Masked$5[ebp], eax

; 4286 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00026	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  00029	3b 45 fc	 cmp	 eax, DWORD PTR __Max$[ebp]
  0002c	76 08		 jbe	 SHORT $LN29@Calculate_

; 4287 :             return _Max;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00031	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  00034	eb 4c		 jmp	 SHORT $LN31@Calculate_
$LN29@Calculate_:

; 4288 :         }
; 4289 : 
; 4290 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00036	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00039	d1 e8		 shr	 eax, 1
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __Max$[ebp]
  0003e	2b c8		 sub	 ecx, eax
  00040	39 4d f8	 cmp	 DWORD PTR __Old$[ebp], ecx
  00043	76 08		 jbe	 SHORT $LN30@Calculate_

; 4291 :             return _Max;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00048	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  0004b	eb 35		 jmp	 SHORT $LN31@Calculate_
$LN30@Calculate_:

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00050	d1 e8		 shr	 eax, 1
  00052	03 45 f8	 add	 eax, DWORD PTR __Old$[ebp]
  00055	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  0005b	3b 45 e8	 cmp	 eax, DWORD PTR $T3[ebp]
  0005e	73 08		 jae	 SHORT $LN35@Calculate_
  00060	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00063	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
  00066	eb 06		 jmp	 SHORT $LN36@Calculate_
$LN35@Calculate_:
  00068	8d 45 f4	 lea	 eax, DWORD PTR __Masked$5[ebp]
  0006b	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
$LN36@Calculate_:
  0006e	8b 45 e4	 mov	 eax, DWORD PTR tv93[ebp]
  00071	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00074	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00077	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0007a	8b 45 dc	 mov	 eax, DWORD PTR $T1[ebp]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
$LN31@Calculate_:

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00082	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]

; 4299 :     }

  00085	c9		 leave
  00086	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -60						; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
__Storage_max$ = -44					; size = 4
$T5 = -40						; size = 4
$T6 = -36						; size = 4
$T7 = -32						; size = 4
_this$ = -28						; size = 4
tv70 = -24						; size = 4
$T8 = -20						; size = 4
$T9 = -16						; size = 4
tv67 = -12						; size = 4
__Alloc_max$ = -8					; size = 4
$T10 = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3773 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 4413 :         return _Mypair._Get_first();

  00009	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0000c	89 45 e0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4413 :         return _Mypair._Get_first();

  0000f	8b 45 e0	 mov	 eax, DWORD PTR $T7[ebp]
  00012	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00015	83 4d f8 ff	 or	 DWORD PTR __Alloc_max$[ebp], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00019	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR $T10[ebp], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Alloc_max$[ebp]
  00023	3b 45 fc	 cmp	 eax, DWORD PTR $T10[ebp]
  00026	73 08		 jae	 SHORT $LN14@max_size
  00028	8d 45 fc	 lea	 eax, DWORD PTR $T10[ebp]
  0002b	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
  0002e	eb 06		 jmp	 SHORT $LN15@max_size
$LN14@max_size:
  00030	8d 45 f8	 lea	 eax, DWORD PTR __Alloc_max$[ebp]
  00033	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
$LN15@max_size:
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv67[ebp]
  00039	89 45 dc	 mov	 DWORD PTR $T6[ebp], eax
  0003c	8b 45 dc	 mov	 eax, DWORD PTR $T6[ebp]
  0003f	89 45 d8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00042	8b 45 d8	 mov	 eax, DWORD PTR $T5[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 d4	 mov	 DWORD PTR __Storage_max$[ebp], eax

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  0004a	8b 45 d4	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  0004d	48		 dec	 eax
  0004e	89 45 f0	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00051	c7 45 d0 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00058	8b 45 d0	 mov	 eax, DWORD PTR $T4[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0005e	8b 45 f0	 mov	 eax, DWORD PTR $T9[ebp]
  00061	3b 45 ec	 cmp	 eax, DWORD PTR $T8[ebp]
  00064	73 08		 jae	 SHORT $LN22@max_size
  00066	8d 45 f0	 lea	 eax, DWORD PTR $T9[ebp]
  00069	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
  0006c	eb 06		 jmp	 SHORT $LN23@max_size
$LN22@max_size:
  0006e	8d 45 ec	 lea	 eax, DWORD PTR $T8[ebp]
  00071	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
$LN23@max_size:
  00074	8b 45 e8	 mov	 eax, DWORD PTR tv70[ebp]
  00077	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
  0007a	8b 45 cc	 mov	 eax, DWORD PTR $T3[ebp]
  0007d	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00080	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00083	8b 00		 mov	 eax, DWORD PTR [eax]

; 3778 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3779 :         );
; 3780 :     }

  00085	c9		 leave
  00086	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -16						; size = 1
__Old_ptr$2 = -12					; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3042 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3043 :         // assign [_Ptr, _Ptr + _Count)
; 3044 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00012	77 39		 ja	 SHORT $LN2@assign

; 3045 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001c	89 45 f4	 mov	 DWORD PTR __Old_ptr$2[ebp], eax

; 3046 :             _Mypair._Myval2._Mysize = _Count;

  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00025	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0002e	ff 75 f4	 push	 DWORD PTR __Old_ptr$2[ebp]
  00031	e8 00 00 00 00	 call	 _memmove
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3047 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3048 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00039	c6 45 ff 00	 mov	 BYTE PTR $T3[ebp], 0

; 428  :         _Left = _Right;

  0003d	8b 45 f4	 mov	 eax, DWORD PTR __Old_ptr$2[ebp]
  00040	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00043	8a 4d ff	 mov	 cl, BYTE PTR $T3[ebp]
  00046	88 08		 mov	 BYTE PTR [eax], cl

; 3049 :             return *this;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	eb 16		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3050 :         }
; 3051 : 
; 3052 :         return _Reallocate_for(

  0004d	33 c0		 xor	 eax, eax
  0004f	88 45 f0	 mov	 BYTE PTR $T1[ebp], al
  00052	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00055	ff 75 f0	 push	 DWORD PTR $T1[ebp]
  00058	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 3053 :             _Count,
; 3054 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3055 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3057 :             },
; 3058 :             _Ptr);
; 3059 :     }

  00063	c9		 leave
  00064	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2365 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00015	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  0001c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 2366 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2367 :         _Tidy_init();

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2368 :     }

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c9		 leave
  0002f	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__Result$ = -16						; size = 4
tv76 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2217 :     const value_type* _Myptr() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2218 :         const value_type* _Result = _Bx._Buf;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00016	72 09		 jb	 SHORT $LN6@Myptr
  00018	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  0001f	eb 04		 jmp	 SHORT $LN7@Myptr
$LN6@Myptr:
  00021	83 65 f4 00	 and	 DWORD PTR tv76[ebp], 0
$LN7@Myptr:
  00025	8a 45 f4	 mov	 al, BYTE PTR tv76[ebp]
  00028	88 45 ff	 mov	 BYTE PTR $T1[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  0002b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0e		 je	 SHORT $LN2@Myptr

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0003b	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  00041	8b 45 f0	 mov	 eax, DWORD PTR __Result$[ebp]

; 2224 :     }

  00044	c9		 leave
  00045	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__Result$ = -16						; size = 4
tv76 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2208 :     value_type* _Myptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2209 :         value_type* _Result = _Bx._Buf;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00016	72 09		 jb	 SHORT $LN6@Myptr
  00018	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  0001f	eb 04		 jmp	 SHORT $LN7@Myptr
$LN6@Myptr:
  00021	83 65 f4 00	 and	 DWORD PTR tv76[ebp], 0
$LN7@Myptr:
  00025	8a 45 f4	 mov	 al, BYTE PTR tv76[ebp]
  00028	88 45 ff	 mov	 BYTE PTR $T1[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  0002b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0e		 je	 SHORT $LN2@Myptr

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0003b	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  00041	8b 45 f0	 mov	 eax, DWORD PTR __Result$[ebp]

; 2215 :     }

  00044	c9		 leave
  00045	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2274 : [[noreturn]] inline void _Xlen_string() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2275 :     _Xlength_error("string too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2276 : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	83 c0 23	 add	 eax, 35			; 00000023H
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f4	 mov	 DWORD PTR __Ptr_user$[ebp], eax

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	6a 04		 push	 4
  0001d	58		 pop	 eax
  0001e	6b c0 ff	 imul	 eax, eax, -1
  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00024	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00027	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	2b 45 f8	 sub	 eax, DWORD PTR __Ptr_container$[ebp]
  00039	89 45 fc	 mov	 DWORD PTR __Back_shift$[ebp], eax
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00040	72 08		 jb	 SHORT $LN7@Adjust_man
  00042	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00046	77 02		 ja	 SHORT $LN7@Adjust_man
  00048	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0004f	33 c0		 xor	 eax, eax
  00051	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00053	33 c0		 xor	 eax, eax
  00055	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 130  :     {

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 141  :     {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c9		 leave
  0003d	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 0b		 je	 SHORT $LN3@what
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00023	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00026	c9		 leave
  00027	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx

; 74   :     }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN2@vector:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0000a	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000d	48		 dec	 eax
  0000e	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00011	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00015	76 11		 jbe	 SHORT $LN1@vector
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001a	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00020	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00023	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00026	eb dc		 jmp	 SHORT $LN2@vector
$LN1@vector:
  00028	c9		 leave
  00029	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
