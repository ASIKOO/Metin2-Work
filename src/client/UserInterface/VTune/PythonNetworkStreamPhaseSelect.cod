; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?SetSelectPhase@CPythonNetworkStream@@QAEXXZ	; CPythonNetworkStream::SetSelectPhase
PUBLIC	?SendSelectEmpirePacket@CPythonNetworkStream@@QAE_NK@Z ; CPythonNetworkStream::SendSelectEmpirePacket
PUBLIC	?SendSelectCharacterPacket@CPythonNetworkStream@@QAE_NE@Z ; CPythonNetworkStream::SendSelectCharacterPacket
PUBLIC	?SendChangeNamePacket@CPythonNetworkStream@@QAE_NEPBD@Z ; CPythonNetworkStream::SendChangeNamePacket
PUBLIC	?SendCreateCharacterPacket@CPythonNetworkStream@@QAE_NEPBDEEEEEE@Z ; CPythonNetworkStream::SendCreateCharacterPacket
PUBLIC	?SendDestroyCharacterPacket@CPythonNetworkStream@@QAE_NEPBD@Z ; CPythonNetworkStream::SendDestroyCharacterPacket
PUBLIC	?SelectPhase@CPythonNetworkStream@@IAEXXZ	; CPythonNetworkStream::SelectPhase
PUBLIC	?__RecvPlayerCreateSuccessPacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerCreateSuccessPacket
PUBLIC	?__RecvPlayerCreateFailurePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerCreateFailurePacket
PUBLIC	?__RecvPlayerDestroySuccessPacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerDestroySuccessPacket
PUBLIC	?__RecvPlayerDestroyFailurePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerDestroyFailurePacket
PUBLIC	?__RecvChangeName@CPythonNetworkStream@@IAE_NXZ	; CPythonNetworkStream::__RecvChangeName
PUBLIC	?__LeaveSelectPhase@CPythonNetworkStream@@IAEXXZ ; CPythonNetworkStream::__LeaveSelectPhase
PUBLIC	?Run@?$CFuncObject@VCPythonNetworkStream@@@@QAEXXZ ; CFuncObject<CPythonNetworkStream>::Run
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_06HJGPBJLE@Select@			; `string'
PUBLIC	??_C@_0BN@HMHBDFBF@?$CD?$CD?5Network?5?9?5Select?5Phase?5?$CD?$CD@ ; `string'
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ@			; `string'
PUBLIC	??_C@_0BA@FHNDCDDK@SetLoadingPhase@		; `string'
PUBLIC	??_C@_0BI@OHJNHIAD@SetSelectCharacterPhase@	; `string'
PUBLIC	??_C@_0BF@BJJJIJOC@SetSelectEmpirePhase@	; `string'
PUBLIC	??_C@_0BP@MCDDNHPB@SendSelectEmpirePacket?5?9?5Error@ ; `string'
PUBLIC	??_C@_0CC@LCEFGOOP@SendSelectCharacterPacket?5?9?5Err@ ; `string'
PUBLIC	??_C@_0BL@PMHPNGGJ@SendDestroyCharacterPacket@	; `string'
PUBLIC	??_C@_0CE@MAKBOJI@Failed?5to?5SendCreateCharacterPa@ ; `string'
PUBLIC	??_C@_0BP@NACAEM@Failed?5to?5SendChangeNamePacket@ ; `string'
PUBLIC	??_C@_0GF@HIGNNGB@CPythonNetworkStream?3?3RecvPlaye@ ; `string'
PUBLIC	??_C@_0BA@FIEGFADN@OnCreateSuccess@		; `string'
PUBLIC	??_C@_03LIHNMIHG@?$CIi?$CJ@			; `string'
PUBLIC	??_C@_0BA@JBAEOLGH@OnCreateFailure@		; `string'
PUBLIC	??_C@_0BA@NJIPBDGM@OnDeleteSuccess@		; `string'
PUBLIC	??_C@_0BA@BAMNKIDG@OnDeleteFailure@		; `string'
PUBLIC	??_C@_04JMLDJNEM@?$CIis?$CJ@			; `string'
PUBLIC	??_C@_0N@ICACADKM@OnChangeName@			; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_strncpy:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Tracen@@YAXPBD@Z:PROC				; Tracen
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	__imp__Py_BuildValue:PROC
EXTRN	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z:PROC ; PyCallClassMemberFunc
EXTRN	?ELTimer_GetMSec@@YAKXZ:PROC			; ELTimer_GetMSec
EXTRN	?Recv@CNetworkStream@@QAE_NHPAX@Z:PROC		; CNetworkStream::Recv
EXTRN	?Send@CNetworkStream@@QAE_NHPBX@Z:PROC		; CNetworkStream::Send
EXTRN	?SendSequence@CNetworkStream@@QAE_NXZ:PROC	; CNetworkStream::SendSequence
EXTRN	?IsSelectedEmpire@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::IsSelectedEmpire
EXTRN	?RecvHandshakePacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvHandshakePacket
EXTRN	?RecvHandshakeOKPacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvHandshakeOKPacket
EXTRN	?RecvHybridCryptKeyPacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvHybridCryptKeyPacket
EXTRN	?RecvHybridCryptSDBPacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvHybridCryptSDBPacket
EXTRN	?RecvKeyAgreementPacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvKeyAgreementPacket
EXTRN	?RecvKeyAgreementCompletedPacket@CPythonNetworkStream@@QAE_NXZ:PROC ; CPythonNetworkStream::RecvKeyAgreementCompletedPacket
EXTRN	?SetEmpireID@CPythonNetworkStream@@QAEXK@Z:PROC	; CPythonNetworkStream::SetEmpireID
EXTRN	?RecvErrorPacket@CPythonNetworkStream@@IAE_NH@Z:PROC ; CPythonNetworkStream::RecvErrorPacket
EXTRN	?RecvPingPacket@CPythonNetworkStream@@IAE_NXZ:PROC ; CPythonNetworkStream::RecvPingPacket
EXTRN	?RecvPhasePacket@CPythonNetworkStream@@IAE_NXZ:PROC ; CPythonNetworkStream::RecvPhasePacket
EXTRN	?__RecvLoginSuccessPacket3@CPythonNetworkStream@@IAE_NXZ:PROC ; CPythonNetworkStream::__RecvLoginSuccessPacket3
EXTRN	?__RecvLoginSuccessPacket4@CPythonNetworkStream@@IAE_NXZ:PROC ; CPythonNetworkStream::__RecvLoginSuccessPacket4
EXTRN	?__RecvEmpirePacket@CPythonNetworkStream@@IAE_NXZ:PROC ; CPythonNetworkStream::__RecvEmpirePacket
EXTRN	?CheckPacket@CPythonNetworkStream@@IAE_NPAE@Z:PROC ; CPythonNetworkStream::CheckPacket
EXTRN	?__DirectEnterMode_IsSet@CPythonNetworkStream@@AAE_NXZ:PROC ; CPythonNetworkStream::__DirectEnterMode_IsSet
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_C@_0N@ICACADKM@OnChangeName@
CONST	SEGMENT
??_C@_0N@ICACADKM@OnChangeName@ DB 'OnChangeName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JMLDJNEM@?$CIis?$CJ@
CONST	SEGMENT
??_C@_04JMLDJNEM@?$CIis?$CJ@ DB '(is)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BAMNKIDG@OnDeleteFailure@
CONST	SEGMENT
??_C@_0BA@BAMNKIDG@OnDeleteFailure@ DB 'OnDeleteFailure', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NJIPBDGM@OnDeleteSuccess@
CONST	SEGMENT
??_C@_0BA@NJIPBDGM@OnDeleteSuccess@ DB 'OnDeleteSuccess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JBAEOLGH@OnCreateFailure@
CONST	SEGMENT
??_C@_0BA@JBAEOLGH@OnCreateFailure@ DB 'OnCreateFailure', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LIHNMIHG@?$CIi?$CJ@
CONST	SEGMENT
??_C@_03LIHNMIHG@?$CIi?$CJ@ DB '(i)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FIEGFADN@OnCreateSuccess@
CONST	SEGMENT
??_C@_0BA@FIEGFADN@OnCreateSuccess@ DB 'OnCreateSuccess', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@HIGNNGB@CPythonNetworkStream?3?3RecvPlaye@
CONST	SEGMENT
??_C@_0GF@HIGNNGB@CPythonNetworkStream?3?3RecvPlaye@ DB 'CPythonNetworkSt'
	DB	'ream::RecvPlayerCreateSuccessPacket - OUT OF RANGE SLOT(%d) >'
	DB	' PLATER_PER_ACCOUNT(%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NACAEM@Failed?5to?5SendChangeNamePacket@
CONST	SEGMENT
??_C@_0BP@NACAEM@Failed?5to?5SendChangeNamePacket@ DB 'Failed to SendChan'
	DB	'geNamePacket', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MAKBOJI@Failed?5to?5SendCreateCharacterPa@
CONST	SEGMENT
??_C@_0CE@MAKBOJI@Failed?5to?5SendCreateCharacterPa@ DB 'Failed to SendCr'
	DB	'eateCharacterPacket', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@PMHPNGGJ@SendDestroyCharacterPacket@
CONST	SEGMENT
??_C@_0BL@PMHPNGGJ@SendDestroyCharacterPacket@ DB 'SendDestroyCharacterPa'
	DB	'cket', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LCEFGOOP@SendSelectCharacterPacket?5?9?5Err@
CONST	SEGMENT
??_C@_0CC@LCEFGOOP@SendSelectCharacterPacket?5?9?5Err@ DB 'SendSelectChar'
	DB	'acterPacket - Error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MCDDNHPB@SendSelectEmpirePacket?5?9?5Error@
CONST	SEGMENT
??_C@_0BP@MCDDNHPB@SendSelectEmpirePacket?5?9?5Error@ DB 'SendSelectEmpir'
	DB	'ePacket - Error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BJJJIJOC@SetSelectEmpirePhase@
CONST	SEGMENT
??_C@_0BF@BJJJIJOC@SetSelectEmpirePhase@ DB 'SetSelectEmpirePhase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OHJNHIAD@SetSelectCharacterPhase@
CONST	SEGMENT
??_C@_0BI@OHJNHIAD@SetSelectCharacterPhase@ DB 'SetSelectCharacterPhase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FHNDCDDK@SetLoadingPhase@
CONST	SEGMENT
??_C@_0BA@FHNDCDDK@SetLoadingPhase@ DB 'SetLoadingPhase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ@ DB '()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HMHBDFBF@?$CD?$CD?5Network?5?9?5Select?5Phase?5?$CD?$CD@
CONST	SEGMENT
??_C@_0BN@HMHBDFBF@?$CD?$CD?5Network?5?9?5Select?5Phase?5?$CD?$CD@ DB '##'
	DB	' Network - Select Phase ##', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJGPBJLE@Select@
CONST	SEGMENT
??_C@_06HJGPBJLE@Select@ DB 'Select', 00H		; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4559 : _NODISCARD bool operator==(_In_z_ const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4560 :     return _Right._Equal(_Left);

  00003	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00009	e8 00 00 00 00	 call	 ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal

; 4561 : }

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv69 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4575 : _NODISCARD bool operator!=(_In_z_ const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 4576 :     return !(_Left == _Right);

  00004	ff 75 0c	 push	 DWORD PTR __Right$[ebp]
  00007	ff 75 08	 push	 DWORD PTR __Left$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  0000f	59		 pop	 ecx
  00010	59		 pop	 ecx
  00011	0f b6 c0	 movzx	 eax, al
  00014	85 c0		 test	 eax, eax
  00016	75 09		 jne	 SHORT $LN3@operator
  00018	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv69[ebp], 1
  0001f	eb 04		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00021	83 65 fc 00	 and	 DWORD PTR tv69[ebp], 0
$LN4@operator:
  00025	8a 45 fc	 mov	 al, BYTE PTR tv69[ebp]

; 4577 : }

  00028	c9		 leave
  00029	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\FuncObject.h
;	COMDAT ?Run@?$CFuncObject@VCPythonNetworkStream@@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?Run@?$CFuncObject@VCPythonNetworkStream@@@@QAEXXZ PROC	; CFuncObject<CPythonNetworkStream>::Run, COMDAT
; _this$ = ecx

; 40   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 			if (m_pSelfObject)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	74 4c		 je	 SHORT $LN1@Run

; 42   : 				if (m_pFuncObject)

  00012	83 65 f0 00	 and	 DWORD PTR $T1[ebp], 0
  00016	83 65 f4 00	 and	 DWORD PTR $T1[ebp+4], 0
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00020	3b 45 f0	 cmp	 eax, DWORD PTR $T1[ebp]
  00023	75 1a		 jne	 SHORT $LN6@Run
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0002c	74 0b		 je	 SHORT $LN5@Run
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00034	3b 45 f4	 cmp	 eax, DWORD PTR $T1[ebp+4]
  00037	75 06		 jne	 SHORT $LN6@Run
$LN5@Run:
  00039	83 65 f8 00	 and	 DWORD PTR tv75[ebp], 0
  0003d	eb 07		 jmp	 SHORT $LN7@Run
$LN6@Run:
  0003f	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
$LN7@Run:
  00046	83 7d f8 00	 cmp	 DWORD PTR tv75[ebp], 0
  0004a	74 12		 je	 SHORT $LN1@Run

; 43   : 					(m_pSelfObject->*m_pFuncObject)();

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	03 48 14	 add	 ecx, DWORD PTR [eax+20]
  00058	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	ff 50 10	 call	 DWORD PTR [eax+16]
$LN1@Run:

; 44   : 		}

  0005e	c9		 leave
  0005f	c3		 ret	 0
?Run@?$CFuncObject@VCPythonNetworkStream@@@@QAEXXZ ENDP	; CFuncObject<CPythonNetworkStream>::Run
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStream.h
;	COMDAT ?__LeaveSelectPhase@CPythonNetworkStream@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?__LeaveSelectPhase@CPythonNetworkStream@@IAEXXZ PROC	; CPythonNetworkStream::__LeaveSelectPhase, COMDAT
; _this$ = ecx

; 592  : 		void __LeaveSelectPhase() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
?__LeaveSelectPhase@CPythonNetworkStream@@IAEXXZ ENDP	; CPythonNetworkStream::__LeaveSelectPhase
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?__RecvChangeName@CPythonNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
_i$1 = -40						; size = 4
_ChangeNamePacket$ = -36				; size = 30
__$ArrayPad$ = -4					; size = 4
?__RecvChangeName@CPythonNetworkStream@@IAE_NXZ PROC	; CPythonNetworkStream::__RecvChangeName, COMDAT
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 290  : 	TPacketGCChangeName ChangeNamePacket;
; 291  : 	if (!Recv(sizeof(TPacketGCChangeName), &ChangeNamePacket))

  00013	8d 45 dc	 lea	 eax, DWORD PTR _ChangeNamePacket$[ebp]
  00016	50		 push	 eax
  00017	6a 1e		 push	 30			; 0000001eH
  00019	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00021	0f b6 c0	 movzx	 eax, al
  00024	85 c0		 test	 eax, eax
  00026	75 07		 jne	 SHORT $LN5@RecvChange

; 292  : 		return false;

  00028	32 c0		 xor	 al, al
  0002a	e9 bb 00 00 00	 jmp	 $LN1@RecvChange
$LN5@RecvChange:

; 293  : 
; 294  : 	for (int i = 0; i < PLAYER_PER_ACCOUNT4; ++i)

  0002f	83 65 d8 00	 and	 DWORD PTR _i$1[ebp], 0
  00033	eb 07		 jmp	 SHORT $LN4@RecvChange
$LN2@RecvChange:
  00035	8b 45 d8	 mov	 eax, DWORD PTR _i$1[ebp]
  00038	40		 inc	 eax
  00039	89 45 d8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@RecvChange:
  0003c	83 7d d8 04	 cmp	 DWORD PTR _i$1[ebp], 4
  00040	7d 7a		 jge	 SHORT $LN3@RecvChange

; 295  : 	{
; 296  : 		if (ChangeNamePacket.pid == m_akSimplePlayerInfo[i].dwID)

  00042	6b 45 d8 3f	 imul	 eax, DWORD PTR _i$1[ebp], 63
  00046	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	8b 55 dd	 mov	 edx, DWORD PTR _ChangeNamePacket$[ebp+1]
  0004c	3b 94 01 9c 01
	00 00		 cmp	 edx, DWORD PTR [ecx+eax+412]
  00053	75 62		 jne	 SHORT $LN6@RecvChange

; 297  : 		{
; 298  : 			m_akSimplePlayerInfo[i].bChangeName = FALSE;

  00055	6b 45 d8 3f	 imul	 eax, DWORD PTR _i$1[ebp], 63
  00059	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	c6 84 01 c5 01
	00 00 00	 mov	 BYTE PTR [ecx+eax+453], 0

; 299  : 			strncpy(m_akSimplePlayerInfo[i].szName, ChangeNamePacket.name, CHARACTER_NAME_MAX_LEN);

  00064	6a 18		 push	 24			; 00000018H
  00066	8d 45 e1	 lea	 eax, DWORD PTR _ChangeNamePacket$[ebp+5]
  00069	50		 push	 eax
  0006a	6b 45 d8 3f	 imul	 eax, DWORD PTR _i$1[ebp], 63
  0006e	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	8d 84 01 a0 01
	00 00		 lea	 eax, DWORD PTR [ecx+eax+416]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _strncpy
  0007e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 300  : 
; 301  : 			PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_SELECT], "OnChangeName", Py_BuildValue("(is)", i, ChangeNamePacket.name));

  00081	8d 45 e1	 lea	 eax, DWORD PTR _ChangeNamePacket$[ebp+5]
  00084	50		 push	 eax
  00085	ff 75 d8	 push	 DWORD PTR _i$1[ebp]
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_04JMLDJNEM@?$CIis?$CJ@
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
  00096	50		 push	 eax
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0N@ICACADKM@OnChangeName@
  0009c	6a 04		 push	 4
  0009e	58		 pop	 eax
  0009f	d1 e0		 shl	 eax, 1
  000a1	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	ff b4 01 7c 01
	00 00		 push	 DWORD PTR [ecx+eax+380]
  000ab	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  000b0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 302  : 			return true;

  000b3	b0 01		 mov	 al, 1
  000b5	eb 33		 jmp	 SHORT $LN1@RecvChange
$LN6@RecvChange:

; 303  : 		}
; 304  : 	}

  000b7	e9 79 ff ff ff	 jmp	 $LN2@RecvChange
$LN3@RecvChange:

; 305  : 
; 306  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_SELECT], "OnCreateFailure", Py_BuildValue("(i)", 100));

  000bc	6a 64		 push	 100			; 00000064H
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_03LIHNMIHG@?$CIi?$CJ@
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  000c9	59		 pop	 ecx
  000ca	59		 pop	 ecx
  000cb	50		 push	 eax
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JBAEOLGH@OnCreateFailure@
  000d1	6a 04		 push	 4
  000d3	58		 pop	 eax
  000d4	d1 e0		 shl	 eax, 1
  000d6	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d9	ff b4 01 7c 01
	00 00		 push	 DWORD PTR [ecx+eax+380]
  000e0	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 307  : 	return true;

  000e8	b0 01		 mov	 al, 1
$LN1@RecvChange:

; 308  : }

  000ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ed	33 cd		 xor	 ecx, ebp
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	c9		 leave
  000f5	c3		 ret	 0
?__RecvChangeName@CPythonNetworkStream@@IAE_NXZ ENDP	; CPythonNetworkStream::__RecvChangeName
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?__RecvPlayerDestroyFailurePacket@CPythonNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_packet_blank$ = -1					; size = 1
?__RecvPlayerDestroyFailurePacket@CPythonNetworkStream@@IAE_NXZ PROC ; CPythonNetworkStream::__RecvPlayerDestroyFailurePacket, COMDAT
; _this$ = ecx

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 280  : 	TPacketGCBlank packet_blank;
; 281  : 	if (!Recv(sizeof(TPacketGCBlank), &packet_blank))

  00008	8d 45 ff	 lea	 eax, DWORD PTR _packet_blank$[ebp]
  0000b	50		 push	 eax
  0000c	6a 01		 push	 1
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00016	0f b6 c0	 movzx	 eax, al
  00019	85 c0		 test	 eax, eax
  0001b	75 04		 jne	 SHORT $LN2@RecvPlayer

; 282  : 		return false;

  0001d	32 c0		 xor	 al, al
  0001f	eb 2b		 jmp	 SHORT $LN1@RecvPlayer
$LN2@RecvPlayer:

; 283  : 
; 284  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_SELECT], "OnDeleteFailure", Py_BuildValue("()"));

  00021	68 00 00 00 00	 push	 OFFSET ??_C@_02HCKGKOFO@?$CI?$CJ@
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0002c	59		 pop	 ecx
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BAMNKIDG@OnDeleteFailure@
  00033	6a 04		 push	 4
  00035	58		 pop	 eax
  00036	d1 e0		 shl	 eax, 1
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	ff b4 01 7c 01
	00 00		 push	 DWORD PTR [ecx+eax+380]
  00042	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 285  : 	return true;

  0004a	b0 01		 mov	 al, 1
$LN1@RecvPlayer:

; 286  : }

  0004c	c9		 leave
  0004d	c3		 ret	 0
?__RecvPlayerDestroyFailurePacket@CPythonNetworkStream@@IAE_NXZ ENDP ; CPythonNetworkStream::__RecvPlayerDestroyFailurePacket
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?__RecvPlayerDestroySuccessPacket@CPythonNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_this$ = -8						; size = 4
_packet$ = -4						; size = 2
?__RecvPlayerDestroySuccessPacket@CPythonNetworkStream@@IAE_NXZ PROC ; CPythonNetworkStream::__RecvPlayerDestroySuccessPacket, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 266  : 	TPacketGCDestroyCharacterSuccess packet;
; 267  : 	if (!Recv(sizeof(TPacketGCDestroyCharacterSuccess), &packet))

  00009	8d 45 fc	 lea	 eax, DWORD PTR _packet$[ebp]
  0000c	50		 push	 eax
  0000d	6a 02		 push	 2
  0000f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	75 07		 jne	 SHORT $LN2@RecvPlayer

; 268  : 		return false;

  0001e	32 c0		 xor	 al, al
  00020	e9 96 00 00 00	 jmp	 $LN1@RecvPlayer
$LN2@RecvPlayer:

; 269  : 
; 270  : 	memset(&m_akSimplePlayerInfo[packet.account_index], 0, sizeof(m_akSimplePlayerInfo[packet.account_index]));

  00025	6a 3f		 push	 63			; 0000003fH
  00027	6a 00		 push	 0
  00029	0f b6 45 fd	 movzx	 eax, BYTE PTR _packet$[ebp+1]
  0002d	6b c0 3f	 imul	 eax, eax, 63
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8d 84 01 9c 01
	00 00		 lea	 eax, DWORD PTR [ecx+eax+412]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 271  : 	m_adwGuildID[packet.account_index] = 0;

  00043	0f b6 45 fd	 movzx	 eax, BYTE PTR _packet$[ebp+1]
  00047	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	83 a4 81 98 02
	00 00 00	 and	 DWORD PTR [ecx+eax*4+664], 0

; 272  : 	m_astrGuildName[packet.account_index] = "";

  00052	0f b6 45 fd	 movzx	 eax, BYTE PTR _packet$[ebp+1]
  00056	6b c0 18	 imul	 eax, eax, 24
  00059	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	8d 84 01 a8 02
	00 00		 lea	 eax, DWORD PTR [ecx+eax+680]
  00063	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00066	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0006b	e8 00 00 00 00	 call	 _strlen
  00070	59		 pop	 ecx
  00071	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  00074	8b 45 f4	 mov	 eax, DWORD PTR $T2[ebp]
  00077	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007a	ff 75 f0	 push	 DWORD PTR $T1[ebp]
  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00082	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp

; 274  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_SELECT], "OnDeleteSuccess", Py_BuildValue("(i)", packet.account_index));

  0008a	0f b6 45 fd	 movzx	 eax, BYTE PTR _packet$[ebp+1]
  0008e	50		 push	 eax
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_03LIHNMIHG@?$CIi?$CJ@
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0009a	59		 pop	 ecx
  0009b	59		 pop	 ecx
  0009c	50		 push	 eax
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NJIPBDGM@OnDeleteSuccess@
  000a2	6a 04		 push	 4
  000a4	58		 pop	 eax
  000a5	d1 e0		 shl	 eax, 1
  000a7	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	ff b4 01 7c 01
	00 00		 push	 DWORD PTR [ecx+eax+380]
  000b1	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  000b6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 275  : 	return true;

  000b9	b0 01		 mov	 al, 1
$LN1@RecvPlayer:

; 276  : }

  000bb	c9		 leave
  000bc	c3		 ret	 0
?__RecvPlayerDestroySuccessPacket@CPythonNetworkStream@@IAE_NXZ ENDP ; CPythonNetworkStream::__RecvPlayerDestroySuccessPacket
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?__RecvPlayerCreateFailurePacket@CPythonNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_packet$ = -4						; size = 2
?__RecvPlayerCreateFailurePacket@CPythonNetworkStream@@IAE_NXZ PROC ; CPythonNetworkStream::__RecvPlayerCreateFailurePacket, COMDAT
; _this$ = ecx

; 253  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 254  : 	TPacketGCCreateFailure packet;
; 255  : 
; 256  : 	if (!Recv(sizeof(TPacketGCCreateFailure), &packet))

  00008	8d 45 fc	 lea	 eax, DWORD PTR _packet$[ebp]
  0000b	50		 push	 eax
  0000c	6a 02		 push	 2
  0000e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00016	0f b6 c0	 movzx	 eax, al
  00019	85 c0		 test	 eax, eax
  0001b	75 04		 jne	 SHORT $LN2@RecvPlayer

; 257  : 		return false;

  0001d	32 c0		 xor	 al, al
  0001f	eb 61		 jmp	 SHORT $LN1@RecvPlayer
$LN2@RecvPlayer:

; 258  : 
; 259  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_CREATE], "OnCreateFailure", Py_BuildValue("(i)", packet.bType));

  00021	0f b6 45 fd	 movzx	 eax, BYTE PTR _packet$[ebp+1]
  00025	50		 push	 eax
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_03LIHNMIHG@?$CIi?$CJ@
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00031	59		 pop	 ecx
  00032	59		 pop	 ecx
  00033	50		 push	 eax
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JBAEOLGH@OnCreateFailure@
  00039	6a 04		 push	 4
  0003b	58		 pop	 eax
  0003c	6b c0 03	 imul	 eax, eax, 3
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	ff b4 01 7c 01
	00 00		 push	 DWORD PTR [ecx+eax+380]
  00049	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 260  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_SELECT], "OnCreateFailure", Py_BuildValue("(i)", packet.bType));

  00051	0f b6 45 fd	 movzx	 eax, BYTE PTR _packet$[ebp+1]
  00055	50		 push	 eax
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_03LIHNMIHG@?$CIi?$CJ@
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00061	59		 pop	 ecx
  00062	59		 pop	 ecx
  00063	50		 push	 eax
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JBAEOLGH@OnCreateFailure@
  00069	6a 04		 push	 4
  0006b	58		 pop	 eax
  0006c	d1 e0		 shl	 eax, 1
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	ff b4 01 7c 01
	00 00		 push	 DWORD PTR [ecx+eax+380]
  00078	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 261  : 	return true;

  00080	b0 01		 mov	 al, 1
$LN1@RecvPlayer:

; 262  : }

  00082	c9		 leave
  00083	c3		 ret	 0
?__RecvPlayerCreateFailurePacket@CPythonNetworkStream@@IAE_NXZ ENDP ; CPythonNetworkStream::__RecvPlayerCreateFailurePacket
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?__RecvPlayerCreateSuccessPacket@CPythonNetworkStream@@IAE_NXZ
_TEXT	SEGMENT
_this$ = -76						; size = 4
_kCreateSuccessPacket$ = -72				; size = 65
__$ArrayPad$ = -4					; size = 4
?__RecvPlayerCreateSuccessPacket@CPythonNetworkStream@@IAE_NXZ PROC ; CPythonNetworkStream::__RecvPlayerCreateSuccessPacket, COMDAT
; _this$ = ecx

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 4d b4	 mov	 DWORD PTR _this$[ebp], ecx

; 235  : 	TPacketGCPlayerCreateSuccess kCreateSuccessPacket;
; 236  : 
; 237  : 	if (!Recv(sizeof(kCreateSuccessPacket), &kCreateSuccessPacket))

  00015	8d 45 b8	 lea	 eax, DWORD PTR _kCreateSuccessPacket$[ebp]
  00018	50		 push	 eax
  00019	6a 41		 push	 65			; 00000041H
  0001b	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00023	0f b6 c0	 movzx	 eax, al
  00026	85 c0		 test	 eax, eax
  00028	75 04		 jne	 SHORT $LN2@RecvPlayer

; 238  : 		return false;

  0002a	32 c0		 xor	 al, al
  0002c	eb 69		 jmp	 SHORT $LN1@RecvPlayer
$LN2@RecvPlayer:

; 239  : 
; 240  : 	if (kCreateSuccessPacket.bAccountCharacterSlot>=PLAYER_PER_ACCOUNT4)

  0002e	0f b6 45 b9	 movzx	 eax, BYTE PTR _kCreateSuccessPacket$[ebp+1]
  00032	83 f8 04	 cmp	 eax, 4
  00035	7c 18		 jl	 SHORT $LN3@RecvPlayer

; 241  : 	{
; 242  : 		TraceError("CPythonNetworkStream::RecvPlayerCreateSuccessPacket - OUT OF RANGE SLOT(%d) > PLATER_PER_ACCOUNT(%d)",

  00037	6a 04		 push	 4
  00039	0f b6 45 b9	 movzx	 eax, BYTE PTR _kCreateSuccessPacket$[ebp+1]
  0003d	50		 push	 eax
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0GF@HIGNNGB@CPythonNetworkStream?3?3RecvPlaye@
  00043	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 243  : 			kCreateSuccessPacket.bAccountCharacterSlot, PLAYER_PER_ACCOUNT4);
; 244  : 		return true;

  0004b	b0 01		 mov	 al, 1
  0004d	eb 48		 jmp	 SHORT $LN1@RecvPlayer
$LN3@RecvPlayer:

; 245  : 	}
; 246  : 
; 247  : 	m_akSimplePlayerInfo[kCreateSuccessPacket.bAccountCharacterSlot]=kCreateSuccessPacket.kSimplePlayerInfomation;

  0004f	0f b6 45 b9	 movzx	 eax, BYTE PTR _kCreateSuccessPacket$[ebp+1]
  00053	6b c0 3f	 imul	 eax, eax, 63
  00056	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8d bc 01 9c 01
	00 00		 lea	 edi, DWORD PTR [ecx+eax+412]
  00060	6a 0f		 push	 15			; 0000000fH
  00062	59		 pop	 ecx
  00063	8d 75 ba	 lea	 esi, DWORD PTR _kCreateSuccessPacket$[ebp+2]
  00066	f3 a5		 rep movsd
  00068	66 a5		 movsw
  0006a	a4		 movsb

; 248  : 	PyCallClassMemberFunc(m_apoPhaseWnd[PHASE_WINDOW_CREATE], "OnCreateSuccess", Py_BuildValue("()"));

  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_02HCKGKOFO@?$CI?$CJ@
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00076	59		 pop	 ecx
  00077	50		 push	 eax
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FIEGFADN@OnCreateSuccess@
  0007d	6a 04		 push	 4
  0007f	58		 pop	 eax
  00080	6b c0 03	 imul	 eax, eax, 3
  00083	8b 4d b4	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	ff b4 01 7c 01
	00 00		 push	 DWORD PTR [ecx+eax+380]
  0008d	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH

; 249  : 	return true;

  00095	b0 01		 mov	 al, 1
$LN1@RecvPlayer:

; 250  : }

  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	33 cd		 xor	 ecx, ebp
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	c9		 leave
  000a4	c3		 ret	 0
?__RecvPlayerCreateSuccessPacket@CPythonNetworkStream@@IAE_NXZ ENDP ; CPythonNetworkStream::__RecvPlayerCreateSuccessPacket
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SelectPhase@CPythonNetworkStream@@IAEXXZ
_TEXT	SEGMENT
_header$ = -33						; size = 1
_this$ = -32						; size = 4
tv70 = -28						; size = 4
_PointChange$1 = -24					; size = 17
__$ArrayPad$ = -4					; size = 4
?SelectPhase@CPythonNetworkStream@@IAEXXZ PROC		; CPythonNetworkStream::SelectPhase, COMDAT
; _this$ = ecx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 43   : 	TPacketHeader header;
; 44   : 
; 45   : 	if (!CheckPacket(&header))

  00013	8d 45 df	 lea	 eax, DWORD PTR _header$[ebp]
  00016	50		 push	 eax
  00017	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	e8 00 00 00 00	 call	 ?CheckPacket@CPythonNetworkStream@@IAE_NPAE@Z ; CPythonNetworkStream::CheckPacket
  0001f	0f b6 c0	 movzx	 eax, al
  00022	85 c0		 test	 eax, eax
  00024	75 05		 jne	 SHORT $LN4@SelectPhas

; 46   : 		return;

  00026	e9 3b 02 00 00	 jmp	 $LN1@SelectPhas
$LN4@SelectPhas:

; 47   : 
; 48   : 	switch (header)

  0002b	0f b6 45 df	 movzx	 eax, BYTE PTR _header$[ebp]
  0002f	89 45 e4	 mov	 DWORD PTR tv70[ebp], eax
  00032	83 7d e4 5a	 cmp	 DWORD PTR tv70[ebp], 90	; 0000005aH
  00036	7f 6a		 jg	 SHORT $LN33@SelectPhas
  00038	83 7d e4 5a	 cmp	 DWORD PTR tv70[ebp], 90	; 0000005aH
  0003c	0f 84 ed 00 00
	00		 je	 $LN7@SelectPhas
  00042	83 7d e4 0b	 cmp	 DWORD PTR tv70[ebp], 11	; 0000000bH
  00046	7f 37		 jg	 SHORT $LN34@SelectPhas
  00048	83 7d e4 0b	 cmp	 DWORD PTR tv70[ebp], 11	; 0000000bH
  0004c	0f 84 5a 01 00
	00		 je	 $LN17@SelectPhas
  00052	83 7d e4 06	 cmp	 DWORD PTR tv70[ebp], 6
  00056	0f 84 ec 00 00
	00		 je	 $LN9@SelectPhas
  0005c	83 7d e4 08	 cmp	 DWORD PTR tv70[ebp], 8
  00060	0f 84 14 01 00
	00		 je	 $LN13@SelectPhas
  00066	83 7d e4 09	 cmp	 DWORD PTR tv70[ebp], 9
  0006a	0f 84 23 01 00
	00		 je	 $LN15@SelectPhas
  00070	83 7d e4 0a	 cmp	 DWORD PTR tv70[ebp], 10	; 0000000aH
  00074	0f 84 4b 01 00
	00		 je	 $LN19@SelectPhas
  0007a	e9 da 01 00 00	 jmp	 $LN2@SelectPhas
$LN34@SelectPhas:
  0007f	83 7d e4 11	 cmp	 DWORD PTR tv70[ebp], 17	; 00000011H
  00083	0f 84 ad 01 00
	00		 je	 $LN29@SelectPhas
  00089	83 7d e4 20	 cmp	 DWORD PTR tv70[ebp], 32	; 00000020H
  0008d	0f 84 ce 00 00
	00		 je	 $LN11@SelectPhas
  00093	83 7d e4 2c	 cmp	 DWORD PTR tv70[ebp], 44	; 0000002cH
  00097	0f 84 ab 01 00
	00		 je	 $LN30@SelectPhas
  0009d	e9 b7 01 00 00	 jmp	 $LN2@SelectPhas
$LN33@SelectPhas:
  000a2	81 7d e4 fb 00
	00 00		 cmp	 DWORD PTR tv70[ebp], 251 ; 000000fbH
  000a9	7f 43		 jg	 SHORT $LN35@SelectPhas
  000ab	81 7d e4 fb 00
	00 00		 cmp	 DWORD PTR tv70[ebp], 251 ; 000000fbH
  000b2	0f 84 66 01 00
	00		 je	 $LN27@SelectPhas
  000b8	83 7d e4 6b	 cmp	 DWORD PTR tv70[ebp], 107 ; 0000006bH
  000bc	0f 84 19 01 00
	00		 je	 $LN21@SelectPhas
  000c2	81 7d e4 98 00
	00 00		 cmp	 DWORD PTR tv70[ebp], 152 ; 00000098H
  000c9	0f 84 37 01 00
	00		 je	 $LN25@SelectPhas
  000cf	81 7d e4 99 00
	00 00		 cmp	 DWORD PTR tv70[ebp], 153 ; 00000099H
  000d6	0f 84 36 01 00
	00		 je	 $LN26@SelectPhas
  000dc	81 7d e4 fa 00
	00 00		 cmp	 DWORD PTR tv70[ebp], 250 ; 000000faH
  000e3	0f 84 41 01 00
	00		 je	 $LN28@SelectPhas
  000e9	e9 6b 01 00 00	 jmp	 $LN2@SelectPhas
$LN35@SelectPhas:
  000ee	81 7d e4 fc 00
	00 00		 cmp	 DWORD PTR tv70[ebp], 252 ; 000000fcH
  000f5	0f 84 ff 00 00
	00		 je	 $LN24@SelectPhas
  000fb	81 7d e4 fd 00
	00 00		 cmp	 DWORD PTR tv70[ebp], 253 ; 000000fdH
  00102	74 12		 je	 SHORT $LN5@SelectPhas
  00104	81 7d e4 ff 00
	00 00		 cmp	 DWORD PTR tv70[ebp], 255 ; 000000ffH
  0010b	0f 84 dd 00 00
	00		 je	 $LN23@SelectPhas
  00111	e9 43 01 00 00	 jmp	 $LN2@SelectPhas
$LN5@SelectPhas:

; 49   : 	{
; 50   : 		case HEADER_GC_PHASE:
; 51   : 			if (RecvPhasePacket())

  00116	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	e8 00 00 00 00	 call	 ?RecvPhasePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::RecvPhasePacket
  0011e	0f b6 c0	 movzx	 eax, al
  00121	85 c0		 test	 eax, eax
  00123	74 05		 je	 SHORT $LN6@SelectPhas

; 52   : 				return;	

  00125	e9 3c 01 00 00	 jmp	 $LN1@SelectPhas
$LN6@SelectPhas:

; 53   : 			break;

  0012a	e9 2a 01 00 00	 jmp	 $LN2@SelectPhas
$LN7@SelectPhas:

; 54   : 
; 55   : 		case HEADER_GC_EMPIRE:
; 56   : 			if (__RecvEmpirePacket())

  0012f	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00132	e8 00 00 00 00	 call	 ?__RecvEmpirePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvEmpirePacket
  00137	0f b6 c0	 movzx	 eax, al
  0013a	85 c0		 test	 eax, eax
  0013c	74 05		 je	 SHORT $LN8@SelectPhas

; 57   : 				return;

  0013e	e9 23 01 00 00	 jmp	 $LN1@SelectPhas
$LN8@SelectPhas:

; 58   : 			break;

  00143	e9 11 01 00 00	 jmp	 $LN2@SelectPhas
$LN9@SelectPhas:

; 59   : 
; 60   : 		case HEADER_GC_LOGIN_SUCCESS3:
; 61   : 			if (__RecvLoginSuccessPacket3())

  00148	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0014b	e8 00 00 00 00	 call	 ?__RecvLoginSuccessPacket3@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvLoginSuccessPacket3
  00150	0f b6 c0	 movzx	 eax, al
  00153	85 c0		 test	 eax, eax
  00155	74 05		 je	 SHORT $LN10@SelectPhas

; 62   : 				return;

  00157	e9 0a 01 00 00	 jmp	 $LN1@SelectPhas
$LN10@SelectPhas:

; 63   : 			break;

  0015c	e9 f8 00 00 00	 jmp	 $LN2@SelectPhas
$LN11@SelectPhas:

; 64   : 
; 65   : 		case HEADER_GC_LOGIN_SUCCESS4:
; 66   : 			if (__RecvLoginSuccessPacket4())

  00161	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00164	e8 00 00 00 00	 call	 ?__RecvLoginSuccessPacket4@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvLoginSuccessPacket4
  00169	0f b6 c0	 movzx	 eax, al
  0016c	85 c0		 test	 eax, eax
  0016e	74 05		 je	 SHORT $LN12@SelectPhas

; 67   : 				return;

  00170	e9 f1 00 00 00	 jmp	 $LN1@SelectPhas
$LN12@SelectPhas:

; 68   : 			break;

  00175	e9 df 00 00 00	 jmp	 $LN2@SelectPhas
$LN13@SelectPhas:

; 69   : 
; 70   : 
; 71   : 		case HEADER_GC_PLAYER_CREATE_SUCCESS:
; 72   : 			if (__RecvPlayerCreateSuccessPacket())

  0017a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	e8 00 00 00 00	 call	 ?__RecvPlayerCreateSuccessPacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerCreateSuccessPacket
  00182	0f b6 c0	 movzx	 eax, al
  00185	85 c0		 test	 eax, eax
  00187	74 05		 je	 SHORT $LN14@SelectPhas

; 73   : 				return;

  00189	e9 d8 00 00 00	 jmp	 $LN1@SelectPhas
$LN14@SelectPhas:

; 74   : 			break;

  0018e	e9 c6 00 00 00	 jmp	 $LN2@SelectPhas
$LN15@SelectPhas:

; 75   : 
; 76   : 		case HEADER_GC_PLAYER_CREATE_FAILURE:
; 77   : 			if (__RecvPlayerCreateFailurePacket())

  00193	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00196	e8 00 00 00 00	 call	 ?__RecvPlayerCreateFailurePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerCreateFailurePacket
  0019b	0f b6 c0	 movzx	 eax, al
  0019e	85 c0		 test	 eax, eax
  001a0	74 05		 je	 SHORT $LN16@SelectPhas

; 78   : 				return;

  001a2	e9 bf 00 00 00	 jmp	 $LN1@SelectPhas
$LN16@SelectPhas:

; 79   : 			break;

  001a7	e9 ad 00 00 00	 jmp	 $LN2@SelectPhas
$LN17@SelectPhas:

; 80   : 
; 81   : 		case HEADER_GC_PLAYER_DELETE_WRONG_SOCIAL_ID:
; 82   : 			if (__RecvPlayerDestroyFailurePacket())

  001ac	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  001af	e8 00 00 00 00	 call	 ?__RecvPlayerDestroyFailurePacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerDestroyFailurePacket
  001b4	0f b6 c0	 movzx	 eax, al
  001b7	85 c0		 test	 eax, eax
  001b9	74 05		 je	 SHORT $LN18@SelectPhas

; 83   : 				return;

  001bb	e9 a6 00 00 00	 jmp	 $LN1@SelectPhas
$LN18@SelectPhas:

; 84   : 			break;

  001c0	e9 94 00 00 00	 jmp	 $LN2@SelectPhas
$LN19@SelectPhas:

; 85   : 
; 86   : 		case HEADER_GC_PLAYER_DELETE_SUCCESS:
; 87   : 			if (__RecvPlayerDestroySuccessPacket())

  001c5	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  001c8	e8 00 00 00 00	 call	 ?__RecvPlayerDestroySuccessPacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvPlayerDestroySuccessPacket
  001cd	0f b6 c0	 movzx	 eax, al
  001d0	85 c0		 test	 eax, eax
  001d2	74 05		 je	 SHORT $LN20@SelectPhas

; 88   : 				return;

  001d4	e9 8d 00 00 00	 jmp	 $LN1@SelectPhas
$LN20@SelectPhas:

; 89   : 			break;

  001d9	eb 7e		 jmp	 SHORT $LN2@SelectPhas
$LN21@SelectPhas:

; 90   : 
; 91   : 		case HEADER_GC_CHANGE_NAME:
; 92   : 			if (__RecvChangeName())

  001db	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  001de	e8 00 00 00 00	 call	 ?__RecvChangeName@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::__RecvChangeName
  001e3	0f b6 c0	 movzx	 eax, al
  001e6	85 c0		 test	 eax, eax
  001e8	74 02		 je	 SHORT $LN22@SelectPhas

; 93   : 				return;

  001ea	eb 7a		 jmp	 SHORT $LN1@SelectPhas
$LN22@SelectPhas:

; 94   : 			break;

  001ec	eb 6b		 jmp	 SHORT $LN2@SelectPhas
$LN23@SelectPhas:

; 95   : 
; 96   : 		case HEADER_GC_HANDSHAKE:
; 97   : 			RecvHandshakePacket();

  001ee	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  001f1	e8 00 00 00 00	 call	 ?RecvHandshakePacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvHandshakePacket

; 98   : 			return;

  001f6	eb 6e		 jmp	 SHORT $LN1@SelectPhas

; 99   : 			break;

  001f8	eb 5f		 jmp	 SHORT $LN2@SelectPhas
$LN24@SelectPhas:

; 100  : 
; 101  : 		case HEADER_GC_HANDSHAKE_OK:
; 102  : 			RecvHandshakeOKPacket();

  001fa	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  001fd	e8 00 00 00 00	 call	 ?RecvHandshakeOKPacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvHandshakeOKPacket

; 103  : 			return;

  00202	eb 62		 jmp	 SHORT $LN1@SelectPhas

; 104  : 			break;

  00204	eb 53		 jmp	 SHORT $LN2@SelectPhas
$LN25@SelectPhas:

; 105  : 
; 106  : 		case HEADER_GC_HYBRIDCRYPT_KEYS:
; 107  : 			RecvHybridCryptKeyPacket();

  00206	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00209	e8 00 00 00 00	 call	 ?RecvHybridCryptKeyPacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvHybridCryptKeyPacket

; 108  : 			return;

  0020e	eb 56		 jmp	 SHORT $LN1@SelectPhas

; 109  : 			break;

  00210	eb 47		 jmp	 SHORT $LN2@SelectPhas
$LN26@SelectPhas:

; 110  : 
; 111  : 		case HEADER_GC_HYBRIDCRYPT_SDB:
; 112  : 			RecvHybridCryptSDBPacket();

  00212	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00215	e8 00 00 00 00	 call	 ?RecvHybridCryptSDBPacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvHybridCryptSDBPacket

; 113  : 			return;

  0021a	eb 4a		 jmp	 SHORT $LN1@SelectPhas

; 114  : 			break;

  0021c	eb 3b		 jmp	 SHORT $LN2@SelectPhas
$LN27@SelectPhas:

; 115  : 
; 116  : 
; 117  : #ifdef _IMPROVED_PACKET_ENCRYPTION_
; 118  : 		case HEADER_GC_KEY_AGREEMENT:
; 119  : 			RecvKeyAgreementPacket();

  0021e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00221	e8 00 00 00 00	 call	 ?RecvKeyAgreementPacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvKeyAgreementPacket

; 120  : 			return;

  00226	eb 3e		 jmp	 SHORT $LN1@SelectPhas

; 121  : 			break;

  00228	eb 2f		 jmp	 SHORT $LN2@SelectPhas
$LN28@SelectPhas:

; 122  : 
; 123  : 		case HEADER_GC_KEY_AGREEMENT_COMPLETED:
; 124  : 			RecvKeyAgreementCompletedPacket();

  0022a	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0022d	e8 00 00 00 00	 call	 ?RecvKeyAgreementCompletedPacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::RecvKeyAgreementCompletedPacket

; 125  : 			return;

  00232	eb 32		 jmp	 SHORT $LN1@SelectPhas

; 126  : 			break;

  00234	eb 23		 jmp	 SHORT $LN2@SelectPhas
$LN29@SelectPhas:

; 127  : #endif
; 128  : 
; 129  : 		case HEADER_GC_PLAYER_POINT_CHANGE:
; 130  : 			TPacketGCPointChange PointChange;
; 131  : 			Recv(sizeof(TPacketGCPointChange), &PointChange);

  00236	8d 45 e8	 lea	 eax, DWORD PTR _PointChange$1[ebp]
  00239	50		 push	 eax
  0023a	6a 11		 push	 17			; 00000011H
  0023c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0023f	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv

; 132  : 			return;

  00244	eb 20		 jmp	 SHORT $LN1@SelectPhas

; 133  : 			break;

  00246	eb 11		 jmp	 SHORT $LN2@SelectPhas
$LN30@SelectPhas:

; 134  : 
; 135  : 		///////////////////////////////////////////////////////////////////////////////////////////
; 136  : 		case HEADER_GC_PING:
; 137  : 			if (RecvPingPacket())

  00248	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0024b	e8 00 00 00 00	 call	 ?RecvPingPacket@CPythonNetworkStream@@IAE_NXZ ; CPythonNetworkStream::RecvPingPacket
  00250	0f b6 c0	 movzx	 eax, al
  00253	85 c0		 test	 eax, eax
  00255	74 02		 je	 SHORT $LN2@SelectPhas

; 138  : 				return;

  00257	eb 0d		 jmp	 SHORT $LN1@SelectPhas
$LN2@SelectPhas:

; 139  : 			break;
; 140  : 	}
; 141  : 
; 142  : 	RecvErrorPacket(header);

  00259	0f b6 45 df	 movzx	 eax, BYTE PTR _header$[ebp]
  0025d	50		 push	 eax
  0025e	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00261	e8 00 00 00 00	 call	 ?RecvErrorPacket@CPythonNetworkStream@@IAE_NH@Z ; CPythonNetworkStream::RecvErrorPacket
$LN1@SelectPhas:

; 143  : }

  00266	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00269	33 cd		 xor	 ecx, ebp
  0026b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00270	c9		 leave
  00271	c3		 ret	 0
?SelectPhase@CPythonNetworkStream@@IAEXXZ ENDP		; CPythonNetworkStream::SelectPhase
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SendDestroyCharacterPacket@CPythonNetworkStream@@QAE_NEPBD@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_DestroyCharacterPacket$ = -16				; size = 10
__$ArrayPad$ = -4					; size = 4
_index$ = 8						; size = 1
_szPrivateCode$ = 12					; size = 4
?SendDestroyCharacterPacket@CPythonNetworkStream@@QAE_NEPBD@Z PROC ; CPythonNetworkStream::SendDestroyCharacterPacket, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 179  :     TPacketCGDestroyCharacter DestroyCharacterPacket;
; 180  : 
; 181  : 	DestroyCharacterPacket.header = HEADER_CG_PLAYER_DESTROY;

  00013	c6 45 f0 05	 mov	 BYTE PTR _DestroyCharacterPacket$[ebp], 5

; 182  : 	DestroyCharacterPacket.index = index;

  00017	8a 45 08	 mov	 al, BYTE PTR _index$[ebp]
  0001a	88 45 f1	 mov	 BYTE PTR _DestroyCharacterPacket$[ebp+1], al

; 183  : 	strncpy(DestroyCharacterPacket.szPrivateCode, szPrivateCode, PRIVATE_CODE_LENGTH-1);

  0001d	6a 07		 push	 7
  0001f	ff 75 0c	 push	 DWORD PTR _szPrivateCode$[ebp]
  00022	8d 45 f2	 lea	 eax, DWORD PTR _DestroyCharacterPacket$[ebp+2]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _strncpy
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 184  : 
; 185  : 	if (!Send(sizeof(TPacketCGDestroyCharacter), &DestroyCharacterPacket))

  0002e	8d 45 f0	 lea	 eax, DWORD PTR _DestroyCharacterPacket$[ebp]
  00031	50		 push	 eax
  00032	6a 0a		 push	 10			; 0000000aH
  00034	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	85 c0		 test	 eax, eax
  00041	75 0f		 jne	 SHORT $LN2@SendDestro

; 186  : 	{
; 187  : 		Tracen("SendDestroyCharacterPacket");

  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@PMHPNGGJ@SendDestroyCharacterPacket@
  00048	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0004d	59		 pop	 ecx

; 188  : 		return false;

  0004e	32 c0		 xor	 al, al
  00050	eb 08		 jmp	 SHORT $LN1@SendDestro
$LN2@SendDestro:

; 189  : 	}
; 190  : 
; 191  : 	return SendSequence();

  00052	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?SendSequence@CNetworkStream@@QAE_NXZ ; CNetworkStream::SendSequence
$LN1@SendDestro:

; 192  : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	c9		 leave
  00065	c2 08 00	 ret	 8
?SendDestroyCharacterPacket@CPythonNetworkStream@@QAE_NEPBD@Z ENDP ; CPythonNetworkStream::SendDestroyCharacterPacket
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SendCreateCharacterPacket@CPythonNetworkStream@@QAE_NEPBDEEEEEE@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
_createCharacterPacket$ = -40				; size = 34
__$ArrayPad$ = -4					; size = 4
_index$ = 8						; size = 1
_name$ = 12						; size = 4
_job$ = 16						; size = 1
_shape$ = 20						; size = 1
_byCON$ = 24						; size = 1
_byINT$ = 28						; size = 1
_bySTR$ = 32						; size = 1
_byDEX$ = 36						; size = 1
?SendCreateCharacterPacket@CPythonNetworkStream@@QAE_NEPBDEEEEEE@Z PROC ; CPythonNetworkStream::SendCreateCharacterPacket, COMDAT
; _this$ = ecx

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx

; 196  : 	TPacketCGCreateCharacter createCharacterPacket;
; 197  : 
; 198  : 	createCharacterPacket.header = HEADER_CG_PLAYER_CREATE;

  00013	c6 45 d8 04	 mov	 BYTE PTR _createCharacterPacket$[ebp], 4

; 199  : 	createCharacterPacket.index = index;

  00017	8a 45 08	 mov	 al, BYTE PTR _index$[ebp]
  0001a	88 45 d9	 mov	 BYTE PTR _createCharacterPacket$[ebp+1], al

; 200  : 	strncpy(createCharacterPacket.name, name, CHARACTER_NAME_MAX_LEN);

  0001d	6a 18		 push	 24			; 00000018H
  0001f	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00022	8d 45 da	 lea	 eax, DWORD PTR _createCharacterPacket$[ebp+2]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _strncpy
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 201  : 	createCharacterPacket.job = job;

  0002e	66 0f b6 45 10	 movzx	 ax, BYTE PTR _job$[ebp]
  00033	66 89 45 f3	 mov	 WORD PTR _createCharacterPacket$[ebp+27], ax

; 202  : 	createCharacterPacket.shape = shape;

  00037	8a 45 14	 mov	 al, BYTE PTR _shape$[ebp]
  0003a	88 45 f5	 mov	 BYTE PTR _createCharacterPacket$[ebp+29], al

; 203  : 	createCharacterPacket.CON = byCON;

  0003d	8a 45 18	 mov	 al, BYTE PTR _byCON$[ebp]
  00040	88 45 f6	 mov	 BYTE PTR _createCharacterPacket$[ebp+30], al

; 204  : 	createCharacterPacket.INT = byINT;

  00043	8a 45 1c	 mov	 al, BYTE PTR _byINT$[ebp]
  00046	88 45 f7	 mov	 BYTE PTR _createCharacterPacket$[ebp+31], al

; 205  : 	createCharacterPacket.STR = bySTR;

  00049	8a 45 20	 mov	 al, BYTE PTR _bySTR$[ebp]
  0004c	88 45 f8	 mov	 BYTE PTR _createCharacterPacket$[ebp+32], al

; 206  : 	createCharacterPacket.DEX = byDEX;

  0004f	8a 45 24	 mov	 al, BYTE PTR _byDEX$[ebp]
  00052	88 45 f9	 mov	 BYTE PTR _createCharacterPacket$[ebp+33], al

; 207  : 
; 208  : 	if (!Send(sizeof(TPacketCGCreateCharacter), &createCharacterPacket))

  00055	8d 45 d8	 lea	 eax, DWORD PTR _createCharacterPacket$[ebp]
  00058	50		 push	 eax
  00059	6a 22		 push	 34			; 00000022H
  0005b	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  00063	0f b6 c0	 movzx	 eax, al
  00066	85 c0		 test	 eax, eax
  00068	75 0f		 jne	 SHORT $LN2@SendCreate

; 209  : 	{
; 210  : 		Tracen("Failed to SendCreateCharacterPacket");

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MAKBOJI@Failed?5to?5SendCreateCharacterPa@
  0006f	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00074	59		 pop	 ecx

; 211  : 		return false;

  00075	32 c0		 xor	 al, al
  00077	eb 08		 jmp	 SHORT $LN1@SendCreate
$LN2@SendCreate:

; 212  : 	}
; 213  : 
; 214  : 	return SendSequence();

  00079	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  0007c	e8 00 00 00 00	 call	 ?SendSequence@CNetworkStream@@QAE_NXZ ; CNetworkStream::SendSequence
$LN1@SendCreate:

; 215  : }

  00081	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00084	33 cd		 xor	 ecx, ebp
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	c9		 leave
  0008c	c2 20 00	 ret	 32			; 00000020H
?SendCreateCharacterPacket@CPythonNetworkStream@@QAE_NEPBDEEEEEE@Z ENDP ; CPythonNetworkStream::SendCreateCharacterPacket
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SendChangeNamePacket@CPythonNetworkStream@@QAE_NEPBD@Z
_TEXT	SEGMENT
_this$ = -36						; size = 4
_ChangeNamePacket$ = -32				; size = 27
__$ArrayPad$ = -4					; size = 4
_index$ = 8						; size = 1
_name$ = 12						; size = 4
?SendChangeNamePacket@CPythonNetworkStream@@QAE_NEPBD@Z PROC ; CPythonNetworkStream::SendChangeNamePacket, COMDAT
; _this$ = ecx

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d dc	 mov	 DWORD PTR _this$[ebp], ecx

; 219  : 	TPacketCGChangeName ChangeNamePacket;
; 220  : 	ChangeNamePacket.header = HEADER_CG_CHANGE_NAME;

  00013	c6 45 e0 6a	 mov	 BYTE PTR _ChangeNamePacket$[ebp], 106 ; 0000006aH

; 221  : 	ChangeNamePacket.index = index;

  00017	8a 45 08	 mov	 al, BYTE PTR _index$[ebp]
  0001a	88 45 e1	 mov	 BYTE PTR _ChangeNamePacket$[ebp+1], al

; 222  : 	strncpy(ChangeNamePacket.name, name, CHARACTER_NAME_MAX_LEN);

  0001d	6a 18		 push	 24			; 00000018H
  0001f	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00022	8d 45 e2	 lea	 eax, DWORD PTR _ChangeNamePacket$[ebp+2]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 _strncpy
  0002b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 223  : 
; 224  : 	if (!Send(sizeof(TPacketCGChangeName), &ChangeNamePacket))

  0002e	8d 45 e0	 lea	 eax, DWORD PTR _ChangeNamePacket$[ebp]
  00031	50		 push	 eax
  00032	6a 1b		 push	 27			; 0000001bH
  00034	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	85 c0		 test	 eax, eax
  00041	75 0f		 jne	 SHORT $LN2@SendChange

; 225  : 	{
; 226  : 		Tracen("Failed to SendChangeNamePacket");

  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@NACAEM@Failed?5to?5SendChangeNamePacket@
  00048	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0004d	59		 pop	 ecx

; 227  : 		return false;

  0004e	32 c0		 xor	 al, al
  00050	eb 08		 jmp	 SHORT $LN1@SendChange
$LN2@SendChange:

; 228  : 	}
; 229  : 
; 230  : 	return SendSequence();

  00052	8b 4d dc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?SendSequence@CNetworkStream@@QAE_NXZ ; CNetworkStream::SendSequence
$LN1@SendChange:

; 231  : }

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	c9		 leave
  00065	c2 08 00	 ret	 8
?SendChangeNamePacket@CPythonNetworkStream@@QAE_NEPBD@Z ENDP ; CPythonNetworkStream::SendChangeNamePacket
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SendSelectCharacterPacket@CPythonNetworkStream@@QAE_NE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_SelectCharacterPacket$ = -4				; size = 2
_Index$ = 8						; size = 1
?SendSelectCharacterPacket@CPythonNetworkStream@@QAE_NE@Z PROC ; CPythonNetworkStream::SendSelectCharacterPacket, COMDAT
; _this$ = ecx

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 163  : 	TPacketCGSelectCharacter SelectCharacterPacket;
; 164  : 
; 165  : 	SelectCharacterPacket.header = HEADER_CG_PLAYER_SELECT;

  00008	c6 45 fc 06	 mov	 BYTE PTR _SelectCharacterPacket$[ebp], 6

; 166  : 	SelectCharacterPacket.player_index = Index;

  0000c	8a 45 08	 mov	 al, BYTE PTR _Index$[ebp]
  0000f	88 45 fd	 mov	 BYTE PTR _SelectCharacterPacket$[ebp+1], al

; 167  : 
; 168  : 	if (!Send(sizeof(TPacketCGSelectCharacter), &SelectCharacterPacket))

  00012	8d 45 fc	 lea	 eax, DWORD PTR _SelectCharacterPacket$[ebp]
  00015	50		 push	 eax
  00016	6a 02		 push	 2
  00018	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  00020	0f b6 c0	 movzx	 eax, al
  00023	85 c0		 test	 eax, eax
  00025	75 0f		 jne	 SHORT $LN2@SendSelect

; 169  : 	{
; 170  : 		Tracen("SendSelectCharacterPacket - Error");

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LCEFGOOP@SendSelectCharacterPacket?5?9?5Err@
  0002c	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00031	59		 pop	 ecx

; 171  : 		return false;

  00032	32 c0		 xor	 al, al
  00034	eb 08		 jmp	 SHORT $LN1@SendSelect
$LN2@SendSelect:

; 172  : 	}
; 173  : 
; 174  : 	return SendSequence();

  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?SendSequence@CNetworkStream@@QAE_NXZ ; CNetworkStream::SendSequence
$LN1@SendSelect:

; 175  : }

  0003e	c9		 leave
  0003f	c2 04 00	 ret	 4
?SendSelectCharacterPacket@CPythonNetworkStream@@QAE_NE@Z ENDP ; CPythonNetworkStream::SendSelectCharacterPacket
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SendSelectEmpirePacket@CPythonNetworkStream@@QAE_NK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_kPacketEmpire$ = -4					; size = 2
_dwEmpireID$ = 8					; size = 4
?SendSelectEmpirePacket@CPythonNetworkStream@@QAE_NK@Z PROC ; CPythonNetworkStream::SendSelectEmpirePacket, COMDAT
; _this$ = ecx

; 146  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 147  : 	TPacketCGEmpire kPacketEmpire;
; 148  : 	kPacketEmpire.bHeader=HEADER_CG_EMPIRE;

  00008	c6 45 fc 5a	 mov	 BYTE PTR _kPacketEmpire$[ebp], 90 ; 0000005aH

; 149  : 	kPacketEmpire.bEmpire=dwEmpireID;

  0000c	8a 45 08	 mov	 al, BYTE PTR _dwEmpireID$[ebp]
  0000f	88 45 fd	 mov	 BYTE PTR _kPacketEmpire$[ebp+1], al

; 150  : 
; 151  : 	if (!Send(sizeof(kPacketEmpire), &kPacketEmpire))

  00012	8d 45 fc	 lea	 eax, DWORD PTR _kPacketEmpire$[ebp]
  00015	50		 push	 eax
  00016	6a 02		 push	 2
  00018	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  00020	0f b6 c0	 movzx	 eax, al
  00023	85 c0		 test	 eax, eax
  00025	75 0f		 jne	 SHORT $LN2@SendSelect

; 152  : 	{
; 153  : 		Tracen("SendSelectEmpirePacket - Error");

  00027	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MCDDNHPB@SendSelectEmpirePacket?5?9?5Error@
  0002c	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00031	59		 pop	 ecx

; 154  : 		return false;

  00032	32 c0		 xor	 al, al
  00034	eb 13		 jmp	 SHORT $LN1@SendSelect
$LN2@SendSelect:

; 155  : 	}
; 156  : 
; 157  : 	SetEmpireID(dwEmpireID);

  00036	ff 75 08	 push	 DWORD PTR _dwEmpireID$[ebp]
  00039	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ?SetEmpireID@CPythonNetworkStream@@QAEXK@Z ; CPythonNetworkStream::SetEmpireID

; 158  : 	return SendSequence();

  00041	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?SendSequence@CNetworkStream@@QAE_NXZ ; CNetworkStream::SendSequence
$LN1@SendSelect:

; 159  : }

  00049	c9		 leave
  0004a	c2 04 00	 ret	 4
?SendSelectEmpirePacket@CPythonNetworkStream@@QAE_NK@Z ENDP ; CPythonNetworkStream::SendSelectEmpirePacket
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\FuncObject.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\FuncObject.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp
;	COMDAT ?SetSelectPhase@CPythonNetworkStream@@QAEXXZ
_TEXT	SEGMENT
$T1 = -36						; size = 8
$T2 = -28						; size = 8
$T3 = -20						; size = 4
$T4 = -16						; size = 4
_this$ = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
?SetSelectPhase@CPythonNetworkStream@@QAEXXZ PROC	; CPythonNetworkStream::SetSelectPhase, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 11   : 	if ("Select" != m_strPhase)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	05 0c 01 00 00	 add	 eax, 268		; 0000010cH
  00011	50		 push	 eax
  00012	68 00 00 00 00	 push	 OFFSET ??_C@_06HJGPBJLE@Select@
  00017	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NQBDABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0001c	59		 pop	 ecx
  0001d	59		 pop	 ecx
  0001e	0f b6 c0	 movzx	 eax, al
  00021	85 c0		 test	 eax, eax
  00023	74 0e		 je	 SHORT $LN2@SetSelectP

; 12   : 		m_phaseLeaveFunc.Run();

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	81 c1 60 01 00
	00		 add	 ecx, 352		; 00000160H
  0002e	e8 00 00 00 00	 call	 ?Run@?$CFuncObject@VCPythonNetworkStream@@@@QAEXXZ ; CFuncObject<CPythonNetworkStream>::Run
$LN2@SetSelectP:

; 13   : 
; 14   : 	Tracen("");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00038	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  0003d	59		 pop	 ecx

; 15   : 	Tracen("## Network - Select Phase ##");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HMHBDFBF@?$CD?$CD?5Network?5?9?5Select?5Phase?5?$CD?$CD@
  00043	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00048	59		 pop	 ecx

; 16   : 	Tracen("");

  00049	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0004e	e8 00 00 00 00	 call	 ?Tracen@@YAXPBD@Z	; Tracen
  00053	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_06HJGPBJLE@Select@
  00059	e8 00 00 00 00	 call	 _strlen
  0005e	59		 pop	 ecx
  0005f	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  00062	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]
  00065	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00068	ff 75 ec	 push	 DWORD PTR $T3[ebp]
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_06HJGPBJLE@Select@
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp

; 18   : 	m_strPhase = "Select";	

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00079	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp

; 24   : 	m_dwChangingPhaseTime = ELTimer_GetMSec();

  0007e	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 25   : 	m_phaseProcessFunc.Set(this, &CPythonNetworkStream::SelectPhase);

  0008c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], OFFSET ?SelectPhase@CPythonNetworkStream@@IAEXXZ ; CPythonNetworkStream::SelectPhase
  00093	83 65 e8 00	 and	 DWORD PTR $T2[ebp+4], 0
  00097	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	05 48 01 00 00	 add	 eax, 328		; 00000148H
  0009f	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\FuncObject.h

; 24   : 			m_pSelfObject = pSelfObject;

  000a2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a8	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 25   : 			m_pFuncObject = pFuncObject;

  000ab	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 4d e4	 mov	 ecx, DWORD PTR $T2[ebp]
  000b1	8b 55 e8	 mov	 edx, DWORD PTR $T2[ebp+4]
  000b4	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000b7	89 50 14	 mov	 DWORD PTR [eax+20], edx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp

; 26   : 	m_phaseLeaveFunc.Set(this, &CPythonNetworkStream::__LeaveSelectPhase);

  000ba	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], OFFSET ?__LeaveSelectPhase@CPythonNetworkStream@@IAEXXZ ; CPythonNetworkStream::__LeaveSelectPhase
  000c1	83 65 e0 00	 and	 DWORD PTR $T1[ebp+4], 0
  000c5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c8	05 60 01 00 00	 add	 eax, 352		; 00000160H
  000cd	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterLib\FuncObject.h

; 24   : 			m_pSelfObject = pSelfObject;

  000d0	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 25   : 			m_pFuncObject = pFuncObject;

  000d9	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  000dc	8b 4d dc	 mov	 ecx, DWORD PTR $T1[ebp]
  000df	8b 55 e0	 mov	 edx, DWORD PTR $T1[ebp+4]
  000e2	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  000e5	89 50 14	 mov	 DWORD PTR [eax+20], edx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\UserInterface\PythonNetworkStreamPhaseSelect.cpp

; 28   : 	if (__DirectEnterMode_IsSet())

  000e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	e8 00 00 00 00	 call	 ?__DirectEnterMode_IsSet@CPythonNetworkStream@@AAE_NXZ ; CPythonNetworkStream::__DirectEnterMode_IsSet
  000f0	0f b6 c0	 movzx	 eax, al
  000f3	85 c0		 test	 eax, eax
  000f5	74 25		 je	 SHORT $LN3@SetSelectP

; 29   : 	{
; 30   : 		PyCallClassMemberFunc(m_poHandler, "SetLoadingPhase", Py_BuildValue("()"));	

  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_02HCKGKOFO@?$CI?$CJ@
  000fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00102	59		 pop	 ecx
  00103	50		 push	 eax
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FHNDCDDK@SetLoadingPhase@
  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	ff b0 78 01 00
	00		 push	 DWORD PTR [eax+376]
  00112	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  00117	83 c4 0c	 add	 esp, 12			; 0000000cH

; 31   : 	}

  0011a	eb 57		 jmp	 SHORT $LN1@SetSelectP
$LN3@SetSelectP:

; 32   : 	else
; 33   : 	{
; 34   : 		if (IsSelectedEmpire())

  0011c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0011f	e8 00 00 00 00	 call	 ?IsSelectedEmpire@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::IsSelectedEmpire
  00124	0f b6 c0	 movzx	 eax, al
  00127	85 c0		 test	 eax, eax
  00129	74 25		 je	 SHORT $LN5@SetSelectP

; 35   : 			PyCallClassMemberFunc(m_poHandler, "SetSelectCharacterPhase", Py_BuildValue("()"));

  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_02HCKGKOFO@?$CI?$CJ@
  00130	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00136	59		 pop	 ecx
  00137	50		 push	 eax
  00138	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OHJNHIAD@SetSelectCharacterPhase@
  0013d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00140	ff b0 78 01 00
	00		 push	 DWORD PTR [eax+376]
  00146	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  0014b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014e	eb 23		 jmp	 SHORT $LN1@SetSelectP
$LN5@SetSelectP:

; 36   : 		else
; 37   : 			PyCallClassMemberFunc(m_poHandler, "SetSelectEmpirePhase", Py_BuildValue("()"));

  00150	68 00 00 00 00	 push	 OFFSET ??_C@_02HCKGKOFO@?$CI?$CJ@
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0015b	59		 pop	 ecx
  0015c	50		 push	 eax
  0015d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BJJJIJOC@SetSelectEmpirePhase@
  00162	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00165	ff b0 78 01 00
	00		 push	 DWORD PTR [eax+376]
  0016b	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  00170	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@SetSelectP:

; 38   : 	}
; 39   : }

  00173	c9		 leave
  00174	c3		 ret	 0
?SetSelectPhase@CPythonNetworkStream@@QAEXXZ ENDP	; CPythonNetworkStream::SetSelectPhase
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Block_size$ = -8					; size = 4
__Ptr_container$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00012	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00015	77 05		 ja	 SHORT $LN12@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  00017	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Allocate_m:

; 77   :         return ::operator new(_Bytes);

  0001c	ff 75 f8	 push	 DWORD PTR __Block_size$[ebp]
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	59		 pop	 ecx

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00025	89 45 fc	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00028	83 7d fc 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0002c	74 02		 je	 SHORT $LN7@Allocate_m
  0002e	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00035	33 c0		 xor	 eax, eax
  00037	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  00039	33 c0		 xor	 eax, eax
  0003b	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00040	83 c0 23	 add	 eax, 35			; 00000023H
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00046	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00049	6a 04		 push	 4
  0004b	58		 pop	 eax
  0004c	6b c0 ff	 imul	 eax, eax, -1
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00055	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0b		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00014	59		 pop	 ecx
  00015	eb 13		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00017	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001b	74 0b		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001d	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	59		 pop	 ecx

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00028	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 0f		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  0003a	ff 75 0c	 push	 DWORD PTR __Bytes$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 222  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	c9		 leave
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00018	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00022	c9		 leave
  00023	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Al$ = -40						; size = 4
__Ptr$ = -36						; size = 4
__Ptr$ = -32						; size = 4
$T1 = -28						; size = 4
__Old_capacity$ = -24					; size = 4
$T2 = -20						; size = 4
__New_capacity$ = -16					; size = 4
__New_ptr$ = -12					; size = 4
_this$ = -8						; size = 4
__Overflow_is_possible$3 = -2				; size = 1
$T4 = -1						; size = 1
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4302 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4303 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4304 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4305 :         if (_New_size > max_size()) {

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00014	76 05		 jbe	 SHORT $LN2@Reallocate

; 4306 :             _Xlen_string(); // result too long

  00016	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4307 :         }
; 4308 : 
; 4309 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00021	89 45 e8	 mov	 DWORD PTR __Old_capacity$[ebp], eax

; 4310 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00024	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0002f	89 45 f0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00035	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00038	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  0003b	89 45 d8	 mov	 DWORD PTR __Al$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0003e	c6 45 fe 00	 mov	 BYTE PTR __Overflow_is_possible$3[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00042	8b 45 f0	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00045	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0004c	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0004d	89 45 f4	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4313 :         _Mypair._Myval2._Orphan_all();
; 4314 :         _Mypair._Myval2._Mysize = _New_size;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00056	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4315 :         _Mypair._Myval2._Myres  = _New_capacity;

  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0005f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4316 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  00062	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  00065	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00068	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0006b	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006e	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00071	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00074	ff 75 ec	 push	 DWORD PTR $T2[ebp]
  00077	e8 00 00 00 00	 call	 _memcpy
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0007f	c6 45 ff 00	 mov	 BYTE PTR $T4[ebp], 0

; 428  :         _Left = _Right;

  00083	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00086	03 45 08	 add	 eax, DWORD PTR __New_size$[ebp]
  00089	8a 4d ff	 mov	 cl, BYTE PTR $T4[ebp]
  0008c	88 08		 mov	 BYTE PTR [eax], cl

; 4317 :         if (_BUF_SIZE <= _Old_capacity) {

  0008e	83 7d e8 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  00092	72 21		 jb	 SHORT $LN3@Reallocate

; 4318 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
  00099	89 45 dc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0009c	8b 45 e8	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  0009f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a0	50		 push	 eax
  000a1	ff 75 dc	 push	 DWORD PTR __Ptr$[ebp]
  000a4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a9	59		 pop	 ecx
  000aa	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4319 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000ab	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000b1	89 08		 mov	 DWORD PTR [eax], ecx

; 4320 :         } else {

  000b3	eb 0e		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4321 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000b5	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000b8	50		 push	 eax
  000b9	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000c1	59		 pop	 ecx
  000c2	59		 pop	 ecx
$LN4@Reallocate:

; 4322 :         }
; 4323 : 
; 4324 :         return *this;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4325 :     }

  000c6	c9		 leave
  000c7	c2 0c 00	 ret	 12			; 0000000cH
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
tv93 = -28						; size = 4
$T3 = -24						; size = 4
_this$ = -20						; size = 4
$T4 = -16						; size = 4
__Masked$5 = -12					; size = 4
__Old$ = -8						; size = 4
__Max$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4297 :     _NODISCARD size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	89 45 fc	 mov	 DWORD PTR __Max$[ebp], eax
  00014	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001a	89 45 f8	 mov	 DWORD PTR __Old$[ebp], eax

; 4285 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0001d	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00020	83 c8 0f	 or	 eax, 15			; 0000000fH
  00023	89 45 f4	 mov	 DWORD PTR __Masked$5[ebp], eax

; 4286 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00026	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  00029	3b 45 fc	 cmp	 eax, DWORD PTR __Max$[ebp]
  0002c	76 08		 jbe	 SHORT $LN29@Calculate_

; 4287 :             return _Max;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00031	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  00034	eb 4c		 jmp	 SHORT $LN31@Calculate_
$LN29@Calculate_:

; 4288 :         }
; 4289 : 
; 4290 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00036	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00039	d1 e8		 shr	 eax, 1
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __Max$[ebp]
  0003e	2b c8		 sub	 ecx, eax
  00040	39 4d f8	 cmp	 DWORD PTR __Old$[ebp], ecx
  00043	76 08		 jbe	 SHORT $LN30@Calculate_

; 4291 :             return _Max;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00048	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  0004b	eb 35		 jmp	 SHORT $LN31@Calculate_
$LN30@Calculate_:

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00050	d1 e8		 shr	 eax, 1
  00052	03 45 f8	 add	 eax, DWORD PTR __Old$[ebp]
  00055	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  0005b	3b 45 e8	 cmp	 eax, DWORD PTR $T3[ebp]
  0005e	73 08		 jae	 SHORT $LN35@Calculate_
  00060	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00063	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
  00066	eb 06		 jmp	 SHORT $LN36@Calculate_
$LN35@Calculate_:
  00068	8d 45 f4	 lea	 eax, DWORD PTR __Masked$5[ebp]
  0006b	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
$LN36@Calculate_:
  0006e	8b 45 e4	 mov	 eax, DWORD PTR tv93[ebp]
  00071	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00074	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00077	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0007a	8b 45 dc	 mov	 eax, DWORD PTR $T1[ebp]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
$LN31@Calculate_:

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00082	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]

; 4299 :     }

  00085	c9		 leave
  00086	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z
_TEXT	SEGMENT
$T1 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
__Ptr$ = -32						; size = 4
tv95 = -28						; size = 4
__Left_size$ = -24					; size = 4
_this$ = -20						; size = 4
__Result$4 = -16					; size = 4
tv91 = -12						; size = 4
_this$ = -8						; size = 4
$T5 = -2						; size = 1
$T6 = -1						; size = 1
__Ptr$ = 8						; size = 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT
; _this$ = ecx

; 4179 :     bool _Equal(_In_z_ const _Elem* const _Ptr) const noexcept { // compare [0, size()) with _Ptr for equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000c	e8 00 00 00 00	 call	 _strlen
  00011	59		 pop	 ecx
  00012	89 45 dc	 mov	 DWORD PTR $T3[ebp], eax

; 4180 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00015	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00018	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 2218 :         const value_type* _Result = _Bx._Buf;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR __Result$4[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  00021	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00024	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00028	72 09		 jb	 SHORT $LN12@Equal
  0002a	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv91[ebp], 1
  00031	eb 04		 jmp	 SHORT $LN13@Equal
$LN12@Equal:
  00033	83 65 f4 00	 and	 DWORD PTR tv91[ebp], 0
$LN13@Equal:
  00037	8a 45 f4	 mov	 al, BYTE PTR tv91[ebp]
  0003a	88 45 ff	 mov	 BYTE PTR $T6[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  0003d	0f b6 45 ff	 movzx	 eax, BYTE PTR $T6[ebp]
  00041	85 c0		 test	 eax, eax
  00043	74 0e		 je	 SHORT $LN7@Equal

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00045	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00048	8b 00		 mov	 eax, DWORD PTR [eax]
  0004a	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0004d	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00050	89 45 f0	 mov	 DWORD PTR __Result$4[ebp], eax
$LN7@Equal:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  00053	8b 45 f0	 mov	 eax, DWORD PTR __Result$4[ebp]
  00056	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax

; 4180 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00059	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0005f	89 45 e8	 mov	 DWORD PTR __Left_size$[ebp], eax

; 561  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00062	8b 45 e8	 mov	 eax, DWORD PTR __Left_size$[ebp]
  00065	3b 45 dc	 cmp	 eax, DWORD PTR $T3[ebp]
  00068	75 23		 jne	 SHORT $LN20@Equal

; 369  :         return _CSTD memcmp(_First1, _First2, _Count);

  0006a	ff 75 e8	 push	 DWORD PTR __Left_size$[ebp]
  0006d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00070	ff 75 d8	 push	 DWORD PTR $T2[ebp]
  00073	e8 00 00 00 00	 call	 _memcmp
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	89 45 d4	 mov	 DWORD PTR $T1[ebp], eax

; 561  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007e	83 7d d4 00	 cmp	 DWORD PTR $T1[ebp], 0
  00082	75 09		 jne	 SHORT $LN20@Equal
  00084	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv95[ebp], 1
  0008b	eb 04		 jmp	 SHORT $LN21@Equal
$LN20@Equal:
  0008d	83 65 e4 00	 and	 DWORD PTR tv95[ebp], 0
$LN21@Equal:
  00091	8a 45 e4	 mov	 al, BYTE PTR tv95[ebp]
  00094	88 45 fe	 mov	 BYTE PTR $T5[ebp], al

; 4180 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00097	8a 45 fe	 mov	 al, BYTE PTR $T5[ebp]

; 4181 :     }

  0009a	c9		 leave
  0009b	c2 04 00	 ret	 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -60						; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
__Storage_max$ = -44					; size = 4
$T5 = -40						; size = 4
$T6 = -36						; size = 4
$T7 = -32						; size = 4
_this$ = -28						; size = 4
tv70 = -24						; size = 4
$T8 = -20						; size = 4
$T9 = -16						; size = 4
tv67 = -12						; size = 4
__Alloc_max$ = -8					; size = 4
$T10 = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3773 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 4413 :         return _Mypair._Get_first();

  00009	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0000c	89 45 e0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4413 :         return _Mypair._Get_first();

  0000f	8b 45 e0	 mov	 eax, DWORD PTR $T7[ebp]
  00012	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00015	83 4d f8 ff	 or	 DWORD PTR __Alloc_max$[ebp], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00019	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR $T10[ebp], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Alloc_max$[ebp]
  00023	3b 45 fc	 cmp	 eax, DWORD PTR $T10[ebp]
  00026	73 08		 jae	 SHORT $LN14@max_size
  00028	8d 45 fc	 lea	 eax, DWORD PTR $T10[ebp]
  0002b	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
  0002e	eb 06		 jmp	 SHORT $LN15@max_size
$LN14@max_size:
  00030	8d 45 f8	 lea	 eax, DWORD PTR __Alloc_max$[ebp]
  00033	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
$LN15@max_size:
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv67[ebp]
  00039	89 45 dc	 mov	 DWORD PTR $T6[ebp], eax
  0003c	8b 45 dc	 mov	 eax, DWORD PTR $T6[ebp]
  0003f	89 45 d8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00042	8b 45 d8	 mov	 eax, DWORD PTR $T5[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 d4	 mov	 DWORD PTR __Storage_max$[ebp], eax

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  0004a	8b 45 d4	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  0004d	48		 dec	 eax
  0004e	89 45 f0	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00051	c7 45 d0 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00058	8b 45 d0	 mov	 eax, DWORD PTR $T4[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0005e	8b 45 f0	 mov	 eax, DWORD PTR $T9[ebp]
  00061	3b 45 ec	 cmp	 eax, DWORD PTR $T8[ebp]
  00064	73 08		 jae	 SHORT $LN22@max_size
  00066	8d 45 f0	 lea	 eax, DWORD PTR $T9[ebp]
  00069	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
  0006c	eb 06		 jmp	 SHORT $LN23@max_size
$LN22@max_size:
  0006e	8d 45 ec	 lea	 eax, DWORD PTR $T8[ebp]
  00071	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
$LN23@max_size:
  00074	8b 45 e8	 mov	 eax, DWORD PTR tv70[ebp]
  00077	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
  0007a	8b 45 cc	 mov	 eax, DWORD PTR $T3[ebp]
  0007d	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00080	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00083	8b 00		 mov	 eax, DWORD PTR [eax]

; 3778 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3779 :         );
; 3780 :     }

  00085	c9		 leave
  00086	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -16						; size = 1
__Old_ptr$2 = -12					; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3042 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3043 :         // assign [_Ptr, _Ptr + _Count)
; 3044 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00012	77 39		 ja	 SHORT $LN2@assign

; 3045 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001c	89 45 f4	 mov	 DWORD PTR __Old_ptr$2[ebp], eax

; 3046 :             _Mypair._Myval2._Mysize = _Count;

  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00025	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0002e	ff 75 f4	 push	 DWORD PTR __Old_ptr$2[ebp]
  00031	e8 00 00 00 00	 call	 _memmove
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3047 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3048 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00039	c6 45 ff 00	 mov	 BYTE PTR $T3[ebp], 0

; 428  :         _Left = _Right;

  0003d	8b 45 f4	 mov	 eax, DWORD PTR __Old_ptr$2[ebp]
  00040	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00043	8a 4d ff	 mov	 cl, BYTE PTR $T3[ebp]
  00046	88 08		 mov	 BYTE PTR [eax], cl

; 3049 :             return *this;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	eb 16		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3050 :         }
; 3051 : 
; 3052 :         return _Reallocate_for(

  0004d	33 c0		 xor	 eax, eax
  0004f	88 45 f0	 mov	 BYTE PTR $T1[ebp], al
  00052	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00055	ff 75 f0	 push	 DWORD PTR $T1[ebp]
  00058	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 3053 :             _Count,
; 3054 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3055 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3057 :             },
; 3058 :             _Ptr);
; 3059 :     }

  00063	c9		 leave
  00064	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__Result$ = -16						; size = 4
tv76 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2208 :     value_type* _Myptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2209 :         value_type* _Result = _Bx._Buf;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00016	72 09		 jb	 SHORT $LN6@Myptr
  00018	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  0001f	eb 04		 jmp	 SHORT $LN7@Myptr
$LN6@Myptr:
  00021	83 65 f4 00	 and	 DWORD PTR tv76[ebp], 0
$LN7@Myptr:
  00025	8a 45 f4	 mov	 al, BYTE PTR tv76[ebp]
  00028	88 45 ff	 mov	 BYTE PTR $T1[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  0002b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0e		 je	 SHORT $LN2@Myptr

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0003b	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  00041	8b 45 f0	 mov	 eax, DWORD PTR __Result$[ebp]

; 2215 :     }

  00044	c9		 leave
  00045	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2274 : [[noreturn]] inline void _Xlen_string() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2275 :     _Xlength_error("string too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2276 : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	83 c0 23	 add	 eax, 35			; 00000023H
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f4	 mov	 DWORD PTR __Ptr_user$[ebp], eax

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	6a 04		 push	 4
  0001d	58		 pop	 eax
  0001e	6b c0 ff	 imul	 eax, eax, -1
  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00024	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00027	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	2b 45 f8	 sub	 eax, DWORD PTR __Ptr_container$[ebp]
  00039	89 45 fc	 mov	 DWORD PTR __Back_shift$[ebp], eax
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00040	72 08		 jb	 SHORT $LN7@Adjust_man
  00042	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00046	77 02		 ja	 SHORT $LN7@Adjust_man
  00048	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0004f	33 c0		 xor	 eax, eax
  00051	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00053	33 c0		 xor	 eax, eax
  00055	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 130  :     {

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 141  :     {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c9		 leave
  0003d	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 0b		 je	 SHORT $LN3@what
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00023	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00026	c9		 leave
  00027	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx

; 74   :     }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN2@vector:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0000a	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000d	48		 dec	 eax
  0000e	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00011	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00015	76 11		 jbe	 SHORT $LN1@vector
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001a	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00020	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00023	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00026	eb dc		 jmp	 SHORT $LN2@vector
$LN1@vector:
  00028	c9		 leave
  00029	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
