; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_assign
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetExtension
PUBLIC	??$hash_value@K@boost@@YAIK@Z			; boost::hash_value<unsigned long>
PUBLIC	?next_prime@detail@unordered@boost@@YAII@Z	; boost::unordered::detail::next_prime
PUBLIC	??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::Exception::Exception
PUBLIC	??1Exception@CryptoPP@@UAE@XZ			; CryptoPP::Exception::~Exception
PUBLIC	?what@Exception@CryptoPP@@UBEPBDXZ		; CryptoPP::Exception::what
PUBLIC	??0Exception@CryptoPP@@QAE@ABV01@@Z		; CryptoPP::Exception::Exception
PUBLIC	??_GException@CryptoPP@@UAEPAXI@Z		; CryptoPP::Exception::`scalar deleting destructor'
PUBLIC	??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
PUBLIC	??1InvalidArgument@CryptoPP@@UAE@XZ		; CryptoPP::InvalidArgument::~InvalidArgument
PUBLIC	??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z	; CryptoPP::InvalidArgument::InvalidArgument
PUBLIC	??_GInvalidArgument@CryptoPP@@UAEPAXI@Z		; CryptoPP::InvalidArgument::`scalar deleting destructor'
PUBLIC	??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
PUBLIC	??1NotImplemented@CryptoPP@@UAE@XZ		; CryptoPP::NotImplemented::~NotImplemented
PUBLIC	??0NotImplemented@CryptoPP@@QAE@ABV01@@Z	; CryptoPP::NotImplemented::NotImplemented
PUBLIC	??_GNotImplemented@CryptoPP@@UAEPAXI@Z		; CryptoPP::NotImplemented::`scalar deleting destructor'
PUBLIC	??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
PUBLIC	??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ ; CryptoPP::NameValuePairs::ValueTypeMismatch::~ValueTypeMismatch
PUBLIC	??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
PUBLIC	??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::`scalar deleting destructor'
PUBLIC	?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?Clone@Clonable@CryptoPP@@UBEPAV12@XZ		; CryptoPP::Clonable::Clone
PUBLIC	?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::Algorithm::AlgorithmName
PUBLIC	??1SimpleKeyingInterface@CryptoPP@@UAE@XZ	; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
PUBLIC	?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength
PUBLIC	?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterface::MinIVLength
PUBLIC	?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterface::MaxIVLength
PUBLIC	?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z ; CryptoPP::SimpleKeyingInterface::Resynchronize
PUBLIC	?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ ; CryptoPP::BlockTransformation::IsPermutation
PUBLIC	?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ ; CryptoPP::BlockTransformation::OptimalNumberOfParallelBlocks
PUBLIC	??0BlockTransformation@CryptoPP@@QAE@ABV01@@Z	; CryptoPP::BlockTransformation::BlockTransformation
PUBLIC	?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ; CryptoPP::StreamTransformation::MandatoryBlockSize
PUBLIC	?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed
PUBLIC	?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ; CryptoPP::StreamTransformation::MinLastBlockSize
PUBLIC	?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ; CryptoPP::BlockCipher::GetAlgorithm
PUBLIC	?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ; CryptoPP::SymmetricCipher::GetAlgorithm
PUBLIC	??1SymmetricCipher@CryptoPP@@UAE@XZ		; CryptoPP::SymmetricCipher::~SymmetricCipher
PUBLIC	?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z ; CryptoPP::RandomNumberGenerator::IncorporateEntropy
PUBLIC	?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ ; CryptoPP::RandomNumberGenerator::CanIncorporateEntropy
PUBLIC	??1RandomNumberGenerator@CryptoPP@@UAE@XZ	; CryptoPP::RandomNumberGenerator::~RandomNumberGenerator
PUBLIC	??0BufferedTransformation@CryptoPP@@QAE@XZ	; CryptoPP::BufferedTransformation::BufferedTransformation
PUBLIC	?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z ; CryptoPP::BufferedTransformation::CreatePutSpace
PUBLIC	?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ ; CryptoPP::BufferedTransformation::CanModifyInput
PUBLIC	?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z ; CryptoPP::BufferedTransformation::PutModifiable2
PUBLIC	?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z ; CryptoPP::BufferedTransformation::IsolatedMessageSeriesEnd
PUBLIC	?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z ; CryptoPP::BufferedTransformation::SetAutoSignalPropagation
PUBLIC	?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ ; CryptoPP::BufferedTransformation::GetAutoSignalPropagation
PUBLIC	?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ ; CryptoPP::BufferedTransformation::GetNextMessageSeries
PUBLIC	?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ ; CryptoPP::BufferedTransformation::NumberOfMessagesInThisSeries
PUBLIC	?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ ; CryptoPP::BufferedTransformation::NumberOfMessageSeries
PUBLIC	?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ ; CryptoPP::BufferedTransformation::Attachable
PUBLIC	?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ ; CryptoPP::BufferedTransformation::AttachedTransformation
PUBLIC	?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ ; CryptoPP::BufferedTransformation::AttachedTransformation
PUBLIC	?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z ; CryptoPP::BufferedTransformation::Detach
PUBLIC	??1BufferedTransformation@CryptoPP@@UAE@XZ	; CryptoPP::BufferedTransformation::~BufferedTransformation
PUBLIC	?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::Put2
PUBLIC	?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedFlush
PUBLIC	?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedMessageSeriesEnd
PUBLIC	?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelPut2
PUBLIC	?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelMessageSeriesEnd
PUBLIC	?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::SetAutoSignalPropagation
PUBLIC	?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::GetAutoSignalPropagation
PUBLIC	?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::Store::IsolatedInitialize
PUBLIC	?NumberOfMessages@Store@CryptoPP@@UBEIXZ	; CryptoPP::Store::NumberOfMessages
PUBLIC	??1Store@CryptoPP@@UAE@XZ			; CryptoPP::Store::~Store
PUBLIC	?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::Sink::TransferTo2
PUBLIC	?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::Sink::CopyRangeTo2
PUBLIC	?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ; CryptoPP::Bufferless<CryptoPP::Sink>::IsolatedFlush
PUBLIC	?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z	; CryptoPP::AllocatorBase<unsigned char>::CheckSize
PUBLIC	?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z	; CryptoPP::AllocatorBase<unsigned int>::CheckSize
PUBLIC	?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MinKeyLength
PUBLIC	?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MaxKeyLength
PUBLIC	?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::DefaultKeyLength
PUBLIC	?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::GetValidKeyLength
PUBLIC	?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVRequirement
PUBLIC	?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVSize
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::AlgorithmName
PUBLIC	?BlockSize@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::BlockSize
PUBLIC	??1?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>
PUBLIC	??0?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
PUBLIC	??0?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
PUBLIC	??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::~SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
PUBLIC	??0Base@Camellia@CryptoPP@@QAE@XZ		; CryptoPP::Camellia::Base::Base
PUBLIC	??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z	; CryptoPP::Camellia::Base::Base
PUBLIC	?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MinKeyLength
PUBLIC	?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MaxKeyLength
PUBLIC	?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::DefaultKeyLength
PUBLIC	?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::GetValidKeyLength
PUBLIC	?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVRequirement
PUBLIC	?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVSize
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::AlgorithmName
PUBLIC	?BlockSize@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::BlockSize
PUBLIC	??1?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>
PUBLIC	?deallocate@?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
PUBLIC	??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >
PUBLIC	??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >
PUBLIC	??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::FixedSizeSecBlock<unsigned int,40,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >::~FixedSizeSecBlock<unsigned int,40,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >
PUBLIC	?deallocate@?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
PUBLIC	??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >
PUBLIC	??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >
PUBLIC	??0Base@Twofish@CryptoPP@@QAE@XZ		; CryptoPP::Twofish::Base::Base
PUBLIC	??1Base@Twofish@CryptoPP@@UAE@XZ		; CryptoPP::Twofish::Base::~Base
PUBLIC	??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z		; CryptoPP::Twofish::Base::Base
PUBLIC	?deallocate@?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
PUBLIC	??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >
PUBLIC	??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >
PUBLIC	?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MinKeyLength
PUBLIC	?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MaxKeyLength
PUBLIC	?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::DefaultKeyLength
PUBLIC	?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::GetValidKeyLength
PUBLIC	?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVRequirement
PUBLIC	?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVSize
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::AlgorithmName
PUBLIC	?BlockSize@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::BlockSize
PUBLIC	??1?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>
PUBLIC	??0Base@XTEA@CryptoPP@@QAE@XZ			; CryptoPP::XTEA::Base::Base
PUBLIC	??1Base@XTEA@CryptoPP@@UAE@XZ			; CryptoPP::XTEA::Base::~Base
PUBLIC	??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z		; CryptoPP::XTEA::Base::Base
PUBLIC	??1EterPackPolicy_CSHybridCrypt@@QAE@XZ		; EterPackPolicy_CSHybridCrypt::~EterPackPolicy_CSHybridCrypt
PUBLIC	?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; EterPackPolicy_CSHybridCrypt::GenerateCryptKey
PUBLIC	?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ; EterPackPolicy_CSHybridCrypt::EncryptMemory
PUBLIC	?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ; EterPackPolicy_CSHybridCrypt::DecryptMemory
PUBLIC	?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ; EterPackPolicy_CSHybridCrypt::IsContainingCryptKey
PUBLIC	?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z ; EterPackPolicy_CSHybridCrypt::GenerateSupplementaryDataBlock
PUBLIC	?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z ; EterPackPolicy_CSHybridCrypt::GetSupplementaryDataBlock
PUBLIC	?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ; EterPackPolicy_CSHybridCrypt::IsContainingSDBFile
PUBLIC	?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ; EterPackPolicy_CSHybridCrypt::WriteCryptKeyToFile
PUBLIC	?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ; EterPackPolicy_CSHybridCrypt::ReadCryptKeyInfoFromStream
PUBLIC	?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ; EterPackPolicy_CSHybridCrypt::WriteSupplementaryDataBlockToFile
PUBLIC	?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ; EterPackPolicy_CSHybridCrypt::ReadSupplementatyDataBlockFromStream
PUBLIC	?key_eq@?$functions@U?$hash@K@boost@@U?$equal_to@K@std@@@detail@unordered@boost@@QBEABU?$equal_to@K@std@@XZ ; boost::unordered::detail::functions<boost::hash<unsigned long>,std::equal_to<unsigned long> >::key_eq
PUBLIC	?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_node
PUBLIC	?next_for_find@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_for_find
PUBLIC	?begin@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::begin
PUBLIC	?recalculate_max_load@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::recalculate_max_load
PUBLIC	?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
PUBLIC	?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
PUBLIC	?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node
PUBLIC	?delete_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::delete_buckets
PUBLIC	?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_buckets
PUBLIC	?clear_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::clear_impl
PUBLIC	?find_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node
PUBLIC	?reserve_for_insert@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::reserve_for_insert
PUBLIC	?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
PUBLIC	?add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::add_node_unique
PUBLIC	?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::resize_and_add_node_unique
PUBLIC	??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >
PUBLIC	?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::find
PUBLIC	??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::operator[]
PUBLIC	?deallocate@?$allocator@E@std@@QAEXQAEI@Z	; std::allocator<unsigned char>::deallocate
PUBLIC	?_Copy_assign@?$vector@EV?$allocator@E@std@@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Copy_assign
PUBLIC	?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Clear_and_reserve_geometric
PUBLIC	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
PUBLIC	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@ABEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth
PUBLIC	?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw
PUBLIC	?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array
PUBLIC	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
PUBLIC	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
PUBLIC	?_Getal@?$vector@EV?$allocator@E@std@@@std@@AAEAAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
PUBLIC	??0SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::SSupplementaryDataBlockInfo
PUBLIC	??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::~SSupplementaryDataBlockInfo
PUBLIC	??4SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAEAAU01@ABU01@@Z ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::operator=
PUBLIC	?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_node
PUBLIC	?next_for_find@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_for_find
PUBLIC	?begin@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::begin
PUBLIC	?recalculate_max_load@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::recalculate_max_load
PUBLIC	?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
PUBLIC	?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
PUBLIC	?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node
PUBLIC	?delete_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::delete_buckets
PUBLIC	?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_buckets
PUBLIC	?clear_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::clear_impl
PUBLIC	?find_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node
PUBLIC	?reserve_for_insert@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::reserve_for_insert
PUBLIC	?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
PUBLIC	?add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::add_node_unique
PUBLIC	?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::resize_and_add_node_unique
PUBLIC	??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >
PUBLIC	?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::find
PUBLIC	??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]
PUBLIC	?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z ; EterPackPolicy_CSHybridCrypt::GetPerFileCryptKey
PUBLIC	?GetHash@stringhash@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stringhash::GetHash
PUBLIC	?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ ; CryptoPP::AdditiveCipherAbstractPolicy::GetOptimalBlockSize
PUBLIC	??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
PUBLIC	??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
PUBLIC	??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
PUBLIC	?Assign@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXABV12@@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::Assign
PUBLIC	?New@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXI@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::New
PUBLIC	??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z ; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter
PUBLIC	?Assign@ConstByteArrayParameter@CryptoPP@@QAEXPBEI_N@Z ; CryptoPP::ConstByteArrayParameter::Assign
PUBLIC	??1ConstByteArrayParameter@CryptoPP@@QAE@XZ	; CryptoPP::ConstByteArrayParameter::~ConstByteArrayParameter
PUBLIC	??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter
PUBLIC	??4ConstByteArrayParameter@CryptoPP@@QAEAAV01@ABV01@@Z ; CryptoPP::ConstByteArrayParameter::operator=
PUBLIC	??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
PUBLIC	??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::~ParameterNotUsed
PUBLIC	??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
PUBLIC	??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`scalar deleting destructor'
PUBLIC	??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::AlgorithmParametersBase::AlgorithmParametersBase
PUBLIC	??1AlgorithmParametersBase@CryptoPP@@UAE@XZ	; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
PUBLIC	??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
PUBLIC	?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset
PUBLIC	??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z	; CryptoPP::AlgorithmParametersBase::`scalar deleting destructor'
PUBLIC	?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::AssignValue
PUBLIC	?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::MoveInto
PUBLIC	??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`scalar deleting destructor'
PUBLIC	??1AlgorithmParameters@CryptoPP@@UAE@XZ		; CryptoPP::AlgorithmParameters::~AlgorithmParameters
PUBLIC	?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ	; CryptoPP::CipherModeBase::MinKeyLength
PUBLIC	?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ	; CryptoPP::CipherModeBase::MaxKeyLength
PUBLIC	?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ; CryptoPP::CipherModeBase::DefaultKeyLength
PUBLIC	?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z ; CryptoPP::CipherModeBase::GetValidKeyLength
PUBLIC	?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z ; CryptoPP::CipherModeBase::IsValidKeyLength
PUBLIC	?IVSize@CipherModeBase@CryptoPP@@UBEIXZ		; CryptoPP::CipherModeBase::IVSize
PUBLIC	??0CipherModeBase@CryptoPP@@IAE@XZ		; CryptoPP::CipherModeBase::CipherModeBase
PUBLIC	?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z ; CryptoPP::CipherModeBase::SetFeedbackSize
PUBLIC	?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ	; CryptoPP::CipherModeBase::ResizeBuffers
PUBLIC	??0?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
PUBLIC	??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
PUBLIC	?New@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEXI@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::New
PUBLIC	?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::CipherSetKey
PUBLIC	??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::~ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>
PUBLIC	?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ ; CryptoPP::CTR_ModePolicy::CipherIsRandomAccess
PUBLIC	?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ; CryptoPP::CTR_ModePolicy::IVRequirement
PUBLIC	?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ	; CryptoPP::CTR_ModePolicy::GetAlignment
PUBLIC	?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ ; CryptoPP::CTR_ModePolicy::GetBytesPerIteration
PUBLIC	?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ ; CryptoPP::CTR_ModePolicy::GetIterationsToBuffer
PUBLIC	?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z ; CryptoPP::CTR_ModePolicy::WriteKeystream
PUBLIC	?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ ; CryptoPP::CTR_ModePolicy::CanOperateKeystream
PUBLIC	??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::~AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>
PUBLIC	?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalBlockSize
PUBLIC	?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalDataAlignment
PUBLIC	?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsSelfInverting
PUBLIC	?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsForwardTransformation
PUBLIC	?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsRandomAccess
PUBLIC	??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
PUBLIC	??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
PUBLIC	?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::GetPolicy
PUBLIC	?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::AccessPolicy
PUBLIC	??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>
PUBLIC	??_G?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`scalar deleting destructor'
PUBLIC	?Attachable@Filter@CryptoPP@@UAE_NXZ		; CryptoPP::Filter::Attachable
PUBLIC	?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ ; CryptoPP::Filter::ShouldPropagateMessageEnd
PUBLIC	?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ ; CryptoPP::Filter::ShouldPropagateMessageSeriesEnd
PUBLIC	??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
PUBLIC	?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsolatedInitialize
PUBLIC	?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Put2
PUBLIC	??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor'
PUBLIC	??0StringStore@CryptoPP@@QAE@PBD@Z		; CryptoPP::StringStore::StringStore
PUBLIC	??_GStringStore@CryptoPP@@UAEPAXI@Z		; CryptoPP::StringStore::`scalar deleting destructor'
PUBLIC	??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
PUBLIC	?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::Put2
PUBLIC	?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedFlush
PUBLIC	?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedMessageSeriesEnd
PUBLIC	?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelPut2
PUBLIC	?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelMessageSeriesEnd
PUBLIC	??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::~InputRejecting<CryptoPP::Filter>
PUBLIC	??1Source@CryptoPP@@UAE@XZ			; CryptoPP::Source::~Source
PUBLIC	??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceTemplate<CryptoPP::StringStore>
PUBLIC	?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize
PUBLIC	?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::Pump2
PUBLIC	?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpMessages2
PUBLIC	?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2
PUBLIC	?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceExhausted
PUBLIC	?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SetAutoSignalPropagation
PUBLIC	?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::GetAutoSignalPropagation
PUBLIC	??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>
PUBLIC	??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`scalar deleting destructor'
PUBLIC	??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
PUBLIC	??_GStringSource@CryptoPP@@UAEPAXI@Z		; CryptoPP::StringSource::`scalar deleting destructor'
PUBLIC	?CanIncorporateEntropy@RandomPool@CryptoPP@@UBE_NXZ ; CryptoPP::RandomPool::CanIncorporateEntropy
PUBLIC	?deallocate@?$FixedSizeAllocatorWithCleanup@E$0CA@V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,32,CryptoPP::NullAllocator<unsigned char>,0>::deallocate
PUBLIC	?deallocate@?$FixedSizeAllocatorWithCleanup@E$0BA@V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,16,CryptoPP::NullAllocator<unsigned char>,0>::deallocate
PUBLIC	??1?$member_ptr@VBlockCipher@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipher>::~member_ptr<CryptoPP::BlockCipher>
PUBLIC	??1RandomPool@CryptoPP@@UAE@XZ			; CryptoPP::RandomPool::~RandomPool
PUBLIC	??_GAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z	; CryptoPP::AutoSeededRandomPool::`scalar deleting destructor'
PUBLIC	?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::Clone
PUBLIC	??0?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::BlockCipherFinal<0,CryptoPP::Camellia::Base>
PUBLIC	?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::IsForwardTransformation
PUBLIC	??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`scalar deleting destructor'
PUBLIC	??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
PUBLIC	??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
PUBLIC	??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName
PUBLIC	??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
PUBLIC	?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::Clone
PUBLIC	?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::IsForwardTransformation
PUBLIC	??_G?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`scalar deleting destructor'
PUBLIC	??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
PUBLIC	??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
PUBLIC	??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName
PUBLIC	??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
PUBLIC	?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::Clone
PUBLIC	??0?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::BlockCipherFinal<0,CryptoPP::XTEA::Enc>
PUBLIC	?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UBE_NXZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::IsForwardTransformation
PUBLIC	??_G?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`scalar deleting destructor'
PUBLIC	??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
PUBLIC	??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
PUBLIC	??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName
PUBLIC	??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
PUBLIC	??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
PUBLIC	??1?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@QAE@XZ ; std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>::~pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>
PUBLIC	??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
PUBLIC	??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::~InputRejected
PUBLIC	??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
PUBLIC	??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`scalar deleting destructor'
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize<std::_Value_init_tag>
PUBLIC	??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
PUBLIC	??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::~InputRejected
PUBLIC	??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
PUBLIC	??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`scalar deleting destructor'
PUBLIC	??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >
PUBLIC	??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z	; CryptoPP::SecureWipeArray<unsigned char>
PUBLIC	??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
PUBLIC	??$_Pocca@V?$allocator@E@std@@@std@@YAXAAV?$allocator@E@0@ABV10@@Z ; std::_Pocca<std::allocator<unsigned char> >
PUBLIC	??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z	; CryptoPP::SecureWipeArray<unsigned int>
PUBLIC	??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
PUBLIC	??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ; std::_Pocca<std::allocator<char> >
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$lower_bound@PBIIU?$less@X@std@@@std@@YAPBIPBIQBIABIU?$less@X@0@@Z ; std::lower_bound<unsigned int const *,unsigned int,std::less<void> >
PUBLIC	??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
PUBLIC	??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
PUBLIC	??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z ; CryptoPP::AlgorithmParameters::operator()<CryptoPP::ConstByteArrayParameter>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Assign_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0Uforward_iterator_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_range<unsigned char *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPAEPAEIAAV?$allocator@E@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >
PUBLIC	??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
PUBLIC	??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z ; boost::unordered::detail::func::construct_node_pair<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >,unsigned long const &>
PUBLIC	??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z ; boost::unordered::detail::func::construct_node_pair<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >,unsigned long const &>
PUBLIC	??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z	; std::_Copy_memmove<unsigned char *,unsigned char *>
PUBLIC	??$_Refancy@PAE$0A@@std@@YAPAEPAE@Z		; std::_Refancy<unsigned char *,0>
PUBLIC	??$_Zero_range@PAE@std@@YAPAEQAE0@Z		; std::_Zero_range<unsigned char *>
PUBLIC	??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
PUBLIC	??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
PUBLIC	??$_Uninitialized_move@PAEV?$allocator@E@std@@@std@@YAPAEQAE0PAEAAV?$allocator@E@0@@Z ; std::_Uninitialized_move<unsigned char *,std::allocator<unsigned char> >
PUBLIC	??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
PUBLIC	?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::create_node
PUBLIC	??$construct@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::construct<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
PUBLIC	??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
PUBLIC	?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::create_node
PUBLIC	??$construct@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::construct<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
PUBLIC	??$?0ABK$$Z$$V@?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ; std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo><unsigned long const &>
PUBLIC	??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vector deleting destructor'
PUBLIC	??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vector deleting destructor'
PUBLIC	??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vector deleting destructor'
PUBLIC	??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
PUBLIC	??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WBI@AEPAXI@Z ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
PUBLIC	??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCI@AEPAXI@Z ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
PUBLIC	??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor'
PUBLIC	??_EStringStore@CryptoPP@@W3AEPAXI@Z		; [thunk]:CryptoPP::StringStore::`vector deleting destructor'
PUBLIC	??_EStringSource@CryptoPP@@W3AEPAXI@Z		; [thunk]:CryptoPP::StringSource::`vector deleting destructor'
PUBLIC	??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{36}'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{36}'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
PUBLIC	?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{36}'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value
PUBLIC	?length@?$prime_list_template@I@detail@unordered@boost@@2HB ; boost::unordered::detail::prime_list_template<unsigned int>::length
PUBLIC	??_7Exception@CryptoPP@@6B@			; CryptoPP::Exception::`vftable'
PUBLIC	??_7InvalidArgument@CryptoPP@@6B@		; CryptoPP::InvalidArgument::`vftable'
PUBLIC	??_7NotImplemented@CryptoPP@@6B@		; CryptoPP::NotImplemented::`vftable'
PUBLIC	??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch::`vftable'
PUBLIC	??_C@_01GEODFPGF@?8@				; `string'
PUBLIC	??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@ ; `string'
PUBLIC	??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@		; `string'
PUBLIC	??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@ ; `string'
PUBLIC	__TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
PUBLIC	__CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
PUBLIC	??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48
PUBLIC	??_R0?AVInvalidArgument@CryptoPP@@@8		; CryptoPP::InvalidArgument `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVException@CryptoPP@@@8			; CryptoPP::Exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
PUBLIC	__TI3?AVInvalidArgument@CryptoPP@@
PUBLIC	__CTA3?AVInvalidArgument@CryptoPP@@
PUBLIC	__TI3?AVNotImplemented@CryptoPP@@
PUBLIC	__CTA3?AVNotImplemented@CryptoPP@@
PUBLIC	??_R0?AVNotImplemented@CryptoPP@@@8		; CryptoPP::NotImplemented `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
PUBLIC	??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@ ; `string'
PUBLIC	??_C@_07CIFAGBMG@unknown@			; `string'
PUBLIC	??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@ ; `string'
PUBLIC	??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@ ; `string'
PUBLIC	??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@ ; `string'
PUBLIC	??_C@_08EGCCLPME@Camellia@			; `string'
PUBLIC	??_C@_07DABDIDEC@Twofish@			; `string'
PUBLIC	??_C@_04OKOCCFHC@XTEA@				; `string'
PUBLIC	??_C@_0N@GKFFKNHD@FeedbackSize@			; `string'
PUBLIC	??_C@_0M@JMHEFFAI@InputBuffer@			; `string'
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
PUBLIC	??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`vftable'
PUBLIC	??_7AlgorithmParametersBase@CryptoPP@@6B@	; CryptoPP::AlgorithmParametersBase::`vftable'
PUBLIC	??_C@_0L@IAABKFFP@?$CC?5not?5used@		; `string'
PUBLIC	??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@ ; `string'
PUBLIC	__TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
PUBLIC	__CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
PUBLIC	??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40
PUBLIC	??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`vftable'
PUBLIC	??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5c@ ; `string'
PUBLIC	??_C@_03LECCGOIK@CTR@				; `string'
PUBLIC	??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
PUBLIC	??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
PUBLIC	??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
PUBLIC	??_7StringStore@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringStore::`vftable'
PUBLIC	??_7StringStore@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringStore::`vftable'
PUBLIC	??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
PUBLIC	??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
PUBLIC	??_7StringSource@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringSource::`vftable'
PUBLIC	??_7StringSource@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringSource::`vftable'
PUBLIC	??_7AutoSeededRandomPool@CryptoPP@@6B@		; CryptoPP::AutoSeededRandomPool::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vftable'
PUBLIC	??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
PUBLIC	??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`vftable'
PUBLIC	__TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
PUBLIC	__CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
PUBLIC	??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
PUBLIC	??_C@_0BE@NDOICOBI@OutputStringPointer@		; `string'
PUBLIC	??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@ ; `string'
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
PUBLIC	??_R0?AVConstByteArrayParameter@CryptoPP@@@8	; CryptoPP::ConstByteArrayParameter `RTTI Type Descriptor'
PUBLIC	??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`vftable'
PUBLIC	__TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
PUBLIC	__CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
PUBLIC	??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
PUBLIC	??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@ ; `string'
PUBLIC	??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5w@ ; `string'
PUBLIC	??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_string<char,std::char_traits<char>,std::allocator<char> > * `RTTI Type Descriptor'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVRandomNumberGenerator@CryptoPP@@@8	; CryptoPP::RandomNumberGenerator `RTTI Type Descriptor'
PUBLIC	??_R3RandomNumberGenerator@CryptoPP@@8		; CryptoPP::RandomNumberGenerator::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RandomNumberGenerator@CryptoPP@@8		; CryptoPP::RandomNumberGenerator::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8	; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAlgorithm@CryptoPP@@@8			; CryptoPP::Algorithm `RTTI Type Descriptor'
PUBLIC	??_R3Algorithm@CryptoPP@@8			; CryptoPP::Algorithm::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Algorithm@CryptoPP@@8			; CryptoPP::Algorithm::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVClonable@CryptoPP@@@8			; CryptoPP::Clonable `RTTI Type Descriptor'
PUBLIC	??_R3Clonable@CryptoPP@@8			; CryptoPP::Clonable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Clonable@CryptoPP@@8			; CryptoPP::Clonable::`RTTI Base Class Array'
PUBLIC	??_R0?AVBufferedTransformation@CryptoPP@@@8	; CryptoPP::BufferedTransformation `RTTI Type Descriptor'
PUBLIC	??_R3BufferedTransformation@CryptoPP@@8		; CryptoPP::BufferedTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BufferedTransformation@CryptoPP@@8		; CryptoPP::BufferedTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8 ; CryptoPP::BufferedTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@Waitable@CryptoPP@@8		; CryptoPP::Waitable::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVWaitable@CryptoPP@@@8			; CryptoPP::Waitable `RTTI Type Descriptor'
PUBLIC	??_R3Waitable@CryptoPP@@8			; CryptoPP::Waitable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Waitable@CryptoPP@@8			; CryptoPP::Waitable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Waitable@CryptoPP@@8		; CryptoPP::Waitable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Exception@CryptoPP@@6B@			; CryptoPP::Exception::`RTTI Complete Object Locator'
PUBLIC	??_R3Exception@CryptoPP@@8			; CryptoPP::Exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Exception@CryptoPP@@8			; CryptoPP::Exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Exception@CryptoPP@@8		; CryptoPP::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4InvalidArgument@CryptoPP@@6B@		; CryptoPP::InvalidArgument::`RTTI Complete Object Locator'
PUBLIC	??_R3InvalidArgument@CryptoPP@@8		; CryptoPP::InvalidArgument::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InvalidArgument@CryptoPP@@8		; CryptoPP::InvalidArgument::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8	; CryptoPP::InvalidArgument::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4NotImplemented@CryptoPP@@6B@		; CryptoPP::NotImplemented::`RTTI Complete Object Locator'
PUBLIC	??_R3NotImplemented@CryptoPP@@8			; CryptoPP::NotImplemented::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NotImplemented@CryptoPP@@8			; CryptoPP::NotImplemented::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NotImplemented@CryptoPP@@8	; CryptoPP::NotImplemented::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Complete Object Locator'
PUBLIC	??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSimpleKeyingInterface@CryptoPP@@@8	; CryptoPP::SimpleKeyingInterface `RTTI Type Descriptor'
PUBLIC	??_R3SimpleKeyingInterface@CryptoPP@@8		; CryptoPP::SimpleKeyingInterface::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SimpleKeyingInterface@CryptoPP@@8		; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8	; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBlockTransformation@CryptoPP@@@8	; CryptoPP::BlockTransformation `RTTI Type Descriptor'
PUBLIC	??_R3BlockTransformation@CryptoPP@@8		; CryptoPP::BlockTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BlockTransformation@CryptoPP@@8		; CryptoPP::BlockTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8	; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVStreamTransformation@CryptoPP@@@8	; CryptoPP::StreamTransformation `RTTI Type Descriptor'
PUBLIC	??_R3StreamTransformation@CryptoPP@@8		; CryptoPP::StreamTransformation::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StreamTransformation@CryptoPP@@8		; CryptoPP::StreamTransformation::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8	; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBlockCipher@CryptoPP@@@8		; CryptoPP::BlockCipher `RTTI Type Descriptor'
PUBLIC	??_R3BlockCipher@CryptoPP@@8			; CryptoPP::BlockCipher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BlockCipher@CryptoPP@@8			; CryptoPP::BlockCipher::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BlockCipher@CryptoPP@@8		; CryptoPP::BlockCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@BlockTransformation@CryptoPP@@8	; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EA@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R13?0A@EA@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVSymmetricCipher@CryptoPP@@@8		; CryptoPP::SymmetricCipher `RTTI Type Descriptor'
PUBLIC	??_R3SymmetricCipher@CryptoPP@@8		; CryptoPP::SymmetricCipher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SymmetricCipher@CryptoPP@@8		; CryptoPP::SymmetricCipher::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8	; CryptoPP::SymmetricCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@StreamTransformation@CryptoPP@@8	; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVStore@CryptoPP@@@8			; CryptoPP::Store `RTTI Type Descriptor'
PUBLIC	??_R3Store@CryptoPP@@8				; CryptoPP::Store::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Store@CryptoPP@@8				; CryptoPP::Store::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Store@CryptoPP@@8			; CryptoPP::Store::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> > `RTTI Type Descriptor'
PUBLIC	??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> `RTTI Type Descriptor'
PUBLIC	??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Array'
PUBLIC	??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Complete Object Locator'
PUBLIC	??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSink@CryptoPP@@@8			; CryptoPP::Sink `RTTI Type Descriptor'
PUBLIC	??_R3Sink@CryptoPP@@8				; CryptoPP::Sink::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Sink@CryptoPP@@8				; CryptoPP::Sink::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Sink@CryptoPP@@8			; CryptoPP::Sink::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::Bufferless<CryptoPP::Sink> `RTTI Type Descriptor'
PUBLIC	??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8	; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8	; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBase@Camellia@CryptoPP@@@8		; CryptoPP::Camellia::Base `RTTI Type Descriptor'
PUBLIC	??_R3Base@Camellia@CryptoPP@@8			; CryptoPP::Camellia::Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Base@Camellia@CryptoPP@@8			; CryptoPP::Camellia::Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8		; CryptoPP::Camellia::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > `RTTI Type Descriptor'
PUBLIC	??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> `RTTI Type Descriptor'
PUBLIC	??_R3?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Base Class Array'
PUBLIC	??_R1M@?0A@EA@Camellia_Info@CryptoPP@@8		; CryptoPP::Camellia_Info::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUCamellia_Info@CryptoPP@@@8		; CryptoPP::Camellia_Info `RTTI Type Descriptor'
PUBLIC	??_R3Camellia_Info@CryptoPP@@8			; CryptoPP::Camellia_Info::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Camellia_Info@CryptoPP@@8			; CryptoPP::Camellia_Info::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Camellia_Info@CryptoPP@@8		; CryptoPP::Camellia_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8 ; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$FixedBlockSize@$0BA@@CryptoPP@@@8	; CryptoPP::FixedBlockSize<16> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedBlockSize@$0BA@@CryptoPP@@8		; CryptoPP::FixedBlockSize<16>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedBlockSize@$0BA@@CryptoPP@@8		; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Array'
PUBLIC	??_R10?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
PUBLIC	??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0> `RTTI Type Descriptor'
PUBLIC	??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8 ; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (13,-1,0,64)'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base> `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Base Class Array'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBase@Twofish@CryptoPP@@@8		; CryptoPP::Twofish::Base `RTTI Type Descriptor'
PUBLIC	??_R3Base@Twofish@CryptoPP@@8			; CryptoPP::Twofish::Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Base@Twofish@CryptoPP@@8			; CryptoPP::Twofish::Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8		; CryptoPP::Twofish::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > `RTTI Type Descriptor'
PUBLIC	??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> `RTTI Type Descriptor'
PUBLIC	??_R3?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Base Class Array'
PUBLIC	??_R1M@?0A@EA@Twofish_Info@CryptoPP@@8		; CryptoPP::Twofish_Info::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUTwofish_Info@CryptoPP@@@8		; CryptoPP::Twofish_Info `RTTI Type Descriptor'
PUBLIC	??_R3Twofish_Info@CryptoPP@@8			; CryptoPP::Twofish_Info::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Twofish_Info@CryptoPP@@8			; CryptoPP::Twofish_Info::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Twofish_Info@CryptoPP@@8		; CryptoPP::Twofish_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R10?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,0,32,1,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
PUBLIC	??_R0?AV?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,0,32,1,4,0> `RTTI Type Descriptor'
PUBLIC	??_R3?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,0,32,1,4,0>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,0,32,1,4,0>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,0,32,1,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R11?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8	; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (2,-1,0,64)'
PUBLIC	??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8	; CryptoPP::FixedRounds<16> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedRounds@$0BA@@CryptoPP@@8		; CryptoPP::FixedRounds<16>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedRounds@$0BA@@CryptoPP@@8		; CryptoPP::FixedRounds<16>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8	; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,0,32,1,4,0>::`RTTI Base Class Descriptor at (13,-1,0,64)'
PUBLIC	??_R1O@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8	; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (14,-1,0,64)'
PUBLIC	??_R0?AVEnc@Twofish@CryptoPP@@@8		; CryptoPP::Twofish::Enc `RTTI Type Descriptor'
PUBLIC	??_R3Enc@Twofish@CryptoPP@@8			; CryptoPP::Twofish::Enc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Enc@Twofish@CryptoPP@@8			; CryptoPP::Twofish::Enc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8		; CryptoPP::Twofish::Enc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc> `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Base Class Array'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBase@XTEA@CryptoPP@@@8			; CryptoPP::XTEA::Base `RTTI Type Descriptor'
PUBLIC	??_R3Base@XTEA@CryptoPP@@8			; CryptoPP::XTEA::Base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Base@XTEA@CryptoPP@@8			; CryptoPP::XTEA::Base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8		; CryptoPP::XTEA::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > `RTTI Type Descriptor'
PUBLIC	??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> `RTTI Type Descriptor'
PUBLIC	??_R3?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Base Class Array'
PUBLIC	??_R1M@?0A@EA@XTEA_Info@CryptoPP@@8		; CryptoPP::XTEA_Info::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUXTEA_Info@CryptoPP@@@8			; CryptoPP::XTEA_Info `RTTI Type Descriptor'
PUBLIC	??_R3XTEA_Info@CryptoPP@@8			; CryptoPP::XTEA_Info::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XTEA_Info@CryptoPP@@8			; CryptoPP::XTEA_Info::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XTEA_Info@CryptoPP@@8		; CryptoPP::XTEA_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8	; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8	; CryptoPP::FixedBlockSize<8> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedBlockSize@$07@CryptoPP@@8		; CryptoPP::FixedBlockSize<8>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedBlockSize@$07@CryptoPP@@8		; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Array'
PUBLIC	??_R10?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
PUBLIC	??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<16,4,0> `RTTI Type Descriptor'
PUBLIC	??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8	; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8	; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R11?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (2,-1,0,64)'
PUBLIC	??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8 ; CryptoPP::VariableRounds<32,1,2147483647> `RTTI Type Descriptor'
PUBLIC	??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8	; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R1N@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (13,-1,0,64)'
PUBLIC	??_R1O@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (14,-1,0,64)'
PUBLIC	??_R0?AVEnc@XTEA@CryptoPP@@@8			; CryptoPP::XTEA::Enc `RTTI Type Descriptor'
PUBLIC	??_R3Enc@XTEA@CryptoPP@@8			; CryptoPP::XTEA::Enc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Enc@XTEA@CryptoPP@@8			; CryptoPP::XTEA::Enc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8		; CryptoPP::XTEA::Enc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> `RTTI Type Descriptor'
PUBLIC	??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc> `RTTI Type Descriptor'
PUBLIC	??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Base Class Array'
PUBLIC	??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 ; CryptoPP::AdditiveCipherAbstractPolicy `RTTI Type Descriptor'
PUBLIC	??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8	; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8	; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4AlgorithmParametersBase@CryptoPP@@6B@	; CryptoPP::AlgorithmParametersBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAlgorithmParametersBase@CryptoPP@@@8	; CryptoPP::AlgorithmParametersBase `RTTI Type Descriptor'
PUBLIC	??_R3AlgorithmParametersBase@CryptoPP@@8	; CryptoPP::AlgorithmParametersBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AlgorithmParametersBase@CryptoPP@@8	; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Complete Object Locator'
PUBLIC	??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter> `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCipherModeBase@CryptoPP@@@8		; CryptoPP::CipherModeBase `RTTI Type Descriptor'
PUBLIC	??_R3CipherModeBase@CryptoPP@@8			; CryptoPP::CipherModeBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CipherModeBase@CryptoPP@@8			; CryptoPP::CipherModeBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8	; CryptoPP::CipherModeBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
PUBLIC	??_R3?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (24,-1,0,64)'
PUBLIC	??_R0?AVCTR_ModePolicy@CryptoPP@@@8		; CryptoPP::CTR_ModePolicy `RTTI Type Descriptor'
PUBLIC	??_R3CTR_ModePolicy@CryptoPP@@8			; CryptoPP::CTR_ModePolicy::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTR_ModePolicy@CryptoPP@@8			; CryptoPP::CTR_ModePolicy::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8	; CryptoPP::CTR_ModePolicy::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> `RTTI Type Descriptor'
PUBLIC	??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> > `RTTI Type Descriptor'
PUBLIC	??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R13?0A@EC@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R1CI@?0A@EA@RandomNumberGenerator@CryptoPP@@8 ; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (40,-1,0,64)'
PUBLIC	??_R1CI@?0A@EC@Algorithm@CryptoPP@@8		; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (40,-1,0,66)'
PUBLIC	??_R1CI@?0A@EC@Clonable@CryptoPP@@8		; CryptoPP::Clonable::`RTTI Base Class Descriptor at (40,-1,0,66)'
PUBLIC	??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
PUBLIC	??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1DN@?0A@EN@Empty@CryptoPP@@8		; CryptoPP::Empty::`RTTI Base Class Descriptor at (61,-1,0,77)'
PUBLIC	??_R0?AVEmpty@CryptoPP@@@8			; CryptoPP::Empty `RTTI Type Descriptor'
PUBLIC	??_R3Empty@CryptoPP@@8				; CryptoPP::Empty::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Empty@CryptoPP@@8				; CryptoPP::Empty::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Empty@CryptoPP@@8			; CryptoPP::Empty::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@Filter@CryptoPP@@8		; CryptoPP::Filter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVFilter@CryptoPP@@@8			; CryptoPP::Filter `RTTI Type Descriptor'
PUBLIC	??_R3Filter@CryptoPP@@8				; CryptoPP::Filter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Filter@CryptoPP@@8				; CryptoPP::Filter::`RTTI Base Class Array'
PUBLIC	??_R1M@?0A@EA@NotCopyable@CryptoPP@@8		; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AVNotCopyable@CryptoPP@@@8		; CryptoPP::NotCopyable `RTTI Type Descriptor'
PUBLIC	??_R3NotCopyable@CryptoPP@@8			; CryptoPP::NotCopyable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2NotCopyable@CryptoPP@@8			; CryptoPP::NotCopyable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@NotCopyable@CryptoPP@@8		; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R4StringStore@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringStore::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringStore@CryptoPP@@@8		; CryptoPP::StringStore `RTTI Type Descriptor'
PUBLIC	??_R3StringStore@CryptoPP@@8			; CryptoPP::StringStore::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringStore@CryptoPP@@8			; CryptoPP::StringStore::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringStore@CryptoPP@@8		; CryptoPP::StringStore::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringStore@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringStore::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSource@CryptoPP@@@8			; CryptoPP::Source `RTTI Type Descriptor'
PUBLIC	??_R3Source@CryptoPP@@8				; CryptoPP::Source::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Source@CryptoPP@@8				; CryptoPP::Source::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Source@CryptoPP@@8		; CryptoPP::Source::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter> `RTTI Type Descriptor'
PUBLIC	??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Array'
PUBLIC	??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Complete Object Locator'
PUBLIC	??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4StringSource@CryptoPP@@6BAlgorithm@1@@	; CryptoPP::StringSource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVStringSource@CryptoPP@@@8		; CryptoPP::StringSource `RTTI Type Descriptor'
PUBLIC	??_R3StringSource@CryptoPP@@8			; CryptoPP::StringSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2StringSource@CryptoPP@@8			; CryptoPP::StringSource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@StringSource@CryptoPP@@8		; CryptoPP::StringSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore> `RTTI Type Descriptor'
PUBLIC	??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Array'
PUBLIC	??_R4StringSource@CryptoPP@@6BWaitable@1@@	; CryptoPP::StringSource::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
PUBLIC	??_R4AutoSeededRandomPool@CryptoPP@@6B@		; CryptoPP::AutoSeededRandomPool::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAutoSeededRandomPool@CryptoPP@@@8	; CryptoPP::AutoSeededRandomPool `RTTI Type Descriptor'
PUBLIC	??_R3AutoSeededRandomPool@CryptoPP@@8		; CryptoPP::AutoSeededRandomPool::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AutoSeededRandomPool@CryptoPP@@8		; CryptoPP::AutoSeededRandomPool::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AutoSeededRandomPool@CryptoPP@@8	; CryptoPP::AutoSeededRandomPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@RandomPool@CryptoPP@@8		; CryptoPP::RandomPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVRandomPool@CryptoPP@@@8			; CryptoPP::RandomPool `RTTI Type Descriptor'
PUBLIC	??_R3RandomPool@CryptoPP@@8			; CryptoPP::RandomPool::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RandomPool@CryptoPP@@8			; CryptoPP::RandomPool::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@NotCopyable@CryptoPP@@8		; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
PUBLIC	??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Descriptor at (64,-1,0,77)'
PUBLIC	??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
PUBLIC	??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Descriptor at (64,-1,0,77)'
PUBLIC	??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
PUBLIC	??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Descriptor at (64,-1,0,77)'
PUBLIC	??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> > `RTTI Type Descriptor'
PUBLIC	??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
PUBLIC	__real@3ff0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	__errno:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_ceil:PROC
EXTRN	_floor:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_type_info_compare:PROC
EXTRN	___std_type_info_name:PROC
EXTRN	??_EException@CryptoPP@@UAEPAXI@Z:PROC		; CryptoPP::Exception::`vector deleting destructor'
EXTRN	??_EInvalidArgument@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::InvalidArgument::`vector deleting destructor'
EXTRN	??_ENotImplemented@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::NotImplemented::`vector deleting destructor'
EXTRN	??_EValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::`vector deleting destructor'
EXTRN	??0Algorithm@CryptoPP@@QAE@_N@Z:PROC		; CryptoPP::Algorithm::Algorithm
EXTRN	?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z:PROC ; CryptoPP::SimpleKeyingInterface::SetKey
EXTRN	?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z:PROC ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV
EXTRN	?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z:PROC ; CryptoPP::SimpleKeyingInterface::GetNextIV
EXTRN	?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ:PROC ; CryptoPP::BlockTransformation::OptimalDataAlignment
EXTRN	?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z:PROC ; CryptoPP::BlockTransformation::AdvancedProcessBlocks
EXTRN	?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEXPAEPBEI@Z:PROC ; CryptoPP::StreamTransformation::ProcessLastBlock
EXTRN	?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ:PROC ; CryptoPP::RandomNumberGenerator::GenerateByte
EXTRN	?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ:PROC ; CryptoPP::RandomNumberGenerator::GenerateBit
EXTRN	?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z:PROC ; CryptoPP::RandomNumberGenerator::GenerateWord32
EXTRN	?GenerateBlock@RandomNumberGenerator@CryptoPP@@UAEXPAEI@Z:PROC ; CryptoPP::RandomNumberGenerator::GenerateBlock
EXTRN	?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z:PROC ; CryptoPP::RandomNumberGenerator::DiscardBytes
EXTRN	?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z:PROC ; CryptoPP::RandomNumberGenerator::GenerateIntoBufferedTransformation
EXTRN	?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ:PROC ; CryptoPP::BufferedTransformation::GetMaxWaitObjectCount
EXTRN	?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z:PROC ; CryptoPP::BufferedTransformation::GetWaitObjects
EXTRN	?Initialize@BufferedTransformation@CryptoPP@@UAEXABVNameValuePairs@2@H@Z:PROC ; CryptoPP::BufferedTransformation::Initialize
EXTRN	?Flush@BufferedTransformation@CryptoPP@@UAE_N_NH0@Z:PROC ; CryptoPP::BufferedTransformation::Flush
EXTRN	?MessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NH_N@Z:PROC ; CryptoPP::BufferedTransformation::MessageSeriesEnd
EXTRN	?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ:PROC ; CryptoPP::BufferedTransformation::MaxRetrievable
EXTRN	?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ:PROC ; CryptoPP::BufferedTransformation::AnyRetrievable
EXTRN	?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z:PROC ; CryptoPP::BufferedTransformation::Get
EXTRN	?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z:PROC ; CryptoPP::BufferedTransformation::Get
EXTRN	?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z:PROC ; CryptoPP::BufferedTransformation::Peek
EXTRN	?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z:PROC ; CryptoPP::BufferedTransformation::Peek
EXTRN	?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z:PROC ; CryptoPP::BufferedTransformation::Skip
EXTRN	?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ:PROC ; CryptoPP::BufferedTransformation::TotalBytesRetrievable
EXTRN	?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ:PROC ; CryptoPP::BufferedTransformation::NumberOfMessages
EXTRN	?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ:PROC ; CryptoPP::BufferedTransformation::AnyMessages
EXTRN	?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ:PROC ; CryptoPP::BufferedTransformation::GetNextMessage
EXTRN	?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z:PROC ; CryptoPP::BufferedTransformation::SkipMessages
EXTRN	?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ:PROC ; CryptoPP::BufferedTransformation::SkipAll
EXTRN	?TransferMessagesTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@AAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::BufferedTransformation::TransferMessagesTo2
EXTRN	?TransferAllTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::BufferedTransformation::TransferAllTo2
EXTRN	?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z:PROC ; CryptoPP::BufferedTransformation::ChannelCreatePutSpace
EXTRN	?ChannelPut2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z:PROC ; CryptoPP::BufferedTransformation::ChannelPut2
EXTRN	?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z:PROC ; CryptoPP::BufferedTransformation::ChannelPutModifiable2
EXTRN	?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z:PROC ; CryptoPP::BufferedTransformation::ChannelFlush
EXTRN	?ChannelMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z:PROC ; CryptoPP::BufferedTransformation::ChannelMessageSeriesEnd
EXTRN	?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; CryptoPP::BufferedTransformation::SetRetrievalChannel
EXTRN	?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z:PROC ; CryptoPP::BufferedTransformation::Attach
EXTRN	?AlignedAllocate@CryptoPP@@YAPAXI@Z:PROC	; CryptoPP::AlignedAllocate
EXTRN	?AlignedDeallocate@CryptoPP@@YAXPAX@Z:PROC	; CryptoPP::AlignedDeallocate
EXTRN	?UnalignedAllocate@CryptoPP@@YAPAXI@Z:PROC	; CryptoPP::UnalignedAllocate
EXTRN	?UnalignedDeallocate@CryptoPP@@YAXPAX@Z:PROC	; CryptoPP::UnalignedDeallocate
EXTRN	?GetNextMessage@Store@CryptoPP@@UAE_NXZ:PROC	; CryptoPP::Store::GetNextMessage
EXTRN	?UncheckedSetKey@Base@Camellia@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z:PROC ; CryptoPP::Camellia::Base::UncheckedSetKey
EXTRN	?ProcessAndXorBlock@Base@Camellia@CryptoPP@@UBEXPBE0PAE@Z:PROC ; CryptoPP::Camellia::Base::ProcessAndXorBlock
EXTRN	?UncheckedSetKey@Base@Twofish@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z:PROC ; CryptoPP::Twofish::Base::UncheckedSetKey
EXTRN	?ProcessAndXorBlock@Enc@Twofish@CryptoPP@@UBEXPBE0PAE@Z:PROC ; CryptoPP::Twofish::Enc::ProcessAndXorBlock
EXTRN	?UncheckedSetKey@Base@XTEA@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z:PROC ; CryptoPP::XTEA::Base::UncheckedSetKey
EXTRN	?ProcessAndXorBlock@Enc@XTEA@CryptoPP@@UBEXPBE0PAE@Z:PROC ; CryptoPP::XTEA::Enc::ProcessAndXorBlock
EXTRN	?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; stl_lowers
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?AllocBuffer@CLZObject@@QAEXK@Z:PROC		; CLZObject::AllocBuffer
EXTRN	?random_range@@YAJJJ@Z:PROC			; random_range
EXTRN	??_EParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`vector deleting destructor'
EXTRN	??_EAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::AlgorithmParametersBase::`vector deleting destructor'
EXTRN	??_E?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`vector deleting destructor'
EXTRN	??0AlgorithmParameters@CryptoPP@@QAE@XZ:PROC	; CryptoPP::AlgorithmParameters::AlgorithmParameters
EXTRN	??0AlgorithmParameters@CryptoPP@@QAE@ABV01@@Z:PROC ; CryptoPP::AlgorithmParameters::AlgorithmParameters
EXTRN	?IncrementCounterBy256@CTR_ModePolicy@CryptoPP@@MAEXXZ:PROC ; CryptoPP::CTR_ModePolicy::IncrementCounterBy256
EXTRN	?OperateKeystream@CTR_ModePolicy@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z:PROC ; CryptoPP::CTR_ModePolicy::OperateKeystream
EXTRN	?CipherResynchronize@CTR_ModePolicy@CryptoPP@@MAEXPAEPBEI@Z:PROC ; CryptoPP::CTR_ModePolicy::CipherResynchronize
EXTRN	?SeekToIteration@CTR_ModePolicy@CryptoPP@@MAEX_K@Z:PROC ; CryptoPP::CTR_ModePolicy::SeekToIteration
EXTRN	?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::GenerateBlock
EXTRN	?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::ProcessData
EXTRN	?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::Resynchronize
EXTRN	?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::Seek
EXTRN	?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z:PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::UncheckedSetKey
EXTRN	??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
EXTRN	??0Filter@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z:PROC ; CryptoPP::Filter::Filter
EXTRN	?AttachedTransformation@Filter@CryptoPP@@UAEPAVBufferedTransformation@2@XZ:PROC ; CryptoPP::Filter::AttachedTransformation
EXTRN	?AttachedTransformation@Filter@CryptoPP@@UBEPBVBufferedTransformation@2@XZ:PROC ; CryptoPP::Filter::AttachedTransformation
EXTRN	?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z:PROC ; CryptoPP::Filter::Detach
EXTRN	?TransferTo2@Filter@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::Filter::TransferTo2
EXTRN	?CopyRangeTo2@Filter@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::Filter::CopyRangeTo2
EXTRN	?Initialize@Filter@CryptoPP@@UAEXABVNameValuePairs@2@H@Z:PROC ; CryptoPP::Filter::Initialize
EXTRN	?Flush@Filter@CryptoPP@@UAE_N_NH0@Z:PROC	; CryptoPP::Filter::Flush
EXTRN	?MessageSeriesEnd@Filter@CryptoPP@@UAE_NH_N@Z:PROC ; CryptoPP::Filter::MessageSeriesEnd
EXTRN	?NewDefaultAttachment@Filter@CryptoPP@@MBEPAVBufferedTransformation@2@XZ:PROC ; CryptoPP::Filter::NewDefaultAttachment
EXTRN	??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@_N@Z:PROC ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
EXTRN	??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor'
EXTRN	?TransferTo2@StringStore@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::StringStore::TransferTo2
EXTRN	?CopyRangeTo2@StringStore@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z:PROC ; CryptoPP::StringStore::CopyRangeTo2
EXTRN	?StoreInitialize@StringStore@CryptoPP@@EAEXABVNameValuePairs@2@@Z:PROC ; CryptoPP::StringStore::StoreInitialize
EXTRN	??_EStringStore@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::StringStore::`vector deleting destructor'
EXTRN	??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor'
EXTRN	??_EStringSource@CryptoPP@@UAEPAXI@Z:PROC	; CryptoPP::StringSource::`vector deleting destructor'
EXTRN	??0RandomPool@CryptoPP@@QAE@XZ:PROC		; CryptoPP::RandomPool::RandomPool
EXTRN	?IncorporateEntropy@RandomPool@CryptoPP@@UAEXPBEI@Z:PROC ; CryptoPP::RandomPool::IncorporateEntropy
EXTRN	?GenerateIntoBufferedTransformation@RandomPool@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z:PROC ; CryptoPP::RandomPool::GenerateIntoBufferedTransformation
EXTRN	?Reseed@AutoSeededRandomPool@CryptoPP@@QAEX_NI@Z:PROC ; CryptoPP::AutoSeededRandomPool::Reseed
EXTRN	??_EAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::AutoSeededRandomPool::`vector deleting destructor'
EXTRN	??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vector deleting destructor'
EXTRN	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
EXTRN	??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vector deleting destructor'
EXTRN	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
EXTRN	??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vector deleting destructor'
EXTRN	??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
EXTRN	??_EInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`vector deleting destructor'
EXTRN	??_EInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z:PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__dtoui3:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?__type_info_root_node@@3U__type_info_node@@A:BYTE ; __type_info_root_node
EXTRN	?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B:BYTE ; CryptoPP::DEFAULT_CHANNEL
EXTRN	?g_pAssignIntToInteger@CryptoPP@@3P6A_NABVtype_info@@PAXPBX@ZA:DWORD ; CryptoPP::g_pAssignIntToInteger
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
_BSS	SEGMENT
?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A DB 060H DUP (?) ; `EterPackPolicy_CSHybridCrypt::GenerateCryptKey'::`2'::rnd
_BSS	ENDS
;	COMDAT ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 01H DUP (?) ; `EterPackPolicy_CSHybridCrypt::GenerateCryptKey'::`2'::$TSS0
_BSS	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	028H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	018H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1DN@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	011H
	DD	FLAT:??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@Crypt'
	DB	'oPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAddit'
	DB	'iveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP'
	DB	'@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherMode'
	DB	'FinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@'
	DB	'CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@'
	DB	'@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveC'
	DB	'ipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2'
	DB	'@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	010H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@Cry'
	DB	'ptoPP@@@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::`RTTI Base Class Descriptor at (64,-1,0,77)'
	DD	00H
	DD	040H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	012H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
	DD	FLAT:??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1DN@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	013H
	DD	FLAT:??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCiphe'
	DB	'rFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHo'
	DB	'lder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPo'
	DB	'licyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModeP'
	DB	'olicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@Cry'
	DB	'ptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	028H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	018H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1DN@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	011H
	DD	FLAT:??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@Crypt'
	DB	'oPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAddit'
	DB	'iveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP'
	DB	'@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherMode'
	DB	'FinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofi'
	DB	'sh@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@Crypto'
	DB	'PP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditi'
	DB	'veCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@'
	DB	'@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	010H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@'
	DB	'CryptoPP@@@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::`RTTI Base Class Descriptor at (64,-1,0,77)'
	DD	00H
	DD	040H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	012H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
	DD	FLAT:??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1DN@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	013H
	DD	FLAT:??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCiphe'
	DB	'rFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolic'
	DB	'yHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$Abstrac'
	DB	'tPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_Mo'
	DB	'dePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@'
	DB	'CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	028H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	018H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1DN@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	011H
	DD	FLAT:??_R2?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@Crypt'
	DB	'oPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAddit'
	DB	'iveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP'
	DB	'@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherMode'
	DB	'FinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Came'
	DB	'llia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@Cryp'
	DB	'toPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAddi'
	DB	'tiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoP'
	DB	'P@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	010H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camelli'
	DB	'a@CryptoPP@@@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::`RTTI Base Class Descriptor at (64,-1,0,77)'
	DD	00H
	DD	040H
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	012H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Base Class Array'
	DD	FLAT:??_R1EA@?0A@EN@?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1DN@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8 DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	013H
	DD	FLAT:??_R2?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCiphe'
	DB	'rFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePol'
	DB	'icyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$Abstr'
	DB	'actPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_'
	DB	'ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2'
	DB	'@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@NotCopyable@CryptoPP@@8 DD FLAT:??_R0?AVNotCopyable@CryptoPP@@@8 ; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2RandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R2RandomPool@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@RandomPool@CryptoPP@@8 ; CryptoPP::RandomPool::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3RandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R3RandomPool@CryptoPP@@8 DD 00H			; CryptoPP::RandomPool::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2RandomPool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRandomPool@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVRandomPool@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::RandomPool `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRandomPool@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@RandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RandomPool@CryptoPP@@8 DD FLAT:??_R0?AVRandomPool@CryptoPP@@@8 ; CryptoPP::RandomPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RandomPool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AutoSeededRandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AutoSeededRandomPool@CryptoPP@@8 DD FLAT:??_R0?AVAutoSeededRandomPool@CryptoPP@@@8 ; CryptoPP::AutoSeededRandomPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AutoSeededRandomPool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2AutoSeededRandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R2AutoSeededRandomPool@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@AutoSeededRandomPool@CryptoPP@@8 ; CryptoPP::AutoSeededRandomPool::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RandomPool@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3AutoSeededRandomPool@CryptoPP@@8
rdata$r	SEGMENT
??_R3AutoSeededRandomPool@CryptoPP@@8 DD 00H		; CryptoPP::AutoSeededRandomPool::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2AutoSeededRandomPool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAutoSeededRandomPool@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVAutoSeededRandomPool@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AutoSeededRandomPool `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAutoSeededRandomPool@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4AutoSeededRandomPool@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4AutoSeededRandomPool@CryptoPP@@6B@ DD 00H		; CryptoPP::AutoSeededRandomPool::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAutoSeededRandomPool@CryptoPP@@@8
	DD	FLAT:??_R3AutoSeededRandomPool@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ DD 00H ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ DD 00H ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4StringSource@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4StringSource@CryptoPP@@6BWaitable@1@@ DD 00H	; CryptoPP::StringSource::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVStringSource@CryptoPP@@@8
	DD	FLAT:??_R3StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Source@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringSource@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringSource@CryptoPP@@8 DD FLAT:??_R0?AVStringSource@CryptoPP@@@8 ; CryptoPP::StringSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2StringSource@CryptoPP@@8
rdata$r	SEGMENT
??_R2StringSource@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@StringSource@CryptoPP@@8 ; CryptoPP::StringSource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Source@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3StringSource@CryptoPP@@8
rdata$r	SEGMENT
??_R3StringSource@CryptoPP@@8 DD 00H			; CryptoPP::StringSource::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringSource@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVStringSource@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StringSource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringSource@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4StringSource@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4StringSource@CryptoPP@@6BAlgorithm@1@@ DD 00H	; CryptoPP::StringSource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringSource@CryptoPP@@@8
	DD	FLAT:??_R3StringSource@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NotImplemented@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ DD 00H ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::Filter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Source@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Source@CryptoPP@@8 DD FLAT:??_R0?AVSource@CryptoPP@@@8 ; CryptoPP::Source::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Source@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Source@CryptoPP@@8
rdata$r	SEGMENT
??_R2Source@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Source@CryptoPP@@8 ; CryptoPP::Source::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Source@CryptoPP@@8
rdata$r	SEGMENT
??_R3Source@CryptoPP@@8 DD 00H				; CryptoPP::Source::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2Source@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSource@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVSource@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Source `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSource@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4StringStore@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4StringStore@CryptoPP@@6BWaitable@1@@ DD 00H	; CryptoPP::StringStore::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVStringStore@CryptoPP@@@8
	DD	FLAT:??_R3StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@StringStore@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StringStore@CryptoPP@@8 DD FLAT:??_R0?AVStringStore@CryptoPP@@@8 ; CryptoPP::StringStore::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2StringStore@CryptoPP@@8
rdata$r	SEGMENT
??_R2StringStore@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@StringStore@CryptoPP@@8 ; CryptoPP::StringStore::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Store@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3StringStore@CryptoPP@@8
rdata$r	SEGMENT
??_R3StringStore@CryptoPP@@8 DD 00H			; CryptoPP::StringStore::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStringStore@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVStringStore@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StringStore `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStringStore@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4StringStore@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4StringStore@CryptoPP@@6BAlgorithm@1@@ DD 00H	; CryptoPP::StringStore::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVStringStore@CryptoPP@@@8
	DD	FLAT:??_R3StringStore@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
rdata$r	SEGMENT
??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ DD 00H ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8
	DD	FLAT:??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 DD FLAT:??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Sink@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8 DD 00H ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits'
	DB	'@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
rdata$r	SEGMENT
??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ DD 00H ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@@8
	DD	FLAT:??_R3?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NotCopyable@CryptoPP@@8 DD FLAT:??_R0?AVNotCopyable@CryptoPP@@@8 ; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R2NotCopyable@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@NotCopyable@CryptoPP@@8 ; CryptoPP::NotCopyable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R3NotCopyable@CryptoPP@@8 DD 00H			; CryptoPP::NotCopyable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNotCopyable@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVNotCopyable@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NotCopyable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNotCopyable@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@NotCopyable@CryptoPP@@8 DD FLAT:??_R0?AVNotCopyable@CryptoPP@@@8 ; CryptoPP::NotCopyable::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Filter@CryptoPP@@8
rdata$r	SEGMENT
??_R2Filter@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Filter@CryptoPP@@8 ; CryptoPP::Filter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@NotCopyable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Filter@CryptoPP@@8
rdata$r	SEGMENT
??_R3Filter@CryptoPP@@8 DD 00H				; CryptoPP::Filter::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2Filter@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFilter@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVFilter@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Filter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVFilter@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@Filter@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Filter@CryptoPP@@8 DD FLAT:??_R0?AVFilter@CryptoPP@@@8 ; CryptoPP::Filter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Filter@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	028H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	018H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Empty@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Empty@CryptoPP@@8 DD FLAT:??_R0?AVEmpty@CryptoPP@@@8 ; CryptoPP::Empty::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Empty@CryptoPP@@8
rdata$r	SEGMENT
??_R2Empty@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Empty@CryptoPP@@8 ; CryptoPP::Empty::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Empty@CryptoPP@@8
rdata$r	SEGMENT
??_R3Empty@CryptoPP@@8 DD 00H				; CryptoPP::Empty::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVEmpty@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVEmpty@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Empty `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEmpty@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1DN@?0A@EN@Empty@CryptoPP@@8
rdata$r	SEGMENT
??_R1DN@?0A@EN@Empty@CryptoPP@@8 DD FLAT:??_R0?AVEmpty@CryptoPP@@@8 ; CryptoPP::Empty::`RTTI Base Class Descriptor at (61,-1,0,77)'
	DD	00H
	DD	03dH
	DD	0ffffffffH
	DD	00H
	DD	04dH
	DD	FLAT:??_R3Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0fH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1DN@?0A@EN@Empty@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8 DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	010H
	DD	FLAT:??_R2?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveC'
	DB	'ipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstract'
	DB	'Policy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCip'
	DB	'herAbstractPolicy@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@@8
	DD	FLAT:??_R3?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1CI@?0A@EC@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R1CI@?0A@EC@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (40,-1,0,66)'
	DD	00H
	DD	028H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1CI@?0A@EC@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R1CI@?0A@EC@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (40,-1,0,66)'
	DD	01H
	DD	028H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1CI@?0A@EA@RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R1CI@?0A@EA@RandomNumberGenerator@CryptoPP@@8 DD FLAT:??_R0?AVRandomNumberGenerator@CryptoPP@@@8 ; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (40,-1,0,64)'
	DD	02H
	DD	028H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RandomNumberGenerator@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EC@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EC@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0dH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EC@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EA@RandomNumberGenerator@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1CI@?0A@EC@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0eH
	DD	FLAT:??_R2?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAd'
	DB	'ditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@Crypt'
	DB	'oPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8 DD 00H ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy'
	DB	'@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8 DD FLAT:??_R0?AVCTR_ModePolicy@CryptoPP@@@8 ; CryptoPP::CTR_ModePolicy::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTR_ModePolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2CTR_ModePolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R2CTR_ModePolicy@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@CTR_ModePolicy@CryptoPP@@8 ; CryptoPP::CTR_ModePolicy::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3CTR_ModePolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R3CTR_ModePolicy@CryptoPP@@8 DD 00H			; CryptoPP::CTR_ModePolicy::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2CTR_ModePolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTR_ModePolicy@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVCTR_ModePolicy@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CTR_ModePolicy `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTR_ModePolicy@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 DD FLAT:??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (24,-1,0,64)'
	DD	00H
	DD	018H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	07H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1BI@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	08H
	DD	FLAT:??_R2?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPo'
	DB	'licy@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8 DD FLAT:??_R0?AVCipherModeBase@CryptoPP@@@8 ; CryptoPP::CipherModeBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CipherModeBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2CipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R2CipherModeBase@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@CipherModeBase@CryptoPP@@8 ; CryptoPP::CipherModeBase::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3CipherModeBase@CryptoPP@@8
rdata$r	SEGMENT
??_R3CipherModeBase@CryptoPP@@8 DD 00H			; CryptoPP::CipherModeBase::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CipherModeBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCipherModeBase@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVCipherModeBase@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::CipherModeBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCipherModeBase@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmParametersTemplate@VConstByteArrayParamet'
	DB	'er@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ DD 00H ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ DD 00H ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8
	DD	FLAT:??_R3ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithmParametersBase@CryptoPP@@@8 ; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R2AlgorithmParametersBase@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@AlgorithmParametersBase@CryptoPP@@8 ; CryptoPP::AlgorithmParametersBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3AlgorithmParametersBase@CryptoPP@@8
rdata$r	SEGMENT
??_R3AlgorithmParametersBase@CryptoPP@@8 DD 00H		; CryptoPP::AlgorithmParametersBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAlgorithmParametersBase@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVAlgorithmParametersBase@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmParametersBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAlgorithmParametersBase@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4AlgorithmParametersBase@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4AlgorithmParametersBase@CryptoPP@@6B@ DD 00H	; CryptoPP::AlgorithmParametersBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAlgorithmParametersBase@CryptoPP@@@8
	DD	FLAT:??_R3AlgorithmParametersBase@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 DD FLAT:??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@AdditiveCipherAbstractPolicy@CryptoPP@@8 ; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	SEGMENT
??_R3AdditiveCipherAbstractPolicy@CryptoPP@@8 DD 00H	; CryptoPP::AdditiveCipherAbstractPolicy::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AdditiveCipherAbstractPolicy@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AUAdditiveCipherAbstractPolicy@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AdditiveCipherAbstractPolicy `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUAdditiveCipherAbstractPolicy@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	010H
	DD	FLAT:??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@Cry'
	DB	'ptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0fH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	010H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	011H
	DD	FLAT:??_R2?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP'
	DB	'@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8 DD FLAT:??_R0?AVEnc@XTEA@CryptoPP@@@8 ; CryptoPP::XTEA::Enc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0eH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Enc@XTEA@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Enc@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R2Enc@XTEA@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Enc@XTEA@CryptoPP@@8 ; CryptoPP::XTEA::Enc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Enc@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R3Enc@XTEA@CryptoPP@@8 DD 00H			; CryptoPP::XTEA::Enc::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0fH
	DD	FLAT:??_R2Enc@XTEA@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVEnc@XTEA@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVEnc@XTEA@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::XTEA::Enc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEnc@XTEA@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1O@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	SEGMENT
??_R1O@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (14,-1,0,64)'
	DD	00H
	DD	0eH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1N@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1N@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (13,-1,0,64)'
	DD	00H
	DD	0dH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8 ; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 DD 00H ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::VariableRounds<32,1,2147483647> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R11?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	SEGMENT
??_R11?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@@8 ; CryptoPP::VariableRounds<32,1,2147483647>::`RTTI Base Class Descriptor at (2,-1,0,64)'
	DD	00H
	DD	02H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 DD 00H	; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedKeyLength<16,4,0> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R10?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R10?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@@8 ; CryptoPP::FixedKeyLength<16,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedBlockSize@$07@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8 ; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedBlockSize@$07@CryptoPP@@8 DD 00H		; CryptoPP::FixedBlockSize<8>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedBlockSize<8> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedBlockSize@$07@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedBlockSize@$07@CryptoPP@@@8 ; CryptoPP::FixedBlockSize<8>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedBlockSize@$07@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XTEA_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XTEA_Info@CryptoPP@@8 DD FLAT:??_R0?AUXTEA_Info@CryptoPP@@@8 ; CryptoPP::XTEA_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XTEA_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2XTEA_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R2XTEA_Info@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@XTEA_Info@CryptoPP@@8 ; CryptoPP::XTEA_Info::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R10?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R11?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3XTEA_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R3XTEA_Info@CryptoPP@@8 DD 00H			; CryptoPP::XTEA_Info::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2XTEA_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUXTEA_Info@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AUXTEA_Info@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::XTEA_Info `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUXTEA_Info@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1M@?0A@EA@XTEA_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@XTEA_Info@CryptoPP@@8 DD FLAT:??_R0?AUXTEA_Info@CryptoPP@@@8 ; CryptoPP::XTEA_Info::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	03H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XTEA_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 DD 00H ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@Cryp'
	DB	'toPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0bH
	DD	FLAT:??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher'
	DB	'@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0aH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0cH
	DD	FLAT:??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoB'
	DB	'ases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@Cryp'
	DB	'toPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0dH
	DD	FLAT:??_R2?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@'
	DB	'2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0cH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8 DD FLAT:??_R0?AVBase@XTEA@CryptoPP@@@8 ; CryptoPP::XTEA::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0dH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Base@XTEA@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Base@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R2Base@XTEA@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Base@XTEA@CryptoPP@@8 ; CryptoPP::XTEA::Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@XTEA_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$07@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$FixedKeyLength@$0BA@$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$VariableRounds@$0CA@$00$0HPPPPPPP@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Base@XTEA@CryptoPP@@8
rdata$r	SEGMENT
??_R3Base@XTEA@CryptoPP@@8 DD 00H			; CryptoPP::XTEA::Base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0eH
	DD	FLAT:??_R2Base@XTEA@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBase@XTEA@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBase@XTEA@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::XTEA::Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBase@XTEA@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	010H
	DD	FLAT:??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@'
	DB	'CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0fH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	010H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	011H
	DD	FLAT:??_R2?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@Crypt'
	DB	'oPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8 DD FLAT:??_R0?AVEnc@Twofish@CryptoPP@@@8 ; CryptoPP::Twofish::Enc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0eH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Enc@Twofish@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Enc@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R2Enc@Twofish@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Enc@Twofish@CryptoPP@@8 ; CryptoPP::Twofish::Enc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Enc@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R3Enc@Twofish@CryptoPP@@8 DD 00H			; CryptoPP::Twofish::Enc::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0fH
	DD	FLAT:??_R2Enc@Twofish@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVEnc@Twofish@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVEnc@Twofish@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Twofish::Enc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVEnc@Twofish@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1O@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R1O@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8 ; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (14,-1,0,64)'
	DD	00H
	DD	0eH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,0,32,1,4,0>::`RTTI Base Class Descriptor at (13,-1,0,64)'
	DD	00H
	DD	0dH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8 ; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedRounds@$0BA@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8 ; CryptoPP::FixedRounds<16>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedRounds@$0BA@@CryptoPP@@8 DD 00H		; CryptoPP::FixedRounds<16>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedRounds<16> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedRounds@$0BA@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R11?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R11?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedRounds@$0BA@@CryptoPP@@@8 ; CryptoPP::FixedRounds<16>::`RTTI Base Class Descriptor at (2,-1,0,64)'
	DD	00H
	DD	02H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,0,32,1,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,0,32,1,4,0>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8 DD 00H ; CryptoPP::VariableKeyLength<16,0,32,1,4,0>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::VariableKeyLength<16,0,32,1,4,0> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoP'
	DB	'P@@', 00H
data$rs	ENDS
;	COMDAT ??_R10?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R10?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,0,32,1,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Twofish_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Twofish_Info@CryptoPP@@8 DD FLAT:??_R0?AUTwofish_Info@CryptoPP@@@8 ; CryptoPP::Twofish_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Twofish_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Twofish_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R2Twofish_Info@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Twofish_Info@CryptoPP@@8 ; CryptoPP::Twofish_Info::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R10?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
	DD	FLAT:??_R11?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Twofish_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R3Twofish_Info@CryptoPP@@8 DD 00H			; CryptoPP::Twofish_Info::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2Twofish_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUTwofish_Info@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AUTwofish_Info@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Twofish_Info `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUTwofish_Info@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1M@?0A@EA@Twofish_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@Twofish_Info@CryptoPP@@8 DD FLAT:??_R0?AUTwofish_Info@CryptoPP@@@8 ; CryptoPP::Twofish_Info::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	03H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Twofish_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 DD 00H ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@C'
	DB	'ryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0bH
	DD	FLAT:??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher'
	DB	'@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0aH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0cH
	DD	FLAT:??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoB'
	DB	'ases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@C'
	DB	'ryptoPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0dH
	DD	FLAT:??_R2?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCiph'
	DB	'er@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0cH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8 DD FLAT:??_R0?AVBase@Twofish@CryptoPP@@@8 ; CryptoPP::Twofish::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0dH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Base@Twofish@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Base@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R2Base@Twofish@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Base@Twofish@CryptoPP@@8 ; CryptoPP::Twofish::Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Twofish_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0A@$0CA@$00$03$0A@@CryptoPP@@8
	DD	FLAT:??_R1O@?0A@EA@?$FixedRounds@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Base@Twofish@CryptoPP@@8
rdata$r	SEGMENT
??_R3Base@Twofish@CryptoPP@@8 DD 00H			; CryptoPP::Twofish::Base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0eH
	DD	FLAT:??_R2Base@Twofish@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBase@Twofish@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBase@Twofish@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Twofish::Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBase@Twofish@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 DD 00H ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0eH
	DD	FLAT:??_R2?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camelli'
	DB	'a@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@@8 ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0dH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0eH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0fH
	DD	FLAT:??_R2?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@Cry'
	DB	'ptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
rdata$r	SEGMENT
??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD 00H ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (13,-1,0,64)'
	DD	00H
	DD	0dH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedBlockSize@$0BA@@CryptoPP@@@8 ; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 DD 00H ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::VariableKeyLength<16,16,32,8,4,0> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@Crypto'
	DB	'PP@@', 00H
data$rs	ENDS
;	COMDAT ??_R10?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	SEGMENT
??_R10?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8 DD FLAT:??_R0?AV?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@@8 ; CryptoPP::VariableKeyLength<16,16,32,8,4,0>::`RTTI Base Class Descriptor at (1,-1,0,64)'
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$FixedBlockSize@$0BA@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8 ; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$FixedBlockSize@$0BA@@CryptoPP@@8 DD 00H		; CryptoPP::FixedBlockSize<16>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$FixedBlockSize@$0BA@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$FixedBlockSize@$0BA@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::FixedBlockSize<16> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$FixedBlockSize@$0BA@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8 DD FLAT:??_R0?AV?$FixedBlockSize@$0BA@@CryptoPP@@@8 ; CryptoPP::FixedBlockSize<16>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$FixedBlockSize@$0BA@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Camellia_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Camellia_Info@CryptoPP@@8 DD FLAT:??_R0?AUCamellia_Info@CryptoPP@@@8 ; CryptoPP::Camellia_Info::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Camellia_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Camellia_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R2Camellia_Info@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Camellia_Info@CryptoPP@@8 ; CryptoPP::Camellia_Info::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R10?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Camellia_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R3Camellia_Info@CryptoPP@@8 DD 00H			; CryptoPP::Camellia_Info::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2Camellia_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUCamellia_Info@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AUCamellia_Info@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Camellia_Info `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCamellia_Info@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1M@?0A@EA@Camellia_Info@CryptoPP@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@Camellia_Info@CryptoPP@@8 DD FLAT:??_R0?AUCamellia_Info@CryptoPP@@@8 ; CryptoPP::Camellia_Info::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	02H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Camellia_Info@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 DD 00H ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	09H
	DD	FLAT:??_R2?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@'
	DB	'CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@@8 ; CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	08H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0aH
	DD	FLAT:??_R2?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher'
	DB	'@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD 00H ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0bH
	DD	FLAT:??_R2?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoB'
	DB	'ases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@'
	DB	'CryptoPP@@V12@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8 DD FLAT:??_R0?AV?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@@8 ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0aH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD 00H ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0cH
	DD	FLAT:??_R2?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCip'
	DB	'her@2@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8 DD FLAT:??_R0?AV?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@@8 ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0bH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8 DD FLAT:??_R0?AVBase@Camellia@CryptoPP@@@8 ; CryptoPP::Camellia::Base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	0cH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Base@Camellia@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Base@Camellia@CryptoPP@@8
rdata$r	SEGMENT
??_R2Base@Camellia@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Base@Camellia@CryptoPP@@8 ; CryptoPP::Camellia::Base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@Camellia_Info@CryptoPP@@8
	DD	FLAT:??_R1M@?0A@EA@?$FixedBlockSize@$0BA@@CryptoPP@@8
	DD	FLAT:??_R1N@?0A@EA@?$VariableKeyLength@$0BA@$0BA@$0CA@$07$03$0A@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Base@Camellia@CryptoPP@@8
rdata$r	SEGMENT
??_R3Base@Camellia@CryptoPP@@8 DD 00H			; CryptoPP::Camellia::Base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	0dH
	DD	FLAT:??_R2Base@Camellia@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBase@Camellia@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBase@Camellia@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Camellia::Base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBase@Camellia@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 ; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Sink@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8 DD 00H	; CryptoPP::Bufferless<CryptoPP::Sink>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2?$Bufferless@VSink@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Bufferless<CryptoPP::Sink> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$Bufferless@VSink@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@Sink@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Sink@CryptoPP@@8 DD FLAT:??_R0?AVSink@CryptoPP@@@8 ; CryptoPP::Sink::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Sink@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Sink@CryptoPP@@8
rdata$r	SEGMENT
??_R2Sink@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Sink@CryptoPP@@8 ; CryptoPP::Sink::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Sink@CryptoPP@@8
rdata$r	SEGMENT
??_R3Sink@CryptoPP@@8 DD 00H				; CryptoPP::Sink::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2Sink@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSink@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVSink@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Sink `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSink@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NotImplemented@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ DD 00H ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
	DD	FLAT:??_R3InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@'
	DB	'CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD 00H ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransform'
	DB	'ation@CryptoPP@@@CryptoPP@@@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8 DD FLAT:??_R0?AV?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@@8 ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Store@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Store@CryptoPP@@8 DD FLAT:??_R0?AVStore@CryptoPP@@@8 ; CryptoPP::Store::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	06H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Store@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Store@CryptoPP@@8
rdata$r	SEGMENT
??_R2Store@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Store@CryptoPP@@8 ; CryptoPP::Store::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Store@CryptoPP@@8
rdata$r	SEGMENT
??_R3Store@CryptoPP@@8 DD 00H				; CryptoPP::Store::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	07H
	DD	FLAT:??_R2Store@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStore@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVStore@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@	; CryptoPP::Store `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStore@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EA@StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@StreamTransformation@CryptoPP@@8 DD FLAT:??_R0?AVStreamTransformation@CryptoPP@@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	02H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8 DD FLAT:??_R0?AVSymmetricCipher@CryptoPP@@@8 ; CryptoPP::SymmetricCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SymmetricCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R2SymmetricCipher@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@SymmetricCipher@CryptoPP@@8 ; CryptoPP::SymmetricCipher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@StreamTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3SymmetricCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R3SymmetricCipher@CryptoPP@@8 DD 00H			; CryptoPP::SymmetricCipher::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2SymmetricCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSymmetricCipher@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVSymmetricCipher@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SymmetricCipher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSymmetricCipher@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@BlockTransformation@CryptoPP@@8 DD FLAT:??_R0?AVBlockTransformation@CryptoPP@@@8 ; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	02H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BlockTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BlockCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BlockCipher@CryptoPP@@8 DD FLAT:??_R0?AVBlockCipher@CryptoPP@@@8 ; CryptoPP::BlockCipher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BlockCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2BlockCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R2BlockCipher@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@BlockCipher@CryptoPP@@8 ; CryptoPP::BlockCipher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@BlockTransformation@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3BlockCipher@CryptoPP@@8
rdata$r	SEGMENT
??_R3BlockCipher@CryptoPP@@8 DD 00H			; CryptoPP::BlockCipher::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2BlockCipher@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBlockCipher@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBlockCipher@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockCipher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBlockCipher@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8 DD FLAT:??_R0?AVStreamTransformation@CryptoPP@@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R2StreamTransformation@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@StreamTransformation@CryptoPP@@8 ; CryptoPP::StreamTransformation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3StreamTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R3StreamTransformation@CryptoPP@@8 DD 00H		; CryptoPP::StreamTransformation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2StreamTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVStreamTransformation@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVStreamTransformation@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::StreamTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVStreamTransformation@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8 DD FLAT:??_R0?AVBlockTransformation@CryptoPP@@@8 ; CryptoPP::BlockTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BlockTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R2BlockTransformation@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@BlockTransformation@CryptoPP@@8 ; CryptoPP::BlockTransformation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3BlockTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R3BlockTransformation@CryptoPP@@8 DD 00H		; CryptoPP::BlockTransformation::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2BlockTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBlockTransformation@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBlockTransformation@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BlockTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBlockTransformation@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8 DD FLAT:??_R0?AVSimpleKeyingInterface@CryptoPP@@@8 ; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SimpleKeyingInterface@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R2SimpleKeyingInterface@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@SimpleKeyingInterface@CryptoPP@@8 ; CryptoPP::SimpleKeyingInterface::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SimpleKeyingInterface@CryptoPP@@8
rdata$r	SEGMENT
??_R3SimpleKeyingInterface@CryptoPP@@8 DD 00H		; CryptoPP::SimpleKeyingInterface::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SimpleKeyingInterface@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSimpleKeyingInterface@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVSimpleKeyingInterface@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::SimpleKeyingInterface `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSimpleKeyingInterface@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8 DD FLAT:??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@ValueTypeMismatch@NameValuePairs@CryptoPP@@8 ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	SEGMENT
??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8 DD 00H ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ DD 00H ; CryptoPP::NameValuePairs::ValueTypeMismatch::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8
	DD	FLAT:??_R3ValueTypeMismatch@NameValuePairs@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@NotImplemented@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@NotImplemented@CryptoPP@@8 DD FLAT:??_R0?AVNotImplemented@CryptoPP@@@8 ; CryptoPP::NotImplemented::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2NotImplemented@CryptoPP@@8
rdata$r	SEGMENT
??_R2NotImplemented@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@NotImplemented@CryptoPP@@8 ; CryptoPP::NotImplemented::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3NotImplemented@CryptoPP@@8
rdata$r	SEGMENT
??_R3NotImplemented@CryptoPP@@8 DD 00H			; CryptoPP::NotImplemented::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4NotImplemented@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4NotImplemented@CryptoPP@@6B@ DD 00H		; CryptoPP::NotImplemented::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNotImplemented@CryptoPP@@@8
	DD	FLAT:??_R3NotImplemented@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8 DD FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8 ; CryptoPP::InvalidArgument::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2InvalidArgument@CryptoPP@@8
rdata$r	SEGMENT
??_R2InvalidArgument@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@InvalidArgument@CryptoPP@@8 ; CryptoPP::InvalidArgument::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3InvalidArgument@CryptoPP@@8
rdata$r	SEGMENT
??_R3InvalidArgument@CryptoPP@@8 DD 00H			; CryptoPP::InvalidArgument::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4InvalidArgument@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4InvalidArgument@CryptoPP@@6B@ DD 00H		; CryptoPP::InvalidArgument::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8
	DD	FLAT:??_R3InvalidArgument@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Exception@CryptoPP@@8 DD FLAT:??_R0?AVException@CryptoPP@@@8 ; CryptoPP::Exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R2Exception@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Exception@CryptoPP@@8 ; CryptoPP::Exception::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3Exception@CryptoPP@@8
rdata$r	SEGMENT
??_R3Exception@CryptoPP@@8 DD 00H			; CryptoPP::Exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R4Exception@CryptoPP@@6B@
rdata$r	SEGMENT
??_R4Exception@CryptoPP@@6B@ DD 00H			; CryptoPP::Exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVException@CryptoPP@@@8
	DD	FLAT:??_R3Exception@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Waitable@CryptoPP@@8 DD FLAT:??_R0?AVWaitable@CryptoPP@@@8 ; CryptoPP::Waitable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R2Waitable@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Waitable@CryptoPP@@8 ; CryptoPP::Waitable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R3Waitable@CryptoPP@@8 DD 00H			; CryptoPP::Waitable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVWaitable@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVWaitable@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Waitable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVWaitable@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	SEGMENT
??_R13?0A@EA@Waitable@CryptoPP@@8 DD FLAT:??_R0?AVWaitable@CryptoPP@@@8 ; CryptoPP::Waitable::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8 DD FLAT:??_R0?AVBufferedTransformation@CryptoPP@@@8 ; CryptoPP::BufferedTransformation::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BufferedTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2BufferedTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R2BufferedTransformation@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@BufferedTransformation@CryptoPP@@8 ; CryptoPP::BufferedTransformation::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
	DD	FLAT:??_R13?0A@EA@Waitable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3BufferedTransformation@CryptoPP@@8
rdata$r	SEGMENT
??_R3BufferedTransformation@CryptoPP@@8 DD 00H		; CryptoPP::BufferedTransformation::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2BufferedTransformation@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBufferedTransformation@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVBufferedTransformation@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::BufferedTransformation `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBufferedTransformation@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R2Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R2Clonable@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8 ; CryptoPP::Clonable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R3Clonable@CryptoPP@@8 DD 00H			; CryptoPP::Clonable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVClonable@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVClonable@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Clonable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVClonable@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Clonable@CryptoPP@@8 DD FLAT:??_R0?AVClonable@CryptoPP@@@8 ; CryptoPP::Clonable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R2Algorithm@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8 ; CryptoPP::Algorithm::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R3Algorithm@CryptoPP@@8 DD 00H			; CryptoPP::Algorithm::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAlgorithm@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVAlgorithm@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Algorithm `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAlgorithm@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@Algorithm@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Algorithm@CryptoPP@@8 DD FLAT:??_R0?AVAlgorithm@CryptoPP@@@8 ; CryptoPP::Algorithm::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Algorithm@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8 DD FLAT:??_R0?AVRandomNumberGenerator@CryptoPP@@@8 ; CryptoPP::RandomNumberGenerator::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RandomNumberGenerator@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R2RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R2RandomNumberGenerator@CryptoPP@@8 DD FLAT:??_R1A@?0A@EA@RandomNumberGenerator@CryptoPP@@8 ; CryptoPP::RandomNumberGenerator::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Algorithm@CryptoPP@@8
	DD	FLAT:??_R1A@?0A@EA@Clonable@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R3RandomNumberGenerator@CryptoPP@@8
rdata$r	SEGMENT
??_R3RandomNumberGenerator@CryptoPP@@8 DD 00H		; CryptoPP::RandomNumberGenerator::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2RandomNumberGenerator@CryptoPP@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRandomNumberGenerator@CryptoPP@@@8
data$rs	SEGMENT
??_R0?AVRandomNumberGenerator@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::RandomNumberGenerator `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRandomNumberGenerator@CryptoPP@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> > * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D'
	DB	'@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5w@
CONST	SEGMENT
??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5w@ DB 'AllocatorBase'
	DB	': requested size would cause integer overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@
CONST	SEGMENT
??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@ DB 'BufferedTransf'
	DB	'ormation: this object doesn''t allow input', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
xdata$x	SEGMENT
__CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40 DD 00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUInputRejected@?$InputRejecting@VBufferedTransformati'
	DB	'on@CryptoPP@@@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@ DD 04H
	DD	FLAT:__CT??_R0?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
	DD	FLAT:__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@ DD 00H
	DD	FLAT:??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
CONST	SEGMENT
??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ DD FLAT:??_R4InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`vftable'
	DD	FLAT:??_EInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R0?AVConstByteArrayParameter@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVConstByteArrayParameter@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::ConstByteArrayParameter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVConstByteArrayParameter@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@
CONST	SEGMENT
??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@ DB 'StringSink: Out'
	DB	'putStringPointer not specified', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NDOICOBI@OutputStringPointer@
CONST	SEGMENT
??_C@_0BE@NDOICOBI@OutputStringPointer@ DB 'OutputStringPointer', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
xdata$x	SEGMENT
__CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40 DD 00H
	DD	FLAT:??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8
data$r	SEGMENT
??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@Cr'
	DB	'yptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@ DD 04H
	DD	FLAT:__CT??_R0?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@@8??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z40
	DD	FLAT:__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
xdata$x	SEGMENT
__TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@ DD 00H
	DD	FLAT:??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
CONST	SEGMENT
??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ DD FLAT:??_R4InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`vftable'
	DD	FLAT:??_EInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z
	DD	FLAT:?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
	DD	FLAT:?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z
	DD	FLAT:?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ
	DD	FLAT:?OperateKeystream@CTR_ModePolicy@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z
	DD	FLAT:?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z
	DD	FLAT:?CipherResynchronize@CTR_ModePolicy@CryptoPP@@MAEXPAEPBEI@Z
	DD	FLAT:?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ
	DD	FLAT:?SeekToIteration@CTR_ModePolicy@CryptoPP@@MAEX_K@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	FLAT:?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ
	DD	FLAT:?IncrementCounterBy256@CTR_ModePolicy@CryptoPP@@MAEXXZ
	DD	FLAT:?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
	DD	FLAT:?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?ProcessAndXorBlock@Enc@XTEA@CryptoPP@@UBEXPBE0PAE@Z
	DD	FLAT:?BlockSize@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@Base@XTEA@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z
	DD	FLAT:?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
	DD	FLAT:?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z
	DD	FLAT:?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ
	DD	FLAT:?OperateKeystream@CTR_ModePolicy@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z
	DD	FLAT:?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z
	DD	FLAT:?CipherResynchronize@CTR_ModePolicy@CryptoPP@@MAEXPAEPBEI@Z
	DD	FLAT:?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ
	DD	FLAT:?SeekToIteration@CTR_ModePolicy@CryptoPP@@MAEX_K@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	FLAT:?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ
	DD	FLAT:?IncrementCounterBy256@CTR_ModePolicy@CryptoPP@@MAEXXZ
	DD	FLAT:?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
	DD	FLAT:?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?ProcessAndXorBlock@Enc@Twofish@CryptoPP@@UBEXPBE0PAE@Z
	DD	FLAT:?BlockSize@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@Base@Twofish@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z
	DD	FLAT:?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
	DD	FLAT:?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z
	DD	FLAT:?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ
	DD	FLAT:?OperateKeystream@CTR_ModePolicy@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z
	DD	FLAT:?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z
	DD	FLAT:?CipherResynchronize@CTR_ModePolicy@CryptoPP@@MAEXPAEPBEI@Z
	DD	FLAT:?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ
	DD	FLAT:?SeekToIteration@CTR_ModePolicy@CryptoPP@@MAEX_K@Z
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vftable'
	DD	FLAT:??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	FLAT:?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ
	DD	FLAT:?IncrementCounterBy256@CTR_ModePolicy@CryptoPP@@MAEXXZ
	DD	FLAT:?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
	DD	FLAT:?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	FLAT:?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?ProcessAndXorBlock@Base@Camellia@CryptoPP@@UBEXPBE0PAE@Z
	DD	FLAT:?BlockSize@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AdvancedProcessBlocks@BlockTransformation@CryptoPP@@UBEIPBE0PAEII@Z
CONST	ENDS
;	COMDAT ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vftable'
	DD	FLAT:??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@Base@Camellia@CryptoPP@@UAEXPBEIABVNameValuePairs@3@@Z
CONST	ENDS
;	COMDAT ??_7AutoSeededRandomPool@CryptoPP@@6B@
CONST	SEGMENT
??_7AutoSeededRandomPool@CryptoPP@@6B@ DD FLAT:??_R4AutoSeededRandomPool@CryptoPP@@6B@ ; CryptoPP::AutoSeededRandomPool::`vftable'
	DD	FLAT:??_EAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomPool@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomPool@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@RandomNumberGenerator@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomPool@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
CONST	ENDS
;	COMDAT ??_7StringSource@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7StringSource@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4StringSource@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSource::`vftable'
	DD	FLAT:??_EStringSource@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7StringSource@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7StringSource@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4StringSource@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSource::`vftable'
	DD	FLAT:??_EStringSource@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@Filter@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@Filter@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@Filter@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@Filter@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@Filter@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@Filter@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UBEPBVBufferedTransformation@2@XZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UAEPAVBufferedTransformation@2@XZ
	DD	FLAT:?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?NewDefaultAttachment@Filter@CryptoPP@@MBEPAVBufferedTransformation@2@XZ
	DD	FLAT:?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z
	DD	FLAT:?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z
	DD	FLAT:?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z
	DD	FLAT:?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
	DD	FLAT:??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vftable'
	DD	FLAT:??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@Filter@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@Filter@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@Filter@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@Filter@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@Filter@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@Filter@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UBEPBVBufferedTransformation@2@XZ
	DD	FLAT:?AttachedTransformation@Filter@CryptoPP@@UAEPAVBufferedTransformation@2@XZ
	DD	FLAT:?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?NewDefaultAttachment@Filter@CryptoPP@@MBEPAVBufferedTransformation@2@XZ
	DD	FLAT:?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ
	DD	FLAT:?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z
	DD	FLAT:?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z
	DD	FLAT:?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z
	DD	FLAT:?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7StringStore@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7StringStore@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4StringStore@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringStore::`vftable'
	DD	FLAT:??_EStringStore@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7StringStore@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7StringStore@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4StringStore@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringStore::`vftable'
	DD	FLAT:??_EStringStore@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@BufferedTransformation@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@BufferedTransformation@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@Store@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@Store@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@StringStore@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@StringStore@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ
	DD	FLAT:?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?StoreInitialize@StringStore@CryptoPP@@EAEXABVNameValuePairs@2@@Z
CONST	ENDS
;	COMDAT ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
CONST	SEGMENT
??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ DD FLAT:??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
	DD	FLAT:??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?GetMaxWaitObjectCount@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?GetWaitObjects@BufferedTransformation@CryptoPP@@UAEXAAVWaitObjectContainer@2@ABVCallStack@2@@Z
CONST	ENDS
;	COMDAT ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
CONST	SEGMENT
??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ DD FLAT:??_R4?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@ ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vftable'
	DD	FLAT:??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
	DD	FLAT:?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z
	DD	FLAT:?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
	DD	FLAT:?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	FLAT:?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
	DD	FLAT:?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z
	DD	FLAT:?Initialize@BufferedTransformation@CryptoPP@@UAEXABVNameValuePairs@2@H@Z
	DD	FLAT:?Flush@BufferedTransformation@CryptoPP@@UAE_N_NH0@Z
	DD	FLAT:?MessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NH_N@Z
	DD	FLAT:?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z
	DD	FLAT:?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ
	DD	FLAT:?MaxRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?AnyRetrievable@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIPAEI@Z
	DD	FLAT:?Get@BufferedTransformation@CryptoPP@@UAEIAAE@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIPAEI@Z
	DD	FLAT:?Peek@BufferedTransformation@CryptoPP@@UBEIAAE@Z
	DD	FLAT:?Skip@BufferedTransformation@CryptoPP@@UAE_K_K@Z
	DD	FLAT:?TotalBytesRetrievable@BufferedTransformation@CryptoPP@@UBE_KXZ
	DD	FLAT:?NumberOfMessages@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?AnyMessages@BufferedTransformation@CryptoPP@@UBE_NXZ
	DD	FLAT:?GetNextMessage@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?SkipMessages@BufferedTransformation@CryptoPP@@UAEII@Z
	DD	FLAT:?SkipAll@BufferedTransformation@CryptoPP@@UAEXXZ
	DD	FLAT:?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
	DD	FLAT:?ChannelCreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAI@Z
	DD	FLAT:?ChannelPut2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
	DD	FLAT:?ChannelPutModifiable2@BufferedTransformation@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAEIH_N@Z
	DD	FLAT:?ChannelFlush@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_NH1@Z
	DD	FLAT:?ChannelMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
	DD	FLAT:?SetRetrievalChannel@BufferedTransformation@CryptoPP@@UAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	FLAT:?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ
	DD	FLAT:?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ
	DD	FLAT:?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	FLAT:?Attach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCI@AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	FLAT:?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
	DD	FLAT:?GenerateByte@RandomNumberGenerator@CryptoPP@@UAEEXZ
	DD	FLAT:?GenerateBit@RandomNumberGenerator@CryptoPP@@UAEIXZ
	DD	FLAT:?GenerateWord32@RandomNumberGenerator@CryptoPP@@UAEIII@Z
	DD	FLAT:?GenerateBlock@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEI@Z
	DD	FLAT:?DiscardBytes@RandomNumberGenerator@CryptoPP@@UAEXI@Z
	DD	FLAT:?GenerateIntoBufferedTransformation@RandomNumberGenerator@CryptoPP@@UAEXAAVBufferedTransformation@2@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_K@Z
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WBI@AEPAXI@Z
	DD	FLAT:?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
	DD	FLAT:?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ
	DD	FLAT:?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z
	DD	FLAT:?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ
	DD	FLAT:?OperateKeystream@CTR_ModePolicy@CryptoPP@@MAEXW4KeystreamOperation@2@PAEPBEI@Z
	DD	FLAT:?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z
	DD	FLAT:?CipherResynchronize@CTR_ModePolicy@CryptoPP@@MAEXPAEPBEI@Z
	DD	FLAT:?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ
	DD	FLAT:?SeekToIteration@CTR_ModePolicy@CryptoPP@@MAEX_K@Z
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z
	DD	FLAT:?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	FLAT:?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	FLAT:?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
	DD	FLAT:?ProcessData@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?ProcessLastBlock@StreamTransformation@CryptoPP@@UAEXPAEPBEI@Z
	DD	FLAT:?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
	DD	FLAT:?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?Seek@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEX_K@Z
	DD	FLAT:?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
	DD	FLAT:?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
CONST	SEGMENT
??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ DD FLAT:??_R4?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@ ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vftable'
	DD	FLAT:??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
	DD	FLAT:?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
	DD	FLAT:?SetKey@SimpleKeyingInterface@CryptoPP@@UAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
	DD	FLAT:?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
	DD	FLAT:?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
	DD	FLAT:?Resynchronize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAEXPBEH@Z
	DD	FLAT:?GetNextIV@SimpleKeyingInterface@CryptoPP@@UAEXAAVRandomNumberGenerator@2@PAE@Z
	DD	FLAT:?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
	DD	FLAT:?UncheckedSetKey@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@MAEXPBEIABVNameValuePairs@2@@Z
	DD	FLAT:?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	FLAT:?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ
	DD	FLAT:?IncrementCounterBy256@CTR_ModePolicy@CryptoPP@@MAEXXZ
	DD	FLAT:?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
	DD	FLAT:?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
CONST	ENDS
;	COMDAT ??_C@_03LECCGOIK@CTR@
CONST	SEGMENT
??_C@_03LECCGOIK@CTR@ DB 'CTR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5c@
CONST	SEGMENT
??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5c@ DB 'CipherModeBas'
	DB	'e: feedback size cannot be specified for this cipher mode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@
CONST	SEGMENT
??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ DD FLAT:??_R4?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`vftable'
	DD	FLAT:??_E?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z
	DD	FLAT:?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40
xdata$x	SEGMENT
__CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40 DD 00H
	DD	FLAT:??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
xdata$x	SEGMENT
__CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@ DD 03H
	DD	FLAT:__CT??_R0?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@@8??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
xdata$x	SEGMENT
__TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@ DD 00H
	DD	FLAT:??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@
CONST	SEGMENT
??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@ DB 'AlgorithmParame'
	DB	'tersBase: parameter "', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IAABKFFP@?$CC?5not?5used@
CONST	SEGMENT
??_C@_0L@IAABKFFP@?$CC?5not?5used@ DB '" not used', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7AlgorithmParametersBase@CryptoPP@@6B@
CONST	SEGMENT
??_7AlgorithmParametersBase@CryptoPP@@6B@ DD FLAT:??_R4AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::`vftable'
	DD	FLAT:??_EAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
CONST	SEGMENT
??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ DD FLAT:??_R4ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@ ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`vftable'
	DD	FLAT:??_EParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R0H@8
data$r	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
data$r	ENDS
;	COMDAT ??_C@_0M@JMHEFFAI@InputBuffer@
CONST	SEGMENT
??_C@_0M@JMHEFFAI@InputBuffer@ DB 'InputBuffer', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GKFFKNHD@FeedbackSize@
CONST	SEGMENT
??_C@_0N@GKFFKNHD@FeedbackSize@ DB 'FeedbackSize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKOCCFHC@XTEA@
CONST	SEGMENT
??_C@_04OKOCCFHC@XTEA@ DB 'XTEA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DABDIDEC@Twofish@
CONST	SEGMENT
??_C@_07DABDIDEC@Twofish@ DB 'Twofish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGCCLPME@Camellia@
CONST	SEGMENT
??_C@_08EGCCLPME@Camellia@ DB 'Camellia', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@
CONST	SEGMENT
??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@ DB 'BufferedTransf'
	DB	'ormation: this object is not attachable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@
CONST	SEGMENT
??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@ DB 'RandomNumberGen'
	DB	'erator: IncorporateEntropy not implemented', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@
CONST	SEGMENT
??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@ DB ': this obj'
	DB	'ect doesn''t support resynchronization', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CIFAGBMG@unknown@
CONST	SEGMENT
??_C@_07CIFAGBMG@unknown@ DB 'unknown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@
CONST	SEGMENT
??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@ DB 'Clone('
	DB	') is not implemented yet.', 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVNotImplemented@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVNotImplemented@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVNotImplemented@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NotImplemented `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNotImplemented@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVNotImplemented@CryptoPP@@
xdata$x	SEGMENT
__CTA3?AVNotImplemented@CryptoPP@@ DD 03H
	DD	FLAT:__CT??_R0?AVNotImplemented@CryptoPP@@@8??0NotImplemented@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVNotImplemented@CryptoPP@@
xdata$x	SEGMENT
__TI3?AVNotImplemented@CryptoPP@@ DD 00H
	DD	FLAT:??1NotImplemented@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVNotImplemented@CryptoPP@@
xdata$x	ENDS
;	COMDAT __CTA3?AVInvalidArgument@CryptoPP@@
xdata$x	SEGMENT
__CTA3?AVInvalidArgument@CryptoPP@@ DD 03H
	DD	FLAT:__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVInvalidArgument@CryptoPP@@
xdata$x	SEGMENT
__TI3?AVInvalidArgument@CryptoPP@@ DD 00H
	DD	FLAT:??1InvalidArgument@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVInvalidArgument@CryptoPP@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVException@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0Exception@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVException@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVException@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::Exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVException@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVInvalidArgument@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVInvalidArgument@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVInvalidArgument@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::InvalidArgument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVInvalidArgument@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48
xdata$x	SEGMENT
__CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48 DD 00H
	DD	FLAT:??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	030H
	DD	FLAT:??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8
data$r	SEGMENT
??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8 DD FLAT:??_7type_info@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVValueTypeMismatch@NameValuePairs@CryptoPP@@', 00H
data$r	ENDS
;	COMDAT __CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
xdata$x	SEGMENT
__CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@ DD 04H
	DD	FLAT:__CT??_R0?AVValueTypeMismatch@NameValuePairs@CryptoPP@@@8??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z48
	DD	FLAT:__CT??_R0?AVInvalidArgument@CryptoPP@@@8??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVException@CryptoPP@@@8??0Exception@CryptoPP@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
xdata$x	SEGMENT
__TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@ DD 00H
	DD	FLAT:??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
xdata$x	ENDS
;	COMDAT ??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@
CONST	SEGMENT
??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@ DB 'NameValuePair'
	DB	's: type mismatch for ''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@
CONST	SEGMENT
??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@ DB ''', stored ''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@
CONST	SEGMENT
??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@ DB ''', trying to retr'
	DB	'ieve ''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01GEODFPGF@?8@
CONST	SEGMENT
??_C@_01GEODFPGF@?8@ DB '''', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
CONST	SEGMENT
??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ DD FLAT:??_R4ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@ ; CryptoPP::NameValuePairs::ValueTypeMismatch::`vftable'
	DD	FLAT:??_EValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7NotImplemented@CryptoPP@@6B@
CONST	SEGMENT
??_7NotImplemented@CryptoPP@@6B@ DD FLAT:??_R4NotImplemented@CryptoPP@@6B@ ; CryptoPP::NotImplemented::`vftable'
	DD	FLAT:??_ENotImplemented@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7InvalidArgument@CryptoPP@@6B@
CONST	SEGMENT
??_7InvalidArgument@CryptoPP@@6B@ DD FLAT:??_R4InvalidArgument@CryptoPP@@6B@ ; CryptoPP::InvalidArgument::`vftable'
	DD	FLAT:??_EInvalidArgument@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7Exception@CryptoPP@@6B@
CONST	SEGMENT
??_7Exception@CryptoPP@@6B@ DD FLAT:??_R4Exception@CryptoPP@@6B@ ; CryptoPP::Exception::`vftable'
	DD	FLAT:??_EException@CryptoPP@@UAEPAXI@Z
	DD	FLAT:?what@Exception@CryptoPP@@UBEPBDXZ
CONST	ENDS
;	COMDAT ?length@?$prime_list_template@I@detail@unordered@boost@@2HB
CONST	SEGMENT
?length@?$prime_list_template@I@detail@unordered@boost@@2HB DD 026H ; boost::unordered::detail::prime_list_template<unsigned int>::length
CONST	ENDS
;	COMDAT ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB
CONST	SEGMENT
?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB DD 011H ; boost::unordered::detail::prime_list_template<unsigned int>::value
	DD	01dH
	DD	025H
	DD	035H
	DD	043H
	DD	04fH
	DD	061H
	DD	083H
	DD	0c1H
	DD	0101H
	DD	0185H
	DD	0209H
	DD	0301H
	DD	0407H
	DD	0607H
	DD	0805H
	DD	0c07H
	DD	01807H
	DD	03001H
	DD	06011H
	DD	0c005H
	DD	01800dH
	DD	030005H
	DD	060019H
	DD	0c0001H
	DD	0180005H
	DD	030000bH
	DD	060000dH
	DD	0c00005H
	DD	01800013H
	DD	03000005H
	DD	06000017H
	DD	0c000013H
	DD	018000005H
	DD	030000059H
	DD	060000005H
	DD	0c0000001H
	DD	0fffffffbH
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z$0
__ehfuncinfo$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z$0
__ehfuncinfo$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$26 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$26
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$1
__ehfuncinfo$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ$0
__ehfuncinfo$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ$0
__ehfuncinfo$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1
__ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ$0
__ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1
__ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ$0
__ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
__ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1
__ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ$0
__ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1RandomPool@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1RandomPool@CryptoPP@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1RandomPool@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$14
	DD	00H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$2
__ehfuncinfo$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$0
__ehfuncinfo$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$0
__ehfuncinfo$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0StringStore@CryptoPP@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$2
__ehfuncinfo$??0StringStore@CryptoPP@@QAE@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0StringStore@CryptoPP@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z$0
__ehfuncinfo$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ$1
__ehfuncinfo$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z$0
__ehfuncinfo$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CipherModeBase@CryptoPP@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CipherModeBase@CryptoPP@@IAE@XZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0CipherModeBase@CryptoPP@@IAE@XZ$0
__ehfuncinfo$??0CipherModeBase@CryptoPP@@IAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CipherModeBase@CryptoPP@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z$1
__ehfuncinfo$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z$0
__ehfuncinfo$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$2
__ehfuncinfo$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z$0
__ehfuncinfo$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z$1
__ehfuncinfo$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z$0
__ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$0
__unwindtable$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$2
__ehfuncinfo$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$0
__ehfuncinfo$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z$0
__ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$0
__unwindtable$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$2
__ehfuncinfo$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$0
__ehfuncinfo$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z$0
__ehfuncinfo$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z$0
__ehfuncinfo$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z$0
__ehfuncinfo$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z$1
__ehfuncinfo$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$9
	DD	07H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$10
	DD	08H
	DD	FLAT:__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$11
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$5
	DD	04H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$9
	DD	07H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$10
	DD	08H
	DD	FLAT:__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$11
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$17
__ehfuncinfo$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1EterPackPolicy_CSHybridCrypt@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1EterPackPolicy_CSHybridCrypt@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1EterPackPolicy_CSHybridCrypt@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z$0
__ehfuncinfo$??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Base@XTEA@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1Base@XTEA@CryptoPP@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Base@XTEA@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Base@XTEA@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Base@XTEA@CryptoPP@@QAE@XZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Base@XTEA@CryptoPP@@QAE@XZ$0
__ehfuncinfo$??0Base@XTEA@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Base@XTEA@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z$1
__ehfuncinfo$??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Base@Twofish@CryptoPP@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1Base@Twofish@CryptoPP@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1Base@Twofish@CryptoPP@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Base@Twofish@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Base@Twofish@CryptoPP@@QAE@XZ$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Base@Twofish@CryptoPP@@QAE@XZ$0
	DD	01H
	DD	FLAT:__unwindfunclet$??0Base@Twofish@CryptoPP@@QAE@XZ$1
__ehfuncinfo$??0Base@Twofish@CryptoPP@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0Base@Twofish@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z$0
__ehfuncinfo$??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Base@Camellia@CryptoPP@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Base@Camellia@CryptoPP@@QAE@XZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Base@Camellia@CryptoPP@@QAE@XZ$0
__ehfuncinfo$??0Base@Camellia@CryptoPP@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0Base@Camellia@CryptoPP@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z$0
__ehfuncinfo$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z$0
__ehfuncinfo$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z$0
__ehfuncinfo$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z$0
__ehfuncinfo$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$1
__ehfuncinfo$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ$0
__ehfuncinfo$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z$0
__ehfuncinfo$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@CryptoPP@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@CryptoPP@@QAE@ABV01@@Z$0
__ehfuncinfo$??0Exception@CryptoPP@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@CryptoPP@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z$0
__ehfuncinfo$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odspy
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{36}', COMDAT
  00000	83 e9 24	 sub	 ecx, 36			; 00000024H
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{36}'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 28	 sub	 ecx, 40			; 00000028H
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 18	 sub	 ecx, 24			; 00000018H
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{36}', COMDAT
  00000	83 e9 24	 sub	 ecx, 36			; 00000024H
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{36}'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 28	 sub	 ecx, 40			; 00000028H
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 18	 sub	 ecx, 24			; 00000018H
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{36}', COMDAT
  00000	83 e9 24	 sub	 ecx, 36			; 00000024H
  00003	e9 00 00 00 00	 jmp	 ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@WCE@BE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; [thunk]:CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName`adjustor{36}'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 28	 sub	 ecx, 40			; 00000028H
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WCI@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 18	 sub	 ecx, 24			; 00000018H
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@WBI@AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
??_E?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::SourceTemplate<CryptoPP::StringStore>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_EStringSource@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_EStringSource@CryptoPP@@W3AEPAXI@Z PROC		; [thunk]:CryptoPP::StringSource::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_EStringSource@CryptoPP@@UAEPAXI@Z
??_EStringSource@CryptoPP@@W3AEPAXI@Z ENDP		; [thunk]:CryptoPP::StringSource::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_EStringStore@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_EStringStore@CryptoPP@@W3AEPAXI@Z PROC		; [thunk]:CryptoPP::StringStore::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_EStringStore@CryptoPP@@UAEPAXI@Z
??_EStringStore@CryptoPP@@W3AEPAXI@Z ENDP		; [thunk]:CryptoPP::StringStore::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z
??_E?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCI@AEPAXI@Z
_TEXT	SEGMENT
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCI@AEPAXI@Z PROC ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor', COMDAT
  00000	83 e9 28	 sub	 ecx, 40			; 00000028H
  00003	e9 00 00 00 00	 jmp	 ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WCI@AEPAXI@Z ENDP ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WBI@AEPAXI@Z
_TEXT	SEGMENT
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WBI@AEPAXI@Z PROC ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor', COMDAT
  00000	83 e9 18	 sub	 ecx, 24			; 00000018H
  00003	e9 00 00 00 00	 jmp	 ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@WBI@AEPAXI@Z ENDP ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
??_E?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@W3AEPAXI@Z
_TEXT	SEGMENT
??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@W3AEPAXI@Z PROC ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z
??_E?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@W3AEPAXI@Z ENDP ; [thunk]:CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple
;	COMDAT ??$?0ABK$$Z$$V@?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
_this$ = -16						; size = 4
___formal$ = -12					; size = 1
___formal$ = -8						; size = 1
$T3 = -2						; size = 1
$T4 = -1						; size = 1
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABK$$Z$$V@?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z PROC ; std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo><unsigned long const &>, COMDAT
; _this$ = ecx

; 986  :     : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	57		 push	 edi
  00007	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0000a	33 c0		 xor	 eax, eax
  0000c	88 45 ff	 mov	 BYTE PTR $T4[ebp], al
  0000f	33 c0		 xor	 eax, eax
  00011	88 45 fe	 mov	 BYTE PTR $T3[ebp], al
  00014	8a 45 ff	 mov	 al, BYTE PTR $T4[ebp]
  00017	88 45 f8	 mov	 BYTE PTR ___formal$[ebp], al
  0001a	8a 45 fe	 mov	 al, BYTE PTR $T3[ebp]
  0001d	88 45 f4	 mov	 BYTE PTR ___formal$[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00020	8d 45 0c	 lea	 eax, DWORD PTR __Val1$[ebp]
  00023	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple

; 790  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

  00026	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00029	8b 00		 mov	 eax, DWORD PTR [eax]
  0002b	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax

; 980  :     : first(_STD get<_Indexes1>(_STD move(_Val1))...), second(_STD get<_Indexes2>(_STD move(_Val2))...) {}

  0002e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 4d e8	 mov	 ecx, DWORD PTR $T1[ebp]
  00034	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00036	89 08		 mov	 DWORD PTR [eax], ecx
  00038	6a 09		 push	 9
  0003a	59		 pop	 ecx
  0003b	33 c0		 xor	 eax, eax
  0003d	8b 7d f0	 mov	 edi, DWORD PTR _this$[ebp]
  00040	83 c7 04	 add	 edi, 4
  00043	f3 ab		 rep stosd
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 04	 add	 ecx, 4
  0004b	e8 00 00 00 00	 call	 ??0SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ

; 986  :     : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	5f		 pop	 edi
  00054	c9		 leave
  00055	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABK$$Z$$V@?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo><unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$construct@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
$T1 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
_this$ = -8						; size = 4
$T4 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::construct<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >, COMDAT

; 700  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0000c	8b 45 18	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  0000f	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00012	51		 push	 ecx
  00013	89 65 e8	 mov	 DWORD PTR _this$[ebp], esp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00016	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  00019	89 45 fc	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0001c	51		 push	 ecx
  0001d	89 65 f8	 mov	 DWORD PTR _this$[ebp], esp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

  00020	8b 45 fc	 mov	 eax, DWORD PTR $T4[ebp]
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
  00025	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0002a	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  0002d	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00030	8b 45 f4	 mov	 eax, DWORD PTR $T3[ebp]
  00033	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00036	50		 push	 eax
  00037	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  0003a	e8 00 00 00 00	 call	 ??$?0ABK$$Z$$V@?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABK@1@V?$tuple@$$V@1@@Z ; std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo><unsigned long const &>

; 702  :     }

  0003f	c9		 leave
  00040	c3		 ret	 0
??$construct@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::construct<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
__Max_possible$1 = -40					; size = 4
___formal$ = -36					; size = 4
_this$ = -32						; size = 4
$T2 = -28						; size = 4
_v$ = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
$T5 = -12						; size = 4
_this$ = -8						; size = 4
__Overflow_is_possible$6 = -1				; size = 1
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::create_node, COMDAT
; _this$ = ecx

; 1983 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	57		 push	 edi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  0000a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 45 dc	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00012	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$6[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00016	c7 45 d8 55 55
	55 05		 mov	 DWORD PTR __Max_possible$1[ebp], 89478485 ; 05555555H

; 60   :         if (_Count > _Max_possible) {

  0001d	33 c0		 xor	 eax, eax
  0001f	40		 inc	 eax
  00020	3d 55 55 55 05	 cmp	 eax, 89478485		; 05555555H
  00025	76 05		 jbe	 SHORT $LN6@create_nod

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00027	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN6@create_nod:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0002c	33 c0		 xor	 eax, eax
  0002e	40		 inc	 eax
  0002f	6b c0 30	 imul	 eax, eax, 48
  00032	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax

; 686  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00035	ff 75 f0	 push	 DWORD PTR $T4[ebp]
  00038	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003d	59		 pop	 ecx
  0003e	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp]
  00047	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1986 :         new ((void*)boost::to_address(node_)) node();

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00050	89 45 e8	 mov	 DWORD PTR _v$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  00053	8b 45 e8	 mov	 eax, DWORD PTR _v$[ebp]
  00056	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00059	8b 45 e4	 mov	 eax, DWORD PTR $T2[ebp]
  0005c	89 45 f4	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2579 :         ptr_bucket() : next_(0) {}

  0005f	8b 45 f4	 mov	 eax, DWORD PTR $T5[ebp]
  00062	83 20 00	 and	 DWORD PTR [eax], 0

; 4865 :         ptr_node() : bucket_base(), bucket_info_(0) {}

  00065	8b 45 f4	 mov	 eax, DWORD PTR $T5[ebp]
  00068	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  0006c	8b 45 f4	 mov	 eax, DWORD PTR $T5[ebp]
  0006f	83 c0 08	 add	 eax, 8
  00072	89 45 e0	 mov	 DWORD PTR _this$[ebp], eax

; 754  :         value_base() : data_() {}

  00075	6a 0a		 push	 10			; 0000000aH
  00077	59		 pop	 ecx
  00078	33 c0		 xor	 eax, eax
  0007a	8b 7d e0	 mov	 edi, DWORD PTR _this$[ebp]
  0007d	f3 ab		 rep stosd
$LN9@create_nod:

; 1987 :       }

  0007f	5f		 pop	 edi
  00080	c9		 leave
  00081	c3		 ret	 0
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::create_node
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
___formal$ = -20					; size = 4
$T1 = -16						; size = 4
__Ptr$ = -12						; size = 4
_v$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >, COMDAT
; _this$ = ecx

; 1975 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1976 :         if (node_) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 31		 je	 SHORT $LN3@node_const

; 1977 :           boost::unordered::detail::func::destroy(boost::to_address(node_));

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00018	89 45 f8	 mov	 DWORD PTR _v$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _v$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 1978 :           node_allocator_traits::deallocate(alloc_, node_, 1);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00027	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 00		 mov	 eax, DWORD PTR [eax]
  0002f	89 45 ec	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	33 c0		 xor	 eax, eax
  00034	40		 inc	 eax
  00035	6b c0 30	 imul	 eax, eax, 48
  00038	50		 push	 eax
  00039	ff 75 f4	 push	 DWORD PTR __Ptr$[ebp]
  0003c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00041	59		 pop	 ecx
  00042	59		 pop	 ecx
$LN3@node_const:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 1980 :       }

  00043	c9		 leave
  00044	c3		 ret	 0
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$construct@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_this$ = -52						; size = 4
$T1 = -48						; size = 4
$T2 = -44						; size = 4
$T3 = -40						; size = 4
$T4 = -36						; size = 4
$T5 = -32						; size = 4
_this$ = -28						; size = 4
$T6 = -24						; size = 4
$T7 = -20						; size = 4
___formal$ = -16					; size = 1
___formal$ = -12					; size = 1
___formal$ = -8						; size = 1
$T8 = -3						; size = 1
$T9 = -2						; size = 1
$T10 = -1						; size = 1
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::construct<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >, COMDAT

; 700  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	57		 push	 edi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000a	89 45 ec	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0000d	8b 45 18	 mov	 eax, DWORD PTR _<_Args_2>$[ebp]
  00010	89 45 d0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00013	8d 45 fd	 lea	 eax, DWORD PTR $T8[ebp]
  00016	89 45 cc	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00019	8b 45 14	 mov	 eax, DWORD PTR _<_Args_1>$[ebp]
  0001c	89 45 e8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  0001f	8d 45 dc	 lea	 eax, DWORD PTR $T4[ebp]
  00022	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

  00025	8b 45 e8	 mov	 eax, DWORD PTR $T6[ebp]
  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0002f	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00032	89 45 e0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00035	8b 45 e0	 mov	 eax, DWORD PTR $T5[ebp]
  00038	8a 00		 mov	 al, BYTE PTR [eax]
  0003a	88 45 f8	 mov	 BYTE PTR ___formal$[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple

; 986  :     : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

  0003d	33 c0		 xor	 eax, eax
  0003f	88 45 ff	 mov	 BYTE PTR $T10[ebp], al
  00042	33 c0		 xor	 eax, eax
  00044	88 45 fe	 mov	 BYTE PTR $T9[ebp], al
  00047	8a 45 ff	 mov	 al, BYTE PTR $T10[ebp]
  0004a	88 45 f4	 mov	 BYTE PTR ___formal$[ebp], al
  0004d	8a 45 fe	 mov	 al, BYTE PTR $T9[ebp]
  00050	88 45 f0	 mov	 BYTE PTR ___formal$[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00053	8d 45 dc	 lea	 eax, DWORD PTR $T4[ebp]
  00056	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple

; 790  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

  00059	8b 45 d8	 mov	 eax, DWORD PTR $T3[ebp]
  0005c	8b 00		 mov	 eax, DWORD PTR [eax]
  0005e	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax

; 980  :     : first(_STD get<_Indexes1>(_STD move(_Val1))...), second(_STD get<_Indexes2>(_STD move(_Val2))...) {}

  00061	8b 45 ec	 mov	 eax, DWORD PTR $T7[ebp]
  00064	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp]
  00067	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00069	89 08		 mov	 DWORD PTR [eax], ecx
  0006b	6a 08		 push	 8
  0006d	59		 pop	 ecx
  0006e	33 c0		 xor	 eax, eax
  00070	8b 7d ec	 mov	 edi, DWORD PTR $T7[ebp]
  00073	83 c7 04	 add	 edi, 4
  00076	f3 ab		 rep stosd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 702  :     }

  00078	5f		 pop	 edi
  00079	c9		 leave
  0007a	c3		 ret	 0
??$construct@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::construct<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
__Max_possible$1 = -40					; size = 4
___formal$ = -36					; size = 4
_this$ = -32						; size = 4
$T2 = -28						; size = 4
_v$ = -24						; size = 4
$T3 = -20						; size = 4
$T4 = -16						; size = 4
$T5 = -12						; size = 4
_this$ = -8						; size = 4
__Overflow_is_possible$6 = -1				; size = 1
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::create_node, COMDAT
; _this$ = ecx

; 1983 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	57		 push	 edi
  00007	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  0000a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 45 dc	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00012	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$6[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00016	c7 45 d8 5d 74
	d1 05		 mov	 DWORD PTR __Max_possible$1[ebp], 97612893 ; 05d1745dH

; 60   :         if (_Count > _Max_possible) {

  0001d	33 c0		 xor	 eax, eax
  0001f	40		 inc	 eax
  00020	3d 5d 74 d1 05	 cmp	 eax, 97612893		; 05d1745dH
  00025	76 05		 jbe	 SHORT $LN6@create_nod

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00027	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN6@create_nod:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0002c	33 c0		 xor	 eax, eax
  0002e	40		 inc	 eax
  0002f	6b c0 2c	 imul	 eax, eax, 44
  00032	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax

; 686  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  00035	ff 75 f0	 push	 DWORD PTR $T4[ebp]
  00038	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003d	59		 pop	 ecx
  0003e	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 1985 :         node_ = node_allocator_traits::allocate(alloc_, 1);

  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp]
  00047	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1986 :         new ((void*)boost::to_address(node_)) node();

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00050	89 45 e8	 mov	 DWORD PTR _v$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  00053	8b 45 e8	 mov	 eax, DWORD PTR _v$[ebp]
  00056	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00059	8b 45 e4	 mov	 eax, DWORD PTR $T2[ebp]
  0005c	89 45 f4	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2579 :         ptr_bucket() : next_(0) {}

  0005f	8b 45 f4	 mov	 eax, DWORD PTR $T5[ebp]
  00062	83 20 00	 and	 DWORD PTR [eax], 0

; 4865 :         ptr_node() : bucket_base(), bucket_info_(0) {}

  00065	8b 45 f4	 mov	 eax, DWORD PTR $T5[ebp]
  00068	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  0006c	8b 45 f4	 mov	 eax, DWORD PTR $T5[ebp]
  0006f	83 c0 08	 add	 eax, 8
  00072	89 45 e0	 mov	 DWORD PTR _this$[ebp], eax

; 754  :         value_base() : data_() {}

  00075	6a 09		 push	 9
  00077	59		 pop	 ecx
  00078	33 c0		 xor	 eax, eax
  0007a	8b 7d e0	 mov	 edi, DWORD PTR _this$[ebp]
  0007d	f3 ab		 rep stosd
$LN9@create_nod:

; 1987 :       }

  0007f	5f		 pop	 edi
  00080	c9		 leave
  00081	c3		 ret	 0
?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::create_node
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
___formal$ = -20					; size = 4
$T1 = -16						; size = 4
__Ptr$ = -12						; size = 4
_v$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >, COMDAT
; _this$ = ecx

; 1975 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1976 :         if (node_) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 31		 je	 SHORT $LN3@node_const

; 1977 :           boost::unordered::detail::func::destroy(boost::to_address(node_));

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00018	89 45 f8	 mov	 DWORD PTR _v$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _v$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 1978 :           node_allocator_traits::deallocate(alloc_, node_, 1);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00027	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 00		 mov	 eax, DWORD PTR [eax]
  0002f	89 45 ec	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	33 c0		 xor	 eax, eax
  00034	40		 inc	 eax
  00035	6b c0 2c	 imul	 eax, eax, 44
  00038	50		 push	 eax
  00039	ff 75 f4	 push	 DWORD PTR __Ptr$[ebp]
  0003c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00041	59		 pop	 ecx
  00042	59		 pop	 ecx
$LN3@node_const:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 1980 :       }

  00043	c9		 leave
  00044	c3		 ret	 0
??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAEV?$allocator@E@std@@@std@@YAPAEQAE0PAEAAV?$allocator@E@0@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__UFirst$ = -8						; size = 4
__ULast$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAEV?$allocator@E@std@@@std@@YAPAEQAE0PAEAAV?$allocator@E@0@@Z PROC ; std::_Uninitialized_move<unsigned char *,std::allocator<unsigned char> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR __ULast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00018	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  0001b	ff 75 fc	 push	 DWORD PTR __ULast$[ebp]
  0001e	ff 75 f8	 push	 DWORD PTR __UFirst$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z ; std::_Copy_memmove<unsigned char *,unsigned char *>
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1694 :         return _Dest + (_ULast - _UFirst);

  00029	8b 45 fc	 mov	 eax, DWORD PTR __ULast$[ebp]
  0002c	2b 45 f8	 sub	 eax, DWORD PTR __UFirst$[ebp]
  0002f	03 45 10	 add	 eax, DWORD PTR __Dest$[ebp]

; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1699 :         }
; 1700 : 
; 1701 :         return _Backout._Release();
; 1702 :     }
; 1703 : }

  00032	c9		 leave
  00033	c3		 ret	 0
??$_Uninitialized_move@PAEV?$allocator@E@std@@@std@@YAPAEQAE0PAEAAV?$allocator@E@0@@Z ENDP ; std::_Uninitialized_move<unsigned char *,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
___formal$ = -20					; size = 4
$T1 = -16						; size = 4
__Ptr$ = -12						; size = 4
_v$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >, COMDAT
; _this$ = ecx

; 2013 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2014 :         if (node_) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 31		 je	 SHORT $LN3@node_tmp

; 2015 :           BOOST_UNORDERED_CALL_DESTROY(
; 2016 :             node_allocator_traits, alloc_, node_->value_ptr());
; 2017 :           boost::unordered::detail::func::destroy(boost::to_address(node_));

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00018	89 45 f8	 mov	 DWORD PTR _v$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _v$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2018 :           node_allocator_traits::deallocate(alloc_, node_, 1);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00027	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 00		 mov	 eax, DWORD PTR [eax]
  0002f	89 45 ec	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00032	33 c0		 xor	 eax, eax
  00034	40		 inc	 eax
  00035	6b c0 2c	 imul	 eax, eax, 44
  00038	50		 push	 eax
  00039	ff 75 f4	 push	 DWORD PTR __Ptr$[ebp]
  0003c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00041	59		 pop	 ecx
  00042	59		 pop	 ecx
$LN3@node_tmp:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2020 :       }

  00043	c9		 leave
  00044	c3		 ret	 0
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
___formal$ = -28					; size = 4
$T1 = -24						; size = 4
___formal$ = -20					; size = 4
__Ptr$ = -16						; size = 4
_v$ = -12						; size = 4
__Ptr$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ PROC ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >, COMDAT
; _this$ = ecx

; 2013 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2014 :         if (node_) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	74 60		 je	 SHORT $LN3@node_tmp

; 4869 :         value_type* value_ptr() { return value_base_.value_ptr(); }

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00018	83 c0 08	 add	 eax, 8

; 2015 :           BOOST_UNORDERED_CALL_DESTROY(

  0001b	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	89 45 ec	 mov	 DWORD PTR ___formal$[ebp], eax
  00026	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00029	e8 00 00 00 00	 call	 ??1?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@QAE@XZ
  0002e	33 c0		 xor	 eax, eax
  00030	83 e0 01	 and	 eax, 1
  00033	74 0c		 je	 SHORT $LN8@node_tmp
  00035	6a 28		 push	 40			; 00000028H
  00037	ff 75 f8	 push	 DWORD PTR __Ptr$[ebp]
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003f	59		 pop	 ecx
  00040	59		 pop	 ecx
$LN8@node_tmp:

; 2016 :             node_allocator_traits, alloc_, node_->value_ptr());
; 2017 :           boost::unordered::detail::func::destroy(boost::to_address(node_));

  00041	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00044	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00047	89 45 f4	 mov	 DWORD PTR _v$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  0004a	8b 45 f4	 mov	 eax, DWORD PTR _v$[ebp]
  0004d	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2018 :           node_allocator_traits::deallocate(alloc_, node_, 1);

  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00056	89 45 f0	 mov	 DWORD PTR __Ptr$[ebp], eax
  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 00		 mov	 eax, DWORD PTR [eax]
  0005e	89 45 e4	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00061	33 c0		 xor	 eax, eax
  00063	40		 inc	 eax
  00064	6b c0 30	 imul	 eax, eax, 48
  00067	50		 push	 eax
  00068	ff 75 f0	 push	 DWORD PTR __Ptr$[ebp]
  0006b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00070	59		 pop	 ecx
  00071	59		 pop	 ecx
$LN3@node_tmp:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2020 :       }

  00072	c9		 leave
  00073	c3		 ret	 0
??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ENDP ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Zero_range@PAE@std@@YAPAEQAE0@Z
_TEXT	SEGMENT
__Last_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAE@std@@YAPAEQAE0@Z PROC		; std::_Zero_range<unsigned char *>, COMDAT

; 1852 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 1853 :     char* const _First_ch = reinterpret_cast<char*>(_First);

  00005	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00008	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 1854 :     char* const _Last_ch  = reinterpret_cast<char*>(_Last);

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000e	89 45 f8	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 1855 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00011	8b 45 f8	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  00014	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  00017	50		 push	 eax
  00018	6a 00		 push	 0
  0001a	ff 75 fc	 push	 DWORD PTR __First_ch$[ebp]
  0001d	e8 00 00 00 00	 call	 _memset
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1856 :     return _Last;

  00025	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]

; 1857 : }

  00028	c9		 leave
  00029	c3		 ret	 0
??$_Zero_range@PAE@std@@YAPAEQAE0@Z ENDP		; std::_Zero_range<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Refancy@PAE$0A@@std@@YAPAEPAE@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Refancy@PAE$0A@@std@@YAPAEPAE@Z PROC		; std::_Refancy<unsigned char *,0>, COMDAT

; 261  : _Pointer _Refancy(_Pointer _Ptr) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  :     return _Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 263  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Refancy@PAE$0A@@std@@YAPAEPAE@Z ENDP		; std::_Refancy<unsigned char *,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z
_TEXT	SEGMENT
__Last_ch$ = -16					; size = 4
__Count$ = -12						; size = 4
__Dest_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z PROC		; std::_Copy_memmove<unsigned char *,unsigned char *>, COMDAT

; 4360 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 4361 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 4362 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 f0	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 4363 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f8	 mov	 DWORD PTR __Dest_ch$[ebp], eax

; 4364 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00018	8b 45 f0	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0001b	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0001e	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax

; 4365 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00021	ff 75 f4	 push	 DWORD PTR __Count$[ebp]
  00024	ff 75 fc	 push	 DWORD PTR __First_ch$[ebp]
  00027	ff 75 f8	 push	 DWORD PTR __Dest_ch$[ebp]
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4366 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00035	03 45 f4	 add	 eax, DWORD PTR __Count$[ebp]

; 4367 : }

  00038	c9		 leave
  00039	c3		 ret	 0
??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z ENDP		; std::_Copy_memmove<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\move\utility_core.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z
_TEXT	SEGMENT
_a$ = -64						; size = 8
$T2 = -56						; size = 4
_p$3 = -52						; size = 4
$T4 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
_this$8 = -32						; size = 4
$T9 = -28						; size = 4
$T10 = -24						; size = 4
$T11 = -20						; size = 4
$T12 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_alloc$ = 8						; size = 4
_k$ = 12						; size = 4
??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z PROC ; boost::unordered::detail::func::construct_node_pair<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >,unsigned long const &>, COMDAT

; 2064 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  00025	8b 45 08	 mov	 eax, DWORD PTR _alloc$[ebp]
  00028	89 45 c0	 mov	 DWORD PTR _a$[ebp], eax
  0002b	83 65 c4 00	 and	 DWORD PTR _a$[ebp+4], 0

; 2065 :           node_constructor<Alloc> a(alloc);

  0002f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2066 :           a.create_node();

  00033	8d 4d c0	 lea	 ecx, DWORD PTR _a$[ebp]
  00036	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::create_node
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple

; 854  :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

  0003b	8d 45 f3	 lea	 eax, DWORD PTR $T12[ebp]
  0003e	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\move\utility_core.hpp

; 249  :          {  return static_cast<T&&>(t);   }

  00041	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  00044	89 45 ec	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00047	8b 45 ec	 mov	 eax, DWORD PTR $T11[ebp]
  0004a	89 45 e8	 mov	 DWORD PTR $T10[ebp], eax
  0004d	8b 45 e8	 mov	 eax, DWORD PTR $T10[ebp]
  00050	89 45 e4	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple

; 245  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...), _Myfirst(_STD forward<_This2>(_This_arg)) {}

  00053	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  00056	89 45 e0	 mov	 DWORD PTR _this$8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00059	8b 45 e4	 mov	 eax, DWORD PTR $T9[ebp]
  0005c	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple

; 163  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) {}

  0005f	8b 45 e0	 mov	 eax, DWORD PTR _this$8[ebp]
  00062	8b 4d dc	 mov	 ecx, DWORD PTR $T7[ebp]
  00065	89 08		 mov	 DWORD PTR [eax], ecx

; 854  :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

  00067	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  0006a	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2067 :           boost::unordered::detail::allocator_traits<Alloc>::construct(alloc,

  0006d	ff 75 d4	 push	 DWORD PTR $T5[ebp]
  00070	ff 75 d0	 push	 DWORD PTR $T4[ebp]
  00073	68 00 00 00 00	 push	 OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B

; 4869 :         value_type* value_ptr() { return value_base_.value_ptr(); }

  00078	8b 45 c4	 mov	 eax, DWORD PTR _a$[ebp+4]
  0007b	83 c0 08	 add	 eax, 8

; 2067 :           boost::unordered::detail::allocator_traits<Alloc>::construct(alloc,

  0007e	50		 push	 eax
  0007f	ff 75 08	 push	 DWORD PTR _alloc$[ebp]
  00082	e8 00 00 00 00	 call	 ??$construct@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::construct<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
  00087	83 c4 14	 add	 esp, 20			; 00000014H

; 1956 :           node_pointer p = node_;

  0008a	8b 45 c4	 mov	 eax, DWORD PTR _a$[ebp+4]
  0008d	89 45 cc	 mov	 DWORD PTR _p$3[ebp], eax

; 1957 :           node_ = node_pointer();

  00090	83 65 c4 00	 and	 DWORD PTR _a$[ebp+4], 0

; 2068 :             a.node_->value_ptr(), std::piecewise_construct,
; 2069 :             std::forward_as_tuple(boost::forward<Key>(k)),
; 2070 :             std::forward_as_tuple());
; 2071 :           return a.release();

  00094	8b 45 cc	 mov	 eax, DWORD PTR _p$3[ebp]
  00097	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  0009a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0009e	8d 4d c0	 lea	 ecx, DWORD PTR _a$[ebp]
  000a1	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
  000a6	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]

; 2072 :         }

  000a9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b3	59		 pop	 ecx
  000b4	c9		 leave
  000b5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _a$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z ENDP ; boost::unordered::detail::func::construct_node_pair<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >,unsigned long const &>
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\move\utility_core.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z
_TEXT	SEGMENT
_a$ = -64						; size = 8
$T2 = -56						; size = 4
_p$3 = -52						; size = 4
$T4 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
_this$8 = -32						; size = 4
$T9 = -28						; size = 4
$T10 = -24						; size = 4
$T11 = -20						; size = 4
$T12 = -13						; size = 1
__$EHRec$ = -12						; size = 12
_alloc$ = 8						; size = 4
_k$ = 12						; size = 4
??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z PROC ; boost::unordered::detail::func::construct_node_pair<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >,unsigned long const &>, COMDAT

; 2064 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  00025	8b 45 08	 mov	 eax, DWORD PTR _alloc$[ebp]
  00028	89 45 c0	 mov	 DWORD PTR _a$[ebp], eax
  0002b	83 65 c4 00	 and	 DWORD PTR _a$[ebp+4], 0

; 2065 :           node_constructor<Alloc> a(alloc);

  0002f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2066 :           a.create_node();

  00033	8d 4d c0	 lea	 ecx, DWORD PTR _a$[ebp]
  00036	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::create_node
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple

; 854  :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

  0003b	8d 45 f3	 lea	 eax, DWORD PTR $T12[ebp]
  0003e	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\move\utility_core.hpp

; 249  :          {  return static_cast<T&&>(t);   }

  00041	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  00044	89 45 ec	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00047	8b 45 ec	 mov	 eax, DWORD PTR $T11[ebp]
  0004a	89 45 e8	 mov	 DWORD PTR $T10[ebp], eax
  0004d	8b 45 e8	 mov	 eax, DWORD PTR $T10[ebp]
  00050	89 45 e4	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple

; 245  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...), _Myfirst(_STD forward<_This2>(_This_arg)) {}

  00053	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  00056	89 45 e0	 mov	 DWORD PTR _this$8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00059	8b 45 e4	 mov	 eax, DWORD PTR $T9[ebp]
  0005c	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\tuple

; 163  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) {}

  0005f	8b 45 e0	 mov	 eax, DWORD PTR _this$8[ebp]
  00062	8b 4d dc	 mov	 ecx, DWORD PTR $T7[ebp]
  00065	89 08		 mov	 DWORD PTR [eax], ecx

; 854  :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

  00067	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]
  0006a	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2067 :           boost::unordered::detail::allocator_traits<Alloc>::construct(alloc,

  0006d	ff 75 d4	 push	 DWORD PTR $T5[ebp]
  00070	ff 75 d0	 push	 DWORD PTR $T4[ebp]
  00073	68 00 00 00 00	 push	 OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B

; 4869 :         value_type* value_ptr() { return value_base_.value_ptr(); }

  00078	8b 45 c4	 mov	 eax, DWORD PTR _a$[ebp+4]
  0007b	83 c0 08	 add	 eax, 8

; 2067 :           boost::unordered::detail::allocator_traits<Alloc>::construct(alloc,

  0007e	50		 push	 eax
  0007f	ff 75 08	 push	 DWORD PTR _alloc$[ebp]
  00082	e8 00 00 00 00	 call	 ??$construct@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABK@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@std@@SAXAAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@1@QAU?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::construct<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey>,std::piecewise_construct_t const &,std::tuple<unsigned long const &>,std::tuple<> >
  00087	83 c4 14	 add	 esp, 20			; 00000014H

; 1956 :           node_pointer p = node_;

  0008a	8b 45 c4	 mov	 eax, DWORD PTR _a$[ebp+4]
  0008d	89 45 cc	 mov	 DWORD PTR _p$3[ebp], eax

; 1957 :           node_ = node_pointer();

  00090	83 65 c4 00	 and	 DWORD PTR _a$[ebp+4], 0

; 2068 :             a.node_->value_ptr(), std::piecewise_construct,
; 2069 :             std::forward_as_tuple(boost::forward<Key>(k)),
; 2070 :             std::forward_as_tuple());
; 2071 :           return a.release();

  00094	8b 45 cc	 mov	 eax, DWORD PTR _p$3[ebp]
  00097	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  0009a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0009e	8d 4d c0	 lea	 ecx, DWORD PTR _a$[ebp]
  000a1	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
  000a6	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]

; 2072 :         }

  000a9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b3	59		 pop	 ecx
  000b4	c9		 leave
  000b5	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR _a$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z ENDP ; boost::unordered::detail::func::construct_node_pair<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >,unsigned long const &>
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z
_TEXT	SEGMENT
_bucket_index$ = -16					; size = 4
tv73 = -12						; size = 4
_this$ = -8						; size = 4
_n$ = -4						; size = 4
_key_hash$ = 8						; size = 4
_k$ = 12						; size = 4
_eq$ = 16						; size = 4
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >, COMDAT
; _this$ = ecx

; 3587 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2604 :           return hash % bucket_count;

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	8b 45 08	 mov	 eax, DWORD PTR _key_hash$[ebp]
  0000f	33 d2		 xor	 edx, edx
  00011	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3588 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00014	89 55 f0	 mov	 DWORD PTR _bucket_index$[ebp], edx

; 3589 :           node_pointer n = this->begin(bucket_index);

  00017	ff 75 f0	 push	 DWORD PTR _bucket_index$[ebp]
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?begin@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::begin
  00022	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN4@find_node_:

; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00025	83 7d fc 00	 cmp	 DWORD PTR _n$[ebp], 0
  00029	75 05		 jne	 SHORT $LN25@find_node_

; 3593 :               return n;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0002e	eb 4b		 jmp	 SHORT $LN1@find_node_
$LN25@find_node_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 91   :         return _Left == _Right;

  00030	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0003b	75 09		 jne	 SHORT $LN35@find_node_
  0003d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  00044	eb 04		 jmp	 SHORT $LN33@find_node_
$LN35@find_node_:
  00046	83 65 f4 00	 and	 DWORD PTR tv73[ebp], 0
$LN33@find_node_:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  0004a	0f b6 45 f4	 movzx	 eax, BYTE PTR tv73[ebp]
  0004e	85 c0		 test	 eax, eax
  00050	74 07		 je	 SHORT $LN37@find_node_

; 3596 :               return n;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00055	eb 24		 jmp	 SHORT $LN1@find_node_

; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  00057	eb 14		 jmp	 SHORT $LN7@find_node_
$LN37@find_node_:

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0005c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005f	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  00064	3b 45 f0	 cmp	 eax, DWORD PTR _bucket_index$[ebp]
  00067	74 04		 je	 SHORT $LN7@find_node_

; 3598 :               return node_pointer();

  00069	33 c0		 xor	 eax, eax
  0006b	eb 0e		 jmp	 SHORT $LN1@find_node_
$LN7@find_node_:

; 3599 :             }
; 3600 : 
; 3601 :             n = next_for_find(n);

  0006d	ff 75 fc	 push	 DWORD PTR _n$[ebp]
  00070	e8 00 00 00 00	 call	 ?next_for_find@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_for_find
  00075	59		 pop	 ecx
  00076	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 3602 :           }

  00079	eb aa		 jmp	 SHORT $LN4@find_node_
$LN1@find_node_:

; 3603 :         }

  0007b	c9		 leave
  0007c	c2 0c 00	 ret	 12			; 0000000cH
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPAEPAEIAAV?$allocator@E@0@@Z
_TEXT	SEGMENT
__PFirst$1 = -4						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPAEPAEIAAV?$allocator@E@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >, COMDAT

; 1862 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00004	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR __PFirst$1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1867 :         _Zero_range(_PFirst, _PFirst + _Count);

  0000a	8b 45 fc	 mov	 eax, DWORD PTR __PFirst$1[ebp]
  0000d	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00010	50		 push	 eax
  00011	ff 75 fc	 push	 DWORD PTR __PFirst$1[ebp]
  00014	e8 00 00 00 00	 call	 ??$_Zero_range@PAE@std@@YAPAEQAE0@Z ; std::_Zero_range<unsigned char *>
  00019	59		 pop	 ecx
  0001a	59		 pop	 ecx

; 1868 :         return _First + _Count;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001e	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]

; 1869 :     } else {
; 1870 :         _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1871 :         for (; 0 < _Count; --_Count) {
; 1872 :             _Backout._Emplace_back();
; 1873 :         }
; 1874 : 
; 1875 :         return _Backout._Release();
; 1876 :     }
; 1877 : }

  00021	c9		 leave
  00022	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPAEPAEIAAV?$allocator@E@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z
_TEXT	SEGMENT
_bucket_index$ = -16					; size = 4
tv73 = -12						; size = 4
_this$ = -8						; size = 4
_n$ = -4						; size = 4
_key_hash$ = 8						; size = 4
_k$ = 12						; size = 4
_eq$ = 16						; size = 4
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >, COMDAT
; _this$ = ecx

; 3587 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2604 :           return hash % bucket_count;

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	8b 45 08	 mov	 eax, DWORD PTR _key_hash$[ebp]
  0000f	33 d2		 xor	 edx, edx
  00011	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3588 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00014	89 55 f0	 mov	 DWORD PTR _bucket_index$[ebp], edx

; 3589 :           node_pointer n = this->begin(bucket_index);

  00017	ff 75 f0	 push	 DWORD PTR _bucket_index$[ebp]
  0001a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?begin@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::begin
  00022	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN4@find_node_:

; 3590 : 
; 3591 :           for (;;) {
; 3592 :             if (!n)

  00025	83 7d fc 00	 cmp	 DWORD PTR _n$[ebp], 0
  00029	75 05		 jne	 SHORT $LN25@find_node_

; 3593 :               return n;

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0002e	eb 4b		 jmp	 SHORT $LN1@find_node_
$LN25@find_node_:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 91   :         return _Left == _Right;

  00030	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0003b	75 09		 jne	 SHORT $LN35@find_node_
  0003d	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  00044	eb 04		 jmp	 SHORT $LN33@find_node_
$LN35@find_node_:
  00046	83 65 f4 00	 and	 DWORD PTR tv73[ebp], 0
$LN33@find_node_:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3595 :             if (eq(k, this->get_key(n))) {

  0004a	0f b6 45 f4	 movzx	 eax, BYTE PTR tv73[ebp]
  0004e	85 c0		 test	 eax, eax
  00050	74 07		 je	 SHORT $LN37@find_node_

; 3596 :               return n;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00055	eb 24		 jmp	 SHORT $LN1@find_node_

; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  00057	eb 14		 jmp	 SHORT $LN7@find_node_
$LN37@find_node_:

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00059	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0005c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0005f	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 3597 :             } else if (this->node_bucket(n) != bucket_index) {

  00064	3b 45 f0	 cmp	 eax, DWORD PTR _bucket_index$[ebp]
  00067	74 04		 je	 SHORT $LN7@find_node_

; 3598 :               return node_pointer();

  00069	33 c0		 xor	 eax, eax
  0006b	eb 0e		 jmp	 SHORT $LN1@find_node_
$LN7@find_node_:

; 3599 :             }
; 3600 : 
; 3601 :             n = next_for_find(n);

  0006d	ff 75 fc	 push	 DWORD PTR _n$[ebp]
  00070	e8 00 00 00 00	 call	 ?next_for_find@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_for_find
  00075	59		 pop	 ecx
  00076	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 3602 :           }

  00079	eb aa		 jmp	 SHORT $LN4@find_node_
$LN1@find_node_:

; 3603 :         }

  0007b	c9		 leave
  0007c	c2 0c 00	 ret	 12			; 0000000cH
??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Block_size$ = -8					; size = 4
__Ptr_container$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00012	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00015	77 05		 ja	 SHORT $LN12@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  00017	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Allocate_m:

; 77   :         return ::operator new(_Bytes);

  0001c	ff 75 f8	 push	 DWORD PTR __Block_size$[ebp]
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	59		 pop	 ecx

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00025	89 45 fc	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00028	83 7d fc 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0002c	74 02		 je	 SHORT $LN7@Allocate_m
  0002e	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00035	33 c0		 xor	 eax, eax
  00037	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  00039	33 c0		 xor	 eax, eax
  0003b	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00040	83 c0 23	 add	 eax, 35			; 00000023H
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00046	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00049	6a 04		 push	 4
  0004b	58		 pop	 eax
  0004c	6b c0 ff	 imul	 eax, eax, -1
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00055	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Assign_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Mylast$ = -36						; size = 4
$T1 = -32						; size = 4
__Ptr$ = -28						; size = 4
__Oldcapacity$2 = -24					; size = 4
__Myend$ = -20						; size = 4
__Myfirst$ = -16					; size = 4
_this$ = -12						; size = 4
__Newsize$ = -8						; size = 4
__My_data$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Assign_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0Uforward_iterator_tag@1@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_range<unsigned char *>, COMDAT
; _this$ = ecx

; 1094 :     void _Assign_range(_Iter _First, _Iter _Last, forward_iterator_tag) { // assign forward range [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1794 :         return _Last - _First; // assume the iterator will do debug checking

  00009	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000c	2b 45 08	 sub	 eax, DWORD PTR __First$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  0000f	89 45 f8	 mov	 DWORD PTR __Newsize$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1096 :         auto& _My_data      = _Mypair._Myval2;

  00012	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00015	89 45 fc	 mov	 DWORD PTR __My_data$[ebp], eax

; 1097 :         pointer& _Myfirst   = _My_data._Myfirst;

  00018	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  0001b	89 45 f0	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1098 :         pointer& _Mylast    = _My_data._Mylast;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 04	 add	 eax, 4
  00024	89 45 dc	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1099 :         pointer& _Myend     = _My_data._Myend;

  00027	8b 45 fc	 mov	 eax, DWORD PTR __My_data$[ebp]
  0002a	83 c0 08	 add	 eax, 8
  0002d	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1100 : 
; 1101 :         _My_data._Orphan_all();
; 1102 : 
; 1103 : #if _HAS_IF_CONSTEXPR
; 1104 :         if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<_Iter, _Ty*>::_Trivially_copyable>,
; 1105 :                           _Uses_default_construct<_Alty, _Ty*, decltype(*_First)>,
; 1106 :                           _Uses_default_destroy<_Alty, _Ty*>>) {
; 1107 :             const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

  00030	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00033	8b 4d f0	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	2b 01		 sub	 eax, DWORD PTR [ecx]
  0003a	89 45 e8	 mov	 DWORD PTR __Oldcapacity$2[ebp], eax

; 1108 :             if (_Newsize > _Oldcapacity) {

  0003d	8b 45 f8	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00040	3b 45 e8	 cmp	 eax, DWORD PTR __Oldcapacity$2[ebp]
  00043	76 0b		 jbe	 SHORT $LN2@Assign_ran

; 1109 :                 _Clear_and_reserve_geometric(_Newsize);

  00045	ff 75 f8	 push	 DWORD PTR __Newsize$[ebp]
  00048	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Clear_and_reserve_geometric
$LN2@Assign_ran:

; 1112 :             _Mylast = _Refancy<pointer>(_Copy_memmove(_First, _Last, _Unfancy(_Myfirst)));

  00050	8b 45 f0	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00053	8b 00		 mov	 eax, DWORD PTR [eax]
  00055	89 45 e4	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00058	8b 45 e4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005b	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1112 :             _Mylast = _Refancy<pointer>(_Copy_memmove(_First, _Last, _Unfancy(_Myfirst)));

  0005e	ff 75 e0	 push	 DWORD PTR $T1[ebp]
  00061	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00064	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00067	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z ; std::_Copy_memmove<unsigned char *,unsigned char *>
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Refancy@PAE$0A@@std@@YAPAEPAE@Z ; std::_Refancy<unsigned char *,0>
  00075	59		 pop	 ecx
  00076	8b 4d dc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00079	89 01		 mov	 DWORD PTR [ecx], eax

; 1113 :         } else
; 1114 : #endif // _HAS_IF_CONSTEXPR
; 1115 :         {
; 1116 :             auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);
; 1117 : 
; 1118 :             if (_Newsize > _Oldsize) {
; 1119 :                 const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1120 :                 if (_Newsize > _Oldcapacity) { // reallocate
; 1121 :                     _Clear_and_reserve_geometric(_Newsize);
; 1122 :                     _Oldsize = 0;
; 1123 :                 }
; 1124 : 
; 1125 :                 // performance note: traversing [_First, _Mid) twice
; 1126 :                 const _Iter _Mid = _STD next(_First, static_cast<difference_type>(_Oldsize));
; 1127 :                 _Copy_unchecked(_First, _Mid, _Myfirst);
; 1128 :                 _Mylast = _Ucopy(_Mid, _Last, _Mylast);
; 1129 :             } else {
; 1130 :                 const pointer _Newlast = _Myfirst + _Newsize;
; 1131 :                 _Copy_unchecked(_First, _Last, _Myfirst);
; 1132 :                 _Destroy(_Newlast, _Mylast);
; 1133 :                 _Mylast = _Newlast;
; 1134 :             }
; 1135 :         }
; 1136 :     }

  0007b	c9		 leave
  0007c	c2 0c 00	 ret	 12			; 0000000cH
??$_Assign_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0Uforward_iterator_tag@1@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_range<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
$T2 = -136						; size = 4
$T3 = -132						; size = 4
__First$ = -128						; size = 4
__Last$ = -124						; size = 4
$T4 = -120						; size = 4
$T5 = -116						; size = 4
tv238 = -112						; size = 4
$T6 = -108						; size = 4
$T7 = -104						; size = 4
$T8 = -100						; size = 4
$T9 = -96						; size = 4
$T10 = -92						; size = 4
$T11 = -88						; size = 4
$T12 = -84						; size = 4
$T13 = -80						; size = 4
__Appended_last$ = -76					; size = 4
__Myfirst$ = -72					; size = 4
__Mylast$ = -68						; size = 4
__Oldsize$ = -64					; size = 4
__My_data$ = -60					; size = 4
tv145 = -56						; size = 4
$T14 = -52						; size = 4
$T15 = -48						; size = 4
__Newcapacity$ = -44					; size = 4
__Appended_first$ = -40					; size = 4
__Newvec$ = -36						; size = 4
_this$ = -32						; size = 4
___formal$ = -28					; size = 1
___formal$ = -24					; size = 1
__Overflow_is_possible$16 = -18				; size = 1
$T17 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1182 :     void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 78	 sub	 esp, 120		; 00000078H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx

; 1737 :         return _Mypair._Get_first();

  0002f	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00032	89 45 b0	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00035	8b 45 b0	 mov	 eax, DWORD PTR $T13[ebp]
  00038	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0003e	83 4d d0 ff	 or	 DWORD PTR $T15[ebp], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00042	c7 45 ac ff ff
	ff 7f		 mov	 DWORD PTR $T12[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00049	8b 45 ac	 mov	 eax, DWORD PTR $T12[ebp]
  0004c	89 45 cc	 mov	 DWORD PTR $T14[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0004f	8b 45 d0	 mov	 eax, DWORD PTR $T15[ebp]
  00052	3b 45 cc	 cmp	 eax, DWORD PTR $T14[ebp]
  00055	73 08		 jae	 SHORT $LN26@Resize_rea
  00057	8d 45 d0	 lea	 eax, DWORD PTR $T15[ebp]
  0005a	89 45 c8	 mov	 DWORD PTR tv145[ebp], eax
  0005d	eb 06		 jmp	 SHORT $LN27@Resize_rea
$LN26@Resize_rea:
  0005f	8d 45 cc	 lea	 eax, DWORD PTR $T14[ebp]
  00062	89 45 c8	 mov	 DWORD PTR tv145[ebp], eax
$LN27@Resize_rea:
  00065	8b 45 c8	 mov	 eax, DWORD PTR tv145[ebp]
  00068	89 45 a8	 mov	 DWORD PTR $T11[ebp], eax
  0006b	8b 45 a8	 mov	 eax, DWORD PTR $T11[ebp]
  0006e	89 45 a4	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00071	8b 45 a4	 mov	 eax, DWORD PTR $T10[ebp]
  00074	8b 00		 mov	 eax, DWORD PTR [eax]
  00076	89 45 a0	 mov	 DWORD PTR $T9[ebp], eax

; 1183 :         if (_Newsize > max_size()) {

  00079	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0007c	3b 45 a0	 cmp	 eax, DWORD PTR $T9[ebp]
  0007f	76 05		 jbe	 SHORT $LN2@Resize_rea

; 1184 :             _Xlength();

  00081	e8 00 00 00 00	 call	 ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
$LN2@Resize_rea:

; 1185 :         }
; 1186 : 
; 1187 :         auto& _My_data    = _Mypair._Myval2;

  00086	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00089	89 45 c4	 mov	 DWORD PTR __My_data$[ebp], eax

; 1188 :         pointer& _Myfirst = _My_data._Myfirst;

  0008c	8b 45 c4	 mov	 eax, DWORD PTR __My_data$[ebp]
  0008f	89 45 b8	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1189 :         pointer& _Mylast  = _My_data._Mylast;

  00092	8b 45 c4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00095	83 c0 04	 add	 eax, 4
  00098	89 45 bc	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1190 : 
; 1191 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0009b	8b 45 bc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0009e	8b 4d b8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  000a1	8b 00		 mov	 eax, DWORD PTR [eax]
  000a3	2b 01		 sub	 eax, DWORD PTR [ecx]
  000a5	89 45 c0	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1192 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000a8	ff 75 08	 push	 DWORD PTR __Newsize$[ebp]
  000ab	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@ABEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth
  000b3	89 45 d4	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  000b6	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000b9	89 45 9c	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  000bc	8b 45 9c	 mov	 eax, DWORD PTR $T8[ebp]
  000bf	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000c5	c6 45 ee 00	 mov	 BYTE PTR __Overflow_is_possible$16[ebp], 0

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000c9	ff 75 d4	 push	 DWORD PTR __Newcapacity$[ebp]
  000cc	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000d1	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1194 :         const pointer _Newvec         = _Getal().allocate(_Newcapacity);

  000d2	89 45 dc	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1195 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000d5	8b 45 dc	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000d8	03 45 c0	 add	 eax, DWORD PTR __Oldsize$[ebp]
  000db	89 45 d8	 mov	 DWORD PTR __Appended_first$[ebp], eax

; 1196 :         pointer _Appended_last        = _Appended_first;

  000de	8b 45 d8	 mov	 eax, DWORD PTR __Appended_first$[ebp]
  000e1	89 45 b4	 mov	 DWORD PTR __Appended_last$[ebp], eax

; 1197 : 
; 1198 :         _TRY_BEGIN

  000e4	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  000e8	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  000eb	8a 00		 mov	 al, BYTE PTR [eax]
  000ed	88 45 e8	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  000f0	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000f3	89 45 98	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  000f6	8b 45 98	 mov	 eax, DWORD PTR $T7[ebp]
  000f9	89 45 94	 mov	 DWORD PTR $T6[ebp], eax

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  000fc	ff 75 94	 push	 DWORD PTR $T6[ebp]

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  000ff	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00102	2b 45 c0	 sub	 eax, DWORD PTR __Oldsize$[ebp]

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  00105	50		 push	 eax
  00106	ff 75 d8	 push	 DWORD PTR __Appended_first$[ebp]
  00109	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPAEPAEIAAV?$allocator@E@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >
  0010e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00111	89 45 90	 mov	 DWORD PTR tv238[ebp], eax

; 1199 :         _Appended_last = _Ufill(_Appended_first, _Newsize - _Oldsize, _Val);

  00114	8b 45 90	 mov	 eax, DWORD PTR tv238[ebp]
  00117	89 45 b4	 mov	 DWORD PTR __Appended_last$[ebp], eax

; 1200 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  0011a	8b 45 bc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0011d	8b 00		 mov	 eax, DWORD PTR [eax]
  0011f	89 45 84	 mov	 DWORD PTR __Last$[ebp], eax
  00122	8b 45 b8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00125	8b 00		 mov	 eax, DWORD PTR [eax]
  00127	89 45 80	 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  0012a	33 c0		 xor	 eax, eax
  0012c	88 45 ef	 mov	 BYTE PTR $T17[ebp], al
  0012f	8a 45 ef	 mov	 al, BYTE PTR $T17[ebp]
  00132	88 45 e4	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  00135	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00138	89 45 8c	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0013b	8b 45 8c	 mov	 eax, DWORD PTR $T5[ebp]
  0013e	89 45 88	 mov	 DWORD PTR $T4[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00141	ff 75 88	 push	 DWORD PTR $T4[ebp]
  00144	ff 75 dc	 push	 DWORD PTR __Newvec$[ebp]
  00147	ff 75 84	 push	 DWORD PTR __Last$[ebp]
  0014a	ff 75 80	 push	 DWORD PTR __First$[ebp]
  0014d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAEV?$allocator@E@std@@@std@@YAPAEQAE0PAEAAV?$allocator@E@0@@Z ; std::_Uninitialized_move<unsigned char *,std::allocator<unsigned char> >
  00152	83 c4 10	 add	 esp, 16			; 00000010H

; 1200 :         _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00155	eb 32		 jmp	 SHORT $LN5@Resize_rea
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1201 :         _CATCH_ALL
; 1202 :         _Destroy(_Appended_first, _Appended_last);

  00157	ff 75 b4	 push	 DWORD PTR __Appended_last$[ebp]
  0015a	ff 75 d8	 push	 DWORD PTR __Appended_first$[ebp]
  0015d	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  00160	e8 00 00 00 00	 call	 ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy

; 1203 :         _Getal().deallocate(_Newvec, _Newcapacity);

  00165	ff 75 d4	 push	 DWORD PTR __Newcapacity$[ebp]
  00168	ff 75 dc	 push	 DWORD PTR __Newvec$[ebp]
  0016b	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0016e	e8 00 00 00 00	 call	 ?_Getal@?$vector@EV?$allocator@E@std@@@std@@AAEAAV?$allocator@E@2@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
  00173	8b c8		 mov	 ecx, eax
  00175	e8 00 00 00 00	 call	 ?deallocate@?$allocator@E@std@@QAEXQAEI@Z ; std::allocator<unsigned char>::deallocate

; 1204 :         _RERAISE;

  0017a	6a 00		 push	 0
  0017c	6a 00		 push	 0
  0017e	e8 00 00 00 00	 call	 __CxxThrowException@8

; 1205 :         _CATCH_END

  00183	b8 00 00 00 00	 mov	 eax, $LN8@Resize_rea
  00188	c3		 ret	 0
$LN5@Resize_rea:
  00189	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0018d	eb 04		 jmp	 SHORT __tryend$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$1
$LN8@Resize_rea:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  0018f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1206 : 
; 1207 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00193	ff 75 d4	 push	 DWORD PTR __Newcapacity$[ebp]
  00196	ff 75 08	 push	 DWORD PTR __Newsize$[ebp]
  00199	ff 75 dc	 push	 DWORD PTR __Newvec$[ebp]
  0019c	8b 4d e0	 mov	 ecx, DWORD PTR _this$[ebp]
  0019f	e8 00 00 00 00	 call	 ?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array
$LN4@Resize_rea:

; 1208 :     }

  001a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ae	59		 pop	 ecx
  001af	5f		 pop	 edi
  001b0	5e		 pop	 esi
  001b1	5b		 pop	 ebx
  001b2	c9		 leave
  001b3	c2 08 00	 ret	 8
  001b6	cc		 int	 3
  001b7	cc		 int	 3
  001b8	cc		 int	 3
  001b9	cc		 int	 3
  001ba	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
;	COMDAT ??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z
_TEXT	SEGMENT
$T2 = -56						; size = 4
_old_p$3 = -52						; size = 4
$T4 = -48						; size = 4
_old_p$5 = -44						; size = 4
$T6 = -40						; size = 4
_this$7 = -36						; size = 4
_this$ = -32						; size = 4
tv83 = -28						; size = 4
_p$ = -24						; size = 4
_this$ = -20						; size = 4
$T8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_value$ = 12						; size = 4
_throwIfNotUsed$ = 16					; size = 1
??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z PROC ; CryptoPP::AlgorithmParameters::operator()<CryptoPP::ConstByteArrayParameter>, COMDAT
; _this$ = ecx

; 353  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 354  : 		member_ptr<AlgorithmParametersBase> p(new AlgorithmParametersTemplate<T>(name, value, throwIfNotUsed));

  00028	6a 28		 push	 40			; 00000028H
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	59		 pop	 ecx
  00030	89 45 f0	 mov	 DWORD PTR $T8[ebp], eax
  00033	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	83 7d f0 00	 cmp	 DWORD PTR $T8[ebp], 0
  0003b	74 58		 je	 SHORT $LN3@operator

; 266  : 		: m_name(name), m_throwIfNotUsed(throwIfNotUsed), m_used(false) {}

  0003d	8b 45 f0	 mov	 eax, DWORD PTR $T8[ebp]
  00040	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7AlgorithmParametersBase@CryptoPP@@6B@
  00046	8b 45 f0	 mov	 eax, DWORD PTR $T8[ebp]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  0004c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0004f	8b 45 f0	 mov	 eax, DWORD PTR $T8[ebp]
  00052	8a 4d 10	 mov	 cl, BYTE PTR _throwIfNotUsed$[ebp]
  00055	88 48 08	 mov	 BYTE PTR [eax+8], cl
  00058	8b 45 f0	 mov	 eax, DWORD PTR $T8[ebp]
  0005b	c6 40 09 00	 mov	 BYTE PTR [eax+9], 0
  0005f	8b 45 f0	 mov	 eax, DWORD PTR $T8[ebp]
  00062	83 c0 0c	 add	 eax, 12			; 0000000cH
  00065	89 45 dc	 mov	 DWORD PTR _this$7[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h

; 20   : 	explicit member_ptr(T *p = NULL) : m_p(p) {}

  00068	8b 45 dc	 mov	 eax, DWORD PTR _this$7[ebp]
  0006b	83 20 00	 and	 DWORD PTR [eax], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 306  : 		: AlgorithmParametersBase(name, throwIfNotUsed), m_value(value)

  0006e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 307  : 	{

  00072	8b 45 f0	 mov	 eax, DWORD PTR $T8[ebp]
  00075	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@

; 306  : 		: AlgorithmParametersBase(name, throwIfNotUsed), m_value(value)

  0007b	ff 75 0c	 push	 DWORD PTR _value$[ebp]
  0007e	8b 4d f0	 mov	 ecx, DWORD PTR $T8[ebp]
  00081	83 c1 10	 add	 ecx, 16			; 00000010H
  00084	e8 00 00 00 00	 call	 ??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z

; 308  : 	}

  00089	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0

; 354  : 		member_ptr<AlgorithmParametersBase> p(new AlgorithmParametersTemplate<T>(name, value, throwIfNotUsed));

  0008d	8b 45 f0	 mov	 eax, DWORD PTR $T8[ebp]
  00090	89 45 e4	 mov	 DWORD PTR tv83[ebp], eax
  00093	eb 04		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00095	83 65 e4 00	 and	 DWORD PTR tv83[ebp], 0
$LN4@operator:
  00099	8b 45 e4	 mov	 eax, DWORD PTR tv83[ebp]
  0009c	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax
  0009f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h

; 20   : 	explicit member_ptr(T *p = NULL) : m_p(p) {}

  000a3	8b 45 d8	 mov	 eax, DWORD PTR $T6[ebp]
  000a6	89 45 e8	 mov	 DWORD PTR _p$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 354  : 		member_ptr<AlgorithmParametersBase> p(new AlgorithmParametersTemplate<T>(name, value, throwIfNotUsed));

  000a9	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 355  : 		p->m_next.reset(m_next.release());

  000b0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	83 c0 04	 add	 eax, 4
  000b6	89 45 e0	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h

; 35   : 		T *old_p = m_p;

  000b9	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	8b 00		 mov	 eax, DWORD PTR [eax]
  000be	89 45 d4	 mov	 DWORD PTR _old_p$5[ebp], eax

; 36   : 		m_p = 0;

  000c1	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	83 20 00	 and	 DWORD PTR [eax], 0

; 28   : 	T* operator->() { return m_p; }

  000c7	8b 45 e8	 mov	 eax, DWORD PTR _p$[ebp]
  000ca	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 355  : 		p->m_next.reset(m_next.release());

  000cd	ff 75 d4	 push	 DWORD PTR _old_p$5[ebp]
  000d0	8b 4d d0	 mov	 ecx, DWORD PTR $T4[ebp]
  000d3	83 c1 0c	 add	 ecx, 12			; 0000000cH
  000d6	e8 00 00 00 00	 call	 ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h

; 35   : 		T *old_p = m_p;

  000db	8b 45 e8	 mov	 eax, DWORD PTR _p$[ebp]
  000de	89 45 cc	 mov	 DWORD PTR _old_p$3[ebp], eax

; 36   : 		m_p = 0;

  000e1	83 65 e8 00	 and	 DWORD PTR _p$[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 356  : 		m_next.reset(p.release());

  000e5	ff 75 cc	 push	 DWORD PTR _old_p$3[ebp]
  000e8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000eb	83 c1 04	 add	 ecx, 4
  000ee	e8 00 00 00 00	 call	 ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset

; 357  : 		m_defaultThrowIfNotUsed = throwIfNotUsed;

  000f3	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000f6	8a 4d 10	 mov	 cl, BYTE PTR _throwIfNotUsed$[ebp]
  000f9	88 48 08	 mov	 BYTE PTR [eax+8], cl

; 358  : 		return *this;

  000fc	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
  00102	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00106	8d 4d e8	 lea	 ecx, DWORD PTR _p$[ebp]
  00109	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  0010e	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]

; 359  : 	}

  00111	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00114	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011b	59		 pop	 ecx
  0011c	c9		 leave
  0011d	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$0:
  00000	6a 28		 push	 40			; 00000028H
  00002	ff 75 f0	 push	 DWORD PTR $T8[ebp]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000a	59		 pop	 ecx
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$2:
  0000d	8b 4d f0	 mov	 ecx, DWORD PTR $T8[ebp]
  00010	e9 00 00 00 00	 jmp	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
__unwindfunclet$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z$1:
  00015	8d 4d e8	 lea	 ecx, DWORD PTR _p$[ebp]
  00018	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
__ehhandler$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z:
  00022	90		 npad	 1
  00023	90		 npad	 1
  00024	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00028	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002b	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0002e	33 c8		 xor	 ecx, eax
  00030	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00035	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z
  0003a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z ENDP ; CryptoPP::AlgorithmParameters::operator()<CryptoPP::ConstByteArrayParameter>
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\move\utility_core.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
_TEXT	SEGMENT
$T1 = -64						; size = 4
$T2 = -60						; size = 4
$T3 = -56						; size = 4
$T4 = -52						; size = 4
_x$ = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
$T8 = -32						; size = 4
_v$9 = -28						; size = 4
$T10 = -24						; size = 4
_key_hash$ = -20					; size = 4
_this$ = -16						; size = 4
_pos$ = -12						; size = 4
_this$ = -8						; size = 4
$T11 = -2						; size = 1
$T12 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>, COMDAT
; _this$ = ecx

; 3791 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2791 :           return *static_cast<function_pair const*>(

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0000f	83 e0 01	 and	 eax, 1
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8d 44 01 01	 lea	 eax, DWORD PTR [ecx+eax+1]
  00019	89 45 c0	 mov	 DWORD PTR $T1[ebp], eax

; 2599 :           return hf(x);

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 45 e4	 mov	 DWORD PTR _v$9[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00024	ff 75 e4	 push	 DWORD PTR _v$9[ebp]
  00027	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  0002c	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3792 :           std::size_t key_hash = this->hash(k);

  0002d	89 45 ec	 mov	 DWORD PTR _key_hash$[ebp], eax

; 3576 :           return this->find_node_impl(key_hash, k, this->key_eq());

  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?key_eq@?$functions@U?$hash@K@boost@@U?$equal_to@K@std@@@detail@unordered@boost@@QBEABU?$equal_to@K@std@@XZ ; boost::unordered::detail::functions<boost::hash<unsigned long>,std::equal_to<unsigned long> >::key_eq
  00038	50		 push	 eax
  00039	ff 75 0c	 push	 DWORD PTR _k$[ebp]
  0003c	ff 75 ec	 push	 DWORD PTR _key_hash$[ebp]
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 3793 :           node_pointer pos = this->find_node(key_hash, k);

  00047	89 45 f4	 mov	 DWORD PTR _pos$[ebp], eax

; 3794 :           if (pos) {

  0004a	83 7d f4 00	 cmp	 DWORD PTR _pos$[ebp], 0
  0004e	74 32		 je	 SHORT $LN2@try_emplac

; 3795 :             return emplace_return(iterator(pos), false);

  00050	c6 45 ff 00	 mov	 BYTE PTR $T12[ebp], 0

; 2371 :           : node_(static_cast<node_pointer>(x))

  00054	8b 45 f4	 mov	 eax, DWORD PTR _pos$[ebp]
  00057	89 45 e0	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0005a	8d 45 e0	 lea	 eax, DWORD PTR $T8[ebp]
  0005d	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00060	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  00063	8b 00		 mov	 eax, DWORD PTR [eax]
  00065	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00068	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0006a	8d 45 ff	 lea	 eax, DWORD PTR $T12[ebp]
  0006d	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00070	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00073	8b 4d d8	 mov	 ecx, DWORD PTR $T6[ebp]
  00076	8a 09		 mov	 cl, BYTE PTR [ecx]
  00078	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3795 :             return emplace_return(iterator(pos), false);

  0007b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007e	eb 6a		 jmp	 SHORT $LN1@try_emplac

; 3796 :           } else {

  00080	eb 68		 jmp	 SHORT $LN1@try_emplac
$LN2@try_emplac:

; 3797 :             return emplace_return(

  00082	c6 45 fe 01	 mov	 BYTE PTR $T11[ebp], 1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\move\utility_core.hpp

; 249  :          {  return static_cast<T&&>(t);   }

  00086	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  00089	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	83 c0 03	 add	 eax, 3
  00092	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  00095	74 09		 je	 SHORT $LN106@try_emplac
  00097	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	40		 inc	 eax
  0009b	89 45 e8	 mov	 DWORD PTR $T10[ebp], eax
  0009e	eb 04		 jmp	 SHORT $LN102@try_emplac
$LN106@try_emplac:
  000a0	83 65 e8 00	 and	 DWORD PTR $T10[ebp], 0
$LN102@try_emplac:

; 3797 :             return emplace_return(

  000a4	ff 75 ec	 push	 DWORD PTR _key_hash$[ebp]
  000a7	ff 75 d4	 push	 DWORD PTR $T5[ebp]
  000aa	ff 75 e8	 push	 DWORD PTR $T10[ebp]
  000ad	e8 00 00 00 00	 call	 ??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z ; boost::unordered::detail::func::construct_node_pair<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >,unsigned long const &>
  000b2	59		 pop	 ecx
  000b3	59		 pop	 ecx
  000b4	50		 push	 eax
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	e8 00 00 00 00	 call	 ?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::resize_and_add_node_unique
  000bd	89 45 d0	 mov	 DWORD PTR _x$[ebp], eax

; 2371 :           : node_(static_cast<node_pointer>(x))

  000c0	8b 45 d0	 mov	 eax, DWORD PTR _x$[ebp]
  000c3	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  000c6	8d 45 cc	 lea	 eax, DWORD PTR $T4[ebp]
  000c9	89 45 c8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000cc	8b 45 c8	 mov	 eax, DWORD PTR $T3[ebp]
  000cf	8b 00		 mov	 eax, DWORD PTR [eax]
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000d4	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  000d6	8d 45 fe	 lea	 eax, DWORD PTR $T11[ebp]
  000d9	89 45 c4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000dc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000df	8b 4d c4	 mov	 ecx, DWORD PTR $T2[ebp]
  000e2	8a 09		 mov	 cl, BYTE PTR [ecx]
  000e4	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3797 :             return emplace_return(

  000e7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@try_emplac:

; 3798 :               iterator(this->resize_and_add_node_unique(
; 3799 :                 boost::unordered::detail::func::construct_node_pair(
; 3800 :                   this->node_alloc(), boost::forward<Key>(k)),
; 3801 :                 key_hash)),
; 3802 :               true);
; 3803 :           }
; 3804 :         }

  000ea	c9		 leave
  000eb	c2 08 00	 ret	 8
??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\move\utility_core.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z
_TEXT	SEGMENT
$T1 = -64						; size = 4
$T2 = -60						; size = 4
$T3 = -56						; size = 4
$T4 = -52						; size = 4
_x$ = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
$T8 = -32						; size = 4
_v$9 = -28						; size = 4
$T10 = -24						; size = 4
_key_hash$ = -20					; size = 4
_this$ = -16						; size = 4
_pos$ = -12						; size = 4
_this$ = -8						; size = 4
$T11 = -2						; size = 1
$T12 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>, COMDAT
; _this$ = ecx

; 3791 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2791 :           return *static_cast<function_pair const*>(

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0000f	83 e0 01	 and	 eax, 1
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8d 44 01 01	 lea	 eax, DWORD PTR [ecx+eax+1]
  00019	89 45 c0	 mov	 DWORD PTR $T1[ebp], eax

; 2599 :           return hf(x);

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 45 e4	 mov	 DWORD PTR _v$9[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00024	ff 75 e4	 push	 DWORD PTR _v$9[ebp]
  00027	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  0002c	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3792 :           std::size_t key_hash = this->hash(k);

  0002d	89 45 ec	 mov	 DWORD PTR _key_hash$[ebp], eax

; 3576 :           return this->find_node_impl(key_hash, k, this->key_eq());

  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?key_eq@?$functions@U?$hash@K@boost@@U?$equal_to@K@std@@@detail@unordered@boost@@QBEABU?$equal_to@K@std@@XZ ; boost::unordered::detail::functions<boost::hash<unsigned long>,std::equal_to<unsigned long> >::key_eq
  00038	50		 push	 eax
  00039	ff 75 0c	 push	 DWORD PTR _k$[ebp]
  0003c	ff 75 ec	 push	 DWORD PTR _key_hash$[ebp]
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 3793 :           node_pointer pos = this->find_node(key_hash, k);

  00047	89 45 f4	 mov	 DWORD PTR _pos$[ebp], eax

; 3794 :           if (pos) {

  0004a	83 7d f4 00	 cmp	 DWORD PTR _pos$[ebp], 0
  0004e	74 32		 je	 SHORT $LN2@try_emplac

; 3795 :             return emplace_return(iterator(pos), false);

  00050	c6 45 ff 00	 mov	 BYTE PTR $T12[ebp], 0

; 2371 :           : node_(static_cast<node_pointer>(x))

  00054	8b 45 f4	 mov	 eax, DWORD PTR _pos$[ebp]
  00057	89 45 e0	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0005a	8d 45 e0	 lea	 eax, DWORD PTR $T8[ebp]
  0005d	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00060	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  00063	8b 00		 mov	 eax, DWORD PTR [eax]
  00065	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00068	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0006a	8d 45 ff	 lea	 eax, DWORD PTR $T12[ebp]
  0006d	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  00070	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00073	8b 4d d8	 mov	 ecx, DWORD PTR $T6[ebp]
  00076	8a 09		 mov	 cl, BYTE PTR [ecx]
  00078	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3795 :             return emplace_return(iterator(pos), false);

  0007b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0007e	eb 6a		 jmp	 SHORT $LN1@try_emplac

; 3796 :           } else {

  00080	eb 68		 jmp	 SHORT $LN1@try_emplac
$LN2@try_emplac:

; 3797 :             return emplace_return(

  00082	c6 45 fe 01	 mov	 BYTE PTR $T11[ebp], 1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\move\utility_core.hpp

; 249  :          {  return static_cast<T&&>(t);   }

  00086	8b 45 0c	 mov	 eax, DWORD PTR _k$[ebp]
  00089	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  0008c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	83 c0 03	 add	 eax, 3
  00092	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  00095	74 09		 je	 SHORT $LN106@try_emplac
  00097	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009a	40		 inc	 eax
  0009b	89 45 e8	 mov	 DWORD PTR $T10[ebp], eax
  0009e	eb 04		 jmp	 SHORT $LN102@try_emplac
$LN106@try_emplac:
  000a0	83 65 e8 00	 and	 DWORD PTR $T10[ebp], 0
$LN102@try_emplac:

; 3797 :             return emplace_return(

  000a4	ff 75 ec	 push	 DWORD PTR _key_hash$[ebp]
  000a7	ff 75 d4	 push	 DWORD PTR $T5[ebp]
  000aa	ff 75 e8	 push	 DWORD PTR $T10[ebp]
  000ad	e8 00 00 00 00	 call	 ??$construct_node_pair@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@func@detail@unordered@boost@@YAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@AAV?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@ABK@Z ; boost::unordered::detail::func::construct_node_pair<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >,unsigned long const &>
  000b2	59		 pop	 ecx
  000b3	59		 pop	 ecx
  000b4	50		 push	 eax
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	e8 00 00 00 00	 call	 ?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::resize_and_add_node_unique
  000bd	89 45 d0	 mov	 DWORD PTR _x$[ebp], eax

; 2371 :           : node_(static_cast<node_pointer>(x))

  000c0	8b 45 d0	 mov	 eax, DWORD PTR _x$[ebp]
  000c3	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  000c6	8d 45 cc	 lea	 eax, DWORD PTR $T4[ebp]
  000c9	89 45 c8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000cc	8b 45 c8	 mov	 eax, DWORD PTR $T3[ebp]
  000cf	8b 00		 mov	 eax, DWORD PTR [eax]
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000d4	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  000d6	8d 45 fe	 lea	 eax, DWORD PTR $T11[ebp]
  000d9	89 45 c4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 190  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {}

  000dc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000df	8b 4d c4	 mov	 ecx, DWORD PTR $T2[ebp]
  000e2	8a 09		 mov	 cl, BYTE PTR [ecx]
  000e4	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3797 :             return emplace_return(

  000e7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@try_emplac:

; 3798 :               iterator(this->resize_and_add_node_unique(
; 3799 :                 boost::unordered::detail::func::construct_node_pair(
; 3800 :                   this->node_alloc(), boost::forward<Key>(k)),
; 3801 :                 key_hash)),
; 3802 :               true);
; 3803 :           }
; 3804 :         }

  000ea	c9		 leave
  000eb	c2 08 00	 ret	 8
??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$lower_bound@PBIIU?$less@X@std@@@std@@YAPBIPBIQBIABIU?$less@X@0@@Z
_TEXT	SEGMENT
$T1 = -36						; size = 4
__UMid$2 = -32						; size = 4
tv77 = -28						; size = 4
__Count2$3 = -24					; size = 4
__First$ = -20						; size = 4
__First$ = -16						; size = 4
__UFirst$ = -12						; size = 4
__Count$ = -8						; size = 4
$T4 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$lower_bound@PBIIU?$less@X@std@@@std@@YAPBIPBIQBIABIU?$less@X@0@@Z PROC ; std::lower_bound<unsigned int const *,unsigned int,std::less<void> >, COMDAT

; 5849 : _NODISCARD _CONSTEXPR20 _FwdIt lower_bound(_FwdIt _First, const _FwdIt _Last, const _Ty& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 5850 :     // find first element not before _Val
; 5851 :     _Adl_verify_range(_First, _Last);
; 5852 :     auto _UFirst                = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f4	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1303 :         return _It + 0;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax

; 1794 :         return _Last - _First; // assume the iterator will do debug checking

  00012	8b 45 dc	 mov	 eax, DWORD PTR $T1[ebp]
  00015	2b 45 f4	 sub	 eax, DWORD PTR __UFirst$[ebp]
  00018	c1 f8 02	 sar	 eax, 2

; 5853 :     _Iter_diff_t<_FwdIt> _Count = _STD distance(_UFirst, _Get_unwrapped(_Last));

  0001b	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax
$LN2@lower_boun:

; 5854 : 
; 5855 :     while (0 < _Count) { // divide and conquer, find half that contains answer

  0001e	83 7d f8 00	 cmp	 DWORD PTR __Count$[ebp], 0
  00022	7e 75		 jle	 SHORT $LN3@lower_boun

; 5856 :         const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;

  00024	8b 45 f8	 mov	 eax, DWORD PTR __Count$[ebp]
  00027	99		 cdq
  00028	2b c2		 sub	 eax, edx
  0002a	d1 f8		 sar	 eax, 1
  0002c	89 45 e8	 mov	 DWORD PTR __Count2$3[ebp], eax

; 5857 :         const auto _UMid                   = _STD next(_UFirst, _Count2);

  0002f	8b 45 f4	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00032	89 45 f0	 mov	 DWORD PTR __First$[ebp], eax

; 1714 :         _Where += _Off;

  00035	8b 45 e8	 mov	 eax, DWORD PTR __Count2$3[ebp]
  00038	8b 4d f0	 mov	 ecx, DWORD PTR __First$[ebp]
  0003b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0003e	89 45 f0	 mov	 DWORD PTR __First$[ebp], eax

; 5857 :         const auto _UMid                   = _STD next(_UFirst, _Count2);

  00041	8b 45 f0	 mov	 eax, DWORD PTR __First$[ebp]
  00044	89 45 e0	 mov	 DWORD PTR __UMid$2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 240  :         return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);

  00047	8b 45 e0	 mov	 eax, DWORD PTR __UMid$2[ebp]
  0004a	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  0004d	8b 00		 mov	 eax, DWORD PTR [eax]
  0004f	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00051	73 09		 jae	 SHORT $LN21@lower_boun
  00053	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv77[ebp], 1
  0005a	eb 04		 jmp	 SHORT $LN22@lower_boun
$LN21@lower_boun:
  0005c	83 65 e4 00	 and	 DWORD PTR tv77[ebp], 0
$LN22@lower_boun:
  00060	8a 45 e4	 mov	 al, BYTE PTR tv77[ebp]
  00063	88 45 ff	 mov	 BYTE PTR $T4[ebp], al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 5858 :         if (_Pred(*_UMid, _Val)) { // try top half

  00066	0f b6 45 ff	 movzx	 eax, BYTE PTR $T4[ebp]
  0006a	85 c0		 test	 eax, eax
  0006c	74 23		 je	 SHORT $LN4@lower_boun

; 5859 :             _UFirst = _Next_iter(_UMid);

  0006e	8b 45 e0	 mov	 eax, DWORD PTR __UMid$2[ebp]
  00071	89 45 ec	 mov	 DWORD PTR __First$[ebp], eax

; 1837 :     return ++_First;

  00074	8b 45 ec	 mov	 eax, DWORD PTR __First$[ebp]
  00077	83 c0 04	 add	 eax, 4
  0007a	89 45 ec	 mov	 DWORD PTR __First$[ebp], eax

; 5859 :             _UFirst = _Next_iter(_UMid);

  0007d	8b 45 ec	 mov	 eax, DWORD PTR __First$[ebp]
  00080	89 45 f4	 mov	 DWORD PTR __UFirst$[ebp], eax

; 5860 :             _Count -= _Count2 + 1;

  00083	8b 45 e8	 mov	 eax, DWORD PTR __Count2$3[ebp]
  00086	40		 inc	 eax
  00087	8b 4d f8	 mov	 ecx, DWORD PTR __Count$[ebp]
  0008a	2b c8		 sub	 ecx, eax
  0008c	89 4d f8	 mov	 DWORD PTR __Count$[ebp], ecx

; 5861 :         } else {

  0008f	eb 06		 jmp	 SHORT $LN5@lower_boun
$LN4@lower_boun:

; 5862 :             _Count = _Count2;

  00091	8b 45 e8	 mov	 eax, DWORD PTR __Count2$3[ebp]
  00094	89 45 f8	 mov	 DWORD PTR __Count$[ebp], eax
$LN5@lower_boun:

; 5863 :         }
; 5864 :     }

  00097	eb 85		 jmp	 SHORT $LN2@lower_boun
$LN3@lower_boun:

; 1492 :         _It = static_cast<_UIter&&>(_UIt);

  00099	8b 45 f4	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0009c	89 45 08	 mov	 DWORD PTR __First$[ebp], eax

; 5865 : 
; 5866 :     _Seek_wrapped(_First, _UFirst);
; 5867 :     return _First;

  0009f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 5868 : }

  000a2	c9		 leave
  000a3	c3		 ret	 0
??$lower_bound@PBIIU?$less@X@std@@@std@@YAPBIPBIQBIABIU?$less@X@0@@Z ENDP ; std::lower_bound<unsigned int const *,unsigned int,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0b		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00014	59		 pop	 ecx
  00015	eb 13		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00017	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001b	74 0b		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001d	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	59		 pop	 ecx

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00028	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char> >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 0f		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  0003a	ff 75 0c	 push	 DWORD PTR __Bytes$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 222  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	c9		 leave
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 908  : void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept { // (maybe) propagate on container move assignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 909  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 910  :         _Left = _STD move(_Right);
; 911  :     }
; 912  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00018	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00022	c9		 leave
  00023	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<char> >, COMDAT

; 885  : void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 886  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 887  :         _Left = _Right;
; 888  :     }
; 889  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
__Al$ = -64						; size = 4
__First1$ = -60						; size = 4
__First1$ = -56						; size = 4
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
$T2 = -44						; size = 4
__Old_ptr$3 = -40					; size = 4
__Old_capacity$ = -36					; size = 4
__New_capacity$ = -32					; size = 4
__New_size$ = -28					; size = 4
__New_ptr$ = -24					; size = 4
_this$ = -20						; size = 4
__Raw_new$ = -16					; size = 4
__My_data$ = -12					; size = 4
__Old_size$ = -8					; size = 4
__Overflow_is_possible$4 = -3				; size = 1
$T5 = -2						; size = 1
$T6 = -1						; size = 1
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 4328 :     basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 4329 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4330 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4331 :         auto& _My_data            = _Mypair._Myval2;

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR __My_data$[ebp], eax

; 4332 :         const size_type _Old_size = _My_data._Mysize;

  0000f	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00015	89 45 f8	 mov	 DWORD PTR __Old_size$[ebp], eax

; 4333 :         if (max_size() - _Old_size < _Size_increase) {

  00018	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00020	2b 45 f8	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00023	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  00026	73 05		 jae	 SHORT $LN2@Reallocate

; 4334 :             _Xlen_string(); // result too long

  00028	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4335 :         }
; 4336 : 
; 4337 :         const size_type _New_size     = _Old_size + _Size_increase;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00030	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  00033	89 45 e4	 mov	 DWORD PTR __New_size$[ebp], eax

; 4338 :         const size_type _Old_capacity = _My_data._Myres;

  00036	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00039	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0003c	89 45 dc	 mov	 DWORD PTR __Old_capacity$[ebp], eax

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0003f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00047	50		 push	 eax
  00048	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	ff 70 14	 push	 DWORD PTR [eax+20]
  0004e	ff 75 e4	 push	 DWORD PTR __New_size$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	89 45 e0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4409 :         return _Mypair._Get_first();

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00062	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 c0	 mov	 DWORD PTR __Al$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00068	c6 45 fd 00	 mov	 BYTE PTR __Overflow_is_possible$4[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4341 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0006c	8b 45 e0	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  0006f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00076	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4341 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00077	89 45 e8	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4342 :         _My_data._Orphan_all();
; 4343 :         _My_data._Mysize      = _New_size;

  0007a	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  0007d	8b 4d e4	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00080	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4344 :         _My_data._Myres       = _New_capacity;

  00083	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00086	8b 4d e0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00089	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4345 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  0008c	8b 45 e8	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0008f	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00092	8b 45 d0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00095	89 45 f0	 mov	 DWORD PTR __Raw_new$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4346 :         if (_BUF_SIZE <= _Old_capacity) {

  00098	83 7d dc 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  0009c	72 65		 jb	 SHORT $LN3@Reallocate

; 4347 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  0009e	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a1	8b 00		 mov	 eax, DWORD PTR [eax]
  000a3	89 45 d8	 mov	 DWORD PTR __Old_ptr$3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  000a6	8b 45 d8	 mov	 eax, DWORD PTR __Old_ptr$3[ebp]
  000a9	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ac	ff 75 f8	 push	 DWORD PTR __Old_size$[ebp]
  000af	ff 75 cc	 push	 DWORD PTR $T1[ebp]
  000b2	ff 75 f0	 push	 DWORD PTR __Raw_new$[ebp]
  000b5	e8 00 00 00 00	 call	 _memcpy
  000ba	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2951 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  000bd	8b 45 f0	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  000c0	03 45 f8	 add	 eax, DWORD PTR __Old_size$[ebp]
  000c3	89 45 c8	 mov	 DWORD PTR __First1$[ebp], eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c6	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  000c9	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  000cc	ff 75 c8	 push	 DWORD PTR __First1$[ebp]
  000cf	e8 00 00 00 00	 call	 _memcpy
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2952 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000d7	c6 45 ff 00	 mov	 BYTE PTR $T6[ebp], 0
  000db	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$[ebp]
  000de	03 45 14	 add	 eax, DWORD PTR _<_Args_1>$[ebp]

; 428  :         _Left = _Right;

  000e1	8b 4d f0	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  000e4	8a 55 ff	 mov	 dl, BYTE PTR $T6[ebp]
  000e7	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4348 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);
; 4349 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000ea	8b 45 dc	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000ed	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ee	50		 push	 eax
  000ef	ff 75 d8	 push	 DWORD PTR __Old_ptr$3[ebp]
  000f2	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000f7	59		 pop	 ecx
  000f8	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4350 :             _My_data._Bx._Ptr = _New_ptr;

  000f9	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  000fc	8b 4d e8	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000ff	89 08		 mov	 DWORD PTR [eax], ecx

; 4351 :         } else {

  00101	eb 4c		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00103	ff 75 f8	 push	 DWORD PTR __Old_size$[ebp]
  00106	ff 75 f4	 push	 DWORD PTR __My_data$[ebp]
  00109	ff 75 f0	 push	 DWORD PTR __Raw_new$[ebp]
  0010c	e8 00 00 00 00	 call	 _memcpy
  00111	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2951 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  00114	8b 45 f0	 mov	 eax, DWORD PTR __Raw_new$[ebp]
  00117	03 45 f8	 add	 eax, DWORD PTR __Old_size$[ebp]
  0011a	89 45 c4	 mov	 DWORD PTR __First1$[ebp], eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	ff 75 14	 push	 DWORD PTR _<_Args_1>$[ebp]
  00120	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00123	ff 75 c4	 push	 DWORD PTR __First1$[ebp]
  00126	e8 00 00 00 00	 call	 _memcpy
  0012b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2952 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0012e	c6 45 fe 00	 mov	 BYTE PTR $T5[ebp], 0
  00132	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00135	03 45 14	 add	 eax, DWORD PTR _<_Args_1>$[ebp]

; 428  :         _Left = _Right;

  00138	8b 4d f0	 mov	 ecx, DWORD PTR __Raw_new$[ebp]
  0013b	8a 55 fe	 mov	 dl, BYTE PTR $T5[ebp]
  0013e	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4352 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);
; 4353 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00141	8d 45 e8	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  00144	50		 push	 eax
  00145	ff 75 f4	 push	 DWORD PTR __My_data$[ebp]
  00148	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  0014d	59		 pop	 ecx
  0014e	59		 pop	 ecx
$LN4@Reallocate:

; 4354 :         }
; 4355 : 
; 4356 :         return *this;

  0014f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4357 :     }

  00152	c9		 leave
  00153	c2 10 00	 ret	 16			; 00000010H
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Al$ = -40						; size = 4
__Ptr$ = -36						; size = 4
__Ptr$ = -32						; size = 4
$T1 = -28						; size = 4
__Old_capacity$ = -24					; size = 4
$T2 = -20						; size = 4
__New_capacity$ = -16					; size = 4
__New_ptr$ = -12					; size = 4
_this$ = -8						; size = 4
__Overflow_is_possible$3 = -2				; size = 1
$T4 = -1						; size = 1
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4302 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4303 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4304 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4305 :         if (_New_size > max_size()) {

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00014	76 05		 jbe	 SHORT $LN2@Reallocate

; 4306 :             _Xlen_string(); // result too long

  00016	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4307 :         }
; 4308 : 
; 4309 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00021	89 45 e8	 mov	 DWORD PTR __Old_capacity$[ebp], eax

; 4310 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00024	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0002f	89 45 f0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00035	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00038	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  0003b	89 45 d8	 mov	 DWORD PTR __Al$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0003e	c6 45 fe 00	 mov	 BYTE PTR __Overflow_is_possible$3[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00042	8b 45 f0	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00045	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0004c	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0004d	89 45 f4	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4313 :         _Mypair._Myval2._Orphan_all();
; 4314 :         _Mypair._Myval2._Mysize = _New_size;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00056	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4315 :         _Mypair._Myval2._Myres  = _New_capacity;

  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0005f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4316 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  00062	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  00065	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00068	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0006b	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006e	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00071	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00074	ff 75 ec	 push	 DWORD PTR $T2[ebp]
  00077	e8 00 00 00 00	 call	 _memcpy
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0007f	c6 45 ff 00	 mov	 BYTE PTR $T4[ebp], 0

; 428  :         _Left = _Right;

  00083	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00086	03 45 08	 add	 eax, DWORD PTR __New_size$[ebp]
  00089	8a 4d ff	 mov	 cl, BYTE PTR $T4[ebp]
  0008c	88 08		 mov	 BYTE PTR [eax], cl

; 4317 :         if (_BUF_SIZE <= _Old_capacity) {

  0008e	83 7d e8 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  00092	72 21		 jb	 SHORT $LN3@Reallocate

; 4318 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
  00099	89 45 dc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0009c	8b 45 e8	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  0009f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a0	50		 push	 eax
  000a1	ff 75 dc	 push	 DWORD PTR __Ptr$[ebp]
  000a4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a9	59		 pop	 ecx
  000aa	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4319 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000ab	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000b1	89 08		 mov	 DWORD PTR [eax], ecx

; 4320 :         } else {

  000b3	eb 0e		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4321 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000b5	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000b8	50		 push	 eax
  000b9	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000c1	59		 pop	 ecx
  000c2	59		 pop	 ecx
$LN4@Reallocate:

; 4322 :         }
; 4323 : 
; 4324 :         return *this;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4325 :     }

  000c6	c9		 leave
  000c7	c2 0c 00	 ret	 12			; 0000000cH
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 270  : /* _CONSTEXPR20_DYNALLOC */ void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\misc.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z
_TEXT	SEGMENT
_n$ = -32						; size = 4
_n$ = -28						; size = 4
$T1 = -24						; size = 4
tv69 = -20						; size = 4
$T2 = -16						; size = 4
_n$ = -12						; size = 4
_newPointer$3 = -8					; size = 4
_n$ = -4						; size = 4
_a$ = 8							; size = 4
_p$ = 12						; size = 4
_oldSize$ = 16						; size = 4
_newSize$ = 20						; size = 4
_preserve$ = 24						; size = 1
??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z PROC ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 62   : 	if (oldSize == newSize)

  00006	8b 45 10	 mov	 eax, DWORD PTR _oldSize$[ebp]
  00009	3b 45 14	 cmp	 eax, DWORD PTR _newSize$[ebp]
  0000c	75 08		 jne	 SHORT $LN2@StandardRe

; 63   : 		return p;

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _p$[ebp]
  00011	e9 10 01 00 00	 jmp	 $LN1@StandardRe
$LN2@StandardRe:

; 64   : 
; 65   : 	if (preserve)

  00016	0f b6 45 18	 movzx	 eax, BYTE PTR _preserve$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 9d 00 00
	00		 je	 $LN3@StandardRe

; 66   : 	{
; 67   : 		typename A::pointer newPointer = a.allocate(newSize, NULL);

  00022	8b 45 14	 mov	 eax, DWORD PTR _newSize$[ebp]
  00025	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 91   : 		CheckSize(n);

  00028	ff 75 fc	 push	 DWORD PTR _n$[ebp]
  0002b	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  00030	59		 pop	 ecx

; 92   : 		if (n == 0)

  00031	83 7d fc 00	 cmp	 DWORD PTR _n$[ebp], 0
  00035	75 06		 jne	 SHORT $LN7@StandardRe

; 93   : 			return NULL;

  00037	83 65 f8 00	 and	 DWORD PTR _newPointer$3[ebp], 0
  0003b	eb 1e		 jmp	 SHORT $LN6@StandardRe
$LN7@StandardRe:

; 94   : 
; 95   : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 96   : 		if (T_Align16 && n*sizeof(T) >= 16)

  0003d	33 c0		 xor	 eax, eax
  0003f	74 0e		 je	 SHORT $LN8@StandardRe

; 97   : 			return (pointer)AlignedAllocate(n*sizeof(T));

  00041	ff 75 fc	 push	 DWORD PTR _n$[ebp]
  00044	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  00049	59		 pop	 ecx
  0004a	89 45 f8	 mov	 DWORD PTR _newPointer$3[ebp], eax
  0004d	eb 0c		 jmp	 SHORT $LN6@StandardRe
$LN8@StandardRe:

; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  0004f	ff 75 fc	 push	 DWORD PTR _n$[ebp]
  00052	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00057	59		 pop	 ecx
  00058	89 45 f8	 mov	 DWORD PTR _newPointer$3[ebp], eax
$LN6@StandardRe:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\misc.h

; 179  : 	return b < a ? b : a;

  0005b	8b 45 14	 mov	 eax, DWORD PTR _newSize$[ebp]
  0005e	3b 45 10	 cmp	 eax, DWORD PTR _oldSize$[ebp]
  00061	73 08		 jae	 SHORT $LN28@StandardRe
  00063	8d 45 14	 lea	 eax, DWORD PTR _newSize$[ebp]
  00066	89 45 ec	 mov	 DWORD PTR tv69[ebp], eax
  00069	eb 06		 jmp	 SHORT $LN29@StandardRe
$LN28@StandardRe:
  0006b	8d 45 10	 lea	 eax, DWORD PTR _oldSize$[ebp]
  0006e	89 45 ec	 mov	 DWORD PTR tv69[ebp], eax
$LN29@StandardRe:
  00071	8b 45 ec	 mov	 eax, DWORD PTR tv69[ebp]
  00074	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h

; 68   : 		memcpy_s(newPointer, sizeof(T)*newSize, p, sizeof(T)*STDMIN(oldSize, newSize));

  00077	8b 45 e8	 mov	 eax, DWORD PTR $T1[ebp]
  0007a	ff 30		 push	 DWORD PTR [eax]
  0007c	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  0007f	ff 75 14	 push	 DWORD PTR _newSize$[ebp]
  00082	ff 75 f8	 push	 DWORD PTR _newPointer$3[ebp]
  00085	e8 00 00 00 00	 call	 _memcpy_s
  0008a	83 c4 10	 add	 esp, 16			; 00000010H

; 69   : 		a.deallocate(p, oldSize);

  0008d	8b 45 10	 mov	 eax, DWORD PTR _oldSize$[ebp]
  00090	89 45 e4	 mov	 DWORD PTR _n$[ebp], eax

; 105  : 		SecureWipeArray((pointer)p, n);

  00093	ff 75 e4	 push	 DWORD PTR _n$[ebp]
  00096	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  00099	e8 00 00 00 00	 call	 ??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z ; CryptoPP::SecureWipeArray<unsigned char>
  0009e	59		 pop	 ecx
  0009f	59		 pop	 ecx

; 106  : 
; 107  : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 108  : 		if (T_Align16 && n*sizeof(T) >= 16)

  000a0	33 c0		 xor	 eax, eax
  000a2	74 0b		 je	 SHORT $LN45@StandardRe

; 109  : 			return AlignedDeallocate(p);

  000a4	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  000a7	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  000ac	59		 pop	 ecx
  000ad	eb 09		 jmp	 SHORT $LN44@StandardRe
$LN45@StandardRe:

; 110  : #endif
; 111  : 
; 112  : 		UnalignedDeallocate(p);

  000af	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  000b2	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  000b7	59		 pop	 ecx
$LN44@StandardRe:

; 70   : 		return newPointer;

  000b8	8b 45 f8	 mov	 eax, DWORD PTR _newPointer$3[ebp]
  000bb	eb 69		 jmp	 SHORT $LN1@StandardRe

; 71   : 	}

  000bd	eb 67		 jmp	 SHORT $LN1@StandardRe
$LN3@StandardRe:

; 72   : 	else
; 73   : 	{
; 74   : 		a.deallocate(p, oldSize);

  000bf	8b 45 10	 mov	 eax, DWORD PTR _oldSize$[ebp]
  000c2	89 45 e0	 mov	 DWORD PTR _n$[ebp], eax

; 105  : 		SecureWipeArray((pointer)p, n);

  000c5	ff 75 e0	 push	 DWORD PTR _n$[ebp]
  000c8	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  000cb	e8 00 00 00 00	 call	 ??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z ; CryptoPP::SecureWipeArray<unsigned char>
  000d0	59		 pop	 ecx
  000d1	59		 pop	 ecx

; 106  : 
; 107  : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 108  : 		if (T_Align16 && n*sizeof(T) >= 16)

  000d2	33 c0		 xor	 eax, eax
  000d4	74 0b		 je	 SHORT $LN66@StandardRe

; 109  : 			return AlignedDeallocate(p);

  000d6	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  000d9	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  000de	59		 pop	 ecx
  000df	eb 09		 jmp	 SHORT $LN65@StandardRe
$LN66@StandardRe:

; 110  : #endif
; 111  : 
; 112  : 		UnalignedDeallocate(p);

  000e1	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  000e4	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  000e9	59		 pop	 ecx
$LN65@StandardRe:

; 75   : 		return a.allocate(newSize, NULL);

  000ea	8b 45 14	 mov	 eax, DWORD PTR _newSize$[ebp]
  000ed	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 91   : 		CheckSize(n);

  000f0	ff 75 f4	 push	 DWORD PTR _n$[ebp]
  000f3	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  000f8	59		 pop	 ecx

; 92   : 		if (n == 0)

  000f9	83 7d f4 00	 cmp	 DWORD PTR _n$[ebp], 0
  000fd	75 06		 jne	 SHORT $LN87@StandardRe

; 93   : 			return NULL;

  000ff	83 65 f0 00	 and	 DWORD PTR $T2[ebp], 0
  00103	eb 1e		 jmp	 SHORT $LN86@StandardRe
$LN87@StandardRe:

; 94   : 
; 95   : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 96   : 		if (T_Align16 && n*sizeof(T) >= 16)

  00105	33 c0		 xor	 eax, eax
  00107	74 0e		 je	 SHORT $LN88@StandardRe

; 97   : 			return (pointer)AlignedAllocate(n*sizeof(T));

  00109	ff 75 f4	 push	 DWORD PTR _n$[ebp]
  0010c	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  00111	59		 pop	 ecx
  00112	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00115	eb 0c		 jmp	 SHORT $LN86@StandardRe
$LN88@StandardRe:

; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  00117	ff 75 f4	 push	 DWORD PTR _n$[ebp]
  0011a	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  0011f	59		 pop	 ecx
  00120	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
$LN86@StandardRe:

; 75   : 		return a.allocate(newSize, NULL);

  00123	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@StandardRe:

; 76   : 	}
; 77   : }

  00126	c9		 leave
  00127	c3		 ret	 0
??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ENDP ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\misc.h
;	COMDAT ??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z
_TEXT	SEGMENT
_p$1 = -32						; size = 4
_p$2 = -28						; size = 4
_p$3 = -24						; size = 4
_p$4 = -20						; size = 4
$T5 = -16						; size = 4
$T6 = -12						; size = 4
$T7 = -8						; size = 4
$T8 = -4						; size = 4
_buf$ = 8						; size = 4
_n$ = 12						; size = 4
??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z PROC		; CryptoPP::SecureWipeArray<unsigned int>, COMDAT

; 536  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	57		 push	 edi

; 537  : 	if (sizeof(T) % 8 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word64>() == 0)

  00007	33 c0		 xor	 eax, eax
  00009	74 18		 je	 SHORT $LN2@SecureWipe

; 510  : 	volatile word32 *p = buf;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  0000e	89 45 ec	 mov	 DWORD PTR _p$4[ebp], eax

; 538  : 		SecureWipeBuffer((word64 *)buf, n * (sizeof(T)/8));

  00011	6b 4d 0c 00	 imul	 ecx, DWORD PTR _n$[ebp], 0

; 528  : 	SecureWipeBuffer((word32 *)buf, 2*n);

  00015	d1 e1		 shl	 ecx, 1

; 514  : 	__stosd((unsigned long *)(size_t)p, 0, n);

  00017	8b 7d ec	 mov	 edi, DWORD PTR _p$4[ebp]
  0001a	33 c0		 xor	 eax, eax
  0001c	f3 ab		 rep stosd

; 538  : 		SecureWipeBuffer((word64 *)buf, n * (sizeof(T)/8));

  0001e	e9 b0 00 00 00	 jmp	 $LN1@SecureWipe
$LN2@SecureWipe:

; 539  : 	else if (sizeof(T) % 4 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word32>() == 0)

  00023	33 c0		 xor	 eax, eax
  00025	40		 inc	 eax
  00026	74 48		 je	 SHORT $LN4@SecureWipe

; 366  : 	if (sizeof(T) < 16)

  00028	33 c0		 xor	 eax, eax
  0002a	40		 inc	 eax
  0002b	74 09		 je	 SHORT $LN14@SecureWipe

; 367  : 		return 1;

  0002d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR $T8[ebp], 1
  00034	eb 07		 jmp	 SHORT $LN13@SecureWipe
$LN14@SecureWipe:

; 368  : #endif
; 369  : 
; 370  : #if (_MSC_VER >= 1300)
; 371  : 	return __alignof(T);

  00036	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR $T8[ebp], 4
$LN13@SecureWipe:

; 366  : 	if (sizeof(T) < 16)

  0003d	33 c0		 xor	 eax, eax
  0003f	40		 inc	 eax
  00040	74 09		 je	 SHORT $LN17@SecureWipe

; 367  : 		return 1;

  00042	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR $T7[ebp], 1
  00049	eb 07		 jmp	 SHORT $LN16@SecureWipe
$LN17@SecureWipe:

; 368  : #endif
; 369  : 
; 370  : #if (_MSC_VER >= 1300)
; 371  : 	return __alignof(T);

  0004b	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR $T7[ebp], 4
$LN16@SecureWipe:

; 539  : 	else if (sizeof(T) % 4 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word32>() == 0)

  00052	8b 45 fc	 mov	 eax, DWORD PTR $T8[ebp]
  00055	33 d2		 xor	 edx, edx
  00057	f7 75 f8	 div	 DWORD PTR $T7[ebp]
  0005a	85 d2		 test	 edx, edx
  0005c	75 12		 jne	 SHORT $LN4@SecureWipe

; 510  : 	volatile word32 *p = buf;

  0005e	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00061	89 45 e8	 mov	 DWORD PTR _p$3[ebp], eax

; 511  : #ifdef __GNUC__
; 512  : 	asm volatile("rep stosl" : "+c"(n), "+D"(p) : "a"(0) : "memory");
; 513  : #else
; 514  : 	__stosd((unsigned long *)(size_t)p, 0, n);

  00064	8b 7d e8	 mov	 edi, DWORD PTR _p$3[ebp]
  00067	33 c0		 xor	 eax, eax
  00069	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  0006c	f3 ab		 rep stosd

; 540  : 		SecureWipeBuffer((word32 *)buf, n * (sizeof(T)/4));

  0006e	eb 63		 jmp	 SHORT $LN1@SecureWipe
$LN4@SecureWipe:

; 541  : 	else if (sizeof(T) % 2 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word16>() == 0)

  00070	33 c0		 xor	 eax, eax
  00072	40		 inc	 eax
  00073	74 4b		 je	 SHORT $LN6@SecureWipe

; 366  : 	if (sizeof(T) < 16)

  00075	33 c0		 xor	 eax, eax
  00077	40		 inc	 eax
  00078	74 09		 je	 SHORT $LN22@SecureWipe

; 367  : 		return 1;

  0007a	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR $T6[ebp], 1
  00081	eb 07		 jmp	 SHORT $LN21@SecureWipe
$LN22@SecureWipe:

; 368  : #endif
; 369  : 
; 370  : #if (_MSC_VER >= 1300)
; 371  : 	return __alignof(T);

  00083	c7 45 f4 04 00
	00 00		 mov	 DWORD PTR $T6[ebp], 4
$LN21@SecureWipe:

; 366  : 	if (sizeof(T) < 16)

  0008a	33 c0		 xor	 eax, eax
  0008c	40		 inc	 eax
  0008d	74 09		 je	 SHORT $LN25@SecureWipe

; 367  : 		return 1;

  0008f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T5[ebp], 1
  00096	eb 07		 jmp	 SHORT $LN24@SecureWipe
$LN25@SecureWipe:

; 368  : #endif
; 369  : 
; 370  : #if (_MSC_VER >= 1300)
; 371  : 	return __alignof(T);

  00098	c7 45 f0 02 00
	00 00		 mov	 DWORD PTR $T5[ebp], 2
$LN24@SecureWipe:

; 541  : 	else if (sizeof(T) % 2 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word16>() == 0)

  0009f	8b 45 f4	 mov	 eax, DWORD PTR $T6[ebp]
  000a2	33 d2		 xor	 edx, edx
  000a4	f7 75 f0	 div	 DWORD PTR $T5[ebp]
  000a7	85 d2		 test	 edx, edx
  000a9	75 15		 jne	 SHORT $LN6@SecureWipe

; 500  : 	volatile word16 *p = buf;

  000ab	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  000ae	89 45 e4	 mov	 DWORD PTR _p$2[ebp], eax

; 542  : 		SecureWipeBuffer((word16 *)buf, n * (sizeof(T)/2));

  000b1	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  000b4	d1 e1		 shl	 ecx, 1

; 504  : 	__stosw((word16 *)(size_t)p, 0, n);

  000b6	33 c0		 xor	 eax, eax
  000b8	8b 7d e4	 mov	 edi, DWORD PTR _p$2[ebp]
  000bb	66 f3 ab	 rep stosw

; 542  : 		SecureWipeBuffer((word16 *)buf, n * (sizeof(T)/2));

  000be	eb 13		 jmp	 SHORT $LN1@SecureWipe
$LN6@SecureWipe:

; 490  : 	volatile byte *p = buf;

  000c0	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  000c3	89 45 e0	 mov	 DWORD PTR _p$1[ebp], eax

; 543  : 	else
; 544  : 		SecureWipeBuffer((byte *)buf, n * sizeof(T));

  000c6	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  000c9	c1 e1 02	 shl	 ecx, 2

; 494  : 	__stosb((byte *)(size_t)p, 0, n);

  000cc	8b 7d e0	 mov	 edi, DWORD PTR _p$1[ebp]
  000cf	32 c0		 xor	 al, al
  000d1	f3 aa		 rep stosb
$LN1@SecureWipe:

; 545  : }

  000d3	5f		 pop	 edi
  000d4	c9		 leave
  000d5	c3		 ret	 0
??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z ENDP		; CryptoPP::SecureWipeArray<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@E@std@@@std@@YAXAAV?$allocator@E@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@E@std@@@std@@YAXAAV?$allocator@E@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<unsigned char> >, COMDAT

; 885  : void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 886  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 887  :         _Left = _Right;
; 888  :     }
; 889  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Pocca@V?$allocator@E@std@@@std@@YAXAAV?$allocator@E@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\misc.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z
_TEXT	SEGMENT
$T1 = -32						; size = 4
_n$ = -28						; size = 4
_n$ = -24						; size = 4
tv69 = -20						; size = 4
$T2 = -16						; size = 4
_newPointer$3 = -12					; size = 4
_n$ = -8						; size = 4
_n$ = -4						; size = 4
_a$ = 8							; size = 4
_p$ = 12						; size = 4
_oldSize$ = 16						; size = 4
_newSize$ = 20						; size = 4
_preserve$ = 24						; size = 1
??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z PROC ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >, COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 62   : 	if (oldSize == newSize)

  00006	8b 45 10	 mov	 eax, DWORD PTR _oldSize$[ebp]
  00009	3b 45 14	 cmp	 eax, DWORD PTR _newSize$[ebp]
  0000c	75 08		 jne	 SHORT $LN2@StandardRe

; 63   : 		return p;

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _p$[ebp]
  00011	e9 2c 01 00 00	 jmp	 $LN1@StandardRe
$LN2@StandardRe:

; 64   : 
; 65   : 	if (preserve)

  00016	0f b6 45 18	 movzx	 eax, BYTE PTR _preserve$[ebp]
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 ab 00 00
	00		 je	 $LN3@StandardRe

; 66   : 	{
; 67   : 		typename A::pointer newPointer = a.allocate(newSize, NULL);

  00022	8b 45 14	 mov	 eax, DWORD PTR _newSize$[ebp]
  00025	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 91   : 		CheckSize(n);

  00028	ff 75 fc	 push	 DWORD PTR _n$[ebp]
  0002b	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  00030	59		 pop	 ecx

; 92   : 		if (n == 0)

  00031	83 7d fc 00	 cmp	 DWORD PTR _n$[ebp], 0
  00035	75 06		 jne	 SHORT $LN7@StandardRe

; 93   : 			return NULL;

  00037	83 65 f4 00	 and	 DWORD PTR _newPointer$3[ebp], 0
  0003b	eb 25		 jmp	 SHORT $LN6@StandardRe
$LN7@StandardRe:

; 94   : 
; 95   : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 96   : 		if (T_Align16 && n*sizeof(T) >= 16)

  0003d	33 c0		 xor	 eax, eax
  0003f	40		 inc	 eax
  00040	74 14		 je	 SHORT $LN8@StandardRe
  00042	83 7d fc 10	 cmp	 DWORD PTR _n$[ebp], 16	; 00000010H
  00046	72 0e		 jb	 SHORT $LN8@StandardRe

; 97   : 			return (pointer)AlignedAllocate(n*sizeof(T));

  00048	ff 75 fc	 push	 DWORD PTR _n$[ebp]
  0004b	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  00050	59		 pop	 ecx
  00051	89 45 f4	 mov	 DWORD PTR _newPointer$3[ebp], eax
  00054	eb 0c		 jmp	 SHORT $LN6@StandardRe
$LN8@StandardRe:

; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  00056	ff 75 fc	 push	 DWORD PTR _n$[ebp]
  00059	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  0005e	59		 pop	 ecx
  0005f	89 45 f4	 mov	 DWORD PTR _newPointer$3[ebp], eax
$LN6@StandardRe:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\misc.h

; 179  : 	return b < a ? b : a;

  00062	8b 45 14	 mov	 eax, DWORD PTR _newSize$[ebp]
  00065	3b 45 10	 cmp	 eax, DWORD PTR _oldSize$[ebp]
  00068	73 08		 jae	 SHORT $LN28@StandardRe
  0006a	8d 45 14	 lea	 eax, DWORD PTR _newSize$[ebp]
  0006d	89 45 ec	 mov	 DWORD PTR tv69[ebp], eax
  00070	eb 06		 jmp	 SHORT $LN29@StandardRe
$LN28@StandardRe:
  00072	8d 45 10	 lea	 eax, DWORD PTR _oldSize$[ebp]
  00075	89 45 ec	 mov	 DWORD PTR tv69[ebp], eax
$LN29@StandardRe:
  00078	8b 45 ec	 mov	 eax, DWORD PTR tv69[ebp]
  0007b	89 45 e0	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h

; 68   : 		memcpy_s(newPointer, sizeof(T)*newSize, p, sizeof(T)*STDMIN(oldSize, newSize));

  0007e	8b 45 e0	 mov	 eax, DWORD PTR $T1[ebp]
  00081	ff 30		 push	 DWORD PTR [eax]
  00083	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  00086	ff 75 14	 push	 DWORD PTR _newSize$[ebp]
  00089	ff 75 f4	 push	 DWORD PTR _newPointer$3[ebp]
  0008c	e8 00 00 00 00	 call	 _memcpy_s
  00091	83 c4 10	 add	 esp, 16			; 00000010H

; 69   : 		a.deallocate(p, oldSize);

  00094	8b 45 10	 mov	 eax, DWORD PTR _oldSize$[ebp]
  00097	89 45 e8	 mov	 DWORD PTR _n$[ebp], eax

; 105  : 		SecureWipeArray((pointer)p, n);

  0009a	ff 75 e8	 push	 DWORD PTR _n$[ebp]
  0009d	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  000a0	e8 00 00 00 00	 call	 ??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z ; CryptoPP::SecureWipeArray<unsigned char>
  000a5	59		 pop	 ecx
  000a6	59		 pop	 ecx

; 106  : 
; 107  : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 108  : 		if (T_Align16 && n*sizeof(T) >= 16)

  000a7	33 c0		 xor	 eax, eax
  000a9	40		 inc	 eax
  000aa	74 11		 je	 SHORT $LN45@StandardRe
  000ac	83 7d e8 10	 cmp	 DWORD PTR _n$[ebp], 16	; 00000010H
  000b0	72 0b		 jb	 SHORT $LN45@StandardRe

; 109  : 			return AlignedDeallocate(p);

  000b2	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  000b5	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  000ba	59		 pop	 ecx
  000bb	eb 09		 jmp	 SHORT $LN44@StandardRe
$LN45@StandardRe:

; 110  : #endif
; 111  : 
; 112  : 		UnalignedDeallocate(p);

  000bd	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  000c0	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  000c5	59		 pop	 ecx
$LN44@StandardRe:

; 70   : 		return newPointer;

  000c6	8b 45 f4	 mov	 eax, DWORD PTR _newPointer$3[ebp]
  000c9	eb 77		 jmp	 SHORT $LN1@StandardRe

; 71   : 	}

  000cb	eb 75		 jmp	 SHORT $LN1@StandardRe
$LN3@StandardRe:

; 72   : 	else
; 73   : 	{
; 74   : 		a.deallocate(p, oldSize);

  000cd	8b 45 10	 mov	 eax, DWORD PTR _oldSize$[ebp]
  000d0	89 45 e4	 mov	 DWORD PTR _n$[ebp], eax

; 105  : 		SecureWipeArray((pointer)p, n);

  000d3	ff 75 e4	 push	 DWORD PTR _n$[ebp]
  000d6	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  000d9	e8 00 00 00 00	 call	 ??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z ; CryptoPP::SecureWipeArray<unsigned char>
  000de	59		 pop	 ecx
  000df	59		 pop	 ecx

; 106  : 
; 107  : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 108  : 		if (T_Align16 && n*sizeof(T) >= 16)

  000e0	33 c0		 xor	 eax, eax
  000e2	40		 inc	 eax
  000e3	74 11		 je	 SHORT $LN66@StandardRe
  000e5	83 7d e4 10	 cmp	 DWORD PTR _n$[ebp], 16	; 00000010H
  000e9	72 0b		 jb	 SHORT $LN66@StandardRe

; 109  : 			return AlignedDeallocate(p);

  000eb	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  000ee	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  000f3	59		 pop	 ecx
  000f4	eb 09		 jmp	 SHORT $LN65@StandardRe
$LN66@StandardRe:

; 110  : #endif
; 111  : 
; 112  : 		UnalignedDeallocate(p);

  000f6	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  000f9	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  000fe	59		 pop	 ecx
$LN65@StandardRe:

; 75   : 		return a.allocate(newSize, NULL);

  000ff	8b 45 14	 mov	 eax, DWORD PTR _newSize$[ebp]
  00102	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 91   : 		CheckSize(n);

  00105	ff 75 f8	 push	 DWORD PTR _n$[ebp]
  00108	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  0010d	59		 pop	 ecx

; 92   : 		if (n == 0)

  0010e	83 7d f8 00	 cmp	 DWORD PTR _n$[ebp], 0
  00112	75 06		 jne	 SHORT $LN87@StandardRe

; 93   : 			return NULL;

  00114	83 65 f0 00	 and	 DWORD PTR $T2[ebp], 0
  00118	eb 25		 jmp	 SHORT $LN86@StandardRe
$LN87@StandardRe:

; 94   : 
; 95   : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 96   : 		if (T_Align16 && n*sizeof(T) >= 16)

  0011a	33 c0		 xor	 eax, eax
  0011c	40		 inc	 eax
  0011d	74 14		 je	 SHORT $LN88@StandardRe
  0011f	83 7d f8 10	 cmp	 DWORD PTR _n$[ebp], 16	; 00000010H
  00123	72 0e		 jb	 SHORT $LN88@StandardRe

; 97   : 			return (pointer)AlignedAllocate(n*sizeof(T));

  00125	ff 75 f8	 push	 DWORD PTR _n$[ebp]
  00128	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  0012d	59		 pop	 ecx
  0012e	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00131	eb 0c		 jmp	 SHORT $LN86@StandardRe
$LN88@StandardRe:

; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  00133	ff 75 f8	 push	 DWORD PTR _n$[ebp]
  00136	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  0013b	59		 pop	 ecx
  0013c	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
$LN86@StandardRe:

; 75   : 		return a.allocate(newSize, NULL);

  0013f	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
$LN1@StandardRe:

; 76   : 	}
; 77   : }

  00142	c9		 leave
  00143	c3		 ret	 0
??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ENDP ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\misc.h
;	COMDAT ??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z
_TEXT	SEGMENT
_p$1 = -16						; size = 4
_p$2 = -12						; size = 4
_p$3 = -8						; size = 4
_p$4 = -4						; size = 4
_buf$ = 8						; size = 4
_n$ = 12						; size = 4
??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z PROC		; CryptoPP::SecureWipeArray<unsigned char>, COMDAT

; 536  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	57		 push	 edi

; 537  : 	if (sizeof(T) % 8 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word64>() == 0)

  00007	33 c0		 xor	 eax, eax
  00009	74 15		 je	 SHORT $LN2@SecureWipe

; 510  : 	volatile word32 *p = buf;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  0000e	89 45 fc	 mov	 DWORD PTR _p$4[ebp], eax

; 538  : 		SecureWipeBuffer((word64 *)buf, n * (sizeof(T)/8));

  00011	6b 4d 0c 00	 imul	 ecx, DWORD PTR _n$[ebp], 0

; 528  : 	SecureWipeBuffer((word32 *)buf, 2*n);

  00015	d1 e1		 shl	 ecx, 1

; 514  : 	__stosd((unsigned long *)(size_t)p, 0, n);

  00017	8b 7d fc	 mov	 edi, DWORD PTR _p$4[ebp]
  0001a	33 c0		 xor	 eax, eax
  0001c	f3 ab		 rep stosd

; 538  : 		SecureWipeBuffer((word64 *)buf, n * (sizeof(T)/8));

  0001e	eb 3f		 jmp	 SHORT $LN1@SecureWipe
$LN2@SecureWipe:

; 539  : 	else if (sizeof(T) % 4 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word32>() == 0)

  00020	33 c0		 xor	 eax, eax
  00022	74 13		 je	 SHORT $LN4@SecureWipe

; 510  : 	volatile word32 *p = buf;

  00024	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00027	89 45 f8	 mov	 DWORD PTR _p$3[ebp], eax

; 540  : 		SecureWipeBuffer((word32 *)buf, n * (sizeof(T)/4));

  0002a	6b 4d 0c 00	 imul	 ecx, DWORD PTR _n$[ebp], 0

; 514  : 	__stosd((unsigned long *)(size_t)p, 0, n);

  0002e	8b 7d f8	 mov	 edi, DWORD PTR _p$3[ebp]
  00031	33 c0		 xor	 eax, eax
  00033	f3 ab		 rep stosd

; 540  : 		SecureWipeBuffer((word32 *)buf, n * (sizeof(T)/4));

  00035	eb 28		 jmp	 SHORT $LN1@SecureWipe
$LN4@SecureWipe:

; 541  : 	else if (sizeof(T) % 2 == 0 && GetAlignmentOf<T>() % GetAlignmentOf<word16>() == 0)

  00037	33 c0		 xor	 eax, eax
  00039	74 14		 je	 SHORT $LN6@SecureWipe

; 500  : 	volatile word16 *p = buf;

  0003b	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  0003e	89 45 f4	 mov	 DWORD PTR _p$2[ebp], eax

; 542  : 		SecureWipeBuffer((word16 *)buf, n * (sizeof(T)/2));

  00041	6b 4d 0c 00	 imul	 ecx, DWORD PTR _n$[ebp], 0

; 504  : 	__stosw((word16 *)(size_t)p, 0, n);

  00045	33 c0		 xor	 eax, eax
  00047	8b 7d f4	 mov	 edi, DWORD PTR _p$2[ebp]
  0004a	66 f3 ab	 rep stosw

; 542  : 		SecureWipeBuffer((word16 *)buf, n * (sizeof(T)/2));

  0004d	eb 10		 jmp	 SHORT $LN1@SecureWipe
$LN6@SecureWipe:

; 490  : 	volatile byte *p = buf;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00052	89 45 f0	 mov	 DWORD PTR _p$1[ebp], eax

; 491  : #ifdef __GNUC__
; 492  : 	asm volatile("rep stosb" : "+c"(n), "+D"(p) : "a"(0) : "memory");
; 493  : #else
; 494  : 	__stosb((byte *)(size_t)p, 0, n);

  00055	8b 7d f0	 mov	 edi, DWORD PTR _p$1[ebp]
  00058	32 c0		 xor	 al, al
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  0005d	f3 aa		 rep stosb
$LN1@SecureWipe:

; 543  : 	else
; 544  : 		SecureWipeBuffer((byte *)buf, n * sizeof(T));
; 545  : }

  0005f	5f		 pop	 edi
  00060	c9		 leave
  00061	c3		 ret	 0
??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z ENDP		; CryptoPP::SecureWipeArray<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z
_TEXT	SEGMENT
__Al$ = -56						; size = 4
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
$T2 = -44						; size = 4
__Raw_new$ = -40					; size = 4
__Old_ptr$3 = -36					; size = 4
__Old_capacity$ = -32					; size = 4
__New_capacity$ = -28					; size = 4
__New_size$ = -24					; size = 4
__New_ptr$ = -20					; size = 4
__Old_size$ = -16					; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Overflow_is_possible$4 = -1				; size = 1
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >, COMDAT
; _this$ = ecx

; 4328 :     basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 4329 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4330 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4331 :         auto& _My_data            = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 4332 :         const size_type _Old_size = _My_data._Mysize;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00015	89 45 f0	 mov	 DWORD PTR __Old_size$[ebp], eax

; 4333 :         if (max_size() - _Old_size < _Size_increase) {

  00018	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00020	2b 45 f0	 sub	 eax, DWORD PTR __Old_size$[ebp]
  00023	3b 45 08	 cmp	 eax, DWORD PTR __Size_increase$[ebp]
  00026	73 05		 jae	 SHORT $LN2@Reallocate

; 4334 :             _Xlen_string(); // result too long

  00028	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4335 :         }
; 4336 : 
; 4337 :         const size_type _New_size     = _Old_size + _Size_increase;

  0002d	8b 45 f0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00030	03 45 08	 add	 eax, DWORD PTR __Size_increase$[ebp]
  00033	89 45 e8	 mov	 DWORD PTR __New_size$[ebp], eax

; 4338 :         const size_type _Old_capacity = _My_data._Myres;

  00036	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00039	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0003c	89 45 e0	 mov	 DWORD PTR __Old_capacity$[ebp], eax

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00047	50		 push	 eax
  00048	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	ff 70 14	 push	 DWORD PTR [eax+20]
  0004e	ff 75 e8	 push	 DWORD PTR __New_size$[ebp]
  00051	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH
  00059	89 45 e4	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4409 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00062	8b 45 d4	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 c8	 mov	 DWORD PTR __Al$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00068	c6 45 ff 00	 mov	 BYTE PTR __Overflow_is_possible$4[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4341 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0006c	8b 45 e4	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  0006f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00076	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4341 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00077	89 45 ec	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4342 :         _My_data._Orphan_all();
; 4343 :         _My_data._Mysize      = _New_size;

  0007a	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  0007d	8b 4d e8	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00080	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4344 :         _My_data._Myres       = _New_capacity;

  00083	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00086	8b 4d e4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00089	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4345 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  0008c	8b 45 ec	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  0008f	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00092	8b 45 d0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00095	89 45 d8	 mov	 DWORD PTR __Raw_new$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4346 :         if (_BUF_SIZE <= _Old_capacity) {

  00098	83 7d e0 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  0009c	72 3a		 jb	 SHORT $LN3@Reallocate

; 4347 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  0009e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a1	8b 00		 mov	 eax, DWORD PTR [eax]
  000a3	89 45 dc	 mov	 DWORD PTR __Old_ptr$3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  000a6	8b 45 dc	 mov	 eax, DWORD PTR __Old_ptr$3[ebp]
  000a9	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3830 :                     _Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);

  000ac	8b 45 f0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  000af	40		 inc	 eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b0	50		 push	 eax
  000b1	ff 75 cc	 push	 DWORD PTR $T1[ebp]
  000b4	ff 75 d8	 push	 DWORD PTR __Raw_new$[ebp]
  000b7	e8 00 00 00 00	 call	 _memcpy
  000bc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4348 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);
; 4349 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000bf	8b 45 e0	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  000c2	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c3	50		 push	 eax
  000c4	ff 75 dc	 push	 DWORD PTR __Old_ptr$3[ebp]
  000c7	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000cc	59		 pop	 ecx
  000cd	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4350 :             _My_data._Bx._Ptr = _New_ptr;

  000ce	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000d1	8b 4d ec	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000d4	89 08		 mov	 DWORD PTR [eax], ecx

; 4351 :         } else {

  000d6	eb 21		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3830 :                     _Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);

  000d8	8b 45 f0	 mov	 eax, DWORD PTR __Old_size$[ebp]
  000db	40		 inc	 eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000dc	50		 push	 eax
  000dd	ff 75 f8	 push	 DWORD PTR __My_data$[ebp]
  000e0	ff 75 d8	 push	 DWORD PTR __Raw_new$[ebp]
  000e3	e8 00 00 00 00	 call	 _memcpy
  000e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4352 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);
; 4353 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000eb	8d 45 ec	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000ee	50		 push	 eax
  000ef	ff 75 f8	 push	 DWORD PTR __My_data$[ebp]
  000f2	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000f7	59		 pop	 ecx
  000f8	59		 pop	 ecx
$LN4@Reallocate:

; 4354 :         }
; 4355 : 
; 4356 :         return *this;

  000f9	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4357 :     }

  000fc	c9		 leave
  000fd	c2 08 00	 ret	 8
??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 28		 push	 40			; 00000028H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@ABV01@@Z
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::~InputRejected, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	c9		 leave
  00010	c3		 ret	 0
??1InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::~InputRejected
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected, COMDAT
; _this$ = ecx

; 85   : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@
  00030	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00038	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 169  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  0003c	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  0003f	50		 push	 eax
  00040	6a 00		 push	 0
  00042	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::Exception::Exception
  0004a	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NotImplemented@CryptoPP@@6B@
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h

; 85   : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  00053	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00057	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h

; 85   : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  0005f	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00062	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@6B@
  00068	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	33 cd		 xor	 ecx, ebp
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	c9		 leave
  00081	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldlast$1 = -56					; size = 4
$T2 = -52						; size = 4
$T3 = -48						; size = 4
__Oldcapacity$4 = -44					; size = 4
__Last$ = -40						; size = 4
$T5 = -36						; size = 4
$T6 = -32						; size = 4
__Newlast$7 = -28					; size = 4
__Oldsize$ = -24					; size = 4
__Myfirst$ = -20					; size = 4
__My_data$ = -16					; size = 4
_this$ = -12						; size = 4
__Mylast$ = -8						; size = 4
___formal$ = -4						; size = 1
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1211 :     void _Resize(const size_type _Newsize, const _Ty2& _Val) { // trim or append elements, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1212 :         auto& _My_data      = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __My_data$[ebp], eax

; 1213 :         pointer& _Myfirst   = _My_data._Myfirst;

  0000f	8b 45 f0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 ec	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1214 :         pointer& _Mylast    = _My_data._Mylast;

  00015	8b 45 f0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f8	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1215 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00021	8b 4d ec	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	2b 01		 sub	 eax, DWORD PTR [ecx]
  00028	89 45 e8	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1216 :         if (_Newsize < _Oldsize) { // trim

  0002b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0002e	3b 45 e8	 cmp	 eax, DWORD PTR __Oldsize$[ebp]
  00031	73 3a		 jae	 SHORT $LN2@Resize

; 1217 :             const pointer _Newlast = _Myfirst + _Newsize;

  00033	8b 45 ec	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	03 45 08	 add	 eax, DWORD PTR __Newsize$[ebp]
  0003b	89 45 e4	 mov	 DWORD PTR __Newlast$7[ebp], eax

; 1218 :             _Orphan_range(_Newlast, _Mylast);
; 1219 :             _Destroy(_Newlast, _Mylast);

  0003e	8b 45 f8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00041	8b 00		 mov	 eax, DWORD PTR [eax]
  00043	89 45 d8	 mov	 DWORD PTR __Last$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  00046	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00049	89 45 e0	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0004c	8b 45 e0	 mov	 eax, DWORD PTR $T6[ebp]
  0004f	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00052	ff 75 dc	 push	 DWORD PTR $T5[ebp]
  00055	ff 75 d8	 push	 DWORD PTR __Last$[ebp]
  00058	ff 75 e4	 push	 DWORD PTR __Newlast$7[ebp]
  0005b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1220 :             _Mylast = _Newlast;

  00063	8b 45 f8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00066	8b 4d e4	 mov	 ecx, DWORD PTR __Newlast$7[ebp]
  00069	89 08		 mov	 DWORD PTR [eax], ecx

; 1221 :             return;

  0006b	eb 64		 jmp	 SHORT $LN1@Resize
$LN2@Resize:

; 1222 :         }
; 1223 : 
; 1224 :         if (_Newsize > _Oldsize) { // append

  0006d	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00070	3b 45 e8	 cmp	 eax, DWORD PTR __Oldsize$[ebp]
  00073	76 5c		 jbe	 SHORT $LN1@Resize

; 1225 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00075	8b 45 f0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00078	8b 4d ec	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0007b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0007e	2b 01		 sub	 eax, DWORD PTR [ecx]
  00080	89 45 d4	 mov	 DWORD PTR __Oldcapacity$4[ebp], eax

; 1226 :             if (_Newsize > _Oldcapacity) { // reallocate

  00083	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00086	3b 45 d4	 cmp	 eax, DWORD PTR __Oldcapacity$4[ebp]
  00089	76 10		 jbe	 SHORT $LN4@Resize

; 1227 :                 _Resize_reallocate(_Newsize, _Val);

  0008b	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0008e	ff 75 08	 push	 DWORD PTR __Newsize$[ebp]
  00091	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00094	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize_reallocate<std::_Value_init_tag>

; 1228 :                 return;

  00099	eb 36		 jmp	 SHORT $LN1@Resize
$LN4@Resize:

; 1229 :             }
; 1230 : 
; 1231 :             const pointer _Oldlast = _Mylast;

  0009b	8b 45 f8	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0009e	8b 00		 mov	 eax, DWORD PTR [eax]
  000a0	89 45 c8	 mov	 DWORD PTR __Oldlast$1[ebp], eax

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  000a3	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  000a6	8a 00		 mov	 al, BYTE PTR [eax]
  000a8	88 45 fc	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  000ab	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000ae	89 45 d0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  000b1	8b 45 d0	 mov	 eax, DWORD PTR $T3[ebp]
  000b4	89 45 cc	 mov	 DWORD PTR $T2[ebp], eax

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  000b7	ff 75 cc	 push	 DWORD PTR $T2[ebp]

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  000ba	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000bd	2b 45 e8	 sub	 eax, DWORD PTR __Oldsize$[ebp]

; 1583 :         return _Uninitialized_value_construct_n(_Dest, _Count, _Getal());

  000c0	50		 push	 eax
  000c1	ff 75 c8	 push	 DWORD PTR __Oldlast$1[ebp]
  000c4	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@E@std@@@std@@YAPAEPAEIAAV?$allocator@E@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned char> >
  000c9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1232 :             _Mylast                = _Ufill(_Oldlast, _Newsize - _Oldsize, _Val);

  000cc	8b 4d f8	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000cf	89 01		 mov	 DWORD PTR [ecx], eax
$LN1@Resize:

; 1233 :             _Orphan_range(_Oldlast, _Oldlast);
; 1234 :         }
; 1235 : 
; 1236 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1237 :     }

  000d1	c9		 leave
  000d2	c2 08 00	 ret	 8
??$_Resize@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 28		 push	 40			; 00000028H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@ABV01@@Z
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@ABU012@@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::~InputRejected, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	c9		 leave
  00010	c3		 ret	 0
??1InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::~InputRejected
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected, COMDAT
; _this$ = ecx

; 85   : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d d4	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@JMMKBAHA@BufferedTransformation?3?5this?5ob@
  00030	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00038	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 169  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  0003c	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  0003f	50		 push	 eax
  00040	6a 00		 push	 0
  00042	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::Exception::Exception
  0004a	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NotImplemented@CryptoPP@@6B@
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h

; 85   : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  00053	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00057	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0005a	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h

; 85   : 		{InputRejected() : NotImplemented("BufferedTransformation: this object doesn't allow input") {}};

  0005f	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  00062	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@6B@
  00068	8b 45 d4	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00075	59		 pop	 ecx
  00076	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00079	33 cd		 xor	 ecx, ebp
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	c9		 leave
  00081	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??1?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_this$ = -4						; size = 4
??1?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@QAE@XZ PROC ; std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>::~pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 c0 04	 add	 eax, 4
  0000e	89 45 fc	 mov	 DWORD PTR _this$[ebp], eax
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	83 c1 18	 add	 ecx, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  00017	e8 00 00 00 00	 call	 ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
  00024	c9		 leave
  00025	c3		 ret	 0
??1?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@QAE@XZ ENDP ; std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>::~pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo>
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 40	 add	 ecx, 64			; 00000040H
  00015	e8 00 00 00 00	 call	 ??1Base@XTEA@CryptoPP@@UAE@XZ
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001d	83 e0 01	 and	 eax, 1
  00020	74 0c		 je	 SHORT $LN2@scalar
  00022	6a 78		 push	 120			; 00000078H
  00024	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002c	59		 pop	 ecx
  0002d	59		 pop	 ecx
$LN2@scalar:
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c9		 leave
  00032	c2 04 00	 ret	 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 40	 add	 ecx, 64			; 00000040H
  00015	e8 00 00 00 00	 call	 ??1Base@XTEA@CryptoPP@@UAE@XZ
  0001a	c9		 leave
  0001b	c3		 ret	 0
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv64 = -76						; size = 4
tv81 = -72						; size = 4
$T2 = -68						; size = 4
$T3 = -64						; size = 24
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName, COMDAT

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	83 65 bc 00	 and	 DWORD PTR $T2[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h

; 27   : 	static std::string CRYPTOPP_API StaticAlgorithmName() {return ALGORITHM_INFO::StaticAlgorithmName();}

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_04OKOCCFHC@XTEA@
  00031	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00034	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00039	8b 45 bc	 mov	 eax, DWORD PTR $T2[ebp]
  0003c	83 c8 02	 or	 eax, 2
  0003f	89 45 bc	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00042	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  00045	89 45 b8	 mov	 DWORD PTR tv81[ebp], eax
  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1@
  00051	ff 75 b8	 push	 DWORD PTR tv81[ebp]
  00054	8d 45 c0	 lea	 eax, DWORD PTR $T3[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	89 45 b4	 mov	 DWORD PTR tv64[ebp], eax
  00063	8b 45 b4	 mov	 eax, DWORD PTR tv64[ebp]
  00066	89 45 b0	 mov	 DWORD PTR tv83[ebp], eax
  00069	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_03LECCGOIK@CTR@
  00072	ff 75 b0	 push	 DWORD PTR tv83[ebp]
  00075	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00078	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	8b 45 bc	 mov	 eax, DWORD PTR $T2[ebp]
  00083	83 c8 01	 or	 eax, 1
  00086	89 45 bc	 mov	 DWORD PTR $T2[ebp], eax
  00089	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0008d	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  00090	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00095	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00099	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  0009c	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b2	33 cd		 xor	 ecx, ebp
  000b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b9	c9		 leave
  000ba	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx

; 251  : 	CipherModeFinalTemplate_CipherHolder()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	51		 push	 ecx
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 252  : 	{

  00027	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c0 40	 add	 eax, 64			; 00000040H
  0002d	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
  00030	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::BlockCipherFinal<0,CryptoPP::XTEA::Enc>
  00038	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ
  00044	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00048	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00051	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
  0005b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  00065	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00068	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@

; 253  : 		this->m_cipher = &this->m_object;

  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 c0 40	 add	 eax, 64			; 00000040H
  00075	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 254  : 		this->ResizeBuffers();

  0007b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ ; CryptoPP::CipherModeBase::ResizeBuffers

; 255  : 	}

  00083	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00087	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	c9		 leave
  00096	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 40	 add	 ecx, 64			; 00000040H
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
; Function compile flags: /Odspy
;	COMDAT ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 28   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 65 fc 00	 and	 DWORD PTR $T1[ebp], 0
  0000c	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000f	e8 00 00 00 00	 call	 ?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName
  00014	59		 pop	 ecx
  00015	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  00018	83 c8 01	 or	 eax, 1
  0001b	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00021	c9		 leave
  00022	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Base@XTEA@CryptoPP@@UAE@XZ
  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc> >
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_G?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Base@XTEA@CryptoPP@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 38		 push	 56			; 00000038H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_G?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::IsForwardTransformation, COMDAT
; _this$ = ecx

; 162  : 	bool IsForwardTransformation() const {return DIR == ENCRYPTION;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::IsForwardTransformation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ??0?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::BlockCipherFinal<0,CryptoPP::XTEA::Enc>, COMDAT
; _this$ = ecx

; 154  :  	BlockCipherFinal() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0Base@XTEA@CryptoPP@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c9		 leave
  00026	c3		 ret	 0
??0?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>::BlockCipherFinal<0,CryptoPP::XTEA::Enc>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
tv85 = -28						; size = 4
$T2 = -24						; size = 4
tv84 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::Clone, COMDAT
; _this$ = ecx

; 19   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	6a 38		 push	 56			; 00000038H
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	59		 pop	 ecx
  00030	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  00033	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	83 7d f0 00	 cmp	 DWORD PTR $T3[ebp], 0
  0003b	74 2a		 je	 SHORT $LN3@Clone
  0003d	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 e8 04	 sub	 eax, 4
  00043	50		 push	 eax
  00044	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  00047	e8 00 00 00 00	 call	 ??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z
  0004c	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0004f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00055	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00058	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  0005f	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00062	89 45 ec	 mov	 DWORD PTR tv84[ebp], eax
  00065	eb 04		 jmp	 SHORT $LN4@Clone
$LN3@Clone:
  00067	83 65 ec 00	 and	 DWORD PTR tv84[ebp], 0
$LN4@Clone:
  0006b	8b 45 ec	 mov	 eax, DWORD PTR tv84[ebp]
  0006e	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00071	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00075	83 7d e8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00079	74 0b		 je	 SHORT $LN5@Clone
  0007b	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  0007e	83 c0 04	 add	 eax, 4
  00081	89 45 e4	 mov	 DWORD PTR tv85[ebp], eax
  00084	eb 04		 jmp	 SHORT $LN6@Clone
$LN5@Clone:
  00086	83 65 e4 00	 and	 DWORD PTR tv85[ebp], 0
$LN6@Clone:
  0008a	8b 45 e4	 mov	 eax, DWORD PTR tv85[ebp]
  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	c9		 leave
  00099	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ$0:
  00000	6a 38		 push	 56			; 00000038H
  00002	ff 75 f0	 push	 DWORD PTR $T3[ebp]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000a	59		 pop	 ecx
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
__ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ:
  00012	90		 npad	 1
  00013	90		 npad	 1
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0002a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@VEnc@XTEA@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::XTEA::Enc>::Clone
; Function compile flags: /Odspy
;	COMDAT ??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 40	 add	 ecx, 64			; 00000040H
  00015	e8 00 00 00 00	 call	 ??1Base@Twofish@CryptoPP@@UAE@XZ
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001d	83 e0 01	 and	 eax, 1
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	68 10 11 00 00	 push	 4368			; 00001110H
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 40	 add	 ecx, 64			; 00000040H
  00015	e8 00 00 00 00	 call	 ??1Base@Twofish@CryptoPP@@UAE@XZ
  0001a	c9		 leave
  0001b	c3		 ret	 0
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv64 = -76						; size = 4
tv81 = -72						; size = 4
$T2 = -68						; size = 4
$T3 = -64						; size = 24
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName, COMDAT

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	83 65 bc 00	 and	 DWORD PTR $T2[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h

; 27   : 	static std::string CRYPTOPP_API StaticAlgorithmName() {return ALGORITHM_INFO::StaticAlgorithmName();}

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_07DABDIDEC@Twofish@
  00031	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00034	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00039	8b 45 bc	 mov	 eax, DWORD PTR $T2[ebp]
  0003c	83 c8 02	 or	 eax, 2
  0003f	89 45 bc	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00042	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  00045	89 45 b8	 mov	 DWORD PTR tv81[ebp], eax
  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1@
  00051	ff 75 b8	 push	 DWORD PTR tv81[ebp]
  00054	8d 45 c0	 lea	 eax, DWORD PTR $T3[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	89 45 b4	 mov	 DWORD PTR tv64[ebp], eax
  00063	8b 45 b4	 mov	 eax, DWORD PTR tv64[ebp]
  00066	89 45 b0	 mov	 DWORD PTR tv83[ebp], eax
  00069	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_03LECCGOIK@CTR@
  00072	ff 75 b0	 push	 DWORD PTR tv83[ebp]
  00075	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00078	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	8b 45 bc	 mov	 eax, DWORD PTR $T2[ebp]
  00083	83 c8 01	 or	 eax, 1
  00086	89 45 bc	 mov	 DWORD PTR $T2[ebp], eax
  00089	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0008d	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  00090	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00095	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00099	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  0009c	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b2	33 cd		 xor	 ecx, ebp
  000b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b9	c9		 leave
  000ba	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx

; 251  : 	CipherModeFinalTemplate_CipherHolder()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 252  : 	{

  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c0 40	 add	 eax, 64			; 00000040H
  0002e	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
  00031	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00034	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0Base@Twofish@CryptoPP@@QAE@XZ
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h

; 154  :  	BlockCipherFinal() {}

  0003f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00048	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 252  : 	{

  00052	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00056	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ
  0005e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00062	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00065	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  0006b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
  00075	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00078	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  0007f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00082	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@

; 253  : 		this->m_cipher = &this->m_object;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	83 c0 40	 add	 eax, 64			; 00000040H
  0008f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00092	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 254  : 		this->ResizeBuffers();

  00095	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	e8 00 00 00 00	 call	 ?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ ; CryptoPP::CipherModeBase::ResizeBuffers

; 255  : 	}

  0009d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000a1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	c9		 leave
  000b0	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 40	 add	 ecx, 64			; 00000040H
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
; Function compile flags: /Odspy
;	COMDAT ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 28   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 65 fc 00	 and	 DWORD PTR $T1[ebp], 0
  0000c	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000f	e8 00 00 00 00	 call	 ?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName
  00014	59		 pop	 ecx
  00015	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  00018	83 c8 01	 or	 eax, 1
  0001b	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00021	c9		 leave
  00022	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Base@Twofish@CryptoPP@@UAE@XZ
  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc> >
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_G?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Base@Twofish@CryptoPP@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0f		 je	 SHORT $LN2@scalar
  00017	68 d0 10 00 00	 push	 4304			; 000010d0H
  0001c	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	59		 pop	 ecx
  00025	59		 pop	 ecx
$LN2@scalar:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c9		 leave
  0002a	c2 04 00	 ret	 4
??_G?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::IsForwardTransformation, COMDAT
; _this$ = ecx

; 162  : 	bool IsForwardTransformation() const {return DIR == ENCRYPTION;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?IsForwardTransformation@?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>::IsForwardTransformation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
tv85 = -28						; size = 4
$T2 = -24						; size = 4
tv84 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::Clone, COMDAT
; _this$ = ecx

; 19   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	68 d0 10 00 00	 push	 4304			; 000010d0H
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00032	59		 pop	 ecx
  00033	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  00036	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003a	83 7d f0 00	 cmp	 DWORD PTR $T3[ebp], 0
  0003e	74 2a		 je	 SHORT $LN3@Clone
  00040	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 e8 04	 sub	 eax, 4
  00046	50		 push	 eax
  00047	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  0004a	e8 00 00 00 00	 call	 ??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z
  0004f	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00052	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00058	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0005b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  00062	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00065	89 45 ec	 mov	 DWORD PTR tv84[ebp], eax
  00068	eb 04		 jmp	 SHORT $LN4@Clone
$LN3@Clone:
  0006a	83 65 ec 00	 and	 DWORD PTR tv84[ebp], 0
$LN4@Clone:
  0006e	8b 45 ec	 mov	 eax, DWORD PTR tv84[ebp]
  00071	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00074	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00078	83 7d e8 00	 cmp	 DWORD PTR $T2[ebp], 0
  0007c	74 0b		 je	 SHORT $LN5@Clone
  0007e	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00081	83 c0 04	 add	 eax, 4
  00084	89 45 e4	 mov	 DWORD PTR tv85[ebp], eax
  00087	eb 04		 jmp	 SHORT $LN6@Clone
$LN5@Clone:
  00089	83 65 e4 00	 and	 DWORD PTR tv85[ebp], 0
$LN6@Clone:
  0008d	8b 45 e4	 mov	 eax, DWORD PTR tv85[ebp]
  00090	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00093	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009a	59		 pop	 ecx
  0009b	c9		 leave
  0009c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ$0:
  00000	68 d0 10 00 00	 push	 4304			; 000010d0H
  00005	ff 75 f0	 push	 DWORD PTR $T3[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	59		 pop	 ecx
  0000e	59		 pop	 ecx
  0000f	c3		 ret	 0
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@VEnc@Twofish@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::Twofish::Enc>::Clone
; Function compile flags: /Odspy
;	COMDAT ??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 54	 add	 ecx, 84			; 00000054H
  00015	e8 00 00 00 00	 call	 ??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::~SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001d	83 e0 01	 and	 eax, 1
  00020	74 0c		 je	 SHORT $LN2@scalar
  00022	6a 60		 push	 96			; 00000060H
  00024	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002c	59		 pop	 ecx
  0002d	59		 pop	 ecx
$LN2@scalar:
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c9		 leave
  00032	c2 04 00	 ret	 4
??_G?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	83 c1 54	 add	 ecx, 84			; 00000054H
  00015	e8 00 00 00 00	 call	 ??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::~SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
  0001a	c9		 leave
  0001b	c3		 ret	 0
??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::~CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
tv83 = -80						; size = 4
tv64 = -76						; size = 4
tv81 = -72						; size = 4
$T2 = -68						; size = 4
$T3 = -64						; size = 24
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName, COMDAT

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	83 65 bc 00	 and	 DWORD PTR $T2[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h

; 27   : 	static std::string CRYPTOPP_API StaticAlgorithmName() {return ALGORITHM_INFO::StaticAlgorithmName();}

  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_08EGCCLPME@Camellia@
  00031	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00034	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00039	8b 45 bc	 mov	 eax, DWORD PTR $T2[ebp]
  0003c	83 c8 02	 or	 eax, 2
  0003f	89 45 bc	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00042	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  00045	89 45 b8	 mov	 DWORD PTR tv81[ebp], eax
  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_01KMDKNFGN@?1@
  00051	ff 75 b8	 push	 DWORD PTR tv81[ebp]
  00054	8d 45 c0	 lea	 eax, DWORD PTR $T3[ebp]
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	89 45 b4	 mov	 DWORD PTR tv64[ebp], eax
  00063	8b 45 b4	 mov	 eax, DWORD PTR tv64[ebp]
  00066	89 45 b0	 mov	 DWORD PTR tv83[ebp], eax
  00069	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_03LECCGOIK@CTR@
  00072	ff 75 b0	 push	 DWORD PTR tv83[ebp]
  00075	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00078	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	8b 45 bc	 mov	 eax, DWORD PTR $T2[ebp]
  00083	83 c8 01	 or	 eax, 1
  00086	89 45 bc	 mov	 DWORD PTR $T2[ebp], eax
  00089	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0008d	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  00090	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  00095	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00099	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  0009c	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 273  : 		{return CIPHER::StaticAlgorithmName() + "/" + BASE::StaticAlgorithmName();}

  000a1	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ae	59		 pop	 ecx
  000af	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b2	33 cd		 xor	 ecx, ebp
  000b4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b9	c9		 leave
  000ba	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >, COMDAT
; _this$ = ecx

; 251  : 	CipherModeFinalTemplate_CipherHolder()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	51		 push	 ecx
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 252  : 	{

  00027	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c0 40	 add	 eax, 64			; 00000040H
  0002d	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
  00030	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::BlockCipherFinal<0,CryptoPP::Camellia::Base>
  00038	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ
  00044	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00048	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00051	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BStreamTransformation@1@@
  0005b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  00065	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00068	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], OFFSET ??_7?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@6BRandomNumberGenerator@1@@

; 253  : 		this->m_cipher = &this->m_object;

  0006f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00072	83 c0 40	 add	 eax, 64			; 00000040H
  00075	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 254  : 		this->ResizeBuffers();

  0007b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ ; CryptoPP::CipherModeBase::ResizeBuffers

; 255  : 	}

  00083	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00087	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	c9		 leave
  00096	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 40	 add	 ecx, 64			; 00000040H
  00006	e9 00 00 00 00	 jmp	 ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
__unwindfunclet$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
; Function compile flags: /Odspy
;	COMDAT ??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::~AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 28   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 65 fc 00	 and	 DWORD PTR $T1[ebp], 0
  0000c	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0000f	e8 00 00 00 00	 call	 ?StaticAlgorithmName@?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::StaticAlgorithmName
  00014	59		 pop	 ecx
  00015	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  00018	83 c8 01	 or	 eax, 1
  0001b	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00021	c9		 leave
  00022	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@V?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@2@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>,CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> > >::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 14	 add	 ecx, 20			; 00000014H
  0000d	e8 00 00 00 00	 call	 ??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::~SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
  00012	c9		 leave
  00013	c3		 ret	 0
??1?$ObjectHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >::~ObjectHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base> >
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 14	 add	 ecx, 20			; 00000014H
  0000d	e8 00 00 00 00	 call	 ??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::~SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
  00012	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	74 0c		 je	 SHORT $LN2@scalar
  0001a	6a 20		 push	 32			; 00000020H
  0001c	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	59		 pop	 ecx
  00025	59		 pop	 ecx
$LN2@scalar:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c9		 leave
  0002a	c2 04 00	 ret	 4
??_G?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::IsForwardTransformation, COMDAT
; _this$ = ecx

; 162  : 	bool IsForwardTransformation() const {return DIR == ENCRYPTION;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?IsForwardTransformation@?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::IsForwardTransformation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ??0?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::BlockCipherFinal<0,CryptoPP::Camellia::Base>, COMDAT
; _this$ = ecx

; 154  :  	BlockCipherFinal() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0Base@Camellia@CryptoPP@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c9		 leave
  00026	c3		 ret	 0
??0?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>::BlockCipherFinal<0,CryptoPP::Camellia::Base>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ
_TEXT	SEGMENT
_this$ = -32						; size = 4
tv85 = -28						; size = 4
$T2 = -24						; size = 4
tv84 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ PROC ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::Clone, COMDAT
; _this$ = ecx

; 19   : 	Clonable * Clone() const {return new DERIVED(*static_cast<const DERIVED *>(this));}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d e0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	6a 20		 push	 32			; 00000020H
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	59		 pop	 ecx
  00030	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  00033	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	83 7d f0 00	 cmp	 DWORD PTR $T3[ebp], 0
  0003b	74 2a		 je	 SHORT $LN3@Clone
  0003d	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	83 e8 04	 sub	 eax, 4
  00043	50		 push	 eax
  00044	8b 4d f0	 mov	 ecx, DWORD PTR $T3[ebp]
  00047	e8 00 00 00 00	 call	 ??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z
  0004c	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0004f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00055	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00058	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@6BBlockTransformation@1@@
  0005f	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00062	89 45 ec	 mov	 DWORD PTR tv84[ebp], eax
  00065	eb 04		 jmp	 SHORT $LN4@Clone
$LN3@Clone:
  00067	83 65 ec 00	 and	 DWORD PTR tv84[ebp], 0
$LN4@Clone:
  0006b	8b 45 ec	 mov	 eax, DWORD PTR tv84[ebp]
  0006e	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00071	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00075	83 7d e8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00079	74 0b		 je	 SHORT $LN5@Clone
  0007b	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  0007e	83 c0 04	 add	 eax, 4
  00081	89 45 e4	 mov	 DWORD PTR tv85[ebp], eax
  00084	eb 04		 jmp	 SHORT $LN6@Clone
$LN5@Clone:
  00086	83 65 e4 00	 and	 DWORD PTR tv85[ebp], 0
$LN6@Clone:
  0008a	8b 45 e4	 mov	 eax, DWORD PTR tv85[ebp]
  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	c9		 leave
  00099	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ$0:
  00000	6a 20		 push	 32			; 00000020H
  00002	ff 75 f0	 push	 DWORD PTR $T3[ebp]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000a	59		 pop	 ecx
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
__ehhandler$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ:
  00012	90		 npad	 1
  00013	90		 npad	 1
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ
  0002a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@?$ClonableImpl@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@VBase@Camellia@2@@CryptoPP@@UBEPAVClonable@2@XZ ENDP ; CryptoPP::ClonableImpl<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::Camellia::Base>::Clone
; Function compile flags: /Odspy
;	COMDAT ??__Frnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ
text$yd	SEGMENT
??__Frnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ PROC ; `EterPackPolicy_CSHybridCrypt::GenerateCryptKey'::`2'::`dynamic atexit destructor for 'rnd'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
  00008	e8 00 00 00 00	 call	 ??1RandomPool@CryptoPP@@UAE@XZ
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
??__Frnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ENDP ; `EterPackPolicy_CSHybridCrypt::GenerateCryptKey'::`2'::`dynamic atexit destructor for 'rnd''
text$yd	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z PROC	; CryptoPP::AutoSeededRandomPool::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1RandomPool@CryptoPP@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 60		 push	 96			; 00000060H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GAutoSeededRandomPool@CryptoPP@@UAEPAXI@Z ENDP	; CryptoPP::AutoSeededRandomPool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??1RandomPool@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1RandomPool@CryptoPP@@UAE@XZ PROC			; CryptoPP::RandomPool::~RandomPool, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1RandomPool@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 c1 58	 add	 ecx, 88			; 00000058H
  0002e	e8 00 00 00 00	 call	 ??1?$member_ptr@VBlockCipher@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BlockCipher>::~member_ptr<CryptoPP::BlockCipher>
  00033	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 c0 38	 add	 eax, 56			; 00000038H
  00039	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  0003c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	ff 70 18	 push	 DWORD PTR [eax+24]
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	ff 70 1c	 push	 DWORD PTR [eax+28]
  0004c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?deallocate@?$FixedSizeAllocatorWithCleanup@E$0BA@V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,16,CryptoPP::NullAllocator<unsigned char>,0>::deallocate
  00054	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00058	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	83 c0 08	 add	 eax, 8
  0005e	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
  00061	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00068	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	ff 70 28	 push	 DWORD PTR [eax+40]
  0006e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00071	ff 70 2c	 push	 DWORD PTR [eax+44]
  00074	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?deallocate@?$FixedSizeAllocatorWithCleanup@E$0CA@V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,32,CryptoPP::NullAllocator<unsigned char>,0>::deallocate
  0007c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00080	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00083	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008a	59		 pop	 ecx
  0008b	c9		 leave
  0008c	c3		 ret	 0
  0008d	cc		 int	 3
  0008e	cc		 int	 3
  0008f	cc		 int	 3
  00090	cc		 int	 3
  00091	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1RandomPool@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1RandomPool@CryptoPP@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1RandomPool@CryptoPP@@UAE@XZ ENDP			; CryptoPP::RandomPool::~RandomPool
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h
;	COMDAT ??1?$member_ptr@VBlockCipher@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
tv75 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -4						; size = 4
??1?$member_ptr@VBlockCipher@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::member_ptr<CryptoPP::BlockCipher>::~member_ptr<CryptoPP::BlockCipher>, COMDAT
; _this$ = ecx

; 49   : template <class T> member_ptr<T>::~member_ptr() {delete m_p;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
  0000e	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00011	83 7d fc 00	 cmp	 DWORD PTR $T1[ebp], 0
  00015	74 11		 je	 SHORT $LN3@member_ptr
  00017	6a 01		 push	 1
  00019	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00021	ff 10		 call	 DWORD PTR [eax]
  00023	89 45 f4	 mov	 DWORD PTR tv75[ebp], eax
  00026	eb 04		 jmp	 SHORT $LN2@member_ptr
$LN3@member_ptr:
  00028	83 65 f4 00	 and	 DWORD PTR tv75[ebp], 0
$LN2@member_ptr:
  0002c	c9		 leave
  0002d	c3		 ret	 0
??1?$member_ptr@VBlockCipher@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::member_ptr<CryptoPP::BlockCipher>::~member_ptr<CryptoPP::BlockCipher>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ?deallocate@?$FixedSizeAllocatorWithCleanup@E$0BA@V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z
_TEXT	SEGMENT
tv81 = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?deallocate@?$FixedSizeAllocatorWithCleanup@E$0BA@V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,16,CryptoPP::NullAllocator<unsigned char>,0>::deallocate, COMDAT
; _this$ = ecx

; 193  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  00008	33 c0		 xor	 eax, eax
  0000a	74 14		 je	 SHORT $LN7@deallocate
  0000c	33 c0		 xor	 eax, eax
  0000e	2b 45 fc	 sub	 eax, DWORD PTR _this$[ebp]
  00011	33 d2		 xor	 edx, edx
  00013	6a 10		 push	 16			; 00000010H
  00015	59		 pop	 ecx
  00016	f7 f1		 div	 ecx
  00018	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  0001b	89 55 f8	 mov	 DWORD PTR tv81[ebp], edx
  0001e	eb 06		 jmp	 SHORT $LN5@deallocate
$LN7@deallocate:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv81[ebp], eax
$LN5@deallocate:

; 194  : 		if (p == GetAlignedArray())

  00026	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00029	3b 45 f8	 cmp	 eax, DWORD PTR tv81[ebp]
  0002c	75 14		 jne	 SHORT $LN1@deallocate

; 195  : 		{
; 196  : 			assert(n <= S);
; 197  : 			assert(m_allocated);
; 198  : 			m_allocated = false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c6 40 11 00	 mov	 BYTE PTR [eax+17], 0

; 199  : 			SecureWipeArray((pointer)p, n);

  00035	ff 75 0c	 push	 DWORD PTR _n$[ebp]
  00038	ff 75 08	 push	 DWORD PTR _p$[ebp]
  0003b	e8 00 00 00 00	 call	 ??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z ; CryptoPP::SecureWipeArray<unsigned char>
  00040	59		 pop	 ecx
  00041	59		 pop	 ecx
$LN1@deallocate:

; 200  : 		}
; 201  : 		else
; 202  : 			m_fallbackAllocator.deallocate(p, n);
; 203  : 	}

  00042	c9		 leave
  00043	c2 08 00	 ret	 8
?deallocate@?$FixedSizeAllocatorWithCleanup@E$0BA@V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,16,CryptoPP::NullAllocator<unsigned char>,0>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ?deallocate@?$FixedSizeAllocatorWithCleanup@E$0CA@V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z
_TEXT	SEGMENT
tv81 = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?deallocate@?$FixedSizeAllocatorWithCleanup@E$0CA@V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,32,CryptoPP::NullAllocator<unsigned char>,0>::deallocate, COMDAT
; _this$ = ecx

; 193  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  00008	33 c0		 xor	 eax, eax
  0000a	74 14		 je	 SHORT $LN7@deallocate
  0000c	33 c0		 xor	 eax, eax
  0000e	2b 45 fc	 sub	 eax, DWORD PTR _this$[ebp]
  00011	33 d2		 xor	 edx, edx
  00013	6a 10		 push	 16			; 00000010H
  00015	59		 pop	 ecx
  00016	f7 f1		 div	 ecx
  00018	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  0001b	89 55 f8	 mov	 DWORD PTR tv81[ebp], edx
  0001e	eb 06		 jmp	 SHORT $LN5@deallocate
$LN7@deallocate:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv81[ebp], eax
$LN5@deallocate:

; 194  : 		if (p == GetAlignedArray())

  00026	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00029	3b 45 f8	 cmp	 eax, DWORD PTR tv81[ebp]
  0002c	75 14		 jne	 SHORT $LN1@deallocate

; 195  : 		{
; 196  : 			assert(n <= S);
; 197  : 			assert(m_allocated);
; 198  : 			m_allocated = false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c6 40 21 00	 mov	 BYTE PTR [eax+33], 0

; 199  : 			SecureWipeArray((pointer)p, n);

  00035	ff 75 0c	 push	 DWORD PTR _n$[ebp]
  00038	ff 75 08	 push	 DWORD PTR _p$[ebp]
  0003b	e8 00 00 00 00	 call	 ??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z ; CryptoPP::SecureWipeArray<unsigned char>
  00040	59		 pop	 ecx
  00041	59		 pop	 ecx
$LN1@deallocate:

; 200  : 		}
; 201  : 		else
; 202  : 			m_fallbackAllocator.deallocate(p, n);
; 203  : 	}

  00042	c9		 leave
  00043	c2 08 00	 ret	 8
?deallocate@?$FixedSizeAllocatorWithCleanup@E$0CA@V?$NullAllocator@E@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned char,32,CryptoPP::NullAllocator<unsigned char>,0>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\randpool.h
;	COMDAT ?CanIncorporateEntropy@RandomPool@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CanIncorporateEntropy@RandomPool@CryptoPP@@UBE_NXZ PROC ; CryptoPP::RandomPool::CanIncorporateEntropy, COMDAT
; _this$ = ecx

; 17   : 	bool CanIncorporateEntropy() const {return true;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?CanIncorporateEntropy@RandomPool@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::RandomPool::CanIncorporateEntropy
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GStringSource@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GStringSource@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::StringSource::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
  00012	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	74 0c		 je	 SHORT $LN2@scalar
  0001a	6a 38		 push	 56			; 00000038H
  0001c	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	59		 pop	 ecx
  00025	59		 pop	 ecx
$LN2@scalar:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c9		 leave
  0002a	c2 04 00	 ret	 4
??_GStringSource@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::StringSource::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
_TEXT	SEGMENT
$T2 = -64						; size = 24
$T3 = -40						; size = 12
$T4 = -28						; size = 4
tv170 = -24						; size = 4
tv145 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_string$ = 8						; size = 4
_length$ = 12						; size = 4
_pumpAll$ = 16						; size = 1
_attachment$ = 20					; size = 4
??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z PROC ; CryptoPP::StringSource::StringSource, COMDAT
; _this$ = ecx

; 789  : 	StringSource(const byte *string, size_t length, bool pumpAll, BufferedTransformation *attachment = NULL)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 790  : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string, length)));}

  00028	ff 75 14	 push	 DWORD PTR _attachment$[ebp]
  0002b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceTemplate<CryptoPP::StringStore>
  00033	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7StringSource@CryptoPP@@6BAlgorithm@1@@
  00040	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7StringSource@CryptoPP@@6BWaitable@1@@
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 20   : 	ConstByteArrayParameter(const byte *data, size_t size, bool deepCopy = false)

  0004a	6a 00		 push	 0
  0004c	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp+12]
  0004f	e8 00 00 00 00	 call	 ??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  00054	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 21   : 	{
; 22   : 		Assign(data, size, deepCopy);

  00058	6a 00		 push	 0
  0005a	ff 75 0c	 push	 DWORD PTR _length$[ebp]
  0005d	ff 75 08	 push	 DWORD PTR _string$[ebp]
  00060	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00063	e8 00 00 00 00	 call	 ?Assign@ConstByteArrayParameter@CryptoPP@@QAEXPBEI_N@Z ; CryptoPP::ConstByteArrayParameter::Assign

; 23   : 	}

  00068	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 790  : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string, length)));}

  0006c	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  0006f	89 45 ec	 mov	 DWORD PTR tv145[ebp], eax
  00072	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00076	6a 01		 push	 1
  00078	ff 75 ec	 push	 DWORD PTR tv145[ebp]
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JMHEFFAI@InputBuffer@
  00080	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
  00089	83 c4 10	 add	 esp, 16			; 00000010H
  0008c	89 45 e8	 mov	 DWORD PTR tv170[ebp], eax
  0008f	8b 45 e8	 mov	 eax, DWORD PTR tv170[ebp]
  00092	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
  00095	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 747  : 		IsolatedInitialize(parameters);

  00099	ff 75 e4	 push	 DWORD PTR $T4[ebp]
  0009c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 00		 mov	 eax, DWORD PTR [eax]
  000a1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	ff 50 1c	 call	 DWORD PTR [eax+28]

; 748  : 		if (pumpAll)

  000a7	0f b6 45 10	 movzx	 eax, BYTE PTR _pumpAll$[ebp]
  000ab	85 c0		 test	 eax, eax
  000ad	74 10		 je	 SHORT $LN87@StringSour

; 738  : 		{PumpAll2();}

  000af	6a 01		 push	 1
  000b1	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b4	8b 00		 mov	 eax, DWORD PTR [eax]
  000b6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	ff 90 c4 00 00
	00		 call	 DWORD PTR [eax+196]
$LN87@StringSour:

; 790  : 		: SourceTemplate<StringStore>(attachment) {SourceInitialize(pumpAll, MakeParameters("InputBuffer", ConstByteArrayParameter(string, length)));}

  000bf	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000c3	8d 4d dc	 lea	 ecx, DWORD PTR $T3[ebp+4]
  000c6	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  000cb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000cf	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp+12]
  000d2	e8 00 00 00 00	 call	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  000d7	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000db	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000de	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e8	59		 pop	 ecx
  000e9	c9		 leave
  000ea	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$14:
  00008	8d 4d cc	 lea	 ecx, DWORD PTR $T2[ebp+12]
  0000b	e9 00 00 00 00	 jmp	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$1:
  00010	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
__unwindfunclet$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z$2:
  00018	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1AlgorithmParameters@CryptoPP@@UAE@XZ
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ENDP ; CryptoPP::StringSource::StringSource
; Function compile flags: /Odspy
;	COMDAT ??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
  00012	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00015	83 e0 01	 and	 eax, 1
  00018	74 0c		 je	 SHORT $LN2@scalar
  0001a	6a 38		 push	 56			; 00000038H
  0001c	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	59		 pop	 ecx
  00025	59		 pop	 ecx
$LN2@scalar:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c9		 leave
  0002a	c2 04 00	 ret	 4
??_G?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
  00012	c9		 leave
  00013	c3		 ret	 0
??1?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::~SourceTemplate<CryptoPP::StringStore>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::GetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 773  : 		{return m_store.GetAutoSignalPropagation();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 18	 add	 ecx, 24			; 00000018H
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00013	ff 50 38	 call	 DWORD PTR [eax+56]
  00016	c9		 leave
  00017	c3		 ret	 0
?GetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBEHXZ ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::GetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_propagation$ = 8					; size = 4
?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 771  : 		{m_store.SetAutoSignalPropagation(propagation);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR _propagation$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	83 c1 18	 add	 ecx, 24			; 00000018H
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00016	ff 50 34	 call	 DWORD PTR [eax+52]
  00019	c9		 leave
  0001a	c2 04 00	 ret	 4
?SetAutoSignalPropagation@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXH@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceExhausted, COMDAT
; _this$ = ecx

; 769  : 		{return !m_store.AnyRetrievable() && !m_store.AnyMessages();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 18	 add	 ecx, 24			; 00000018H
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00014	ff 50 40	 call	 DWORD PTR [eax+64]
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	75 1f		 jne	 SHORT $LN3@SourceExha
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 18	 add	 ecx, 24			; 00000018H
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0002a	ff 50 60	 call	 DWORD PTR [eax+96]
  0002d	0f b6 c0	 movzx	 eax, al
  00030	85 c0		 test	 eax, eax
  00032	75 09		 jne	 SHORT $LN3@SourceExha
  00034	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv88[ebp], 1
  0003b	eb 04		 jmp	 SHORT $LN4@SourceExha
$LN3@SourceExha:
  0003d	83 65 f8 00	 and	 DWORD PTR tv88[ebp], 0
$LN4@SourceExha:
  00041	8a 45 f8	 mov	 al, BYTE PTR tv88[ebp]
  00044	c9		 leave
  00045	c3		 ret	 0
?SourceExhausted@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceExhausted
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_blocking$ = 8						; size = 1
?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2, COMDAT
; _this$ = ecx

; 767  : 		{return m_store.TransferAllTo2(*AttachedTransformation(), DEFAULT_CHANNEL, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR _blocking$[ebp]
  0000a	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 00		 mov	 eax, DWORD PTR [eax]
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]
  0001d	50		 push	 eax
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 18	 add	 ecx, 24			; 00000018H
  00024	e8 00 00 00 00	 call	 ?TransferAllTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::BufferedTransformation::TransferAllTo2
  00029	c9		 leave
  0002a	c2 04 00	 ret	 4
?PumpAll2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEI_N@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpAll2
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_messageCount$ = 8					; size = 4
_blocking$ = 12						; size = 1
?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpMessages2, COMDAT
; _this$ = ecx

; 765  : 		{return m_store.TransferMessagesTo2(*AttachedTransformation(), messageCount, DEFAULT_CHANNEL, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 0c	 push	 DWORD PTR _blocking$[ebp]
  0000a	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  0000f	ff 75 08	 push	 DWORD PTR _messageCount$[ebp]
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 00		 mov	 eax, DWORD PTR [eax]
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 18	 add	 ecx, 24			; 00000018H
  00027	e8 00 00 00 00	 call	 ?TransferMessagesTo2@BufferedTransformation@CryptoPP@@QAEIAAV12@AAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ; CryptoPP::BufferedTransformation::TransferMessagesTo2
  0002c	c9		 leave
  0002d	c2 08 00	 ret	 8
?PumpMessages2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAAI_N@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::PumpMessages2
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_byteCount$ = 8						; size = 4
_blocking$ = 12						; size = 1
?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::Pump2, COMDAT
; _this$ = ecx

; 763  : 		{return m_store.TransferTo2(*AttachedTransformation(), byteCount, DEFAULT_CHANNEL, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 0c	 push	 DWORD PTR _blocking$[ebp]
  0000a	68 00 00 00 00	 push	 OFFSET ?DEFAULT_CHANNEL@CryptoPP@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B ; CryptoPP::DEFAULT_CHANNEL
  0000f	ff 75 08	 push	 DWORD PTR _byteCount$[ebp]
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 00		 mov	 eax, DWORD PTR [eax]
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 18	 add	 ecx, 24			; 00000018H
  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  0002d	ff 50 7c	 call	 DWORD PTR [eax+124]
  00030	c9		 leave
  00031	c2 08 00	 ret	 8
?Pump2@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEIAA_K_N@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::Pump2
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_parameters$ = 8					; size = 4
?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize, COMDAT
; _this$ = ecx

; 761  : 		{m_store.IsolatedInitialize(parameters);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR _parameters$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	83 c1 18	 add	 ecx, 24			; 00000018H
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00016	ff 50 1c	 call	 DWORD PTR [eax+28]
  00019	c9		 leave
  0001a	c2 04 00	 ret	 4
?IsolatedInitialize@?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::IsolatedInitialize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_attachment$ = 8					; size = 4
??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z PROC ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceTemplate<CryptoPP::StringStore>, COMDAT
; _this$ = ecx

; 758  : 	SourceTemplate<T>(BufferedTransformation *attachment)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	6a 00		 push	 0
  00028	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0Filter@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z ; CryptoPP::Filter::Filter

; 730  : 	Source(BufferedTransformation *attachment = NULL)

  00030	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 731  : 		{Source::Detach(attachment);}

  00034	ff 75 08	 push	 DWORD PTR _attachment$[ebp]
  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?Detach@Filter@CryptoPP@@UAEXPAVBufferedTransformation@2@@Z ; CryptoPP::Filter::Detach

; 759  : 		: Source(attachment) {}

  0003f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00046	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BAlgorithm@1@@
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@6BWaitable@1@@
  00059	6a 00		 push	 0
  0005b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	83 c1 18	 add	 ecx, 24			; 00000018H
  00061	e8 00 00 00 00	 call	 ??0StringStore@CryptoPP@@QAE@PBD@Z ; CryptoPP::StringStore::StringStore
  00066	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0006a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00077	59		 pop	 ecx
  00078	c9		 leave
  00079	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
__unwindfunclet$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1Source@CryptoPP@@UAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$SourceTemplate@VStringStore@CryptoPP@@@CryptoPP@@QAE@PAVBufferedTransformation@1@@Z ENDP ; CryptoPP::SourceTemplate<CryptoPP::StringStore>::SourceTemplate<CryptoPP::StringStore>
; Function compile flags: /Odspy
;	COMDAT ??1Source@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Source@CryptoPP@@UAE@XZ PROC				; CryptoPP::Source::~Source, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
  00012	c9		 leave
  00013	c3		 ret	 0
??1Source@CryptoPP@@UAE@XZ ENDP				; CryptoPP::Source::~Source
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::~InputRejecting<CryptoPP::Filter>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
  00012	c9		 leave
  00013	c3		 ret	 0
??1?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::~InputRejecting<CryptoPP::Filter>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelMessageSeriesEnd, COMDAT
; _this$ = ecx

; 95   : 	bool ChannelMessageSeriesEnd(const std::string &, int, bool) {throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  00013	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00016	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  0001b	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  00020	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@ChannelMes:
  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	c9		 leave
  00034	c2 0c 00	 ret	 12			; 0000000cH
?ChannelMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_channel$ = 8						; size = 4
_begin$ = 12						; size = 4
_length$ = 16						; size = 4
_messageEnd$ = 20					; size = 4
_blocking$ = 24						; size = 1
?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelPut2, COMDAT
; _this$ = ecx

; 94   : 		{throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  00013	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00016	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  0001b	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  00020	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@ChannelPut:
  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	c9		 leave
  00034	c2 14 00	 ret	 20			; 00000014H
?ChannelPut2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::ChannelPut2
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 1
?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedMessageSeriesEnd, COMDAT
; _this$ = ecx

; 91   : 	bool IsolatedMessageSeriesEnd(bool) {throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  00013	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00016	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  0001b	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  00020	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@IsolatedMe:
  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	c9		 leave
  00034	c2 04 00	 ret	 4
?IsolatedMessageSeriesEnd@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
___formal$ = 12						; size = 1
?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedFlush, COMDAT
; _this$ = ecx

; 90   : 	bool IsolatedFlush(bool, bool) {return false;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	c9		 leave
  0000a	c2 08 00	 ret	 8
?IsolatedFlush@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::IsolatedFlush
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_begin$ = 8						; size = 4
_length$ = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::Filter>::Put2, COMDAT
; _this$ = ecx

; 89   : 		{throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  00013	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00016	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::Filter>::InputRejected::InputRejected
  0001b	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@
  00020	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Put2:
  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	c9		 leave
  00034	c2 10 00	 ret	 16			; 00000010H
?Put2@?$InputRejecting@VFilter@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::Filter>::Put2
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
;	COMDAT ??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
_TEXT	SEGMENT
$T2 = -36						; size = 12
tv78 = -24						; size = 4
tv65 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_name$ = 12						; size = 4
_value$ = 16						; size = 4
_throwIfNotUsed$ = 20					; size = 1
??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z PROC ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>, COMDAT

; 387  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	83 65 f0 00	 and	 DWORD PTR $T3[ebp], 0

; 388  : 	return AlgorithmParameters()(name, value, throwIfNotUsed);

  00029	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  0002c	e8 00 00 00 00	 call	 ??0AlgorithmParameters@CryptoPP@@QAE@XZ ; CryptoPP::AlgorithmParameters::AlgorithmParameters
  00031	89 45 ec	 mov	 DWORD PTR tv65[ebp], eax
  00034	8b 45 ec	 mov	 eax, DWORD PTR tv65[ebp]
  00037	89 45 e8	 mov	 DWORD PTR tv78[ebp], eax
  0003a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	ff 75 14	 push	 DWORD PTR _throwIfNotUsed$[ebp]
  00041	ff 75 10	 push	 DWORD PTR _value$[ebp]
  00044	ff 75 0c	 push	 DWORD PTR _name$[ebp]
  00047	8b 4d e8	 mov	 ecx, DWORD PTR tv78[ebp]
  0004a	e8 00 00 00 00	 call	 ??$?RVConstByteArrayParameter@CryptoPP@@@AlgorithmParameters@CryptoPP@@QAEAAV01@PBDABVConstByteArrayParameter@1@_N@Z ; CryptoPP::AlgorithmParameters::operator()<CryptoPP::ConstByteArrayParameter>
  0004f	50		 push	 eax
  00050	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00053	e8 00 00 00 00	 call	 ??0AlgorithmParameters@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::AlgorithmParameters::AlgorithmParameters
  00058	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0005b	83 c8 01	 or	 eax, 1
  0005e	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  00061	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00065	8d 4d e0	 lea	 ecx, DWORD PTR $T2[ebp+4]
  00068	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  0006d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 389  : }

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	c9		 leave
  0007c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1AlgorithmParameters@CryptoPP@@UAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ENDP ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
; Function compile flags: /Odspy
;	COMDAT ??_GStringStore@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GStringStore@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::StringStore::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000a	83 e0 01	 and	 eax, 1
  0000d	74 0c		 je	 SHORT $LN2@scalar
  0000f	6a 20		 push	 32			; 00000020H
  00011	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	59		 pop	 ecx
  0001a	59		 pop	 ecx
$LN2@scalar:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??_GStringStore@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::StringStore::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ??0StringStore@CryptoPP@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -68						; size = 24
$T3 = -44						; size = 12
tv140 = -32						; size = 4
tv185 = -28						; size = 4
tv138 = -24						; size = 4
tv192 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_string$ = 8						; size = 4
??0StringStore@CryptoPP@@QAE@PBD@Z PROC			; CryptoPP::StringStore::StringStore, COMDAT
; _this$ = ecx

; 669  : 	StringStore(const char *string = NULL)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0StringStore@CryptoPP@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 777  : 	BufferedTransformation() : Algorithm(false) {}

  00028	6a 00		 push	 0
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h

; 155  : 	AutoSignaling(int propagation=-1) : m_autoSignalPropagation(propagation) {}

  00032	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	83 48 0c ff	 or	 DWORD PTR [eax+12], -1

; 170  : 	Store() : m_messageEnd(false) {}

  00039	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 669  : 	StringStore(const char *string = NULL)

  00040	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00047	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7StringStore@CryptoPP@@6BAlgorithm@1@@
  0004d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00050	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7StringStore@CryptoPP@@6BWaitable@1@@

; 670  : 		{StoreInitialize(MakeParameters("InputBuffer", ConstByteArrayParameter(string)));}

  00057	6a 00		 push	 0
  00059	ff 75 08	 push	 DWORD PTR _string$[ebp]
  0005c	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  0005f	e8 00 00 00 00	 call	 ??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z ; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter
  00064	89 45 ec	 mov	 DWORD PTR tv192[ebp], eax
  00067	8b 45 ec	 mov	 eax, DWORD PTR tv192[ebp]
  0006a	89 45 e8	 mov	 DWORD PTR tv138[ebp], eax
  0006d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00071	6a 01		 push	 1
  00073	ff 75 e8	 push	 DWORD PTR tv138[ebp]
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0M@JMHEFFAI@InputBuffer@
  0007b	8d 45 d4	 lea	 eax, DWORD PTR $T3[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??$MakeParameters@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@YA?AVAlgorithmParameters@0@PBDABVConstByteArrayParameter@0@_N@Z ; CryptoPP::MakeParameters<CryptoPP::ConstByteArrayParameter>
  00084	83 c4 10	 add	 esp, 16			; 00000010H
  00087	89 45 e4	 mov	 DWORD PTR tv185[ebp], eax
  0008a	8b 45 e4	 mov	 eax, DWORD PTR tv185[ebp]
  0008d	89 45 e0	 mov	 DWORD PTR tv140[ebp], eax
  00090	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00094	ff 75 e0	 push	 DWORD PTR tv140[ebp]
  00097	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009a	e8 00 00 00 00	 call	 ?StoreInitialize@StringStore@CryptoPP@@EAEXABVNameValuePairs@2@@Z ; CryptoPP::StringStore::StoreInitialize
  0009f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000a3	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp+4]
  000a6	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  000ab	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000af	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp+12]
  000b2	e8 00 00 00 00	 call	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  000b7	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000bb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	c9		 leave
  000ca	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1Store@CryptoPP@@UAE@XZ
__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$1:
  00008	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
__unwindfunclet$??0StringStore@CryptoPP@@QAE@PBD@Z$2:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T3[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1AlgorithmParameters@CryptoPP@@UAE@XZ
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??0StringStore@CryptoPP@@QAE@PBD@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0StringStore@CryptoPP@@QAE@PBD@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0StringStore@CryptoPP@@QAE@PBD@Z ENDP			; CryptoPP::StringStore::StringStore
; Function compile flags: /Odspy
;	COMDAT ??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0000a	83 e0 01	 and	 eax, 1
  0000d	74 0c		 je	 SHORT $LN2@scalar
  0000f	6a 10		 push	 16			; 00000010H
  00011	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	59		 pop	 ecx
  0001a	59		 pop	 ecx
$LN2@scalar:
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??_G?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
$T1 = -40						; size = 4
__ULast$2 = -36						; size = 4
__Last$ = -32						; size = 4
__First$ = -28						; size = 4
$T3 = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__UFirst$4 = -12					; size = 4
_size$5 = -8						; size = 4
_this$ = -4						; size = 4
_begin$ = 8						; size = 4
_length$ = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Put2, COMDAT
; _this$ = ecx

; 598  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 599  : 		if (length > 0)

  00009	83 7d 0c 00	 cmp	 DWORD PTR _length$[ebp], 0
  0000d	0f 86 83 00 00
	00		 jbe	 $LN2@Put2

; 600  : 		{
; 601  : 			typename T::size_type size = m_output->size();

  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00019	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3770 :         return _Mypair._Myval2._Mysize;

  0001c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00022	89 45 f8	 mov	 DWORD PTR _size$5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 602  : 			if (length < size && size + length > m_output->capacity())

  00025	8b 45 0c	 mov	 eax, DWORD PTR _length$[ebp]
  00028	3b 45 f8	 cmp	 eax, DWORD PTR _size$5[ebp]
  0002b	73 2e		 jae	 SHORT $LN3@Put2
  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00033	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3793 :         return _Mypair._Myval2._Myres;

  00036	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0003c	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 602  : 			if (length < size && size + length > m_output->capacity())

  0003f	8b 45 f8	 mov	 eax, DWORD PTR _size$5[ebp]
  00042	03 45 0c	 add	 eax, DWORD PTR _length$[ebp]
  00045	3b 45 e8	 cmp	 eax, DWORD PTR $T3[ebp]
  00048	76 11		 jbe	 SHORT $LN3@Put2

; 603  : 				m_output->reserve(2*size);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _size$5[ebp]
  0004d	d1 e0		 shl	 eax, 1
  0004f	50		 push	 eax
  00050	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00056	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
$LN3@Put2:

; 604  : 		m_output->append((const char_type *)begin, (const char_type *)begin+length);

  0005b	8b 45 08	 mov	 eax, DWORD PTR _begin$[ebp]
  0005e	03 45 0c	 add	 eax, DWORD PTR _length$[ebp]
  00061	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00064	8b 45 08	 mov	 eax, DWORD PTR _begin$[ebp]
  00067	89 45 e4	 mov	 DWORD PTR __First$[ebp], eax
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00070	89 45 d4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2986 :         const auto _UFirst = _Get_unwrapped(_First);

  00073	8b 45 e4	 mov	 eax, DWORD PTR __First$[ebp]
  00076	89 45 f4	 mov	 DWORD PTR __UFirst$4[ebp], eax

; 2987 :         const auto _ULast  = _Get_unwrapped(_Last);

  00079	8b 45 e0	 mov	 eax, DWORD PTR __Last$[ebp]
  0007c	89 45 dc	 mov	 DWORD PTR __ULast$2[ebp], eax

; 2989 :             return append(_UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  0007f	8b 45 dc	 mov	 eax, DWORD PTR __ULast$2[ebp]
  00082	2b 45 f4	 sub	 eax, DWORD PTR __UFirst$4[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  00085	89 45 d8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2989 :             return append(_UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  00088	ff 75 d8	 push	 DWORD PTR $T1[ebp]
  0008b	ff 75 f4	 push	 DWORD PTR __UFirst$4[ebp]
  0008e	8b 4d d4	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN2@Put2:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 606  : 		return 0;

  00096	33 c0		 xor	 eax, eax

; 607  : 	}

  00098	c9		 leave
  00099	c2 10 00	 ret	 16			; 00000010H
?Put2@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEIPBEIH_N@Z ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::Put2
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_parameters$ = 8					; size = 4
?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z PROC ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsolatedInitialize, COMDAT
; _this$ = ecx

; 595  : 		{if (!parameters.GetValue("OutputStringPointer", m_output)) throw InvalidArgument("StringSink: OutputStringPointer not specified");}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d ac	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 ac	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c0 0c	 add	 eax, 12			; 0000000cH
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 264  : 		return GetVoidValue(name, typeid(T), &value);

  00031	50		 push	 eax
  00032	68 00 00 00 00	 push	 OFFSET ??_R0PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NDOICOBI@OutputStringPointer@
  0003c	8b 45 08	 mov	 eax, DWORD PTR _parameters$[ebp]
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _parameters$[ebp]
  00044	ff 50 04	 call	 DWORD PTR [eax+4]
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 595  : 		{if (!parameters.GetValue("OutputStringPointer", m_output)) throw InvalidArgument("StringSink: OutputStringPointer not specified");}

  00047	0f b6 c0	 movzx	 eax, al
  0004a	85 c0		 test	 eax, eax
  0004c	75 37		 jne	 SHORT $LN3@IsolatedIn
  0004e	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@DDPAKADP@StringSink?3?5OutputStringPointer@
  00053	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00056	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0005f	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00062	50		 push	 eax
  00063	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00066	e8 00 00 00 00	 call	 ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
  0006b	68 00 00 00 00	 push	 OFFSET __TI3?AVInvalidArgument@CryptoPP@@
  00070	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 __CxxThrowException@8
  00079	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0007d	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00080	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
$LN3@IsolatedIn:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 595  : 		{if (!parameters.GetValue("OutputStringPointer", m_output)) throw InvalidArgument("StringSink: OutputStringPointer not specified");}

  00085	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00088	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008f	59		 pop	 ecx
  00090	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00093	33 cd		 xor	 ecx, ebp
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	c9		 leave
  0009b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IsolatedInitialize@?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@UAEXABVNameValuePairs@2@@Z ENDP ; CryptoPP::StringSinkTemplate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::IsolatedInitialize
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h
;	COMDAT ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
tv75 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -4						; size = 4
??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>, COMDAT
; _this$ = ecx

; 49   : template <class T> member_ptr<T>::~member_ptr() {delete m_p;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
  0000e	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00011	83 7d fc 00	 cmp	 DWORD PTR $T1[ebp], 0
  00015	74 11		 je	 SHORT $LN3@member_ptr
  00017	6a 01		 push	 1
  00019	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00021	ff 10		 call	 DWORD PTR [eax]
  00023	89 45 f4	 mov	 DWORD PTR tv75[ebp], eax
  00026	eb 04		 jmp	 SHORT $LN2@member_ptr
$LN3@member_ptr:
  00028	83 65 f4 00	 and	 DWORD PTR tv75[ebp], 0
$LN2@member_ptr:
  0002c	c9		 leave
  0002d	c3		 ret	 0
??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ PROC ; CryptoPP::Filter::ShouldPropagateMessageSeriesEnd, COMDAT
; _this$ = ecx

; 39   : 	virtual bool ShouldPropagateMessageSeriesEnd() const {return true;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?ShouldPropagateMessageSeriesEnd@Filter@CryptoPP@@MBE_NXZ ENDP ; CryptoPP::Filter::ShouldPropagateMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ PROC ; CryptoPP::Filter::ShouldPropagateMessageEnd, COMDAT
; _this$ = ecx

; 38   : 	virtual bool ShouldPropagateMessageEnd() const {return true;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?ShouldPropagateMessageEnd@Filter@CryptoPP@@MBE_NXZ ENDP ; CryptoPP::Filter::ShouldPropagateMessageEnd
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
;	COMDAT ?Attachable@Filter@CryptoPP@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Attachable@Filter@CryptoPP@@UAE_NXZ PROC		; CryptoPP::Filter::Attachable, COMDAT
; _this$ = ecx

; 22   : 	bool Attachable() {return true;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?Attachable@Filter@CryptoPP@@UAE_NXZ ENDP		; CryptoPP::Filter::Attachable
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_G?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 40		 push	 64			; 00000040H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_G?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BSimpleKeyingInterface@1@@
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BStreamTransformation@1@@
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6B?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@1@@
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], OFFSET ??_7?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@6BRandomNumberGenerator@1@@
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c9		 leave
  0003a	c3		 ret	 0
??0?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\strciphr.h
;	COMDAT ?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::AccessPolicy, COMDAT
; _this$ = ecx

; 54   : 	POLICY_INTERFACE & AccessPolicy() {return *this;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 18	 add	 eax, 24			; 00000018H
  0000d	c9		 leave
  0000e	c3		 ret	 0
?AccessPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MAEAAUAdditiveCipherAbstractPolicy@2@XZ ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::AccessPolicy
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\strciphr.h
;	COMDAT ?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ PROC ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::GetPolicy, COMDAT
; _this$ = ecx

; 53   : 	const POLICY_INTERFACE & GetPolicy() const {return *this;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 18	 add	 eax, 24			; 00000018H
  0000d	c9		 leave
  0000e	c3		 ret	 0
?GetPolicy@?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@CryptoPP@@MBEABUAdditiveCipherAbstractPolicy@2@XZ ENDP ; CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy>::GetPolicy
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0000d	e8 00 00 00 00	 call	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00018	e8 00 00 00 00	 call	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00023	e8 00 00 00 00	 call	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  00028	c9		 leave
  00029	c3		 ret	 0
??1?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::~AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	51		 push	 ecx
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00027	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??0CipherModeBase@CryptoPP@@IAE@XZ ; CryptoPP::CipherModeBase::CipherModeBase
  0002f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00033	6a 00		 push	 0
  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0003b	e8 00 00 00 00	 call	 ??0?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  00040	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00044	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0004b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	83 c0 28	 add	 eax, 40			; 00000028H
  00051	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
  00054	6a 01		 push	 1
  00056	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0005e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00062	6a 00		 push	 0
  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	83 c1 2c	 add	 ecx, 44			; 0000002cH
  0006a	e8 00 00 00 00	 call	 ??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  0006f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00073	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	c9		 leave
  00082	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ$4:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ
__unwindfunclet$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::~AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>
__unwindfunclet$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ$1:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 28	 add	 ecx, 40			; 00000028H
  00016	e9 00 00 00 00	 jmp	 ??1RandomNumberGenerator@CryptoPP@@UAE@XZ
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\strciphr.h
;	COMDAT ?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsRandomAccess, COMDAT
; _this$ = ecx

; 145  : 	bool IsRandomAccess() const {return this->GetPolicy().CipherIsRandomAccess();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 e9 04	 sub	 ecx, 4
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
  00014	ff 50 48	 call	 DWORD PTR [eax+72]
  00017	89 45 f8	 mov	 DWORD PTR tv75[ebp], eax
  0001a	8b 45 f8	 mov	 eax, DWORD PTR tv75[ebp]
  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR tv75[ebp]
  00022	ff 50 28	 call	 DWORD PTR [eax+40]
  00025	c9		 leave
  00026	c3		 ret	 0
?IsRandomAccess@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsRandomAccess
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\strciphr.h
;	COMDAT ?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsForwardTransformation, COMDAT
; _this$ = ecx

; 144  : 	bool IsForwardTransformation() const {return true;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?IsForwardTransformation@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsForwardTransformation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\strciphr.h
;	COMDAT ?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsSelfInverting, COMDAT
; _this$ = ecx

; 143  : 	bool IsSelfInverting() const {return true;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?IsSelfInverting@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::IsSelfInverting
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\strciphr.h
;	COMDAT ?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalDataAlignment, COMDAT
; _this$ = ecx

; 142  : 	unsigned int OptimalDataAlignment() const {return this->GetPolicy().GetAlignment();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 e9 04	 sub	 ecx, 4
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
  00014	ff 50 48	 call	 DWORD PTR [eax+72]
  00017	89 45 f8	 mov	 DWORD PTR tv75[ebp], eax
  0001a	8b 45 f8	 mov	 eax, DWORD PTR tv75[ebp]
  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR tv75[ebp]
  00022	ff 50 04	 call	 DWORD PTR [eax+4]
  00025	c9		 leave
  00026	c3		 ret	 0
?OptimalDataAlignment@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalDataAlignment
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\strciphr.h
;	COMDAT ?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
tv75 = -8						; size = 4
_this$ = -4						; size = 4
?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ PROC ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalBlockSize, COMDAT
; _this$ = ecx

; 140  : 	unsigned int OptimalBlockSize() const {return this->GetPolicy().GetOptimalBlockSize();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 e9 04	 sub	 ecx, 4
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 fc	 mov	 eax, DWORD PTR [eax-4]
  00014	ff 50 48	 call	 DWORD PTR [eax+72]
  00017	89 45 f8	 mov	 DWORD PTR tv75[ebp], eax
  0001a	8b 45 f8	 mov	 eax, DWORD PTR tv75[ebp]
  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR tv75[ebp]
  00022	ff 50 0c	 call	 DWORD PTR [eax+12]
  00025	c9		 leave
  00026	c3		 ret	 0
?OptimalBlockSize@?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >::OptimalBlockSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\strciphr.h
;	COMDAT ??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::~AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>, COMDAT
; _this$ = ecx

; 42   : 	virtual ~AbstractPolicyHolder() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000d	e8 00 00 00 00	 call	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00018	e8 00 00 00 00	 call	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>::~AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ PROC ; CryptoPP::CTR_ModePolicy::CanOperateKeystream, COMDAT
; _this$ = ecx

; 152  : 	bool CanOperateKeystream() const {return true;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?CanOperateKeystream@CTR_ModePolicy@CryptoPP@@MBE_NXZ ENDP ; CryptoPP::CTR_ModePolicy::CanOperateKeystream
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_iterationCount$ = 12					; size = 4
?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z PROC ; CryptoPP::CTR_ModePolicy::WriteKeystream, COMDAT
; _this$ = ecx

; 151  : 		{OperateKeystream(WRITE_KEYSTREAM, buffer, NULL, iterationCount);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 0c	 push	 DWORD PTR _iterationCount$[ebp]
  0000a	6a 00		 push	 0
  0000c	ff 75 08	 push	 DWORD PTR _buffer$[ebp]
  0000f	6a 04		 push	 4
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	ff 50 1c	 call	 DWORD PTR [eax+28]
  0001c	c9		 leave
  0001d	c2 08 00	 ret	 8
?WriteKeystream@CTR_ModePolicy@CryptoPP@@MAEXPAEI@Z ENDP ; CryptoPP::CTR_ModePolicy::WriteKeystream
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ PROC ; CryptoPP::CTR_ModePolicy::GetIterationsToBuffer, COMDAT
; _this$ = ecx

; 149  : 	unsigned int GetIterationsToBuffer() const {return m_cipher->OptimalNumberOfParallelBlocks();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 f0	 mov	 eax, DWORD PTR [eax-16]
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 49 f0	 mov	 ecx, DWORD PTR [ecx-16]
  00013	83 c1 04	 add	 ecx, 4
  00016	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00019	ff 50 20	 call	 DWORD PTR [eax+32]
  0001c	c9		 leave
  0001d	c3		 ret	 0
?GetIterationsToBuffer@CTR_ModePolicy@CryptoPP@@MBEIXZ ENDP ; CryptoPP::CTR_ModePolicy::GetIterationsToBuffer
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ PROC ; CryptoPP::CTR_ModePolicy::GetBytesPerIteration, COMDAT
; _this$ = ecx

; 148  : 	unsigned int GetBytesPerIteration() const {return BlockSize();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h

; 302  : 	size_type size() const {return m_size;}

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	8b 40 f8	 mov	 eax, DWORD PTR [eax-8]
  0000e	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 148  : 	unsigned int GetBytesPerIteration() const {return BlockSize();}

  00011	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00014	c9		 leave
  00015	c3		 ret	 0
?GetBytesPerIteration@CTR_ModePolicy@CryptoPP@@MBEIXZ ENDP ; CryptoPP::CTR_ModePolicy::GetBytesPerIteration
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ PROC	; CryptoPP::CTR_ModePolicy::GetAlignment, COMDAT
; _this$ = ecx

; 147  : 	unsigned int GetAlignment() const {return m_cipher->OptimalDataAlignment();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 f0	 mov	 eax, DWORD PTR [eax-16]
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 49 f0	 mov	 ecx, DWORD PTR [ecx-16]
  00013	83 c1 04	 add	 ecx, 4
  00016	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00019	ff 50 14	 call	 DWORD PTR [eax+20]
  0001c	c9		 leave
  0001d	c3		 ret	 0
?GetAlignment@CTR_ModePolicy@CryptoPP@@MBEIXZ ENDP	; CryptoPP::CTR_ModePolicy::GetAlignment
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::CTR_ModePolicy::IVRequirement, COMDAT
; _this$ = ecx

; 141  : 	IV_Requirement IVRequirement() const {return RANDOM_IV;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	40		 inc	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?IVRequirement@CTR_ModePolicy@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::CTR_ModePolicy::IVRequirement
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ PROC ; CryptoPP::CTR_ModePolicy::CipherIsRandomAccess, COMDAT
; _this$ = ecx

; 140  : 	bool CipherIsRandomAccess() const {return true;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?CipherIsRandomAccess@CTR_ModePolicy@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::CTR_ModePolicy::CipherIsRandomAccess
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ PROC ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::~ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  00012	c9		 leave
  00013	c3		 ret	 0
??1?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::~ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z
_TEXT	SEGMENT
_feedbackSize$ = -12					; size = 4
_defaultValue$ = -8					; size = 4
_this$ = -4						; size = 4
_params$ = 8						; size = 4
_key$ = 12						; size = 4
_length$ = 16						; size = 4
?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z PROC ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::CipherSetKey, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   : 	m_cipher->SetKey(key, length, params);

  00009	ff 75 08	 push	 DWORD PTR _params$[ebp]
  0000c	ff 75 10	 push	 DWORD PTR _length$[ebp]
  0000f	ff 75 0c	 push	 DWORD PTR _key$[ebp]
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 f0	 mov	 eax, DWORD PTR [eax-16]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	8b 49 f0	 mov	 ecx, DWORD PTR [ecx-16]
  00020	ff 50 18	 call	 DWORD PTR [eax+24]

; 90   : 	ResizeBuffers();

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	83 e9 18	 sub	 ecx, 24			; 00000018H
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 40 e8	 mov	 eax, DWORD PTR [eax-24]
  0002f	ff 50 40	 call	 DWORD PTR [eax+64]
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 287  : 		{return GetValueWithDefault(name, defaultValue);}

  00032	83 65 f8 00	 and	 DWORD PTR _defaultValue$[ebp], 0

; 264  : 		return GetVoidValue(name, typeid(T), &value);

  00036	8d 45 f8	 lea	 eax, DWORD PTR _defaultValue$[ebp]
  00039	50		 push	 eax
  0003a	68 00 00 00 00	 push	 OFFSET ??_R0H@8
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GKFFKNHD@FeedbackSize@
  00044	8b 45 08	 mov	 eax, DWORD PTR _params$[ebp]
  00047	8b 00		 mov	 eax, DWORD PTR [eax]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _params$[ebp]
  0004c	ff 50 04	 call	 DWORD PTR [eax+4]
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 91   : 	int feedbackSize = params.GetIntValueWithDefault(Name::FeedbackSize(), 0);

  0004f	8b 45 f8	 mov	 eax, DWORD PTR _defaultValue$[ebp]
  00052	89 45 f4	 mov	 DWORD PTR _feedbackSize$[ebp], eax

; 92   : 	SetFeedbackSize(feedbackSize);

  00055	ff 75 f4	 push	 DWORD PTR _feedbackSize$[ebp]
  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	83 e9 18	 sub	 ecx, 24			; 00000018H
  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 40 e8	 mov	 eax, DWORD PTR [eax-24]
  00064	ff 50 3c	 call	 DWORD PTR [eax+60]

; 93   : }

  00067	c9		 leave
  00068	c2 0c 00	 ret	 12			; 0000000cH
?CipherSetKey@?$ModePolicyCommonTemplate@UAdditiveCipherAbstractPolicy@CryptoPP@@@CryptoPP@@EAEXABVNameValuePairs@2@PBEI@Z ENDP ; CryptoPP::ModePolicyCommonTemplate<CryptoPP::AdditiveCipherAbstractPolicy>::CipherSetKey
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ?New@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEXI@Z
_TEXT	SEGMENT
_p$ = -12						; size = 4
_oldSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?New@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEXI@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::New, COMDAT
; _this$ = ecx

; 362  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 363  : 		m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, false);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	89 45 f8	 mov	 DWORD PTR _oldSize$[ebp], eax
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 117  : 		return StandardReallocate(*this, p, oldSize, newSize, preserve);

  0001b	6a 00		 push	 0
  0001d	ff 75 08	 push	 DWORD PTR _newSize$[ebp]
  00020	ff 75 f8	 push	 DWORD PTR _oldSize$[ebp]
  00023	ff 75 f4	 push	 DWORD PTR _p$[ebp]
  00026	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$00@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  0002e	83 c4 14	 add	 esp, 20			; 00000014H

; 363  : 		m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, false);

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 364  : 		m_size = newSize;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _newSize$[ebp]
  0003d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 365  : 	}

  00040	c9		 leave
  00041	c2 04 00	 ret	 4
?New@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEXI@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::New
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_n$ = -24						; size = 4
_this$ = -20						; size = 4
_p$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >, COMDAT
; _this$ = ecx

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002e	89 45 e8	 mov	 DWORD PTR _n$[ebp], eax
  00031	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00037	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax

; 105  : 		SecureWipeArray((pointer)p, n);

  0003a	ff 75 e8	 push	 DWORD PTR _n$[ebp]
  0003d	ff 75 f0	 push	 DWORD PTR _p$[ebp]
  00040	e8 00 00 00 00	 call	 ??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z ; CryptoPP::SecureWipeArray<unsigned char>
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 106  : 
; 107  : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 108  : 		if (T_Align16 && n*sizeof(T) >= 16)

  00047	33 c0		 xor	 eax, eax
  00049	40		 inc	 eax
  0004a	74 11		 je	 SHORT $LN4@SecBlock
  0004c	83 7d e8 10	 cmp	 DWORD PTR _n$[ebp], 16	; 00000010H
  00050	72 0b		 jb	 SHORT $LN4@SecBlock

; 109  : 			return AlignedDeallocate(p);

  00052	ff 75 f0	 push	 DWORD PTR _p$[ebp]
  00055	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  0005a	59		 pop	 ecx
  0005b	eb 09		 jmp	 SHORT $LN2@SecBlock
$LN4@SecBlock:

; 110  : #endif
; 111  : 
; 112  : 		UnalignedDeallocate(p);

  0005d	ff 75 f0	 push	 DWORD PTR _p$[ebp]
  00060	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  00065	59		 pop	 ecx
$LN2@SecBlock:

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  00066	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00070	59		 pop	 ecx
  00071	c9		 leave
  00072	c3		 ret	 0
  00073	cc		 int	 3
  00074	cc		 int	 3
  00075	cc		 int	 3
  00076	cc		 int	 3
  00077	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
_size$ = 8						; size = 4
??0?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@I@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >, COMDAT
; _this$ = ecx

; 246  : 	explicit SecBlock(size_type size=0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  0000e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 91   : 		CheckSize(n);

  00011	ff 75 08	 push	 DWORD PTR _size$[ebp]
  00014	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  00019	59		 pop	 ecx

; 92   : 		if (n == 0)

  0001a	83 7d 08 00	 cmp	 DWORD PTR _size$[ebp], 0
  0001e	75 06		 jne	 SHORT $LN6@SecBlock

; 93   : 			return NULL;

  00020	83 65 fc 00	 and	 DWORD PTR $T1[ebp], 0
  00024	eb 25		 jmp	 SHORT $LN5@SecBlock
$LN6@SecBlock:

; 94   : 
; 95   : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 96   : 		if (T_Align16 && n*sizeof(T) >= 16)

  00026	33 c0		 xor	 eax, eax
  00028	40		 inc	 eax
  00029	74 14		 je	 SHORT $LN7@SecBlock
  0002b	83 7d 08 10	 cmp	 DWORD PTR _size$[ebp], 16 ; 00000010H
  0002f	72 0e		 jb	 SHORT $LN7@SecBlock

; 97   : 			return (pointer)AlignedAllocate(n*sizeof(T));

  00031	ff 75 08	 push	 DWORD PTR _size$[ebp]
  00034	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  00039	59		 pop	 ecx
  0003a	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0003d	eb 0c		 jmp	 SHORT $LN5@SecBlock
$LN7@SecBlock:

; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  0003f	ff 75 08	 push	 DWORD PTR _size$[ebp]
  00042	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00047	59		 pop	 ecx
  00048	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
$LN5@SecBlock:

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00051	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00054	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00057	c9		 leave
  00058	c2 04 00	 ret	 4
??0?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@I@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ PROC	; CryptoPP::CipherModeBase::ResizeBuffers, COMDAT
; _this$ = ecx

; 71   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 72   : 		m_register.New(m_cipher->BlockSize());

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00013	83 c1 04	 add	 ecx, 4
  00016	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00019	ff 50 10	 call	 DWORD PTR [eax+16]
  0001c	50		 push	 eax
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00023	e8 00 00 00 00	 call	 ?New@?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAEXI@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::New

; 73   : 	}

  00028	c9		 leave
  00029	c3		 ret	 0
?ResizeBuffers@CipherModeBase@CryptoPP@@MAEXXZ ENDP	; CryptoPP::CipherModeBase::ResizeBuffers
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
_TEXT	SEGMENT
$T2 = -88						; size = 4
_this$ = -84						; size = 4
$T3 = -80						; size = 40
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_feedbackSize$ = 8					; size = 4
?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z PROC	; CryptoPP::CipherModeBase::SetFeedbackSize, COMDAT
; _this$ = ecx

; 66   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d ac	 mov	 DWORD PTR _this$[ebp], ecx

; 67   : 		if (!(feedbackSize == 0 || feedbackSize == BlockSize()))

  0002b	83 7d 08 00	 cmp	 DWORD PTR _feedbackSize$[ebp], 0
  0002f	74 48		 je	 SHORT $LN3@SetFeedbac
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h

; 302  : 	size_type size() const {return m_size;}

  00031	8b 45 ac	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00037	89 45 a8	 mov	 DWORD PTR $T2[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 67   : 		if (!(feedbackSize == 0 || feedbackSize == BlockSize()))

  0003a	8b 45 08	 mov	 eax, DWORD PTR _feedbackSize$[ebp]
  0003d	3b 45 a8	 cmp	 eax, DWORD PTR $T2[ebp]
  00040	74 37		 je	 SHORT $LN3@SetFeedbac

; 68   : 			throw InvalidArgument("CipherModeBase: feedback size cannot be specified for this cipher mode");

  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@FMNEDLJE@CipherModeBase?3?5feedback?5size?5c@
  00047	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  0004a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  00056	50		 push	 eax
  00057	8d 4d b0	 lea	 ecx, DWORD PTR $T3[ebp]
  0005a	e8 00 00 00 00	 call	 ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
  0005f	68 00 00 00 00	 push	 OFFSET __TI3?AVInvalidArgument@CryptoPP@@
  00064	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 __CxxThrowException@8
  0006d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00071	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00074	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
$LN3@SetFeedbac:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 69   : 	}

  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00087	33 cd		 xor	 ecx, ebp
  00089	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008e	c9		 leave
  0008f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetFeedbackSize@CipherModeBase@CryptoPP@@MAEXI@Z ENDP	; CryptoPP::CipherModeBase::SetFeedbackSize
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ??0CipherModeBase@CryptoPP@@IAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CipherModeBase@CryptoPP@@IAE@XZ PROC			; CryptoPP::CipherModeBase::CipherModeBase, COMDAT
; _this$ = ecx

; 63   : 	CipherModeBase() : m_cipher(NULL) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CipherModeBase@CryptoPP@@IAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	51		 push	 ecx
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00027	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c0 04	 add	 eax, 4
  00031	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
  00034	6a 01		 push	 1
  00036	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0003e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00045	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00048	83 60 08 00	 and	 DWORD PTR [eax+8], 0
  0004c	6a 00		 push	 0
  0004e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00054	e8 00 00 00 00	 call	 ??0?$SecBlock@EV?$AllocatorWithCleanup@E$00@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,1> >
  00059	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	c9		 leave
  0006c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CipherModeBase@CryptoPP@@IAE@XZ$2:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SimpleKeyingInterface@CryptoPP@@UAE@XZ ; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
__unwindfunclet$??0CipherModeBase@CryptoPP@@IAE@XZ$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1SymmetricCipher@CryptoPP@@UAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0CipherModeBase@CryptoPP@@IAE@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CipherModeBase@CryptoPP@@IAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CipherModeBase@CryptoPP@@IAE@XZ ENDP			; CryptoPP::CipherModeBase::CipherModeBase
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?IVSize@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?IVSize@CipherModeBase@CryptoPP@@UBEIXZ PROC		; CryptoPP::CipherModeBase::IVSize, COMDAT
; _this$ = ecx

; 42   : 	unsigned int IVSize() const {return BlockSize();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h

; 302  : 	size_type size() const {return m_size;}

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000e	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h

; 42   : 	unsigned int IVSize() const {return BlockSize();}

  00011	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00014	c9		 leave
  00015	c3		 ret	 0
?IVSize@CipherModeBase@CryptoPP@@UBEIXZ ENDP		; CryptoPP::CipherModeBase::IVSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z PROC ; CryptoPP::CipherModeBase::IsValidKeyLength, COMDAT
; _this$ = ecx

; 38   : 	bool IsValidKeyLength(size_t n) const {return m_cipher->IsValidKeyLength(n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR _n$[ebp]
  0000a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00018	ff 50 14	 call	 DWORD PTR [eax+20]
  0001b	c9		 leave
  0001c	c2 04 00	 ret	 4
?IsValidKeyLength@CipherModeBase@CryptoPP@@UBE_NI@Z ENDP ; CryptoPP::CipherModeBase::IsValidKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z PROC ; CryptoPP::CipherModeBase::GetValidKeyLength, COMDAT
; _this$ = ecx

; 37   : 	size_t GetValidKeyLength(size_t n) const {return m_cipher->GetValidKeyLength(n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR _n$[ebp]
  0000a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	8b 00		 mov	 eax, DWORD PTR [eax]
  00015	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00018	ff 50 10	 call	 DWORD PTR [eax+16]
  0001b	c9		 leave
  0001c	c2 04 00	 ret	 4
?GetValidKeyLength@CipherModeBase@CryptoPP@@UBEII@Z ENDP ; CryptoPP::CipherModeBase::GetValidKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ PROC	; CryptoPP::CipherModeBase::DefaultKeyLength, COMDAT
; _this$ = ecx

; 36   : 	size_t DefaultKeyLength() const {return m_cipher->DefaultKeyLength();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00015	ff 50 0c	 call	 DWORD PTR [eax+12]
  00018	c9		 leave
  00019	c3		 ret	 0
?DefaultKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ENDP	; CryptoPP::CipherModeBase::DefaultKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ PROC	; CryptoPP::CipherModeBase::MaxKeyLength, COMDAT
; _this$ = ecx

; 35   : 	size_t MaxKeyLength() const {return m_cipher->MaxKeyLength();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00015	ff 50 08	 call	 DWORD PTR [eax+8]
  00018	c9		 leave
  00019	c3		 ret	 0
?MaxKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ENDP	; CryptoPP::CipherModeBase::MaxKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\modes.h
;	COMDAT ?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ PROC	; CryptoPP::CipherModeBase::MinKeyLength, COMDAT
; _this$ = ecx

; 34   : 	size_t MinKeyLength() const {return m_cipher->MinKeyLength();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00015	ff 50 04	 call	 DWORD PTR [eax+4]
  00018	c9		 leave
  00019	c3		 ret	 0
?MinKeyLength@CipherModeBase@CryptoPP@@UBEIXZ ENDP	; CryptoPP::CipherModeBase::MinKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1AlgorithmParameters@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1AlgorithmParameters@CryptoPP@@UAE@XZ PROC		; CryptoPP::AlgorithmParameters::~AlgorithmParameters, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 04	 add	 ecx, 4
  0000d	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  00012	c9		 leave
  00013	c3		 ret	 0
??1AlgorithmParameters@CryptoPP@@UAE@XZ ENDP		; CryptoPP::AlgorithmParameters::~AlgorithmParameters
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000d	e8 00 00 00 00	 call	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0001d	83 e0 01	 and	 eax, 1
  00020	74 0c		 je	 SHORT $LN2@scalar
  00022	6a 28		 push	 40			; 00000028H
  00024	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00027	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002c	59		 pop	 ecx
  0002d	59		 pop	 ecx
$LN2@scalar:
  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c9		 leave
  00032	c2 04 00	 ret	 4
??_G?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
;	COMDAT ?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
_TEXT	SEGMENT
_p$ = -24						; size = 4
_this$ = -20						; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_buffer$ = 8						; size = 4
?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::MoveInto, COMDAT
; _this$ = ecx

; 321  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00028	8b 45 08	 mov	 eax, DWORD PTR _buffer$[ebp]
  0002b	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  0002e	ff 75 ec	 push	 DWORD PTR _this$[ebp]
  00031	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  00034	e8 00 00 00 00	 call	 ??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::AlgorithmParametersBase::AlgorithmParametersBase
  00039	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00040	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@6B@
  00046	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00049	83 c0 10	 add	 eax, 16			; 00000010H
  0004c	50		 push	 eax
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  00050	83 c1 10	 add	 ecx, 16			; 00000010H
  00053	e8 00 00 00 00	 call	 ??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z
  00058	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 322  : 		AlgorithmParametersTemplate<T>* p = new(buffer) AlgorithmParametersTemplate<T>(*this);

  0005c	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  0005f	89 45 e8	 mov	 DWORD PTR _p$[ebp], eax

; 323  : 	}

  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	c9		 leave
  0006e	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MoveInto@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPAX@Z ENDP ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::MoveInto
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_typeinfo.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
;	COMDAT ?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv89 = -8						; size = 4
$T1 = -1						; size = 1
_name$ = 8						; size = 4
_valueType$ = 12					; size = 4
_pValue$ = 16						; size = 4
?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z PROC ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::AssignValue, COMDAT
; _this$ = ecx

; 311  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 313  : 		if (!(g_pAssignIntToInteger != NULL && typeid(T) == typeid(int) && g_pAssignIntToInteger(valueType, pValue, &m_value)))

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pAssignIntToInteger@CryptoPP@@3P6A_NABVtype_info@@PAXPBX@ZA, 0 ; CryptoPP::g_pAssignIntToInteger
  00010	74 4d		 je	 SHORT $LN3@AssignValu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_typeinfo.h

; 83   :         return __std_type_info_compare(&_Data, &_Other._Data) == 0;

  00012	68 04 00 00 00	 push	 OFFSET ??_R0H@8+4
  00017	68 04 00 00 00	 push	 OFFSET ??_R0?AVConstByteArrayParameter@CryptoPP@@@8+4
  0001c	e8 00 00 00 00	 call	 ___std_type_info_compare
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
  00023	85 c0		 test	 eax, eax
  00025	75 09		 jne	 SHORT $LN7@AssignValu
  00027	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv89[ebp], 1
  0002e	eb 04		 jmp	 SHORT $LN8@AssignValu
$LN7@AssignValu:
  00030	83 65 f8 00	 and	 DWORD PTR tv89[ebp], 0
$LN8@AssignValu:
  00034	8a 45 f8	 mov	 al, BYTE PTR tv89[ebp]
  00037	88 45 ff	 mov	 BYTE PTR $T1[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 313  : 		if (!(g_pAssignIntToInteger != NULL && typeid(T) == typeid(int) && g_pAssignIntToInteger(valueType, pValue, &m_value)))

  0003a	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0003e	85 c0		 test	 eax, eax
  00040	74 1d		 je	 SHORT $LN3@AssignValu
  00042	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 c0 10	 add	 eax, 16			; 00000010H
  00048	50		 push	 eax
  00049	ff 75 10	 push	 DWORD PTR _pValue$[ebp]
  0004c	ff 75 0c	 push	 DWORD PTR _valueType$[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pAssignIntToInteger@CryptoPP@@3P6A_NABVtype_info@@PAXPBX@ZA ; CryptoPP::g_pAssignIntToInteger
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	0f b6 c0	 movzx	 eax, al
  0005b	85 c0		 test	 eax, eax
  0005d	75 22		 jne	 SHORT $LN1@AssignValu
$LN3@AssignValu:

; 314  : 		{
; 315  : 			NameValuePairs::ThrowIfTypeMismatch(name, typeid(T), valueType);

  0005f	ff 75 0c	 push	 DWORD PTR _valueType$[ebp]
  00062	68 00 00 00 00	 push	 OFFSET ??_R0?AVConstByteArrayParameter@CryptoPP@@@8
  00067	ff 75 08	 push	 DWORD PTR _name$[ebp]
  0006a	e8 00 00 00 00	 call	 ?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 316  : 			*reinterpret_cast<T *>(pValue) = m_value;

  00072	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00075	83 c0 10	 add	 eax, 16			; 00000010H
  00078	50		 push	 eax
  00079	8b 4d 10	 mov	 ecx, DWORD PTR _pValue$[ebp]
  0007c	e8 00 00 00 00	 call	 ??4ConstByteArrayParameter@CryptoPP@@QAEAAV01@ABV01@@Z
$LN1@AssignValu:

; 317  : 		}
; 318  : 	}

  00081	c9		 leave
  00082	c2 0c 00	 ret	 12			; 0000000cH
?AssignValue@?$AlgorithmParametersTemplate@VConstByteArrayParameter@CryptoPP@@@CryptoPP@@UBEXPBDABVtype_info@@PAX@Z ENDP ; CryptoPP::AlgorithmParametersTemplate<CryptoPP::ConstByteArrayParameter>::AssignValue
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z PROC	; CryptoPP::AlgorithmParametersBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 10		 push	 16			; 00000010H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GAlgorithmParametersBase@CryptoPP@@UAEPAXI@Z ENDP	; CryptoPP::AlgorithmParametersBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h
;	COMDAT ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z
_TEXT	SEGMENT
tv71 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -4						; size = 4
_p$ = 8							; size = 4
?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z PROC ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset, COMDAT
; _this$ = ecx

; 50   : template <class T> void member_ptr<T>::reset(T *p) {delete m_p; m_p = p;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
  0000e	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00011	83 7d fc 00	 cmp	 DWORD PTR $T1[ebp], 0
  00015	74 11		 je	 SHORT $LN3@reset
  00017	6a 01		 push	 1
  00019	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00021	ff 10		 call	 DWORD PTR [eax]
  00023	89 45 f4	 mov	 DWORD PTR tv71[ebp], eax
  00026	eb 04		 jmp	 SHORT $LN4@reset
$LN3@reset:
  00028	83 65 f4 00	 and	 DWORD PTR tv71[ebp], 0
$LN4@reset:
  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  00032	89 08		 mov	 DWORD PTR [eax], ecx
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ENDP ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h
;	COMDAT ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
tv71 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -4						; size = 4
??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>, COMDAT
; _this$ = ecx

; 49   : template <class T> member_ptr<T>::~member_ptr() {delete m_p;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
  0000e	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00011	83 7d fc 00	 cmp	 DWORD PTR $T1[ebp], 0
  00015	74 11		 je	 SHORT $LN3@member_ptr
  00017	6a 01		 push	 1
  00019	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0001c	8b 00		 mov	 eax, DWORD PTR [eax]
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00021	ff 10		 call	 DWORD PTR [eax]
  00023	89 45 f4	 mov	 DWORD PTR tv71[ebp], eax
  00026	eb 04		 jmp	 SHORT $LN2@member_ptr
$LN3@member_ptr:
  00028	83 65 f4 00	 and	 DWORD PTR tv71[ebp], 0
$LN2@member_ptr:
  0002c	c9		 leave
  0002d	c3		 ret	 0
??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
;	COMDAT ??1AlgorithmParametersBase@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -60						; size = 4
$T2 = -56						; size = 40
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??1AlgorithmParametersBase@CryptoPP@@UAE@XZ PROC	; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase, COMDAT
; _this$ = ecx

; 269  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7AlgorithmParametersBase@CryptoPP@@6B@

; 270  : #ifdef CRYPTOPP_UNCAUGHT_EXCEPTION_AVAILABLE
; 271  : 		if (!std::uncaught_exception())

  00034	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00039	0f b6 c0	 movzx	 eax, al
  0003c	85 c0		 test	 eax, eax
  0003e	75 32		 jne	 SHORT $LN1@AlgorithmP

; 272  : #else
; 273  : 		try
; 274  : #endif
; 275  : 		{
; 276  : 			if (m_throwIfNotUsed && !m_used)

  00040	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00043	0f b6 40 08	 movzx	 eax, BYTE PTR [eax+8]
  00047	85 c0		 test	 eax, eax
  00049	74 27		 je	 SHORT $LN1@AlgorithmP
  0004b	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	0f b6 40 09	 movzx	 eax, BYTE PTR [eax+9]
  00052	85 c0		 test	 eax, eax
  00054	75 1c		 jne	 SHORT $LN1@AlgorithmP

; 277  : 				throw ParameterNotUsed(m_name);

  00056	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00059	ff 70 04	 push	 DWORD PTR [eax+4]
  0005c	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  0005f	e8 00 00 00 00	 call	 ??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
  00064	68 00 00 00 00	 push	 OFFSET __TI3?AVParameterNotUsed@AlgorithmParametersBase@CryptoPP@@
  00069	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN1@AlgorithmP:

; 278  : 		}
; 279  : #ifndef CRYPTOPP_UNCAUGHT_EXCEPTION_AVAILABLE
; 280  : 		catch(...)
; 281  : 		{
; 282  : 		}
; 283  : #endif
; 284  : 	}

  00072	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00078	e8 00 00 00 00	 call	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
$LN4@AlgorithmP:
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008b	33 cd		 xor	 ecx, ebp
  0008d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00092	c9		 leave
  00093	c3		 ret	 0
  00094	cc		 int	 3
  00095	cc		 int	 3
  00096	cc		 int	 3
  00097	cc		 int	 3
  00098	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1AlgorithmParametersBase@CryptoPP@@UAE@XZ
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1AlgorithmParametersBase@CryptoPP@@UAE@XZ ENDP	; CryptoPP::AlgorithmParametersBase::~AlgorithmParametersBase
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
;	COMDAT ??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_old_p$2 = -28						; size = 4
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 4
??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z PROC	; CryptoPP::AlgorithmParametersBase::AlgorithmParametersBase, COMDAT
; _this$ = ecx

; 260  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7AlgorithmParametersBase@CryptoPP@@6B@

; 259  : 		: m_name(x.m_name), m_throwIfNotUsed(x.m_throwIfNotUsed), m_used(x.m_used)

  00031	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00037	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0003a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0003d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00043	8a 49 08	 mov	 cl, BYTE PTR [ecx+8]
  00046	88 48 08	 mov	 BYTE PTR [eax+8], cl
  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  0004f	8a 49 09	 mov	 cl, BYTE PTR [ecx+9]
  00052	88 48 09	 mov	 BYTE PTR [eax+9], cl

; 260  : 	{

  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00058	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005b	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h

; 20   : 	explicit member_ptr(T *p = NULL) : m_p(p) {}

  0005e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00061	83 20 00	 and	 DWORD PTR [eax], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 260  : 	{

  00064	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 261  : 		m_next.reset(const_cast<AlgorithmParametersBase &>(x).m_next.release());

  00068	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0006b	83 c0 0c	 add	 eax, 12			; 0000000cH
  0006e	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\smartptr.h

; 35   : 		T *old_p = m_p;

  00071	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 00		 mov	 eax, DWORD PTR [eax]
  00076	89 45 e4	 mov	 DWORD PTR _old_p$2[ebp], eax

; 36   : 		m_p = 0;

  00079	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007c	83 20 00	 and	 DWORD PTR [eax], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 261  : 		m_next.reset(const_cast<AlgorithmParametersBase &>(x).m_next.release());

  0007f	ff 75 e4	 push	 DWORD PTR _old_p$2[ebp]
  00082	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00088	e8 00 00 00 00	 call	 ?reset@?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAEXPAVAlgorithmParametersBase@2@@Z ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::reset

; 262  : 		x.m_used = true;

  0008d	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  00090	c6 40 09 01	 mov	 BYTE PTR [eax+9], 1

; 263  : 	}

  00094	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00098	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	c9		 leave
  000a7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$member_ptr@VAlgorithmParametersBase@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::AlgorithmParametersBase>::~member_ptr<CryptoPP::AlgorithmParametersBase>
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0AlgorithmParametersBase@CryptoPP@@QAE@ABV01@@Z ENDP	; CryptoPP::AlgorithmParametersBase::AlgorithmParametersBase
; Function compile flags: /Odspy
;	COMDAT ??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 28		 push	 40			; 00000028H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@ABV01@@Z
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@ABV012@@Z ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::~ParameterNotUsed, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	c9		 leave
  00010	c3		 ret	 0
??1ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@UAE@XZ ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::~ParameterNotUsed
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
;	COMDAT ??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
_TEXT	SEGMENT
tv136 = -116						; size = 4
tv173 = -112						; size = 4
tv134 = -108						; size = 4
tv77 = -104						; size = 4
tv132 = -100						; size = 4
tv69 = -96						; size = 4
_this$ = -92						; size = 4
$T2 = -88						; size = 24
$T3 = -64						; size = 24
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z PROC ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed, COMDAT
; _this$ = ecx

; 254  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d a4	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BLINCPFB@AlgorithmParametersBase?3?5parame@
  00030	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00038	89 45 a0	 mov	 DWORD PTR tv69[ebp], eax
  0003b	8b 45 a0	 mov	 eax, DWORD PTR tv69[ebp]
  0003e	89 45 9c	 mov	 DWORD PTR tv132[ebp], eax
  00041	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	ff 75 08	 push	 DWORD PTR _name$[ebp]
  00048	ff 75 9c	 push	 DWORD PTR tv132[ebp]
  0004b	8d 45 c0	 lea	 eax, DWORD PTR $T3[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	89 45 98	 mov	 DWORD PTR tv77[ebp], eax
  0005a	8b 45 98	 mov	 eax, DWORD PTR tv77[ebp]
  0005d	89 45 94	 mov	 DWORD PTR tv134[ebp], eax
  00060	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IAABKFFP@?$CC?5not?5used@
  00069	ff 75 94	 push	 DWORD PTR tv134[ebp]
  0006c	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00075	83 c4 0c	 add	 esp, 12			; 0000000cH
  00078	89 45 90	 mov	 DWORD PTR tv173[ebp], eax
  0007b	8b 45 90	 mov	 eax, DWORD PTR tv173[ebp]
  0007e	89 45 8c	 mov	 DWORD PTR tv136[ebp], eax
  00081	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00085	ff 75 8c	 push	 DWORD PTR tv136[ebp]
  00088	6a 06		 push	 6
  0008a	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::Exception::Exception
  00092	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00096	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00099	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 254  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  0009e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  000a2	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 254  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  000aa	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  000ae	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  000b1	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 254  : 		ParameterNotUsed(const char *name) : Exception(OTHER_ERROR, std::string("AlgorithmParametersBase: parameter \"") + name + "\" not used") {}

  000b6	8b 45 a4	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@6B@
  000bf	8b 45 a4	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	33 cd		 xor	 ecx, ebp
  000d2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d7	c9		 leave
  000d8	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$0:
  00000	8d 4d a8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z$2:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ParameterNotUsed@AlgorithmParametersBase@CryptoPP@@QAE@PBD@Z ENDP ; CryptoPP::AlgorithmParametersBase::ParameterNotUsed::ParameterNotUsed
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??4ConstByteArrayParameter@CryptoPP@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4ConstByteArrayParameter@CryptoPP@@QAEAAV01@ABV01@@Z PROC ; CryptoPP::ConstByteArrayParameter::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000e	8a 09		 mov	 cl, BYTE PTR [ecx]
  00010	88 08		 mov	 BYTE PTR [eax], cl
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00018	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00024	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00027	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00030	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
  00033	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00036	83 c0 0c	 add	 eax, 12			; 0000000cH

; 328  : 		Assign(t);

  00039	50		 push	 eax
  0003a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	e8 00 00 00 00	 call	 ?Assign@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXABV12@@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::Assign
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c9		 leave
  00046	c2 04 00	 ret	 4
??4ConstByteArrayParameter@CryptoPP@@QAEAAV01@ABV01@@Z ENDP ; CryptoPP::ConstByteArrayParameter::operator=
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z PROC	; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000d	8a 09		 mov	 cl, BYTE PTR [ecx]
  0000f	88 08		 mov	 BYTE PTR [eax], cl
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00017	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00023	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00026	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00029	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0002c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0002f	50		 push	 eax
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00036	e8 00 00 00 00	 call	 ??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	c9		 leave
  0003f	c2 04 00	 ret	 4
??0ConstByteArrayParameter@CryptoPP@@QAE@ABV01@@Z ENDP	; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1ConstByteArrayParameter@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ConstByteArrayParameter@CryptoPP@@QAE@XZ PROC	; CryptoPP::ConstByteArrayParameter::~ConstByteArrayParameter, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000d	e8 00 00 00 00	 call	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  00012	c9		 leave
  00013	c3		 ret	 0
??1ConstByteArrayParameter@CryptoPP@@QAE@XZ ENDP	; CryptoPP::ConstByteArrayParameter::~ConstByteArrayParameter
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
;	COMDAT ?Assign@ConstByteArrayParameter@CryptoPP@@QAEXPBEI_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_deepCopy$ = 16						; size = 1
?Assign@ConstByteArrayParameter@CryptoPP@@QAEXPBEI_N@Z PROC ; CryptoPP::ConstByteArrayParameter::Assign, COMDAT
; _this$ = ecx

; 31   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 		if (deepCopy)

  00008	0f b6 45 10	 movzx	 eax, BYTE PTR _deepCopy$[ebp]
  0000c	85 c0		 test	 eax, eax
  0000e	74 30		 je	 SHORT $LN2@Assign

; 33   : 			m_block.Assign(data, size);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 0c	 add	 eax, 12			; 0000000cH
  00016	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h

; 312  : 		New(len);

  00019	ff 75 0c	 push	 DWORD PTR _size$[ebp]
  0001c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ?New@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXI@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::New

; 313  : 		memcpy_s(m_ptr, m_size*sizeof(T), t, len*sizeof(T));

  00024	ff 75 0c	 push	 DWORD PTR _size$[ebp]
  00027	ff 75 08	 push	 DWORD PTR _data$[ebp]
  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	ff 70 04	 push	 DWORD PTR [eax+4]
  00030	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00033	ff 70 08	 push	 DWORD PTR [eax+8]
  00036	e8 00 00 00 00	 call	 _memcpy_s
  0003b	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h

; 33   : 			m_block.Assign(data, size);

  0003e	eb 12		 jmp	 SHORT $LN3@Assign
$LN2@Assign:

; 34   : 		else
; 35   : 		{
; 36   : 			m_data = data;

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  00046	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 37   : 			m_size = size;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _size$[ebp]
  0004f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN3@Assign:

; 38   : 		}
; 39   : 		m_deepCopy = deepCopy;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8a 4d 10	 mov	 cl, BYTE PTR _deepCopy$[ebp]
  00058	88 08		 mov	 BYTE PTR [eax], cl

; 40   : 	}

  0005a	c9		 leave
  0005b	c2 0c 00	 ret	 12			; 0000000cH
?Assign@ConstByteArrayParameter@CryptoPP@@QAEXPBEI_N@Z ENDP ; CryptoPP::ConstByteArrayParameter::Assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\algparam.h
;	COMDAT ??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z
_TEXT	SEGMENT
tv75 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
_deepCopy$ = 12						; size = 1
??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z PROC	; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter, COMDAT
; _this$ = ecx

; 16   : 	ConstByteArrayParameter(const char *data = NULL, bool deepCopy = false)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	51		 push	 ecx
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00027	6a 00		 push	 0
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002f	e8 00 00 00 00	 call	 ??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  00034	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 17   : 	{
; 18   : 		Assign((const byte *)data, data ? strlen(data) : 0, deepCopy);

  00038	83 7d 08 00	 cmp	 DWORD PTR _data$[ebp], 0
  0003c	74 0e		 je	 SHORT $LN3@ConstByteA
  0003e	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00041	e8 00 00 00 00	 call	 _strlen
  00046	59		 pop	 ecx
  00047	89 45 ec	 mov	 DWORD PTR tv75[ebp], eax
  0004a	eb 04		 jmp	 SHORT $LN4@ConstByteA
$LN3@ConstByteA:
  0004c	83 65 ec 00	 and	 DWORD PTR tv75[ebp], 0
$LN4@ConstByteA:
  00050	ff 75 0c	 push	 DWORD PTR _deepCopy$[ebp]
  00053	ff 75 ec	 push	 DWORD PTR tv75[ebp]
  00056	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00059	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005c	e8 00 00 00 00	 call	 ?Assign@ConstByteArrayParameter@CryptoPP@@QAEXPBEI_N@Z ; CryptoPP::ConstByteArrayParameter::Assign

; 19   : 	}

  00061	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00065	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	c9		 leave
  00074	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00006	e9 00 00 00 00	 jmp	 ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ConstByteArrayParameter@CryptoPP@@QAE@PBD_N@Z ENDP	; CryptoPP::ConstByteArrayParameter::ConstByteArrayParameter
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ?New@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXI@Z
_TEXT	SEGMENT
_p$ = -12						; size = 4
_oldSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?New@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXI@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::New, COMDAT
; _this$ = ecx

; 362  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 363  : 		m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, false);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	89 45 f8	 mov	 DWORD PTR _oldSize$[ebp], eax
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	89 45 f4	 mov	 DWORD PTR _p$[ebp], eax

; 117  : 		return StandardReallocate(*this, p, oldSize, newSize, preserve);

  0001b	6a 00		 push	 0
  0001d	ff 75 08	 push	 DWORD PTR _newSize$[ebp]
  00020	ff 75 f8	 push	 DWORD PTR _oldSize$[ebp]
  00023	ff 75 f4	 push	 DWORD PTR _p$[ebp]
  00026	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??$StandardReallocate@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@YAPAEAAV?$AllocatorWithCleanup@E$0A@@0@PAEII_N@Z ; CryptoPP::StandardReallocate<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
  0002e	83 c4 14	 add	 esp, 20			; 00000014H

; 363  : 		m_ptr = m_alloc.reallocate(m_ptr, m_size, newSize, false);

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 364  : 		m_size = newSize;

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _newSize$[ebp]
  0003d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 365  : 	}

  00040	c9		 leave
  00041	c2 04 00	 ret	 4
?New@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXI@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::New
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ?Assign@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXABV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
?Assign@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXABV12@@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::Assign, COMDAT
; _this$ = ecx

; 318  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  : 		if (this != &t)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	3b 45 08	 cmp	 eax, DWORD PTR _t$[ebp]
  0000d	74 2e		 je	 SHORT $LN1@Assign

; 320  : 		{
; 321  : 			New(t.m_size);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00012	ff 70 04	 push	 DWORD PTR [eax+4]
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?New@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXI@Z ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::New

; 322  : 			memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	ff 70 04	 push	 DWORD PTR [eax+4]
  00023	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00026	ff 70 08	 push	 DWORD PTR [eax+8]
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	ff 70 04	 push	 DWORD PTR [eax+4]
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00032	ff 70 08	 push	 DWORD PTR [eax+8]
  00035	e8 00 00 00 00	 call	 _memcpy_s
  0003a	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@Assign:

; 323  : 		}
; 324  : 	}

  0003d	c9		 leave
  0003e	c2 04 00	 ret	 4
?Assign@?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAEXABV12@@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::Assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_n$ = -24						; size = 4
_this$ = -20						; size = 4
_p$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >, COMDAT
; _this$ = ecx

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002e	89 45 e8	 mov	 DWORD PTR _n$[ebp], eax
  00031	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00037	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax

; 105  : 		SecureWipeArray((pointer)p, n);

  0003a	ff 75 e8	 push	 DWORD PTR _n$[ebp]
  0003d	ff 75 f0	 push	 DWORD PTR _p$[ebp]
  00040	e8 00 00 00 00	 call	 ??$SecureWipeArray@E@CryptoPP@@YAXPAEI@Z ; CryptoPP::SecureWipeArray<unsigned char>
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 106  : 
; 107  : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 108  : 		if (T_Align16 && n*sizeof(T) >= 16)

  00047	33 c0		 xor	 eax, eax
  00049	74 0b		 je	 SHORT $LN4@SecBlock

; 109  : 			return AlignedDeallocate(p);

  0004b	ff 75 f0	 push	 DWORD PTR _p$[ebp]
  0004e	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  00053	59		 pop	 ecx
  00054	eb 09		 jmp	 SHORT $LN2@SecBlock
$LN4@SecBlock:

; 110  : #endif
; 111  : 
; 112  : 		UnalignedDeallocate(p);

  00056	ff 75 f0	 push	 DWORD PTR _p$[ebp]
  00059	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  0005e	59		 pop	 ecx
$LN2@SecBlock:

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	c9		 leave
  0006b	c3		 ret	 0
  0006c	cc		 int	 3
  0006d	cc		 int	 3
  0006e	cc		 int	 3
  0006f	cc		 int	 3
  00070	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::~SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
_n$ = -8						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >, COMDAT
; _this$ = ecx

; 248  : 	SecBlock(const SecBlock<T, A> &t)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _t$[ebp]
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 91   : 		CheckSize(n);

  0001e	ff 75 f8	 push	 DWORD PTR _n$[ebp]
  00021	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  00026	59		 pop	 ecx

; 92   : 		if (n == 0)

  00027	83 7d f8 00	 cmp	 DWORD PTR _n$[ebp], 0
  0002b	75 06		 jne	 SHORT $LN6@SecBlock

; 93   : 			return NULL;

  0002d	83 65 f4 00	 and	 DWORD PTR $T1[ebp], 0
  00031	eb 1e		 jmp	 SHORT $LN5@SecBlock
$LN6@SecBlock:

; 94   : 
; 95   : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 96   : 		if (T_Align16 && n*sizeof(T) >= 16)

  00033	33 c0		 xor	 eax, eax
  00035	74 0e		 je	 SHORT $LN7@SecBlock

; 97   : 			return (pointer)AlignedAllocate(n*sizeof(T));

  00037	ff 75 f8	 push	 DWORD PTR _n$[ebp]
  0003a	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  0003f	59		 pop	 ecx
  00040	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00043	eb 0c		 jmp	 SHORT $LN5@SecBlock
$LN7@SecBlock:

; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  00045	ff 75 f8	 push	 DWORD PTR _n$[ebp]
  00048	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  0004d	59		 pop	 ecx
  0004e	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN5@SecBlock:

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00057	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	ff 70 04	 push	 DWORD PTR [eax+4]
  00060	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00063	ff 70 08	 push	 DWORD PTR [eax+8]
  00066	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00069	ff 70 04	 push	 DWORD PTR [eax+4]
  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	ff 70 08	 push	 DWORD PTR [eax+8]
  00072	e8 00 00 00 00	 call	 _memcpy_s
  00077	83 c4 10	 add	 esp, 16			; 00000010H
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	c9		 leave
  0007e	c2 04 00	 ret	 4
??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
_size$ = 8						; size = 4
??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z PROC ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >, COMDAT
; _this$ = ecx

; 246  : 	explicit SecBlock(size_type size=0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  0000e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 91   : 		CheckSize(n);

  00011	ff 75 08	 push	 DWORD PTR _size$[ebp]
  00014	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned char>::CheckSize
  00019	59		 pop	 ecx

; 92   : 		if (n == 0)

  0001a	83 7d 08 00	 cmp	 DWORD PTR _size$[ebp], 0
  0001e	75 06		 jne	 SHORT $LN6@SecBlock

; 93   : 			return NULL;

  00020	83 65 fc 00	 and	 DWORD PTR $T1[ebp], 0
  00024	eb 1e		 jmp	 SHORT $LN5@SecBlock
$LN6@SecBlock:

; 94   : 
; 95   : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 96   : 		if (T_Align16 && n*sizeof(T) >= 16)

  00026	33 c0		 xor	 eax, eax
  00028	74 0e		 je	 SHORT $LN7@SecBlock

; 97   : 			return (pointer)AlignedAllocate(n*sizeof(T));

  0002a	ff 75 08	 push	 DWORD PTR _size$[ebp]
  0002d	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  00032	59		 pop	 ecx
  00033	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00036	eb 0c		 jmp	 SHORT $LN5@SecBlock
$LN7@SecBlock:

; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  00038	ff 75 08	 push	 DWORD PTR _size$[ebp]
  0003b	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00040	59		 pop	 ecx
  00041	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
$LN5@SecBlock:

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  0004a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0004d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00050	c9		 leave
  00051	c2 04 00	 ret	 4
??0?$SecBlock@EV?$AllocatorWithCleanup@E$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ENDP ; CryptoPP::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >::SecBlock<unsigned char,CryptoPP::AllocatorWithCleanup<unsigned char,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\strciphr.h
;	COMDAT ?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ PROC ; CryptoPP::AdditiveCipherAbstractPolicy::GetOptimalBlockSize, COMDAT
; _this$ = ecx

; 71   : 	virtual unsigned int GetOptimalBlockSize() const {return GetBytesPerIteration();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	ff 50 08	 call	 DWORD PTR [eax+8]
  00012	c9		 leave
  00013	c3		 ret	 0
?GetOptimalBlockSize@AdditiveCipherAbstractPolicy@CryptoPP@@UBEIXZ ENDP ; CryptoPP::AdditiveCipherAbstractPolicy::GetOptimalBlockSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\Stl.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\Stl.h
;	COMDAT ?GetHash@stringhash@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_end$ = -16						; size = 4
$T1 = -12						; size = 4
_h$ = -8						; size = 4
_s$ = -4						; size = 4
_str$ = 8						; size = 4
?GetHash@stringhash@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; stringhash::GetHash, COMDAT
; _this$ = ecx

; 476  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3752 :         return _Mypair._Myval2._Myptr();

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00011	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 3770 :         return _Mypair._Myval2._Mysize;

  00014	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00017	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0001a	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\Stl.h

; 478  :        const unsigned char * end = s + str.size();

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  00020	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]
  00023	89 45 f0	 mov	 DWORD PTR _end$[ebp], eax

; 479  :        size_t h = 0;

  00026	83 65 f8 00	 and	 DWORD PTR _h$[ebp], 0
$LN2@GetHash:

; 480  : 
; 481  :        while (s < end)

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0002d	3b 45 f0	 cmp	 eax, DWORD PTR _end$[ebp]
  00030	73 1f		 jae	 SHORT $LN3@GetHash

; 482  :        {
; 483  :            h *= 16777619;

  00032	69 45 f8 93 01
	00 01		 imul	 eax, DWORD PTR _h$[ebp], 16777619
  00039	89 45 f8	 mov	 DWORD PTR _h$[ebp], eax

; 484  :            h ^= (unsigned char) *(unsigned char *) (s++);

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0003f	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00042	33 45 f8	 xor	 eax, DWORD PTR _h$[ebp]
  00045	89 45 f8	 mov	 DWORD PTR _h$[ebp], eax
  00048	8b 45 fc	 mov	 eax, DWORD PTR _s$[ebp]
  0004b	40		 inc	 eax
  0004c	89 45 fc	 mov	 DWORD PTR _s$[ebp], eax

; 485  :        }

  0004f	eb d9		 jmp	 SHORT $LN2@GetHash
$LN3@GetHash:

; 486  : 
; 487  :        return h;

  00051	8b 45 f8	 mov	 eax, DWORD PTR _h$[ebp]

; 488  : 	}

  00054	c9		 leave
  00055	c2 04 00	 ret	 4
?GetHash@stringhash@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; stringhash::GetHash
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z
_TEXT	SEGMENT
$T2 = -128						; size = 4
$T3 = -124						; size = 4
$T4 = -120						; size = 4
$T5 = -116						; size = 4
$T6 = -112						; size = 4
_x$ = -108						; size = 4
_this$ = -104						; size = 4
$T7 = -100						; size = 4
tv83 = -96						; size = 4
$T8 = -92						; size = 4
_dwfileNameCrc$ = -88					; size = 4
_cit$ = -84						; size = 4
$T9 = -77						; size = 1
_i$10 = -76						; size = 4
_i$11 = -72						; size = 4
$T12 = -67						; size = 1
$T13 = -66						; size = 1
$T14 = -65						; size = 1
_extName$ = -64						; size = 24
_fileNamelower$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rfileName$ = 8						; size = 4
_eAlgorithm$ = 12					; size = 4
_key$ = 16						; size = 4
_iv$ = 20						; size = 4
?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z PROC ; EterPackPolicy_CSHybridCrypt::GetPerFileCryptKey, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 74	 sub	 esp, 116		; 00000074H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d 98	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	83 65 a4 00	 and	 DWORD PTR $T8[ebp], 0

; 109  : #ifdef __THEMIDA__
; 110  : 	VM_START
; 111  : #endif
; 112  : 
; 113  : 	std::string fileNamelower = rfileName;

  0002f	ff 75 08	 push	 DWORD PTR _rfileName$[ebp]
  00032	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00035	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 114  : 	stl_lowers(fileNamelower);

  0003e	8d 45 d8	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
  00047	59		 pop	 ecx

; 51   : 	stl_lowers(rfileName);

  00048	8d 45 d8	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
  00051	59		 pop	 ecx

; 52   : 	return CFileNameHelper::GetExtension(rfileName);

  00052	8d 45 d8	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  00055	50		 push	 eax
  00056	8d 45 c0	 lea	 eax, DWORD PTR _extName$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetExtension
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
  00061	8b 45 a4	 mov	 eax, DWORD PTR $T8[ebp]
  00064	83 c8 01	 or	 eax, 1
  00067	89 45 a4	 mov	 DWORD PTR $T8[ebp], eax

; 115  : 
; 116  : 	std::string extName = GetFileExt(fileNamelower);

  0006a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 117  : 
; 118  : 	TCSHybridCryptKeyMap::const_iterator cit = m_mapHybridCryptKey.find( stringhash().GetHash(extName));

  0006e	8d 45 c0	 lea	 eax, DWORD PTR _extName$[ebp]
  00071	50		 push	 eax
  00072	8d 4d b3	 lea	 ecx, DWORD PTR $T9[ebp]
  00075	e8 00 00 00 00	 call	 ?GetHash@stringhash@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stringhash::GetHash
  0007a	89 45 9c	 mov	 DWORD PTR $T7[ebp], eax
  0007d	8d 45 9c	 lea	 eax, DWORD PTR $T7[ebp]
  00080	50		 push	 eax
  00081	8d 45 80	 lea	 eax, DWORD PTR $T2[ebp]
  00084	50		 push	 eax
  00085	8b 4d 98	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::find
  0008d	89 45 94	 mov	 DWORD PTR _x$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  00090	8b 45 94	 mov	 eax, DWORD PTR _x$[ebp]
  00093	8b 00		 mov	 eax, DWORD PTR [eax]
  00095	89 45 ac	 mov	 DWORD PTR _cit$[ebp], eax

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00098	83 65 90 00	 and	 DWORD PTR $T6[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 200  :       iterator end() BOOST_NOEXCEPT { return iterator(); }

  0009c	8d 45 90	 lea	 eax, DWORD PTR $T6[ebp]
  0009f	89 45 8c	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  000a2	8b 45 8c	 mov	 eax, DWORD PTR $T5[ebp]
  000a5	8b 00		 mov	 eax, DWORD PTR [eax]
  000a7	89 45 88	 mov	 DWORD PTR $T4[ebp], eax

; 2453 :           return x.node_ == y.node_;

  000aa	8b 45 ac	 mov	 eax, DWORD PTR _cit$[ebp]
  000ad	3b 45 88	 cmp	 eax, DWORD PTR $T4[ebp]
  000b0	75 09		 jne	 SHORT $LN63@GetPerFile
  000b2	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv83[ebp], 1
  000b9	eb 04		 jmp	 SHORT $LN64@GetPerFile
$LN63@GetPerFile:
  000bb	83 65 a0 00	 and	 DWORD PTR tv83[ebp], 0
$LN64@GetPerFile:
  000bf	8a 45 a0	 mov	 al, BYTE PTR tv83[ebp]
  000c2	88 45 bf	 mov	 BYTE PTR $T14[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 120  : 	if( cit == m_mapHybridCryptKey.end() )

  000c5	0f b6 45 bf	 movzx	 eax, BYTE PTR $T14[ebp]
  000c9	85 c0		 test	 eax, eax
  000cb	74 24		 je	 SHORT $LN8@GetPerFile

; 123  : 		return false;

  000cd	c6 45 be 00	 mov	 BYTE PTR $T13[ebp], 0
  000d1	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  000d5	8d 4d c0	 lea	 ecx, DWORD PTR _extName$[ebp]
  000d8	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 123  : 		return false;

  000dd	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  000e1	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  000e4	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 123  : 		return false;

  000e9	8a 45 be	 mov	 al, BYTE PTR $T13[ebp]
  000ec	e9 c6 00 00 00	 jmp	 $LN1@GetPerFile
$LN8@GetPerFile:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3770 :         return _Mypair._Myval2._Mysize;

  000f1	8b 45 e8	 mov	 eax, DWORD PTR _fileNamelower$[ebp+16]
  000f4	89 45 84	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 126  : 	DWORD dwfileNameCrc = GetCRC32(fileNamelower.c_str(), fileNamelower.size());

  000f7	ff 75 84	 push	 DWORD PTR $T3[ebp]
  000fa	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  000fd	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00108	59		 pop	 ecx
  00109	59		 pop	 ecx
  0010a	89 45 a8	 mov	 DWORD PTR _dwfileNameCrc$[ebp], eax

; 127  : 
; 128  : 	//make file specific algorithm & key & iv
; 129  : 	eAlgorithm = (eHybridCipherAlgorithm)(dwfileNameCrc % Num_Of_Ciphers);

  0010d	8b 45 a8	 mov	 eax, DWORD PTR _dwfileNameCrc$[ebp]
  00110	33 d2		 xor	 edx, edx
  00112	6a 03		 push	 3
  00114	59		 pop	 ecx
  00115	f7 f1		 div	 ecx
  00117	8b 45 0c	 mov	 eax, DWORD PTR _eAlgorithm$[ebp]
  0011a	89 10		 mov	 DWORD PTR [eax], edx

; 130  : 	
; 131  : 	::memcpy(key.key, cit->second.uEncryptKey.key, sizeof(key) );

  0011c	6a 10		 push	 16			; 00000010H
  0011e	8b 45 ac	 mov	 eax, DWORD PTR _cit$[ebp]
  00121	83 c0 0c	 add	 eax, 12			; 0000000cH
  00124	50		 push	 eax
  00125	ff 75 10	 push	 DWORD PTR _key$[ebp]
  00128	e8 00 00 00 00	 call	 _memcpy
  0012d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 132  : 	::memcpy(iv.iv,   cit->second.uEncryptIV.iv,   sizeof(iv) );

  00130	6a 10		 push	 16			; 00000010H
  00132	8b 45 ac	 mov	 eax, DWORD PTR _cit$[ebp]
  00135	83 c0 1c	 add	 eax, 28			; 0000001cH
  00138	50		 push	 eax
  00139	ff 75 14	 push	 DWORD PTR _iv$[ebp]
  0013c	e8 00 00 00 00	 call	 _memcpy
  00141	83 c4 0c	 add	 esp, 12			; 0000000cH

; 133  : 
; 134  : 
; 135  : 	//Themida Warning
; 136  : 	for( int i = 0; i < (sizeof(key)/sizeof(dwfileNameCrc)); ++i)

  00144	83 65 b8 00	 and	 DWORD PTR _i$11[ebp], 0
  00148	eb 07		 jmp	 SHORT $LN4@GetPerFile
$LN2@GetPerFile:
  0014a	8b 45 b8	 mov	 eax, DWORD PTR _i$11[ebp]
  0014d	40		 inc	 eax
  0014e	89 45 b8	 mov	 DWORD PTR _i$11[ebp], eax
$LN4@GetPerFile:
  00151	83 7d b8 04	 cmp	 DWORD PTR _i$11[ebp], 4
  00155	73 17		 jae	 SHORT $LN3@GetPerFile

; 137  : 	{
; 138  : 		*((DWORD*)key.key + i) ^= dwfileNameCrc;

  00157	8b 45 b8	 mov	 eax, DWORD PTR _i$11[ebp]
  0015a	8b 4d 10	 mov	 ecx, DWORD PTR _key$[ebp]
  0015d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00160	33 45 a8	 xor	 eax, DWORD PTR _dwfileNameCrc$[ebp]
  00163	8b 4d b8	 mov	 ecx, DWORD PTR _i$11[ebp]
  00166	8b 55 10	 mov	 edx, DWORD PTR _key$[ebp]
  00169	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 139  : 	}

  0016c	eb dc		 jmp	 SHORT $LN2@GetPerFile
$LN3@GetPerFile:

; 140  : 	for( int i = 0; i < (sizeof(iv)/sizeof(dwfileNameCrc)); ++i)

  0016e	83 65 b4 00	 and	 DWORD PTR _i$10[ebp], 0
  00172	eb 07		 jmp	 SHORT $LN7@GetPerFile
$LN5@GetPerFile:
  00174	8b 45 b4	 mov	 eax, DWORD PTR _i$10[ebp]
  00177	40		 inc	 eax
  00178	89 45 b4	 mov	 DWORD PTR _i$10[ebp], eax
$LN7@GetPerFile:
  0017b	83 7d b4 04	 cmp	 DWORD PTR _i$10[ebp], 4
  0017f	73 17		 jae	 SHORT $LN6@GetPerFile

; 141  : 	{
; 142  : 		*((DWORD*)iv.iv + i) ^= dwfileNameCrc;

  00181	8b 45 b4	 mov	 eax, DWORD PTR _i$10[ebp]
  00184	8b 4d 14	 mov	 ecx, DWORD PTR _iv$[ebp]
  00187	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0018a	33 45 a8	 xor	 eax, DWORD PTR _dwfileNameCrc$[ebp]
  0018d	8b 4d b4	 mov	 ecx, DWORD PTR _i$10[ebp]
  00190	8b 55 14	 mov	 edx, DWORD PTR _iv$[ebp]
  00193	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 143  : 	}

  00196	eb dc		 jmp	 SHORT $LN5@GetPerFile
$LN6@GetPerFile:

; 148  : 	return true;

  00198	c6 45 bd 01	 mov	 BYTE PTR $T12[ebp], 1
  0019c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  001a0	8d 4d c0	 lea	 ecx, DWORD PTR _extName$[ebp]
  001a3	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 148  : 	return true;

  001a8	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  001ac	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  001af	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 148  : 	return true;

  001b4	8a 45 bd	 mov	 al, BYTE PTR $T12[ebp]
$LN1@GetPerFile:

; 149  : }

  001b7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ba	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c1	59		 pop	 ecx
  001c2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c5	33 cd		 xor	 ecx, ebp
  001c7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001cc	c9		 leave
  001cd	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z$1:
  00008	8d 4d c0	 lea	 ecx, DWORD PTR _extName$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z ENDP ; EterPackPolicy_CSHybridCrypt::GetPerFileCryptKey
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
;	COMDAT ??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[], COMDAT
; _this$ = ecx

; 1865 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1866 :       return table_.try_emplace_unique(k).first->second;

  00009	ff 75 08	 push	 DWORD PTR _k$[ebp]
  0000c	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
  00018	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	83 c0 0c	 add	 eax, 12			; 0000000cH

; 1867 :     }

  00023	c9		 leave
  00024	c2 04 00	 ret	 4
??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
;	COMDAT ?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z
_TEXT	SEGMENT
_x$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::find, COMDAT
; _this$ = ecx

; 1803 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1804 :       return iterator(table_.find_node(k));

  00008	ff 75 0c	 push	 DWORD PTR _k$[ebp]
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?find_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node
  00013	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2371 :           : node_(static_cast<node_pointer>(x))

  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  0001c	89 08		 mov	 DWORD PTR [eax], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1805 :     }

  00021	c9		 leave
  00022	c2 08 00	 ret	 8
?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::find
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >, COMDAT
; _this$ = ecx

; 1645 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3333 :         ~table() { delete_buckets(); }

  00026	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?delete_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::delete_buckets
  00032	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 1646 :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	c9		 leave
  00042	c3		 ret	 0
  00043	cc		 int	 3
  00044	cc		 int	 3
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
_TEXT	SEGMENT
_b$ = -40						; size = 8
$T2 = -32						; size = 4
_p$3 = -28						; size = 4
$T4 = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_n$ = 8							; size = 4
_key_hash$ = 12						; size = 4
?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::resize_and_add_node_unique, COMDAT
; _this$ = ecx

; 3715 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c0 03	 add	 eax, 3
  0002e	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  00031	74 09		 je	 SHORT $LN8@resize_and
  00033	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00036	40		 inc	 eax
  00037	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
  0003a	eb 04		 jmp	 SHORT $LN4@resize_and
$LN8@resize_and:
  0003c	83 65 e8 00	 and	 DWORD PTR $T4[ebp], 0
$LN4@resize_and:

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  00040	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00043	89 45 d8	 mov	 DWORD PTR _b$[ebp], eax
  00046	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00049	89 45 dc	 mov	 DWORD PTR _b$[ebp+4], eax

; 3716 :           node_tmp b(n, this->node_alloc());

  0004c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00056	40		 inc	 eax
  00057	50		 push	 eax
  00058	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ?reserve_for_insert@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::reserve_for_insert

; 2006 :           node_pointer p = node_;

  00060	8b 45 dc	 mov	 eax, DWORD PTR _b$[ebp+4]
  00063	89 45 e4	 mov	 DWORD PTR _p$3[ebp], eax

; 2007 :           node_ = node_pointer();

  00066	83 65 dc 00	 and	 DWORD PTR _b$[ebp+4], 0

; 3718 :           return this->add_node_unique(b.release(), key_hash);

  0006a	ff 75 0c	 push	 DWORD PTR _key_hash$[ebp]
  0006d	ff 75 e4	 push	 DWORD PTR _p$3[ebp]
  00070	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::add_node_unique
  00078	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0007b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0007f	8d 4d d8	 lea	 ecx, DWORD PTR _b$[ebp]
  00082	e8 00 00 00 00	 call	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
  00087	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]

; 3719 :         }

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	c9		 leave
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _b$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::resize_and_add_node_unique
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
_TEXT	SEGMENT
$T1 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_bucket_index$ = -16					; size = 4
_b$ = -12						; size = 4
_start_node$4 = -8					; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_key_hash$ = 12						; size = 4
?add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::add_node_unique, COMDAT
; _this$ = ecx

; 3686 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2604 :           return hash % bucket_count;

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _key_hash$[ebp]
  0000f	33 d2		 xor	 edx, edx
  00011	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3687 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00014	89 55 f0	 mov	 DWORD PTR _bucket_index$[ebp], edx

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001d	8b 4d f0	 mov	 ecx, DWORD PTR _bucket_index$[ebp]
  00020	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 3688 :           bucket_pointer b = this->get_bucket_pointer(bucket_index);

  00023	89 45 f4	 mov	 DWORD PTR _b$[ebp], eax

; 3689 : 
; 3690 :           n->bucket_info_ = bucket_index;

  00026	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _bucket_index$[ebp]
  0002c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  0002f	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  0003d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 3691 :           n->set_first_in_group();
; 3692 : 
; 3693 :           if (!b->next_) {

  00040	8b 45 f4	 mov	 eax, DWORD PTR _b$[ebp]
  00043	83 38 00	 cmp	 DWORD PTR [eax], 0
  00046	75 61		 jne	 SHORT $LN2@add_node_u

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00054	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00057	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax

; 3694 :             link_pointer start_node = this->get_previous_start();

  0005a	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  0005d	89 45 f8	 mov	 DWORD PTR _start_node$4[ebp], eax

; 3695 : 
; 3696 :             if (start_node->next_) {

  00060	8b 45 f8	 mov	 eax, DWORD PTR _start_node$4[ebp]
  00063	83 38 00	 cmp	 DWORD PTR [eax], 0
  00066	74 25		 je	 SHORT $LN4@add_node_u

; 2964 :           return static_cast<node_pointer>(n->next_);

  00068	8b 45 f8	 mov	 eax, DWORD PTR _start_node$4[ebp]
  0006b	8b 00		 mov	 eax, DWORD PTR [eax]
  0006d	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00070	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00073	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00076	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 2999 :           return n->get_bucket();

  0007b	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax

; 3697 :               this->get_bucket_pointer(node_bucket(next_node(start_node)))

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00084	8b 4d e4	 mov	 ecx, DWORD PTR $T1[ebp]
  00087	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  0008a	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN4@add_node_u:

; 3698 :                 ->next_ = n;
; 3699 :             }
; 3700 : 
; 3701 :             b->next_ = start_node;

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _b$[ebp]
  00090	8b 4d f8	 mov	 ecx, DWORD PTR _start_node$4[ebp]
  00093	89 08		 mov	 DWORD PTR [eax], ecx

; 3702 :             n->next_ = start_node->next_;

  00095	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _start_node$4[ebp]
  0009b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0009d	89 08		 mov	 DWORD PTR [eax], ecx

; 3703 :             start_node->next_ = n;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _start_node$4[ebp]
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  000a5	89 08		 mov	 DWORD PTR [eax], ecx

; 3704 :           } else {

  000a7	eb 16		 jmp	 SHORT $LN3@add_node_u
$LN2@add_node_u:

; 3705 :             n->next_ = b->next_->next_;

  000a9	8b 45 f4	 mov	 eax, DWORD PTR _b$[ebp]
  000ac	8b 00		 mov	 eax, DWORD PTR [eax]
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  000b1	8b 00		 mov	 eax, DWORD PTR [eax]
  000b3	89 01		 mov	 DWORD PTR [ecx], eax

; 3706 :             b->next_->next_ = n;

  000b5	8b 45 f4	 mov	 eax, DWORD PTR _b$[ebp]
  000b8	8b 00		 mov	 eax, DWORD PTR [eax]
  000ba	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  000bd	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@add_node_u:

; 3707 :           }
; 3708 : 
; 3709 :           ++this->size_;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c5	40		 inc	 eax
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 3710 :           return n;

  000cc	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]

; 3711 :         }

  000cf	c9		 leave
  000d0	c2 08 00	 ret	 8
?add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::add_node_unique
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
$T2 = -76						; size = 4
_next$3 = -72						; size = 4
_next$4 = -68						; size = 4
_key_hash$5 = -64					; size = 4
tv129 = -60						; size = 4
_v$6 = -56						; size = 4
$T7 = -52						; size = 4
tv221 = -48						; size = 4
_bucket_index$8 = -44					; size = 4
_next$9 = -40						; size = 4
_n$10 = -36						; size = 4
_b$11 = -32						; size = 4
_prev$ = -28						; size = 4
_this$ = -24						; size = 4
_n$12 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_num_buckets$ = 8					; size = 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl, COMDAT
; _this$ = ecx

; 4577 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 4578 :         BOOST_ASSERT(this->buckets_);
; 4579 : 
; 4580 :         this->create_buckets(num_buckets);

  0002f	ff 75 08	 push	 DWORD PTR _num_buckets$[ebp]
  00032	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0003a	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00040	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00046	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00049	89 45 cc	 mov	 DWORD PTR $T7[ebp], eax

; 4581 :         link_pointer prev = this->get_previous_start();

  0004c	8b 45 cc	 mov	 eax, DWORD PTR $T7[ebp]
  0004f	89 45 e4	 mov	 DWORD PTR _prev$[ebp], eax

; 4582 :         BOOST_TRY

  00052	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
$LN2@rehash_imp:

; 4583 :         {
; 4584 :           while (prev->next_) {

  00056	8b 45 e4	 mov	 eax, DWORD PTR _prev$[ebp]
  00059	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005c	0f 84 04 01 00
	00		 je	 $LN3@rehash_imp

; 2964 :           return static_cast<node_pointer>(n->next_);

  00062	8b 45 e4	 mov	 eax, DWORD PTR _prev$[ebp]
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	89 45 ec	 mov	 DWORD PTR _n$12[ebp], eax

; 2791 :           return *static_cast<function_pair const*>(

  0006a	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00070	83 e0 01	 and	 eax, 1
  00073	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8d 44 01 01	 lea	 eax, DWORD PTR [ecx+eax+1]
  0007a	89 45 b4	 mov	 DWORD PTR $T2[ebp], eax

; 2599 :           return hf(x);

  0007d	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  00080	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00083	89 45 c8	 mov	 DWORD PTR _v$6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00086	ff 75 c8	 push	 DWORD PTR _v$6[ebp]
  00089	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  0008e	59		 pop	 ecx
  0008f	89 45 c4	 mov	 DWORD PTR tv129[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));

  00092	8b 45 c4	 mov	 eax, DWORD PTR tv129[ebp]
  00095	89 45 c0	 mov	 DWORD PTR _key_hash$5[ebp], eax

; 2604 :           return hash % bucket_count;

  00098	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	8b 45 c0	 mov	 eax, DWORD PTR _key_hash$5[ebp]
  0009e	33 d2		 xor	 edx, edx
  000a0	f7 71 04	 div	 DWORD PTR [ecx+4]

; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);

  000a3	89 55 d4	 mov	 DWORD PTR _bucket_index$8[ebp], edx

; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;

  000a6	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  000a9	8b 4d d4	 mov	 ecx, DWORD PTR _bucket_index$8[ebp]
  000ac	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  000af	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  000b2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b5	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  000ba	8b 4d ec	 mov	 ecx, DWORD PTR _n$12[ebp]
  000bd	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN6@rehash_imp:

; 2964 :           return static_cast<node_pointer>(n->next_);

  000c0	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  000c3	8b 00		 mov	 eax, DWORD PTR [eax]
  000c5	89 45 d8	 mov	 DWORD PTR _next$9[ebp], eax

; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);
; 4596 :               if (!next || next->is_first_in_group()) {

  000c8	83 7d d8 00	 cmp	 DWORD PTR _next$9[ebp], 0
  000cc	74 20		 je	 SHORT $LN11@rehash_imp

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  000ce	8b 45 d8	 mov	 eax, DWORD PTR _next$9[ebp]
  000d1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d4	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  000d9	75 09		 jne	 SHORT $LN61@rehash_imp
  000db	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv221[ebp], 1
  000e2	eb 04		 jmp	 SHORT $LN59@rehash_imp
$LN61@rehash_imp:
  000e4	83 65 d0 00	 and	 DWORD PTR tv221[ebp], 0
$LN59@rehash_imp:

; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);
; 4596 :               if (!next || next->is_first_in_group()) {

  000e8	83 7d d0 00	 cmp	 DWORD PTR tv221[ebp], 0
  000ec	74 02		 je	 SHORT $LN10@rehash_imp
$LN11@rehash_imp:

; 4597 :                 break;

  000ee	eb 22		 jmp	 SHORT $LN65@rehash_imp
$LN10@rehash_imp:

; 4598 :               }
; 4599 :               n = next;

  000f0	8b 45 d8	 mov	 eax, DWORD PTR _next$9[ebp]
  000f3	89 45 ec	 mov	 DWORD PTR _n$12[ebp], eax

; 4600 :               n->bucket_info_ = bucket_index;

  000f6	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  000f9	8b 4d d4	 mov	 ecx, DWORD PTR _bucket_index$8[ebp]
  000fc	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  000ff	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  00102	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00105	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  0010a	8b 4d ec	 mov	 ecx, DWORD PTR _n$12[ebp]
  0010d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 4601 :               n->reset_first_in_group();
; 4602 :             }

  00110	eb ae		 jmp	 SHORT $LN6@rehash_imp
$LN65@rehash_imp:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00112	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00115	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00118	8b 4d d4	 mov	 ecx, DWORD PTR _bucket_index$8[ebp]
  0011b	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 4603 : 
; 4604 :             // n is now the last node in the group
; 4605 :             bucket_pointer b = this->get_bucket_pointer(bucket_index);

  0011e	89 45 e0	 mov	 DWORD PTR _b$11[ebp], eax

; 4606 :             if (!b->next_) {

  00121	8b 45 e0	 mov	 eax, DWORD PTR _b$11[ebp]
  00124	83 38 00	 cmp	 DWORD PTR [eax], 0
  00127	75 10		 jne	 SHORT $LN12@rehash_imp

; 4607 :               b->next_ = prev;

  00129	8b 45 e0	 mov	 eax, DWORD PTR _b$11[ebp]
  0012c	8b 4d e4	 mov	 ecx, DWORD PTR _prev$[ebp]
  0012f	89 08		 mov	 DWORD PTR [eax], ecx

; 4608 :               prev = n;

  00131	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  00134	89 45 e4	 mov	 DWORD PTR _prev$[ebp], eax

; 4609 :             } else {

  00137	eb 28		 jmp	 SHORT $LN13@rehash_imp
$LN12@rehash_imp:

; 4610 :               link_pointer next = n->next_;

  00139	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  0013c	8b 00		 mov	 eax, DWORD PTR [eax]
  0013e	89 45 bc	 mov	 DWORD PTR _next$4[ebp], eax

; 4611 :               n->next_ = b->next_->next_;

  00141	8b 45 e0	 mov	 eax, DWORD PTR _b$11[ebp]
  00144	8b 00		 mov	 eax, DWORD PTR [eax]
  00146	8b 4d ec	 mov	 ecx, DWORD PTR _n$12[ebp]
  00149	8b 00		 mov	 eax, DWORD PTR [eax]
  0014b	89 01		 mov	 DWORD PTR [ecx], eax

; 4612 :               b->next_->next_ = prev->next_;

  0014d	8b 45 e0	 mov	 eax, DWORD PTR _b$11[ebp]
  00150	8b 00		 mov	 eax, DWORD PTR [eax]
  00152	8b 4d e4	 mov	 ecx, DWORD PTR _prev$[ebp]
  00155	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00157	89 08		 mov	 DWORD PTR [eax], ecx

; 4613 :               prev->next_ = next;

  00159	8b 45 e4	 mov	 eax, DWORD PTR _prev$[ebp]
  0015c	8b 4d bc	 mov	 ecx, DWORD PTR _next$4[ebp]
  0015f	89 08		 mov	 DWORD PTR [eax], ecx
$LN13@rehash_imp:

; 4614 :             }
; 4615 :           }

  00161	e9 f0 fe ff ff	 jmp	 $LN2@rehash_imp
$LN3@rehash_imp:

; 4616 :         }

  00166	eb 53		 jmp	 SHORT $LN15@rehash_imp
__catch$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$0:

; 4617 :         BOOST_CATCH(...)
; 4618 :         {
; 4619 :           node_pointer n = next_node(prev);

  00168	ff 75 e4	 push	 DWORD PTR _prev$[ebp]
  0016b	e8 00 00 00 00	 call	 ?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_node
  00170	59		 pop	 ecx
  00171	89 45 dc	 mov	 DWORD PTR _n$10[ebp], eax

; 4620 :           prev->next_ = node_pointer();

  00174	8b 45 e4	 mov	 eax, DWORD PTR _prev$[ebp]
  00177	83 20 00	 and	 DWORD PTR [eax], 0
$LN7@rehash_imp:

; 4621 :           while (n) {

  0017a	83 7d dc 00	 cmp	 DWORD PTR _n$10[ebp], 0
  0017e	74 2c		 je	 SHORT $LN8@rehash_imp

; 4622 :             node_pointer next = next_node(n);

  00180	ff 75 dc	 push	 DWORD PTR _n$10[ebp]
  00183	e8 00 00 00 00	 call	 ?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_node
  00188	59		 pop	 ecx
  00189	89 45 b8	 mov	 DWORD PTR _next$3[ebp], eax

; 4623 :             destroy_node(n);

  0018c	ff 75 dc	 push	 DWORD PTR _n$10[ebp]
  0018f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00192	e8 00 00 00 00	 call	 ?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node

; 4624 :             --size_;

  00197	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0019a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0019d	48		 dec	 eax
  0019e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a1	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 4625 :             n = next;

  001a4	8b 45 b8	 mov	 eax, DWORD PTR _next$3[ebp]
  001a7	89 45 dc	 mov	 DWORD PTR _n$10[ebp], eax

; 4626 :           }

  001aa	eb ce		 jmp	 SHORT $LN7@rehash_imp
$LN8@rehash_imp:

; 4627 :           BOOST_RETHROW

  001ac	6a 00		 push	 0
  001ae	6a 00		 push	 0
  001b0	e8 00 00 00 00	 call	 __CxxThrowException@8

; 4628 :         }

  001b5	b8 00 00 00 00	 mov	 eax, $LN18@rehash_imp
  001ba	c3		 ret	 0
$LN15@rehash_imp:
  001bb	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  001bf	eb 04		 jmp	 SHORT $LN14@rehash_imp
$LN18@rehash_imp:
  001c1	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
$LN14@rehash_imp:

; 4629 :         BOOST_CATCH_END
; 4630 :       }

  001c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001cf	59		 pop	 ecx
  001d0	5f		 pop	 edi
  001d1	5e		 pop	 esi
  001d2	5b		 pop	 ebx
  001d3	c9		 leave
  001d4	c2 04 00	 ret	 4
  001d7	cc		 int	 3
  001d8	cc		 int	 3
  001d9	cc		 int	 3
  001da	cc		 int	 3
  001db	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?reserve_for_insert@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
$T4 = -32						; size = 4
_num_buckets$5 = -28					; size = 4
tv73 = -24						; size = 4
$T6 = -20						; size = 4
tv137 = -16						; size = 4
__Left$ = -12						; size = 4
$T7 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?reserve_for_insert@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::reserve_for_insert, COMDAT
; _this$ = ecx

; 4541 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4542 :         if (!buckets_) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00010	75 4a		 jne	 SHORT $LN2@reserve_fo

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  00012	ff 75 08	 push	 DWORD PTR _size$[ebp]
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
  0001d	89 45 f8	 mov	 DWORD PTR $T7[ebp], eax
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 c0 04	 add	 eax, 4
  00026	89 45 f4	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00029	8b 45 f4	 mov	 eax, DWORD PTR __Left$[ebp]
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	3b 45 f8	 cmp	 eax, DWORD PTR $T7[ebp]
  00031	73 08		 jae	 SHORT $LN55@reserve_fo
  00033	8d 45 f8	 lea	 eax, DWORD PTR $T7[ebp]
  00036	89 45 f0	 mov	 DWORD PTR tv137[ebp], eax
  00039	eb 06		 jmp	 SHORT $LN56@reserve_fo
$LN55@reserve_fo:
  0003b	8b 45 f4	 mov	 eax, DWORD PTR __Left$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR tv137[ebp], eax
$LN56@reserve_fo:
  00041	8b 45 f0	 mov	 eax, DWORD PTR tv137[ebp]
  00044	89 45 e0	 mov	 DWORD PTR $T4[ebp], eax
  00047	8b 45 e0	 mov	 eax, DWORD PTR $T4[ebp]
  0004a	89 45 dc	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  0004d	8b 45 dc	 mov	 eax, DWORD PTR $T3[ebp]
  00050	ff 30		 push	 DWORD PTR [eax]
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
  0005a	eb 64		 jmp	 SHORT $LN1@reserve_fo
$LN2@reserve_fo:

; 4544 :         } else if (size > max_load_) {

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  00062	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00065	76 59		 jbe	 SHORT $LN1@reserve_fo

; 4545 :           std::size_t num_buckets =

  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0006d	d1 e8		 shr	 eax, 1
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  00075	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00078	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  0007b	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  0007e	73 08		 jae	 SHORT $LN60@reserve_fo
  00080	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00083	89 45 e8	 mov	 DWORD PTR tv73[ebp], eax
  00086	eb 06		 jmp	 SHORT $LN61@reserve_fo
$LN60@reserve_fo:
  00088	8d 45 08	 lea	 eax, DWORD PTR _size$[ebp]
  0008b	89 45 e8	 mov	 DWORD PTR tv73[ebp], eax
$LN61@reserve_fo:
  0008e	8b 45 e8	 mov	 eax, DWORD PTR tv73[ebp]
  00091	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
  00094	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00097	89 45 d4	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  0009a	8b 45 d4	 mov	 eax, DWORD PTR $T1[ebp]
  0009d	ff 30		 push	 DWORD PTR [eax]
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
  000a7	89 45 e4	 mov	 DWORD PTR _num_buckets$5[ebp], eax

; 4546 :             min_buckets_for_size((std::max)(size, size_ + (size_ >> 1)));
; 4547 : 
; 4548 :           if (num_buckets != bucket_count_)

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 4d e4	 mov	 ecx, DWORD PTR _num_buckets$5[ebp]
  000b0	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000b3	74 0b		 je	 SHORT $LN1@reserve_fo

; 4549 :             this->rehash_impl(num_buckets);

  000b5	ff 75 e4	 push	 DWORD PTR _num_buckets$5[ebp]
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
$LN1@reserve_fo:

; 4550 :         }
; 4551 :       }

  000c0	c9		 leave
  000c1	c2 04 00	 ret	 4
?reserve_for_insert@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::reserve_for_insert
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?find_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@ABK@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_v$3 = -8						; size = 4
_this$ = -4						; size = 4
_k$ = 8							; size = 4
?find_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@ABK@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node, COMDAT
; _this$ = ecx

; 3580 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2791 :           return *static_cast<function_pair const*>(

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0000f	83 e0 01	 and	 eax, 1
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8d 44 01 01	 lea	 eax, DWORD PTR [ecx+eax+1]
  00019	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax

; 2599 :           return hf(x);

  0001c	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]
  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 45 f8	 mov	 DWORD PTR _v$3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00024	ff 75 f8	 push	 DWORD PTR _v$3[ebp]
  00027	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  0002c	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3569 :           return policy::apply_hash(this->hash_function(), k);

  0002d	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?key_eq@?$functions@U?$hash@K@boost@@U?$equal_to@K@std@@@detail@unordered@boost@@QBEABU?$equal_to@K@std@@XZ ; boost::unordered::detail::functions<boost::hash<unsigned long>,std::equal_to<unsigned long> >::key_eq
  00038	50		 push	 eax
  00039	ff 75 08	 push	 DWORD PTR _k$[ebp]
  0003c	ff 75 f4	 push	 DWORD PTR $T2[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 3582 :         }

  00047	c9		 leave
  00048	c2 04 00	 ret	 4
?find_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@ABK@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?clear_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
_next$1 = -24						; size = 4
_prev$2 = -20						; size = 4
_end$3 = -16						; size = 4
_n$4 = -12						; size = 4
_it$5 = -8						; size = 4
_this$ = -4						; size = 4
?clear_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::clear_impl, COMDAT
; _this$ = ecx

; 4515 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4516 :         if (size_) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	74 72		 je	 SHORT $LN1@clear_impl

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0001e	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 4517 :           bucket_pointer end = get_bucket_pointer(bucket_count_);

  00021	89 45 f0	 mov	 DWORD PTR _end$3[ebp], eax

; 4518 :           for (bucket_pointer it = buckets_; it != end; ++it) {

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0002a	89 45 f8	 mov	 DWORD PTR _it$5[ebp], eax
  0002d	eb 09		 jmp	 SHORT $LN4@clear_impl
$LN2@clear_impl:
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _it$5[ebp]
  00032	83 c0 04	 add	 eax, 4
  00035	89 45 f8	 mov	 DWORD PTR _it$5[ebp], eax
$LN4@clear_impl:
  00038	8b 45 f8	 mov	 eax, DWORD PTR _it$5[ebp]
  0003b	3b 45 f0	 cmp	 eax, DWORD PTR _end$3[ebp]
  0003e	74 08		 je	 SHORT $LN11@clear_impl

; 4519 :             it->next_ = node_pointer();

  00040	8b 45 f8	 mov	 eax, DWORD PTR _it$5[ebp]
  00043	83 20 00	 and	 DWORD PTR [eax], 0

; 4520 :           }

  00046	eb e7		 jmp	 SHORT $LN2@clear_impl
$LN11@clear_impl:

; 4521 : 
; 4522 :           link_pointer prev = end->first_from_start();

  00048	8b 45 f0	 mov	 eax, DWORD PTR _end$3[ebp]
  0004b	89 45 ec	 mov	 DWORD PTR _prev$2[ebp], eax

; 2964 :           return static_cast<node_pointer>(n->next_);

  0004e	8b 45 ec	 mov	 eax, DWORD PTR _prev$2[ebp]
  00051	8b 00		 mov	 eax, DWORD PTR [eax]
  00053	89 45 f4	 mov	 DWORD PTR _n$4[ebp], eax

; 4523 :           node_pointer n = next_node(prev);
; 4524 :           prev->next_ = node_pointer();

  00056	8b 45 ec	 mov	 eax, DWORD PTR _prev$2[ebp]
  00059	83 20 00	 and	 DWORD PTR [eax], 0

; 4525 :           size_ = 0;

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	83 60 08 00	 and	 DWORD PTR [eax+8], 0
$LN5@clear_impl:

; 4526 : 
; 4527 :           while (n) {

  00063	83 7d f4 00	 cmp	 DWORD PTR _n$4[ebp], 0
  00067	74 1b		 je	 SHORT $LN1@clear_impl

; 2964 :           return static_cast<node_pointer>(n->next_);

  00069	8b 45 f4	 mov	 eax, DWORD PTR _n$4[ebp]
  0006c	8b 00		 mov	 eax, DWORD PTR [eax]
  0006e	89 45 e8	 mov	 DWORD PTR _next$1[ebp], eax

; 4528 :             node_pointer next = next_node(n);
; 4529 :             destroy_node(n);

  00071	ff 75 f4	 push	 DWORD PTR _n$4[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node

; 4530 :             n = next;

  0007c	8b 45 e8	 mov	 eax, DWORD PTR _next$1[ebp]
  0007f	89 45 f4	 mov	 DWORD PTR _n$4[ebp], eax

; 4531 :           }

  00082	eb df		 jmp	 SHORT $LN5@clear_impl
$LN1@clear_impl:

; 4532 :         }
; 4533 :       }

  00084	c9		 leave
  00085	c3		 ret	 0
?clear_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::clear_impl
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
__Ptr$ = -20						; size = 4
__Count$ = -16						; size = 4
_end$ = -12						; size = 4
_it$2 = -8						; size = 4
_this$ = -4						; size = 4
?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_buckets, COMDAT
; _this$ = ecx

; 3370 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00015	8d 44 81 04	 lea	 eax, DWORD PTR [ecx+eax*4+4]

; 3371 :           bucket_pointer end = get_bucket_pointer(bucket_count_ + 1);

  00019	89 45 f4	 mov	 DWORD PTR _end$[ebp], eax

; 3372 :           for (bucket_pointer it = buckets_; it != end; ++it) {

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00022	89 45 f8	 mov	 DWORD PTR _it$2[ebp], eax
  00025	eb 09		 jmp	 SHORT $LN4@destroy_bu
$LN2@destroy_bu:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _it$2[ebp]
  0002a	83 c0 04	 add	 eax, 4
  0002d	89 45 f8	 mov	 DWORD PTR _it$2[ebp], eax
$LN4@destroy_bu:
  00030	8b 45 f8	 mov	 eax, DWORD PTR _it$2[ebp]
  00033	3b 45 f4	 cmp	 eax, DWORD PTR _end$[ebp]
  00036	74 08		 je	 SHORT $LN13@destroy_bu
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  00038	8b 45 f8	 mov	 eax, DWORD PTR _it$2[ebp]
  0003b	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3374 :           }

  0003e	eb e7		 jmp	 SHORT $LN2@destroy_bu
$LN13@destroy_bu:

; 3375 : 
; 3376 :           bucket_allocator_traits::deallocate(

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00046	40		 inc	 eax
  00047	89 45 f0	 mov	 DWORD PTR __Count$[ebp], eax
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00050	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00053	8b 45 f0	 mov	 eax, DWORD PTR __Count$[ebp]
  00056	c1 e0 02	 shl	 eax, 2
  00059	50		 push	 eax
  0005a	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  0005d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00062	59		 pop	 ecx
  00063	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3378 :         }

  00064	c9		 leave
  00065	c3		 ret	 0
?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_buckets
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?delete_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
$T1 = -28						; size = 4
_next$2 = -24						; size = 4
_next$3 = -20						; size = 4
$T4 = -16						; size = 4
_this$ = -12						; size = 4
_n$5 = -8						; size = 4
_this$ = -4						; size = 4
?delete_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::delete_buckets, COMDAT
; _this$ = ecx

; 3344 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3345 :           if (buckets_) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00010	0f 84 91 00 00
	00		 je	 $LN1@delete_buc

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00022	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00025	89 45 f8	 mov	 DWORD PTR _n$5[ebp], eax

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {

  00028	33 c0		 xor	 eax, eax
  0002a	74 3d		 je	 SHORT $LN2@delete_buc

; 2964 :           return static_cast<node_pointer>(n->next_);

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _n$5[ebp]
  0002f	8b 00		 mov	 eax, DWORD PTR [eax]
  00031	89 45 ec	 mov	 DWORD PTR _next$3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _n$5[ebp]
  00037	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	83 c0 03	 add	 eax, 3
  00040	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  00043	74 09		 je	 SHORT $LN20@delete_buc
  00045	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00048	40		 inc	 eax
  00049	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  0004c	eb 04		 jmp	 SHORT $LN16@delete_buc
$LN20@delete_buc:
  0004e	83 65 f0 00	 and	 DWORD PTR $T4[ebp], 0
$LN16@delete_buc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00052	33 c0		 xor	 eax, eax
  00054	40		 inc	 eax
  00055	6b c0 30	 imul	 eax, eax, 48
  00058	50		 push	 eax
  00059	ff 75 f8	 push	 DWORD PTR _n$5[ebp]
  0005c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00061	59		 pop	 ecx
  00062	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3353 :               n = next;

  00063	8b 45 ec	 mov	 eax, DWORD PTR _next$3[ebp]
  00066	89 45 f8	 mov	 DWORD PTR _n$5[ebp], eax
$LN2@delete_buc:

; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00069	83 7d f8 00	 cmp	 DWORD PTR _n$5[ebp], 0
  0006d	74 1b		 je	 SHORT $LN3@delete_buc

; 2964 :           return static_cast<node_pointer>(n->next_);

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _n$5[ebp]
  00072	8b 00		 mov	 eax, DWORD PTR [eax]
  00074	89 45 e8	 mov	 DWORD PTR _next$2[ebp], eax

; 3357 :               node_pointer next = next_node(n);
; 3358 :               destroy_node(n);

  00077	ff 75 f8	 push	 DWORD PTR _n$5[ebp]
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node

; 3359 :               n = next;

  00082	8b 45 e8	 mov	 eax, DWORD PTR _next$2[ebp]
  00085	89 45 f8	 mov	 DWORD PTR _n$5[ebp], eax

; 3360 :             }

  00088	eb df		 jmp	 SHORT $LN2@delete_buc
$LN3@delete_buc:

; 3361 : 
; 3362 :             destroy_buckets();

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_buckets

; 3363 :             buckets_ = bucket_pointer();

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 3364 :             max_load_ = 0;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 3365 :             size_ = 0;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	83 60 08 00	 and	 DWORD PTR [eax+8], 0
$LN1@delete_buc:

; 3366 :           }
; 3367 :         }

  000a7	c9		 leave
  000a8	c3		 ret	 0
?delete_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::delete_buckets
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z
_TEXT	SEGMENT
$T1 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
_this$ = -12						; size = 4
__Ptr$ = -8						; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node, COMDAT
; _this$ = ecx

; 3336 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 03	 add	 eax, 3
  0000f	89 45 fc	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  00012	74 09		 je	 SHORT $LN11@destroy_no
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	40		 inc	 eax
  00018	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
  0001b	eb 04		 jmp	 SHORT $LN7@destroy_no
$LN11@destroy_no:
  0001d	83 65 ec 00	 and	 DWORD PTR $T3[ebp], 0
$LN7@destroy_no:

; 4869 :         value_type* value_ptr() { return value_base_.value_ptr(); }

  00021	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00024	83 c0 08	 add	 eax, 8

; 3337 :           BOOST_UNORDERED_CALL_DESTROY(

  00027	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  0002d	e8 00 00 00 00	 call	 ??1?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@QAE@XZ
  00032	33 c0		 xor	 eax, eax
  00034	83 e0 01	 and	 eax, 1
  00037	74 0c		 je	 SHORT $LN15@destroy_no
  00039	6a 28		 push	 40			; 00000028H
  0003b	ff 75 f8	 push	 DWORD PTR __Ptr$[ebp]
  0003e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00043	59		 pop	 ecx
  00044	59		 pop	 ecx
$LN15@destroy_no:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  00045	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  0004b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	83 c0 03	 add	 eax, 3
  00051	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  00054	74 09		 je	 SHORT $LN74@destroy_no
  00056	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00059	40		 inc	 eax
  0005a	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  0005d	eb 04		 jmp	 SHORT $LN70@destroy_no
$LN74@destroy_no:
  0005f	83 65 e8 00	 and	 DWORD PTR $T2[ebp], 0
$LN70@destroy_no:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00063	33 c0		 xor	 eax, eax
  00065	40		 inc	 eax
  00066	6b c0 30	 imul	 eax, eax, 48
  00069	50		 push	 eax
  0006a	ff 75 08	 push	 DWORD PTR _n$[ebp]
  0006d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00072	59		 pop	 ecx
  00073	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3341 :         }

  00074	c9		 leave
  00075	c2 04 00	 ret	 4
?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_a$2 = -116						; size = 8
__Max_possible$3 = -108					; size = 4
__Max_possible$4 = -104					; size = 4
__Max_possible$5 = -100					; size = 4
$T6 = -96						; size = 4
$T7 = -92						; size = 4
$T8 = -88						; size = 4
$T9 = -84						; size = 4
$T10 = -80						; size = 4
$T11 = -76						; size = 4
_p$12 = -72						; size = 4
$T13 = -68						; size = 4
$T14 = -64						; size = 4
_new_buckets$15 = -60					; size = 4
$T16 = -56						; size = 4
_end$ = -52						; size = 4
__Count$ = -48						; size = 4
__Count$ = -44						; size = 4
$T17 = -40						; size = 4
_this$ = -36						; size = 4
__Count$ = -32						; size = 4
_dummy_node$ = -28					; size = 4
_i$18 = -24						; size = 4
_this$ = -20						; size = 4
__Overflow_is_possible$19 = -15				; size = 1
__Overflow_is_possible$20 = -14				; size = 1
__Overflow_is_possible$21 = -13				; size = 1
__$EHRec$ = -12						; size = 12
_new_count$ = 8						; size = 4
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets, COMDAT
; _this$ = ecx

; 3178 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3179 :           link_pointer dummy_node;
; 3180 : 
; 3181 :           // Construct the new buckets and dummy node, and destroy the old
; 3182 :           // buckets
; 3183 :           if (buckets_) {

  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0002f	74 5d		 je	 SHORT $LN5@create_buc

; 3184 :             dummy_node =

  00031	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0003d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00040	89 45 e4	 mov	 DWORD PTR _dummy_node$[ebp], eax

; 3185 :               (buckets_ + static_cast<std::ptrdiff_t>(bucket_count_))->next_;
; 3186 :             bucket_pointer new_buckets =

  00043	8b 45 08	 mov	 eax, DWORD PTR _new_count$[ebp]
  00046	40		 inc	 eax
  00047	89 45 e0	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0004a	c6 45 f3 01	 mov	 BYTE PTR __Overflow_is_possible$21[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0004e	c7 45 9c ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$5[ebp], 1073741823 ; 3fffffffH

; 60   :         if (_Count > _Max_possible) {

  00055	81 7d e0 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0005c	76 05		 jbe	 SHORT $LN20@create_buc

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0005e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN20@create_buc:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00063	8b 45 e0	 mov	 eax, DWORD PTR __Count$[ebp]
  00066	c1 e0 02	 shl	 eax, 2
  00069	89 45 c8	 mov	 DWORD PTR $T16[ebp], eax

; 686  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0006c	ff 75 c8	 push	 DWORD PTR $T16[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00074	59		 pop	 ecx
  00075	89 45 c4	 mov	 DWORD PTR _new_buckets$15[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3188 :             destroy_buckets();

  00078	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_buckets

; 3189 :             buckets_ = new_buckets;

  00080	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4d c4	 mov	 ecx, DWORD PTR _new_buckets$15[ebp]
  00086	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00089	e9 d4 00 00 00	 jmp	 $LN6@create_buc
$LN5@create_buc:

; 3190 :           } else if (bucket::extra_node) {

  0008e	33 c0		 xor	 eax, eax
  00090	0f 84 8a 00 00
	00		 je	 $LN7@create_buc

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00096	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00099	83 c0 03	 add	 eax, 3
  0009c	89 45 dc	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  0009f	74 09		 je	 SHORT $LN48@create_buc
  000a1	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	40		 inc	 eax
  000a5	89 45 d8	 mov	 DWORD PTR $T17[ebp], eax
  000a8	eb 04		 jmp	 SHORT $LN44@create_buc
$LN48@create_buc:
  000aa	83 65 d8 00	 and	 DWORD PTR $T17[ebp], 0
$LN44@create_buc:

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  000ae	8b 45 d8	 mov	 eax, DWORD PTR $T17[ebp]
  000b1	89 45 8c	 mov	 DWORD PTR _a$2[ebp], eax
  000b4	83 65 90 00	 and	 DWORD PTR _a$2[ebp+4], 0

; 3191 :             node_constructor a(node_alloc());

  000b8	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 3192 :             a.create_node();

  000bc	8d 4d 8c	 lea	 ecx, DWORD PTR _a$2[ebp]
  000bf	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::create_node

; 3193 :             buckets_ =

  000c4	8b 45 08	 mov	 eax, DWORD PTR _new_count$[ebp]
  000c7	40		 inc	 eax
  000c8	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000cb	c6 45 f2 01	 mov	 BYTE PTR __Overflow_is_possible$20[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000cf	c7 45 98 ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$4[ebp], 1073741823 ; 3fffffffH

; 60   :         if (_Count > _Max_possible) {

  000d6	81 7d d4 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  000dd	76 05		 jbe	 SHORT $LN63@create_buc

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000df	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN63@create_buc:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000e4	8b 45 d4	 mov	 eax, DWORD PTR __Count$[ebp]
  000e7	c1 e0 02	 shl	 eax, 2
  000ea	89 45 c0	 mov	 DWORD PTR $T14[ebp], eax

; 686  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  000ed	ff 75 c0	 push	 DWORD PTR $T14[ebp]
  000f0	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000f5	59		 pop	 ecx
  000f6	89 45 bc	 mov	 DWORD PTR $T13[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3193 :             buckets_ =

  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 4d bc	 mov	 ecx, DWORD PTR $T13[ebp]
  000ff	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1956 :           node_pointer p = node_;

  00102	8b 45 90	 mov	 eax, DWORD PTR _a$2[ebp+4]
  00105	89 45 b8	 mov	 DWORD PTR _p$12[ebp], eax

; 1957 :           node_ = node_pointer();

  00108	83 65 90 00	 and	 DWORD PTR _a$2[ebp+4], 0

; 3194 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3195 :             dummy_node = a.release();

  0010c	8b 45 b8	 mov	 eax, DWORD PTR _p$12[ebp]
  0010f	89 45 e4	 mov	 DWORD PTR _dummy_node$[ebp], eax

; 3196 :           } else {

  00112	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00116	8d 4d 8c	 lea	 ecx, DWORD PTR _a$2[ebp]
  00119	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
  0011e	eb 42		 jmp	 SHORT $LN6@create_buc
$LN7@create_buc:

; 3197 :             dummy_node = link_pointer();

  00120	83 65 e4 00	 and	 DWORD PTR _dummy_node$[ebp], 0

; 3198 :             buckets_ =

  00124	8b 45 08	 mov	 eax, DWORD PTR _new_count$[ebp]
  00127	40		 inc	 eax
  00128	89 45 d0	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0012b	c6 45 f1 01	 mov	 BYTE PTR __Overflow_is_possible$19[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0012f	c7 45 94 ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$3[ebp], 1073741823 ; 3fffffffH

; 60   :         if (_Count > _Max_possible) {

  00136	81 7d d0 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0013d	76 05		 jbe	 SHORT $LN77@create_buc

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN77@create_buc:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00144	8b 45 d0	 mov	 eax, DWORD PTR __Count$[ebp]
  00147	c1 e0 02	 shl	 eax, 2
  0014a	89 45 b4	 mov	 DWORD PTR $T11[ebp], eax

; 686  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0014d	ff 75 b4	 push	 DWORD PTR $T11[ebp]
  00150	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00155	59		 pop	 ecx
  00156	89 45 b0	 mov	 DWORD PTR $T10[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3198 :             buckets_ =

  00159	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0015c	8b 4d b0	 mov	 ecx, DWORD PTR $T10[ebp]
  0015f	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN6@create_buc:

; 3199 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3200 :           }
; 3201 : 
; 3202 :           // nothrow from here...
; 3203 :           bucket_count_ = new_count;

  00162	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00165	8b 4d 08	 mov	 ecx, DWORD PTR _new_count$[ebp]
  00168	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3204 :           recalculate_max_load();

  0016b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0016e	e8 00 00 00 00	 call	 ?recalculate_max_load@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::recalculate_max_load

; 3205 : 
; 3206 :           bucket_pointer end =

  00173	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00176	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00179	8b 4d 08	 mov	 ecx, DWORD PTR _new_count$[ebp]
  0017c	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0017f	89 45 cc	 mov	 DWORD PTR _end$[ebp], eax

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  00182	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00185	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00188	89 45 e8	 mov	 DWORD PTR _i$18[ebp], eax
  0018b	eb 09		 jmp	 SHORT $LN4@create_buc
$LN2@create_buc:
  0018d	8b 45 e8	 mov	 eax, DWORD PTR _i$18[ebp]
  00190	83 c0 04	 add	 eax, 4
  00193	89 45 e8	 mov	 DWORD PTR _i$18[ebp], eax
$LN4@create_buc:
  00196	8b 45 e8	 mov	 eax, DWORD PTR _i$18[ebp]
  00199	3b 45 cc	 cmp	 eax, DWORD PTR _end$[ebp]
  0019c	74 14		 je	 SHORT $LN3@create_buc
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  0019e	8b 45 e8	 mov	 eax, DWORD PTR _i$18[ebp]
  001a1	89 45 ac	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  001a4	8b 45 ac	 mov	 eax, DWORD PTR $T9[ebp]
  001a7	89 45 a8	 mov	 DWORD PTR $T8[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2579 :         ptr_bucket() : next_(0) {}

  001aa	8b 45 a8	 mov	 eax, DWORD PTR $T8[ebp]
  001ad	83 20 00	 and	 DWORD PTR [eax], 0

; 3209 :             new ((void*)boost::to_address(i)) bucket();
; 3210 :           }

  001b0	eb db		 jmp	 SHORT $LN2@create_buc
$LN3@create_buc:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  001b2	8b 45 cc	 mov	 eax, DWORD PTR _end$[ebp]
  001b5	89 45 a4	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  001b8	8b 45 a4	 mov	 eax, DWORD PTR $T7[ebp]
  001bb	89 45 a0	 mov	 DWORD PTR $T6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  001be	8b 45 a0	 mov	 eax, DWORD PTR $T6[ebp]
  001c1	8b 4d e4	 mov	 ecx, DWORD PTR _dummy_node$[ebp]
  001c4	89 08		 mov	 DWORD PTR [eax], ecx
$LN23@create_buc:

; 3211 :           new ((void*)boost::to_address(end)) bucket(dummy_node);
; 3212 :         }

  001c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d0	59		 pop	 ecx
  001d1	c9		 leave
  001d2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$0:
  00000	8d 4d 8c	 lea	 ecx, DWORD PTR _a$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z
_TEXT	SEGMENT
tv91 = -40						; size = 8
_f$ = -32						; size = 8
$T1 = -24						; size = 4
$T2 = -20						; size = 4
_this$ = -16						; size = 4
tv81 = -12						; size = 4
tv87 = -8						; size = 4
$T3 = -4						; size = 4
_size$ = 8						; size = 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size, COMDAT
; _this$ = ecx

; 3095 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00011	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00014	89 45 f8	 mov	 DWORD PTR tv87[ebp], eax
  00017	f2 0f 2a 4d f8	 cvtsi2sd xmm1, DWORD PTR tv87[ebp]
  0001c	8b 45 f8	 mov	 eax, DWORD PTR tv87[ebp]
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0002b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002f	51		 push	 ecx
  00030	51		 push	 ecx
  00031	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00036	e8 00 00 00 00	 call	 _floor
  0003b	59		 pop	 ecx
  0003c	59		 pop	 ecx
  0003d	dd 5d d8	 fstp	 QWORD PTR tv91[ebp]
  00040	f2 0f 10 45 d8	 movsd	 xmm0, QWORD PTR tv91[ebp]
  00045	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0004d	f2 0f 11 45 e0	 movsd	 QWORD PTR _f$[ebp], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 740  :         return UINT_MAX;

  00052	83 4d ec ff	 or	 DWORD PTR $T2[ebp], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2893 :         return f >= static_cast<double>(

  00056	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00059	89 45 f4	 mov	 DWORD PTR tv81[ebp], eax
  0005c	f2 0f 2a 45 f4	 cvtsi2sd xmm0, DWORD PTR tv81[ebp]
  00061	8b 45 f4	 mov	 eax, DWORD PTR tv81[ebp]
  00064	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00067	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00070	f2 0f 10 4d e0	 movsd	 xmm1, QWORD PTR _f$[ebp]
  00075	66 0f 2f c8	 comisd	 xmm1, xmm0
  00079	72 0c		 jb	 SHORT $LN5@min_bucket
  0007b	8b 45 e8	 mov	 eax, DWORD PTR $T1[ebp]
  0007e	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 740  :         return UINT_MAX;

  00081	83 4d fc ff	 or	 DWORD PTR $T3[ebp], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2893 :         return f >= static_cast<double>(

  00085	eb 0d		 jmp	 SHORT $LN6@min_bucket
$LN5@min_bucket:
  00087	f2 0f 10 45 e0	 movsd	 xmm0, QWORD PTR _f$[ebp]
  0008c	e8 00 00 00 00	 call	 __dtoui3
  00091	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
$LN6@min_bucket:

; 2609 :           return boost::unordered::detail::next_prime(min);

  00094	ff 75 fc	 push	 DWORD PTR $T3[ebp]
  00097	e8 00 00 00 00	 call	 ?next_prime@detail@unordered@boost@@YAII@Z ; boost::unordered::detail::next_prime
  0009c	59		 pop	 ecx

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  0009d	c9		 leave
  0009e	c2 04 00	 ret	 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?recalculate_max_load@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
_f$ = -36						; size = 8
$T1 = -28						; size = 4
$T2 = -24						; size = 4
tv76 = -20						; size = 4
tv92 = -16						; size = 4
tv83 = -12						; size = 4
tv82 = -8						; size = 4
_this$ = -4						; size = 4
?recalculate_max_load@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::recalculate_max_load, COMDAT
; _this$ = ecx

; 3076 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3077 :           using namespace std;
; 3078 : 
; 3079 :           // From 6.3.1/13:
; 3080 :           // Only resize when size >= mlf_ * count
; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00010	0f 84 84 00 00
	00		 je	 $LN3@recalculat
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001c	89 45 f4	 mov	 DWORD PTR tv83[ebp], eax
  0001f	f2 0f 2a 45 f4	 cvtsi2sd xmm0, DWORD PTR tv83[ebp]
  00024	8b 45 f4	 mov	 eax, DWORD PTR tv83[ebp]
  00027	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002a	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	f3 0f 5a 48 0c	 cvtss2sd xmm1, DWORD PTR [eax+12]
  0003b	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0003f	51		 push	 ecx
  00040	51		 push	 ecx
  00041	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00046	e8 00 00 00 00	 call	 _ceil
  0004b	59		 pop	 ecx
  0004c	59		 pop	 ecx
  0004d	dd 5d dc	 fstp	 QWORD PTR _f$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 740  :         return UINT_MAX;

  00050	83 4d e8 ff	 or	 DWORD PTR $T2[ebp], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2893 :         return f >= static_cast<double>(

  00054	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00057	89 45 f0	 mov	 DWORD PTR tv92[ebp], eax
  0005a	f2 0f 2a 45 f0	 cvtsi2sd xmm0, DWORD PTR tv92[ebp]
  0005f	8b 45 f0	 mov	 eax, DWORD PTR tv92[ebp]
  00062	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00065	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0006e	f2 0f 10 4d dc	 movsd	 xmm1, QWORD PTR _f$[ebp]
  00073	66 0f 2f c8	 comisd	 xmm1, xmm0
  00077	72 0c		 jb	 SHORT $LN7@recalculat
  00079	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  0007c	89 45 f8	 mov	 DWORD PTR tv82[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 740  :         return UINT_MAX;

  0007f	83 4d f8 ff	 or	 DWORD PTR tv82[ebp], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2893 :         return f >= static_cast<double>(

  00083	eb 0d		 jmp	 SHORT $LN8@recalculat
$LN7@recalculat:
  00085	f2 0f 10 45 dc	 movsd	 xmm0, QWORD PTR _f$[ebp]
  0008a	e8 00 00 00 00	 call	 __dtoui3
  0008f	89 45 f8	 mov	 DWORD PTR tv82[ebp], eax
$LN8@recalculat:

; 3077 :           using namespace std;
; 3078 : 
; 3079 :           // From 6.3.1/13:
; 3080 :           // Only resize when size >= mlf_ * count
; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  00092	8b 45 f8	 mov	 eax, DWORD PTR tv82[ebp]
  00095	89 45 ec	 mov	 DWORD PTR tv76[ebp], eax
  00098	eb 04		 jmp	 SHORT $LN4@recalculat
$LN3@recalculat:
  0009a	83 65 ec 00	 and	 DWORD PTR tv76[ebp], 0
$LN4@recalculat:
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 4d ec	 mov	 ecx, DWORD PTR tv76[ebp]
  000a4	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 3082 :                                    ceil(static_cast<double>(mlf_) *
; 3083 :                                         static_cast<double>(bucket_count_)))
; 3084 :                                : 0;
; 3085 :         }

  000a7	c9		 leave
  000a8	c3		 ret	 0
?recalculate_max_load@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::recalculate_max_load
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?begin@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@I@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
_prev$ = -12						; size = 4
_this$ = -8						; size = 4
tv72 = -4						; size = 4
_bucket_index$ = 8					; size = 4
?begin@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@I@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::begin, COMDAT
; _this$ = ecx

; 3045 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3046 :           if (!size_)

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	75 04		 jne	 SHORT $LN8@begin

; 3047 :             return node_pointer();

  00012	33 c0		 xor	 eax, eax
  00014	eb 2c		 jmp	 SHORT $LN1@begin
$LN8@begin:

; 3036 :           return get_bucket_pointer(bucket_index)->next_;

  00016	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _bucket_index$[ebp]
  0001f	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00022	89 45 f4	 mov	 DWORD PTR _prev$[ebp], eax

; 3048 :           link_pointer prev = get_previous_start(bucket_index);
; 3049 :           return prev ? next_node(prev) : node_pointer();

  00025	83 7d f4 00	 cmp	 DWORD PTR _prev$[ebp], 0
  00029	74 10		 je	 SHORT $LN4@begin
  0002b	8b 45 f0	 mov	 eax, DWORD PTR $T1[ebp]
  0002e	89 45 fc	 mov	 DWORD PTR tv72[ebp], eax

; 2964 :           return static_cast<node_pointer>(n->next_);

  00031	8b 45 f4	 mov	 eax, DWORD PTR _prev$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	89 45 fc	 mov	 DWORD PTR tv72[ebp], eax

; 3048 :           link_pointer prev = get_previous_start(bucket_index);
; 3049 :           return prev ? next_node(prev) : node_pointer();

  00039	eb 04		 jmp	 SHORT $LN5@begin
$LN4@begin:
  0003b	83 65 fc 00	 and	 DWORD PTR tv72[ebp], 0
$LN5@begin:
  0003f	8b 45 fc	 mov	 eax, DWORD PTR tv72[ebp]
$LN1@begin:

; 3050 :         }

  00042	c9		 leave
  00043	c2 04 00	 ret	 4
?begin@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@I@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::begin
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?next_for_find@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z
_TEXT	SEGMENT
tv84 = -8						; size = 4
_n2$ = -4						; size = 4
_n$ = 8							; size = 4
?next_for_find@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_for_find, COMDAT

; 2968 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 2969 :           node_pointer n2 = static_cast<node_pointer>(n);

  00005	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00008	89 45 fc	 mov	 DWORD PTR _n2$[ebp], eax
$LN4@next_for_f:

; 2964 :           return static_cast<node_pointer>(n->next_);

  0000b	8b 45 fc	 mov	 eax, DWORD PTR _n2$[ebp]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	89 45 fc	 mov	 DWORD PTR _n2$[ebp], eax

; 2970 :           do {
; 2971 :             n2 = next_node(n2);
; 2972 :           } while (n2 && !n2->is_first_in_group());

  00013	83 7d fc 00	 cmp	 DWORD PTR _n2$[ebp], 0
  00017	74 20		 je	 SHORT $LN3@next_for_f

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00019	8b 45 fc	 mov	 eax, DWORD PTR _n2$[ebp]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00024	75 09		 jne	 SHORT $LN11@next_for_f
  00026	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv84[ebp], 1
  0002d	eb 04		 jmp	 SHORT $LN9@next_for_f
$LN11@next_for_f:
  0002f	83 65 f8 00	 and	 DWORD PTR tv84[ebp], 0
$LN9@next_for_f:

; 2970 :           do {
; 2971 :             n2 = next_node(n2);
; 2972 :           } while (n2 && !n2->is_first_in_group());

  00033	83 7d f8 00	 cmp	 DWORD PTR tv84[ebp], 0
  00037	74 d2		 je	 SHORT $LN4@next_for_f
$LN3@next_for_f:

; 2973 :           return n2;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _n2$[ebp]

; 2974 :         }

  0003c	c9		 leave
  0003d	c3		 ret	 0
?next_for_find@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_for_find
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_node, COMDAT

; 2963 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2964 :           return static_cast<node_pointer>(n->next_);

  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 2965 :         }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_node
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??4SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
$T1 = -36						; size = 1
$T2 = -32						; size = 4
$T3 = -28						; size = 1
$T4 = -24						; size = 4
_this$ = -20						; size = 4
__Right$ = -16						; size = 4
_this$ = -12						; size = 4
__Right$ = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAEAAU01@ABU01@@Z PROC ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __Right$[ebp], eax
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00015	8b 45 f8	 mov	 eax, DWORD PTR __Right$[ebp]
  00018	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2863 :         if (this != _STD addressof(_Right)) {

  0001b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	3b 45 e8	 cmp	 eax, DWORD PTR $T4[ebp]
  00021	74 13		 je	 SHORT $LN3@operator

; 2864 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});

  00023	33 c0		 xor	 eax, eax
  00025	88 45 e4	 mov	 BYTE PTR $T3[ebp], al
  00028	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0002b	ff 75 f8	 push	 DWORD PTR __Right$[ebp]
  0002e	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_assign
$LN3@operator:
  00036	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00039	83 c0 18	 add	 eax, 24			; 00000018H
  0003c	89 45 f0	 mov	 DWORD PTR __Right$[ebp], eax
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	83 c0 18	 add	 eax, 24			; 00000018H
  00045	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00048	8b 45 f0	 mov	 eax, DWORD PTR __Right$[ebp]
  0004b	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1168 :         if (this != _STD addressof(_Right)) {

  0004e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00051	3b 45 e0	 cmp	 eax, DWORD PTR $T2[ebp]
  00054	74 13		 je	 SHORT $LN56@operator

; 1169 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});

  00056	33 c0		 xor	 eax, eax
  00058	88 45 dc	 mov	 BYTE PTR $T1[ebp], al
  0005b	ff 75 dc	 push	 DWORD PTR $T1[ebp]
  0005e	ff 75 f0	 push	 DWORD PTR __Right$[ebp]
  00061	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	e8 00 00 00 00	 call	 ?_Copy_assign@?$vector@EV?$allocator@E@std@@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Copy_assign
$LN56@operator:
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c9		 leave
  0006d	c2 04 00	 ret	 4
??4SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAEAAU01@ABU01@@Z ENDP ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::operator=
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ PROC ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::~SSupplementaryDataBlockInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	83 c1 18	 add	 ecx, 24			; 00000018H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  0000d	e8 00 00 00 00	 call	 ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
  0001a	c9		 leave
  0001b	c3		 ret	 0
??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ ENDP ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::~SSupplementaryDataBlockInfo
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_this$ = -12						; size = 4
_this$ = -8						; size = 4
_this$1 = -4						; size = 4
??0SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ PROC ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::SSupplementaryDataBlockInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00011	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00014	83 c0 18	 add	 eax, 24			; 00000018H
  00017	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  0001a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00020	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 fc	 mov	 DWORD PTR _this$1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$1[ebp]
  00029	83 20 00	 and	 DWORD PTR [eax], 0
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$1[ebp]
  0002f	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$1[ebp]
  00036	83 60 08 00	 and	 DWORD PTR [eax+8], 0
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	c9		 leave
  0003e	c3		 ret	 0
??0SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ ENDP ; EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo::SSupplementaryDataBlockInfo
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Getal@?$vector@EV?$allocator@E@std@@@std@@AAEAAV?$allocator@E@2@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Getal@?$vector@EV?$allocator@E@std@@@std@@AAEAAV?$allocator@E@2@XZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal, COMDAT
; _this$ = ecx

; 1732 :     _Alty& _Getal() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000b	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000e	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 1734 :     }

  00011	c9		 leave
  00012	c3		 ret	 0
?_Getal@?$vector@EV?$allocator@E@std@@@std@@AAEAAV?$allocator@E@2@XZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 :         _Xlength_error("vector too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1687 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();
; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 6d		 je	 SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00075	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00078	8b 00		 mov	 eax, DWORD PTR [eax]
  0007a	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007d	ff 75 d4	 push	 DWORD PTR __Count$[ebp]
  00080	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  00083	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00088	59		 pop	 ecx
  00089	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  0008a	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0008d	83 20 00	 and	 DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

  00090	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00093	83 20 00	 and	 DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

  00096	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  00099	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

  0009c	c9		 leave
  0009d	c3		 ret	 0
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();
; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 5b		 je	 SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00075	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00078	8b 00		 mov	 eax, DWORD PTR [eax]
  0007a	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007d	ff 75 d4	 push	 DWORD PTR __Count$[ebp]
  00080	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  00083	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00088	59		 pop	 ecx
  00089	59		 pop	 ecx
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  0008a	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0008d	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00090	89 08		 mov	 DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  00092	8b 45 08	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00095	03 45 0c	 add	 eax, DWORD PTR __Newsize$[ebp]
  00098	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  0009b	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  0009d	8b 45 08	 mov	 eax, DWORD PTR __Newvec$[ebp]
  000a0	03 45 10	 add	 eax, DWORD PTR __Newcapacity$[ebp]
  000a3	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000a6	89 01		 mov	 DWORD PTR [ecx], eax

; 1684 :     }

  000a8	c9		 leave
  000a9	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
$T1 = -36						; size = 4
__Myend$ = -32						; size = 4
__Mylast$ = -28						; size = 4
__Myfirst$ = -24					; size = 4
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__Newvec$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Overflow_is_possible$3 = -1				; size = 1
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1633 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1634 :         // allocate array with _Newcapacity elements
; 1635 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1636 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 e8	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1637 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 e4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1638 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 e0	 mov	 DWORD PTR __Myend$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  00027	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0002a	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0002d	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00030	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00033	c6 45 ff 00	 mov	 BYTE PTR __Overflow_is_possible$3[ebp], 0

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00037	ff 75 08	 push	 DWORD PTR __Newcapacity$[ebp]
  0003a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0003f	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1643 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

  00040	89 45 f4	 mov	 DWORD PTR __Newvec$[ebp], eax

; 1644 :         _Myfirst           = _Newvec;

  00043	8b 45 e8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00046	8b 4d f4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00049	89 08		 mov	 DWORD PTR [eax], ecx

; 1645 :         _Mylast            = _Newvec;

  0004b	8b 45 e4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0004e	8b 4d f4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00051	89 08		 mov	 DWORD PTR [eax], ecx

; 1646 :         _Myend             = _Newvec + _Newcapacity;

  00053	8b 45 f4	 mov	 eax, DWORD PTR __Newvec$[ebp]
  00056	03 45 08	 add	 eax, DWORD PTR __Newcapacity$[ebp]
  00059	8b 4d e0	 mov	 ecx, DWORD PTR __Myend$[ebp]
  0005c	89 01		 mov	 DWORD PTR [ecx], eax

; 1647 :     }

  0005e	c9		 leave
  0005f	c2 04 00	 ret	 4
?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Geometric$ = -32					; size = 4
__Max$ = -28						; size = 4
tv81 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$8 = -8					; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@ABEII@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$8[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  0001d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00020	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00023	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  00026	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00029	83 4d f0 ff	 or	 DWORD PTR $T7[ebp], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  0002d	c7 45 d8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00034	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  00037	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0003a	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  0003d	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  00040	73 08		 jae	 SHORT $LN25@Calculate_
  00042	8d 45 f0	 lea	 eax, DWORD PTR $T7[ebp]
  00045	89 45 e8	 mov	 DWORD PTR tv81[ebp], eax
  00048	eb 06		 jmp	 SHORT $LN26@Calculate_
$LN25@Calculate_:
  0004a	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  0004d	89 45 e8	 mov	 DWORD PTR tv81[ebp], eax
$LN26@Calculate_:
  00050	8b 45 e8	 mov	 eax, DWORD PTR tv81[ebp]
  00053	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  00056	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  00059	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0005c	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  0005f	8b 00		 mov	 eax, DWORD PTR [eax]
  00061	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 :         const auto _Max              = max_size();
; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00064	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00067	d1 e8		 shr	 eax, 1
  00069	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  0006c	2b c8		 sub	 ecx, eax
  0006e	39 4d fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], ecx
  00071	76 05		 jbe	 SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

  00073	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  00076	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00078	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  0007b	d1 e8		 shr	 eax, 1
  0007d	03 45 fc	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00080	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  00083	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  00086	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00089	73 05		 jae	 SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

  0008b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0008e	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

  00090	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

  00093	c9		 leave
  00094	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@ABEII@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00015	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00018	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00026	c9		 leave
  00027	c2 08 00	 ret	 8
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
tv68 = -12						; size = 4
$T6 = -8						; size = 4
$T7 = -4						; size = 4
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size, COMDAT
; _this$ = ecx

; 1487 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1737 :         return _Mypair._Get_first();

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0000c	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  0000f	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  00012	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00015	83 4d fc ff	 or	 DWORD PTR $T7[ebp], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00019	c7 45 e8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00020	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00023	89 45 f8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00026	8b 45 fc	 mov	 eax, DWORD PTR $T7[ebp]
  00029	3b 45 f8	 cmp	 eax, DWORD PTR $T6[ebp]
  0002c	73 08		 jae	 SHORT $LN17@max_size
  0002e	8d 45 fc	 lea	 eax, DWORD PTR $T7[ebp]
  00031	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
  00034	eb 06		 jmp	 SHORT $LN18@max_size
$LN17@max_size:
  00036	8d 45 f8	 lea	 eax, DWORD PTR $T6[ebp]
  00039	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
$LN18@max_size:
  0003c	8b 45 f4	 mov	 eax, DWORD PTR tv68[ebp]
  0003f	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
  00042	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00045	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00048	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  0004b	8b 00		 mov	 eax, DWORD PTR [eax]

; 1489 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1490 :     }

  0004d	c9		 leave
  0004e	c3		 ret	 0
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
$T1 = -56						; size = 4
__Newcapacity$ = -52					; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
__My_data$ = -12					; size = 4
__Myfirst$ = -8						; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Clear_and_reserve_geometric, COMDAT
; _this$ = ecx

; 1271 :     void _Clear_and_reserve_geometric(const size_type _Newsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1272 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR __My_data$[ebp], eax

; 1273 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1274 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1275 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1276 : 
; 1277 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1278 :         _STL_INTERNAL_CHECK(_Newsize != 0);
; 1279 :         {
; 1280 :             _Lockit _Lock(_LOCK_DEBUG);
; 1281 :             _STL_INTERNAL_CHECK(!_My_data._Myproxy->_Myfirstiter); // asserts that all iterators are orphaned
; 1282 :         } // unlock
; 1283 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1284 : 
; 1285 :         if (_Newsize > max_size()) {

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
  0002f	39 45 08	 cmp	 DWORD PTR __Newsize$[ebp], eax
  00032	76 05		 jbe	 SHORT $LN2@Clear_and_

; 1286 :             _Xlength();

  00034	e8 00 00 00 00	 call	 ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
$LN2@Clear_and_:

; 1287 :         }
; 1288 : 
; 1289 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  00039	ff 75 08	 push	 DWORD PTR __Newsize$[ebp]
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@ABEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth
  00044	89 45 cc	 mov	 DWORD PTR __Newcapacity$[ebp], eax

; 1290 : 
; 1291 :         if (_Myfirst) { // destroy and deallocate old array

  00047	8b 45 f8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0004a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0004d	74 6d		 je	 SHORT $LN3@Clear_and_

; 1292 :             _Destroy(_Myfirst, _Mylast);

  0004f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00052	8b 00		 mov	 eax, DWORD PTR [eax]
  00054	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00057	8b 45 f8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00062	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00065	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00068	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0006b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0006e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00071	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00074	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAEQAEAAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
  00079	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0007f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00082	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00085	89 45 c8	 mov	 DWORD PTR $T1[ebp], eax

; 1293 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00088	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0008e	8b 00		 mov	 eax, DWORD PTR [eax]
  00090	2b 01		 sub	 eax, DWORD PTR [ecx]
  00092	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00095	8b 45 f8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00098	8b 00		 mov	 eax, DWORD PTR [eax]
  0009a	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009d	ff 75 d4	 push	 DWORD PTR __Count$[ebp]
  000a0	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  000a3	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a8	59		 pop	 ecx
  000a9	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1295 :             _Myfirst = pointer();

  000aa	8b 45 f8	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  000ad	83 20 00	 and	 DWORD PTR [eax], 0

; 1296 :             _Mylast  = pointer();

  000b0	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  000b3	83 20 00	 and	 DWORD PTR [eax], 0

; 1297 :             _Myend   = pointer();

  000b6	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000b9	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Clear_and_:

; 1298 :         }
; 1299 : 
; 1300 :         _Buy_raw(_Newcapacity);

  000bc	ff 75 cc	 push	 DWORD PTR __Newcapacity$[ebp]
  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Buy_raw
$LN4@Clear_and_:

; 1301 :     }

  000c7	c9		 leave
  000c8	c2 04 00	 ret	 4
?_Clear_and_reserve_geometric@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Clear_and_reserve_geometric
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Copy_assign@?$vector@EV?$allocator@E@std@@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 1
__First$ = -36						; size = 4
$T2 = -32						; size = 4
__Last$ = -28						; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
$T6 = -12						; size = 4
_this$ = -8						; size = 4
__Right_data$ = -4					; size = 4
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Copy_assign@?$vector@EV?$allocator@E@std@@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Copy_assign, COMDAT
; _this$ = ecx

; 1150 :     void _Copy_assign(const vector& _Right, false_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1737 :         return _Mypair._Get_first();

  00009	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0000c	89 45 f4	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  0000f	8b 45 f4	 mov	 eax, DWORD PTR $T6[ebp]
  00012	89 45 ec	 mov	 DWORD PTR $T4[ebp], eax

; 1733 :         return _Mypair._Get_first();

  00015	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00018	89 45 f0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0001b	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  0001e	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax

; 1151 :         _Pocca(_Getal(), _Right._Getal());

  00021	ff 75 ec	 push	 DWORD PTR $T4[ebp]
  00024	ff 75 e8	 push	 DWORD PTR $T3[ebp]
  00027	e8 00 00 00 00	 call	 ??$_Pocca@V?$allocator@E@std@@@std@@YAXAAV?$allocator@E@0@ABV10@@Z ; std::_Pocca<std::allocator<unsigned char> >
  0002c	59		 pop	 ecx
  0002d	59		 pop	 ecx

; 1152 :         auto& _Right_data = _Right._Mypair._Myval2;

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00031	89 45 fc	 mov	 DWORD PTR __Right_data$[ebp], eax

; 1153 :         assign(_Right_data._Myfirst, _Right_data._Mylast);

  00034	8b 45 fc	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00037	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003a	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00040	8b 00		 mov	 eax, DWORD PTR [eax]
  00042	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 1303 :         return _It + 0;

  00045	8b 45 e4	 mov	 eax, DWORD PTR __Last$[ebp]
  00048	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1142 :         _Assign_range(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});

  0004b	ff 75 d8	 push	 DWORD PTR $T1[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR $T2[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	e8 00 00 00 00	 call	 ??$_Assign_range@PAE@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0Uforward_iterator_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Assign_range<unsigned char *>

; 1154 :     }

  0005c	c9		 leave
  0005d	c2 08 00	 ret	 8
?_Copy_assign@?$vector@EV?$allocator@E@std@@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Copy_assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@E@std@@QAEXQAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@E@std@@QAEXQAEI@Z PROC		; std::allocator<unsigned char>::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00012	59		 pop	 ecx
  00013	59		 pop	 ecx

; 811  :     }

  00014	c9		 leave
  00015	c2 08 00	 ret	 8
?deallocate@?$allocator@E@std@@QAEXQAEI@Z ENDP		; std::allocator<unsigned char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
;	COMDAT ??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_k$ = 8							; size = 4
??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::operator[], COMDAT
; _this$ = ecx

; 1865 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1866 :       return table_.try_emplace_unique(k).first->second;

  00009	ff 75 08	 push	 DWORD PTR _k$[ebp]
  0000c	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
  0000f	50		 push	 eax
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	e8 00 00 00 00	 call	 ??$try_emplace_unique@ABK@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAE?AU?$pair@U?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@unordered@boost@@_N@std@@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::try_emplace_unique<unsigned long const &>
  00018	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	83 c0 0c	 add	 eax, 12			; 0000000cH

; 1867 :     }

  00023	c9		 leave
  00024	c2 04 00	 ret	 4
??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
;	COMDAT ?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z
_TEXT	SEGMENT
_x$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_k$ = 12						; size = 4
?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::find, COMDAT
; _this$ = ecx

; 1803 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1804 :       return iterator(table_.find_node(k));

  00008	ff 75 0c	 push	 DWORD PTR _k$[ebp]
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	e8 00 00 00 00	 call	 ?find_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@ABK@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node
  00013	89 45 f8	 mov	 DWORD PTR _x$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2371 :           : node_(static_cast<node_pointer>(x))

  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	8b 4d f8	 mov	 ecx, DWORD PTR _x$[ebp]
  0001c	89 08		 mov	 DWORD PTR [eax], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 1804 :       return iterator(table_.find_node(k));

  0001e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1805 :     }

  00021	c9		 leave
  00022	c2 08 00	 ret	 8
?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::find
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
;	COMDAT ??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ PROC ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >, COMDAT
; _this$ = ecx

; 1645 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3333 :         ~table() { delete_buckets(); }

  00026	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?delete_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::delete_buckets
  00032	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 1646 :     }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	c9		 leave
  00042	c3		 ret	 0
  00043	cc		 int	 3
  00044	cc		 int	 3
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ENDP ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
_TEXT	SEGMENT
_b$ = -40						; size = 8
$T2 = -32						; size = 4
_p$3 = -28						; size = 4
$T4 = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_n$ = 8							; size = 4
_key_hash$ = 12						; size = 4
?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::resize_and_add_node_unique, COMDAT
; _this$ = ecx

; 3715 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c0 03	 add	 eax, 3
  0002e	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  00031	74 09		 je	 SHORT $LN8@resize_and
  00033	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00036	40		 inc	 eax
  00037	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
  0003a	eb 04		 jmp	 SHORT $LN4@resize_and
$LN8@resize_and:
  0003c	83 65 e8 00	 and	 DWORD PTR $T4[ebp], 0
$LN4@resize_and:

; 1999 :         explicit node_tmp(node_pointer n, NodeAlloc& a) : alloc_(a), node_(n) {}

  00040	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00043	89 45 d8	 mov	 DWORD PTR _b$[ebp], eax
  00046	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00049	89 45 dc	 mov	 DWORD PTR _b$[ebp+4], eax

; 3716 :           node_tmp b(n, this->node_alloc());

  0004c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 3717 :           this->reserve_for_insert(this->size_ + 1);

  00050	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00056	40		 inc	 eax
  00057	50		 push	 eax
  00058	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ?reserve_for_insert@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::reserve_for_insert

; 2006 :           node_pointer p = node_;

  00060	8b 45 dc	 mov	 eax, DWORD PTR _b$[ebp+4]
  00063	89 45 e4	 mov	 DWORD PTR _p$3[ebp], eax

; 2007 :           node_ = node_pointer();

  00066	83 65 dc 00	 and	 DWORD PTR _b$[ebp+4], 0

; 3718 :           return this->add_node_unique(b.release(), key_hash);

  0006a	ff 75 0c	 push	 DWORD PTR _key_hash$[ebp]
  0006d	ff 75 e4	 push	 DWORD PTR _p$3[ebp]
  00070	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::add_node_unique
  00078	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  0007b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0007f	8d 4d d8	 lea	 ecx, DWORD PTR _b$[ebp]
  00082	e8 00 00 00 00	 call	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
  00087	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]

; 3719 :         }

  0008a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00094	59		 pop	 ecx
  00095	c9		 leave
  00096	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _b$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_tmp@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_tmp<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?resize_and_add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::resize_and_add_node_unique
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z
_TEXT	SEGMENT
$T1 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_bucket_index$ = -16					; size = 4
_b$ = -12						; size = 4
_start_node$4 = -8					; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_key_hash$ = 12						; size = 4
?add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::add_node_unique, COMDAT
; _this$ = ecx

; 3686 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2604 :           return hash % bucket_count;

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _key_hash$[ebp]
  0000f	33 d2		 xor	 edx, edx
  00011	f7 71 04	 div	 DWORD PTR [ecx+4]

; 3687 :           std::size_t bucket_index = this->hash_to_bucket(key_hash);

  00014	89 55 f0	 mov	 DWORD PTR _bucket_index$[ebp], edx

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001d	8b 4d f0	 mov	 ecx, DWORD PTR _bucket_index$[ebp]
  00020	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 3688 :           bucket_pointer b = this->get_bucket_pointer(bucket_index);

  00023	89 45 f4	 mov	 DWORD PTR _b$[ebp], eax

; 3689 : 
; 3690 :           n->bucket_info_ = bucket_index;

  00026	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _bucket_index$[ebp]
  0002c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  0002f	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  0003d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 3691 :           n->set_first_in_group();
; 3692 : 
; 3693 :           if (!b->next_) {

  00040	8b 45 f4	 mov	 eax, DWORD PTR _b$[ebp]
  00043	83 38 00	 cmp	 DWORD PTR [eax], 0
  00046	75 61		 jne	 SHORT $LN2@add_node_u

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00054	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00057	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax

; 3694 :             link_pointer start_node = this->get_previous_start();

  0005a	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  0005d	89 45 f8	 mov	 DWORD PTR _start_node$4[ebp], eax

; 3695 : 
; 3696 :             if (start_node->next_) {

  00060	8b 45 f8	 mov	 eax, DWORD PTR _start_node$4[ebp]
  00063	83 38 00	 cmp	 DWORD PTR [eax], 0
  00066	74 25		 je	 SHORT $LN4@add_node_u

; 2964 :           return static_cast<node_pointer>(n->next_);

  00068	8b 45 f8	 mov	 eax, DWORD PTR _start_node$4[ebp]
  0006b	8b 00		 mov	 eax, DWORD PTR [eax]
  0006d	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax

; 4873 :           return bucket_info_ & ((std::size_t)-1 >> 1);

  00070	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00073	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00076	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH

; 2999 :           return n->get_bucket();

  0007b	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax

; 3697 :               this->get_bucket_pointer(node_bucket(next_node(start_node)))

  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00084	8b 4d e4	 mov	 ecx, DWORD PTR $T1[ebp]
  00087	8b 55 08	 mov	 edx, DWORD PTR _n$[ebp]
  0008a	89 14 88	 mov	 DWORD PTR [eax+ecx*4], edx
$LN4@add_node_u:

; 3698 :                 ->next_ = n;
; 3699 :             }
; 3700 : 
; 3701 :             b->next_ = start_node;

  0008d	8b 45 f4	 mov	 eax, DWORD PTR _b$[ebp]
  00090	8b 4d f8	 mov	 ecx, DWORD PTR _start_node$4[ebp]
  00093	89 08		 mov	 DWORD PTR [eax], ecx

; 3702 :             n->next_ = start_node->next_;

  00095	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _start_node$4[ebp]
  0009b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0009d	89 08		 mov	 DWORD PTR [eax], ecx

; 3703 :             start_node->next_ = n;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _start_node$4[ebp]
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  000a5	89 08		 mov	 DWORD PTR [eax], ecx

; 3704 :           } else {

  000a7	eb 16		 jmp	 SHORT $LN3@add_node_u
$LN2@add_node_u:

; 3705 :             n->next_ = b->next_->next_;

  000a9	8b 45 f4	 mov	 eax, DWORD PTR _b$[ebp]
  000ac	8b 00		 mov	 eax, DWORD PTR [eax]
  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  000b1	8b 00		 mov	 eax, DWORD PTR [eax]
  000b3	89 01		 mov	 DWORD PTR [ecx], eax

; 3706 :             b->next_->next_ = n;

  000b5	8b 45 f4	 mov	 eax, DWORD PTR _b$[ebp]
  000b8	8b 00		 mov	 eax, DWORD PTR [eax]
  000ba	8b 4d 08	 mov	 ecx, DWORD PTR _n$[ebp]
  000bd	89 08		 mov	 DWORD PTR [eax], ecx
$LN3@add_node_u:

; 3707 :           }
; 3708 : 
; 3709 :           ++this->size_;

  000bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c5	40		 inc	 eax
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 3710 :           return n;

  000cc	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]

; 3711 :         }

  000cf	c9		 leave
  000d0	c2 08 00	 ret	 8
?add_node_unique@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAU5234@I@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::add_node_unique
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
$T2 = -76						; size = 4
_next$3 = -72						; size = 4
_next$4 = -68						; size = 4
_key_hash$5 = -64					; size = 4
tv129 = -60						; size = 4
_v$6 = -56						; size = 4
$T7 = -52						; size = 4
tv221 = -48						; size = 4
_bucket_index$8 = -44					; size = 4
_next$9 = -40						; size = 4
_n$10 = -36						; size = 4
_b$11 = -32						; size = 4
_prev$ = -28						; size = 4
_this$ = -24						; size = 4
_n$12 = -20						; size = 4
__$EHRec$ = -16						; size = 16
_num_buckets$ = 8					; size = 4
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl, COMDAT
; _this$ = ecx

; 4577 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002c	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 4578 :         BOOST_ASSERT(this->buckets_);
; 4579 : 
; 4580 :         this->create_buckets(num_buckets);

  0002f	ff 75 08	 push	 DWORD PTR _num_buckets$[ebp]
  00032	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0003a	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00040	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00046	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00049	89 45 cc	 mov	 DWORD PTR $T7[ebp], eax

; 4581 :         link_pointer prev = this->get_previous_start();

  0004c	8b 45 cc	 mov	 eax, DWORD PTR $T7[ebp]
  0004f	89 45 e4	 mov	 DWORD PTR _prev$[ebp], eax

; 4582 :         BOOST_TRY

  00052	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
$LN2@rehash_imp:

; 4583 :         {
; 4584 :           while (prev->next_) {

  00056	8b 45 e4	 mov	 eax, DWORD PTR _prev$[ebp]
  00059	83 38 00	 cmp	 DWORD PTR [eax], 0
  0005c	0f 84 04 01 00
	00		 je	 $LN3@rehash_imp

; 2964 :           return static_cast<node_pointer>(n->next_);

  00062	8b 45 e4	 mov	 eax, DWORD PTR _prev$[ebp]
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	89 45 ec	 mov	 DWORD PTR _n$12[ebp], eax

; 2791 :           return *static_cast<function_pair const*>(

  0006a	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00070	83 e0 01	 and	 eax, 1
  00073	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8d 44 01 01	 lea	 eax, DWORD PTR [ecx+eax+1]
  0007a	89 45 b4	 mov	 DWORD PTR $T2[ebp], eax

; 2599 :           return hf(x);

  0007d	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  00080	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00083	89 45 c8	 mov	 DWORD PTR _v$6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00086	ff 75 c8	 push	 DWORD PTR _v$6[ebp]
  00089	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  0008e	59		 pop	 ecx
  0008f	89 45 c4	 mov	 DWORD PTR tv129[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 4586 :             std::size_t key_hash = this->hash(this->get_key(n));

  00092	8b 45 c4	 mov	 eax, DWORD PTR tv129[ebp]
  00095	89 45 c0	 mov	 DWORD PTR _key_hash$5[ebp], eax

; 2604 :           return hash % bucket_count;

  00098	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	8b 45 c0	 mov	 eax, DWORD PTR _key_hash$5[ebp]
  0009e	33 d2		 xor	 edx, edx
  000a0	f7 71 04	 div	 DWORD PTR [ecx+4]

; 4587 :             std::size_t bucket_index = this->hash_to_bucket(key_hash);

  000a3	89 55 d4	 mov	 DWORD PTR _bucket_index$8[ebp], edx

; 4588 : 
; 4589 :             n->bucket_info_ = bucket_index;

  000a6	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  000a9	8b 4d d4	 mov	 ecx, DWORD PTR _bucket_index$8[ebp]
  000ac	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4883 :           bucket_info_ = bucket_info_ & ((std::size_t)-1 >> 1);

  000af	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  000b2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b5	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  000ba	8b 4d ec	 mov	 ecx, DWORD PTR _n$12[ebp]
  000bd	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN6@rehash_imp:

; 2964 :           return static_cast<node_pointer>(n->next_);

  000c0	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  000c3	8b 00		 mov	 eax, DWORD PTR [eax]
  000c5	89 45 d8	 mov	 DWORD PTR _next$9[ebp], eax

; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);
; 4596 :               if (!next || next->is_first_in_group()) {

  000c8	83 7d d8 00	 cmp	 DWORD PTR _next$9[ebp], 0
  000cc	74 20		 je	 SHORT $LN11@rehash_imp

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  000ce	8b 45 d8	 mov	 eax, DWORD PTR _next$9[ebp]
  000d1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d4	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  000d9	75 09		 jne	 SHORT $LN61@rehash_imp
  000db	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv221[ebp], 1
  000e2	eb 04		 jmp	 SHORT $LN59@rehash_imp
$LN61@rehash_imp:
  000e4	83 65 d0 00	 and	 DWORD PTR tv221[ebp], 0
$LN59@rehash_imp:

; 4590 :             n->set_first_in_group();
; 4591 : 
; 4592 :             // Iterator through the rest of the group of equal nodes,
; 4593 :             // setting the bucket.
; 4594 :             for (;;) {
; 4595 :               node_pointer next = next_node(n);
; 4596 :               if (!next || next->is_first_in_group()) {

  000e8	83 7d d0 00	 cmp	 DWORD PTR tv221[ebp], 0
  000ec	74 02		 je	 SHORT $LN10@rehash_imp
$LN11@rehash_imp:

; 4597 :                 break;

  000ee	eb 22		 jmp	 SHORT $LN65@rehash_imp
$LN10@rehash_imp:

; 4598 :               }
; 4599 :               n = next;

  000f0	8b 45 d8	 mov	 eax, DWORD PTR _next$9[ebp]
  000f3	89 45 ec	 mov	 DWORD PTR _n$12[ebp], eax

; 4600 :               n->bucket_info_ = bucket_index;

  000f6	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  000f9	8b 4d d4	 mov	 ecx, DWORD PTR _bucket_index$8[ebp]
  000fc	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 4888 :           bucket_info_ = bucket_info_ | ~((std::size_t)-1 >> 1);

  000ff	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  00102	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00105	0d 00 00 00 80	 or	 eax, -2147483648	; 80000000H
  0010a	8b 4d ec	 mov	 ecx, DWORD PTR _n$12[ebp]
  0010d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 4601 :               n->reset_first_in_group();
; 4602 :             }

  00110	eb ae		 jmp	 SHORT $LN6@rehash_imp
$LN65@rehash_imp:

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00112	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00115	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00118	8b 4d d4	 mov	 ecx, DWORD PTR _bucket_index$8[ebp]
  0011b	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 4603 : 
; 4604 :             // n is now the last node in the group
; 4605 :             bucket_pointer b = this->get_bucket_pointer(bucket_index);

  0011e	89 45 e0	 mov	 DWORD PTR _b$11[ebp], eax

; 4606 :             if (!b->next_) {

  00121	8b 45 e0	 mov	 eax, DWORD PTR _b$11[ebp]
  00124	83 38 00	 cmp	 DWORD PTR [eax], 0
  00127	75 10		 jne	 SHORT $LN12@rehash_imp

; 4607 :               b->next_ = prev;

  00129	8b 45 e0	 mov	 eax, DWORD PTR _b$11[ebp]
  0012c	8b 4d e4	 mov	 ecx, DWORD PTR _prev$[ebp]
  0012f	89 08		 mov	 DWORD PTR [eax], ecx

; 4608 :               prev = n;

  00131	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  00134	89 45 e4	 mov	 DWORD PTR _prev$[ebp], eax

; 4609 :             } else {

  00137	eb 28		 jmp	 SHORT $LN13@rehash_imp
$LN12@rehash_imp:

; 4610 :               link_pointer next = n->next_;

  00139	8b 45 ec	 mov	 eax, DWORD PTR _n$12[ebp]
  0013c	8b 00		 mov	 eax, DWORD PTR [eax]
  0013e	89 45 bc	 mov	 DWORD PTR _next$4[ebp], eax

; 4611 :               n->next_ = b->next_->next_;

  00141	8b 45 e0	 mov	 eax, DWORD PTR _b$11[ebp]
  00144	8b 00		 mov	 eax, DWORD PTR [eax]
  00146	8b 4d ec	 mov	 ecx, DWORD PTR _n$12[ebp]
  00149	8b 00		 mov	 eax, DWORD PTR [eax]
  0014b	89 01		 mov	 DWORD PTR [ecx], eax

; 4612 :               b->next_->next_ = prev->next_;

  0014d	8b 45 e0	 mov	 eax, DWORD PTR _b$11[ebp]
  00150	8b 00		 mov	 eax, DWORD PTR [eax]
  00152	8b 4d e4	 mov	 ecx, DWORD PTR _prev$[ebp]
  00155	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00157	89 08		 mov	 DWORD PTR [eax], ecx

; 4613 :               prev->next_ = next;

  00159	8b 45 e4	 mov	 eax, DWORD PTR _prev$[ebp]
  0015c	8b 4d bc	 mov	 ecx, DWORD PTR _next$4[ebp]
  0015f	89 08		 mov	 DWORD PTR [eax], ecx
$LN13@rehash_imp:

; 4614 :             }
; 4615 :           }

  00161	e9 f0 fe ff ff	 jmp	 $LN2@rehash_imp
$LN3@rehash_imp:

; 4616 :         }

  00166	eb 53		 jmp	 SHORT $LN15@rehash_imp
__catch$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$0:

; 4617 :         BOOST_CATCH(...)
; 4618 :         {
; 4619 :           node_pointer n = next_node(prev);

  00168	ff 75 e4	 push	 DWORD PTR _prev$[ebp]
  0016b	e8 00 00 00 00	 call	 ?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_node
  00170	59		 pop	 ecx
  00171	89 45 dc	 mov	 DWORD PTR _n$10[ebp], eax

; 4620 :           prev->next_ = node_pointer();

  00174	8b 45 e4	 mov	 eax, DWORD PTR _prev$[ebp]
  00177	83 20 00	 and	 DWORD PTR [eax], 0
$LN7@rehash_imp:

; 4621 :           while (n) {

  0017a	83 7d dc 00	 cmp	 DWORD PTR _n$10[ebp], 0
  0017e	74 2c		 je	 SHORT $LN8@rehash_imp

; 4622 :             node_pointer next = next_node(n);

  00180	ff 75 dc	 push	 DWORD PTR _n$10[ebp]
  00183	e8 00 00 00 00	 call	 ?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_node
  00188	59		 pop	 ecx
  00189	89 45 b8	 mov	 DWORD PTR _next$3[ebp], eax

; 4623 :             destroy_node(n);

  0018c	ff 75 dc	 push	 DWORD PTR _n$10[ebp]
  0018f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00192	e8 00 00 00 00	 call	 ?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node

; 4624 :             --size_;

  00197	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0019a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0019d	48		 dec	 eax
  0019e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a1	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 4625 :             n = next;

  001a4	8b 45 b8	 mov	 eax, DWORD PTR _next$3[ebp]
  001a7	89 45 dc	 mov	 DWORD PTR _n$10[ebp], eax

; 4626 :           }

  001aa	eb ce		 jmp	 SHORT $LN7@rehash_imp
$LN8@rehash_imp:

; 4627 :           BOOST_RETHROW

  001ac	6a 00		 push	 0
  001ae	6a 00		 push	 0
  001b0	e8 00 00 00 00	 call	 __CxxThrowException@8

; 4628 :         }

  001b5	b8 00 00 00 00	 mov	 eax, $LN18@rehash_imp
  001ba	c3		 ret	 0
$LN15@rehash_imp:
  001bb	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  001bf	eb 04		 jmp	 SHORT $LN14@rehash_imp
$LN18@rehash_imp:
  001c1	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
$LN14@rehash_imp:

; 4629 :         BOOST_CATCH_END
; 4630 :       }

  001c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001cf	59		 pop	 ecx
  001d0	5f		 pop	 edi
  001d1	5e		 pop	 esi
  001d2	5b		 pop	 ebx
  001d3	c9		 leave
  001d4	c2 04 00	 ret	 4
  001d7	cc		 int	 3
  001d8	cc		 int	 3
  001d9	cc		 int	 3
  001da	cc		 int	 3
  001db	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?reserve_for_insert@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
$T4 = -32						; size = 4
_num_buckets$5 = -28					; size = 4
tv73 = -24						; size = 4
$T6 = -20						; size = 4
tv137 = -16						; size = 4
__Left$ = -12						; size = 4
$T7 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?reserve_for_insert@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::reserve_for_insert, COMDAT
; _this$ = ecx

; 4541 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4542 :         if (!buckets_) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00010	75 4a		 jne	 SHORT $LN2@reserve_fo

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  00012	ff 75 08	 push	 DWORD PTR _size$[ebp]
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
  0001d	89 45 f8	 mov	 DWORD PTR $T7[ebp], eax
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	83 c0 04	 add	 eax, 4
  00026	89 45 f4	 mov	 DWORD PTR __Left$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00029	8b 45 f4	 mov	 eax, DWORD PTR __Left$[ebp]
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	3b 45 f8	 cmp	 eax, DWORD PTR $T7[ebp]
  00031	73 08		 jae	 SHORT $LN55@reserve_fo
  00033	8d 45 f8	 lea	 eax, DWORD PTR $T7[ebp]
  00036	89 45 f0	 mov	 DWORD PTR tv137[ebp], eax
  00039	eb 06		 jmp	 SHORT $LN56@reserve_fo
$LN55@reserve_fo:
  0003b	8b 45 f4	 mov	 eax, DWORD PTR __Left$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR tv137[ebp], eax
$LN56@reserve_fo:
  00041	8b 45 f0	 mov	 eax, DWORD PTR tv137[ebp]
  00044	89 45 e0	 mov	 DWORD PTR $T4[ebp], eax
  00047	8b 45 e0	 mov	 eax, DWORD PTR $T4[ebp]
  0004a	89 45 dc	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 4543 :           create_buckets((std::max)(bucket_count_, min_buckets_for_size(size)));

  0004d	8b 45 dc	 mov	 eax, DWORD PTR $T3[ebp]
  00050	ff 30		 push	 DWORD PTR [eax]
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
  0005a	eb 64		 jmp	 SHORT $LN1@reserve_fo
$LN2@reserve_fo:

; 4544 :         } else if (size > max_load_) {

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  00062	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  00065	76 59		 jbe	 SHORT $LN1@reserve_fo

; 4545 :           std::size_t num_buckets =

  00067	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0006d	d1 e8		 shr	 eax, 1
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  00075	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00078	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  0007b	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  0007e	73 08		 jae	 SHORT $LN60@reserve_fo
  00080	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00083	89 45 e8	 mov	 DWORD PTR tv73[ebp], eax
  00086	eb 06		 jmp	 SHORT $LN61@reserve_fo
$LN60@reserve_fo:
  00088	8d 45 08	 lea	 eax, DWORD PTR _size$[ebp]
  0008b	89 45 e8	 mov	 DWORD PTR tv73[ebp], eax
$LN61@reserve_fo:
  0008e	8b 45 e8	 mov	 eax, DWORD PTR tv73[ebp]
  00091	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
  00094	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00097	89 45 d4	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 4545 :           std::size_t num_buckets =

  0009a	8b 45 d4	 mov	 eax, DWORD PTR $T1[ebp]
  0009d	ff 30		 push	 DWORD PTR [eax]
  0009f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a2	e8 00 00 00 00	 call	 ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
  000a7	89 45 e4	 mov	 DWORD PTR _num_buckets$5[ebp], eax

; 4546 :             min_buckets_for_size((std::max)(size, size_ + (size_ >> 1)));
; 4547 : 
; 4548 :           if (num_buckets != bucket_count_)

  000aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ad	8b 4d e4	 mov	 ecx, DWORD PTR _num_buckets$5[ebp]
  000b0	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000b3	74 0b		 je	 SHORT $LN1@reserve_fo

; 4549 :             this->rehash_impl(num_buckets);

  000b5	ff 75 e4	 push	 DWORD PTR _num_buckets$5[ebp]
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?rehash_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::rehash_impl
$LN1@reserve_fo:

; 4550 :         }
; 4551 :       }

  000c0	c9		 leave
  000c1	c2 04 00	 ret	 4
?reserve_for_insert@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::reserve_for_insert
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?find_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@ABK@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_v$3 = -8						; size = 4
_this$ = -4						; size = 4
_k$ = 8							; size = 4
?find_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@ABK@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node, COMDAT
; _this$ = ecx

; 3580 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2791 :           return *static_cast<function_pair const*>(

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0000f	83 e0 01	 and	 eax, 1
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8d 44 01 01	 lea	 eax, DWORD PTR [ecx+eax+1]
  00019	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax

; 2599 :           return hf(x);

  0001c	8b 45 08	 mov	 eax, DWORD PTR _k$[ebp]
  0001f	8b 00		 mov	 eax, DWORD PTR [eax]
  00021	89 45 f8	 mov	 DWORD PTR _v$3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp

; 621  :     BOOST_HASH_SPECIALIZE(unsigned long)

  00024	ff 75 f8	 push	 DWORD PTR _v$3[ebp]
  00027	e8 00 00 00 00	 call	 ??$hash_value@K@boost@@YAIK@Z ; boost::hash_value<unsigned long>
  0002c	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3569 :           return policy::apply_hash(this->hash_function(), k);

  0002d	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax

; 3581 :           return this->find_node_impl(hash(k), k, this->key_eq());

  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	e8 00 00 00 00	 call	 ?key_eq@?$functions@U?$hash@K@boost@@U?$equal_to@K@std@@@detail@unordered@boost@@QBEABU?$equal_to@K@std@@XZ ; boost::unordered::detail::functions<boost::hash<unsigned long>,std::equal_to<unsigned long> >::key_eq
  00038	50		 push	 eax
  00039	ff 75 08	 push	 DWORD PTR _k$[ebp]
  0003c	ff 75 f4	 push	 DWORD PTR $T2[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ??$find_node_impl@KU?$equal_to@K@std@@@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@123@IABKABU?$equal_to@K@std@@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node_impl<unsigned long,std::equal_to<unsigned long> >

; 3582 :         }

  00047	c9		 leave
  00048	c2 04 00	 ret	 4
?find_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@ABK@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::find_node
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?clear_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
_next$1 = -24						; size = 4
_prev$2 = -20						; size = 4
_end$3 = -16						; size = 4
_n$4 = -12						; size = 4
_it$5 = -8						; size = 4
_this$ = -4						; size = 4
?clear_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::clear_impl, COMDAT
; _this$ = ecx

; 4515 :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4516 :         if (size_) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	74 72		 je	 SHORT $LN1@clear_impl

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0001e	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 4517 :           bucket_pointer end = get_bucket_pointer(bucket_count_);

  00021	89 45 f0	 mov	 DWORD PTR _end$3[ebp], eax

; 4518 :           for (bucket_pointer it = buckets_; it != end; ++it) {

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0002a	89 45 f8	 mov	 DWORD PTR _it$5[ebp], eax
  0002d	eb 09		 jmp	 SHORT $LN4@clear_impl
$LN2@clear_impl:
  0002f	8b 45 f8	 mov	 eax, DWORD PTR _it$5[ebp]
  00032	83 c0 04	 add	 eax, 4
  00035	89 45 f8	 mov	 DWORD PTR _it$5[ebp], eax
$LN4@clear_impl:
  00038	8b 45 f8	 mov	 eax, DWORD PTR _it$5[ebp]
  0003b	3b 45 f0	 cmp	 eax, DWORD PTR _end$3[ebp]
  0003e	74 08		 je	 SHORT $LN11@clear_impl

; 4519 :             it->next_ = node_pointer();

  00040	8b 45 f8	 mov	 eax, DWORD PTR _it$5[ebp]
  00043	83 20 00	 and	 DWORD PTR [eax], 0

; 4520 :           }

  00046	eb e7		 jmp	 SHORT $LN2@clear_impl
$LN11@clear_impl:

; 4521 : 
; 4522 :           link_pointer prev = end->first_from_start();

  00048	8b 45 f0	 mov	 eax, DWORD PTR _end$3[ebp]
  0004b	89 45 ec	 mov	 DWORD PTR _prev$2[ebp], eax

; 2964 :           return static_cast<node_pointer>(n->next_);

  0004e	8b 45 ec	 mov	 eax, DWORD PTR _prev$2[ebp]
  00051	8b 00		 mov	 eax, DWORD PTR [eax]
  00053	89 45 f4	 mov	 DWORD PTR _n$4[ebp], eax

; 4523 :           node_pointer n = next_node(prev);
; 4524 :           prev->next_ = node_pointer();

  00056	8b 45 ec	 mov	 eax, DWORD PTR _prev$2[ebp]
  00059	83 20 00	 and	 DWORD PTR [eax], 0

; 4525 :           size_ = 0;

  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	83 60 08 00	 and	 DWORD PTR [eax+8], 0
$LN5@clear_impl:

; 4526 : 
; 4527 :           while (n) {

  00063	83 7d f4 00	 cmp	 DWORD PTR _n$4[ebp], 0
  00067	74 1b		 je	 SHORT $LN1@clear_impl

; 2964 :           return static_cast<node_pointer>(n->next_);

  00069	8b 45 f4	 mov	 eax, DWORD PTR _n$4[ebp]
  0006c	8b 00		 mov	 eax, DWORD PTR [eax]
  0006e	89 45 e8	 mov	 DWORD PTR _next$1[ebp], eax

; 4528 :             node_pointer next = next_node(n);
; 4529 :             destroy_node(n);

  00071	ff 75 f4	 push	 DWORD PTR _n$4[ebp]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	e8 00 00 00 00	 call	 ?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node

; 4530 :             n = next;

  0007c	8b 45 e8	 mov	 eax, DWORD PTR _next$1[ebp]
  0007f	89 45 f4	 mov	 DWORD PTR _n$4[ebp], eax

; 4531 :           }

  00082	eb df		 jmp	 SHORT $LN5@clear_impl
$LN1@clear_impl:

; 4532 :         }
; 4533 :       }

  00084	c9		 leave
  00085	c3		 ret	 0
?clear_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::clear_impl
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
__Ptr$ = -20						; size = 4
__Count$ = -16						; size = 4
_end$ = -12						; size = 4
_it$2 = -8						; size = 4
_this$ = -4						; size = 4
?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_buckets, COMDAT
; _this$ = ecx

; 3370 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00012	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00015	8d 44 81 04	 lea	 eax, DWORD PTR [ecx+eax*4+4]

; 3371 :           bucket_pointer end = get_bucket_pointer(bucket_count_ + 1);

  00019	89 45 f4	 mov	 DWORD PTR _end$[ebp], eax

; 3372 :           for (bucket_pointer it = buckets_; it != end; ++it) {

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00022	89 45 f8	 mov	 DWORD PTR _it$2[ebp], eax
  00025	eb 09		 jmp	 SHORT $LN4@destroy_bu
$LN2@destroy_bu:
  00027	8b 45 f8	 mov	 eax, DWORD PTR _it$2[ebp]
  0002a	83 c0 04	 add	 eax, 4
  0002d	89 45 f8	 mov	 DWORD PTR _it$2[ebp], eax
$LN4@destroy_bu:
  00030	8b 45 f8	 mov	 eax, DWORD PTR _it$2[ebp]
  00033	3b 45 f4	 cmp	 eax, DWORD PTR _end$[ebp]
  00036	74 08		 je	 SHORT $LN13@destroy_bu
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  00038	8b 45 f8	 mov	 eax, DWORD PTR _it$2[ebp]
  0003b	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3374 :           }

  0003e	eb e7		 jmp	 SHORT $LN2@destroy_bu
$LN13@destroy_bu:

; 3375 : 
; 3376 :           bucket_allocator_traits::deallocate(

  00040	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00046	40		 inc	 eax
  00047	89 45 f0	 mov	 DWORD PTR __Count$[ebp], eax
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00050	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00053	8b 45 f0	 mov	 eax, DWORD PTR __Count$[ebp]
  00056	c1 e0 02	 shl	 eax, 2
  00059	50		 push	 eax
  0005a	ff 75 ec	 push	 DWORD PTR __Ptr$[ebp]
  0005d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00062	59		 pop	 ecx
  00063	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3378 :         }

  00064	c9		 leave
  00065	c3		 ret	 0
?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_buckets
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?delete_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
$T1 = -28						; size = 4
_next$2 = -24						; size = 4
_next$3 = -20						; size = 4
$T4 = -16						; size = 4
_this$ = -12						; size = 4
_n$5 = -8						; size = 4
_this$ = -4						; size = 4
?delete_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::delete_buckets, COMDAT
; _this$ = ecx

; 3344 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3345 :           if (buckets_) {

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00010	0f 84 91 00 00
	00		 je	 $LN1@delete_buc

; 3346 :             node_pointer n = static_cast<node_pointer>(

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00022	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00025	89 45 f8	 mov	 DWORD PTR _n$5[ebp], eax

; 3347 :               get_bucket_pointer(bucket_count_)->next_);
; 3348 : 
; 3349 :             if (bucket::extra_node) {

  00028	33 c0		 xor	 eax, eax
  0002a	74 3d		 je	 SHORT $LN2@delete_buc

; 2964 :           return static_cast<node_pointer>(n->next_);

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _n$5[ebp]
  0002f	8b 00		 mov	 eax, DWORD PTR [eax]
  00031	89 45 ec	 mov	 DWORD PTR _next$3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _n$5[ebp]
  00037	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	83 c0 03	 add	 eax, 3
  00040	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  00043	74 09		 je	 SHORT $LN20@delete_buc
  00045	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00048	40		 inc	 eax
  00049	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  0004c	eb 04		 jmp	 SHORT $LN16@delete_buc
$LN20@delete_buc:
  0004e	83 65 f0 00	 and	 DWORD PTR $T4[ebp], 0
$LN16@delete_buc:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00052	33 c0		 xor	 eax, eax
  00054	40		 inc	 eax
  00055	6b c0 2c	 imul	 eax, eax, 44
  00058	50		 push	 eax
  00059	ff 75 f8	 push	 DWORD PTR _n$5[ebp]
  0005c	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00061	59		 pop	 ecx
  00062	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3353 :               n = next;

  00063	8b 45 ec	 mov	 eax, DWORD PTR _next$3[ebp]
  00066	89 45 f8	 mov	 DWORD PTR _n$5[ebp], eax
$LN2@delete_buc:

; 3354 :             }
; 3355 : 
; 3356 :             while (n) {

  00069	83 7d f8 00	 cmp	 DWORD PTR _n$5[ebp], 0
  0006d	74 1b		 je	 SHORT $LN3@delete_buc

; 2964 :           return static_cast<node_pointer>(n->next_);

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _n$5[ebp]
  00072	8b 00		 mov	 eax, DWORD PTR [eax]
  00074	89 45 e8	 mov	 DWORD PTR _next$2[ebp], eax

; 3357 :               node_pointer next = next_node(n);
; 3358 :               destroy_node(n);

  00077	ff 75 f8	 push	 DWORD PTR _n$5[ebp]
  0007a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node

; 3359 :               n = next;

  00082	8b 45 e8	 mov	 eax, DWORD PTR _next$2[ebp]
  00085	89 45 f8	 mov	 DWORD PTR _n$5[ebp], eax

; 3360 :             }

  00088	eb df		 jmp	 SHORT $LN2@delete_buc
$LN3@delete_buc:

; 3361 : 
; 3362 :             destroy_buckets();

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	e8 00 00 00 00	 call	 ?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_buckets

; 3363 :             buckets_ = bucket_pointer();

  00092	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00095	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 3364 :             max_load_ = 0;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009c	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 3365 :             size_ = 0;

  000a0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	83 60 08 00	 and	 DWORD PTR [eax+8], 0
$LN1@delete_buc:

; 3366 :           }
; 3367 :         }

  000a7	c9		 leave
  000a8	c3		 ret	 0
?delete_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::delete_buckets
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
_this$ = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node, COMDAT
; _this$ = ecx

; 3336 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 03	 add	 eax, 3
  0000f	89 45 fc	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  00012	74 09		 je	 SHORT $LN11@destroy_no
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	40		 inc	 eax
  00018	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  0001b	eb 04		 jmp	 SHORT $LN15@destroy_no
$LN11@destroy_no:
  0001d	83 65 f0 00	 and	 DWORD PTR $T3[ebp], 0
$LN15@destroy_no:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  00021	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00024	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c0 03	 add	 eax, 3
  0002d	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  00030	74 09		 je	 SHORT $LN26@destroy_no
  00032	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00035	40		 inc	 eax
  00036	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  00039	eb 04		 jmp	 SHORT $LN22@destroy_no
$LN26@destroy_no:
  0003b	83 65 ec 00	 and	 DWORD PTR $T2[ebp], 0
$LN22@destroy_no:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 696  :         _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  0003f	33 c0		 xor	 eax, eax
  00041	40		 inc	 eax
  00042	6b c0 2c	 imul	 eax, eax, 44
  00045	50		 push	 eax
  00046	ff 75 08	 push	 DWORD PTR _n$[ebp]
  00049	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0004e	59		 pop	 ecx
  0004f	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3341 :         }

  00050	c9		 leave
  00051	c2 04 00	 ret	 4
?destroy_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_node
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
_TEXT	SEGMENT
_a$2 = -116						; size = 8
__Max_possible$3 = -108					; size = 4
__Max_possible$4 = -104					; size = 4
__Max_possible$5 = -100					; size = 4
$T6 = -96						; size = 4
$T7 = -92						; size = 4
$T8 = -88						; size = 4
$T9 = -84						; size = 4
$T10 = -80						; size = 4
$T11 = -76						; size = 4
_p$12 = -72						; size = 4
$T13 = -68						; size = 4
$T14 = -64						; size = 4
_new_buckets$15 = -60					; size = 4
$T16 = -56						; size = 4
_end$ = -52						; size = 4
__Count$ = -48						; size = 4
__Count$ = -44						; size = 4
$T17 = -40						; size = 4
_this$ = -36						; size = 4
__Count$ = -32						; size = 4
_dummy_node$ = -28					; size = 4
_i$18 = -24						; size = 4
_this$ = -20						; size = 4
__Overflow_is_possible$19 = -15				; size = 1
__Overflow_is_possible$20 = -14				; size = 1
__Overflow_is_possible$21 = -13				; size = 1
__$EHRec$ = -12						; size = 12
_new_count$ = 8						; size = 4
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets, COMDAT
; _this$ = ecx

; 3178 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3179 :           link_pointer dummy_node;
; 3180 : 
; 3181 :           // Construct the new buckets and dummy node, and destroy the old
; 3182 :           // buckets
; 3183 :           if (buckets_) {

  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  0002f	74 5d		 je	 SHORT $LN5@create_buc

; 3184 :             dummy_node =

  00031	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0003d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00040	89 45 e4	 mov	 DWORD PTR _dummy_node$[ebp], eax

; 3185 :               (buckets_ + static_cast<std::ptrdiff_t>(bucket_count_))->next_;
; 3186 :             bucket_pointer new_buckets =

  00043	8b 45 08	 mov	 eax, DWORD PTR _new_count$[ebp]
  00046	40		 inc	 eax
  00047	89 45 e0	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0004a	c6 45 f3 01	 mov	 BYTE PTR __Overflow_is_possible$21[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0004e	c7 45 9c ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$5[ebp], 1073741823 ; 3fffffffH

; 60   :         if (_Count > _Max_possible) {

  00055	81 7d e0 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0005c	76 05		 jbe	 SHORT $LN20@create_buc

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0005e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN20@create_buc:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00063	8b 45 e0	 mov	 eax, DWORD PTR __Count$[ebp]
  00066	c1 e0 02	 shl	 eax, 2
  00069	89 45 c8	 mov	 DWORD PTR $T16[ebp], eax

; 686  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0006c	ff 75 c8	 push	 DWORD PTR $T16[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00074	59		 pop	 ecx
  00075	89 45 c4	 mov	 DWORD PTR _new_buckets$15[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3188 :             destroy_buckets();

  00078	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?destroy_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::destroy_buckets

; 3189 :             buckets_ = new_buckets;

  00080	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4d c4	 mov	 ecx, DWORD PTR _new_buckets$15[ebp]
  00086	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00089	e9 d4 00 00 00	 jmp	 $LN6@create_buc
$LN5@create_buc:

; 3190 :           } else if (bucket::extra_node) {

  0008e	33 c0		 xor	 eax, eax
  00090	0f 84 8a 00 00
	00		 je	 $LN7@create_buc

; 3014 :         node_allocator& node_alloc() { return allocators_.second(); }

  00096	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00099	83 c0 03	 add	 eax, 3
  0009c	89 45 dc	 mov	 DWORD PTR _this$[ebp], eax

; 430  :         second_type& second() { return static_cast<base2*>(this)->get(); }

  0009f	74 09		 je	 SHORT $LN48@create_buc
  000a1	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	40		 inc	 eax
  000a5	89 45 d8	 mov	 DWORD PTR $T17[ebp], eax
  000a8	eb 04		 jmp	 SHORT $LN44@create_buc
$LN48@create_buc:
  000aa	83 65 d8 00	 and	 DWORD PTR $T17[ebp], 0
$LN44@create_buc:

; 1946 :         node_constructor(node_allocator& n) : alloc_(n), node_() {}

  000ae	8b 45 d8	 mov	 eax, DWORD PTR $T17[ebp]
  000b1	89 45 8c	 mov	 DWORD PTR _a$2[ebp], eax
  000b4	83 65 90 00	 and	 DWORD PTR _a$2[ebp+4], 0

; 3191 :             node_constructor a(node_alloc());

  000b8	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 3192 :             a.create_node();

  000bc	8d 4d 8c	 lea	 ecx, DWORD PTR _a$2[ebp]
  000bf	e8 00 00 00 00	 call	 ?create_node@?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::create_node

; 3193 :             buckets_ =

  000c4	8b 45 08	 mov	 eax, DWORD PTR _new_count$[ebp]
  000c7	40		 inc	 eax
  000c8	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000cb	c6 45 f2 01	 mov	 BYTE PTR __Overflow_is_possible$20[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000cf	c7 45 98 ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$4[ebp], 1073741823 ; 3fffffffH

; 60   :         if (_Count > _Max_possible) {

  000d6	81 7d d4 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  000dd	76 05		 jbe	 SHORT $LN63@create_buc

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000df	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN63@create_buc:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000e4	8b 45 d4	 mov	 eax, DWORD PTR __Count$[ebp]
  000e7	c1 e0 02	 shl	 eax, 2
  000ea	89 45 c0	 mov	 DWORD PTR $T14[ebp], eax

; 686  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  000ed	ff 75 c0	 push	 DWORD PTR $T14[ebp]
  000f0	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000f5	59		 pop	 ecx
  000f6	89 45 bc	 mov	 DWORD PTR $T13[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3193 :             buckets_ =

  000f9	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8b 4d bc	 mov	 ecx, DWORD PTR $T13[ebp]
  000ff	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1956 :           node_pointer p = node_;

  00102	8b 45 90	 mov	 eax, DWORD PTR _a$2[ebp+4]
  00105	89 45 b8	 mov	 DWORD PTR _p$12[ebp], eax

; 1957 :           node_ = node_pointer();

  00108	83 65 90 00	 and	 DWORD PTR _a$2[ebp+4], 0

; 3194 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3195 :             dummy_node = a.release();

  0010c	8b 45 b8	 mov	 eax, DWORD PTR _p$12[ebp]
  0010f	89 45 e4	 mov	 DWORD PTR _dummy_node$[ebp], eax

; 3196 :           } else {

  00112	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00116	8d 4d 8c	 lea	 ecx, DWORD PTR _a$2[ebp]
  00119	e8 00 00 00 00	 call	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
  0011e	eb 42		 jmp	 SHORT $LN6@create_buc
$LN7@create_buc:

; 3197 :             dummy_node = link_pointer();

  00120	83 65 e4 00	 and	 DWORD PTR _dummy_node$[ebp], 0

; 3198 :             buckets_ =

  00124	8b 45 08	 mov	 eax, DWORD PTR _new_count$[ebp]
  00127	40		 inc	 eax
  00128	89 45 d0	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0012b	c6 45 f1 01	 mov	 BYTE PTR __Overflow_is_possible$19[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  0012f	c7 45 94 ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$3[ebp], 1073741823 ; 3fffffffH

; 60   :         if (_Count > _Max_possible) {

  00136	81 7d d0 ff ff
	ff 3f		 cmp	 DWORD PTR __Count$[ebp], 1073741823 ; 3fffffffH
  0013d	76 05		 jbe	 SHORT $LN77@create_buc

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN77@create_buc:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00144	8b 45 d0	 mov	 eax, DWORD PTR __Count$[ebp]
  00147	c1 e0 02	 shl	 eax, 2
  0014a	89 45 b4	 mov	 DWORD PTR $T11[ebp], eax

; 686  :         return static_cast<pointer>(_Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));

  0014d	ff 75 b4	 push	 DWORD PTR $T11[ebp]
  00150	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00155	59		 pop	 ecx
  00156	89 45 b0	 mov	 DWORD PTR $T10[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3198 :             buckets_ =

  00159	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0015c	8b 4d b0	 mov	 ecx, DWORD PTR $T10[ebp]
  0015f	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN6@create_buc:

; 3199 :               bucket_allocator_traits::allocate(bucket_alloc(), new_count + 1);
; 3200 :           }
; 3201 : 
; 3202 :           // nothrow from here...
; 3203 :           bucket_count_ = new_count;

  00162	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00165	8b 4d 08	 mov	 ecx, DWORD PTR _new_count$[ebp]
  00168	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 3204 :           recalculate_max_load();

  0016b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0016e	e8 00 00 00 00	 call	 ?recalculate_max_load@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::recalculate_max_load

; 3205 : 
; 3206 :           bucket_pointer end =

  00173	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00176	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00179	8b 4d 08	 mov	 ecx, DWORD PTR _new_count$[ebp]
  0017c	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0017f	89 45 cc	 mov	 DWORD PTR _end$[ebp], eax

; 3207 :             buckets_ + static_cast<std::ptrdiff_t>(new_count);
; 3208 :           for (bucket_pointer i = buckets_; i != end; ++i) {

  00182	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00185	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00188	89 45 e8	 mov	 DWORD PTR _i$18[ebp], eax
  0018b	eb 09		 jmp	 SHORT $LN4@create_buc
$LN2@create_buc:
  0018d	8b 45 e8	 mov	 eax, DWORD PTR _i$18[ebp]
  00190	83 c0 04	 add	 eax, 4
  00193	89 45 e8	 mov	 DWORD PTR _i$18[ebp], eax
$LN4@create_buc:
  00196	8b 45 e8	 mov	 eax, DWORD PTR _i$18[ebp]
  00199	3b 45 cc	 cmp	 eax, DWORD PTR _end$[ebp]
  0019c	74 14		 je	 SHORT $LN3@create_buc
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  0019e	8b 45 e8	 mov	 eax, DWORD PTR _i$18[ebp]
  001a1	89 45 ac	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  001a4	8b 45 ac	 mov	 eax, DWORD PTR $T9[ebp]
  001a7	89 45 a8	 mov	 DWORD PTR $T8[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2579 :         ptr_bucket() : next_(0) {}

  001aa	8b 45 a8	 mov	 eax, DWORD PTR $T8[ebp]
  001ad	83 20 00	 and	 DWORD PTR [eax], 0

; 3209 :             new ((void*)boost::to_address(i)) bucket();
; 3210 :           }

  001b0	eb db		 jmp	 SHORT $LN2@create_buc
$LN3@create_buc:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\core\pointer_traits.hpp

; 186  :     return v;

  001b2	8b 45 cc	 mov	 eax, DWORD PTR _end$[ebp]
  001b5	89 45 a4	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  001b8	8b 45 a4	 mov	 eax, DWORD PTR $T7[ebp]
  001bb	89 45 a0	 mov	 DWORD PTR $T6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2580 :         ptr_bucket(link_pointer n) : next_(n) {}

  001be	8b 45 a0	 mov	 eax, DWORD PTR $T6[ebp]
  001c1	8b 4d e4	 mov	 ecx, DWORD PTR _dummy_node$[ebp]
  001c4	89 08		 mov	 DWORD PTR [eax], ecx
$LN23@create_buc:

; 3211 :           new ((void*)boost::to_address(end)) bucket(dummy_node);
; 3212 :         }

  001c6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d0	59		 pop	 ecx
  001d1	c9		 leave
  001d2	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z$0:
  00000	8d 4d 8c	 lea	 ecx, DWORD PTR _a$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$node_constructor@V?$allocator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@std@@@detail@unordered@boost@@QAE@XZ ; boost::unordered::detail::node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >::~node_constructor<std::allocator<boost::unordered::detail::ptr_node<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a 94	 mov	 ecx, DWORD PTR [edx-108]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?create_buckets@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXI@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::create_buckets
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z
_TEXT	SEGMENT
tv91 = -40						; size = 8
_f$ = -32						; size = 8
$T1 = -24						; size = 4
$T2 = -20						; size = 4
_this$ = -16						; size = 4
tv81 = -12						; size = 4
tv87 = -8						; size = 4
$T3 = -4						; size = 4
_size$ = 8						; size = 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size, COMDAT
; _this$ = ecx

; 3095 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 3096 :           BOOST_ASSERT(mlf_ >= minimum_max_load_factor);
; 3097 : 
; 3098 :           using namespace std;
; 3099 : 
; 3100 :           // From insert/emplace requirements:
; 3101 :           //
; 3102 :           // size <= mlf_ * count
; 3103 :           // => count >= size / mlf_
; 3104 :           //
; 3105 :           // Or from rehash post-condition:
; 3106 :           //
; 3107 :           // count >= size / mlf_
; 3108 : 
; 3109 :           return policy::new_bucket_count(

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00011	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00014	89 45 f8	 mov	 DWORD PTR tv87[ebp], eax
  00017	f2 0f 2a 4d f8	 cvtsi2sd xmm1, DWORD PTR tv87[ebp]
  0001c	8b 45 f8	 mov	 eax, DWORD PTR tv87[ebp]
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	f2 0f 58 0c c5
	00 00 00 00	 addsd	 xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0002b	f2 0f 5e c8	 divsd	 xmm1, xmm0
  0002f	51		 push	 ecx
  00030	51		 push	 ecx
  00031	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00036	e8 00 00 00 00	 call	 _floor
  0003b	59		 pop	 ecx
  0003c	59		 pop	 ecx
  0003d	dd 5d d8	 fstp	 QWORD PTR tv91[ebp]
  00040	f2 0f 10 45 d8	 movsd	 xmm0, QWORD PTR tv91[ebp]
  00045	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0004d	f2 0f 11 45 e0	 movsd	 QWORD PTR _f$[ebp], xmm0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 740  :         return UINT_MAX;

  00052	83 4d ec ff	 or	 DWORD PTR $T2[ebp], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2893 :         return f >= static_cast<double>(

  00056	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00059	89 45 f4	 mov	 DWORD PTR tv81[ebp], eax
  0005c	f2 0f 2a 45 f4	 cvtsi2sd xmm0, DWORD PTR tv81[ebp]
  00061	8b 45 f4	 mov	 eax, DWORD PTR tv81[ebp]
  00064	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00067	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00070	f2 0f 10 4d e0	 movsd	 xmm1, QWORD PTR _f$[ebp]
  00075	66 0f 2f c8	 comisd	 xmm1, xmm0
  00079	72 0c		 jb	 SHORT $LN5@min_bucket
  0007b	8b 45 e8	 mov	 eax, DWORD PTR $T1[ebp]
  0007e	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 740  :         return UINT_MAX;

  00081	83 4d fc ff	 or	 DWORD PTR $T3[ebp], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2893 :         return f >= static_cast<double>(

  00085	eb 0d		 jmp	 SHORT $LN6@min_bucket
$LN5@min_bucket:
  00087	f2 0f 10 45 e0	 movsd	 xmm0, QWORD PTR _f$[ebp]
  0008c	e8 00 00 00 00	 call	 __dtoui3
  00091	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
$LN6@min_bucket:

; 2609 :           return boost::unordered::detail::next_prime(min);

  00094	ff 75 fc	 push	 DWORD PTR $T3[ebp]
  00097	e8 00 00 00 00	 call	 ?next_prime@detail@unordered@boost@@YAII@Z ; boost::unordered::detail::next_prime
  0009c	59		 pop	 ecx

; 3110 :             boost::unordered::detail::double_to_size(
; 3111 :               floor(static_cast<double>(size) / static_cast<double>(mlf_)) +
; 3112 :               1));
; 3113 :         }

  0009d	c9		 leave
  0009e	c2 04 00	 ret	 4
?min_buckets_for_size@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEII@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::min_buckets_for_size
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?recalculate_max_load@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ
_TEXT	SEGMENT
_f$ = -36						; size = 8
$T1 = -28						; size = 4
$T2 = -24						; size = 4
tv76 = -20						; size = 4
tv92 = -16						; size = 4
tv83 = -12						; size = 4
tv82 = -8						; size = 4
_this$ = -4						; size = 4
?recalculate_max_load@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::recalculate_max_load, COMDAT
; _this$ = ecx

; 3076 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 3077 :           using namespace std;
; 3078 : 
; 3079 :           // From 6.3.1/13:
; 3080 :           // Only resize when size >= mlf_ * count
; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00010	0f 84 84 00 00
	00		 je	 $LN3@recalculat
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001c	89 45 f4	 mov	 DWORD PTR tv83[ebp], eax
  0001f	f2 0f 2a 45 f4	 cvtsi2sd xmm0, DWORD PTR tv83[ebp]
  00024	8b 45 f4	 mov	 eax, DWORD PTR tv83[ebp]
  00027	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002a	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	f3 0f 5a 48 0c	 cvtss2sd xmm1, DWORD PTR [eax+12]
  0003b	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  0003f	51		 push	 ecx
  00040	51		 push	 ecx
  00041	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  00046	e8 00 00 00 00	 call	 _ceil
  0004b	59		 pop	 ecx
  0004c	59		 pop	 ecx
  0004d	dd 5d dc	 fstp	 QWORD PTR _f$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 740  :         return UINT_MAX;

  00050	83 4d e8 ff	 or	 DWORD PTR $T2[ebp], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2893 :         return f >= static_cast<double>(

  00054	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00057	89 45 f0	 mov	 DWORD PTR tv92[ebp], eax
  0005a	f2 0f 2a 45 f0	 cvtsi2sd xmm0, DWORD PTR tv92[ebp]
  0005f	8b 45 f0	 mov	 eax, DWORD PTR tv92[ebp]
  00062	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00065	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0006e	f2 0f 10 4d dc	 movsd	 xmm1, QWORD PTR _f$[ebp]
  00073	66 0f 2f c8	 comisd	 xmm1, xmm0
  00077	72 0c		 jb	 SHORT $LN7@recalculat
  00079	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  0007c	89 45 f8	 mov	 DWORD PTR tv82[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 740  :         return UINT_MAX;

  0007f	83 4d f8 ff	 or	 DWORD PTR tv82[ebp], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2893 :         return f >= static_cast<double>(

  00083	eb 0d		 jmp	 SHORT $LN8@recalculat
$LN7@recalculat:
  00085	f2 0f 10 45 dc	 movsd	 xmm0, QWORD PTR _f$[ebp]
  0008a	e8 00 00 00 00	 call	 __dtoui3
  0008f	89 45 f8	 mov	 DWORD PTR tv82[ebp], eax
$LN8@recalculat:

; 3077 :           using namespace std;
; 3078 : 
; 3079 :           // From 6.3.1/13:
; 3080 :           // Only resize when size >= mlf_ * count
; 3081 :           max_load_ = buckets_ ? boost::unordered::detail::double_to_size(

  00092	8b 45 f8	 mov	 eax, DWORD PTR tv82[ebp]
  00095	89 45 ec	 mov	 DWORD PTR tv76[ebp], eax
  00098	eb 04		 jmp	 SHORT $LN4@recalculat
$LN3@recalculat:
  0009a	83 65 ec 00	 and	 DWORD PTR tv76[ebp], 0
$LN4@recalculat:
  0009e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a1	8b 4d ec	 mov	 ecx, DWORD PTR tv76[ebp]
  000a4	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 3082 :                                    ceil(static_cast<double>(mlf_) *
; 3083 :                                         static_cast<double>(bucket_count_)))
; 3084 :                                : 0;
; 3085 :         }

  000a7	c9		 leave
  000a8	c3		 ret	 0
?recalculate_max_load@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::recalculate_max_load
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?begin@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@I@Z
_TEXT	SEGMENT
$T1 = -16						; size = 4
_prev$ = -12						; size = 4
_this$ = -8						; size = 4
tv72 = -4						; size = 4
_bucket_index$ = 8					; size = 4
?begin@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@I@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::begin, COMDAT
; _this$ = ecx

; 3045 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3046 :           if (!size_)

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00010	75 04		 jne	 SHORT $LN8@begin

; 3047 :             return node_pointer();

  00012	33 c0		 xor	 eax, eax
  00014	eb 2c		 jmp	 SHORT $LN1@begin
$LN8@begin:

; 3036 :           return get_bucket_pointer(bucket_index)->next_;

  00016	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _bucket_index$[ebp]
  0001f	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00022	89 45 f4	 mov	 DWORD PTR _prev$[ebp], eax

; 3048 :           link_pointer prev = get_previous_start(bucket_index);
; 3049 :           return prev ? next_node(prev) : node_pointer();

  00025	83 7d f4 00	 cmp	 DWORD PTR _prev$[ebp], 0
  00029	74 10		 je	 SHORT $LN4@begin
  0002b	8b 45 f0	 mov	 eax, DWORD PTR $T1[ebp]
  0002e	89 45 fc	 mov	 DWORD PTR tv72[ebp], eax

; 2964 :           return static_cast<node_pointer>(n->next_);

  00031	8b 45 f4	 mov	 eax, DWORD PTR _prev$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	89 45 fc	 mov	 DWORD PTR tv72[ebp], eax

; 3048 :           link_pointer prev = get_previous_start(bucket_index);
; 3049 :           return prev ? next_node(prev) : node_pointer();

  00039	eb 04		 jmp	 SHORT $LN5@begin
$LN4@begin:
  0003b	83 65 fc 00	 and	 DWORD PTR tv72[ebp], 0
$LN5@begin:
  0003f	8b 45 fc	 mov	 eax, DWORD PTR tv72[ebp]
$LN1@begin:

; 3050 :         }

  00042	c9		 leave
  00043	c2 04 00	 ret	 4
?begin@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QBEPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@I@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::begin
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?next_for_find@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z
_TEXT	SEGMENT
tv84 = -8						; size = 4
_n2$ = -4						; size = 4
_n$ = 8							; size = 4
?next_for_find@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_for_find, COMDAT

; 2968 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx

; 2969 :           node_pointer n2 = static_cast<node_pointer>(n);

  00005	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00008	89 45 fc	 mov	 DWORD PTR _n2$[ebp], eax
$LN4@next_for_f:

; 2964 :           return static_cast<node_pointer>(n->next_);

  0000b	8b 45 fc	 mov	 eax, DWORD PTR _n2$[ebp]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	89 45 fc	 mov	 DWORD PTR _n2$[ebp], eax

; 2970 :           do {
; 2971 :             n2 = next_node(n2);
; 2972 :           } while (n2 && !n2->is_first_in_group());

  00013	83 7d fc 00	 cmp	 DWORD PTR _n2$[ebp], 0
  00017	74 20		 je	 SHORT $LN3@next_for_f

; 4878 :           return !(bucket_info_ & ~((std::size_t)-1 >> 1));

  00019	8b 45 fc	 mov	 eax, DWORD PTR _n2$[ebp]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00024	75 09		 jne	 SHORT $LN11@next_for_f
  00026	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv84[ebp], 1
  0002d	eb 04		 jmp	 SHORT $LN9@next_for_f
$LN11@next_for_f:
  0002f	83 65 f8 00	 and	 DWORD PTR tv84[ebp], 0
$LN9@next_for_f:

; 2970 :           do {
; 2971 :             n2 = next_node(n2);
; 2972 :           } while (n2 && !n2->is_first_in_group());

  00033	83 7d f8 00	 cmp	 DWORD PTR tv84[ebp], 0
  00037	74 d2		 je	 SHORT $LN4@next_for_f
$LN3@next_for_f:

; 2973 :           return n2;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _n2$[ebp]

; 2974 :         }

  0003c	c9		 leave
  0003d	c3		 ret	 0
?next_for_find@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_for_find
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z
_TEXT	SEGMENT
_n$ = 8							; size = 4
?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z PROC ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_node, COMDAT

; 2963 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2964 :           return static_cast<node_pointer>(n->next_);

  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]

; 2965 :         }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?next_node@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@SAPAU?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@234@PAUptr_bucket@234@@Z ENDP ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::next_node
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?key_eq@?$functions@U?$hash@K@boost@@U?$equal_to@K@std@@@detail@unordered@boost@@QBEABU?$equal_to@K@std@@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?key_eq@?$functions@U?$hash@K@boost@@U?$equal_to@K@std@@@detail@unordered@boost@@QBEABU?$equal_to@K@std@@XZ PROC ; boost::unordered::detail::functions<boost::hash<unsigned long>,std::equal_to<unsigned long> >::key_eq, COMDAT
; _this$ = ecx

; 2787 :         P const& key_eq() const { return current_functions().second(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2791 :           return *static_cast<function_pair const*>(

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0000f	83 e0 01	 and	 eax, 1
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8d 44 01 01	 lea	 eax, DWORD PTR [ecx+eax+1]
  00019	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax

; 434  :           return static_cast<base2 const*>(this)->get();

  0001c	83 7d f8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00020	74 09		 je	 SHORT $LN9@key_eq
  00022	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00025	40		 inc	 eax
  00026	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00029	eb 04		 jmp	 SHORT $LN7@key_eq
$LN9@key_eq:
  0002b	83 65 f4 00	 and	 DWORD PTR $T1[ebp], 0
$LN7@key_eq:

; 2787 :         P const& key_eq() const { return current_functions().second(); }

  0002f	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
  00032	c9		 leave
  00033	c3		 ret	 0
?key_eq@?$functions@U?$hash@K@boost@@U?$equal_to@K@std@@@detail@unordered@boost@@QBEABU?$equal_to@K@std@@XZ ENDP ; boost::unordered::detail::functions<boost::hash<unsigned long>,std::equal_to<unsigned long> >::key_eq
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
_TEXT	SEGMENT
$T2 = -88						; size = 4
_this$ = -84						; size = 4
_dwFileNameHash$ = -80					; size = 4
$T3 = -76						; size = 4
__My_data$4 = -72					; size = 4
__Newsize$ = -68					; size = 4
$T5 = -61						; size = 1
_iStreamOffset$ = -60					; size = 4
_bSDBSize$ = -53					; size = 1
_info$ = -52						; size = 36
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pStream$ = 8						; size = 4
?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z PROC ; EterPackPolicy_CSHybridCrypt::ReadSupplementatyDataBlockFromStream, COMDAT
; _this$ = ecx

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d ac	 mov	 DWORD PTR _this$[ebp], ecx

; 471  : #ifdef __THEMIDA__
; 472  : 	VM_START
; 473  : #endif
; 474  : 
; 475  : 	//DWORD				dwFileIdentifier;
; 476  : 	//std::vector<BYTE>	vecSDBStream;
; 477  : 
; 478  : 	DWORD dwFileNameHash;
; 479  : 	BYTE  bSDBSize;
; 480  : 	int   iStreamOffset = 0;

  0002b	83 65 c4 00	 and	 DWORD PTR _iStreamOffset$[ebp], 0

; 481  : 	
; 482  : 	memcpy(&dwFileNameHash, pStream + iStreamOffset, sizeof(DWORD) );

  0002f	6a 04		 push	 4
  00031	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00034	03 45 c4	 add	 eax, DWORD PTR _iStreamOffset$[ebp]
  00037	50		 push	 eax
  00038	8d 45 b0	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _memcpy
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH

; 483  : 	iStreamOffset += sizeof(DWORD);

  00044	8b 45 c4	 mov	 eax, DWORD PTR _iStreamOffset$[ebp]
  00047	83 c0 04	 add	 eax, 4
  0004a	89 45 c4	 mov	 DWORD PTR _iStreamOffset$[ebp], eax

; 484  : 
; 485  : 	memcpy(&bSDBSize, pStream + iStreamOffset, sizeof(BYTE) );

  0004d	6a 01		 push	 1
  0004f	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00052	03 45 c4	 add	 eax, DWORD PTR _iStreamOffset$[ebp]
  00055	50		 push	 eax
  00056	8d 45 cb	 lea	 eax, DWORD PTR _bSDBSize$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _memcpy
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 486  : 	iStreamOffset += sizeof(BYTE);

  00062	8b 45 c4	 mov	 eax, DWORD PTR _iStreamOffset$[ebp]
  00065	40		 inc	 eax
  00066	89 45 c4	 mov	 DWORD PTR _iStreamOffset$[ebp], eax

; 487  : 
; 488  : 	// NOTE : related map name isn`t required in client. so we don`t recv it from stream to reduce packet size.
; 489  : 	TSupplementaryDataBlockInfo info;

  00069	8d 4d cc	 lea	 ecx, DWORD PTR _info$[ebp]
  0006c	e8 00 00 00 00	 call	 ??0SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
  00071	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 490  : 	{
; 491  : 		info.vecStream.resize( bSDBSize );

  00075	0f b6 45 cb	 movzx	 eax, BYTE PTR _bSDBSize$[ebp]
  00079	89 45 bc	 mov	 DWORD PTR __Newsize$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1242 :         _Resize(_Newsize, _Value_init_tag{});

  0007c	8d 45 c3	 lea	 eax, DWORD PTR $T5[ebp]
  0007f	50		 push	 eax
  00080	ff 75 bc	 push	 DWORD PTR __Newsize$[ebp]
  00083	8d 4d e4	 lea	 ecx, DWORD PTR _info$[ebp+24]
  00086	e8 00 00 00 00	 call	 ??$_Resize@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize<std::_Value_init_tag>

; 1498 :         auto& _My_data = _Mypair._Myval2;

  0008b	8d 45 e4	 lea	 eax, DWORD PTR _info$[ebp+24]
  0008e	89 45 b8	 mov	 DWORD PTR __My_data$4[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00091	33 c0		 xor	 eax, eax
  00093	c1 e0 00	 shl	 eax, 0
  00096	8b 4d b8	 mov	 ecx, DWORD PTR __My_data$4[ebp]
  00099	03 01		 add	 eax, DWORD PTR [ecx]
  0009b	89 45 b4	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 492  : 		memcpy(&info.vecStream[0],  pStream + iStreamOffset, bSDBSize );

  0009e	0f b6 45 cb	 movzx	 eax, BYTE PTR _bSDBSize$[ebp]
  000a2	50		 push	 eax
  000a3	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  000a6	03 45 c4	 add	 eax, DWORD PTR _iStreamOffset$[ebp]
  000a9	50		 push	 eax
  000aa	ff 75 b4	 push	 DWORD PTR $T3[ebp]
  000ad	e8 00 00 00 00	 call	 _memcpy
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 493  : 		iStreamOffset += bSDBSize;

  000b5	0f b6 45 cb	 movzx	 eax, BYTE PTR _bSDBSize$[ebp]
  000b9	03 45 c4	 add	 eax, DWORD PTR _iStreamOffset$[ebp]
  000bc	89 45 c4	 mov	 DWORD PTR _iStreamOffset$[ebp], eax

; 494  : 
; 495  : 		m_mapSDBMap[dwFileNameHash] = info;

  000bf	8d 45 cc	 lea	 eax, DWORD PTR _info$[ebp]
  000c2	50		 push	 eax
  000c3	8d 45 b0	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  000c6	50		 push	 eax
  000c7	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	83 c1 18	 add	 ecx, 24			; 00000018H
  000cd	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]
  000d2	8b c8		 mov	 ecx, eax
  000d4	e8 00 00 00 00	 call	 ??4SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAEAAU01@ABU01@@Z

; 502  : 	return iStreamOffset;

  000d9	8b 45 c4	 mov	 eax, DWORD PTR _iStreamOffset$[ebp]
  000dc	89 45 a8	 mov	 DWORD PTR $T2[ebp], eax
  000df	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  000e3	8d 4d e4	 lea	 ecx, DWORD PTR _info$[ebp+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  000e6	e8 00 00 00 00	 call	 ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
  000eb	8d 4d cc	 lea	 ecx, DWORD PTR _info$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  000ee	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 502  : 	return iStreamOffset;

  000f3	8b 45 a8	 mov	 eax, DWORD PTR $T2[ebp]

; 503  : }

  000f6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00100	59		 pop	 ecx
  00101	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00104	33 cd		 xor	 ecx, ebp
  00106	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010b	c9		 leave
  0010c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z$0:
  00000	8d 4d cc	 lea	 ecx, DWORD PTR _info$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReadSupplementatyDataBlockFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ENDP ; EterPackPolicy_CSHybridCrypt::ReadSupplementatyDataBlockFromStream
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z
_TEXT	SEGMENT
$T2 = -140						; size = 4
$T3 = -136						; size = 4
__My_data$4 = -132					; size = 4
$T5 = -128						; size = 4
$T6 = -124						; size = 4
$T7 = -120						; size = 4
_dwFileNamehash$8 = -116				; size = 4
$T9 = -112						; size = 4
$T10 = -108						; size = 4
$T11 = -104						; size = 4
$T12 = -100						; size = 4
$T13 = -96						; size = 4
$T14 = -92						; size = 4
$T15 = -88						; size = 4
_dwSDBMapSize$ = -84					; size = 4
$T16 = -80						; size = 4
_sdbVector$17 = -76					; size = 4
__My_data$18 = -72					; size = 4
_dwMapNameSize$19 = -68					; size = 4
tv74 = -64						; size = 4
_this$ = -60						; size = 4
$T20 = -56						; size = 4
_this$ = -52						; size = 4
_cit$ = -48						; size = 4
$T21 = -42						; size = 1
_bSDBSize$22 = -41					; size = 1
_strRelatedMapName$23 = -40				; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rFile$ = 8						; size = 4
?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z PROC ; EterPackPolicy_CSHybridCrypt::WriteSupplementaryDataBlockToFile, COMDAT
; _this$ = ecx

; 437  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 215  :       size_type size() const BOOST_NOEXCEPT { return table_.size_; }

  0002e	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00034	89 45 b0	 mov	 DWORD PTR $T16[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 446  : 	DWORD dwSDBMapSize = m_mapSDBMap.size();

  00037	8b 45 b0	 mov	 eax, DWORD PTR $T16[ebp]
  0003a	89 45 ac	 mov	 DWORD PTR _dwSDBMapSize$[ebp], eax

; 447  : 	rFile.Write( &dwSDBMapSize, sizeof(DWORD) );

  0003d	6a 04		 push	 4
  0003f	8d 45 ac	 lea	 eax, DWORD PTR _dwSDBMapSize$[ebp]
  00042	50		 push	 eax
  00043	8b 45 08	 mov	 eax, DWORD PTR _rFile$[ebp]
  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _rFile$[ebp]
  0004b	ff 50 04	 call	 DWORD PTR [eax+4]
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2424 :         c_iterator() BOOST_NOEXCEPT : node_() {}

  0004e	83 65 d0 00	 and	 DWORD PTR _cit$[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 193  :       iterator begin() BOOST_NOEXCEPT { return iterator(table_.begin()); }

  00052	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  00055	83 c0 18	 add	 eax, 24			; 00000018H
  00058	89 45 cc	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0005b	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00062	74 25		 je	 SHORT $LN19@WriteSuppl

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  00064	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006a	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00070	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00073	89 45 a8	 mov	 DWORD PTR $T15[ebp], eax

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00076	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0007c	89 45 c8	 mov	 DWORD PTR $T20[ebp], eax

; 2964 :           return static_cast<node_pointer>(n->next_);

  0007f	8b 45 a8	 mov	 eax, DWORD PTR $T15[ebp]
  00082	8b 00		 mov	 eax, DWORD PTR [eax]
  00084	89 45 c8	 mov	 DWORD PTR $T20[ebp], eax

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00087	eb 04		 jmp	 SHORT $LN17@WriteSuppl
$LN19@WriteSuppl:
  00089	83 65 c8 00	 and	 DWORD PTR $T20[ebp], 0
$LN17@WriteSuppl:

; 2371 :           : node_(static_cast<node_pointer>(x))

  0008d	8b 45 c8	 mov	 eax, DWORD PTR $T20[ebp]
  00090	89 45 a4	 mov	 DWORD PTR $T14[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 193  :       iterator begin() BOOST_NOEXCEPT { return iterator(table_.begin()); }

  00093	8d 45 a4	 lea	 eax, DWORD PTR $T14[ebp]
  00096	89 45 a0	 mov	 DWORD PTR $T13[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  00099	8b 45 a0	 mov	 eax, DWORD PTR $T13[ebp]
  0009c	8b 00		 mov	 eax, DWORD PTR [eax]
  0009e	89 45 9c	 mov	 DWORD PTR $T12[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 450  : 	for( cit = m_mapSDBMap.begin(); cit != m_mapSDBMap.end(); ++cit )

  000a1	8b 45 9c	 mov	 eax, DWORD PTR $T12[ebp]
  000a4	89 45 d0	 mov	 DWORD PTR _cit$[ebp], eax
  000a7	eb 08		 jmp	 SHORT $LN4@WriteSuppl
$LN2@WriteSuppl:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  000a9	8b 45 d0	 mov	 eax, DWORD PTR _cit$[ebp]
  000ac	8b 00		 mov	 eax, DWORD PTR [eax]
  000ae	89 45 d0	 mov	 DWORD PTR _cit$[ebp], eax
$LN4@WriteSuppl:

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  000b1	83 65 98 00	 and	 DWORD PTR $T11[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 200  :       iterator end() BOOST_NOEXCEPT { return iterator(); }

  000b5	8d 45 98	 lea	 eax, DWORD PTR $T11[ebp]
  000b8	89 45 94	 mov	 DWORD PTR $T10[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  000bb	8b 45 94	 mov	 eax, DWORD PTR $T10[ebp]
  000be	8b 00		 mov	 eax, DWORD PTR [eax]
  000c0	89 45 90	 mov	 DWORD PTR $T9[ebp], eax

; 2459 :           return x.node_ != y.node_;

  000c3	8b 45 d0	 mov	 eax, DWORD PTR _cit$[ebp]
  000c6	3b 45 90	 cmp	 eax, DWORD PTR $T9[ebp]
  000c9	74 09		 je	 SHORT $LN48@WriteSuppl
  000cb	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
  000d2	eb 04		 jmp	 SHORT $LN49@WriteSuppl
$LN48@WriteSuppl:
  000d4	83 65 c0 00	 and	 DWORD PTR tv74[ebp], 0
$LN49@WriteSuppl:
  000d8	8a 45 c0	 mov	 al, BYTE PTR tv74[ebp]
  000db	88 45 d6	 mov	 BYTE PTR $T21[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 450  : 	for( cit = m_mapSDBMap.begin(); cit != m_mapSDBMap.end(); ++cit )

  000de	0f b6 45 d6	 movzx	 eax, BYTE PTR $T21[ebp]
  000e2	85 c0		 test	 eax, eax
  000e4	0f 84 e9 00 00
	00		 je	 $LN1@WriteSuppl

; 451  : 	{
; 452  : 		DWORD dwFileNamehash = cit->first;

  000ea	8b 45 d0	 mov	 eax, DWORD PTR _cit$[ebp]
  000ed	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000f0	89 45 8c	 mov	 DWORD PTR _dwFileNamehash$8[ebp], eax

; 453  : 		rFile.Write( &dwFileNamehash, sizeof(DWORD) );

  000f3	6a 04		 push	 4
  000f5	8d 45 8c	 lea	 eax, DWORD PTR _dwFileNamehash$8[ebp]
  000f8	50		 push	 eax
  000f9	8b 45 08	 mov	 eax, DWORD PTR _rFile$[ebp]
  000fc	8b 00		 mov	 eax, DWORD PTR [eax]
  000fe	8b 4d 08	 mov	 ecx, DWORD PTR _rFile$[ebp]
  00101	ff 50 04	 call	 DWORD PTR [eax+4]
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 4869 :         value_type* value_ptr() { return value_base_.value_ptr(); }

  00104	8b 45 d0	 mov	 eax, DWORD PTR _cit$[ebp]
  00107	83 c0 08	 add	 eax, 8

; 2435 :         value_type const* operator->() const { return node_->value_ptr(); }

  0010a	89 45 88	 mov	 DWORD PTR $T7[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 455  : 		const std::string strRelatedMapName = cit->second.strRelatedMapName;

  0010d	8b 45 88	 mov	 eax, DWORD PTR $T7[ebp]
  00110	83 c0 04	 add	 eax, 4
  00113	50		 push	 eax
  00114	8d 4d d8	 lea	 ecx, DWORD PTR _strRelatedMapName$23[ebp]
  00117	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0011c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3770 :         return _Mypair._Myval2._Mysize;

  00120	8b 45 e8	 mov	 eax, DWORD PTR _strRelatedMapName$23[ebp+16]
  00123	89 45 84	 mov	 DWORD PTR $T6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 456  : 		DWORD dwMapNameSize = strRelatedMapName.size();

  00126	8b 45 84	 mov	 eax, DWORD PTR $T6[ebp]
  00129	89 45 bc	 mov	 DWORD PTR _dwMapNameSize$19[ebp], eax

; 457  : 		rFile.Write( &dwMapNameSize, sizeof(DWORD) );

  0012c	6a 04		 push	 4
  0012e	8d 45 bc	 lea	 eax, DWORD PTR _dwMapNameSize$19[ebp]
  00131	50		 push	 eax
  00132	8b 45 08	 mov	 eax, DWORD PTR _rFile$[ebp]
  00135	8b 00		 mov	 eax, DWORD PTR [eax]
  00137	8b 4d 08	 mov	 ecx, DWORD PTR _rFile$[ebp]
  0013a	ff 50 04	 call	 DWORD PTR [eax+4]

; 458  : 		rFile.Write( strRelatedMapName.c_str(), dwMapNameSize );

  0013d	ff 75 bc	 push	 DWORD PTR _dwMapNameSize$19[ebp]
  00140	8d 4d d8	 lea	 ecx, DWORD PTR _strRelatedMapName$23[ebp]
  00143	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00148	50		 push	 eax
  00149	8b 45 08	 mov	 eax, DWORD PTR _rFile$[ebp]
  0014c	8b 00		 mov	 eax, DWORD PTR [eax]
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _rFile$[ebp]
  00151	ff 50 04	 call	 DWORD PTR [eax+4]

; 459  : 
; 460  : 		const std::vector<BYTE>& sdbVector = cit->second.vecStream;

  00154	8b 45 d0	 mov	 eax, DWORD PTR _cit$[ebp]
  00157	83 c0 24	 add	 eax, 36			; 00000024H
  0015a	89 45 b4	 mov	 DWORD PTR _sdbVector$17[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  0015d	8b 45 b4	 mov	 eax, DWORD PTR _sdbVector$17[ebp]
  00160	89 45 b8	 mov	 DWORD PTR __My_data$18[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00163	8b 45 b8	 mov	 eax, DWORD PTR __My_data$18[ebp]
  00166	8b 4d b8	 mov	 ecx, DWORD PTR __My_data$18[ebp]
  00169	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0016c	2b 01		 sub	 eax, DWORD PTR [ecx]
  0016e	89 45 80	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 461  : 		BYTE bSDBSize = (BYTE)(sdbVector.size());

  00171	8a 45 80	 mov	 al, BYTE PTR $T5[ebp]
  00174	88 45 d7	 mov	 BYTE PTR _bSDBSize$22[ebp], al

; 462  : 
; 463  : 		rFile.Write( &bSDBSize, sizeof(bSDBSize) );

  00177	6a 01		 push	 1
  00179	8d 45 d7	 lea	 eax, DWORD PTR _bSDBSize$22[ebp]
  0017c	50		 push	 eax
  0017d	8b 45 08	 mov	 eax, DWORD PTR _rFile$[ebp]
  00180	8b 00		 mov	 eax, DWORD PTR [eax]
  00182	8b 4d 08	 mov	 ecx, DWORD PTR _rFile$[ebp]
  00185	ff 50 04	 call	 DWORD PTR [eax+4]

; 464  : 		if( bSDBSize > 0 )

  00188	0f b6 45 d7	 movzx	 eax, BYTE PTR _bSDBSize$22[ebp]
  0018c	85 c0		 test	 eax, eax
  0018e	7e 32		 jle	 SHORT $LN5@WriteSuppl
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1508 :         auto& _My_data = _Mypair._Myval2;

  00190	8b 45 b4	 mov	 eax, DWORD PTR _sdbVector$17[ebp]
  00193	89 85 7c ff ff
	ff		 mov	 DWORD PTR __My_data$4[ebp], eax

; 1509 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1510 :         _STL_VERIFY(
; 1511 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1512 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1513 : 
; 1514 :         return _My_data._Myfirst[_Pos];

  00199	33 c0		 xor	 eax, eax
  0019b	c1 e0 00	 shl	 eax, 0
  0019e	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR __My_data$4[ebp]
  001a4	03 01		 add	 eax, DWORD PTR [ecx]
  001a6	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 465  : 			rFile.Write( &sdbVector[0], bSDBSize );

  001ac	0f b6 45 d7	 movzx	 eax, BYTE PTR _bSDBSize$22[ebp]
  001b0	50		 push	 eax
  001b1	ff b5 78 ff ff
	ff		 push	 DWORD PTR $T3[ebp]
  001b7	8b 45 08	 mov	 eax, DWORD PTR _rFile$[ebp]
  001ba	8b 00		 mov	 eax, DWORD PTR [eax]
  001bc	8b 4d 08	 mov	 ecx, DWORD PTR _rFile$[ebp]
  001bf	ff 50 04	 call	 DWORD PTR [eax+4]
$LN5@WriteSuppl:

; 466  : 	}

  001c2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  001c6	8d 4d d8	 lea	 ecx, DWORD PTR _strRelatedMapName$23[ebp]
  001c9	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 466  : 	}

  001ce	e9 d6 fe ff ff	 jmp	 $LN2@WriteSuppl
$LN1@WriteSuppl:

; 467  : }

  001d3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001d6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001dd	59		 pop	 ecx
  001de	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e1	33 cd		 xor	 ecx, ebp
  001e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e8	c9		 leave
  001e9	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strRelatedMapName$23[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 7c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-132]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?WriteSupplementaryDataBlockToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ENDP ; EterPackPolicy_CSHybridCrypt::WriteSupplementaryDataBlockToFile
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
_TEXT	SEGMENT
_dwExtHash$ = -68					; size = 4
_dwCryptoInfoSize$ = -64				; size = 4
_this$ = -60						; size = 4
_i$2 = -56						; size = 4
_iStreamOffset$ = -52					; size = 4
_info$3 = -48						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pStream$ = 8						; size = 4
?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z PROC ; EterPackPolicy_CSHybridCrypt::ReadCryptKeyInfoFromStream, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d c4	 mov	 DWORD PTR _this$[ebp], ecx

; 307  : 	int	iStreamOffset = 0;

  0002d	83 65 cc 00	 and	 DWORD PTR _iStreamOffset$[ebp], 0

; 308  : 	
; 309  : 	DWORD dwCryptoInfoSize;
; 310  : 	memcpy(&dwCryptoInfoSize, pStream, sizeof(DWORD) );

  00031	6a 04		 push	 4
  00033	ff 75 08	 push	 DWORD PTR _pStream$[ebp]
  00036	8d 45 c0	 lea	 eax, DWORD PTR _dwCryptoInfoSize$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 _memcpy
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 311  : 	iStreamOffset += sizeof(DWORD);

  00042	8b 45 cc	 mov	 eax, DWORD PTR _iStreamOffset$[ebp]
  00045	83 c0 04	 add	 eax, 4
  00048	89 45 cc	 mov	 DWORD PTR _iStreamOffset$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 722  :       void clear() BOOST_NOEXCEPT { table_.clear_impl(); }

  0004b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	e8 00 00 00 00	 call	 ?clear_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::clear_impl
  00057	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 317  : 	for( int i = 0; i < dwCryptoInfoSize; ++i )

  0005b	83 65 c8 00	 and	 DWORD PTR _i$2[ebp], 0
  0005f	eb 07		 jmp	 SHORT $LN4@ReadCryptK
$LN2@ReadCryptK:
  00061	8b 45 c8	 mov	 eax, DWORD PTR _i$2[ebp]
  00064	40		 inc	 eax
  00065	89 45 c8	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@ReadCryptK:
  00068	8b 45 c8	 mov	 eax, DWORD PTR _i$2[ebp]
  0006b	3b 45 c0	 cmp	 eax, DWORD PTR _dwCryptoInfoSize$[ebp]
  0006e	73 75		 jae	 SHORT $LN3@ReadCryptK

; 318  : 	{
; 319  : 		memcpy(&dwExtHash, pStream + iStreamOffset, sizeof(DWORD) );

  00070	6a 04		 push	 4
  00072	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00075	03 45 cc	 add	 eax, DWORD PTR _iStreamOffset$[ebp]
  00078	50		 push	 eax
  00079	8d 45 bc	 lea	 eax, DWORD PTR _dwExtHash$[ebp]
  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _memcpy
  00082	83 c4 0c	 add	 esp, 12			; 0000000cH

; 320  : 		iStreamOffset += sizeof(DWORD);

  00085	8b 45 cc	 mov	 eax, DWORD PTR _iStreamOffset$[ebp]
  00088	83 c0 04	 add	 eax, 4
  0008b	89 45 cc	 mov	 DWORD PTR _iStreamOffset$[ebp], eax

; 321  : 
; 322  : 		TCSHybridCryptKey info;
; 323  : 		{
; 324  : 			memcpy(info.uEncryptKey.key, pStream + iStreamOffset, sizeof(TEncryptKey) );

  0008e	6a 10		 push	 16			; 00000010H
  00090	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  00093	03 45 cc	 add	 eax, DWORD PTR _iStreamOffset$[ebp]
  00096	50		 push	 eax
  00097	8d 45 d0	 lea	 eax, DWORD PTR _info$3[ebp]
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _memcpy
  000a0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 325  : 			iStreamOffset += sizeof(TEncryptKey);

  000a3	8b 45 cc	 mov	 eax, DWORD PTR _iStreamOffset$[ebp]
  000a6	83 c0 10	 add	 eax, 16			; 00000010H
  000a9	89 45 cc	 mov	 DWORD PTR _iStreamOffset$[ebp], eax

; 326  : 
; 327  : 			memcpy(info.uEncryptIV.iv, pStream + iStreamOffset, sizeof(TEncryptIV) );

  000ac	6a 10		 push	 16			; 00000010H
  000ae	8b 45 08	 mov	 eax, DWORD PTR _pStream$[ebp]
  000b1	03 45 cc	 add	 eax, DWORD PTR _iStreamOffset$[ebp]
  000b4	50		 push	 eax
  000b5	8d 45 e0	 lea	 eax, DWORD PTR _info$3[ebp+16]
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _memcpy
  000be	83 c4 0c	 add	 esp, 12			; 0000000cH

; 328  : 			iStreamOffset += sizeof(TEncryptIV);

  000c1	8b 45 cc	 mov	 eax, DWORD PTR _iStreamOffset$[ebp]
  000c4	83 c0 10	 add	 eax, 16			; 00000010H
  000c7	89 45 cc	 mov	 DWORD PTR _iStreamOffset$[ebp], eax

; 329  : 		}
; 330  : 
; 331  : 		m_mapHybridCryptKey[dwExtHash] = info;

  000ca	8d 45 bc	 lea	 eax, DWORD PTR _dwExtHash$[ebp]
  000cd	50		 push	 eax
  000ce	8b 4d c4	 mov	 ecx, DWORD PTR _this$[ebp]
  000d1	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::operator[]
  000d6	6a 08		 push	 8
  000d8	59		 pop	 ecx
  000d9	8d 75 d0	 lea	 esi, DWORD PTR _info$3[ebp]
  000dc	8b f8		 mov	 edi, eax
  000de	f3 a5		 rep movsd

; 332  : 	}

  000e0	e9 7c ff ff ff	 jmp	 $LN2@ReadCryptK
$LN3@ReadCryptK:

; 333  : 
; 334  : 	return iStreamOffset;

  000e5	8b 45 cc	 mov	 eax, DWORD PTR _iStreamOffset$[ebp]

; 335  : }

  000e8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000eb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f2	59		 pop	 ecx
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f8	33 cd		 xor	 ecx, ebp
  000fa	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ff	c9		 leave
  00100	c2 04 00	 ret	 4
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00016	33 c8		 xor	 ecx, eax
  00018	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z
  00022	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReadCryptKeyInfoFromStream@EterPackPolicy_CSHybridCrypt@@QAEHPBE@Z ENDP ; EterPackPolicy_CSHybridCrypt::ReadCryptKeyInfoFromStream
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z
_TEXT	SEGMENT
$T1 = -72						; size = 4
_extNamehash$2 = -68					; size = 4
$T3 = -64						; size = 4
$T4 = -60						; size = 4
$T5 = -56						; size = 4
$T6 = -52						; size = 4
$T7 = -48						; size = 4
$T8 = -44						; size = 4
$T9 = -40						; size = 4
_dwCryptKeySize$ = -36					; size = 4
$T10 = -32						; size = 4
_CryptKey$11 = -28					; size = 4
tv74 = -24						; size = 4
_this$ = -20						; size = 4
$T12 = -16						; size = 4
_this$ = -12						; size = 4
_cit$ = -8						; size = 4
$T13 = -1						; size = 1
_rFile$ = 8						; size = 4
?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z PROC ; EterPackPolicy_CSHybridCrypt::WriteCryptKeyToFile, COMDAT
; _this$ = ecx

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 215  :       size_type size() const BOOST_NOEXCEPT { return table_.size_; }

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000f	89 45 e0	 mov	 DWORD PTR $T10[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 290  : 	DWORD dwCryptKeySize = m_mapHybridCryptKey.size();

  00012	8b 45 e0	 mov	 eax, DWORD PTR $T10[ebp]
  00015	89 45 dc	 mov	 DWORD PTR _dwCryptKeySize$[ebp], eax

; 291  : 	rFile.Write( &dwCryptKeySize, sizeof(DWORD) );

  00018	6a 04		 push	 4
  0001a	8d 45 dc	 lea	 eax, DWORD PTR _dwCryptKeySize$[ebp]
  0001d	50		 push	 eax
  0001e	8b 45 08	 mov	 eax, DWORD PTR _rFile$[ebp]
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _rFile$[ebp]
  00026	ff 50 04	 call	 DWORD PTR [eax+4]
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2424 :         c_iterator() BOOST_NOEXCEPT : node_() {}

  00029	83 65 f8 00	 and	 DWORD PTR _cit$[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 193  :       iterator begin() BOOST_NOEXCEPT { return iterator(table_.begin()); }

  0002d	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00030	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  00033	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00036	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0003a	74 22		 je	 SHORT $LN17@WriteCrypt

; 3026 :           return buckets_ + static_cast<std::ptrdiff_t>(bucket_index);

  0003c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00042	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00048	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004b	89 45 d8	 mov	 DWORD PTR $T9[ebp], eax

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0004e	8b 45 b8	 mov	 eax, DWORD PTR $T1[ebp]
  00051	89 45 f0	 mov	 DWORD PTR $T12[ebp], eax

; 2964 :           return static_cast<node_pointer>(n->next_);

  00054	8b 45 d8	 mov	 eax, DWORD PTR $T9[ebp]
  00057	8b 00		 mov	 eax, DWORD PTR [eax]
  00059	89 45 f0	 mov	 DWORD PTR $T12[ebp], eax

; 3041 :           return size_ ? next_node(get_previous_start()) : node_pointer();

  0005c	eb 04		 jmp	 SHORT $LN15@WriteCrypt
$LN17@WriteCrypt:
  0005e	83 65 f0 00	 and	 DWORD PTR $T12[ebp], 0
$LN15@WriteCrypt:

; 2371 :           : node_(static_cast<node_pointer>(x))

  00062	8b 45 f0	 mov	 eax, DWORD PTR $T12[ebp]
  00065	89 45 d4	 mov	 DWORD PTR $T8[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 193  :       iterator begin() BOOST_NOEXCEPT { return iterator(table_.begin()); }

  00068	8d 45 d4	 lea	 eax, DWORD PTR $T8[ebp]
  0006b	89 45 d0	 mov	 DWORD PTR $T7[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  0006e	8b 45 d0	 mov	 eax, DWORD PTR $T7[ebp]
  00071	8b 00		 mov	 eax, DWORD PTR [eax]
  00073	89 45 cc	 mov	 DWORD PTR $T6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 294  : 	for( cit = m_mapHybridCryptKey.begin(); cit != m_mapHybridCryptKey.end(); ++cit )

  00076	8b 45 cc	 mov	 eax, DWORD PTR $T6[ebp]
  00079	89 45 f8	 mov	 DWORD PTR _cit$[ebp], eax
  0007c	eb 08		 jmp	 SHORT $LN4@WriteCrypt
$LN2@WriteCrypt:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2439 :           node_ = static_cast<node_pointer>(node_->next_);

  0007e	8b 45 f8	 mov	 eax, DWORD PTR _cit$[ebp]
  00081	8b 00		 mov	 eax, DWORD PTR [eax]
  00083	89 45 f8	 mov	 DWORD PTR _cit$[ebp], eax
$LN4@WriteCrypt:

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00086	83 65 c8 00	 and	 DWORD PTR $T5[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 200  :       iterator end() BOOST_NOEXCEPT { return iterator(); }

  0008a	8d 45 c8	 lea	 eax, DWORD PTR $T5[ebp]
  0008d	89 45 c4	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  00090	8b 45 c4	 mov	 eax, DWORD PTR $T4[ebp]
  00093	8b 00		 mov	 eax, DWORD PTR [eax]
  00095	89 45 c0	 mov	 DWORD PTR $T3[ebp], eax

; 2459 :           return x.node_ != y.node_;

  00098	8b 45 f8	 mov	 eax, DWORD PTR _cit$[ebp]
  0009b	3b 45 c0	 cmp	 eax, DWORD PTR $T3[ebp]
  0009e	74 09		 je	 SHORT $LN46@WriteCrypt
  000a0	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
  000a7	eb 04		 jmp	 SHORT $LN47@WriteCrypt
$LN46@WriteCrypt:
  000a9	83 65 e8 00	 and	 DWORD PTR tv74[ebp], 0
$LN47@WriteCrypt:
  000ad	8a 45 e8	 mov	 al, BYTE PTR tv74[ebp]
  000b0	88 45 ff	 mov	 BYTE PTR $T13[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 294  : 	for( cit = m_mapHybridCryptKey.begin(); cit != m_mapHybridCryptKey.end(); ++cit )

  000b3	0f b6 45 ff	 movzx	 eax, BYTE PTR $T13[ebp]
  000b7	85 c0		 test	 eax, eax
  000b9	74 4c		 je	 SHORT $LN1@WriteCrypt

; 295  : 	{
; 296  : 		DWORD extNamehash = cit->first;

  000bb	8b 45 f8	 mov	 eax, DWORD PTR _cit$[ebp]
  000be	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c1	89 45 bc	 mov	 DWORD PTR _extNamehash$2[ebp], eax

; 297  : 		const TCSHybridCryptKey& CryptKey = cit->second;

  000c4	8b 45 f8	 mov	 eax, DWORD PTR _cit$[ebp]
  000c7	83 c0 0c	 add	 eax, 12			; 0000000cH
  000ca	89 45 e4	 mov	 DWORD PTR _CryptKey$11[ebp], eax

; 298  : 
; 299  : 		rFile.Write( &extNamehash, sizeof(DWORD) );

  000cd	6a 04		 push	 4
  000cf	8d 45 bc	 lea	 eax, DWORD PTR _extNamehash$2[ebp]
  000d2	50		 push	 eax
  000d3	8b 45 08	 mov	 eax, DWORD PTR _rFile$[ebp]
  000d6	8b 00		 mov	 eax, DWORD PTR [eax]
  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _rFile$[ebp]
  000db	ff 50 04	 call	 DWORD PTR [eax+4]

; 300  : 		rFile.Write( CryptKey.uEncryptKey.key, sizeof(TEncryptKey) );

  000de	6a 10		 push	 16			; 00000010H
  000e0	ff 75 e4	 push	 DWORD PTR _CryptKey$11[ebp]
  000e3	8b 45 08	 mov	 eax, DWORD PTR _rFile$[ebp]
  000e6	8b 00		 mov	 eax, DWORD PTR [eax]
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR _rFile$[ebp]
  000eb	ff 50 04	 call	 DWORD PTR [eax+4]

; 301  : 		rFile.Write( CryptKey.uEncryptIV.iv, sizeof(TEncryptIV) );

  000ee	6a 10		 push	 16			; 00000010H
  000f0	8b 45 e4	 mov	 eax, DWORD PTR _CryptKey$11[ebp]
  000f3	83 c0 10	 add	 eax, 16			; 00000010H
  000f6	50		 push	 eax
  000f7	8b 45 08	 mov	 eax, DWORD PTR _rFile$[ebp]
  000fa	8b 00		 mov	 eax, DWORD PTR [eax]
  000fc	8b 4d 08	 mov	 ecx, DWORD PTR _rFile$[ebp]
  000ff	ff 50 04	 call	 DWORD PTR [eax+4]

; 302  : 	}

  00102	e9 77 ff ff ff	 jmp	 $LN2@WriteCrypt
$LN1@WriteCrypt:

; 303  : }

  00107	c9		 leave
  00108	c2 04 00	 ret	 4
?WriteCryptKeyToFile@EterPackPolicy_CSHybridCrypt@@QAEXAAVCFileBase@@@Z ENDP ; EterPackPolicy_CSHybridCrypt::WriteCryptKeyToFile
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
tv68 = -1						; size = 1
?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ PROC ; EterPackPolicy_CSHybridCrypt::IsContainingSDBFile, COMDAT
; _this$ = ecx

; 432  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 215  :       size_type size() const BOOST_NOEXCEPT { return table_.size_; }

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0000f	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 433  : 	return m_mapSDBMap.size() > 0 ? true : false;

  00012	83 7d f4 00	 cmp	 DWORD PTR $T1[ebp], 0
  00016	76 06		 jbe	 SHORT $LN3@IsContaini
  00018	c6 45 ff 01	 mov	 BYTE PTR tv68[ebp], 1
  0001c	eb 04		 jmp	 SHORT $LN4@IsContaini
$LN3@IsContaini:
  0001e	c6 45 ff 00	 mov	 BYTE PTR tv68[ebp], 0
$LN4@IsContaini:
  00022	8a 45 ff	 mov	 al, BYTE PTR tv68[ebp]

; 434  : }

  00025	c9		 leave
  00026	c3		 ret	 0
?IsContainingSDBFile@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ENDP ; EterPackPolicy_CSHybridCrypt::IsContainingSDBFile
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z
_TEXT	SEGMENT
$T2 = -104						; size = 4
$T3 = -100						; size = 4
__My_data$4 = -96					; size = 4
$T5 = -92						; size = 4
$T6 = -88						; size = 4
$T7 = -84						; size = 4
$T8 = -80						; size = 4
_x$ = -76						; size = 4
_this$ = -72						; size = 4
_dwFileNameHash$ = -68					; size = 4
_vecSDB$ = -64						; size = 4
__My_data$9 = -60					; size = 4
_cit$ = -56						; size = 4
tv79 = -52						; size = 4
$T10 = -45						; size = 1
$T11 = -44						; size = 1
$T12 = -43						; size = 1
$T13 = -42						; size = 1
$T14 = -41						; size = 1
_fileNamelower$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rfilename$ = 8						; size = 4
_pSDB$ = 12						; size = 4
_iSDBSize$ = 16						; size = 4
?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z PROC ; EterPackPolicy_CSHybridCrypt::GetSupplementaryDataBlock, COMDAT
; _this$ = ecx

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d b8	 mov	 DWORD PTR _this$[ebp], ecx

; 397  : #ifdef __THEMIDA__
; 398  : 	VM_START
; 399  : #endif
; 400  : 
; 401  : 	std::string fileNamelower = rfilename;

  0002b	ff 75 08	 push	 DWORD PTR _rfilename$[ebp]
  0002e	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00031	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00036	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 402  : 	stl_lowers( fileNamelower );

  0003a	8d 45 d8	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
  00043	59		 pop	 ecx

; 403  : 
; 404  : 	DWORD dwFileNameHash  = stringhash().GetHash(fileNamelower);

  00044	8d 45 d8	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  00047	50		 push	 eax
  00048	8d 4d d3	 lea	 ecx, DWORD PTR $T10[ebp]
  0004b	e8 00 00 00 00	 call	 ?GetHash@stringhash@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stringhash::GetHash
  00050	89 45 bc	 mov	 DWORD PTR _dwFileNameHash$[ebp], eax

; 405  : 	TSupplementaryDataBlockMap::const_iterator cit = m_mapSDBMap.find( dwFileNameHash );

  00053	8d 45 bc	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  00056	50		 push	 eax
  00057	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  0005a	50		 push	 eax
  0005b	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	83 c1 18	 add	 ecx, 24			; 00000018H
  00061	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::find
  00066	89 45 b4	 mov	 DWORD PTR _x$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  00069	8b 45 b4	 mov	 eax, DWORD PTR _x$[ebp]
  0006c	8b 00		 mov	 eax, DWORD PTR [eax]
  0006e	89 45 c8	 mov	 DWORD PTR _cit$[ebp], eax

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00071	83 65 b0 00	 and	 DWORD PTR $T8[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 200  :       iterator end() BOOST_NOEXCEPT { return iterator(); }

  00075	8d 45 b0	 lea	 eax, DWORD PTR $T8[ebp]
  00078	89 45 ac	 mov	 DWORD PTR $T7[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  0007b	8b 45 ac	 mov	 eax, DWORD PTR $T7[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 45 a8	 mov	 DWORD PTR $T6[ebp], eax

; 2453 :           return x.node_ == y.node_;

  00083	8b 45 c8	 mov	 eax, DWORD PTR _cit$[ebp]
  00086	3b 45 a8	 cmp	 eax, DWORD PTR $T6[ebp]
  00089	75 09		 jne	 SHORT $LN53@GetSupplem
  0008b	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  00092	eb 04		 jmp	 SHORT $LN54@GetSupplem
$LN53@GetSupplem:
  00094	83 65 cc 00	 and	 DWORD PTR tv79[ebp], 0
$LN54@GetSupplem:
  00098	8a 45 cc	 mov	 al, BYTE PTR tv79[ebp]
  0009b	88 45 d7	 mov	 BYTE PTR $T14[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 407  : 	if( cit == m_mapSDBMap.end() )

  0009e	0f b6 45 d7	 movzx	 eax, BYTE PTR $T14[ebp]
  000a2	85 c0		 test	 eax, eax
  000a4	74 15		 je	 SHORT $LN68@GetSupplem

; 410  : 		return false;

  000a6	c6 45 d6 00	 mov	 BYTE PTR $T13[ebp], 0
  000aa	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  000ae	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  000b1	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 410  : 		return false;

  000b6	8a 45 d6	 mov	 al, BYTE PTR $T13[ebp]
  000b9	eb 76		 jmp	 SHORT $LN1@GetSupplem
$LN68@GetSupplem:

; 411  : 	}
; 412  : 
; 413  : 	const std::vector<BYTE>& vecSDB = cit->second.vecStream;

  000bb	8b 45 c8	 mov	 eax, DWORD PTR _cit$[ebp]
  000be	83 c0 24	 add	 eax, 36			; 00000024H
  000c1	89 45 c0	 mov	 DWORD PTR _vecSDB$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  000c4	8b 45 c0	 mov	 eax, DWORD PTR _vecSDB$[ebp]
  000c7	89 45 c4	 mov	 DWORD PTR __My_data$9[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000ca	8b 45 c4	 mov	 eax, DWORD PTR __My_data$9[ebp]
  000cd	8b 4d c4	 mov	 ecx, DWORD PTR __My_data$9[ebp]
  000d0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d3	2b 01		 sub	 eax, DWORD PTR [ecx]
  000d5	89 45 a4	 mov	 DWORD PTR $T5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 415  : 	iSDBSize = vecSDB.size();

  000d8	8b 45 10	 mov	 eax, DWORD PTR _iSDBSize$[ebp]
  000db	8b 4d a4	 mov	 ecx, DWORD PTR $T5[ebp]
  000de	89 08		 mov	 DWORD PTR [eax], ecx

; 416  : 
; 417  : 	if(iSDBSize <= 0)

  000e0	8b 45 10	 mov	 eax, DWORD PTR _iSDBSize$[ebp]
  000e3	83 38 00	 cmp	 DWORD PTR [eax], 0
  000e6	7f 1b		 jg	 SHORT $LN3@GetSupplem

; 418  : 	{
; 419  : 		pSDB = NULL;

  000e8	8b 45 0c	 mov	 eax, DWORD PTR _pSDB$[ebp]
  000eb	83 20 00	 and	 DWORD PTR [eax], 0

; 420  : 		return false;

  000ee	c6 45 d5 00	 mov	 BYTE PTR $T12[ebp], 0
  000f2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  000f6	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  000f9	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 420  : 		return false;

  000fe	8a 45 d5	 mov	 al, BYTE PTR $T12[ebp]
  00101	eb 2e		 jmp	 SHORT $LN1@GetSupplem
$LN3@GetSupplem:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1508 :         auto& _My_data = _Mypair._Myval2;

  00103	8b 45 c0	 mov	 eax, DWORD PTR _vecSDB$[ebp]
  00106	89 45 a0	 mov	 DWORD PTR __My_data$4[ebp], eax

; 1509 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1510 :         _STL_VERIFY(
; 1511 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1512 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1513 : 
; 1514 :         return _My_data._Myfirst[_Pos];

  00109	33 c0		 xor	 eax, eax
  0010b	c1 e0 00	 shl	 eax, 0
  0010e	8b 4d a0	 mov	 ecx, DWORD PTR __My_data$4[ebp]
  00111	03 01		 add	 eax, DWORD PTR [ecx]
  00113	89 45 9c	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 423  : 	pSDB = (BYTE*)&vecSDB[0]; 

  00116	8b 45 0c	 mov	 eax, DWORD PTR _pSDB$[ebp]
  00119	8b 4d 9c	 mov	 ecx, DWORD PTR $T3[ebp]
  0011c	89 08		 mov	 DWORD PTR [eax], ecx

; 428  : 	return true;

  0011e	c6 45 d4 01	 mov	 BYTE PTR $T11[ebp], 1
  00122	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00126	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00129	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 428  : 	return true;

  0012e	8a 45 d4	 mov	 al, BYTE PTR $T11[ebp]
$LN1@GetSupplem:

; 429  : }

  00131	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00134	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013b	59		 pop	 ecx
  0013c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013f	33 cd		 xor	 ecx, ebp
  00141	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00146	c9		 leave
  00147	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAPAEAAH@Z ENDP ; EterPackPolicy_CSHybridCrypt::GetSupplementaryDataBlock
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z
_TEXT	SEGMENT
$T2 = -52						; size = 4
$T3 = -48						; size = 4
__My_data$4 = -44					; size = 4
$T5 = -40						; size = 1
$T6 = -36						; size = 4
$T7 = -32						; size = 4
_cit$ = -28						; size = 4
$T8 = -24						; size = 4
$T9 = -20						; size = 4
_x$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_sdbVector$ = 0						; size = 4
_strRelatedMapName$ = 4					; size = 4
tv79 = 8						; size = 4
$T10 = 14						; size = 1
$T11 = 15						; size = 1
_this$ = 16						; size = 4
_dwFileNameHash$ = 20					; size = 4
_iSDBSize$12 = 24					; size = 4
$T13 = 28						; size = 1
$T14 = 29						; size = 1
$T15 = 30						; size = 1
$T16 = 31						; size = 1
_info$ = 32						; size = 36
_fileNamelower$ = 68					; size = 24
__$ArrayPad$ = 92					; size = 4
_rfilename$ = 104					; size = 4
_strMapName$ = 108					; size = 4
_pSrcData$ = 112					; size = 4
_iSrcLen$ = 116						; size = 4
_pDestData$ = 120					; size = 4
_iDestLen$ = 124					; size = 4
?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z PROC ; EterPackPolicy_CSHybridCrypt::GenerateSupplementaryDataBlock, COMDAT
; _this$ = ecx

; 338  : {

  00000	55		 push	 ebp
  00001	8d 6c 24 a0	 lea	 ebp, DWORD PTR [esp-96]
  00005	83 ec 60	 sub	 esp, 96			; 00000060H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	83 ec 28	 sub	 esp, 40			; 00000028H
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 5c	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 4d 10	 mov	 DWORD PTR _this$[ebp], ecx

; 339  : #ifdef __THEMIDA__
; 340  : 	VM_START
; 341  : #endif
; 342  : 
; 343  : 	std::string fileNamelower = rfilename;

  00030	ff 75 68	 push	 DWORD PTR _rfilename$[ebp]
  00033	8d 4d 44	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00036	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 344  : 	stl_lowers( fileNamelower );

  0003f	8d 45 44	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
  00048	59		 pop	 ecx

; 345  : 
; 346  : 	DWORD dwFileNameHash  = stringhash().GetHash(fileNamelower);

  00049	8d 45 44	 lea	 eax, DWORD PTR _fileNamelower$[ebp]
  0004c	50		 push	 eax
  0004d	8d 4d 0f	 lea	 ecx, DWORD PTR $T11[ebp]
  00050	e8 00 00 00 00	 call	 ?GetHash@stringhash@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stringhash::GetHash
  00055	89 45 14	 mov	 DWORD PTR _dwFileNameHash$[ebp], eax

; 347  : 	TSupplementaryDataBlockMap::const_iterator cit = m_mapSDBMap.find( dwFileNameHash );

  00058	8d 45 14	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  0005b	50		 push	 eax
  0005c	8d 45 cc	 lea	 eax, DWORD PTR $T2[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 10	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	83 c1 18	 add	 ecx, 24			; 00000018H
  00066	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::find
  0006b	89 45 f0	 mov	 DWORD PTR _x$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  0006e	8b 45 f0	 mov	 eax, DWORD PTR _x$[ebp]
  00071	8b 00		 mov	 eax, DWORD PTR [eax]
  00073	89 45 e4	 mov	 DWORD PTR _cit$[ebp], eax

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00076	83 65 ec 00	 and	 DWORD PTR $T9[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 200  :       iterator end() BOOST_NOEXCEPT { return iterator(); }

  0007a	8d 45 ec	 lea	 eax, DWORD PTR $T9[ebp]
  0007d	89 45 e8	 mov	 DWORD PTR $T8[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  00080	8b 45 e8	 mov	 eax, DWORD PTR $T8[ebp]
  00083	8b 00		 mov	 eax, DWORD PTR [eax]
  00085	89 45 e0	 mov	 DWORD PTR $T7[ebp], eax

; 2459 :           return x.node_ != y.node_;

  00088	8b 45 e4	 mov	 eax, DWORD PTR _cit$[ebp]
  0008b	3b 45 e0	 cmp	 eax, DWORD PTR $T7[ebp]
  0008e	74 09		 je	 SHORT $LN55@GenerateSu
  00090	c7 45 08 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  00097	eb 04		 jmp	 SHORT $LN56@GenerateSu
$LN55@GenerateSu:
  00099	83 65 08 00	 and	 DWORD PTR tv79[ebp], 0
$LN56@GenerateSu:
  0009d	8a 45 08	 mov	 al, BYTE PTR tv79[ebp]
  000a0	88 45 1f	 mov	 BYTE PTR $T16[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 349  : 	if( cit != m_mapSDBMap.end() )

  000a3	0f b6 45 1f	 movzx	 eax, BYTE PTR $T16[ebp]
  000a7	85 c0		 test	 eax, eax
  000a9	74 18		 je	 SHORT $LN2@GenerateSu

; 352  : 		return false;

  000ab	c6 45 1e 00	 mov	 BYTE PTR $T15[ebp], 0
  000af	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  000b3	8d 4d 44	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  000b6	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 352  : 		return false;

  000bb	8a 45 1e	 mov	 al, BYTE PTR $T15[ebp]
  000be	e9 32 01 00 00	 jmp	 $LN1@GenerateSu
$LN2@GenerateSu:

; 353  : 	}
; 354  : 
; 355  : 	//TODO : Find Better Method for deciding SDB Postion & Size
; 356  : 
; 357  : 	//prevent stream copy duplication
; 358  : 	TSupplementaryDataBlockInfo info;

  000c3	8d 4d 20	 lea	 ecx, DWORD PTR _info$[ebp]
  000c6	e8 00 00 00 00	 call	 ??0SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
  000cb	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 359  : 	m_mapSDBMap[dwFileNameHash] = info;

  000cf	8d 45 20	 lea	 eax, DWORD PTR _info$[ebp]
  000d2	50		 push	 eax
  000d3	8d 45 14	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d 10	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	83 c1 18	 add	 ecx, 24			; 00000018H
  000dd	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]
  000e2	8b c8		 mov	 ecx, eax
  000e4	e8 00 00 00 00	 call	 ??4SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAEAAU01@ABU01@@Z

; 360  : 
; 361  : 	std::string& strRelatedMapName = m_mapSDBMap[dwFileNameHash].strRelatedMapName;

  000e9	8d 45 14	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  000ec	50		 push	 eax
  000ed	8b 4d 10	 mov	 ecx, DWORD PTR _this$[ebp]
  000f0	83 c1 18	 add	 ecx, 24			; 00000018H
  000f3	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]
  000f8	89 45 04	 mov	 DWORD PTR _strRelatedMapName$[ebp], eax

; 362  : 	std::vector<BYTE>& sdbVector   = m_mapSDBMap[dwFileNameHash].vecStream;

  000fb	8d 45 14	 lea	 eax, DWORD PTR _dwFileNameHash$[ebp]
  000fe	50		 push	 eax
  000ff	8b 4d 10	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	83 c1 18	 add	 ecx, 24			; 00000018H
  00105	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::operator[]
  0010a	83 c0 18	 add	 eax, 24			; 00000018H
  0010d	89 45 00	 mov	 DWORD PTR _sdbVector$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00110	8b 45 6c	 mov	 eax, DWORD PTR _strMapName$[ebp]
  00113	89 45 dc	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2863 :         if (this != _STD addressof(_Right)) {

  00116	8b 45 04	 mov	 eax, DWORD PTR _strRelatedMapName$[ebp]
  00119	3b 45 dc	 cmp	 eax, DWORD PTR $T6[ebp]
  0011c	74 13		 je	 SHORT $LN121@GenerateSu

; 2864 :             _Copy_assign(_Right, _Choose_pocca<_Alty>{});

  0011e	33 c0		 xor	 eax, eax
  00120	88 45 d8	 mov	 BYTE PTR $T5[ebp], al
  00123	ff 75 d8	 push	 DWORD PTR $T5[ebp]
  00126	ff 75 6c	 push	 DWORD PTR _strMapName$[ebp]
  00129	8b 4d 04	 mov	 ecx, DWORD PTR _strRelatedMapName$[ebp]
  0012c	e8 00 00 00 00	 call	 ?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_assign
$LN121@GenerateSu:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 369  : 		int iSDBSize = random_range( 64, 128 );

  00131	68 80 00 00 00	 push	 128			; 00000080H
  00136	6a 40		 push	 64			; 00000040H
  00138	e8 00 00 00 00	 call	 ?random_range@@YAJJJ@Z	; random_range
  0013d	59		 pop	 ecx
  0013e	59		 pop	 ecx
  0013f	89 45 18	 mov	 DWORD PTR _iSDBSize$12[ebp], eax

; 370  : 
; 371  : 		if( iSrcLen < iSDBSize )

  00142	8b 45 74	 mov	 eax, DWORD PTR _iSrcLen$[ebp]
  00145	3b 45 18	 cmp	 eax, DWORD PTR _iSDBSize$12[ebp]
  00148	7d 36		 jge	 SHORT $LN3@GenerateSu

; 372  : 		{
; 373  : 			iSDBSize = iSrcLen - 1;

  0014a	8b 45 74	 mov	 eax, DWORD PTR _iSrcLen$[ebp]
  0014d	48		 dec	 eax
  0014e	89 45 18	 mov	 DWORD PTR _iSDBSize$12[ebp], eax

; 374  : 			if( iSDBSize <= 0 )

  00151	83 7d 18 00	 cmp	 DWORD PTR _iSDBSize$12[ebp], 0
  00155	7f 29		 jg	 SHORT $LN3@GenerateSu

; 377  : 				return false;

  00157	c6 45 1d 00	 mov	 BYTE PTR $T14[ebp], 0
  0015b	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0015f	8d 4d 38	 lea	 ecx, DWORD PTR _info$[ebp+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  00162	e8 00 00 00 00	 call	 ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
  00167	8d 4d 20	 lea	 ecx, DWORD PTR _info$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0016a	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 377  : 				return false;

  0016f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00173	8d 4d 44	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00176	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 377  : 				return false;

  0017b	8a 45 1d	 mov	 al, BYTE PTR $T14[ebp]
  0017e	eb 75		 jmp	 SHORT $LN1@GenerateSu
$LN3@GenerateSu:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1242 :         _Resize(_Newsize, _Value_init_tag{});

  00180	8d 45 0e	 lea	 eax, DWORD PTR $T10[ebp]
  00183	50		 push	 eax
  00184	ff 75 18	 push	 DWORD PTR _iSDBSize$12[ebp]
  00187	8b 4d 00	 mov	 ecx, DWORD PTR _sdbVector$[ebp]
  0018a	e8 00 00 00 00	 call	 ??$_Resize@U_Value_init_tag@std@@@?$vector@EV?$allocator@E@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Resize<std::_Value_init_tag>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 383  : 		iDestLen  = iSrcLen - iSDBSize;

  0018f	8b 45 74	 mov	 eax, DWORD PTR _iSrcLen$[ebp]
  00192	2b 45 18	 sub	 eax, DWORD PTR _iSDBSize$12[ebp]
  00195	8b 4d 7c	 mov	 ecx, DWORD PTR _iDestLen$[ebp]
  00198	89 01		 mov	 DWORD PTR [ecx], eax

; 384  : 		pDestData = (LPBYTE)pSrcData;

  0019a	8b 45 78	 mov	 eax, DWORD PTR _pDestData$[ebp]
  0019d	8b 4d 70	 mov	 ecx, DWORD PTR _pSrcData$[ebp]
  001a0	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  001a2	8b 45 00	 mov	 eax, DWORD PTR _sdbVector$[ebp]
  001a5	89 45 d4	 mov	 DWORD PTR __My_data$4[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  001a8	33 c0		 xor	 eax, eax
  001aa	c1 e0 00	 shl	 eax, 0
  001ad	8b 4d d4	 mov	 ecx, DWORD PTR __My_data$4[ebp]
  001b0	03 01		 add	 eax, DWORD PTR [ecx]
  001b2	89 45 d0	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 386  : 		memcpy( &sdbVector[0], pDestData + iDestLen, iSDBSize );

  001b5	ff 75 18	 push	 DWORD PTR _iSDBSize$12[ebp]
  001b8	8b 45 78	 mov	 eax, DWORD PTR _pDestData$[ebp]
  001bb	8b 00		 mov	 eax, DWORD PTR [eax]
  001bd	8b 4d 7c	 mov	 ecx, DWORD PTR _iDestLen$[ebp]
  001c0	03 01		 add	 eax, DWORD PTR [ecx]
  001c2	50		 push	 eax
  001c3	ff 75 d0	 push	 DWORD PTR $T3[ebp]
  001c6	e8 00 00 00 00	 call	 _memcpy
  001cb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 391  : 	return true;

  001ce	c6 45 1c 01	 mov	 BYTE PTR $T13[ebp], 1
  001d2	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001d6	8d 4d 38	 lea	 ecx, DWORD PTR _info$[ebp+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  001d9	e8 00 00 00 00	 call	 ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
  001de	8d 4d 20	 lea	 ecx, DWORD PTR _info$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  001e1	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 391  : 	return true;

  001e6	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  001ea	8d 4d 44	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  001ed	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 391  : 	return true;

  001f2	8a 45 1c	 mov	 al, BYTE PTR $T13[ebp]
$LN1@GenerateSu:

; 392  : }

  001f5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ff	59		 pop	 ecx
  00200	8b 4d 5c	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00203	33 cd		 xor	 ecx, ebp
  00205	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0020a	83 c5 60	 add	 ebp, 96			; 00000060H
  0020d	c9		 leave
  0020e	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z$0:
  00000	8d 4d 44	 lea	 ecx, DWORD PTR _fileNamelower$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z$1:
  00008	8d 4d 20	 lea	 ecx, DWORD PTR _info$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1SSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a 68	 mov	 ecx, DWORD PTR [edx+104]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GenerateSupplementaryDataBlock@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABV23@PBEHAAPAEAAH@Z ENDP ; EterPackPolicy_CSHybridCrypt::GenerateSupplementaryDataBlock
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
_this$ = -8						; size = 4
tv68 = -1						; size = 1
?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ PROC ; EterPackPolicy_CSHybridCrypt::IsContainingCryptKey, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 215  :       size_type size() const BOOST_NOEXCEPT { return table_.size_; }

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000f	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 63   : 	return (m_mapHybridCryptKey.size() > 0) ? true : false;

  00012	83 7d f4 00	 cmp	 DWORD PTR $T1[ebp], 0
  00016	76 06		 jbe	 SHORT $LN3@IsContaini
  00018	c6 45 ff 01	 mov	 BYTE PTR tv68[ebp], 1
  0001c	eb 04		 jmp	 SHORT $LN4@IsContaini
$LN3@IsContaini:
  0001e	c6 45 ff 00	 mov	 BYTE PTR tv68[ebp], 0
$LN4@IsContaini:
  00022	8a 45 ff	 mov	 al, BYTE PTR tv68[ebp]

; 64   : }

  00025	c9		 leave
  00026	c3		 ret	 0
?IsContainingCryptKey@EterPackPolicy_CSHybridCrypt@@QBE_NXZ ENDP ; EterPackPolicy_CSHybridCrypt::IsContainingCryptKey
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\lzo.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
_TEXT	SEGMENT
_Decryptor$2 = -4936					; size = 96
$T3 = -4836						; size = 4
_this$ = -4832						; size = 4
_this$ = -4828						; size = 4
$T4 = -4824						; size = 4
$T5 = -4820						; size = 4
$T6 = -4816						; size = 4
$T7 = -4812						; size = 4
$T8 = -4808						; size = 4
$T9 = -4804						; size = 4
$T10 = -4800						; size = 4
$T11 = -4796						; size = 4
$T12 = -4792						; size = 4
tv221 = -4788						; size = 4
tv273 = -4784						; size = 4
$T13 = -4780						; size = 4
tv280 = -4776						; size = 4
tv214 = -4772						; size = 4
tv162 = -4768						; size = 4
$T14 = -4764						; size = 4
tv155 = -4760						; size = 4
_eAlgorithm$ = -4756					; size = 4
$T15 = -4752						; size = 4
$T16 = -4748						; size = 4
$T17 = -4744						; size = 4
$T18 = -4738						; size = 1
$T19 = -4737						; size = 1
_Decryptor$20 = -4736					; size = 4368
_Decryptor$21 = -368					; size = 120
$T22 = -244						; size = 56
$T23 = -188						; size = 56
$T24 = -132						; size = 56
_iv$ = -76						; size = 16
_key$ = -60						; size = 16
_strDecipher$ = -44					; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_rfilename$ = 8						; size = 4
_pEncryptedData$ = 12					; size = 4
_iEncryptedLen$ = 16					; size = 4
_zObj$ = 20						; size = 4
?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z PROC ; EterPackPolicy_CSHybridCrypt::DecryptMemory, COMDAT
; _this$ = ecx

; 218  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	83 e4 f8	 and	 esp, -8			; fffffff8H
  00008	83 c4 04	 add	 esp, 4
  0000b	55		 push	 ebp
  0000c	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  0000f	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00013	8b ec		 mov	 ebp, esp
  00015	6a ff		 push	 -1
  00017	68 00 00 00 00	 push	 __ehhandler$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
  0001c	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00022	50		 push	 eax
  00023	53		 push	 ebx
  00024	b8 38 13 00 00	 mov	 eax, 4920		; 00001338H
  00029	e8 00 00 00 00	 call	 __chkstk
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 8d 20 ed ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 219  : #ifdef __THEMIDA__
; 220  : 	VM_START
; 221  : #endif
; 222  : 
; 223  : 	eHybridCipherAlgorithm eAlgorithm;
; 224  : 	TEncryptKey			   key;
; 225  : 	TEncryptIV			   iv;
; 226  : 
; 227  : 	if( !GetPerFileCryptKey( rfilename, eAlgorithm, key, iv ) )

  00048	8d 45 b4	 lea	 eax, DWORD PTR _iv$[ebp]
  0004b	50		 push	 eax
  0004c	8d 45 c4	 lea	 eax, DWORD PTR _key$[ebp]
  0004f	50		 push	 eax
  00050	8d 85 6c ed ff
	ff		 lea	 eax, DWORD PTR _eAlgorithm$[ebp]
  00056	50		 push	 eax
  00057	ff 73 08	 push	 DWORD PTR _rfilename$[ebx]
  0005a	8b 8d 20 ed ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z ; EterPackPolicy_CSHybridCrypt::GetPerFileCryptKey
  00065	0f b6 c0	 movzx	 eax, al
  00068	85 c0		 test	 eax, eax
  0006a	75 07		 jne	 SHORT $LN2@DecryptMem

; 228  : 	{
; 229  : 		return false;

  0006c	32 c0		 xor	 al, al
  0006e	e9 68 04 00 00	 jmp	 $LN1@DecryptMem
$LN2@DecryptMem:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2365 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00073	8d 45 d4	 lea	 eax, DWORD PTR _strDecipher$[ebp]
  00076	89 85 24 ed ff
	ff		 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0007c	8b 8d 24 ed ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00082	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2367 :         _Tidy_init();

  00087	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  0008a	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 233  : 	std::string strDecipher;

  0008f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 234  : 	//NOTE : ciphered stream size could be different from original size if you choose diffrent cipher mode & algorithm
; 235  : 	//( i.e ECB or CBC mode )
; 236  : 	strDecipher.reserve(iEncryptedLen);

  00093	ff 73 10	 push	 DWORD PTR _iEncryptedLen$[ebx]
  00096	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  00099	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 237  : 
; 238  : 	if( eAlgorithm == e_Cipher_Camellia )

  0009e	83 bd 6c ed ff
	ff 00		 cmp	 DWORD PTR _eAlgorithm$[ebp], 0
  000a5	0f 85 35 01 00
	00		 jne	 $LN3@DecryptMem

; 239  : 	{
; 240  : 		// Decryptor
; 241  : 		CIPHER_MODE<Camellia>::Decryption Decryptor;

  000ab	8d 8d b8 ec ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$2[ebp]
  000b1	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
  000b6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 242  : 		Decryptor.SetKeyWithIV(key.keyCamellia, sizeof(key.keyCamellia), iv.ivCamellia, sizeof(iv.ivCamellia));

  000ba	6a 10		 push	 16			; 00000010H
  000bc	8d 45 b4	 lea	 eax, DWORD PTR _iv$[ebp]
  000bf	50		 push	 eax
  000c0	6a 10		 push	 16			; 00000010H
  000c2	8d 45 c4	 lea	 eax, DWORD PTR _key$[ebp]
  000c5	50		 push	 eax
  000c6	8d 8d b8 ec ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$2[ebp]
  000cc	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 244  : 		ArraySource(pEncryptedData, iEncryptedLen, true,

  000d1	6a 60		 push	 96			; 00000060H
  000d3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d8	59		 pop	 ecx
  000d9	89 85 64 ed ff
	ff		 mov	 DWORD PTR $T14[ebp], eax
  000df	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000e3	83 bd 64 ed ff
	ff 00		 cmp	 DWORD PTR $T14[ebp], 0
  000ea	0f 84 96 00 00
	00		 je	 $LN12@DecryptMem
  000f0	6a 10		 push	 16			; 00000010H
  000f2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f7	59		 pop	 ecx
  000f8	89 85 78 ed ff
	ff		 mov	 DWORD PTR $T17[ebp], eax
  000fe	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00102	83 bd 78 ed ff
	ff 00		 cmp	 DWORD PTR $T17[ebp], 0
  00109	74 40		 je	 SHORT $LN10@DecryptMem
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 777  : 	BufferedTransformation() : Algorithm(false) {}

  0010b	6a 00		 push	 0
  0010d	8b 8d 78 ed ff
	ff		 mov	 ecx, DWORD PTR $T17[ebp]
  00113	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 592  : 		: m_output(&output) {assert(sizeof(output[0])==1);}

  00118	8b 85 78 ed ff
	ff		 mov	 eax, DWORD PTR $T17[ebp]
  0011e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  00124	8b 85 78 ed ff
	ff		 mov	 eax, DWORD PTR $T17[ebp]
  0012a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  00131	8b 85 78 ed ff
	ff		 mov	 eax, DWORD PTR $T17[ebp]
  00137	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  0013a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 244  : 		ArraySource(pEncryptedData, iEncryptedLen, true,

  0013d	8b 85 78 ed ff
	ff		 mov	 eax, DWORD PTR $T17[ebp]
  00143	89 85 68 ed ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
  00149	eb 07		 jmp	 SHORT $LN11@DecryptMem
$LN10@DecryptMem:
  0014b	83 a5 68 ed ff
	ff 00		 and	 DWORD PTR tv155[ebp], 0
$LN11@DecryptMem:
  00152	8b 85 68 ed ff
	ff		 mov	 eax, DWORD PTR tv155[ebp]
  00158	89 85 1c ed ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0015e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00162	6a 00		 push	 0
  00164	6a 04		 push	 4
  00166	ff b5 1c ed ff
	ff		 push	 DWORD PTR $T3[ebp]
  0016c	8d 85 bc ec ff
	ff		 lea	 eax, DWORD PTR _Decryptor$2[ebp+4]
  00172	50		 push	 eax
  00173	8b 8d 64 ed ff
	ff		 mov	 ecx, DWORD PTR $T14[ebp]
  00179	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@_N@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  0017e	89 85 60 ed ff
	ff		 mov	 DWORD PTR tv162[ebp], eax
  00184	eb 07		 jmp	 SHORT $LN13@DecryptMem
$LN12@DecryptMem:
  00186	83 a5 60 ed ff
	ff 00		 and	 DWORD PTR tv162[ebp], 0
$LN13@DecryptMem:
  0018d	8b 85 60 ed ff
	ff		 mov	 eax, DWORD PTR tv162[ebp]
  00193	89 85 44 ed ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
  00199	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0019d	ff b5 44 ed ff
	ff		 push	 DWORD PTR $T11[ebp]
  001a3	6a 01		 push	 1
  001a5	ff 73 10	 push	 DWORD PTR _iEncryptedLen$[ebx]
  001a8	ff 73 0c	 push	 DWORD PTR _pEncryptedData$[ebx]
  001ab	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  001b1	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
  001b6	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp+24]
  001bc	e8 00 00 00 00	 call	 ??1BufferedTransformation@CryptoPP@@UAE@XZ
  001c1	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp+12]
  001c7	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>

; 245  : 							           new StreamTransformationFilter(Decryptor, new CryptoPP::StringSink(strDecipher)));
; 246  : 	}

  001cc	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001d0	8d 8d b8 ec ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$2[ebp]
  001d6	e8 00 00 00 00	 call	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
  001db	e9 77 02 00 00	 jmp	 $LN4@DecryptMem
$LN3@DecryptMem:

; 247  : 	else if( eAlgorithm == e_Cipher_Twofish )

  001e0	83 bd 6c ed ff
	ff 01		 cmp	 DWORD PTR _eAlgorithm$[ebp], 1
  001e7	0f 85 35 01 00
	00		 jne	 $LN5@DecryptMem

; 248  : 	{
; 249  : 		// Decryptor
; 250  : 		CIPHER_MODE<Twofish>::Decryption Decryptor;

  001ed	8d 8d 80 ed ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$20[ebp]
  001f3	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
  001f8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 251  : 		Decryptor.SetKeyWithIV(key.keyTwofish, sizeof(key.keyTwofish), iv.ivTwofish, sizeof(iv.ivTwofish));

  001fc	6a 10		 push	 16			; 00000010H
  001fe	8d 45 b4	 lea	 eax, DWORD PTR _iv$[ebp]
  00201	50		 push	 eax
  00202	6a 10		 push	 16			; 00000010H
  00204	8d 45 c4	 lea	 eax, DWORD PTR _key$[ebp]
  00207	50		 push	 eax
  00208	8d 8d 80 ed ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$20[ebp]
  0020e	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 253  : 		ArraySource(pEncryptedData, iEncryptedLen, true,

  00213	6a 60		 push	 96			; 00000060H
  00215	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0021a	59		 pop	 ecx
  0021b	89 85 48 ed ff
	ff		 mov	 DWORD PTR $T12[ebp], eax
  00221	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00225	83 bd 48 ed ff
	ff 00		 cmp	 DWORD PTR $T12[ebp], 0
  0022c	0f 84 96 00 00
	00		 je	 $LN16@DecryptMem
  00232	6a 10		 push	 16			; 00000010H
  00234	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00239	59		 pop	 ecx
  0023a	89 85 74 ed ff
	ff		 mov	 DWORD PTR $T16[ebp], eax
  00240	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00244	83 bd 74 ed ff
	ff 00		 cmp	 DWORD PTR $T16[ebp], 0
  0024b	74 40		 je	 SHORT $LN14@DecryptMem
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 777  : 	BufferedTransformation() : Algorithm(false) {}

  0024d	6a 00		 push	 0
  0024f	8b 8d 74 ed ff
	ff		 mov	 ecx, DWORD PTR $T16[ebp]
  00255	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 592  : 		: m_output(&output) {assert(sizeof(output[0])==1);}

  0025a	8b 85 74 ed ff
	ff		 mov	 eax, DWORD PTR $T16[ebp]
  00260	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  00266	8b 85 74 ed ff
	ff		 mov	 eax, DWORD PTR $T16[ebp]
  0026c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  00273	8b 85 74 ed ff
	ff		 mov	 eax, DWORD PTR $T16[ebp]
  00279	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  0027c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 253  : 		ArraySource(pEncryptedData, iEncryptedLen, true,

  0027f	8b 85 74 ed ff
	ff		 mov	 eax, DWORD PTR $T16[ebp]
  00285	89 85 5c ed ff
	ff		 mov	 DWORD PTR tv214[ebp], eax
  0028b	eb 07		 jmp	 SHORT $LN15@DecryptMem
$LN14@DecryptMem:
  0028d	83 a5 5c ed ff
	ff 00		 and	 DWORD PTR tv214[ebp], 0
$LN15@DecryptMem:
  00294	8b 85 5c ed ff
	ff		 mov	 eax, DWORD PTR tv214[ebp]
  0029a	89 85 40 ed ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
  002a0	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  002a4	6a 00		 push	 0
  002a6	6a 04		 push	 4
  002a8	ff b5 40 ed ff
	ff		 push	 DWORD PTR $T10[ebp]
  002ae	8d 85 84 ed ff
	ff		 lea	 eax, DWORD PTR _Decryptor$20[ebp+4]
  002b4	50		 push	 eax
  002b5	8b 8d 48 ed ff
	ff		 mov	 ecx, DWORD PTR $T12[ebp]
  002bb	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@_N@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  002c0	89 85 4c ed ff
	ff		 mov	 DWORD PTR tv221[ebp], eax
  002c6	eb 07		 jmp	 SHORT $LN17@DecryptMem
$LN16@DecryptMem:
  002c8	83 a5 4c ed ff
	ff 00		 and	 DWORD PTR tv221[ebp], 0
$LN17@DecryptMem:
  002cf	8b 85 4c ed ff
	ff		 mov	 eax, DWORD PTR tv221[ebp]
  002d5	89 85 3c ed ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  002db	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002df	ff b5 3c ed ff
	ff		 push	 DWORD PTR $T9[ebp]
  002e5	6a 01		 push	 1
  002e7	ff 73 10	 push	 DWORD PTR _iEncryptedLen$[ebx]
  002ea	ff 73 0c	 push	 DWORD PTR _pEncryptedData$[ebx]
  002ed	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  002f3	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
  002f8	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp+24]
  002fe	e8 00 00 00 00	 call	 ??1BufferedTransformation@CryptoPP@@UAE@XZ
  00303	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp+12]
  00309	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>

; 254  : 							           new StreamTransformationFilter(Decryptor, new CryptoPP::StringSink(strDecipher)));
; 255  : 	}

  0030e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00312	8d 8d 80 ed ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$20[ebp]
  00318	e8 00 00 00 00	 call	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
  0031d	e9 35 01 00 00	 jmp	 $LN4@DecryptMem
$LN5@DecryptMem:

; 256  : 	else if( eAlgorithm == e_Cipher_XTEA )

  00322	83 bd 6c ed ff
	ff 02		 cmp	 DWORD PTR _eAlgorithm$[ebp], 2
  00329	0f 85 28 01 00
	00		 jne	 $LN4@DecryptMem

; 257  : 	{
; 258  : 		// Decryptor
; 259  : 		CIPHER_MODE<XTEA>::Decryption Decryptor;

  0032f	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$21[ebp]
  00335	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
  0033a	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 260  : 		Decryptor.SetKeyWithIV(key.keyXTEA, sizeof(key.keyXTEA), iv.ivXTEA, sizeof(iv.ivXTEA));

  0033e	6a 08		 push	 8
  00340	8d 45 b4	 lea	 eax, DWORD PTR _iv$[ebp]
  00343	50		 push	 eax
  00344	6a 10		 push	 16			; 00000010H
  00346	8d 45 c4	 lea	 eax, DWORD PTR _key$[ebp]
  00349	50		 push	 eax
  0034a	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$21[ebp]
  00350	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 262  : 		ArraySource(pEncryptedData, iEncryptedLen, true,

  00355	6a 60		 push	 96			; 00000060H
  00357	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0035c	59		 pop	 ecx
  0035d	89 85 54 ed ff
	ff		 mov	 DWORD PTR $T13[ebp], eax
  00363	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00367	83 bd 54 ed ff
	ff 00		 cmp	 DWORD PTR $T13[ebp], 0
  0036e	0f 84 94 00 00
	00		 je	 $LN20@DecryptMem
  00374	6a 10		 push	 16			; 00000010H
  00376	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0037b	59		 pop	 ecx
  0037c	89 85 70 ed ff
	ff		 mov	 DWORD PTR $T15[ebp], eax
  00382	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00386	83 bd 70 ed ff
	ff 00		 cmp	 DWORD PTR $T15[ebp], 0
  0038d	74 3e		 je	 SHORT $LN18@DecryptMem
  0038f	8b 8d 70 ed ff
	ff		 mov	 ecx, DWORD PTR $T15[ebp]
  00395	e8 00 00 00 00	 call	 ??0BufferedTransformation@CryptoPP@@QAE@XZ ; CryptoPP::BufferedTransformation::BufferedTransformation
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 592  : 		: m_output(&output) {assert(sizeof(output[0])==1);}

  0039a	8b 85 70 ed ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  003a0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  003a6	8b 85 70 ed ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  003ac	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  003b3	8b 85 70 ed ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  003b9	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  003bc	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 262  : 		ArraySource(pEncryptedData, iEncryptedLen, true,

  003bf	8b 85 70 ed ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  003c5	89 85 50 ed ff
	ff		 mov	 DWORD PTR tv273[ebp], eax
  003cb	eb 07		 jmp	 SHORT $LN19@DecryptMem
$LN18@DecryptMem:
  003cd	83 a5 50 ed ff
	ff 00		 and	 DWORD PTR tv273[ebp], 0
$LN19@DecryptMem:
  003d4	8b 85 50 ed ff
	ff		 mov	 eax, DWORD PTR tv273[ebp]
  003da	89 85 38 ed ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  003e0	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  003e4	6a 00		 push	 0
  003e6	6a 04		 push	 4
  003e8	ff b5 38 ed ff
	ff		 push	 DWORD PTR $T8[ebp]
  003ee	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _Decryptor$21[ebp+4]
  003f4	50		 push	 eax
  003f5	8b 8d 54 ed ff
	ff		 mov	 ecx, DWORD PTR $T13[ebp]
  003fb	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@_N@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  00400	89 85 58 ed ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
  00406	eb 07		 jmp	 SHORT $LN21@DecryptMem
$LN20@DecryptMem:
  00408	83 a5 58 ed ff
	ff 00		 and	 DWORD PTR tv280[ebp], 0
$LN21@DecryptMem:
  0040f	8b 85 58 ed ff
	ff		 mov	 eax, DWORD PTR tv280[ebp]
  00415	89 85 34 ed ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  0041b	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0041f	ff b5 34 ed ff
	ff		 push	 DWORD PTR $T7[ebp]
  00425	6a 01		 push	 1
  00427	ff 73 10	 push	 DWORD PTR _iEncryptedLen$[ebx]
  0042a	ff 73 0c	 push	 DWORD PTR _pEncryptedData$[ebx]
  0042d	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T24[ebp]
  00433	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
  00438	8d 4d 94	 lea	 ecx, DWORD PTR $T24[ebp+24]
  0043b	e8 00 00 00 00	 call	 ??1BufferedTransformation@CryptoPP@@UAE@XZ
  00440	8d 4d 88	 lea	 ecx, DWORD PTR $T24[ebp+12]
  00443	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>

; 263  : 							           new StreamTransformationFilter(Decryptor, new CryptoPP::StringSink(strDecipher)));
; 264  : 	}

  00448	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0044c	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$21[ebp]
  00452	e8 00 00 00 00	 call	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
$LN4@DecryptMem:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3766 :         return _Mypair._Myval2._Mysize;

  00457	8b 45 e4	 mov	 eax, DWORD PTR _strDecipher$[ebp+16]
  0045a	89 85 30 ed ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 267  : 	if (strDecipher.length() != iEncryptedLen)

  00460	8b 85 30 ed ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00466	3b 43 10	 cmp	 eax, DWORD PTR _iEncryptedLen$[ebx]
  00469	74 1b		 je	 SHORT $LN8@DecryptMem

; 270  : 		return false;

  0046b	c6 85 7e ed ff
	ff 00		 mov	 BYTE PTR $T18[ebp], 0
  00472	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00476	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  00479	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 270  : 		return false;

  0047e	8a 85 7e ed ff
	ff		 mov	 al, BYTE PTR $T18[ebp]
  00484	eb 55		 jmp	 SHORT $LN1@DecryptMem
$LN8@DecryptMem:

; 271  : 	}
; 272  : 
; 273  : 	zObj.AllocBuffer(iEncryptedLen);

  00486	ff 73 10	 push	 DWORD PTR _iEncryptedLen$[ebx]
  00489	8b 4b 14	 mov	 ecx, DWORD PTR _zObj$[ebx]
  0048c	e8 00 00 00 00	 call	 ?AllocBuffer@CLZObject@@QAEXK@Z ; CLZObject::AllocBuffer
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3766 :         return _Mypair._Myval2._Mysize;

  00491	8b 45 e4	 mov	 eax, DWORD PTR _strDecipher$[ebp+16]
  00494	89 85 2c ed ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\lzo.h

; 37   : 		BYTE *			GetBuffer() { return m_pbBuffer; }

  0049a	8b 43 14	 mov	 eax, DWORD PTR _zObj$[ebx]
  0049d	8b 00		 mov	 eax, DWORD PTR [eax]
  0049f	89 85 28 ed ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 274  : 	memcpy(zObj.GetBuffer(), strDecipher.c_str(), strDecipher.length() );

  004a5	ff b5 2c ed ff
	ff		 push	 DWORD PTR $T5[ebp]
  004ab	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  004ae	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  004b3	50		 push	 eax
  004b4	ff b5 28 ed ff
	ff		 push	 DWORD PTR $T4[ebp]
  004ba	e8 00 00 00 00	 call	 _memcpy
  004bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 280  : 	return true;

  004c2	c6 85 7f ed ff
	ff 01		 mov	 BYTE PTR $T19[ebp], 1
  004c9	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  004cd	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  004d0	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 280  : 	return true;

  004d5	8a 85 7f ed ff
	ff		 mov	 al, BYTE PTR $T19[ebp]
$LN1@DecryptMem:

; 281  : }

  004db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004e5	59		 pop	 ecx
  004e6	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004e9	33 cd		 xor	 ecx, ebp
  004eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004f0	8b e5		 mov	 esp, ebp
  004f2	5d		 pop	 ebp
  004f3	8b e3		 mov	 esp, ebx
  004f5	5b		 pop	 ebx
  004f6	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _strDecipher$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$1:
  00008	8d 8d b8 ec ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$2[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$2:
  00013	6a 60		 push	 96			; 00000060H
  00015	ff b5 64 ed ff
	ff		 push	 DWORD PTR $T14[ebp]
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00020	59		 pop	 ecx
  00021	59		 pop	 ecx
  00022	c3		 ret	 0
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$3:
  00023	6a 10		 push	 16			; 00000010H
  00025	ff b5 78 ed ff
	ff		 push	 DWORD PTR $T17[ebp]
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx
  00032	c3		 ret	 0
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$5:
  00033	8d 8d 80 ed ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$20[ebp]
  00039	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$6:
  0003e	6a 60		 push	 96			; 00000060H
  00040	ff b5 48 ed ff
	ff		 push	 DWORD PTR $T12[ebp]
  00046	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004b	59		 pop	 ecx
  0004c	59		 pop	 ecx
  0004d	c3		 ret	 0
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$7:
  0004e	6a 10		 push	 16			; 00000010H
  00050	ff b5 74 ed ff
	ff		 push	 DWORD PTR $T16[ebp]
  00056	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005b	59		 pop	 ecx
  0005c	59		 pop	 ecx
  0005d	c3		 ret	 0
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$9:
  0005e	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _Decryptor$21[ebp]
  00064	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$10:
  00069	6a 60		 push	 96			; 00000060H
  0006b	ff b5 54 ed ff
	ff		 push	 DWORD PTR $T13[ebp]
  00071	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00076	59		 pop	 ecx
  00077	59		 pop	 ecx
  00078	c3		 ret	 0
__unwindfunclet$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$11:
  00079	6a 10		 push	 16			; 00000010H
  0007b	ff b5 70 ed ff
	ff		 push	 DWORD PTR $T15[ebp]
  00081	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00086	59		 pop	 ecx
  00087	59		 pop	 ecx
  00088	c3		 ret	 0
  00089	cc		 int	 3
  0008a	cc		 int	 3
  0008b	cc		 int	 3
  0008c	cc		 int	 3
  0008d	cc		 int	 3
__ehhandler$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z:
  0008e	90		 npad	 1
  0008f	90		 npad	 1
  00090	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00094	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00097	8b 8a c0 ec ff
	ff		 mov	 ecx, DWORD PTR [edx-4928]
  0009d	33 c8		 xor	 ecx, eax
  0009f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a4	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  000a7	33 c8		 xor	 ecx, eax
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
  000b3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?DecryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ENDP ; EterPackPolicy_CSHybridCrypt::DecryptMemory
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\lzo.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
_TEXT	SEGMENT
_Encryptor$2 = -4936					; size = 96
$T3 = -4836						; size = 4
_this$ = -4832						; size = 4
_this$ = -4828						; size = 4
$T4 = -4824						; size = 4
$T5 = -4820						; size = 4
$T6 = -4816						; size = 4
$T7 = -4812						; size = 4
$T8 = -4808						; size = 4
$T9 = -4804						; size = 4
$T10 = -4800						; size = 4
$T11 = -4796						; size = 4
$T12 = -4792						; size = 4
tv221 = -4788						; size = 4
tv273 = -4784						; size = 4
$T13 = -4780						; size = 4
tv280 = -4776						; size = 4
tv214 = -4772						; size = 4
tv162 = -4768						; size = 4
$T14 = -4764						; size = 4
tv155 = -4760						; size = 4
_eAlgorithm$ = -4756					; size = 4
$T15 = -4752						; size = 4
$T16 = -4748						; size = 4
$T17 = -4744						; size = 4
$T18 = -4738						; size = 1
$T19 = -4737						; size = 1
_Encryptor$20 = -4736					; size = 4368
_Encryptor$21 = -368					; size = 120
$T22 = -244						; size = 56
$T23 = -188						; size = 56
$T24 = -132						; size = 56
_iv$ = -76						; size = 16
_key$ = -60						; size = 16
_strCipher$ = -44					; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_rfileName$ = 8						; size = 4
_pSrcData$ = 12						; size = 4
_iSrcLen$ = 16						; size = 4
_zObj$ = 20						; size = 4
?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z PROC ; EterPackPolicy_CSHybridCrypt::EncryptMemory, COMDAT
; _this$ = ecx

; 153  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	83 e4 f8	 and	 esp, -8			; fffffff8H
  00008	83 c4 04	 add	 esp, 4
  0000b	55		 push	 ebp
  0000c	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  0000f	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00013	8b ec		 mov	 ebp, esp
  00015	6a ff		 push	 -1
  00017	68 00 00 00 00	 push	 __ehhandler$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
  0001c	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00022	50		 push	 eax
  00023	53		 push	 ebx
  00024	b8 38 13 00 00	 mov	 eax, 4920		; 00001338H
  00029	e8 00 00 00 00	 call	 __chkstk
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 8d 20 ed ff
	ff		 mov	 DWORD PTR _this$[ebp], ecx

; 154  : #ifdef __THEMIDA__
; 155  : 	VM_START
; 156  : #endif
; 157  : 
; 158  : 	eHybridCipherAlgorithm eAlgorithm;
; 159  : 	TEncryptKey			   key;
; 160  : 	TEncryptIV			   iv;
; 161  : 
; 162  : 	if( !GetPerFileCryptKey( rfileName, eAlgorithm, key, iv ) )

  00048	8d 45 b4	 lea	 eax, DWORD PTR _iv$[ebp]
  0004b	50		 push	 eax
  0004c	8d 45 c4	 lea	 eax, DWORD PTR _key$[ebp]
  0004f	50		 push	 eax
  00050	8d 85 6c ed ff
	ff		 lea	 eax, DWORD PTR _eAlgorithm$[ebp]
  00056	50		 push	 eax
  00057	ff 73 08	 push	 DWORD PTR _rfileName$[ebx]
  0005a	8b 8d 20 ed ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00060	e8 00 00 00 00	 call	 ?GetPerFileCryptKey@EterPackPolicy_CSHybridCrypt@@AAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAW4eHybridCipherAlgorithm@@AATUEncryptKey@1@AATUEncryptIV@1@@Z ; EterPackPolicy_CSHybridCrypt::GetPerFileCryptKey
  00065	0f b6 c0	 movzx	 eax, al
  00068	85 c0		 test	 eax, eax
  0006a	75 07		 jne	 SHORT $LN2@EncryptMem

; 163  : 	{
; 164  : 		return false;

  0006c	32 c0		 xor	 al, al
  0006e	e9 68 04 00 00	 jmp	 $LN1@EncryptMem
$LN2@EncryptMem:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2365 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00073	8d 45 d4	 lea	 eax, DWORD PTR _strCipher$[ebp]
  00076	89 85 24 ed ff
	ff		 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0007c	8b 8d 24 ed ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00082	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2367 :         _Tidy_init();

  00087	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  0008a	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 168  : 	std::string strCipher;

  0008f	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 169  : 	//NOTE : ciphered stream size could be different from original size if you choose diffrent cipher mode & algorithm
; 170  : 	//( i.e ECB or CBC mode )
; 171  : 	strCipher.reserve(iSrcLen);

  00093	ff 73 10	 push	 DWORD PTR _iSrcLen$[ebx]
  00096	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  00099	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve

; 172  : 
; 173  : 	if( eAlgorithm == e_Cipher_Camellia )

  0009e	83 bd 6c ed ff
	ff 00		 cmp	 DWORD PTR _eAlgorithm$[ebp], 0
  000a5	0f 85 35 01 00
	00		 jne	 $LN3@EncryptMem

; 174  : 	{
; 175  : 		// Encryptor
; 176  : 		CIPHER_MODE<Camellia>::Encryption Encryptor;

  000ab	8d 8d b8 ec ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$2[ebp]
  000b1	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Camellia::Base>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
  000b6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 177  : 		Encryptor.SetKeyWithIV(key.keyCamellia, sizeof(key.keyCamellia), iv.ivCamellia, sizeof(iv.ivCamellia));

  000ba	6a 10		 push	 16			; 00000010H
  000bc	8d 45 b4	 lea	 eax, DWORD PTR _iv$[ebp]
  000bf	50		 push	 eax
  000c0	6a 10		 push	 16			; 00000010H
  000c2	8d 45 c4	 lea	 eax, DWORD PTR _key$[ebp]
  000c5	50		 push	 eax
  000c6	8d 8d b8 ec ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$2[ebp]
  000cc	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 179  : 		ArraySource(pSrcData, iSrcLen, true,

  000d1	6a 60		 push	 96			; 00000060H
  000d3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d8	59		 pop	 ecx
  000d9	89 85 64 ed ff
	ff		 mov	 DWORD PTR $T14[ebp], eax
  000df	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000e3	83 bd 64 ed ff
	ff 00		 cmp	 DWORD PTR $T14[ebp], 0
  000ea	0f 84 96 00 00
	00		 je	 $LN12@EncryptMem
  000f0	6a 10		 push	 16			; 00000010H
  000f2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f7	59		 pop	 ecx
  000f8	89 85 78 ed ff
	ff		 mov	 DWORD PTR $T17[ebp], eax
  000fe	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00102	83 bd 78 ed ff
	ff 00		 cmp	 DWORD PTR $T17[ebp], 0
  00109	74 40		 je	 SHORT $LN10@EncryptMem
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 777  : 	BufferedTransformation() : Algorithm(false) {}

  0010b	6a 00		 push	 0
  0010d	8b 8d 78 ed ff
	ff		 mov	 ecx, DWORD PTR $T17[ebp]
  00113	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 592  : 		: m_output(&output) {assert(sizeof(output[0])==1);}

  00118	8b 85 78 ed ff
	ff		 mov	 eax, DWORD PTR $T17[ebp]
  0011e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  00124	8b 85 78 ed ff
	ff		 mov	 eax, DWORD PTR $T17[ebp]
  0012a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  00131	8b 85 78 ed ff
	ff		 mov	 eax, DWORD PTR $T17[ebp]
  00137	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  0013a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 179  : 		ArraySource(pSrcData, iSrcLen, true,

  0013d	8b 85 78 ed ff
	ff		 mov	 eax, DWORD PTR $T17[ebp]
  00143	89 85 68 ed ff
	ff		 mov	 DWORD PTR tv155[ebp], eax
  00149	eb 07		 jmp	 SHORT $LN11@EncryptMem
$LN10@EncryptMem:
  0014b	83 a5 68 ed ff
	ff 00		 and	 DWORD PTR tv155[ebp], 0
$LN11@EncryptMem:
  00152	8b 85 68 ed ff
	ff		 mov	 eax, DWORD PTR tv155[ebp]
  00158	89 85 1c ed ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0015e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00162	6a 00		 push	 0
  00164	6a 04		 push	 4
  00166	ff b5 1c ed ff
	ff		 push	 DWORD PTR $T3[ebp]
  0016c	8d 85 bc ec ff
	ff		 lea	 eax, DWORD PTR _Encryptor$2[ebp+4]
  00172	50		 push	 eax
  00173	8b 8d 64 ed ff
	ff		 mov	 ecx, DWORD PTR $T14[ebp]
  00179	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@_N@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  0017e	89 85 60 ed ff
	ff		 mov	 DWORD PTR tv162[ebp], eax
  00184	eb 07		 jmp	 SHORT $LN13@EncryptMem
$LN12@EncryptMem:
  00186	83 a5 60 ed ff
	ff 00		 and	 DWORD PTR tv162[ebp], 0
$LN13@EncryptMem:
  0018d	8b 85 60 ed ff
	ff		 mov	 eax, DWORD PTR tv162[ebp]
  00193	89 85 44 ed ff
	ff		 mov	 DWORD PTR $T11[ebp], eax
  00199	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0019d	ff b5 44 ed ff
	ff		 push	 DWORD PTR $T11[ebp]
  001a3	6a 01		 push	 1
  001a5	ff 73 10	 push	 DWORD PTR _iSrcLen$[ebx]
  001a8	ff 73 0c	 push	 DWORD PTR _pSrcData$[ebx]
  001ab	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  001b1	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
  001b6	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp+24]
  001bc	e8 00 00 00 00	 call	 ??1BufferedTransformation@CryptoPP@@UAE@XZ
  001c1	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp+12]
  001c7	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>

; 180  : 							           new StreamTransformationFilter(Encryptor, new CryptoPP::StringSink(strCipher)));
; 181  : 	}

  001cc	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001d0	8d 8d b8 ec ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$2[ebp]
  001d6	e8 00 00 00 00	 call	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
  001db	e9 77 02 00 00	 jmp	 $LN4@EncryptMem
$LN3@EncryptMem:

; 182  : 	else if( eAlgorithm == e_Cipher_Twofish )

  001e0	83 bd 6c ed ff
	ff 01		 cmp	 DWORD PTR _eAlgorithm$[ebp], 1
  001e7	0f 85 35 01 00
	00		 jne	 $LN5@EncryptMem

; 183  : 	{
; 184  : 		// Encryptor
; 185  : 		CIPHER_MODE<Twofish>::Encryption Encryptor;

  001ed	8d 8d 80 ed ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$20[ebp]
  001f3	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::Twofish::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
  001f8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4

; 186  : 		Encryptor.SetKeyWithIV(key.keyTwofish, sizeof(key.keyTwofish), iv.ivTwofish, sizeof(iv.ivTwofish));

  001fc	6a 10		 push	 16			; 00000010H
  001fe	8d 45 b4	 lea	 eax, DWORD PTR _iv$[ebp]
  00201	50		 push	 eax
  00202	6a 10		 push	 16			; 00000010H
  00204	8d 45 c4	 lea	 eax, DWORD PTR _key$[ebp]
  00207	50		 push	 eax
  00208	8d 8d 80 ed ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$20[ebp]
  0020e	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 188  : 		ArraySource(pSrcData, iSrcLen, true,

  00213	6a 60		 push	 96			; 00000060H
  00215	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0021a	59		 pop	 ecx
  0021b	89 85 48 ed ff
	ff		 mov	 DWORD PTR $T12[ebp], eax
  00221	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  00225	83 bd 48 ed ff
	ff 00		 cmp	 DWORD PTR $T12[ebp], 0
  0022c	0f 84 96 00 00
	00		 je	 $LN16@EncryptMem
  00232	6a 10		 push	 16			; 00000010H
  00234	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00239	59		 pop	 ecx
  0023a	89 85 74 ed ff
	ff		 mov	 DWORD PTR $T16[ebp], eax
  00240	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00244	83 bd 74 ed ff
	ff 00		 cmp	 DWORD PTR $T16[ebp], 0
  0024b	74 40		 je	 SHORT $LN14@EncryptMem
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 777  : 	BufferedTransformation() : Algorithm(false) {}

  0024d	6a 00		 push	 0
  0024f	8b 8d 74 ed ff
	ff		 mov	 ecx, DWORD PTR $T16[ebp]
  00255	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 592  : 		: m_output(&output) {assert(sizeof(output[0])==1);}

  0025a	8b 85 74 ed ff
	ff		 mov	 eax, DWORD PTR $T16[ebp]
  00260	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  00266	8b 85 74 ed ff
	ff		 mov	 eax, DWORD PTR $T16[ebp]
  0026c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  00273	8b 85 74 ed ff
	ff		 mov	 eax, DWORD PTR $T16[ebp]
  00279	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  0027c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 188  : 		ArraySource(pSrcData, iSrcLen, true,

  0027f	8b 85 74 ed ff
	ff		 mov	 eax, DWORD PTR $T16[ebp]
  00285	89 85 5c ed ff
	ff		 mov	 DWORD PTR tv214[ebp], eax
  0028b	eb 07		 jmp	 SHORT $LN15@EncryptMem
$LN14@EncryptMem:
  0028d	83 a5 5c ed ff
	ff 00		 and	 DWORD PTR tv214[ebp], 0
$LN15@EncryptMem:
  00294	8b 85 5c ed ff
	ff		 mov	 eax, DWORD PTR tv214[ebp]
  0029a	89 85 40 ed ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
  002a0	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  002a4	6a 00		 push	 0
  002a6	6a 04		 push	 4
  002a8	ff b5 40 ed ff
	ff		 push	 DWORD PTR $T10[ebp]
  002ae	8d 85 84 ed ff
	ff		 lea	 eax, DWORD PTR _Encryptor$20[ebp+4]
  002b4	50		 push	 eax
  002b5	8b 8d 48 ed ff
	ff		 mov	 ecx, DWORD PTR $T12[ebp]
  002bb	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@_N@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  002c0	89 85 4c ed ff
	ff		 mov	 DWORD PTR tv221[ebp], eax
  002c6	eb 07		 jmp	 SHORT $LN17@EncryptMem
$LN16@EncryptMem:
  002c8	83 a5 4c ed ff
	ff 00		 and	 DWORD PTR tv221[ebp], 0
$LN17@EncryptMem:
  002cf	8b 85 4c ed ff
	ff		 mov	 eax, DWORD PTR tv221[ebp]
  002d5	89 85 3c ed ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  002db	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002df	ff b5 3c ed ff
	ff		 push	 DWORD PTR $T9[ebp]
  002e5	6a 01		 push	 1
  002e7	ff 73 10	 push	 DWORD PTR _iSrcLen$[ebx]
  002ea	ff 73 0c	 push	 DWORD PTR _pSrcData$[ebx]
  002ed	8d 8d 44 ff ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  002f3	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
  002f8	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp+24]
  002fe	e8 00 00 00 00	 call	 ??1BufferedTransformation@CryptoPP@@UAE@XZ
  00303	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp+12]
  00309	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>

; 189  : 							           new StreamTransformationFilter(Encryptor, new CryptoPP::StringSink(strCipher)));
; 190  : 	}

  0030e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00312	8d 8d 80 ed ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$20[ebp]
  00318	e8 00 00 00 00	 call	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
  0031d	e9 35 01 00 00	 jmp	 $LN4@EncryptMem
$LN5@EncryptMem:

; 191  : 	else if( eAlgorithm == e_Cipher_XTEA )

  00322	83 bd 6c ed ff
	ff 02		 cmp	 DWORD PTR _eAlgorithm$[ebp], 2
  00329	0f 85 28 01 00
	00		 jne	 $LN4@EncryptMem

; 192  : 	{
; 193  : 		// Encryptor
; 194  : 		CIPHER_MODE<XTEA>::Encryption Encryptor;

  0032f	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$21[ebp]
  00335	e8 00 00 00 00	 call	 ??0?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@QAE@XZ ; CryptoPP::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >::CipherModeFinalTemplate_CipherHolder<CryptoPP::BlockCipherFinal<0,CryptoPP::XTEA::Enc>,CryptoPP::ConcretePolicyHolder<CryptoPP::Empty,CryptoPP::AdditiveCipherTemplate<CryptoPP::AbstractPolicyHolder<CryptoPP::AdditiveCipherAbstractPolicy,CryptoPP::CTR_ModePolicy> >,CryptoPP::AdditiveCipherAbstractPolicy> >
  0033a	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 195  : 		Encryptor.SetKeyWithIV(key.keyXTEA, sizeof(key.keyXTEA), iv.ivXTEA, sizeof(iv.ivXTEA));

  0033e	6a 08		 push	 8
  00340	8d 45 b4	 lea	 eax, DWORD PTR _iv$[ebp]
  00343	50		 push	 eax
  00344	6a 10		 push	 16			; 00000010H
  00346	8d 45 c4	 lea	 eax, DWORD PTR _key$[ebp]
  00349	50		 push	 eax
  0034a	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$21[ebp]
  00350	e8 00 00 00 00	 call	 ?SetKeyWithIV@SimpleKeyingInterface@CryptoPP@@QAEXPBEI0I@Z ; CryptoPP::SimpleKeyingInterface::SetKeyWithIV

; 197  : 		ArraySource(pSrcData, iSrcLen, true,

  00355	6a 60		 push	 96			; 00000060H
  00357	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0035c	59		 pop	 ecx
  0035d	89 85 54 ed ff
	ff		 mov	 DWORD PTR $T13[ebp], eax
  00363	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00367	83 bd 54 ed ff
	ff 00		 cmp	 DWORD PTR $T13[ebp], 0
  0036e	0f 84 94 00 00
	00		 je	 $LN20@EncryptMem
  00374	6a 10		 push	 16			; 00000010H
  00376	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0037b	59		 pop	 ecx
  0037c	89 85 70 ed ff
	ff		 mov	 DWORD PTR $T15[ebp], eax
  00382	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00386	83 bd 70 ed ff
	ff 00		 cmp	 DWORD PTR $T15[ebp], 0
  0038d	74 3e		 je	 SHORT $LN18@EncryptMem
  0038f	8b 8d 70 ed ff
	ff		 mov	 ecx, DWORD PTR $T15[ebp]
  00395	e8 00 00 00 00	 call	 ??0BufferedTransformation@CryptoPP@@QAE@XZ ; CryptoPP::BufferedTransformation::BufferedTransformation
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\filters.h

; 592  : 		: m_output(&output) {assert(sizeof(output[0])==1);}

  0039a	8b 85 70 ed ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  003a0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BAlgorithm@1@@
  003a6	8b 85 70 ed ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  003ac	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_7?$StringSinkTemplate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@CryptoPP@@6BWaitable@1@@
  003b3	8b 85 70 ed ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  003b9	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  003bc	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 197  : 		ArraySource(pSrcData, iSrcLen, true,

  003bf	8b 85 70 ed ff
	ff		 mov	 eax, DWORD PTR $T15[ebp]
  003c5	89 85 50 ed ff
	ff		 mov	 DWORD PTR tv273[ebp], eax
  003cb	eb 07		 jmp	 SHORT $LN19@EncryptMem
$LN18@EncryptMem:
  003cd	83 a5 50 ed ff
	ff 00		 and	 DWORD PTR tv273[ebp], 0
$LN19@EncryptMem:
  003d4	8b 85 50 ed ff
	ff		 mov	 eax, DWORD PTR tv273[ebp]
  003da	89 85 38 ed ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  003e0	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  003e4	6a 00		 push	 0
  003e6	6a 04		 push	 4
  003e8	ff b5 38 ed ff
	ff		 push	 DWORD PTR $T8[ebp]
  003ee	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _Encryptor$21[ebp+4]
  003f4	50		 push	 eax
  003f5	8b 8d 54 ed ff
	ff		 mov	 ecx, DWORD PTR $T13[ebp]
  003fb	e8 00 00 00 00	 call	 ??0StreamTransformationFilter@CryptoPP@@QAE@AAVStreamTransformation@1@PAVBufferedTransformation@1@W4BlockPaddingScheme@BlockPaddingSchemeDef@1@_N@Z ; CryptoPP::StreamTransformationFilter::StreamTransformationFilter
  00400	89 85 58 ed ff
	ff		 mov	 DWORD PTR tv280[ebp], eax
  00406	eb 07		 jmp	 SHORT $LN21@EncryptMem
$LN20@EncryptMem:
  00408	83 a5 58 ed ff
	ff 00		 and	 DWORD PTR tv280[ebp], 0
$LN21@EncryptMem:
  0040f	8b 85 58 ed ff
	ff		 mov	 eax, DWORD PTR tv280[ebp]
  00415	89 85 34 ed ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  0041b	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0041f	ff b5 34 ed ff
	ff		 push	 DWORD PTR $T7[ebp]
  00425	6a 01		 push	 1
  00427	ff 73 10	 push	 DWORD PTR _iSrcLen$[ebx]
  0042a	ff 73 0c	 push	 DWORD PTR _pSrcData$[ebx]
  0042d	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T24[ebp]
  00433	e8 00 00 00 00	 call	 ??0StringSource@CryptoPP@@QAE@PBEI_NPAVBufferedTransformation@1@@Z ; CryptoPP::StringSource::StringSource
  00438	8d 4d 94	 lea	 ecx, DWORD PTR $T24[ebp+24]
  0043b	e8 00 00 00 00	 call	 ??1BufferedTransformation@CryptoPP@@UAE@XZ
  00440	8d 4d 88	 lea	 ecx, DWORD PTR $T24[ebp+12]
  00443	e8 00 00 00 00	 call	 ??1?$member_ptr@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::member_ptr<CryptoPP::BufferedTransformation>::~member_ptr<CryptoPP::BufferedTransformation>

; 198  : 							           new StreamTransformationFilter(Encryptor, new CryptoPP::StringSink(strCipher)));
; 199  : 	}

  00448	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0044c	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$21[ebp]
  00452	e8 00 00 00 00	 call	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
$LN4@EncryptMem:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3766 :         return _Mypair._Myval2._Mysize;

  00457	8b 45 e4	 mov	 eax, DWORD PTR _strCipher$[ebp+16]
  0045a	89 85 30 ed ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 201  : 	if (strCipher.length() != iSrcLen)

  00460	8b 85 30 ed ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  00466	3b 43 10	 cmp	 eax, DWORD PTR _iSrcLen$[ebx]
  00469	74 1b		 je	 SHORT $LN8@EncryptMem

; 204  : 		return false;

  0046b	c6 85 7e ed ff
	ff 00		 mov	 BYTE PTR $T18[ebp], 0
  00472	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00476	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  00479	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 204  : 		return false;

  0047e	8a 85 7e ed ff
	ff		 mov	 al, BYTE PTR $T18[ebp]
  00484	eb 55		 jmp	 SHORT $LN1@EncryptMem
$LN8@EncryptMem:

; 205  : 	}
; 206  : 
; 207  : 	zObj.AllocBuffer(iSrcLen);

  00486	ff 73 10	 push	 DWORD PTR _iSrcLen$[ebx]
  00489	8b 4b 14	 mov	 ecx, DWORD PTR _zObj$[ebx]
  0048c	e8 00 00 00 00	 call	 ?AllocBuffer@CLZObject@@QAEXK@Z ; CLZObject::AllocBuffer
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3766 :         return _Mypair._Myval2._Mysize;

  00491	8b 45 e4	 mov	 eax, DWORD PTR _strCipher$[ebp+16]
  00494	89 85 2c ed ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterBase\lzo.h

; 37   : 		BYTE *			GetBuffer() { return m_pbBuffer; }

  0049a	8b 43 14	 mov	 eax, DWORD PTR _zObj$[ebx]
  0049d	8b 00		 mov	 eax, DWORD PTR [eax]
  0049f	89 85 28 ed ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 208  : 	memcpy(zObj.GetBuffer(), strCipher.c_str(), strCipher.length() );

  004a5	ff b5 2c ed ff
	ff		 push	 DWORD PTR $T5[ebp]
  004ab	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  004ae	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  004b3	50		 push	 eax
  004b4	ff b5 28 ed ff
	ff		 push	 DWORD PTR $T4[ebp]
  004ba	e8 00 00 00 00	 call	 _memcpy
  004bf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 214  : 	return true;

  004c2	c6 85 7f ed ff
	ff 01		 mov	 BYTE PTR $T19[ebp], 1
  004c9	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  004cd	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  004d0	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 214  : 	return true;

  004d5	8a 85 7f ed ff
	ff		 mov	 al, BYTE PTR $T19[ebp]
$LN1@EncryptMem:

; 215  : }

  004db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004e5	59		 pop	 ecx
  004e6	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004e9	33 cd		 xor	 ecx, ebp
  004eb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004f0	8b e5		 mov	 esp, ebp
  004f2	5d		 pop	 ebp
  004f3	8b e3		 mov	 esp, ebx
  004f5	5b		 pop	 ebx
  004f6	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _strCipher$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$1:
  00008	8d 8d b8 ec ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$2[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VBase@Camellia@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$2:
  00013	6a 60		 push	 96			; 00000060H
  00015	ff b5 64 ed ff
	ff		 push	 DWORD PTR $T14[ebp]
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00020	59		 pop	 ecx
  00021	59		 pop	 ecx
  00022	c3		 ret	 0
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$3:
  00023	6a 10		 push	 16			; 00000010H
  00025	ff b5 78 ed ff
	ff		 push	 DWORD PTR $T17[ebp]
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx
  00032	c3		 ret	 0
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$5:
  00033	8d 8d 80 ed ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$20[ebp]
  00039	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@Twofish@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$6:
  0003e	6a 60		 push	 96			; 00000060H
  00040	ff b5 48 ed ff
	ff		 push	 DWORD PTR $T12[ebp]
  00046	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004b	59		 pop	 ecx
  0004c	59		 pop	 ecx
  0004d	c3		 ret	 0
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$7:
  0004e	6a 10		 push	 16			; 00000010H
  00050	ff b5 74 ed ff
	ff		 push	 DWORD PTR $T16[ebp]
  00056	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005b	59		 pop	 ecx
  0005c	59		 pop	 ecx
  0005d	c3		 ret	 0
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$9:
  0005e	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR _Encryptor$21[ebp]
  00064	e9 00 00 00 00	 jmp	 ??1?$CipherModeFinalTemplate_CipherHolder@V?$BlockCipherFinal@$0A@VEnc@XTEA@CryptoPP@@@CryptoPP@@V?$ConcretePolicyHolder@VEmpty@CryptoPP@@V?$AdditiveCipherTemplate@V?$AbstractPolicyHolder@UAdditiveCipherAbstractPolicy@CryptoPP@@VCTR_ModePolicy@2@@CryptoPP@@@2@UAdditiveCipherAbstractPolicy@2@@2@@CryptoPP@@UAE@XZ
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$10:
  00069	6a 60		 push	 96			; 00000060H
  0006b	ff b5 54 ed ff
	ff		 push	 DWORD PTR $T13[ebp]
  00071	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00076	59		 pop	 ecx
  00077	59		 pop	 ecx
  00078	c3		 ret	 0
__unwindfunclet$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z$11:
  00079	6a 10		 push	 16			; 00000010H
  0007b	ff b5 70 ed ff
	ff		 push	 DWORD PTR $T15[ebp]
  00081	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00086	59		 pop	 ecx
  00087	59		 pop	 ecx
  00088	c3		 ret	 0
  00089	cc		 int	 3
  0008a	cc		 int	 3
  0008b	cc		 int	 3
  0008c	cc		 int	 3
  0008d	cc		 int	 3
__ehhandler$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z:
  0008e	90		 npad	 1
  0008f	90		 npad	 1
  00090	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00094	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00097	8b 8a c0 ec ff
	ff		 mov	 ecx, DWORD PTR [edx-4928]
  0009d	33 c8		 xor	 ecx, eax
  0009f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a4	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  000a7	33 c8		 xor	 ecx, eax
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z
  000b3	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?EncryptMemory@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEHAAVCLZObject@@@Z ENDP ; EterPackPolicy_CSHybridCrypt::EncryptMemory
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\osrng.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T2 = -116						; size = 4
$T3 = -112						; size = 4
_cit$ = -108						; size = 4
$T4 = -104						; size = 4
$T5 = -100						; size = 4
_x$ = -96						; size = 4
_this$ = -92						; size = 4
_dwExtHash$ = -88					; size = 4
tv79 = -84						; size = 4
$T6 = -80						; size = 4
$T7 = -76						; size = 1
$T8 = -75						; size = 1
$T9 = -74						; size = 1
$T10 = -73						; size = 1
_info$ = -72						; size = 32
_extName$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rfileName$ = 8						; size = 4
?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; EterPackPolicy_CSHybridCrypt::GenerateCryptKey, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d a4	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	83 65 b0 00	 and	 DWORD PTR $T6[ebp], 0

; 51   : 	stl_lowers(rfileName);

  00031	ff 75 08	 push	 DWORD PTR _rfileName$[ebp]
  00034	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
  00039	59		 pop	 ecx

; 52   : 	return CFileNameHelper::GetExtension(rfileName);

  0003a	ff 75 08	 push	 DWORD PTR _rfileName$[ebp]
  0003d	8d 45 d8	 lea	 eax, DWORD PTR _extName$[ebp]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetExtension
  00046	59		 pop	 ecx
  00047	59		 pop	 ecx
  00048	8b 45 b0	 mov	 eax, DWORD PTR $T6[ebp]
  0004b	83 c8 01	 or	 eax, 1
  0004e	89 45 b0	 mov	 DWORD PTR $T6[ebp], eax

; 69   : #ifdef __THEMIDA__
; 70   : 	VM_START
; 71   : #endif
; 72   : 
; 73   : 	//make lower & extract ext
; 74   : 	std::string extName = GetFileExt(rfileName);

  00051	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 75   : 	stl_lowers(extName);

  00055	8d 45 d8	 lea	 eax, DWORD PTR _extName$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?stl_lowers@@YAXAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stl_lowers
  0005e	59		 pop	 ecx

; 76   : 
; 77   : 	DWORD  dwExtHash  = stringhash().GetHash(extName);

  0005f	8d 45 d8	 lea	 eax, DWORD PTR _extName$[ebp]
  00062	50		 push	 eax
  00063	8d 4d b4	 lea	 ecx, DWORD PTR $T7[ebp]
  00066	e8 00 00 00 00	 call	 ?GetHash@stringhash@@QBEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; stringhash::GetHash
  0006b	89 45 a8	 mov	 DWORD PTR _dwExtHash$[ebp], eax

; 78   : 
; 79   : 	TCSHybridCryptKeyMap::const_iterator cit = m_mapHybridCryptKey.find( dwExtHash );

  0006e	8d 45 a8	 lea	 eax, DWORD PTR _dwExtHash$[ebp]
  00071	50		 push	 eax
  00072	8d 45 8c	 lea	 eax, DWORD PTR $T2[ebp]
  00075	50		 push	 eax
  00076	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?find@?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE?AU?$iterator@U?$ptr_node@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@detail@unordered@boost@@@iterator_detail@23@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::find
  0007e	89 45 a0	 mov	 DWORD PTR _x$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  00081	8b 45 a0	 mov	 eax, DWORD PTR _x$[ebp]
  00084	8b 00		 mov	 eax, DWORD PTR [eax]
  00086	89 45 94	 mov	 DWORD PTR _cit$[ebp], eax

; 2368 :         iterator() BOOST_NOEXCEPT : node_() {}

  00089	83 65 9c 00	 and	 DWORD PTR $T5[ebp], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 200  :       iterator end() BOOST_NOEXCEPT { return iterator(); }

  0008d	8d 45 9c	 lea	 eax, DWORD PTR $T5[ebp]
  00090	89 45 98	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 2431 :         c_iterator(n_iterator const& x) BOOST_NOEXCEPT : node_(x.node_) {}

  00093	8b 45 98	 mov	 eax, DWORD PTR $T4[ebp]
  00096	8b 00		 mov	 eax, DWORD PTR [eax]
  00098	89 45 90	 mov	 DWORD PTR $T3[ebp], eax

; 2459 :           return x.node_ != y.node_;

  0009b	8b 45 94	 mov	 eax, DWORD PTR _cit$[ebp]
  0009e	3b 45 90	 cmp	 eax, DWORD PTR $T3[ebp]
  000a1	74 09		 je	 SHORT $LN47@GenerateCr
  000a3	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  000aa	eb 04		 jmp	 SHORT $LN48@GenerateCr
$LN47@GenerateCr:
  000ac	83 65 ac 00	 and	 DWORD PTR tv79[ebp], 0
$LN48@GenerateCr:
  000b0	8a 45 ac	 mov	 al, BYTE PTR tv79[ebp]
  000b3	88 45 b7	 mov	 BYTE PTR $T10[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 81   : 	if( cit != m_mapHybridCryptKey.end() )

  000b6	0f b6 45 b7	 movzx	 eax, BYTE PTR $T10[ebp]
  000ba	85 c0		 test	 eax, eax
  000bc	74 18		 je	 SHORT $LN3@GenerateCr

; 84   : 		return false;

  000be	c6 45 b6 00	 mov	 BYTE PTR $T9[ebp], 0
  000c2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  000c6	8d 4d d8	 lea	 ecx, DWORD PTR _extName$[ebp]
  000c9	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 84   : 		return false;

  000ce	8a 45 b6	 mov	 al, BYTE PTR $T9[ebp]
  000d1	e9 d0 00 00 00	 jmp	 $LN1@GenerateCr
$LN3@GenerateCr:

; 87   : 	static AutoSeededRandomPool rnd;

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  000db	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  000e2	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  000eb	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR __Init_thread_epoch[eax]
  000f1	7e 5c		 jle	 SHORT $LN2@GenerateCr
  000f3	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  000f8	e8 00 00 00 00	 call	 __Init_thread_header
  000fd	59		 pop	 ecx
  000fe	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA, -1
  00105	75 48		 jne	 SHORT $LN2@GenerateCr
  00107	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\osrng.h

; 90   : 	explicit AutoSeededRandomPool(bool blocking = false, unsigned int seedSize = 32)

  0010b	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
  00110	e8 00 00 00 00	 call	 ??0RandomPool@CryptoPP@@QAE@XZ ; CryptoPP::RandomPool::RandomPool
  00115	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00119	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A, OFFSET ??_7AutoSeededRandomPool@CryptoPP@@6B@

; 91   : 		{Reseed(blocking, seedSize);}

  00123	6a 20		 push	 32			; 00000020H
  00125	6a 00		 push	 0
  00127	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
  0012c	e8 00 00 00 00	 call	 ?Reseed@AutoSeededRandomPool@CryptoPP@@QAEX_NI@Z ; CryptoPP::AutoSeededRandomPool::Reseed
  00131	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 87   : 	static AutoSeededRandomPool rnd;

  00135	68 00 00 00 00	 push	 OFFSET ??__Frnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ; `EterPackPolicy_CSHybridCrypt::GenerateCryptKey'::`2'::`dynamic atexit destructor for 'rnd''
  0013a	e8 00 00 00 00	 call	 _atexit
  0013f	59		 pop	 ecx
  00140	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00144	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  00149	e8 00 00 00 00	 call	 __Init_thread_footer
  0014e	59		 pop	 ecx
$LN2@GenerateCr:

; 88   : 
; 89   : 	TCSHybridCryptKey info;
; 90   : 	{
; 91   : 		rnd.GenerateBlock( &(info.uEncryptKey.key[0]), sizeof(info.uEncryptKey) ); 

  0014f	6a 10		 push	 16			; 00000010H
  00151	33 c0		 xor	 eax, eax
  00153	40		 inc	 eax
  00154	6b c0 00	 imul	 eax, eax, 0
  00157	8d 44 05 b8	 lea	 eax, DWORD PTR _info$[ebp+eax]
  0015b	50		 push	 eax
  0015c	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
  00161	e8 00 00 00 00	 call	 ?GenerateBlock@RandomNumberGenerator@CryptoPP@@UAEXPAEI@Z ; CryptoPP::RandomNumberGenerator::GenerateBlock

; 92   : 		rnd.GenerateBlock( &(info.uEncryptIV.iv[0]), sizeof(info.uEncryptIV) );

  00166	6a 10		 push	 16			; 00000010H
  00168	33 c0		 xor	 eax, eax
  0016a	40		 inc	 eax
  0016b	6b c0 00	 imul	 eax, eax, 0
  0016e	8d 44 05 c8	 lea	 eax, DWORD PTR _info$[ebp+eax+16]
  00172	50		 push	 eax
  00173	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
  00178	e8 00 00 00 00	 call	 ?GenerateBlock@RandomNumberGenerator@CryptoPP@@UAEXPAEI@Z ; CryptoPP::RandomNumberGenerator::GenerateBlock

; 93   : 
; 94   : 		//for test
; 95   : 	/*	memset( &info.uEncryptKey.key, 0x10, sizeof(info.uEncryptKey) ); 
; 96   : 		memset( &info.uEncryptIV.iv, 0x10, sizeof(info.uEncryptIV) ); */
; 97   : 	}
; 98   : 	m_mapHybridCryptKey[dwExtHash] = info;

  0017d	8d 45 a8	 lea	 eax, DWORD PTR _dwExtHash$[ebp]
  00180	50		 push	 eax
  00181	8b 4d a4	 mov	 ecx, DWORD PTR _this$[ebp]
  00184	e8 00 00 00 00	 call	 ??A?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAEAAUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@ABK@Z ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::operator[]
  00189	6a 08		 push	 8
  0018b	59		 pop	 ecx
  0018c	8d 75 b8	 lea	 esi, DWORD PTR _info$[ebp]
  0018f	8b f8		 mov	 edi, eax
  00191	f3 a5		 rep movsd

; 104  : 	return true;

  00193	c6 45 b5 01	 mov	 BYTE PTR $T8[ebp], 1
  00197	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0019b	8d 4d d8	 lea	 ecx, DWORD PTR _extName$[ebp]
  0019e	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 104  : 	return true;

  001a3	8a 45 b5	 mov	 al, BYTE PTR $T8[ebp]
$LN1@GenerateCr:

; 105  : }

  001a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b0	59		 pop	 ecx
  001b1	5f		 pop	 edi
  001b2	5e		 pop	 esi
  001b3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b6	33 cd		 xor	 ecx, ebp
  001b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bd	c9		 leave
  001be	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _extName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  0000d	e8 00 00 00 00	 call	 __Init_thread_abort
  00012	59		 pop	 ecx
  00013	c3		 ret	 0
__unwindfunclet$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$17:
  00014	b9 00 00 00 00	 mov	 ecx, OFFSET ?rnd@?1??GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4VAutoSeededRandomPool@CryptoPP@@A
  00019	e9 00 00 00 00	 jmp	 ??1RandomPool@CryptoPP@@UAE@XZ
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a 8c	 mov	 ecx, DWORD PTR [edx-116]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00039	33 c8		 xor	 ecx, eax
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GenerateCryptKey@EterPackPolicy_CSHybridCrypt@@QAE_NAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; EterPackPolicy_CSHybridCrypt::GenerateCryptKey
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp
;	COMDAT ??1EterPackPolicy_CSHybridCrypt@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1EterPackPolicy_CSHybridCrypt@@QAE@XZ PROC		; EterPackPolicy_CSHybridCrypt::~EterPackPolicy_CSHybridCrypt, COMDAT
; _this$ = ecx

; 56   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1EterPackPolicy_CSHybridCrypt@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\unordered_map.hpp

; 722  :       void clear() BOOST_NOEXCEPT { table_.clear_impl(); }

  00026	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	e8 00 00 00 00	 call	 ?clear_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> >,unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::clear_impl
  00032	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	83 c1 18	 add	 ecx, 24			; 00000018H
  0003f	e8 00 00 00 00	 call	 ?clear_impl@?$table@U?$map@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@std@@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@2@@detail@unordered@boost@@@detail@unordered@boost@@QAEXXZ ; boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> >,unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long> > >::clear_impl
  00044	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterPack\EterPackPolicy_CSHybridCrypt.cpp

; 59   : }

  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	83 c1 18	 add	 ecx, 24			; 00000018H
  0004e	e8 00 00 00 00	 call	 ??1?$unordered_map@KUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSSupplementaryDataBlockInfo@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SSupplementaryDataBlockInfo> > >
  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	e8 00 00 00 00	 call	 ??1?$unordered_map@KUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@U?$hash@K@boost@@U?$equal_to@K@std@@V?$allocator@U?$pair@$$CBKUSCSHybridCryptKey@EterPackPolicy_CSHybridCrypt@@@std@@@6@@unordered@boost@@QAE@XZ ; boost::unordered::unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >::~unordered_map<unsigned long,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const ,EterPackPolicy_CSHybridCrypt::SCSHybridCryptKey> > >
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	c9		 leave
  00067	c3		 ret	 0
  00068	cc		 int	 3
  00069	cc		 int	 3
  0006a	cc		 int	 3
  0006b	cc		 int	 3
  0006c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1EterPackPolicy_CSHybridCrypt@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1EterPackPolicy_CSHybridCrypt@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1EterPackPolicy_CSHybridCrypt@@QAE@XZ ENDP		; EterPackPolicy_CSHybridCrypt::~EterPackPolicy_CSHybridCrypt
; Function compile flags: /Odspy
;	COMDAT ??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
_this$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z PROC		; CryptoPP::XTEA::Base::Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c0 04	 add	 eax, 4
  0002e	89 45 ec	 mov	 DWORD PTR _this$2[ebp], eax
  00031	8b 45 ec	 mov	 eax, DWORD PTR _this$2[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00037	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0003a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0003d	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00040	66 8b 40 0c	 mov	 ax, WORD PTR [eax+12]
  00044	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax
  0004b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 c0 10	 add	 eax, 16			; 00000010H
  00055	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
  00058	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0005b	83 c0 10	 add	 eax, 16			; 00000010H
  0005e	50		 push	 eax
  0005f	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	e8 00 00 00 00	 call	 ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >
  00067	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0006d	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  00070	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  00073	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00077	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	c9		 leave
  00086	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Base@XTEA@CryptoPP@@QAE@ABV012@@Z ENDP		; CryptoPP::XTEA::Base::Base
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??1Base@XTEA@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Base@XTEA@CryptoPP@@UAE@XZ PROC			; CryptoPP::XTEA::Base::~Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Base@XTEA@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	51		 push	 ecx
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00027	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c0 10	 add	 eax, 16			; 00000010H
  0002d	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  00030	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00034	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00037	ff 70 18	 push	 DWORD PTR [eax+24]
  0003a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	ff 70 1c	 push	 DWORD PTR [eax+28]
  00040	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?deallocate@?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
  00048	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0004c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00056	59		 pop	 ecx
  00057	c9		 leave
  00058	c3		 ret	 0
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
  0005c	cc		 int	 3
  0005d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1Base@XTEA@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Base@XTEA@CryptoPP@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Base@XTEA@CryptoPP@@UAE@XZ ENDP			; CryptoPP::XTEA::Base::~Base
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0Base@XTEA@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_this$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Base@XTEA@CryptoPP@@QAE@XZ PROC			; CryptoPP::XTEA::Base::Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Base@XTEA@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c0 04	 add	 eax, 4
  00032	89 45 ec	 mov	 DWORD PTR _this$2[ebp], eax
  00035	6a 01		 push	 1
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _this$2[ebp]
  0003a	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0003f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00043	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0004a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 c0 10	 add	 eax, 16			; 00000010H
  00050	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax

; 425  : 	explicit FixedSizeSecBlock() : SecBlock<T, A>(S) {}

  00053	6a 04		 push	 4
  00055	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >
  0005d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00061	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	c9		 leave
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Base@XTEA@CryptoPP@@QAE@XZ$6:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SimpleKeyingInterface@CryptoPP@@UAE@XZ ; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
__unwindfunclet$??0Base@XTEA@CryptoPP@@QAE@XZ$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0Base@XTEA@CryptoPP@@QAE@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Base@XTEA@CryptoPP@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Base@XTEA@CryptoPP@@QAE@XZ ENDP			; CryptoPP::XTEA::Base::Base
; Function compile flags: /Odspy
;	COMDAT ??1?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?BlockSize@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BlockSize@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::BlockSize, COMDAT
; _this$ = ecx

; 146  : 	unsigned int BlockSize() const {return this->BLOCKSIZE;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 08		 push	 8
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?BlockSize@?$BlockCipherImpl@UXTEA_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::XTEA_Info,CryptoPP::BlockCipher>::BlockSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 28   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 65 fc 00	 and	 DWORD PTR $T1[ebp], 0
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_04OKOCCFHC@XTEA@
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00019	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0001c	83 c8 01	 or	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00022	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00025	c9		 leave
  00026	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> > >::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVSize, COMDAT
; _this$ = ecx

; 139  : 	unsigned int IVSize() const {return INFO::IV_LENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	c9		 leave
  0000a	c3		 ret	 0
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVRequirement, COMDAT
; _this$ = ecx

; 138  : 	SimpleKeyingInterface::IV_Requirement IVRequirement() const {return (SimpleKeyingInterface::IV_Requirement)INFO::IV_REQUIREMENT;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 04		 push	 4
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::IVRequirement
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::GetValidKeyLength, COMDAT
; _this$ = ecx

; 137  : 	size_t GetValidKeyLength(size_t n) const {return INFO::StaticGetValidKeyLength(n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 10		 push	 16			; 00000010H
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c2 04 00	 ret	 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::GetValidKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::DefaultKeyLength, COMDAT
; _this$ = ecx

; 136  : 	size_t DefaultKeyLength() const {return INFO::DEFAULT_KEYLENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 10		 push	 16			; 00000010H
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::DefaultKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MaxKeyLength, COMDAT
; _this$ = ecx

; 135  : 	size_t MaxKeyLength() const {return (size_t)INFO::MAX_KEYLENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 10		 push	 16			; 00000010H
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MaxKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MinKeyLength, COMDAT
; _this$ = ecx

; 134  : 	size_t MinKeyLength() const {return INFO::MIN_KEYLENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 10		 push	 16			; 00000010H
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UXTEA_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::XTEA_Info> >::MinKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_n$ = -24						; size = 4
_this$ = -20						; size = 4
$T1 = -16						; size = 4
tv140 = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx

; 248  : 	SecBlock(const SecBlock<T, A> &t)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 166  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  0000f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c6 40 11 00	 mov	 BYTE PTR [eax+17], 0

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _t$[ebp]
  0001c	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  0001f	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00022	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00025	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00028	89 45 e8	 mov	 DWORD PTR _n$[ebp], eax
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 183  : 		if (n <= S && !m_allocated)

  00031	83 7d e8 04	 cmp	 DWORD PTR _n$[ebp], 4
  00035	77 3a		 ja	 SHORT $LN13@SecBlock
  00037	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	0f b6 40 11	 movzx	 eax, BYTE PTR [eax+17]
  0003e	85 c0		 test	 eax, eax
  00040	75 2f		 jne	 SHORT $LN13@SecBlock

; 184  : 		{
; 185  : 			m_allocated = true;

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c6 40 11 01	 mov	 BYTE PTR [eax+17], 1

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  00049	33 c0		 xor	 eax, eax
  0004b	74 14		 je	 SHORT $LN11@SecBlock
  0004d	33 c0		 xor	 eax, eax
  0004f	2b 45 f8	 sub	 eax, DWORD PTR _this$[ebp]
  00052	33 d2		 xor	 edx, edx
  00054	6a 10		 push	 16			; 00000010H
  00056	59		 pop	 ecx
  00057	f7 f1		 div	 ecx
  00059	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  0005c	89 55 f4	 mov	 DWORD PTR tv140[ebp], edx
  0005f	eb 06		 jmp	 SHORT $LN9@SecBlock
$LN11@SecBlock:
  00061	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	89 45 f4	 mov	 DWORD PTR tv140[ebp], eax
$LN9@SecBlock:

; 186  : 			return GetAlignedArray();

  00067	8b 45 f4	 mov	 eax, DWORD PTR tv140[ebp]
  0006a	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  0006d	eb 06		 jmp	 SHORT $LN5@SecBlock

; 187  : 		}

  0006f	eb 04		 jmp	 SHORT $LN5@SecBlock
$LN13@SecBlock:

; 188  : 		else
; 189  : 			return m_fallbackAllocator.allocate(n, hint);

  00071	83 65 f0 00	 and	 DWORD PTR $T1[ebp], 0
$LN5@SecBlock:

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  0007b	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  0007e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00081	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00084	c1 e0 02	 shl	 eax, 2
  00087	50		 push	 eax
  00088	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  0008b	ff 70 1c	 push	 DWORD PTR [eax+28]
  0008e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00091	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00094	c1 e0 02	 shl	 eax, 2
  00097	50		 push	 eax
  00098	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009b	ff 70 1c	 push	 DWORD PTR [eax+28]
  0009e	e8 00 00 00 00	 call	 _memcpy_s
  000a3	83 c4 10	 add	 esp, 16			; 00000010H
  000a6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a9	c9		 leave
  000aa	c2 04 00	 ret	 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T1 = -16						; size = 4
tv128 = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z PROC ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx

; 246  : 	explicit SecBlock(size_type size=0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 166  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  0000f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c6 40 11 00	 mov	 BYTE PTR [eax+17], 0

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00016	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  0001c	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	89 45 fc	 mov	 DWORD PTR _this$[ebp], eax

; 183  : 		if (n <= S && !m_allocated)

  00025	83 7d 08 04	 cmp	 DWORD PTR _size$[ebp], 4
  00029	77 3a		 ja	 SHORT $LN13@SecBlock
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	0f b6 40 11	 movzx	 eax, BYTE PTR [eax+17]
  00032	85 c0		 test	 eax, eax
  00034	75 2f		 jne	 SHORT $LN13@SecBlock

; 184  : 		{
; 185  : 			m_allocated = true;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c6 40 11 01	 mov	 BYTE PTR [eax+17], 1

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  0003d	33 c0		 xor	 eax, eax
  0003f	74 14		 je	 SHORT $LN11@SecBlock
  00041	33 c0		 xor	 eax, eax
  00043	2b 45 fc	 sub	 eax, DWORD PTR _this$[ebp]
  00046	33 d2		 xor	 edx, edx
  00048	6a 10		 push	 16			; 00000010H
  0004a	59		 pop	 ecx
  0004b	f7 f1		 div	 ecx
  0004d	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  00050	89 55 f4	 mov	 DWORD PTR tv128[ebp], edx
  00053	eb 06		 jmp	 SHORT $LN9@SecBlock
$LN11@SecBlock:
  00055	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00058	89 45 f4	 mov	 DWORD PTR tv128[ebp], eax
$LN9@SecBlock:

; 186  : 			return GetAlignedArray();

  0005b	8b 45 f4	 mov	 eax, DWORD PTR tv128[ebp]
  0005e	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  00061	eb 06		 jmp	 SHORT $LN5@SecBlock

; 187  : 		}

  00063	eb 04		 jmp	 SHORT $LN5@SecBlock
$LN13@SecBlock:

; 188  : 		else
; 189  : 			return m_fallbackAllocator.allocate(n, hint);

  00065	83 65 f0 00	 and	 DWORD PTR $T1[ebp], 0
$LN5@SecBlock:

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00069	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  0006f	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00072	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00075	c9		 leave
  00076	c2 04 00	 ret	 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ENDP ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ?deallocate@?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z
_TEXT	SEGMENT
tv81 = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?deallocate@?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0>::deallocate, COMDAT
; _this$ = ecx

; 193  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  00008	33 c0		 xor	 eax, eax
  0000a	74 14		 je	 SHORT $LN7@deallocate
  0000c	33 c0		 xor	 eax, eax
  0000e	2b 45 fc	 sub	 eax, DWORD PTR _this$[ebp]
  00011	33 d2		 xor	 edx, edx
  00013	6a 10		 push	 16			; 00000010H
  00015	59		 pop	 ecx
  00016	f7 f1		 div	 ecx
  00018	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  0001b	89 55 f8	 mov	 DWORD PTR tv81[ebp], edx
  0001e	eb 06		 jmp	 SHORT $LN5@deallocate
$LN7@deallocate:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv81[ebp], eax
$LN5@deallocate:

; 194  : 		if (p == GetAlignedArray())

  00026	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00029	3b 45 f8	 cmp	 eax, DWORD PTR tv81[ebp]
  0002c	75 14		 jne	 SHORT $LN1@deallocate

; 195  : 		{
; 196  : 			assert(n <= S);
; 197  : 			assert(m_allocated);
; 198  : 			m_allocated = false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c6 40 11 00	 mov	 BYTE PTR [eax+17], 0

; 199  : 			SecureWipeArray((pointer)p, n);

  00035	ff 75 0c	 push	 DWORD PTR _n$[ebp]
  00038	ff 75 08	 push	 DWORD PTR _p$[ebp]
  0003b	e8 00 00 00 00	 call	 ??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z ; CryptoPP::SecureWipeArray<unsigned int>
  00040	59		 pop	 ecx
  00041	59		 pop	 ecx
$LN1@deallocate:

; 200  : 		}
; 201  : 		else
; 202  : 			m_fallbackAllocator.deallocate(p, n);
; 203  : 	}

  00042	c9		 leave
  00043	c2 08 00	 ret	 8
?deallocate@?$FixedSizeAllocatorWithCleanup@I$03V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,4,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z PROC		; CryptoPP::Twofish::Base::Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0002b	83 c0 04	 add	 eax, 4
  0002e	50		 push	 eax
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 04	 add	 ecx, 4
  00035	e8 00 00 00 00	 call	 ??0BlockTransformation@CryptoPP@@QAE@ABV01@@Z
  0003a	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0003d	66 8b 40 0c	 mov	 ax, WORD PTR [eax+12]
  00041	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax
  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 c0 10	 add	 eax, 16			; 00000010H
  00052	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
  00055	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00058	83 c0 10	 add	 eax, 16			; 00000010H
  0005b	50		 push	 eax
  0005c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	e8 00 00 00 00	 call	 ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >
  00064	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00068	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  00070	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
  00073	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00076	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  0007b	50		 push	 eax
  0007c	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	e8 00 00 00 00	 call	 ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >
  00084	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00088	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00095	59		 pop	 ecx
  00096	c9		 leave
  00097	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ
__unwindfunclet$??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 10	 add	 ecx, 16			; 00000010H
  0000e	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Base@Twofish@CryptoPP@@QAE@ABV012@@Z ENDP		; CryptoPP::Twofish::Base::Base
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??1Base@Twofish@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1Base@Twofish@CryptoPP@@UAE@XZ PROC			; CryptoPP::Twofish::Base::~Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1Base@Twofish@CryptoPP@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  00030	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  00033	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00037	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	ff b0 08 10 00
	00		 push	 DWORD PTR [eax+4104]
  00040	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	ff b0 0c 10 00
	00		 push	 DWORD PTR [eax+4108]
  00049	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004c	e8 00 00 00 00	 call	 ?deallocate@?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
  00051	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00055	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00058	83 c0 10	 add	 eax, 16			; 00000010H
  0005b	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax
  0005e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00065	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00068	ff b0 a8 00 00
	00		 push	 DWORD PTR [eax+168]
  0006e	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00071	ff b0 ac 00 00
	00		 push	 DWORD PTR [eax+172]
  00077	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	e8 00 00 00 00	 call	 ?deallocate@?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
  0007f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00083	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00086	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008d	59		 pop	 ecx
  0008e	c9		 leave
  0008f	c3		 ret	 0
  00090	cc		 int	 3
  00091	cc		 int	 3
  00092	cc		 int	 3
  00093	cc		 int	 3
  00094	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1Base@Twofish@CryptoPP@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1Base@Twofish@CryptoPP@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1Base@Twofish@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Twofish::Base::~Base
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0Base@Twofish@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -28						; size = 4
_this$ = -24						; size = 4
_this$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Base@Twofish@CryptoPP@@QAE@XZ PROC			; CryptoPP::Twofish::Base::Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Base@Twofish@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00028	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c0 04	 add	 eax, 4
  00032	89 45 ec	 mov	 DWORD PTR _this$2[ebp], eax
  00035	6a 01		 push	 1
  00037	8b 4d ec	 mov	 ecx, DWORD PTR _this$2[ebp]
  0003a	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0003f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00043	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0004a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 c0 10	 add	 eax, 16			; 00000010H
  00050	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax

; 425  : 	explicit FixedSizeSecBlock() : SecBlock<T, A>(S) {}

  00053	6a 28		 push	 40			; 00000028H
  00055	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	e8 00 00 00 00	 call	 ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >
  0005d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00061	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00064	05 c0 00 00 00	 add	 eax, 192		; 000000c0H
  00069	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax
  0006c	68 00 04 00 00	 push	 1024			; 00000400H
  00071	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00074	e8 00 00 00 00	 call	 ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >
  00079	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0007d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00080	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00083	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008a	59		 pop	 ecx
  0008b	c9		 leave
  0008c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Base@Twofish@CryptoPP@@QAE@XZ$7:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SimpleKeyingInterface@CryptoPP@@UAE@XZ ; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
__unwindfunclet$??0Base@Twofish@CryptoPP@@QAE@XZ$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ
__unwindfunclet$??0Base@Twofish@CryptoPP@@QAE@XZ$1:
  00010	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 10	 add	 ecx, 16			; 00000010H
  00016	e9 00 00 00 00	 jmp	 ??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$??0Base@Twofish@CryptoPP@@QAE@XZ:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Base@Twofish@CryptoPP@@QAE@XZ
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Base@Twofish@CryptoPP@@QAE@XZ ENDP			; CryptoPP::Twofish::Base::Base
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_n$ = -24						; size = 4
_this$ = -20						; size = 4
$T1 = -16						; size = 4
tv140 = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx

; 248  : 	SecBlock(const SecBlock<T, A> &t)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 166  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  0000f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c6 80 01 10 00
	00 00		 mov	 BYTE PTR [eax+4097], 0

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _t$[ebp]
  0001f	8b 89 08 10 00
	00		 mov	 ecx, DWORD PTR [ecx+4104]
  00025	89 88 08 10 00
	00		 mov	 DWORD PTR [eax+4104], ecx
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 80 08 10 00
	00		 mov	 eax, DWORD PTR [eax+4104]
  00034	89 45 e8	 mov	 DWORD PTR _n$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 183  : 		if (n <= S && !m_allocated)

  0003d	81 7d e8 00 04
	00 00		 cmp	 DWORD PTR _n$[ebp], 1024 ; 00000400H
  00044	77 40		 ja	 SHORT $LN13@SecBlock
  00046	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00049	0f b6 80 01 10
	00 00		 movzx	 eax, BYTE PTR [eax+4097]
  00050	85 c0		 test	 eax, eax
  00052	75 32		 jne	 SHORT $LN13@SecBlock

; 184  : 		{
; 185  : 			m_allocated = true;

  00054	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00057	c6 80 01 10 00
	00 01		 mov	 BYTE PTR [eax+4097], 1

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  0005e	33 c0		 xor	 eax, eax
  00060	74 14		 je	 SHORT $LN11@SecBlock
  00062	33 c0		 xor	 eax, eax
  00064	2b 45 f8	 sub	 eax, DWORD PTR _this$[ebp]
  00067	33 d2		 xor	 edx, edx
  00069	6a 10		 push	 16			; 00000010H
  0006b	59		 pop	 ecx
  0006c	f7 f1		 div	 ecx
  0006e	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  00071	89 55 f4	 mov	 DWORD PTR tv140[ebp], edx
  00074	eb 06		 jmp	 SHORT $LN9@SecBlock
$LN11@SecBlock:
  00076	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00079	89 45 f4	 mov	 DWORD PTR tv140[ebp], eax
$LN9@SecBlock:

; 186  : 			return GetAlignedArray();

  0007c	8b 45 f4	 mov	 eax, DWORD PTR tv140[ebp]
  0007f	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  00082	eb 06		 jmp	 SHORT $LN5@SecBlock

; 187  : 		}

  00084	eb 04		 jmp	 SHORT $LN5@SecBlock
$LN13@SecBlock:

; 188  : 		else
; 189  : 			return m_fallbackAllocator.allocate(n, hint);

  00086	83 65 f0 00	 and	 DWORD PTR $T1[ebp], 0
$LN5@SecBlock:

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  00090	89 88 0c 10 00
	00		 mov	 DWORD PTR [eax+4108], ecx
  00096	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00099	8b 80 08 10 00
	00		 mov	 eax, DWORD PTR [eax+4104]
  0009f	c1 e0 02	 shl	 eax, 2
  000a2	50		 push	 eax
  000a3	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  000a6	ff b0 0c 10 00
	00		 push	 DWORD PTR [eax+4108]
  000ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000af	8b 80 08 10 00
	00		 mov	 eax, DWORD PTR [eax+4104]
  000b5	c1 e0 02	 shl	 eax, 2
  000b8	50		 push	 eax
  000b9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bc	ff b0 0c 10 00
	00		 push	 DWORD PTR [eax+4108]
  000c2	e8 00 00 00 00	 call	 _memcpy_s
  000c7	83 c4 10	 add	 esp, 16			; 00000010H
  000ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	c9		 leave
  000ce	c2 04 00	 ret	 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T1 = -16						; size = 4
tv128 = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z PROC ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx

; 246  : 	explicit SecBlock(size_type size=0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 166  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  0000f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c6 80 01 10 00
	00 00		 mov	 BYTE PTR [eax+4097], 0

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  0001f	89 88 08 10 00
	00		 mov	 DWORD PTR [eax+4104], ecx
  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	89 45 fc	 mov	 DWORD PTR _this$[ebp], eax

; 183  : 		if (n <= S && !m_allocated)

  0002b	81 7d 08 00 04
	00 00		 cmp	 DWORD PTR _size$[ebp], 1024 ; 00000400H
  00032	77 40		 ja	 SHORT $LN13@SecBlock
  00034	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00037	0f b6 80 01 10
	00 00		 movzx	 eax, BYTE PTR [eax+4097]
  0003e	85 c0		 test	 eax, eax
  00040	75 32		 jne	 SHORT $LN13@SecBlock

; 184  : 		{
; 185  : 			m_allocated = true;

  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c6 80 01 10 00
	00 01		 mov	 BYTE PTR [eax+4097], 1

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  0004c	33 c0		 xor	 eax, eax
  0004e	74 14		 je	 SHORT $LN11@SecBlock
  00050	33 c0		 xor	 eax, eax
  00052	2b 45 fc	 sub	 eax, DWORD PTR _this$[ebp]
  00055	33 d2		 xor	 edx, edx
  00057	6a 10		 push	 16			; 00000010H
  00059	59		 pop	 ecx
  0005a	f7 f1		 div	 ecx
  0005c	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  0005f	89 55 f4	 mov	 DWORD PTR tv128[ebp], edx
  00062	eb 06		 jmp	 SHORT $LN9@SecBlock
$LN11@SecBlock:
  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	89 45 f4	 mov	 DWORD PTR tv128[ebp], eax
$LN9@SecBlock:

; 186  : 			return GetAlignedArray();

  0006a	8b 45 f4	 mov	 eax, DWORD PTR tv128[ebp]
  0006d	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  00070	eb 06		 jmp	 SHORT $LN5@SecBlock

; 187  : 		}

  00072	eb 04		 jmp	 SHORT $LN5@SecBlock
$LN13@SecBlock:

; 188  : 		else
; 189  : 			return m_fallbackAllocator.allocate(n, hint);

  00074	83 65 f0 00	 and	 DWORD PTR $T1[ebp], 0
$LN5@SecBlock:

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00078	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  0007e	89 88 0c 10 00
	00		 mov	 DWORD PTR [eax+4108], ecx
  00084	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00087	c9		 leave
  00088	c2 04 00	 ret	 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ENDP ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ?deallocate@?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z
_TEXT	SEGMENT
tv81 = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?deallocate@?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0>::deallocate, COMDAT
; _this$ = ecx

; 193  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  00008	33 c0		 xor	 eax, eax
  0000a	74 14		 je	 SHORT $LN7@deallocate
  0000c	33 c0		 xor	 eax, eax
  0000e	2b 45 fc	 sub	 eax, DWORD PTR _this$[ebp]
  00011	33 d2		 xor	 edx, edx
  00013	6a 10		 push	 16			; 00000010H
  00015	59		 pop	 ecx
  00016	f7 f1		 div	 ecx
  00018	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  0001b	89 55 f8	 mov	 DWORD PTR tv81[ebp], edx
  0001e	eb 06		 jmp	 SHORT $LN5@deallocate
$LN7@deallocate:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv81[ebp], eax
$LN5@deallocate:

; 194  : 		if (p == GetAlignedArray())

  00026	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00029	3b 45 f8	 cmp	 eax, DWORD PTR tv81[ebp]
  0002c	75 17		 jne	 SHORT $LN1@deallocate

; 195  : 		{
; 196  : 			assert(n <= S);
; 197  : 			assert(m_allocated);
; 198  : 			m_allocated = false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c6 80 01 10 00
	00 00		 mov	 BYTE PTR [eax+4097], 0

; 199  : 			SecureWipeArray((pointer)p, n);

  00038	ff 75 0c	 push	 DWORD PTR _n$[ebp]
  0003b	ff 75 08	 push	 DWORD PTR _p$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z ; CryptoPP::SecureWipeArray<unsigned int>
  00043	59		 pop	 ecx
  00044	59		 pop	 ecx
$LN1@deallocate:

; 200  : 		}
; 201  : 		else
; 202  : 			m_fallbackAllocator.deallocate(p, n);
; 203  : 	}

  00045	c9		 leave
  00046	c2 08 00	 ret	 8
?deallocate@?$FixedSizeAllocatorWithCleanup@I$0EAA@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,1024,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::FixedSizeSecBlock<unsigned int,40,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >::~FixedSizeSecBlock<unsigned int,40,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  00026	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	ff b0 a8 00 00
	00		 push	 DWORD PTR [eax+168]
  00033	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00036	ff b0 ac 00 00
	00		 push	 DWORD PTR [eax+172]
  0003c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?deallocate@?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
  00044	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	c9		 leave
  00054	c3		 ret	 0
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$FixedSizeSecBlock@I$0CI@V?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::FixedSizeSecBlock<unsigned int,40,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >::~FixedSizeSecBlock<unsigned int,40,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_n$ = -24						; size = 4
_this$ = -20						; size = 4
$T1 = -16						; size = 4
tv140 = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx

; 248  : 	SecBlock(const SecBlock<T, A> &t)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 166  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  0000f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c6 80 a1 00 00
	00 00		 mov	 BYTE PTR [eax+161], 0

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _t$[ebp]
  0001f	8b 89 a8 00 00
	00		 mov	 ecx, DWORD PTR [ecx+168]
  00025	89 88 a8 00 00
	00		 mov	 DWORD PTR [eax+168], ecx
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 80 a8 00 00
	00		 mov	 eax, DWORD PTR [eax+168]
  00034	89 45 e8	 mov	 DWORD PTR _n$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003a	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 183  : 		if (n <= S && !m_allocated)

  0003d	83 7d e8 28	 cmp	 DWORD PTR _n$[ebp], 40	; 00000028H
  00041	77 40		 ja	 SHORT $LN13@SecBlock
  00043	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00046	0f b6 80 a1 00
	00 00		 movzx	 eax, BYTE PTR [eax+161]
  0004d	85 c0		 test	 eax, eax
  0004f	75 32		 jne	 SHORT $LN13@SecBlock

; 184  : 		{
; 185  : 			m_allocated = true;

  00051	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00054	c6 80 a1 00 00
	00 01		 mov	 BYTE PTR [eax+161], 1

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  0005b	33 c0		 xor	 eax, eax
  0005d	74 14		 je	 SHORT $LN11@SecBlock
  0005f	33 c0		 xor	 eax, eax
  00061	2b 45 f8	 sub	 eax, DWORD PTR _this$[ebp]
  00064	33 d2		 xor	 edx, edx
  00066	6a 10		 push	 16			; 00000010H
  00068	59		 pop	 ecx
  00069	f7 f1		 div	 ecx
  0006b	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  0006e	89 55 f4	 mov	 DWORD PTR tv140[ebp], edx
  00071	eb 06		 jmp	 SHORT $LN9@SecBlock
$LN11@SecBlock:
  00073	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00076	89 45 f4	 mov	 DWORD PTR tv140[ebp], eax
$LN9@SecBlock:

; 186  : 			return GetAlignedArray();

  00079	8b 45 f4	 mov	 eax, DWORD PTR tv140[ebp]
  0007c	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  0007f	eb 06		 jmp	 SHORT $LN5@SecBlock

; 187  : 		}

  00081	eb 04		 jmp	 SHORT $LN5@SecBlock
$LN13@SecBlock:

; 188  : 		else
; 189  : 			return m_fallbackAllocator.allocate(n, hint);

  00083	83 65 f0 00	 and	 DWORD PTR $T1[ebp], 0
$LN5@SecBlock:

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00087	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  0008d	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx
  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00096	8b 80 a8 00 00
	00		 mov	 eax, DWORD PTR [eax+168]
  0009c	c1 e0 02	 shl	 eax, 2
  0009f	50		 push	 eax
  000a0	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  000a3	ff b0 ac 00 00
	00		 push	 DWORD PTR [eax+172]
  000a9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ac	8b 80 a8 00 00
	00		 mov	 eax, DWORD PTR [eax+168]
  000b2	c1 e0 02	 shl	 eax, 2
  000b5	50		 push	 eax
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	ff b0 ac 00 00
	00		 push	 DWORD PTR [eax+172]
  000bf	e8 00 00 00 00	 call	 _memcpy_s
  000c4	83 c4 10	 add	 esp, 16			; 00000010H
  000c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ca	c9		 leave
  000cb	c2 04 00	 ret	 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T1 = -16						; size = 4
tv128 = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z PROC ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >, COMDAT
; _this$ = ecx

; 246  : 	explicit SecBlock(size_type size=0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 166  : 	FixedSizeAllocatorWithCleanup() : m_allocated(false) {}

  0000f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c6 80 a1 00 00
	00 00		 mov	 BYTE PTR [eax+161], 0

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00019	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  0001f	89 88 a8 00 00
	00		 mov	 DWORD PTR [eax+168], ecx
  00025	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00028	89 45 fc	 mov	 DWORD PTR _this$[ebp], eax

; 183  : 		if (n <= S && !m_allocated)

  0002b	83 7d 08 28	 cmp	 DWORD PTR _size$[ebp], 40 ; 00000028H
  0002f	77 40		 ja	 SHORT $LN13@SecBlock
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	0f b6 80 a1 00
	00 00		 movzx	 eax, BYTE PTR [eax+161]
  0003b	85 c0		 test	 eax, eax
  0003d	75 32		 jne	 SHORT $LN13@SecBlock

; 184  : 		{
; 185  : 			m_allocated = true;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	c6 80 a1 00 00
	00 01		 mov	 BYTE PTR [eax+161], 1

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  00049	33 c0		 xor	 eax, eax
  0004b	74 14		 je	 SHORT $LN11@SecBlock
  0004d	33 c0		 xor	 eax, eax
  0004f	2b 45 fc	 sub	 eax, DWORD PTR _this$[ebp]
  00052	33 d2		 xor	 edx, edx
  00054	6a 10		 push	 16			; 00000010H
  00056	59		 pop	 ecx
  00057	f7 f1		 div	 ecx
  00059	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  0005c	89 55 f4	 mov	 DWORD PTR tv128[ebp], edx
  0005f	eb 06		 jmp	 SHORT $LN9@SecBlock
$LN11@SecBlock:
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	89 45 f4	 mov	 DWORD PTR tv128[ebp], eax
$LN9@SecBlock:

; 186  : 			return GetAlignedArray();

  00067	8b 45 f4	 mov	 eax, DWORD PTR tv128[ebp]
  0006a	89 45 f0	 mov	 DWORD PTR $T1[ebp], eax
  0006d	eb 06		 jmp	 SHORT $LN5@SecBlock

; 187  : 		}

  0006f	eb 04		 jmp	 SHORT $LN5@SecBlock
$LN13@SecBlock:

; 188  : 		else
; 189  : 			return m_fallbackAllocator.allocate(n, hint);

  00071	83 65 f0 00	 and	 DWORD PTR $T1[ebp], 0
$LN5@SecBlock:

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00075	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00078	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  0007b	89 88 ac 00 00
	00		 mov	 DWORD PTR [eax+172], ecx
  00081	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00084	c9		 leave
  00085	c2 04 00	 ret	 4
??0?$SecBlock@IV?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ENDP ; CryptoPP::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >::SecBlock<unsigned int,CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ?deallocate@?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z
_TEXT	SEGMENT
tv81 = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_n$ = 12						; size = 4
?deallocate@?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z PROC ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0>::deallocate, COMDAT
; _this$ = ecx

; 193  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	T* GetAlignedArray() {return (CRYPTOPP_BOOL_ALIGN16_ENABLED && T_Align16) ? (T*)(((byte *)m_array) + (0-(size_t)m_array)%16) : m_array;}

  00008	33 c0		 xor	 eax, eax
  0000a	74 14		 je	 SHORT $LN7@deallocate
  0000c	33 c0		 xor	 eax, eax
  0000e	2b 45 fc	 sub	 eax, DWORD PTR _this$[ebp]
  00011	33 d2		 xor	 edx, edx
  00013	6a 10		 push	 16			; 00000010H
  00015	59		 pop	 ecx
  00016	f7 f1		 div	 ecx
  00018	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  0001b	89 55 f8	 mov	 DWORD PTR tv81[ebp], edx
  0001e	eb 06		 jmp	 SHORT $LN5@deallocate
$LN7@deallocate:
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR tv81[ebp], eax
$LN5@deallocate:

; 194  : 		if (p == GetAlignedArray())

  00026	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00029	3b 45 f8	 cmp	 eax, DWORD PTR tv81[ebp]
  0002c	75 17		 jne	 SHORT $LN1@deallocate

; 195  : 		{
; 196  : 			assert(n <= S);
; 197  : 			assert(m_allocated);
; 198  : 			m_allocated = false;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	c6 80 a1 00 00
	00 00		 mov	 BYTE PTR [eax+161], 0

; 199  : 			SecureWipeArray((pointer)p, n);

  00038	ff 75 0c	 push	 DWORD PTR _n$[ebp]
  0003b	ff 75 08	 push	 DWORD PTR _p$[ebp]
  0003e	e8 00 00 00 00	 call	 ??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z ; CryptoPP::SecureWipeArray<unsigned int>
  00043	59		 pop	 ecx
  00044	59		 pop	 ecx
$LN1@deallocate:

; 200  : 		}
; 201  : 		else
; 202  : 			m_fallbackAllocator.deallocate(p, n);
; 203  : 	}

  00045	c9		 leave
  00046	c2 08 00	 ret	 8
?deallocate@?$FixedSizeAllocatorWithCleanup@I$0CI@V?$NullAllocator@I@CryptoPP@@$0A@@CryptoPP@@QAEXPAXI@Z ENDP ; CryptoPP::FixedSizeAllocatorWithCleanup<unsigned int,40,CryptoPP::NullAllocator<unsigned int>,0>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?BlockSize@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BlockSize@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::BlockSize, COMDAT
; _this$ = ecx

; 146  : 	unsigned int BlockSize() const {return this->BLOCKSIZE;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 10		 push	 16			; 00000010H
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?BlockSize@?$BlockCipherImpl@UTwofish_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::Twofish_Info,CryptoPP::BlockCipher>::BlockSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 28   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 65 fc 00	 and	 DWORD PTR $T1[ebp], 0
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_07DABDIDEC@Twofish@
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00019	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0001c	83 c8 01	 or	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00022	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00025	c9		 leave
  00026	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> > >::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVSize, COMDAT
; _this$ = ecx

; 139  : 	unsigned int IVSize() const {return INFO::IV_LENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	c9		 leave
  0000a	c3		 ret	 0
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVRequirement, COMDAT
; _this$ = ecx

; 138  : 	SimpleKeyingInterface::IV_Requirement IVRequirement() const {return (SimpleKeyingInterface::IV_Requirement)INFO::IV_REQUIREMENT;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 04		 push	 4
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::IVRequirement
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T1 = -8						; size = 4
_n$ = -4						; size = 4
_n$ = 8							; size = 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::GetValidKeyLength, COMDAT
; _this$ = ecx

; 137  : 	size_t GetValidKeyLength(size_t n) const {return INFO::StaticGetValidKeyLength(n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 100  : 		if (n < (size_t)MIN_KEYLENGTH)

  0000f	83 7d fc 00	 cmp	 DWORD PTR _n$[ebp], 0
  00013	73 08		 jae	 SHORT $LN4@GetValidKe

; 101  : 			return MIN_KEYLENGTH;

  00015	83 65 f8 00	 and	 DWORD PTR $T1[ebp], 0
  00019	eb 2b		 jmp	 SHORT $LN3@GetValidKe
  0001b	eb 29		 jmp	 SHORT $LN3@GetValidKe
$LN4@GetValidKe:

; 102  : 		else if (n > (size_t)MAX_KEYLENGTH)

  0001d	83 7d fc 20	 cmp	 DWORD PTR _n$[ebp], 32	; 00000020H
  00021	76 0b		 jbe	 SHORT $LN6@GetValidKe

; 103  : 			return (size_t)MAX_KEYLENGTH;

  00023	c7 45 f8 20 00
	00 00		 mov	 DWORD PTR $T1[ebp], 32	; 00000020H
  0002a	eb 1a		 jmp	 SHORT $LN3@GetValidKe
  0002c	eb 18		 jmp	 SHORT $LN3@GetValidKe
$LN6@GetValidKe:

; 104  : 		else
; 105  : 		{
; 106  : 			n += KEYLENGTH_MULTIPLE-1;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00031	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 107  : 			return n - n%KEYLENGTH_MULTIPLE;

  00034	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00037	33 d2		 xor	 edx, edx
  00039	33 c9		 xor	 ecx, ecx
  0003b	41		 inc	 ecx
  0003c	f7 f1		 div	 ecx
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00041	2b c2		 sub	 eax, edx
  00043	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
$LN3@GetValidKe:

; 137  : 	size_t GetValidKeyLength(size_t n) const {return INFO::StaticGetValidKeyLength(n);}

  00046	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00049	c9		 leave
  0004a	c2 04 00	 ret	 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::GetValidKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::DefaultKeyLength, COMDAT
; _this$ = ecx

; 136  : 	size_t DefaultKeyLength() const {return INFO::DEFAULT_KEYLENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 10		 push	 16			; 00000010H
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::DefaultKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MaxKeyLength, COMDAT
; _this$ = ecx

; 135  : 	size_t MaxKeyLength() const {return (size_t)INFO::MAX_KEYLENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 20		 push	 32			; 00000020H
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MaxKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MinKeyLength, COMDAT
; _this$ = ecx

; 134  : 	size_t MinKeyLength() const {return INFO::MIN_KEYLENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	c9		 leave
  0000a	c3		 ret	 0
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UTwofish_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Twofish_Info> >::MinKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z PROC		; CryptoPP::Camellia::Base::Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	51		 push	 ecx
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00027	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 c0 04	 add	 eax, 4
  0002d	89 45 ec	 mov	 DWORD PTR _this$2[ebp], eax
  00030	8b 45 ec	 mov	 eax, DWORD PTR _this$2[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00036	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00039	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0003c	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0003f	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	88 41 0c	 mov	 BYTE PTR [ecx+12], al
  00048	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00052	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00055	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00058	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0005b	83 c0 14	 add	 eax, 20			; 00000014H
  0005e	50		 push	 eax
  0005f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	83 c1 14	 add	 ecx, 20			; 00000014H
  00065	e8 00 00 00 00	 call	 ??0?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
  0006a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0006e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00074	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007b	59		 pop	 ecx
  0007c	c9		 leave
  0007d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Base@Camellia@CryptoPP@@QAE@ABV012@@Z ENDP		; CryptoPP::Camellia::Base::Base
; Function compile flags: /Odspy
;	COMDAT ??0Base@Camellia@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Base@Camellia@CryptoPP@@QAE@XZ PROC			; CryptoPP::Camellia::Base::Base, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Base@Camellia@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	51		 push	 ecx
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00027	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0002b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c0 04	 add	 eax, 4
  00031	89 45 ec	 mov	 DWORD PTR _this$2[ebp], eax
  00034	6a 01		 push	 1
  00036	8b 4d ec	 mov	 ecx, DWORD PTR _this$2[ebp]
  00039	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  0003e	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00042	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00049	6a 00		 push	 0
  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	83 c1 14	 add	 ecx, 20			; 00000014H
  00051	e8 00 00 00 00	 call	 ??0?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
  00056	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00060	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00067	59		 pop	 ecx
  00068	c9		 leave
  00069	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Base@Camellia@CryptoPP@@QAE@XZ$6:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SimpleKeyingInterface@CryptoPP@@UAE@XZ ; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
__unwindfunclet$??0Base@Camellia@CryptoPP@@QAE@XZ$0:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0Base@Camellia@CryptoPP@@QAE@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Base@Camellia@CryptoPP@@QAE@XZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Base@Camellia@CryptoPP@@QAE@XZ ENDP			; CryptoPP::Camellia::Base::Base
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_n$ = -24						; size = 4
_this$ = -20						; size = 4
_p$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ PROC ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::~SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >, COMDAT
; _this$ = ecx

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002e	89 45 e8	 mov	 DWORD PTR _n$[ebp], eax
  00031	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00037	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax

; 105  : 		SecureWipeArray((pointer)p, n);

  0003a	ff 75 e8	 push	 DWORD PTR _n$[ebp]
  0003d	ff 75 f0	 push	 DWORD PTR _p$[ebp]
  00040	e8 00 00 00 00	 call	 ??$SecureWipeArray@I@CryptoPP@@YAXPAII@Z ; CryptoPP::SecureWipeArray<unsigned int>
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 106  : 
; 107  : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 108  : 		if (T_Align16 && n*sizeof(T) >= 16)

  00047	33 c0		 xor	 eax, eax
  00049	74 0b		 je	 SHORT $LN4@SecBlock

; 109  : 			return AlignedDeallocate(p);

  0004b	ff 75 f0	 push	 DWORD PTR _p$[ebp]
  0004e	e8 00 00 00 00	 call	 ?AlignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::AlignedDeallocate
  00053	59		 pop	 ecx
  00054	eb 09		 jmp	 SHORT $LN2@SecBlock
$LN4@SecBlock:

; 110  : #endif
; 111  : 
; 112  : 		UnalignedDeallocate(p);

  00056	ff 75 f0	 push	 DWORD PTR _p$[ebp]
  00059	e8 00 00 00 00	 call	 ?UnalignedDeallocate@CryptoPP@@YAXPAX@Z ; CryptoPP::UnalignedDeallocate
  0005e	59		 pop	 ecx
$LN2@SecBlock:

; 261  : 		{m_alloc.deallocate(m_ptr, m_size);}

  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	c9		 leave
  0006b	c3		 ret	 0
  0006c	cc		 int	 3
  0006d	cc		 int	 3
  0006e	cc		 int	 3
  0006f	cc		 int	 3
  00070	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@XZ ENDP ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::~SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
_n$ = -8						; size = 4
_this$ = -4						; size = 4
_t$ = 8							; size = 4
??0?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z PROC ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >, COMDAT
; _this$ = ecx

; 248  : 	SecBlock(const SecBlock<T, A> &t)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _t$[ebp]
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 91   : 		CheckSize(n);

  0001e	ff 75 f8	 push	 DWORD PTR _n$[ebp]
  00021	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned int>::CheckSize
  00026	59		 pop	 ecx

; 92   : 		if (n == 0)

  00027	83 7d f8 00	 cmp	 DWORD PTR _n$[ebp], 0
  0002b	75 06		 jne	 SHORT $LN6@SecBlock

; 93   : 			return NULL;

  0002d	83 65 f4 00	 and	 DWORD PTR $T1[ebp], 0
  00031	eb 26		 jmp	 SHORT $LN5@SecBlock
$LN6@SecBlock:

; 94   : 
; 95   : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 96   : 		if (T_Align16 && n*sizeof(T) >= 16)

  00033	33 c0		 xor	 eax, eax
  00035	74 12		 je	 SHORT $LN7@SecBlock

; 97   : 			return (pointer)AlignedAllocate(n*sizeof(T));

  00037	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  0003a	c1 e0 02	 shl	 eax, 2
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  00043	59		 pop	 ecx
  00044	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00047	eb 10		 jmp	 SHORT $LN5@SecBlock
$LN7@SecBlock:

; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  00049	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  0004c	c1 e0 02	 shl	 eax, 2
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00055	59		 pop	 ecx
  00056	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
$LN5@SecBlock:

; 249  : 		: m_size(t.m_size) {m_ptr = m_alloc.allocate(m_size, NULL); memcpy_s(m_ptr, m_size*sizeof(T), t.m_ptr, m_size*sizeof(T));}

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0005f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00068	c1 e0 02	 shl	 eax, 2
  0006b	50		 push	 eax
  0006c	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  0006f	ff 70 08	 push	 DWORD PTR [eax+8]
  00072	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00075	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00078	c1 e0 02	 shl	 eax, 2
  0007b	50		 push	 eax
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	ff 70 08	 push	 DWORD PTR [eax+8]
  00082	e8 00 00 00 00	 call	 _memcpy_s
  00087	83 c4 10	 add	 esp, 16			; 00000010H
  0008a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	c9		 leave
  0008e	c2 04 00	 ret	 4
??0?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@ABV01@@Z ENDP ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ??0?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
_size$ = 8						; size = 4
??0?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z PROC ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >, COMDAT
; _this$ = ecx

; 246  : 	explicit SecBlock(size_type size=0)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  0000e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 91   : 		CheckSize(n);

  00011	ff 75 08	 push	 DWORD PTR _size$[ebp]
  00014	e8 00 00 00 00	 call	 ?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z ; CryptoPP::AllocatorBase<unsigned int>::CheckSize
  00019	59		 pop	 ecx

; 92   : 		if (n == 0)

  0001a	83 7d 08 00	 cmp	 DWORD PTR _size$[ebp], 0
  0001e	75 06		 jne	 SHORT $LN6@SecBlock

; 93   : 			return NULL;

  00020	83 65 fc 00	 and	 DWORD PTR $T1[ebp], 0
  00024	eb 26		 jmp	 SHORT $LN5@SecBlock
$LN6@SecBlock:

; 94   : 
; 95   : #if CRYPTOPP_BOOL_ALIGN16_ENABLED
; 96   : 		if (T_Align16 && n*sizeof(T) >= 16)

  00026	33 c0		 xor	 eax, eax
  00028	74 12		 je	 SHORT $LN7@SecBlock

; 97   : 			return (pointer)AlignedAllocate(n*sizeof(T));

  0002a	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  0002d	c1 e0 02	 shl	 eax, 2
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?AlignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::AlignedAllocate
  00036	59		 pop	 ecx
  00037	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0003a	eb 10		 jmp	 SHORT $LN5@SecBlock
$LN7@SecBlock:

; 98   : #endif
; 99   : 
; 100  : 		return (pointer)UnalignedAllocate(n*sizeof(T));

  0003c	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  0003f	c1 e0 02	 shl	 eax, 2
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ?UnalignedAllocate@CryptoPP@@YAPAXI@Z ; CryptoPP::UnalignedAllocate
  00048	59		 pop	 ecx
  00049	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
$LN5@SecBlock:

; 247  : 		: m_size(size) {m_ptr = m_alloc.allocate(size, NULL);}

  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00052	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00055	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00058	c9		 leave
  00059	c2 04 00	 ret	 4
??0?$SecBlock@IV?$AllocatorWithCleanup@I$0A@@CryptoPP@@@CryptoPP@@QAE@I@Z ENDP ; CryptoPP::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >::SecBlock<unsigned int,CryptoPP::AllocatorWithCleanup<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UAE@XZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::~BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?BlockSize@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BlockSize@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::BlockSize, COMDAT
; _this$ = ecx

; 146  : 	unsigned int BlockSize() const {return this->BLOCKSIZE;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 10		 push	 16			; 00000010H
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?BlockSize@?$BlockCipherImpl@UCamellia_Info@CryptoPP@@VBlockCipher@2@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockCipherImpl<CryptoPP::Camellia_Info,CryptoPP::BlockCipher>::BlockSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::AlgorithmName, COMDAT
; _this$ = ecx

; 28   : 	std::string AlgorithmName() const {return ALGORITHM_INFO::StaticAlgorithmName();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 65 fc 00	 and	 DWORD PTR $T1[ebp], 0
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_08EGCCLPME@Camellia@
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00019	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0001c	83 c8 01	 or	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00022	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00025	c9		 leave
  00026	c2 04 00	 ret	 4
?AlgorithmName@?$AlgorithmImpl@V?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@V12@@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::AlgorithmImpl<CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >,CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> > >::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVSize, COMDAT
; _this$ = ecx

; 139  : 	unsigned int IVSize() const {return INFO::IV_LENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	c9		 leave
  0000a	c3		 ret	 0
?IVSize@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVRequirement, COMDAT
; _this$ = ecx

; 138  : 	SimpleKeyingInterface::IV_Requirement IVRequirement() const {return (SimpleKeyingInterface::IV_Requirement)INFO::IV_REQUIREMENT;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 04		 push	 4
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?IVRequirement@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBE?AW4IV_Requirement@SimpleKeyingInterface@2@XZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::IVRequirement
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
$T1 = -8						; size = 4
_n$ = -4						; size = 4
_n$ = 8							; size = 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::GetValidKeyLength, COMDAT
; _this$ = ecx

; 137  : 	size_t GetValidKeyLength(size_t n) const {return INFO::StaticGetValidKeyLength(n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  0000c	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 100  : 		if (n < (size_t)MIN_KEYLENGTH)

  0000f	83 7d fc 10	 cmp	 DWORD PTR _n$[ebp], 16	; 00000010H
  00013	73 0b		 jae	 SHORT $LN4@GetValidKe

; 101  : 			return MIN_KEYLENGTH;

  00015	c7 45 f8 10 00
	00 00		 mov	 DWORD PTR $T1[ebp], 16	; 00000010H
  0001c	eb 2e		 jmp	 SHORT $LN3@GetValidKe
  0001e	eb 2c		 jmp	 SHORT $LN3@GetValidKe
$LN4@GetValidKe:

; 102  : 		else if (n > (size_t)MAX_KEYLENGTH)

  00020	83 7d fc 20	 cmp	 DWORD PTR _n$[ebp], 32	; 00000020H
  00024	76 0b		 jbe	 SHORT $LN6@GetValidKe

; 103  : 			return (size_t)MAX_KEYLENGTH;

  00026	c7 45 f8 20 00
	00 00		 mov	 DWORD PTR $T1[ebp], 32	; 00000020H
  0002d	eb 1d		 jmp	 SHORT $LN3@GetValidKe
  0002f	eb 1b		 jmp	 SHORT $LN3@GetValidKe
$LN6@GetValidKe:

; 104  : 		else
; 105  : 		{
; 106  : 			n += KEYLENGTH_MULTIPLE-1;

  00031	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00034	83 c0 07	 add	 eax, 7
  00037	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax

; 107  : 			return n - n%KEYLENGTH_MULTIPLE;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0003d	33 d2		 xor	 edx, edx
  0003f	6a 08		 push	 8
  00041	59		 pop	 ecx
  00042	f7 f1		 div	 ecx
  00044	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00047	2b c2		 sub	 eax, edx
  00049	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
$LN3@GetValidKe:

; 137  : 	size_t GetValidKeyLength(size_t n) const {return INFO::StaticGetValidKeyLength(n);}

  0004c	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  0004f	c9		 leave
  00050	c2 04 00	 ret	 4
?GetValidKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEII@Z ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::GetValidKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::DefaultKeyLength, COMDAT
; _this$ = ecx

; 136  : 	size_t DefaultKeyLength() const {return INFO::DEFAULT_KEYLENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 10		 push	 16			; 00000010H
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?DefaultKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::DefaultKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MaxKeyLength, COMDAT
; _this$ = ecx

; 135  : 	size_t MaxKeyLength() const {return (size_t)INFO::MAX_KEYLENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 20		 push	 32			; 00000020H
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?MaxKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MaxKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\seckey.h
;	COMDAT ?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MinKeyLength, COMDAT
; _this$ = ecx

; 134  : 	size_t MinKeyLength() const {return INFO::MIN_KEYLENGTH;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 10		 push	 16			; 00000010H
  00009	58		 pop	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?MinKeyLength@?$SimpleKeyingInterfaceImpl@V?$TwoBases@VBlockCipher@CryptoPP@@UCamellia_Info@2@@CryptoPP@@V12@@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterfaceImpl<CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info>,CryptoPP::TwoBases<CryptoPP::BlockCipher,CryptoPP::Camellia_Info> >::MinKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_n$ = 8							; size = 4
?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z PROC	; CryptoPP::AllocatorBase<unsigned int>::CheckSize, COMDAT

; 38   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 39   : 		if (n > ~size_t(0) / sizeof(T))

  00028	81 7d 08 ff ff
	ff 3f		 cmp	 DWORD PTR _n$[ebp], 1073741823 ; 3fffffffH
  0002f	76 37		 jbe	 SHORT $LN3@CheckSize

; 40   : 			throw InvalidArgument("AllocatorBase: requested size would cause integer overflow");

  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5w@
  00036	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00045	50		 push	 eax
  00046	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00049	e8 00 00 00 00	 call	 ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
  0004e	68 00 00 00 00	 push	 OFFSET __TI3?AVInvalidArgument@CryptoPP@@
  00053	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 __CxxThrowException@8
  0005c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00060	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00063	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
$LN3@CheckSize:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h

; 41   : 	}

  00068	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00072	59		 pop	 ecx
  00073	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00076	33 cd		 xor	 ecx, ebp
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	c9		 leave
  0007e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckSize@?$AllocatorBase@I@CryptoPP@@KAXI@Z ENDP	; CryptoPP::AllocatorBase<unsigned int>::CheckSize
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h
;	COMDAT ?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z
_TEXT	SEGMENT
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_n$ = 8							; size = 4
?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z PROC	; CryptoPP::AllocatorBase<unsigned char>::CheckSize, COMDAT

; 38   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 39   : 		if (n > ~size_t(0) / sizeof(T))

  00028	83 7d 08 ff	 cmp	 DWORD PTR _n$[ebp], -1
  0002c	76 37		 jbe	 SHORT $LN3@CheckSize

; 40   : 			throw InvalidArgument("AllocatorBase: requested size would cause integer overflow");

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@LFCPKOMM@AllocatorBase?3?5requested?5size?5w@
  00033	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00036	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003b	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00042	50		 push	 eax
  00043	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00046	e8 00 00 00 00	 call	 ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::InvalidArgument::InvalidArgument
  0004b	68 00 00 00 00	 push	 OFFSET __TI3?AVInvalidArgument@CryptoPP@@
  00050	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 __CxxThrowException@8
  00059	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0005d	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00060	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
$LN3@CheckSize:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\secblock.h

; 41   : 	}

  00065	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006f	59		 pop	 ecx
  00070	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00073	33 cd		 xor	 ecx, ebp
  00075	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007a	c9		 leave
  0007b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckSize@?$AllocatorBase@E@CryptoPP@@KAXI@Z ENDP	; CryptoPP::AllocatorBase<unsigned char>::CheckSize
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hardFlush$ = 8						; size = 1
_blocking$ = 12						; size = 1
?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z PROC ; CryptoPP::Bufferless<CryptoPP::Sink>::IsolatedFlush, COMDAT
; _this$ = ecx

; 52   : 	bool IsolatedFlush(bool hardFlush, bool blocking) {return false;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	c9		 leave
  0000a	c2 08 00	 ret	 8
?IsolatedFlush@?$Bufferless@VSink@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ENDP ; CryptoPP::Bufferless<CryptoPP::Sink>::IsolatedFlush
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_target$ = 8						; size = 4
_begin$ = 12						; size = 4
_end$ = 16						; size = 8
_channel$ = 24						; size = 4
_blocking$ = 28						; size = 1
?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z PROC ; CryptoPP::Sink::CopyRangeTo2, COMDAT
; _this$ = ecx

; 195  : 		{return 0;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	c9		 leave
  0000a	c2 18 00	 ret	 24			; 00000018H
?CopyRangeTo2@Sink@CryptoPP@@UBEIAAVBufferedTransformation@2@AA_K_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ENDP ; CryptoPP::Sink::CopyRangeTo2
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_target$ = 8						; size = 4
_transferBytes$ = 12					; size = 4
_channel$ = 16						; size = 4
_blocking$ = 20						; size = 1
?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z PROC ; CryptoPP::Sink::TransferTo2, COMDAT
; _this$ = ecx

; 193  : 		{transferBytes = 0; return 0;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 0c	 mov	 eax, DWORD PTR _transferBytes$[ebp]
  0000a	33 c9		 xor	 ecx, ecx
  0000c	33 d2		 xor	 edx, edx
  0000e	89 08		 mov	 DWORD PTR [eax], ecx
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00013	33 c0		 xor	 eax, eax
  00015	c9		 leave
  00016	c2 10 00	 ret	 16			; 00000010H
?TransferTo2@Sink@CryptoPP@@UAEIAAVBufferedTransformation@2@AA_KABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@_N@Z ENDP ; CryptoPP::Sink::TransferTo2
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1Store@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Store@CryptoPP@@UAE@XZ PROC				; CryptoPP::Store::~Store, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1Store@CryptoPP@@UAE@XZ ENDP				; CryptoPP::Store::~Store
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?NumberOfMessages@Store@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?NumberOfMessages@Store@CryptoPP@@UBEIXZ PROC		; CryptoPP::Store::NumberOfMessages, COMDAT
; _this$ = ecx

; 178  : 	unsigned int NumberOfMessages() const {return m_messageEnd ? 0 : 1;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	0f b6 40 10	 movzx	 eax, BYTE PTR [eax+16]
  0000f	85 c0		 test	 eax, eax
  00011	74 06		 je	 SHORT $LN3@NumberOfMe
  00013	83 65 fc 00	 and	 DWORD PTR tv67[ebp], 0
  00017	eb 07		 jmp	 SHORT $LN4@NumberOfMe
$LN3@NumberOfMe:
  00019	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
$LN4@NumberOfMe:
  00020	8b 45 fc	 mov	 eax, DWORD PTR tv67[ebp]
  00023	c9		 leave
  00024	c3		 ret	 0
?NumberOfMessages@Store@CryptoPP@@UBEIXZ ENDP		; CryptoPP::Store::NumberOfMessages
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_parameters$ = 8					; size = 4
?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z PROC ; CryptoPP::Store::IsolatedInitialize, COMDAT
; _this$ = ecx

; 173  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 174  : 		m_messageEnd = false;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c6 40 10 00	 mov	 BYTE PTR [eax+16], 0

; 175  : 		StoreInitialize(parameters);

  0000e	ff 75 08	 push	 DWORD PTR _parameters$[ebp]
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 00		 mov	 eax, DWORD PTR [eax]
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	ff 90 b0 00 00
	00		 call	 DWORD PTR [eax+176]

; 176  : 	}

  0001f	c9		 leave
  00020	c2 04 00	 ret	 4
?IsolatedInitialize@Store@CryptoPP@@UAEXABVNameValuePairs@2@@Z ENDP ; CryptoPP::Store::IsolatedInitialize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ PROC ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::GetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 160  : 		{return m_autoSignalPropagation;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0000d	c9		 leave
  0000e	c3		 ret	 0
?GetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UBEHXZ ENDP ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::GetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_propagation$ = 8					; size = 4
?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z PROC ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::SetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 158  : 		{m_autoSignalPropagation = propagation;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _propagation$[ebp]
  0000d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00010	c9		 leave
  00011	c2 04 00	 ret	 4
?SetAutoSignalPropagation@?$AutoSignaling@V?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@@CryptoPP@@UAEXH@Z ENDP ; CryptoPP::AutoSignaling<CryptoPP::InputRejecting<CryptoPP::BufferedTransformation> >::SetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 1
?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelMessageSeriesEnd, COMDAT
; _this$ = ecx

; 95   : 	bool ChannelMessageSeriesEnd(const std::string &, int, bool) {throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  00013	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00016	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  0001b	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  00020	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@ChannelMes:
  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	c9		 leave
  00034	c2 0c 00	 ret	 12			; 0000000cH
?ChannelMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_channel$ = 8						; size = 4
_begin$ = 12						; size = 4
_length$ = 16						; size = 4
_messageEnd$ = 20					; size = 4
_blocking$ = 24						; size = 1
?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelPut2, COMDAT
; _this$ = ecx

; 94   : 		{throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  00013	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00016	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  0001b	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  00020	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@ChannelPut:
  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	c9		 leave
  00034	c2 14 00	 ret	 20			; 00000014H
?ChannelPut2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::ChannelPut2
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 1
?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedMessageSeriesEnd, COMDAT
; _this$ = ecx

; 91   : 	bool IsolatedMessageSeriesEnd(bool) {throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  00013	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00016	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  0001b	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  00020	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@IsolatedMe:
  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	c9		 leave
  00034	c2 04 00	 ret	 4
?IsolatedMessageSeriesEnd@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
___formal$ = 12						; size = 1
?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedFlush, COMDAT
; _this$ = ecx

; 90   : 	bool IsolatedFlush(bool, bool) {return false;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	c9		 leave
  0000a	c2 08 00	 ret	 8
?IsolatedFlush@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAE_N_N0@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::IsolatedFlush
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\simple.h
;	COMDAT ?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z
_TEXT	SEGMENT
_this$ = -48						; size = 4
$T1 = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_begin$ = 8						; size = 4
_length$ = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z PROC ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::Put2, COMDAT
; _this$ = ecx

; 89   : 		{throw InputRejected();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d d0	 mov	 DWORD PTR _this$[ebp], ecx
  00013	8d 4d d4	 lea	 ecx, DWORD PTR $T1[ebp]
  00016	e8 00 00 00 00	 call	 ??0InputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@QAE@XZ ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::InputRejected::InputRejected
  0001b	68 00 00 00 00	 push	 OFFSET __TI4?AUInputRejected@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@
  00020	8d 45 d4	 lea	 eax, DWORD PTR $T1[ebp]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Put2:
  00029	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0002c	33 cd		 xor	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	c9		 leave
  00034	c2 10 00	 ret	 16			; 00000010H
?Put2@?$InputRejecting@VBufferedTransformation@CryptoPP@@@CryptoPP@@UAEIPBEIH_N@Z ENDP ; CryptoPP::InputRejecting<CryptoPP::BufferedTransformation>::Put2
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1BufferedTransformation@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BufferedTransformation@CryptoPP@@UAE@XZ PROC		; CryptoPP::BufferedTransformation::~BufferedTransformation, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1BufferedTransformation@CryptoPP@@UAE@XZ ENDP		; CryptoPP::BufferedTransformation::~BufferedTransformation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_newAttachment$ = 8					; size = 4
?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z PROC ; CryptoPP::BufferedTransformation::Detach, COMDAT
; _this$ = ecx

; 1017 : 			{assert(!Attachable()); throw NotImplemented("BufferedTransformation: this object is not attachable");}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d ac	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@FIHMKEGL@BufferedTransformation?3?5this?5ob@
  00030	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00038	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  0003f	50		 push	 eax
  00040	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00043	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00048	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  0004d	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
  00056	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0005a	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0005d	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
$LN2@Detach:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 1017 : 			{assert(!Attachable()); throw NotImplemented("BufferedTransformation: this object is not attachable");}

  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	c9		 leave
  00078	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Detach@BufferedTransformation@CryptoPP@@UAEXPAV12@@Z ENDP ; CryptoPP::BufferedTransformation::Detach
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ PROC ; CryptoPP::BufferedTransformation::AttachedTransformation, COMDAT
; _this$ = ecx

; 1014 : 			{return const_cast<BufferedTransformation *>(this)->AttachedTransformation();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	ff 90 a4 00 00
	00		 call	 DWORD PTR [eax+164]
  00015	c9		 leave
  00016	c3		 ret	 0
?AttachedTransformation@BufferedTransformation@CryptoPP@@UBEPBV12@XZ ENDP ; CryptoPP::BufferedTransformation::AttachedTransformation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ PROC ; CryptoPP::BufferedTransformation::AttachedTransformation, COMDAT
; _this$ = ecx

; 1011 : 		virtual BufferedTransformation *AttachedTransformation() {assert(!Attachable()); return 0;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	c9		 leave
  0000a	c3		 ret	 0
?AttachedTransformation@BufferedTransformation@CryptoPP@@UAEPAV12@XZ ENDP ; CryptoPP::BufferedTransformation::AttachedTransformation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ PROC ; CryptoPP::BufferedTransformation::Attachable, COMDAT
; _this$ = ecx

; 1009 : 		virtual bool Attachable() {return false;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	c9		 leave
  0000a	c3		 ret	 0
?Attachable@BufferedTransformation@CryptoPP@@UAE_NXZ ENDP ; CryptoPP::BufferedTransformation::Attachable
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::BufferedTransformation::NumberOfMessageSeries, COMDAT
; _this$ = ecx

; 951  : 		virtual unsigned int NumberOfMessageSeries() const {return 0;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	c9		 leave
  0000a	c3		 ret	 0
?NumberOfMessageSeries@BufferedTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BufferedTransformation::NumberOfMessageSeries
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::BufferedTransformation::NumberOfMessagesInThisSeries, COMDAT
; _this$ = ecx

; 950  : 		virtual unsigned int NumberOfMessagesInThisSeries() const {return NumberOfMessages();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	ff 50 5c	 call	 DWORD PTR [eax+92]
  00012	c9		 leave
  00013	c3		 ret	 0
?NumberOfMessagesInThisSeries@BufferedTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BufferedTransformation::NumberOfMessagesInThisSeries
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ PROC ; CryptoPP::BufferedTransformation::GetNextMessageSeries, COMDAT
; _this$ = ecx

; 949  : 		virtual bool GetNextMessageSeries() {return false;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	c9		 leave
  0000a	c3		 ret	 0
?GetNextMessageSeries@BufferedTransformation@CryptoPP@@UAE_NXZ ENDP ; CryptoPP::BufferedTransformation::GetNextMessageSeries
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ PROC ; CryptoPP::BufferedTransformation::GetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 860  : 		virtual int GetAutoSignalPropagation() const {return 0;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	c9		 leave
  0000a	c3		 ret	 0
?GetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UBEHXZ ENDP ; CryptoPP::BufferedTransformation::GetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_propagation$ = 8					; size = 4
?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z PROC ; CryptoPP::BufferedTransformation::SetAutoSignalPropagation, COMDAT
; _this$ = ecx

; 857  : 		virtual void SetAutoSignalPropagation(int propagation) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c2 04 00	 ret	 4
?SetAutoSignalPropagation@BufferedTransformation@CryptoPP@@UAEXH@Z ENDP ; CryptoPP::BufferedTransformation::SetAutoSignalPropagation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_blocking$ = 8						; size = 1
?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z PROC ; CryptoPP::BufferedTransformation::IsolatedMessageSeriesEnd, COMDAT
; _this$ = ecx

; 835  : 		virtual bool IsolatedMessageSeriesEnd(bool blocking) {return false;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	c9		 leave
  0000a	c2 04 00	 ret	 4
?IsolatedMessageSeriesEnd@BufferedTransformation@CryptoPP@@UAE_N_N@Z ENDP ; CryptoPP::BufferedTransformation::IsolatedMessageSeriesEnd
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_inString$ = 8						; size = 4
_length$ = 12						; size = 4
_messageEnd$ = 16					; size = 4
_blocking$ = 20						; size = 1
?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z PROC ; CryptoPP::BufferedTransformation::PutModifiable2, COMDAT
; _this$ = ecx

; 818  : 			{return Put2(inString, length, messageEnd, blocking);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 14	 push	 DWORD PTR _blocking$[ebp]
  0000a	ff 75 10	 push	 DWORD PTR _messageEnd$[ebp]
  0000d	ff 75 0c	 push	 DWORD PTR _length$[ebp]
  00010	ff 75 08	 push	 DWORD PTR _inString$[ebp]
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	ff 50 14	 call	 DWORD PTR [eax+20]
  0001e	c9		 leave
  0001f	c2 10 00	 ret	 16			; 00000010H
?PutModifiable2@BufferedTransformation@CryptoPP@@UAEIPAEIH_N@Z ENDP ; CryptoPP::BufferedTransformation::PutModifiable2
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BufferedTransformation::CanModifyInput, COMDAT
; _this$ = ecx

; 801  : 		virtual bool CanModifyInput() const {return false;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	c9		 leave
  0000a	c3		 ret	 0
?CanModifyInput@BufferedTransformation@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BufferedTransformation::CanModifyInput
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z PROC ; CryptoPP::BufferedTransformation::CreatePutSpace, COMDAT
; _this$ = ecx

; 799  : 		virtual byte * CreatePutSpace(size_t &size) {size=0; return NULL;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  0000a	83 20 00	 and	 DWORD PTR [eax], 0
  0000d	33 c0		 xor	 eax, eax
  0000f	c9		 leave
  00010	c2 04 00	 ret	 4
?CreatePutSpace@BufferedTransformation@CryptoPP@@UAEPAEAAI@Z ENDP ; CryptoPP::BufferedTransformation::CreatePutSpace
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ??0BufferedTransformation@CryptoPP@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0BufferedTransformation@CryptoPP@@QAE@XZ PROC		; CryptoPP::BufferedTransformation::BufferedTransformation, COMDAT
; _this$ = ecx

; 777  : 	BufferedTransformation() : Algorithm(false) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6a 00		 push	 0
  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ??0Algorithm@CryptoPP@@QAE@_N@Z ; CryptoPP::Algorithm::Algorithm
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	c9		 leave
  00015	c3		 ret	 0
??0BufferedTransformation@CryptoPP@@QAE@XZ ENDP		; CryptoPP::BufferedTransformation::BufferedTransformation
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1RandomNumberGenerator@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1RandomNumberGenerator@CryptoPP@@UAE@XZ PROC		; CryptoPP::RandomNumberGenerator::~RandomNumberGenerator, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1RandomNumberGenerator@CryptoPP@@UAE@XZ ENDP		; CryptoPP::RandomNumberGenerator::~RandomNumberGenerator
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ PROC ; CryptoPP::RandomNumberGenerator::CanIncorporateEntropy, COMDAT
; _this$ = ecx

; 676  : 	virtual bool CanIncorporateEntropy() const {return false;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	c9		 leave
  0000a	c3		 ret	 0
?CanIncorporateEntropy@RandomNumberGenerator@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::RandomNumberGenerator::CanIncorporateEntropy
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_input$ = 8						; size = 4
_length$ = 12						; size = 4
?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z PROC ; CryptoPP::RandomNumberGenerator::IncorporateEntropy, COMDAT
; _this$ = ecx

; 673  : 	virtual void IncorporateEntropy(const byte *input, size_t length) {throw NotImplemented("RandomNumberGenerator: IncorporateEntropy not implemented");}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d ac	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@CFJCNMFC@RandomNumberGenerator?3?5Incorpor@
  00030	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00038	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  0003f	50		 push	 eax
  00040	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00043	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00048	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  0004d	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
  00056	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0005a	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0005d	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
$LN2@Incorporat:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 673  : 	virtual void IncorporateEntropy(const byte *input, size_t length) {throw NotImplemented("RandomNumberGenerator: IncorporateEntropy not implemented");}

  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	c9		 leave
  00078	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IncorporateEntropy@RandomNumberGenerator@CryptoPP@@UAEXPBEI@Z ENDP ; CryptoPP::RandomNumberGenerator::IncorporateEntropy
; Function compile flags: /Odspy
;	COMDAT ??1SymmetricCipher@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SymmetricCipher@CryptoPP@@UAE@XZ PROC		; CryptoPP::SymmetricCipher::~SymmetricCipher, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1SymmetricCipher@CryptoPP@@UAE@XZ ENDP		; CryptoPP::SymmetricCipher::~SymmetricCipher
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ PROC ; CryptoPP::SymmetricCipher::GetAlgorithm, COMDAT
; _this$ = ecx

; 614  : 	const Algorithm & GetAlgorithm() const {return *this;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	c9		 leave
  0000e	c3		 ret	 0
?GetAlgorithm@SymmetricCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ENDP ; CryptoPP::SymmetricCipher::GetAlgorithm
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ PROC ; CryptoPP::BlockCipher::GetAlgorithm, COMDAT
; _this$ = ecx

; 607  : 	const Algorithm & GetAlgorithm() const {return *this;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	c9		 leave
  0000e	c3		 ret	 0
?GetAlgorithm@BlockCipher@CryptoPP@@MBEABVAlgorithm@2@XZ ENDP ; CryptoPP::BlockCipher::GetAlgorithm
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::StreamTransformation::MinLastBlockSize, COMDAT
; _this$ = ecx

; 496  : 	virtual unsigned int MinLastBlockSize() const {return 0;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	c9		 leave
  0000a	c3		 ret	 0
?MinLastBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::StreamTransformation::MinLastBlockSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed, COMDAT
; _this$ = ecx

; 483  : 	virtual unsigned int GetOptimalBlockSizeUsed() const {return 0;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	c9		 leave
  0000a	c3		 ret	 0
?GetOptimalBlockSizeUsed@StreamTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::StreamTransformation::GetOptimalBlockSizeUsed
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::StreamTransformation::MandatoryBlockSize, COMDAT
; _this$ = ecx

; 477  : 	virtual unsigned int MandatoryBlockSize() const {return 1;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	40		 inc	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?MandatoryBlockSize@StreamTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::StreamTransformation::MandatoryBlockSize
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0BlockTransformation@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0BlockTransformation@CryptoPP@@QAE@ABV01@@Z PROC	; CryptoPP::BlockTransformation::BlockTransformation, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	c9		 leave
  00017	c2 04 00	 ret	 4
??0BlockTransformation@CryptoPP@@QAE@ABV01@@Z ENDP	; CryptoPP::BlockTransformation::BlockTransformation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ PROC ; CryptoPP::BlockTransformation::OptimalNumberOfParallelBlocks, COMDAT
; _this$ = ecx

; 457  : 	virtual unsigned int OptimalNumberOfParallelBlocks() const {return 1;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	33 c0		 xor	 eax, eax
  00009	40		 inc	 eax
  0000a	c9		 leave
  0000b	c3		 ret	 0
?OptimalNumberOfParallelBlocks@BlockTransformation@CryptoPP@@UBEIXZ ENDP ; CryptoPP::BlockTransformation::OptimalNumberOfParallelBlocks
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ PROC ; CryptoPP::BlockTransformation::IsPermutation, COMDAT
; _this$ = ecx

; 451  : 	virtual bool IsPermutation() const {return true;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	c9		 leave
  0000a	c3		 ret	 0
?IsPermutation@BlockTransformation@CryptoPP@@UBE_NXZ ENDP ; CryptoPP::BlockTransformation::IsPermutation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
_TEXT	SEGMENT
tv89 = -128						; size = 4
tv91 = -124						; size = 4
tv87 = -120						; size = 4
tv78 = -116						; size = 4
tv73 = -112						; size = 4
_this$ = -108						; size = 4
$T2 = -104						; size = 40
$T3 = -64						; size = 24
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_iv$ = 8						; size = 4
_ivLength$ = 12						; size = 4
?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z PROC ; CryptoPP::SimpleKeyingInterface::Resynchronize, COMDAT
; _this$ = ecx

; 402  : 	virtual void Resynchronize(const byte *iv, int ivLength=-1) {throw NotImplemented(GetAlgorithm().AlgorithmName() + ": this object doesn't support resynchronization");}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 74	 sub	 esp, 116		; 00000074H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d 94	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	8b 45 94	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	8b 4d 94	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	ff 50 34	 call	 DWORD PTR [eax+52]
  00036	89 45 90	 mov	 DWORD PTR tv73[ebp], eax
  00039	8d 45 c0	 lea	 eax, DWORD PTR $T3[ebp]
  0003c	50		 push	 eax
  0003d	8b 45 90	 mov	 eax, DWORD PTR tv73[ebp]
  00040	8b 00		 mov	 eax, DWORD PTR [eax]
  00042	8b 4d 90	 mov	 ecx, DWORD PTR tv73[ebp]
  00045	ff 50 08	 call	 DWORD PTR [eax+8]
  00048	89 45 8c	 mov	 DWORD PTR tv78[ebp], eax
  0004b	8b 45 8c	 mov	 eax, DWORD PTR tv78[ebp]
  0004e	89 45 88	 mov	 DWORD PTR tv87[ebp], eax
  00051	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@CJIHPKKH@?3?5this?5object?5doesn?8t?5support?5r@
  0005a	ff 75 88	 push	 DWORD PTR tv87[ebp]
  0005d	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
  00069	89 45 84	 mov	 DWORD PTR tv91[ebp], eax
  0006c	8b 45 84	 mov	 eax, DWORD PTR tv91[ebp]
  0006f	89 45 80	 mov	 DWORD PTR tv89[ebp], eax
  00072	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00076	ff 75 80	 push	 DWORD PTR tv89[ebp]
  00079	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  0007c	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00081	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  00086	8d 45 98	 lea	 eax, DWORD PTR $T2[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 __CxxThrowException@8
  0008f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00093	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00096	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 402  : 	virtual void Resynchronize(const byte *iv, int ivLength=-1) {throw NotImplemented(GetAlgorithm().AlgorithmName() + ": this object doesn't support resynchronization");}

  0009b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0009f	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  000a2	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
$LN2@Resynchron:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 402  : 	virtual void Resynchronize(const byte *iv, int ivLength=-1) {throw NotImplemented(GetAlgorithm().AlgorithmName() + ": this object doesn't support resynchronization");}

  000a7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000aa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b1	59		 pop	 ecx
  000b2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b5	33 cd		 xor	 ecx, ebp
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	c9		 leave
  000bd	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Resynchronize@SimpleKeyingInterface@CryptoPP@@UAEXPBEH@Z ENDP ; CryptoPP::SimpleKeyingInterface::Resynchronize
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterface::MaxIVLength, COMDAT
; _this$ = ecx

; 400  : 	virtual unsigned int MaxIVLength() const {return IVSize();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	ff 50 20	 call	 DWORD PTR [eax+32]
  00012	c9		 leave
  00013	c3		 ret	 0
?MaxIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterface::MaxIVLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ PROC ; CryptoPP::SimpleKeyingInterface::MinIVLength, COMDAT
; _this$ = ecx

; 398  : 	virtual unsigned int MinIVLength() const {return IVSize();}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	ff 50 20	 call	 DWORD PTR [eax+32]
  00012	c9		 leave
  00013	c3		 ret	 0
?MinIVLength@SimpleKeyingInterface@CryptoPP@@UBEIXZ ENDP ; CryptoPP::SimpleKeyingInterface::MinIVLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z PROC ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength, COMDAT
; _this$ = ecx

; 364  : 		{return n == GetValidKeyLength(n);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00008	ff 75 08	 push	 DWORD PTR _n$[ebp]
  0000b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	ff 50 10	 call	 DWORD PTR [eax+16]
  00016	39 45 08	 cmp	 DWORD PTR _n$[ebp], eax
  00019	75 09		 jne	 SHORT $LN3@IsValidKey
  0001b	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
  00022	eb 04		 jmp	 SHORT $LN4@IsValidKey
$LN3@IsValidKey:
  00024	83 65 f8 00	 and	 DWORD PTR tv70[ebp], 0
$LN4@IsValidKey:
  00028	8a 45 f8	 mov	 al, BYTE PTR tv70[ebp]
  0002b	c9		 leave
  0002c	c2 04 00	 ret	 4
?IsValidKeyLength@SimpleKeyingInterface@CryptoPP@@UBE_NI@Z ENDP ; CryptoPP::SimpleKeyingInterface::IsValidKeyLength
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ??1SimpleKeyingInterface@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SimpleKeyingInterface@CryptoPP@@UAE@XZ PROC		; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface, COMDAT
; _this$ = ecx

; 350  : 	virtual ~SimpleKeyingInterface() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1SimpleKeyingInterface@CryptoPP@@UAE@XZ ENDP		; CryptoPP::SimpleKeyingInterface::~SimpleKeyingInterface
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CryptoPP::Algorithm::AlgorithmName, COMDAT
; _this$ = ecx

; 343  : 	virtual std::string AlgorithmName() const {return "unknown";}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00008	83 65 fc 00	 and	 DWORD PTR $T1[ebp], 0
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_07CIFAGBMG@unknown@
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00019	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
  0001c	83 c8 01	 or	 eax, 1
  0001f	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  00022	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00025	c9		 leave
  00026	c2 04 00	 ret	 4
?AlgorithmName@Algorithm@CryptoPP@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CryptoPP::Algorithm::AlgorithmName
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
_TEXT	SEGMENT
_this$ = -84						; size = 4
$T2 = -80						; size = 40
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Clone@Clonable@CryptoPP@@UBEPAV12@XZ PROC		; CryptoPP::Clonable::Clone, COMDAT
; _this$ = ecx

; 331  : 	virtual Clonable* Clone() const {throw NotImplemented("Clone() is not implemented yet.");}	// TODO: make this =0

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d ac	 mov	 DWORD PTR _this$[ebp], ecx
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@CCPAJEEJ@Clone?$CI?$CJ?5is?5not?5implemented?5yet?4@
  00030	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00033	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00038	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  0003f	50		 push	 eax
  00040	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00043	e8 00 00 00 00	 call	 ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::NotImplemented::NotImplemented
  00048	68 00 00 00 00	 push	 OFFSET __TI3?AVNotImplemented@CryptoPP@@
  0004d	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 __CxxThrowException@8
  00056	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0005a	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0005d	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
$LN2@Clone:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 331  : 	virtual Clonable* Clone() const {throw NotImplemented("Clone() is not implemented yet.");}	// TODO: make this =0

  00062	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006c	59		 pop	 ecx
  0006d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00070	33 cd		 xor	 ecx, ebp
  00072	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00077	c9		 leave
  00078	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Clone@Clonable@CryptoPP@@UBEPAV12@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Clone@Clonable@CryptoPP@@UBEPAV12@XZ ENDP		; CryptoPP::Clonable::Clone
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
$T5 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4541 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	83 65 fc 00	 and	 DWORD PTR $T5[ebp], 0

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000a	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	59		 pop	 ecx
  00013	89 45 f8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  00016	8b 45 f8	 mov	 eax, DWORD PTR $T4[ebp]
  00019	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2958 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0001c	ff 75 f4	 push	 DWORD PTR $T3[ebp]
  0001f	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00025	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0002a	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0002d	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00030	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4542 :     return _STD move(_Left.append(_Right));

  00033	ff 75 ec	 push	 DWORD PTR $T1[ebp]
  00036	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003e	8b 45 fc	 mov	 eax, DWORD PTR $T5[ebp]
  00041	83 c8 01	 or	 eax, 1
  00044	89 45 fc	 mov	 DWORD PTR $T5[ebp], eax
  00047	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4543 : }

  0004a	c9		 leave
  0004b	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z
_TEXT	SEGMENT
$T1 = -28						; size = 1
tv86 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
__Left_size$ = -12					; size = 4
__Right_size$ = -8					; size = 4
$T4 = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4456 :     _In_z_ const _Elem* const _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	83 65 f0 00	 and	 DWORD PTR $T3[ebp], 0

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0000a	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  0000d	e8 00 00 00 00	 call	 _strlen
  00012	59		 pop	 ecx
  00013	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  00016	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00019	89 45 f4	 mov	 DWORD PTR __Left_size$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3770 :         return _Mypair._Myval2._Mysize;

  0001c	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  0001f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00022	89 45 f8	 mov	 DWORD PTR __Right_size$[ebp], eax

; 4457 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 4458 :     const auto _Left_size  = _Convert_size<_Size_type>(_Traits::length(_Left));
; 4459 :     const auto _Right_size = _Right.size();
; 4460 :     if (_Right.max_size() - _Right_size < _Left_size) {

  00025	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00028	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0002d	2b 45 f8	 sub	 eax, DWORD PTR __Right_size$[ebp]
  00030	3b 45 f4	 cmp	 eax, DWORD PTR __Left_size$[ebp]
  00033	73 05		 jae	 SHORT $LN2@operator

; 4461 :         _Xlen_string();

  00035	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@operator:

; 4462 :     }
; 4463 : 
; 4464 :     return {_String_constructor_concat_tag{}, _Right, _Left, _Left_size, _Right.c_str(), _Right_size};

  0003a	8a 45 ff	 mov	 al, BYTE PTR $T4[ebp]
  0003d	88 45 e4	 mov	 BYTE PTR $T1[ebp], al
  00040	8b 4d 10	 mov	 ecx, DWORD PTR __Right$[ebp]
  00043	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00048	89 45 e8	 mov	 DWORD PTR tv86[ebp], eax
  0004b	ff 75 f8	 push	 DWORD PTR __Right_size$[ebp]
  0004e	ff 75 e8	 push	 DWORD PTR tv86[ebp]
  00051	ff 75 f4	 push	 DWORD PTR __Left_size$[ebp]
  00054	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  00057	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  0005a	ff 75 e4	 push	 DWORD PTR $T1[ebp]
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00060	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00065	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00068	83 c8 01	 or	 eax, 1
  0006b	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  0006e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@operator:

; 4465 : }

  00071	c9		 leave
  00072	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_typeinfo.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
_TEXT	SEGMENT
tv86 = -96						; size = 4
$T2 = -89						; size = 1
$T3 = -88						; size = 48
$T4 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_stored$ = 12						; size = 4
_retrieving$ = 16					; size = 4
?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z PROC ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch, COMDAT

; 291  : 		{if (stored != retrieving) throw ValueTypeMismatch(name, stored, retrieving);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_typeinfo.h

; 88   :         return __std_type_info_compare(&_Data, &_Other._Data) != 0;

  00028	8b 45 10	 mov	 eax, DWORD PTR _retrieving$[ebp]
  0002b	83 c0 04	 add	 eax, 4
  0002e	50		 push	 eax
  0002f	8b 45 0c	 mov	 eax, DWORD PTR _stored$[ebp]
  00032	83 c0 04	 add	 eax, 4
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ___std_type_info_compare
  0003b	59		 pop	 ecx
  0003c	59		 pop	 ecx
  0003d	85 c0		 test	 eax, eax
  0003f	74 09		 je	 SHORT $LN7@ThrowIfTyp
  00041	c7 45 a0 01 00
	00 00		 mov	 DWORD PTR tv86[ebp], 1
  00048	eb 04		 jmp	 SHORT $LN8@ThrowIfTyp
$LN7@ThrowIfTyp:
  0004a	83 65 a0 00	 and	 DWORD PTR tv86[ebp], 0
$LN8@ThrowIfTyp:
  0004e	8a 45 a0	 mov	 al, BYTE PTR tv86[ebp]
  00051	88 45 a7	 mov	 BYTE PTR $T2[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 291  : 		{if (stored != retrieving) throw ValueTypeMismatch(name, stored, retrieving);}

  00054	0f b6 45 a7	 movzx	 eax, BYTE PTR $T2[ebp]
  00058	85 c0		 test	 eax, eax
  0005a	74 3b		 je	 SHORT $LN3@ThrowIfTyp
  0005c	ff 75 08	 push	 DWORD PTR _name$[ebp]
  0005f	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00062	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00067	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0006b	ff 75 10	 push	 DWORD PTR _retrieving$[ebp]
  0006e	ff 75 0c	 push	 DWORD PTR _stored$[ebp]
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T4[ebp]
  00074	50		 push	 eax
  00075	8d 4d a8	 lea	 ecx, DWORD PTR $T3[ebp]
  00078	e8 00 00 00 00	 call	 ??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
  0007d	68 00 00 00 00	 push	 OFFSET __TI4?AVValueTypeMismatch@NameValuePairs@CryptoPP@@
  00082	8d 45 a8	 lea	 eax, DWORD PTR $T3[ebp]
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 __CxxThrowException@8
  0008b	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0008f	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00092	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
$LN3@ThrowIfTyp:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 291  : 		{if (stored != retrieving) throw ValueTypeMismatch(name, stored, retrieving);}

  00097	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a1	59		 pop	 ecx
  000a2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a5	33 cd		 xor	 ecx, ebp
  000a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ac	c9		 leave
  000ad	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a8	 mov	 ecx, DWORD PTR [edx-88]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ThrowIfTypeMismatch@NameValuePairs@CryptoPP@@SAXPBDABVtype_info@@1@Z ENDP ; CryptoPP::NameValuePairs::ThrowIfTypeMismatch
; Function compile flags: /Odspy
;	COMDAT ??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 30		 push	 48			; 00000030H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GValueTypeMismatch@NameValuePairs@CryptoPP@@UAEPAXI@Z ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@ABV01@@Z
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0002a	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  0002d	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00036	8b 49 2c	 mov	 ecx, DWORD PTR [ecx+44]
  00039	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c9		 leave
  00040	c2 04 00	 ret	 4
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV012@@Z ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::~ValueTypeMismatch, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	c9		 leave
  00010	c3		 ret	 0
??1ValueTypeMismatch@NameValuePairs@CryptoPP@@UAE@XZ ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::~ValueTypeMismatch
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_typeinfo.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_typeinfo.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
_TEXT	SEGMENT
$T2 = -72						; size = 4
tv210 = -68						; size = 4
tv164 = -64						; size = 4
tv211 = -60						; size = 4
tv162 = -56						; size = 4
$T3 = -52						; size = 4
tv92 = -48						; size = 4
tv160 = -44						; size = 4
tv68 = -40						; size = 4
tv158 = -36						; size = 4
$T4 = -32						; size = 4
tv88 = -28						; size = 4
tv156 = -24						; size = 4
tv179 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T5 = 0							; size = 24
$T6 = 24						; size = 24
$T7 = 48						; size = 24
$T8 = 72						; size = 24
$T9 = 96						; size = 24
$T10 = 120						; size = 24
__$ArrayPad$ = 144					; size = 4
_name$ = 156						; size = 4
_stored$ = 160						; size = 4
_retrieving$ = 164					; size = 4
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z PROC ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch, COMDAT
; _this$ = ecx

; 236  : 			, m_stored(stored), m_retrieving(retrieving) {}

  00000	55		 push	 ebp
  00001	8d ac 24 6c ff
	ff ff		 lea	 ebp, DWORD PTR [esp-148]
  00008	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  0000e	6a ff		 push	 -1
  00010	68 00 00 00 00	 push	 __ehhandler$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
  00015	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  0001b	50		 push	 eax
  0001c	83 ec 3c	 sub	 esp, 60			; 0000003cH
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 85 90 00 00
	00		 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 235  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  00039	ff b5 9c 00 00
	00		 push	 DWORD PTR _name$[ebp]
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LNMKHLKF@NameValuePairs?3?5type?5mismatch?5f@
  00044	8d 45 00	 lea	 eax, DWORD PTR $T5[ebp]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBDABV10@@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	89 45 ec	 mov	 DWORD PTR tv179[ebp], eax
  00053	8b 45 ec	 mov	 eax, DWORD PTR tv179[ebp]
  00056	89 45 e8	 mov	 DWORD PTR tv156[ebp], eax
  00059	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PGGGIJHH@?8?0?5stored?5?8@
  00062	ff 75 e8	 push	 DWORD PTR tv156[ebp]
  00065	8d 45 18	 lea	 eax, DWORD PTR $T6[ebp]
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	89 45 e4	 mov	 DWORD PTR tv88[ebp], eax
  00074	8b 45 e4	 mov	 eax, DWORD PTR tv88[ebp]
  00077	89 45 dc	 mov	 DWORD PTR tv158[ebp], eax
  0007a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_typeinfo.h

; 101  :         return __std_type_info_name(&_Data, &__type_info_root_node);

  0007e	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  00083	8b 85 a0 00 00
	00		 mov	 eax, DWORD PTR _stored$[ebp]
  00089	83 c0 04	 add	 eax, 4
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 ___std_type_info_name
  00092	59		 pop	 ecx
  00093	59		 pop	 ecx
  00094	89 45 e0	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 235  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  00097	ff 75 e0	 push	 DWORD PTR $T4[ebp]
  0009a	ff 75 dc	 push	 DWORD PTR tv158[ebp]
  0009d	8d 45 30	 lea	 eax, DWORD PTR $T7[ebp]
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	89 45 d8	 mov	 DWORD PTR tv68[ebp], eax
  000ac	8b 45 d8	 mov	 eax, DWORD PTR tv68[ebp]
  000af	89 45 d4	 mov	 DWORD PTR tv160[ebp], eax
  000b2	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CPJAGCKP@?8?0?5trying?5to?5retrieve?5?8@
  000bb	ff 75 d4	 push	 DWORD PTR tv160[ebp]
  000be	8d 45 48	 lea	 eax, DWORD PTR $T8[ebp]
  000c1	50		 push	 eax
  000c2	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ca	89 45 d0	 mov	 DWORD PTR tv92[ebp], eax
  000cd	8b 45 d0	 mov	 eax, DWORD PTR tv92[ebp]
  000d0	89 45 c8	 mov	 DWORD PTR tv162[ebp], eax
  000d3	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_typeinfo.h

; 101  :         return __std_type_info_name(&_Data, &__type_info_root_node);

  000d7	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  000dc	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR _retrieving$[ebp]
  000e2	83 c0 04	 add	 eax, 4
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ___std_type_info_name
  000eb	59		 pop	 ecx
  000ec	59		 pop	 ecx
  000ed	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 235  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  000f0	ff 75 cc	 push	 DWORD PTR $T3[ebp]
  000f3	ff 75 c8	 push	 DWORD PTR tv162[ebp]
  000f6	8d 45 60	 lea	 eax, DWORD PTR $T9[ebp]
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  00102	89 45 c4	 mov	 DWORD PTR tv211[ebp], eax
  00105	8b 45 c4	 mov	 eax, DWORD PTR tv211[ebp]
  00108	89 45 c0	 mov	 DWORD PTR tv164[ebp], eax
  0010b	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_01GEODFPGF@?8@
  00114	ff 75 c0	 push	 DWORD PTR tv164[ebp]
  00117	8d 45 78	 lea	 eax, DWORD PTR $T10[ebp]
  0011a	50		 push	 eax
  0011b	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00120	83 c4 0c	 add	 esp, 12			; 0000000cH
  00123	89 45 bc	 mov	 DWORD PTR tv210[ebp], eax
  00126	8b 45 bc	 mov	 eax, DWORD PTR tv210[ebp]
  00129	89 45 b8	 mov	 DWORD PTR $T2[ebp], eax
  0012c	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 148  : 	explicit InvalidArgument(const std::string &s) : Exception(INVALID_ARGUMENT, s) {}

  00130	ff 75 b8	 push	 DWORD PTR $T2[ebp]
  00133	6a 01		 push	 1
  00135	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00138	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::Exception::Exception
  0013d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00140	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InvalidArgument@CryptoPP@@6B@

; 235  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  00146	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0014a	8d 4d 78	 lea	 ecx, DWORD PTR $T10[ebp]
  0014d	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 235  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  00152	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00156	8d 4d 60	 lea	 ecx, DWORD PTR $T9[ebp]
  00159	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 235  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  0015e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00162	8d 4d 48	 lea	 ecx, DWORD PTR $T8[ebp]
  00165	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 235  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  0016a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0016e	8d 4d 30	 lea	 ecx, DWORD PTR $T7[ebp]
  00171	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 235  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  00176	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  0017a	8d 4d 18	 lea	 ecx, DWORD PTR $T6[ebp]
  0017d	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 235  : 			: InvalidArgument("NameValuePairs: type mismatch for '" + name + "', stored '" + stored.name() + "', trying to retrieve '" + retrieving.name() + "'")

  00182	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00186	8d 4d 00	 lea	 ecx, DWORD PTR $T5[ebp]
  00189	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 236  : 			, m_stored(stored), m_retrieving(retrieving) {}

  0018e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00191	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7ValueTypeMismatch@NameValuePairs@CryptoPP@@6B@
  00197	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0019a	8b 8d a0 00 00
	00		 mov	 ecx, DWORD PTR _stored$[ebp]
  001a0	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  001a3	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001a6	8b 8d a4 00 00
	00		 mov	 ecx, DWORD PTR _retrieving$[ebp]
  001ac	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  001af	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001b2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001bc	59		 pop	 ecx
  001bd	8b 8d 90 00 00
	00		 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c3	33 cd		 xor	 ecx, ebp
  001c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ca	81 c5 94 00 00
	00		 add	 ebp, 148		; 00000094H
  001d0	c9		 leave
  001d1	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$0:
  00000	8d 4d 00	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$1:
  00008	8d 4d 18	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$2:
  00010	8d 4d 30	 lea	 ecx, DWORD PTR $T7[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$3:
  00018	8d 4d 48	 lea	 ecx, DWORD PTR $T8[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$4:
  00020	8d 4d 60	 lea	 ecx, DWORD PTR $T9[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z$5:
  00028	8d 4d 78	 lea	 ecx, DWORD PTR $T10[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00030	cc		 int	 3
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
  00034	cc		 int	 3
__ehhandler$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z:
  00035	90		 npad	 1
  00036	90		 npad	 1
  00037	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003e	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00041	33 c8		 xor	 ecx, eax
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b 8a 9c 00 00
	00		 mov	 ecx, DWORD PTR [edx+156]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ValueTypeMismatch@NameValuePairs@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABVtype_info@@1@Z ENDP ; CryptoPP::NameValuePairs::ValueTypeMismatch::ValueTypeMismatch
; Function compile flags: /Odspy
;	COMDAT ??_GNotImplemented@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GNotImplemented@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::NotImplemented::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 28		 push	 40			; 00000028H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GNotImplemented@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::NotImplemented::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0NotImplemented@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0NotImplemented@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::NotImplemented::NotImplemented, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@ABV01@@Z
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0NotImplemented@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::NotImplemented::NotImplemented
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1NotImplemented@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1NotImplemented@CryptoPP@@UAE@XZ PROC			; CryptoPP::NotImplemented::~NotImplemented, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	c9		 leave
  00010	c3		 ret	 0
??1NotImplemented@CryptoPP@@UAE@XZ ENDP			; CryptoPP::NotImplemented::~NotImplemented
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CryptoPP::NotImplemented::NotImplemented, COMDAT
; _this$ = ecx

; 169  : 	explicit NotImplemented(const std::string &s) : Exception(NOT_IMPLEMENTED, s) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR _s$[ebp]
  0000a	6a 00		 push	 0
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::Exception::Exception
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7NotImplemented@CryptoPP@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c9		 leave
  00021	c2 04 00	 ret	 4
??0NotImplemented@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CryptoPP::NotImplemented::NotImplemented
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GInvalidArgument@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GInvalidArgument@CryptoPP@@UAEPAXI@Z PROC		; CryptoPP::InvalidArgument::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 28		 push	 40			; 00000028H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GInvalidArgument@CryptoPP@@UAEPAXI@Z ENDP		; CryptoPP::InvalidArgument::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::InvalidArgument::InvalidArgument, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@ABV01@@Z
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0InvalidArgument@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::InvalidArgument::InvalidArgument
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1InvalidArgument@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1InvalidArgument@CryptoPP@@UAE@XZ PROC		; CryptoPP::InvalidArgument::~InvalidArgument, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	c9		 leave
  00010	c3		 ret	 0
??1InvalidArgument@CryptoPP@@UAE@XZ ENDP		; CryptoPP::InvalidArgument::~InvalidArgument
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CryptoPP::InvalidArgument::InvalidArgument, COMDAT
; _this$ = ecx

; 148  : 	explicit InvalidArgument(const std::string &s) : Exception(INVALID_ARGUMENT, s) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR _s$[ebp]
  0000a	6a 01		 push	 1
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	e8 00 00 00 00	 call	 ??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CryptoPP::Exception::Exception
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7InvalidArgument@CryptoPP@@6B@
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c9		 leave
  00021	c2 04 00	 ret	 4
??0InvalidArgument@CryptoPP@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CryptoPP::InvalidArgument::InvalidArgument
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GException@CryptoPP@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GException@CryptoPP@@UAEPAXI@Z PROC			; CryptoPP::Exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1Exception@CryptoPP@@UAE@XZ ; CryptoPP::Exception::~Exception
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 28		 push	 40			; 00000028H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GException@CryptoPP@@UAEPAXI@Z ENDP			; CryptoPP::Exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0Exception@CryptoPP@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0Exception@CryptoPP@@QAE@ABV01@@Z PROC		; CryptoPP::Exception::Exception, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@CryptoPP@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00031	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00035	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@CryptoPP@@6B@
  0003e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00044	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00047	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0004a	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0004d	83 c0 10	 add	 eax, 16			; 00000010H
  00050	50		 push	 eax
  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	83 c1 10	 add	 ecx, 16			; 00000010H
  00057	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005c	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	c9		 leave
  0006f	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@CryptoPP@@QAE@ABV01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0Exception@CryptoPP@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@CryptoPP@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@CryptoPP@@QAE@ABV01@@Z ENDP		; CryptoPP::Exception::Exception
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ?what@Exception@CryptoPP@@UBEPBDXZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?what@Exception@CryptoPP@@UBEPBDXZ PROC			; CryptoPP::Exception::what, COMDAT
; _this$ = ecx

; 133  : 	const char *what() const throw() {return (m_what.c_str());}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3752 :         return _Mypair._Myval2._Myptr();

  00008	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 10	 add	 ecx, 16			; 00000010H
  0000e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00013	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 133  : 	const char *what() const throw() {return (m_what.c_str());}

  00016	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  00019	c9		 leave
  0001a	c3		 ret	 0
?what@Exception@CryptoPP@@UBEPBDXZ ENDP			; CryptoPP::Exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ??1Exception@CryptoPP@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Exception@CryptoPP@@UAE@XZ PROC			; CryptoPP::Exception::~Exception, COMDAT
; _this$ = ecx

; 132  : 	virtual ~Exception() throw() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@CryptoPP@@6B@
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 10	 add	 ecx, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00016	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h

; 89   :     {

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_destroy
  00030	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 132  : 	virtual ~Exception() throw() {}

  00031	c9		 leave
  00032	c3		 ret	 0
??1Exception@CryptoPP@@UAE@XZ ENDP			; CryptoPP::Exception::~Exception
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h
;	COMDAT ??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_errorType$ = 8						; size = 4
_s$ = 12						; size = 4
??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CryptoPP::Exception::Exception, COMDAT
; _this$ = ecx

; 131  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h

; 54   :     {

  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 53   :         : _Data()

  0002f	33 c0		 xor	 eax, eax
  00031	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 04	 add	 ecx, 4
  00037	89 01		 mov	 DWORD PTR [ecx], eax
  00039	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\cryptopp\cryptlib.h

; 131  : 	explicit Exception(ErrorType errorType, const std::string &s) : m_errorType(errorType), m_what(s) {}

  0003c	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7Exception@CryptoPP@@6B@
  00049	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _errorType$[ebp]
  0004f	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00052	ff 75 0c	 push	 DWORD PTR _s$[ebp]
  00055	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00058	83 c1 10	 add	 ecx, 16			; 00000010H
  0005b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00060	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00064	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	c9		 leave
  00073	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@std@@UAE@XZ ; std::exception::~exception
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Exception@CryptoPP@@QAE@W4ErrorType@01@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CryptoPP::Exception::Exception
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp
;	COMDAT ?next_prime@detail@unordered@boost@@YAII@Z
_TEXT	SEGMENT
$T1 = -16						; size = 1
_prime_list_end$ = -12					; size = 4
_prime_list_begin$ = -8					; size = 4
_bound$ = -4						; size = 4
_num$ = 8						; size = 4
?next_prime@detail@unordered@boost@@YAII@Z PROC		; boost::unordered::detail::next_prime, COMDAT

; 327  :       {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 328  :         std::size_t const* const prime_list_begin = prime_list::value;

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _prime_list_begin$[ebp], OFFSET ?value@?$prime_list_template@I@detail@unordered@boost@@2QBIB ; boost::unordered::detail::prime_list_template<unsigned int>::value

; 329  :         std::size_t const* const prime_list_end =

  0000d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?length@?$prime_list_template@I@detail@unordered@boost@@2HB ; boost::unordered::detail::prime_list_template<unsigned int>::length
  00012	8b 4d f8	 mov	 ecx, DWORD PTR _prime_list_begin$[ebp]
  00015	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00018	89 45 f4	 mov	 DWORD PTR _prime_list_end$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility

; 5873 :     return _STD lower_bound(_First, _Last, _Val, less<>{});

  0001b	33 c0		 xor	 eax, eax
  0001d	88 45 f0	 mov	 BYTE PTR $T1[ebp], al
  00020	ff 75 f0	 push	 DWORD PTR $T1[ebp]
  00023	8d 45 08	 lea	 eax, DWORD PTR _num$[ebp]
  00026	50		 push	 eax
  00027	ff 75 f4	 push	 DWORD PTR _prime_list_end$[ebp]
  0002a	ff 75 f8	 push	 DWORD PTR _prime_list_begin$[ebp]
  0002d	e8 00 00 00 00	 call	 ??$lower_bound@PBIIU?$less@X@std@@@std@@YAPBIPBIQBIABIU?$less@X@0@@Z ; std::lower_bound<unsigned int const *,unsigned int,std::less<void> >
  00032	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\unordered\detail\implementation.hpp

; 331  :         std::size_t const* bound =

  00035	89 45 fc	 mov	 DWORD PTR _bound$[ebp], eax

; 332  :           std::lower_bound(prime_list_begin, prime_list_end, num);
; 333  :         if (bound == prime_list_end)

  00038	8b 45 fc	 mov	 eax, DWORD PTR _bound$[ebp]
  0003b	3b 45 f4	 cmp	 eax, DWORD PTR _prime_list_end$[ebp]
  0003e	75 09		 jne	 SHORT $LN2@next_prime

; 334  :           bound--;

  00040	8b 45 fc	 mov	 eax, DWORD PTR _bound$[ebp]
  00043	83 e8 04	 sub	 eax, 4
  00046	89 45 fc	 mov	 DWORD PTR _bound$[ebp], eax
$LN2@next_prime:

; 335  :         return *bound;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _bound$[ebp]
  0004c	8b 00		 mov	 eax, DWORD PTR [eax]

; 336  :       }

  0004e	c9		 leave
  0004f	c3		 ret	 0
?next_prime@detail@unordered@boost@@YAII@Z ENDP		; boost::unordered::detail::next_prime
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\boost\container_hash\hash.hpp
;	COMDAT ??$hash_value@K@boost@@YAIK@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
??$hash_value@K@boost@@YAIK@Z PROC			; boost::hash_value<unsigned long>, COMDAT

; 359  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 360  :         return static_cast<std::size_t>(v);

  00003	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]

; 361  :     }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$hash_value@K@boost@@YAIK@Z ENDP			; boost::hash_value<unsigned long>
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\filename.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\filename.h
;	COMDAT ?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
$T2 = -92						; size = 1
$T3 = -88						; size = 4
_this$ = -84						; size = 4
$T4 = -80						; size = 4
$T5 = -76						; size = 4
_nLength$ = -72						; size = 4
_i$6 = -68						; size = 4
$T7 = -64						; size = 24
_strExtension$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::GetExtension, COMDAT

; 161  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 50	 sub	 esp, 80			; 00000050H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	83 65 b0 00	 and	 DWORD PTR $T4[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2365 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  0002c	8d 45 d8	 lea	 eax, DWORD PTR _strExtension$[ebp]
  0002f	89 45 ac	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00032	8b 4d ac	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2367 :         _Tidy_init();

  0003a	8d 4d d8	 lea	 ecx, DWORD PTR _strExtension$[ebp]
  0003d	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\filename.h

; 162  : 	string strExtension;

  00042	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3766 :         return _Mypair._Myval2._Mysize;

  00046	8b 45 0c	 mov	 eax, DWORD PTR _str$[ebp]
  00049	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0004c	89 45 b8	 mov	 DWORD PTR _nLength$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\filename.h

; 166  : 	if (nLength > 0)

  0004f	83 7d b8 00	 cmp	 DWORD PTR _nLength$[ebp], 0
  00053	0f 86 84 00 00
	00		 jbe	 $LN5@GetExtensi

; 167  : 	{
; 168  : 		for (size_t i = nLength - 1; i > 0 && str[i] != '/'; i--)

  00059	8b 45 b8	 mov	 eax, DWORD PTR _nLength$[ebp]
  0005c	48		 dec	 eax
  0005d	89 45 bc	 mov	 DWORD PTR _i$6[ebp], eax
  00060	eb 07		 jmp	 SHORT $LN4@GetExtensi
$LN2@GetExtensi:
  00062	8b 45 bc	 mov	 eax, DWORD PTR _i$6[ebp]
  00065	48		 dec	 eax
  00066	89 45 bc	 mov	 DWORD PTR _i$6[ebp], eax
$LN4@GetExtensi:
  00069	83 7d bc 00	 cmp	 DWORD PTR _i$6[ebp], 0
  0006d	76 6e		 jbe	 SHORT $LN5@GetExtensi
  0006f	ff 75 bc	 push	 DWORD PTR _i$6[ebp]
  00072	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00075	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0007a	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0007d	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00080	74 5b		 je	 SHORT $LN5@GetExtensi

; 169  : 			if (str[i] == '.')

  00082	ff 75 bc	 push	 DWORD PTR _i$6[ebp]
  00085	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00088	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0008d	0f be 00	 movsx	 eax, BYTE PTR [eax]
  00090	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00093	75 46		 jne	 SHORT $LN6@GetExtensi

; 170  : 			{
; 171  : 				strExtension = string(str.c_str( ) + i + 1);

  00095	8b 4d 0c	 mov	 ecx, DWORD PTR _str$[ebp]
  00098	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0009d	8b 4d bc	 mov	 ecx, DWORD PTR _i$6[ebp]
  000a0	8d 44 08 01	 lea	 eax, DWORD PTR [eax+ecx+1]
  000a4	50		 push	 eax
  000a5	8d 4d c0	 lea	 ecx, DWORD PTR $T7[ebp]
  000a8	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ad	89 45 b4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  000b0	8b 45 b4	 mov	 eax, DWORD PTR $T5[ebp]
  000b3	89 45 a8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2665 :         if (this != _STD addressof(_Right)) {

  000b6	8d 45 d8	 lea	 eax, DWORD PTR _strExtension$[ebp]
  000b9	3b 45 a8	 cmp	 eax, DWORD PTR $T3[ebp]
  000bc	74 13		 je	 SHORT $LN103@GetExtensi

; 2666 :             _Move_assign(_Right, _Choose_pocma<_Alty>{});

  000be	33 c0		 xor	 eax, eax
  000c0	88 45 a4	 mov	 BYTE PTR $T2[ebp], al
  000c3	ff 75 a4	 push	 DWORD PTR $T2[ebp]
  000c6	ff 75 b4	 push	 DWORD PTR $T5[ebp]
  000c9	8d 4d d8	 lea	 ecx, DWORD PTR _strExtension$[ebp]
  000cc	e8 00 00 00 00	 call	 ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
$LN103@GetExtensi:

; 2801 :         _Tidy_deallocate();

  000d1	8d 4d c0	 lea	 ecx, DWORD PTR $T7[ebp]
  000d4	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\filename.h

; 172  : 				break;

  000d9	eb 02		 jmp	 SHORT $LN5@GetExtensi
$LN6@GetExtensi:

; 173  : 			}

  000db	eb 85		 jmp	 SHORT $LN2@GetExtensi
$LN5@GetExtensi:

; 176  : 	return strExtension;

  000dd	8d 45 d8	 lea	 eax, DWORD PTR _strExtension$[ebp]
  000e0	50		 push	 eax
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000e4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e9	8b 45 b0	 mov	 eax, DWORD PTR $T4[ebp]
  000ec	83 c8 01	 or	 eax, 1
  000ef	89 45 b0	 mov	 DWORD PTR $T4[ebp], eax
  000f2	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  000f6	8d 4d d8	 lea	 ecx, DWORD PTR _strExtension$[ebp]
  000f9	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\filename.h

; 176  : 	return strExtension;

  000fe	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 177  : }

  00101	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00104	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010b	59		 pop	 ecx
  0010c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010f	33 cd		 xor	 ecx, ebp
  00111	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00116	c9		 leave
  00117	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strExtension$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::GetExtension
; Function compile flags: /Odspy
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Al$1 = -28						; size = 4
__Ptr$2 = -24						; size = 4
__Count$ = -20						; size = 4
$T3 = -16						; size = 4
tv68 = -12						; size = 4
_this$ = -8						; size = 4
$T4 = -2						; size = 1
$T5 = -1						; size = 1
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4383 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2227 :         return _BUF_SIZE <= _Myres;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00010	72 09		 jb	 SHORT $LN9@Tidy_deall
  00012	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00019	eb 04		 jmp	 SHORT $LN10@Tidy_deall
$LN9@Tidy_deall:
  0001b	83 65 f4 00	 and	 DWORD PTR tv68[ebp], 0
$LN10@Tidy_deall:
  0001f	8a 45 f4	 mov	 al, BYTE PTR tv68[ebp]
  00022	88 45 ff	 mov	 BYTE PTR $T5[ebp], al

; 4384 :         _Mypair._Myval2._Orphan_all();
; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00025	0f b6 45 ff	 movzx	 eax, BYTE PTR $T5[ebp]
  00029	85 c0		 test	 eax, eax
  0002b	74 34		 je	 SHORT $LN2@Tidy_deall

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	89 45 e8	 mov	 DWORD PTR __Ptr$2[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00038	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  0003b	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0003e	89 45 e4	 mov	 DWORD PTR __Al$1[ebp], eax

; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00041	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  00049	59		 pop	 ecx

; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00050	40		 inc	 eax
  00051	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	ff 75 ec	 push	 DWORD PTR __Count$[ebp]
  00057	ff 75 e8	 push	 DWORD PTR __Ptr$2[ebp]
  0005a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN2@Tidy_deall:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  00061	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00072	c6 45 fe 00	 mov	 BYTE PTR $T4[ebp], 0
  00076	33 c0		 xor	 eax, eax
  00078	40		 inc	 eax
  00079	6b c0 00	 imul	 eax, eax, 0

; 428  :         _Left = _Right;

  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	8a 55 fe	 mov	 dl, BYTE PTR $T4[ebp]
  00082	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4396 :     }

  00085	c9		 leave
  00086	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4376 :     void _Tidy_init() noexcept { // initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4377 :         _Mypair._Myval2._Mysize = 0;

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 4378 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4379 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4380 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00019	c6 45 ff 00	 mov	 BYTE PTR $T1[ebp], 0
  0001d	33 c0		 xor	 eax, eax
  0001f	40		 inc	 eax
  00020	6b c0 00	 imul	 eax, eax, 0

; 428  :         _Left = _Right;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8a 55 ff	 mov	 dl, BYTE PTR $T1[ebp]
  00029	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4381 :     }

  0002c	c9		 leave
  0002d	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Al$ = -32						; size = 4
__Count$ = -28						; size = 4
__First1$ = -24						; size = 4
$T1 = -20						; size = 4
__Count$ = -16						; size = 4
$T2 = -12						; size = 4
__Ptr$ = -8						; size = 4
_this$ = -4						; size = 4
?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small, COMDAT
; _this$ = ecx

; 4359 :     void _Become_small() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 4360 :         // release any held storage and return to small string mode
; 4361 :         // pre: *this is in large string mode
; 4362 :         // pre: this is small enough to return to small string mode
; 4363 :         _Mypair._Myval2._Orphan_all();
; 4364 :         const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
  0000e	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00014	89 45 f4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00017	8b 45 f4	 mov	 eax, DWORD PTR $T2[ebp]
  0001a	89 45 e0	 mov	 DWORD PTR __Al$[ebp], eax

; 4365 :         auto& _Al          = _Getal();
; 4366 :         _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  0001d	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  00020	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  00025	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00026	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00029	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4367 :         _Traits::copy(_Mypair._Myval2._Bx._Buf, _Unfancy(_Ptr), _Mypair._Myval2._Mysize + 1);

  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00032	40		 inc	 eax
  00033	89 45 f0	 mov	 DWORD PTR __Count$[ebp], eax
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	89 45 e8	 mov	 DWORD PTR __First1$[ebp], eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003c	ff 75 f0	 push	 DWORD PTR __Count$[ebp]
  0003f	ff 75 ec	 push	 DWORD PTR $T1[ebp]
  00042	ff 75 e8	 push	 DWORD PTR __First1$[ebp]
  00045	e8 00 00 00 00	 call	 _memcpy
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4368 :         _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00053	40		 inc	 eax
  00054	89 45 e4	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00057	ff 75 e4	 push	 DWORD PTR __Count$[ebp]
  0005a	ff 75 f8	 push	 DWORD PTR __Ptr$[ebp]
  0005d	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00062	59		 pop	 ecx
  00063	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4369 :         _Mypair._Myval2._Myres = _BUF_SIZE - 1;

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4370 :     }

  0006e	c9		 leave
  0006f	c3		 ret	 0
?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
tv93 = -28						; size = 4
$T3 = -24						; size = 4
_this$ = -20						; size = 4
$T4 = -16						; size = 4
__Masked$5 = -12					; size = 4
__Old$ = -8						; size = 4
__Max$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4297 :     _NODISCARD size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	89 45 fc	 mov	 DWORD PTR __Max$[ebp], eax
  00014	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001a	89 45 f8	 mov	 DWORD PTR __Old$[ebp], eax

; 4285 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0001d	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00020	83 c8 0f	 or	 eax, 15			; 0000000fH
  00023	89 45 f4	 mov	 DWORD PTR __Masked$5[ebp], eax

; 4286 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00026	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  00029	3b 45 fc	 cmp	 eax, DWORD PTR __Max$[ebp]
  0002c	76 08		 jbe	 SHORT $LN29@Calculate_

; 4287 :             return _Max;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00031	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  00034	eb 4c		 jmp	 SHORT $LN31@Calculate_
$LN29@Calculate_:

; 4288 :         }
; 4289 : 
; 4290 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00036	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00039	d1 e8		 shr	 eax, 1
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __Max$[ebp]
  0003e	2b c8		 sub	 ecx, eax
  00040	39 4d f8	 cmp	 DWORD PTR __Old$[ebp], ecx
  00043	76 08		 jbe	 SHORT $LN30@Calculate_

; 4291 :             return _Max;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00048	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  0004b	eb 35		 jmp	 SHORT $LN31@Calculate_
$LN30@Calculate_:

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00050	d1 e8		 shr	 eax, 1
  00052	03 45 f8	 add	 eax, DWORD PTR __Old$[ebp]
  00055	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  0005b	3b 45 e8	 cmp	 eax, DWORD PTR $T3[ebp]
  0005e	73 08		 jae	 SHORT $LN35@Calculate_
  00060	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00063	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
  00066	eb 06		 jmp	 SHORT $LN36@Calculate_
$LN35@Calculate_:
  00068	8d 45 f4	 lea	 eax, DWORD PTR __Masked$5[ebp]
  0006b	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
$LN36@Calculate_:
  0006e	8b 45 e4	 mov	 eax, DWORD PTR tv93[ebp]
  00071	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00074	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00077	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0007a	8b 45 dc	 mov	 eax, DWORD PTR $T1[ebp]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
$LN31@Calculate_:

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00082	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]

; 4299 :     }

  00085	c9		 leave
  00086	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -20						; size = 4
$T2 = -16						; size = 4
tv75 = -12						; size = 4
$T3 = -8						; size = 4
__Masked$ = -4						; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4284 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 4285 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00009	83 c8 0f	 or	 eax, 15			; 0000000fH
  0000c	89 45 fc	 mov	 DWORD PTR __Masked$[ebp], eax

; 4286 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0000f	8b 45 fc	 mov	 eax, DWORD PTR __Masked$[ebp]
  00012	3b 45 10	 cmp	 eax, DWORD PTR __Max$[ebp]
  00015	76 05		 jbe	 SHORT $LN2@Calculate_

; 4287 :             return _Max;

  00017	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0001a	eb 46		 jmp	 SHORT $LN4@Calculate_
$LN2@Calculate_:

; 4288 :         }
; 4289 : 
; 4290 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0001c	8b 45 0c	 mov	 eax, DWORD PTR __Old$[ebp]
  0001f	d1 e8		 shr	 eax, 1
  00021	8b 4d 10	 mov	 ecx, DWORD PTR __Max$[ebp]
  00024	2b c8		 sub	 ecx, eax
  00026	39 4d 0c	 cmp	 DWORD PTR __Old$[ebp], ecx
  00029	76 05		 jbe	 SHORT $LN3@Calculate_

; 4291 :             return _Max;

  0002b	8b 45 10	 mov	 eax, DWORD PTR __Max$[ebp]
  0002e	eb 32		 jmp	 SHORT $LN4@Calculate_
$LN3@Calculate_:

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00030	8b 45 0c	 mov	 eax, DWORD PTR __Old$[ebp]
  00033	d1 e8		 shr	 eax, 1
  00035	03 45 0c	 add	 eax, DWORD PTR __Old$[ebp]
  00038	89 45 f8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR __Masked$[ebp]
  0003e	3b 45 f8	 cmp	 eax, DWORD PTR $T3[ebp]
  00041	73 08		 jae	 SHORT $LN7@Calculate_
  00043	8d 45 f8	 lea	 eax, DWORD PTR $T3[ebp]
  00046	89 45 f4	 mov	 DWORD PTR tv75[ebp], eax
  00049	eb 06		 jmp	 SHORT $LN8@Calculate_
$LN7@Calculate_:
  0004b	8d 45 fc	 lea	 eax, DWORD PTR __Masked$[ebp]
  0004e	89 45 f4	 mov	 DWORD PTR tv75[ebp], eax
$LN8@Calculate_:
  00051	8b 45 f4	 mov	 eax, DWORD PTR tv75[ebp]
  00054	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00057	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  0005a	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005d	8b 45 ec	 mov	 eax, DWORD PTR $T1[ebp]
  00060	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@Calculate_:

; 4295 :     }

  00062	c9		 leave
  00063	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -20						; size = 1
tv131 = -16						; size = 4
__Old_size$2 = -12					; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 3817 :     void reserve(_CRT_GUARDOVERFLOW const size_type _Newcap = 0) { // determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3818 :         if (_Mypair._Myval2._Mysize > _Newcap) { // requested capacity is not large enough for current size, ignore

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000f	3b 45 08	 cmp	 eax, DWORD PTR __Newcap$[ebp]
  00012	76 02		 jbe	 SHORT $LN2@reserve

; 3819 :             return; // nothing to do

  00014	eb 75		 jmp	 SHORT $LN1@reserve
$LN2@reserve:

; 3820 :         }
; 3821 : 
; 3822 :         if (_Mypair._Myval2._Myres == _Newcap) { // we're already at the requested capacity

  00016	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001c	3b 45 08	 cmp	 eax, DWORD PTR __Newcap$[ebp]
  0001f	75 02		 jne	 SHORT $LN3@reserve

; 3823 :             return; // nothing to do

  00021	eb 68		 jmp	 SHORT $LN1@reserve
$LN3@reserve:

; 3824 :         }
; 3825 : 
; 3826 :         if (_Mypair._Myval2._Myres < _Newcap) { // reallocate to grow

  00023	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00029	3b 45 08	 cmp	 eax, DWORD PTR __Newcap$[ebp]
  0002c	73 2b		 jae	 SHORT $LN4@reserve

; 3827 :             const size_type _Old_size = _Mypair._Myval2._Mysize;

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00031	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00034	89 45 f4	 mov	 DWORD PTR __Old_size$2[ebp], eax

; 3828 :             _Reallocate_grow_by(

  00037	33 c0		 xor	 eax, eax
  00039	88 45 ec	 mov	 BYTE PTR $T1[ebp], al
  0003c	ff 75 ec	 push	 DWORD PTR $T1[ebp]
  0003f	8b 45 08	 mov	 eax, DWORD PTR __Newcap$[ebp]
  00042	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$2[ebp]
  00045	50		 push	 eax
  00046	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >

; 3829 :                 _Newcap - _Old_size, [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size) {
; 3830 :                     _Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);
; 3831 :                 });
; 3832 : 
; 3833 :             _Mypair._Myval2._Mysize = _Old_size;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00051	8b 4d f4	 mov	 ecx, DWORD PTR __Old_size$2[ebp]
  00054	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 3834 :             return;

  00057	eb 32		 jmp	 SHORT $LN1@reserve
$LN4@reserve:

; 3835 :         }
; 3836 : 
; 3837 :         if (_BUF_SIZE > _Newcap && _Mypair._Myval2._Large_string_engaged()) {

  00059	83 7d 08 10	 cmp	 DWORD PTR __Newcap$[ebp], 16 ; 00000010H
  0005d	73 2c		 jae	 SHORT $LN1@reserve

; 2227 :         return _BUF_SIZE <= _Myres;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00062	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00066	72 09		 jb	 SHORT $LN9@reserve
  00068	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv131[ebp], 1
  0006f	eb 04		 jmp	 SHORT $LN10@reserve
$LN9@reserve:
  00071	83 65 f0 00	 and	 DWORD PTR tv131[ebp], 0
$LN10@reserve:
  00075	8a 45 f0	 mov	 al, BYTE PTR tv131[ebp]
  00078	88 45 ff	 mov	 BYTE PTR $T3[ebp], al

; 3835 :         }
; 3836 : 
; 3837 :         if (_BUF_SIZE > _Newcap && _Mypair._Myval2._Large_string_engaged()) {

  0007b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T3[ebp]
  0007f	85 c0		 test	 eax, eax
  00081	74 08		 je	 SHORT $LN1@reserve

; 3838 :             // deallocate everything; switch back to "small" mode
; 3839 :             _Become_small();

  00083	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
$LN1@reserve:

; 3840 :             return;
; 3841 :         }
; 3842 : 
; 3843 :         // ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3844 :     }

  0008b	c9		 leave
  0008c	c2 04 00	 ret	 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -60						; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
__Storage_max$ = -44					; size = 4
$T5 = -40						; size = 4
$T6 = -36						; size = 4
$T7 = -32						; size = 4
_this$ = -28						; size = 4
tv70 = -24						; size = 4
$T8 = -20						; size = 4
$T9 = -16						; size = 4
tv67 = -12						; size = 4
__Alloc_max$ = -8					; size = 4
$T10 = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3773 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 4413 :         return _Mypair._Get_first();

  00009	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0000c	89 45 e0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4413 :         return _Mypair._Get_first();

  0000f	8b 45 e0	 mov	 eax, DWORD PTR $T7[ebp]
  00012	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00015	83 4d f8 ff	 or	 DWORD PTR __Alloc_max$[ebp], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00019	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR $T10[ebp], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Alloc_max$[ebp]
  00023	3b 45 fc	 cmp	 eax, DWORD PTR $T10[ebp]
  00026	73 08		 jae	 SHORT $LN14@max_size
  00028	8d 45 fc	 lea	 eax, DWORD PTR $T10[ebp]
  0002b	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
  0002e	eb 06		 jmp	 SHORT $LN15@max_size
$LN14@max_size:
  00030	8d 45 f8	 lea	 eax, DWORD PTR __Alloc_max$[ebp]
  00033	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
$LN15@max_size:
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv67[ebp]
  00039	89 45 dc	 mov	 DWORD PTR $T6[ebp], eax
  0003c	8b 45 dc	 mov	 eax, DWORD PTR $T6[ebp]
  0003f	89 45 d8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00042	8b 45 d8	 mov	 eax, DWORD PTR $T5[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 d4	 mov	 DWORD PTR __Storage_max$[ebp], eax

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  0004a	8b 45 d4	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  0004d	48		 dec	 eax
  0004e	89 45 f0	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00051	c7 45 d0 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00058	8b 45 d0	 mov	 eax, DWORD PTR $T4[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0005e	8b 45 f0	 mov	 eax, DWORD PTR $T9[ebp]
  00061	3b 45 ec	 cmp	 eax, DWORD PTR $T8[ebp]
  00064	73 08		 jae	 SHORT $LN22@max_size
  00066	8d 45 f0	 lea	 eax, DWORD PTR $T9[ebp]
  00069	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
  0006c	eb 06		 jmp	 SHORT $LN23@max_size
$LN22@max_size:
  0006e	8d 45 ec	 lea	 eax, DWORD PTR $T8[ebp]
  00071	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
$LN23@max_size:
  00074	8b 45 e8	 mov	 eax, DWORD PTR tv70[ebp]
  00077	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
  0007a	8b 45 cc	 mov	 eax, DWORD PTR $T3[ebp]
  0007d	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00080	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00083	8b 00		 mov	 eax, DWORD PTR [eax]

; 3778 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3779 :         );
; 3780 :     }

  00085	c9		 leave
  00086	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
$T1 = -28						; size = 4
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__Result$2 = -16					; size = 4
tv80 = -12						; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3751 :     _NODISCARD _Ret_z_ const _Elem* c_str() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3752 :         return _Mypair._Myval2._Myptr();

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 2218 :         const value_type* _Result = _Bx._Buf;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	89 45 f0	 mov	 DWORD PTR __Result$2[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  00015	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0001c	72 09		 jb	 SHORT $LN9@c_str
  0001e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
  00025	eb 04		 jmp	 SHORT $LN10@c_str
$LN9@c_str:
  00027	83 65 f4 00	 and	 DWORD PTR tv80[ebp], 0
$LN10@c_str:
  0002b	8a 45 f4	 mov	 al, BYTE PTR tv80[ebp]
  0002e	88 45 ff	 mov	 BYTE PTR $T3[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  00031	0f b6 45 ff	 movzx	 eax, BYTE PTR $T3[ebp]
  00035	85 c0		 test	 eax, eax
  00037	74 0e		 je	 SHORT $LN4@c_str

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
  0003e	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00041	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00044	89 45 f0	 mov	 DWORD PTR __Result$2[ebp], eax
$LN4@c_str:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  00047	8b 45 f0	 mov	 eax, DWORD PTR __Result$2[ebp]
  0004a	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax

; 3752 :         return _Mypair._Myval2._Myptr();

  0004d	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]

; 3753 :     }

  00050	c9		 leave
  00051	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
$T1 = -28						; size = 4
__Ptr$ = -24						; size = 4
_this$ = -20						; size = 4
__Result$2 = -16					; size = 4
tv82 = -12						; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 3670 :     _NODISCARD reference operator[](const size_type _Off) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 3671 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3672 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");
; 3673 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3674 :         return _Mypair._Myval2._Myptr()[_Off];

  00009	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 2209 :         value_type* _Result = _Bx._Buf;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	89 45 f0	 mov	 DWORD PTR __Result$2[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  00015	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0001c	72 09		 jb	 SHORT $LN9@operator
  0001e	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv82[ebp], 1
  00025	eb 04		 jmp	 SHORT $LN10@operator
$LN9@operator:
  00027	83 65 f4 00	 and	 DWORD PTR tv82[ebp], 0
$LN10@operator:
  0002b	8a 45 f4	 mov	 al, BYTE PTR tv82[ebp]
  0002e	88 45 ff	 mov	 BYTE PTR $T3[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  00031	0f b6 45 ff	 movzx	 eax, BYTE PTR $T3[ebp]
  00035	85 c0		 test	 eax, eax
  00037	74 0e		 je	 SHORT $LN4@operator

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
  0003e	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00041	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00044	89 45 f0	 mov	 DWORD PTR __Result$2[ebp], eax
$LN4@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  00047	8b 45 f0	 mov	 eax, DWORD PTR __Result$2[ebp]
  0004a	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax

; 3671 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3672 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");
; 3673 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3674 :         return _Mypair._Myval2._Myptr()[_Off];

  0004d	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  00050	03 45 08	 add	 eax, DWORD PTR __Off$[ebp]

; 3675 :     }

  00053	c9		 leave
  00054	c2 04 00	 ret	 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -16						; size = 1
__Old_ptr$2 = -12					; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3042 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3043 :         // assign [_Ptr, _Ptr + _Count)
; 3044 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00012	77 39		 ja	 SHORT $LN2@assign

; 3045 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001c	89 45 f4	 mov	 DWORD PTR __Old_ptr$2[ebp], eax

; 3046 :             _Mypair._Myval2._Mysize = _Count;

  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00025	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0002e	ff 75 f4	 push	 DWORD PTR __Old_ptr$2[ebp]
  00031	e8 00 00 00 00	 call	 _memmove
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3047 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3048 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00039	c6 45 ff 00	 mov	 BYTE PTR $T3[ebp], 0

; 428  :         _Left = _Right;

  0003d	8b 45 f4	 mov	 eax, DWORD PTR __Old_ptr$2[ebp]
  00040	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00043	8a 4d ff	 mov	 cl, BYTE PTR $T3[ebp]
  00046	88 08		 mov	 BYTE PTR [eax], cl

; 3049 :             return *this;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	eb 16		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3050 :         }
; 3051 : 
; 3052 :         return _Reallocate_for(

  0004d	33 c0		 xor	 eax, eax
  0004f	88 45 f0	 mov	 BYTE PTR $T1[ebp], al
  00052	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00055	ff 75 f0	 push	 DWORD PTR $T1[ebp]
  00058	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 3053 :             _Count,
; 3054 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3055 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3057 :             },
; 3058 :             _Ptr);
; 3059 :     }

  00063	c9		 leave
  00064	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -24						; size = 1
__First1$ = -20						; size = 4
__Old_ptr$2 = -16					; size = 4
__Old_size$ = -12					; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2935 :     basic_string& append(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2936 :         // append [_Ptr, _Ptr + _Count)
; 2937 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000f	89 45 f4	 mov	 DWORD PTR __Old_size$[ebp], eax

; 2938 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00012	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00018	2b 45 f4	 sub	 eax, DWORD PTR __Old_size$[ebp]
  0001b	39 45 0c	 cmp	 DWORD PTR __Count$[ebp], eax
  0001e	77 49		 ja	 SHORT $LN2@append

; 2939 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00020	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00023	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00026	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 2940 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  0002c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00034	89 45 f0	 mov	 DWORD PTR __Old_ptr$2[ebp], eax

; 2941 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00037	8b 45 f0	 mov	 eax, DWORD PTR __Old_ptr$2[ebp]
  0003a	03 45 f4	 add	 eax, DWORD PTR __Old_size$[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR __First1$[ebp], eax

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00040	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00043	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00046	ff 75 ec	 push	 DWORD PTR __First1$[ebp]
  00049	e8 00 00 00 00	 call	 _memmove
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2942 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00051	c6 45 ff 00	 mov	 BYTE PTR $T3[ebp], 0
  00055	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00058	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]

; 428  :         _Left = _Right;

  0005b	8b 4d f0	 mov	 ecx, DWORD PTR __Old_ptr$2[ebp]
  0005e	8a 55 ff	 mov	 dl, BYTE PTR $T3[ebp]
  00061	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 2943 :             return *this;

  00064	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00067	eb 19		 jmp	 SHORT $LN1@append
$LN2@append:

; 2944 :         }
; 2945 : 
; 2946 :         return _Reallocate_grow_by(

  00069	33 c0		 xor	 eax, eax
  0006b	88 45 e8	 mov	 BYTE PTR $T1[ebp], al
  0006e	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  00071	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00074	ff 75 e8	 push	 DWORD PTR $T1[ebp]
  00077	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN1@append:

; 2947 :             _Count,
; 2948 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem* const _Ptr,
; 2949 :                 const size_type _Count) {
; 2950 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2951 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 2952 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2953 :             },
; 2954 :             _Ptr, _Count);
; 2955 :     }

  00082	c9		 leave
  00083	c2 08 00	 ret	 8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z
_TEXT	SEGMENT
$T1 = -44						; size = 4
__Ptr$ = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
_this$ = -20						; size = 4
__Result$6 = -16					; size = 4
tv134 = -12						; size = 4
_this$ = -8						; size = 4
$T7 = -1						; size = 1
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_assign, COMDAT
; _this$ = ecx

; 2826 :     void _Copy_assign(const basic_string& _Right, false_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 4413 :         return _Mypair._Get_first();

  00009	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0000c	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4413 :         return _Mypair._Get_first();

  0000f	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  00012	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00015	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00018	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  0001b	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  0001e	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax

; 2827 :         _Pocca(_Getal(), _Right._Getal());

  00021	ff 75 e0	 push	 DWORD PTR $T3[ebp]
  00024	ff 75 dc	 push	 DWORD PTR $T2[ebp]
  00027	e8 00 00 00 00	 call	 ??$_Pocca@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@ABV10@@Z ; std::_Pocca<std::allocator<char> >
  0002c	59		 pop	 ecx
  0002d	59		 pop	 ecx

; 2828 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002e	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00031	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax

; 2218 :         const value_type* _Result = _Bx._Buf;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 f0	 mov	 DWORD PTR __Result$6[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00041	72 09		 jb	 SHORT $LN21@Copy_assig
  00043	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv134[ebp], 1
  0004a	eb 04		 jmp	 SHORT $LN22@Copy_assig
$LN21@Copy_assig:
  0004c	83 65 f4 00	 and	 DWORD PTR tv134[ebp], 0
$LN22@Copy_assig:
  00050	8a 45 f4	 mov	 al, BYTE PTR tv134[ebp]
  00053	88 45 ff	 mov	 BYTE PTR $T7[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  00056	0f b6 45 ff	 movzx	 eax, BYTE PTR $T7[ebp]
  0005a	85 c0		 test	 eax, eax
  0005c	74 0e		 je	 SHORT $LN16@Copy_assig

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  0005e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 00		 mov	 eax, DWORD PTR [eax]
  00063	89 45 d8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00066	8b 45 d8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00069	89 45 f0	 mov	 DWORD PTR __Result$6[ebp], eax
$LN16@Copy_assig:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  0006c	8b 45 f0	 mov	 eax, DWORD PTR __Result$6[ebp]
  0006f	89 45 d4	 mov	 DWORD PTR $T1[ebp], eax

; 2828 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00072	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00075	ff 70 10	 push	 DWORD PTR [eax+16]
  00078	ff 75 d4	 push	 DWORD PTR $T1[ebp]
  0007b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2829 :     }

  00083	c9		 leave
  00084	c2 08 00	 ret	 8
?_Copy_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@U?$integral_constant@_N$0A@@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy_assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2800 :     ~basic_string() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2801 :         _Tidy_deallocate();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2802 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2803 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2804 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2805 :         _Mypair._Myval2._Myproxy = nullptr;
; 2806 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2807 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2808 :     }

  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
__Al$ = -72						; size = 4
$T1 = -68						; size = 4
__Ptr$ = -64						; size = 4
$T2 = -60						; size = 4
$T3 = -56						; size = 4
$T4 = -52						; size = 4
__First1$ = -48						; size = 4
__New_capacity$ = -44					; size = 4
__Right_ptr$ = -40					; size = 4
__New_array$ = -36					; size = 4
tv138 = -32						; size = 4
$T5 = -28						; size = 4
$T6 = -24						; size = 4
__Right_data$ = -20					; size = 4
_this$ = -16						; size = 4
__Right_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
__Overflow_is_possible$7 = -1				; size = 1
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2728 :     void _Construct_lv_contents(const basic_string& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 2729 :         // assign by copying data stored in _Right
; 2730 :         // pre: this != &_Right
; 2731 :         // pre: *this owns no memory, iterators orphaned (note:
; 2732 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2733 :         auto& _Right_data             = _Right._Mypair._Myval2;

  00009	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  0000c	89 45 ec	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2734 :         const size_type _Right_size   = _Right_data._Mysize;

  0000f	8b 45 ec	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00012	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00015	89 45 f4	 mov	 DWORD PTR __Right_size$[ebp], eax

; 2735 :         const _Elem* const _Right_ptr = _Right_data._Myptr();

  00018	8b 4d ec	 mov	 ecx, DWORD PTR __Right_data$[ebp]
  0001b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00020	89 45 d8	 mov	 DWORD PTR __Right_ptr$[ebp], eax

; 2736 :         auto& _My_data                = _Mypair._Myval2;

  00023	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00026	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 2737 :         if (_Right_size < _BUF_SIZE) { // stay small, don't allocate

  00029	83 7d f4 10	 cmp	 DWORD PTR __Right_size$[ebp], 16 ; 00000010H
  0002d	73 2e		 jae	 SHORT $LN2@Construct_

; 2738 :             _Traits::copy(_My_data._Bx._Buf, _Right_ptr, _BUF_SIZE);

  0002f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00032	89 45 d0	 mov	 DWORD PTR __First1$[ebp], eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00035	6a 10		 push	 16			; 00000010H
  00037	ff 75 d8	 push	 DWORD PTR __Right_ptr$[ebp]
  0003a	ff 75 d0	 push	 DWORD PTR __First1$[ebp]
  0003d	e8 00 00 00 00	 call	 _memcpy
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2739 :             _My_data._Mysize = _Right_size;

  00045	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00048	8b 4d f4	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  0004b	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2740 :             _My_data._Myres  = _BUF_SIZE - 1;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00051	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 2741 :             return;

  00058	e9 9b 00 00 00	 jmp	 $LN1@Construct_
$LN2@Construct_:

; 4409 :         return _Mypair._Get_first();

  0005d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00060	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00063	8b 45 cc	 mov	 eax, DWORD PTR $T4[ebp]
  00066	89 45 b8	 mov	 DWORD PTR __Al$[ebp], eax

; 2745 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  00069	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00071	89 45 e8	 mov	 DWORD PTR $T6[ebp], eax
  00074	8b 45 f4	 mov	 eax, DWORD PTR __Right_size$[ebp]
  00077	83 c8 0f	 or	 eax, 15			; 0000000fH
  0007a	89 45 e4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0007d	8b 45 e8	 mov	 eax, DWORD PTR $T6[ebp]
  00080	3b 45 e4	 cmp	 eax, DWORD PTR $T5[ebp]
  00083	73 08		 jae	 SHORT $LN52@Construct_
  00085	8d 45 e8	 lea	 eax, DWORD PTR $T6[ebp]
  00088	89 45 e0	 mov	 DWORD PTR tv138[ebp], eax
  0008b	eb 06		 jmp	 SHORT $LN53@Construct_
$LN52@Construct_:
  0008d	8d 45 e4	 lea	 eax, DWORD PTR $T5[ebp]
  00090	89 45 e0	 mov	 DWORD PTR tv138[ebp], eax
$LN53@Construct_:
  00093	8b 45 e0	 mov	 eax, DWORD PTR tv138[ebp]
  00096	89 45 c8	 mov	 DWORD PTR $T3[ebp], eax
  00099	8b 45 c8	 mov	 eax, DWORD PTR $T3[ebp]
  0009c	89 45 c4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2745 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  0009f	8b 45 c4	 mov	 eax, DWORD PTR $T2[ebp]
  000a2	8b 00		 mov	 eax, DWORD PTR [eax]
  000a4	89 45 d4	 mov	 DWORD PTR __New_capacity$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000a7	c6 45 ff 00	 mov	 BYTE PTR __Overflow_is_possible$7[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2746 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000ab	8b 45 d4	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  000ae	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  000b5	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2746 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000b6	89 45 dc	 mov	 DWORD PTR __New_array$[ebp], eax

; 2747 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  000b9	8d 45 dc	 lea	 eax, DWORD PTR __New_array$[ebp]
  000bc	50		 push	 eax
  000bd	ff 75 f8	 push	 DWORD PTR __My_data$[ebp]
  000c0	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000c5	59		 pop	 ecx
  000c6	59		 pop	 ecx

; 2748 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000c7	8b 45 dc	 mov	 eax, DWORD PTR __New_array$[ebp]
  000ca	89 45 c0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  000cd	8b 45 c0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  000d0	89 45 bc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2748 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  000d3	8b 45 f4	 mov	 eax, DWORD PTR __Right_size$[ebp]
  000d6	40		 inc	 eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d7	50		 push	 eax
  000d8	ff 75 d8	 push	 DWORD PTR __Right_ptr$[ebp]
  000db	ff 75 bc	 push	 DWORD PTR $T1[ebp]
  000de	e8 00 00 00 00	 call	 _memcpy
  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2749 :         _My_data._Mysize = _Right_size;

  000e6	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000e9	8b 4d f4	 mov	 ecx, DWORD PTR __Right_size$[ebp]
  000ec	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2750 :         _My_data._Myres  = _New_capacity;

  000ef	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  000f2	8b 4d d4	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  000f5	89 48 14	 mov	 DWORD PTR [eax+20], ecx
$LN1@Construct_:

; 2751 :     }

  000f8	c9		 leave
  000f9	c2 04 00	 ret	 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z
_TEXT	SEGMENT
__My_data_mem$1 = -36					; size = 4
__Right_data_mem$2 = -32				; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
$T6 = -16						; size = 4
_this$ = -12						; size = 4
___formal$ = -8						; size = 1
$T7 = -1						; size = 1
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign, COMDAT
; _this$ = ecx

; 2636 :     void _Move_assign(basic_string& _Right, _Equal_allocators) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2637 :         _Tidy_deallocate();

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 4409 :         return _Mypair._Get_first();

  00011	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00014	89 45 f0	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00017	8b 45 f0	 mov	 eax, DWORD PTR $T6[ebp]
  0001a	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
  0001d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00020	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00023	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  00026	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 2638 :         _Pocma(_Getal(), _Right._Getal());

  00029	ff 75 e8	 push	 DWORD PTR $T4[ebp]
  0002c	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0002f	e8 00 00 00 00	 call	 ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
  00034	59		 pop	 ecx
  00035	59		 pop	 ecx

; 2639 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  00036	33 c0		 xor	 eax, eax
  00038	88 45 ff	 mov	 BYTE PTR $T7[ebp], al
  0003b	8a 45 ff	 mov	 al, BYTE PTR $T7[ebp]
  0003e	88 45 f8	 mov	 BYTE PTR ___formal$[ebp], al

; 2680 :         const auto _My_data_mem =

  00041	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00044	89 45 dc	 mov	 DWORD PTR __My_data_mem$1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2682 :         const auto _Right_data_mem =

  00047	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0004a	89 45 e0	 mov	 DWORD PTR __Right_data_mem$2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2684 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0004d	6a 18		 push	 24			; 00000018H
  0004f	ff 75 e0	 push	 DWORD PTR __Right_data_mem$2[ebp]
  00052	ff 75 dc	 push	 DWORD PTR __My_data_mem$1[ebp]
  00055	e8 00 00 00 00	 call	 _memcpy
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2703 :         _Right._Tidy_init();

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2640 :     }

  00065	c9		 leave
  00066	c2 08 00	 ret	 8
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z
_TEXT	SEGMENT
$T2 = -100						; size = 4
__Alproxy$ = -96					; size = 4
$T3 = -92						; size = 4
__First1$ = -88						; size = 4
__Ptr$ = -84						; size = 4
$T4 = -80						; size = 4
$T5 = -76						; size = 4
$T6 = -72						; size = 4
_this$ = -68						; size = 4
$T7 = -64						; size = 4
__Fancyptr$8 = -60					; size = 4
tv190 = -56						; size = 4
$T9 = -52						; size = 4
_this$ = -48						; size = 4
__Masked$10 = -44					; size = 4
__New_size$ = -40					; size = 4
__Ptr$ = -36						; size = 4
__My_data$ = -32					; size = 4
__Max$ = -28						; size = 4
_this$ = -24						; size = 4
__New_capacity$ = -20					; size = 4
__Overflow_is_possible$11 = -15				; size = 1
_$S11$ = -14						; size = 1
$T12 = -13						; size = 1
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 1
__Source_of_al$ = 12					; size = 4
__Left_ptr$ = 16					; size = 4
__Left_size$ = 20					; size = 4
__Right_ptr$ = 24					; size = 4
__Right_size$ = 28					; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2521 :             _One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Source_of_al._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 58	 sub	 esp, 88			; 00000058H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 4413 :         return _Mypair._Get_first();

  00028	8b 45 0c	 mov	 eax, DWORD PTR __Source_of_al$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0002b	89 45 c0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4413 :         return _Mypair._Get_first();

  0002e	8b 45 c0	 mov	 eax, DWORD PTR $T7[ebp]
  00031	89 45 a4	 mov	 DWORD PTR $T3[ebp], eax

; 2199 : 
; 2200 :     // length of internal buffer, [1, 16]:
; 2201 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2202 :     // roundup mask for allocated buffers, [0, 15]:
; 2203 :     static constexpr size_type _ALLOC_MASK =
; 2204 :         sizeof(value_type) <= 1
; 2205 :             ? 15
; 2206 :             : sizeof(value_type) <= 2 ? 7 : sizeof(value_type) <= 4 ? 3 : sizeof(value_type) <= 8 ? 1 : 0;
; 2207 : 
; 2208 :     value_type* _Myptr() noexcept {
; 2209 :         value_type* _Result = _Bx._Buf;
; 2210 :         if (_Large_string_engaged()) {
; 2211 :             _Result = _Unfancy(_Bx._Ptr);
; 2212 :         }
; 2213 : 
; 2214 :         return _Result;
; 2215 :     }
; 2216 : 
; 2217 :     const value_type* _Myptr() const noexcept {
; 2218 :         const value_type* _Result = _Bx._Buf;
; 2219 :         if (_Large_string_engaged()) {
; 2220 :             _Result = _Unfancy(_Bx._Ptr);
; 2221 :         }
; 2222 : 
; 2223 :         return _Result;
; 2224 :     }
; 2225 : 
; 2226 :     bool _Large_string_engaged() const noexcept {
; 2227 :         return _BUF_SIZE <= _Myres;
; 2228 :     }
; 2229 : 
; 2230 :     void _Check_offset(const size_type _Off) const { // checks whether _Off is in the bounds of [0, size()]
; 2231 :         if (_Mysize < _Off) {
; 2232 :             _Xran();
; 2233 :         }
; 2234 :     }
; 2235 : 
; 2236 :     void _Check_offset_exclusive(const size_type _Off) const { // checks whether _Off is in the bounds of [0, size())
; 2237 :         if (_Mysize <= _Off) {
; 2238 :             _Xran();
; 2239 :         }
; 2240 :     }
; 2241 : 
; 2242 :     [[noreturn]] static void _Xran() {
; 2243 :         _Xout_of_range("invalid string position");
; 2244 :     }
; 2245 : 
; 2246 :     size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2247 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2248 :         return (_STD min)(_Size, _Mysize - _Off);
; 2249 :     }
; 2250 : 
; 2251 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2252 :         _Bxty() noexcept {} // user-provided, for fancy pointers
; 2253 : 
; 2254 :         ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2255 : 
; 2256 :         value_type _Buf[_BUF_SIZE];
; 2257 :         pointer _Ptr;
; 2258 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2259 :     } _Bx;
; 2260 : 
; 2261 :     size_type _Mysize; // current length of string
; 2262 :     size_type _Myres; // current storage reserved for string
; 2263 : };
; 2264 : 
; 2265 : // CLASS TEMPLATE basic_string
; 2266 : template <class _Ty>
; 2267 : constexpr size_t _Size_after_ebco_v = is_empty_v<_Ty> ? 0 : sizeof(_Ty); // get _Ty's size after being EBCO'd
; 2268 : 
; 2269 : struct _String_constructor_concat_tag {
; 2270 :     // tag to select constructors used by basic_string's concatenation operators (operator+)
; 2271 :     explicit _String_constructor_concat_tag() = default;
; 2272 : };
; 2273 : 
; 2274 : [[noreturn]] inline void _Xlen_string() {
; 2275 :     _Xlength_error("string too long");
; 2276 : }
; 2277 : 
; 2278 : template <class _Elem, class _Traits = char_traits<_Elem>, class _Alloc = allocator<_Elem>>
; 2279 : class basic_string { // null-terminated transparent array of elements
; 2280 : private:
; 2281 :     friend _Tidy_deallocate_guard<basic_string>;
; 2282 : 
; 2283 :     using _Alty        = _Rebind_alloc_t<_Alloc, _Elem>;
; 2284 :     using _Alty_traits = allocator_traits<_Alty>;
; 2285 : 
; 2286 :     using _Scary_val = _String_val<conditional_t<_Is_simple_alloc_v<_Alty>, _Simple_types<_Elem>,
; 2287 :         _String_iter_types<_Elem, typename _Alty_traits::size_type, typename _Alty_traits::difference_type,
; 2288 :             typename _Alty_traits::pointer, typename _Alty_traits::const_pointer, _Elem&, const _Elem&>>>;
; 2289 : 
; 2290 :     static_assert(!_ENFORCE_MATCHING_ALLOCATORS || is_same_v<_Elem, typename _Alloc::value_type>,
; 2291 :         _MISMATCHED_ALLOCATOR_MESSAGE("basic_string<T, Traits, Allocator>", "T"));
; 2292 : 
; 2293 :     static_assert(is_same_v<_Elem, typename _Traits::char_type>,
; 2294 :         "N4659 24.3.2.1 [string.require]/3 requires that the supplied "
; 2295 :         "char_traits character type match the string's character type.");
; 2296 : 
; 2297 :     static_assert(!is_array_v<_Elem> && is_trivial_v<_Elem> && is_standard_layout_v<_Elem>,
; 2298 :         "The character type of basic_string must be a non-array trivial standard-layout type. See N4861 "
; 2299 :         "[strings.general]/1.");
; 2300 : 
; 2301 : public:
; 2302 :     using traits_type    = _Traits;
; 2303 :     using allocator_type = _Alloc;
; 2304 : 
; 2305 :     using value_type      = _Elem;
; 2306 :     using size_type       = typename _Alty_traits::size_type;
; 2307 :     using difference_type = typename _Alty_traits::difference_type;
; 2308 :     using pointer         = typename _Alty_traits::pointer;
; 2309 :     using const_pointer   = typename _Alty_traits::const_pointer;
; 2310 :     using reference       = value_type&;
; 2311 :     using const_reference = const value_type&;
; 2312 : 
; 2313 :     using iterator       = _String_iterator<_Scary_val>;
; 2314 :     using const_iterator = _String_const_iterator<_Scary_val>;
; 2315 : 
; 2316 :     using reverse_iterator       = _STD reverse_iterator<iterator>;
; 2317 :     using const_reverse_iterator = _STD reverse_iterator<const_iterator>;
; 2318 : 
; 2319 : private:
; 2320 :     static constexpr auto _BUF_SIZE   = _Scary_val::_BUF_SIZE;
; 2321 :     static constexpr auto _ALLOC_MASK = _Scary_val::_ALLOC_MASK;
; 2322 : 
; 2323 :     // When doing _String_val operations by memcpy, we are touching:
; 2324 :     //   _String_val::_Bx::_Buf (type is array of _Elem)
; 2325 :     //   _String_val::_Bx::_Ptr (type is pointer)
; 2326 :     //   _String_val::_Mysize   (type is size_type)
; 2327 :     //   _String_val::_Myres    (type is size_type)
; 2328 :     // N4810 21.1 [strings.general]/1 says _Elem must be trivial standard-layout, so memcpy is safe.
; 2329 :     // We need to ask if pointer is safe to memcpy.
; 2330 :     // size_type must be an unsigned integral type so memcpy is safe.
; 2331 :     // We also need to disable memcpy if the user has supplied _Traits, since
; 2332 :     //   they can observe traits::assign and similar.
; 2333 :     static constexpr bool _Can_memcpy_val = _Is_specialization_v<_Traits, char_traits> && is_trivial_v<pointer>;
; 2334 :     // This offset skips over the _Container_base members, if any
; 2335 :     static constexpr size_t _Memcpy_val_offset = _Size_after_ebco_v<_Container_base>;
; 2336 :     static constexpr size_t _Memcpy_val_size   = sizeof(_Scary_val) - _Memcpy_val_offset;
; 2337 : 
; 2338 :     template <class _Iter>
; 2339 :     using _Is_elem_cptr = bool_constant<_Is_any_of_v<_Iter, const _Elem* const, _Elem* const, const _Elem*, _Elem*>>;
; 2340 : 
; 2341 : #if _HAS_CXX17
; 2342 :     template <class _StringViewIsh>
; 2343 :     using _Is_string_view_ish =
; 2344 :         enable_if_t<conjunction_v<is_convertible<const _StringViewIsh&, basic_string_view<_Elem, _Traits>>,
; 2345 :                         negation<is_convertible<const _StringViewIsh&, const _Elem*>>>,
; 2346 :             int>;
; 2347 : #endif // _HAS_CXX17
; 2348 : 
; 2349 : public:
; 2350 :     basic_string(const basic_string& _Right)
; 2351 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {
; 2352 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2353 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2354 :         _Construct_lv_contents(_Right);
; 2355 :         _Proxy._Release();
; 2356 :     }
; 2357 : 
; 2358 :     basic_string(const basic_string& _Right, const _Alloc& _Al) : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2359 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2360 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2361 :         _Construct_lv_contents(_Right);
; 2362 :         _Proxy._Release();
; 2363 :     }
; 2364 : 
; 2365 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {
; 2366 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2367 :         _Tidy_init();
; 2368 :     }
; 2369 : 
; 2370 :     explicit basic_string(const _Alloc& _Al) noexcept : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2371 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2372 :         _Tidy_init();
; 2373 :     }
; 2374 : 
; 2375 :     basic_string(const basic_string& _Right, const size_type _Roff, const _Alloc& _Al = _Alloc())
; 2376 :         : _Mypair(_One_then_variadic_args_t{}, _Al) { // construct from _Right [_Roff, <end>)
; 2377 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2378 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2379 :         _Tidy_init();
; 2380 :         assign(_Right, _Roff, npos);
; 2381 :         _Proxy._Release();
; 2382 :     }
; 2383 : 
; 2384 :     basic_string(
; 2385 :         const basic_string& _Right, const size_type _Roff, const size_type _Count, const _Alloc& _Al = _Alloc())
; 2386 :         : _Mypair(_One_then_variadic_args_t{}, _Al) { // construct from _Right [_Roff, _Roff + _Count)
; 2387 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2388 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2389 :         _Tidy_init();
; 2390 :         assign(_Right, _Roff, _Count);
; 2391 :         _Proxy._Release();
; 2392 :     }
; 2393 : 
; 2394 :     basic_string(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count)
; 2395 :         : _Mypair(_Zero_then_variadic_args_t{}) {
; 2396 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2397 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2398 :         _Tidy_init();
; 2399 :         assign(_Ptr, _Count);
; 2400 :         _Proxy._Release();
; 2401 :     }
; 2402 : 
; 2403 :     basic_string(
; 2404 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count, const _Alloc& _Al)
; 2405 :         : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2406 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2407 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2408 :         _Tidy_init();
; 2409 :         assign(_Ptr, _Count);
; 2410 :         _Proxy._Release();
; 2411 :     }
; 2412 : 
; 2413 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {
; 2414 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2415 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2416 :         _Tidy_init();
; 2417 :         assign(_Ptr);
; 2418 :         _Proxy._Release();
; 2419 :     }
; 2420 : 
; 2421 : #if _HAS_CXX17
; 2422 :     template <class _Alloc2 = _Alloc, enable_if_t<_Is_allocator<_Alloc2>::value, int> = 0>
; 2423 : #endif // _HAS_CXX17
; 2424 :     basic_string(_In_z_ const _Elem* const _Ptr, const _Alloc& _Al) : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2425 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2426 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2427 :         _Tidy_init();
; 2428 :         assign(_Ptr);
; 2429 :         _Proxy._Release();
; 2430 :     }
; 2431 : 
; 2432 :     basic_string(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) : _Mypair(_Zero_then_variadic_args_t{}) {
; 2433 :         // construct from _Count * _Ch
; 2434 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2435 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2436 :         _Tidy_init();
; 2437 :         assign(_Count, _Ch);
; 2438 :         _Proxy._Release();
; 2439 :     }
; 2440 : 
; 2441 : #if _HAS_CXX17
; 2442 :     template <class _Alloc2 = _Alloc, enable_if_t<_Is_allocator<_Alloc2>::value, int> = 0>
; 2443 : #endif // _HAS_CXX17
; 2444 :     basic_string(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch, const _Alloc& _Al)
; 2445 :         : _Mypair(_One_then_variadic_args_t{}, _Al) { // construct from _Count * _Ch with allocator
; 2446 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2447 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2448 :         _Tidy_init();
; 2449 :         assign(_Count, _Ch);
; 2450 :         _Proxy._Release();
; 2451 :     }
; 2452 : 
; 2453 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 2454 :     basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc()) : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2455 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2456 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2457 :         _Tidy_init();
; 2458 :         _Adl_verify_range(_First, _Last);
; 2459 :         _Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 2460 :         _Proxy._Release();
; 2461 :     }
; 2462 : 
; 2463 :     template <class _Iter>
; 2464 :     void _Construct(_Iter _First, const _Iter _Last, input_iterator_tag) {
; 2465 :         // initialize from [_First, _Last), input iterators
; 2466 :         _Tidy_deallocate_guard<basic_string> _Guard{this};
; 2467 :         for (; _First != _Last; ++_First) {
; 2468 :             push_back(*_First);
; 2469 :         }
; 2470 : 
; 2471 :         _Guard._Target = nullptr;
; 2472 :     }
; 2473 : 
; 2474 :     template <class _Iter>
; 2475 :     void _Construct(const _Iter _First, const _Iter _Last, forward_iterator_tag) {
; 2476 :         // initialize from [_First, _Last), forward iterators
; 2477 :         const size_type _Count = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 2478 :         reserve(_Count);
; 2479 :         _Construct(_First, _Last, input_iterator_tag{});
; 2480 :     }
; 2481 : 
; 2482 :     void _Construct(_Elem* const _First, _Elem* const _Last, random_access_iterator_tag) {
; 2483 :         // initialize from [_First, _Last), pointers
; 2484 :         if (_First != _Last) {
; 2485 :             assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
; 2486 :         }
; 2487 :     }
; 2488 : 
; 2489 :     void _Construct(const _Elem* const _First, const _Elem* const _Last, random_access_iterator_tag) {
; 2490 :         // initialize from [_First, _Last), const pointers
; 2491 :         if (_First != _Last) {
; 2492 :             assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
; 2493 :         }
; 2494 :     }
; 2495 : 
; 2496 :     basic_string(basic_string&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {
; 2497 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2498 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});
; 2499 :     }
; 2500 : 
; 2501 :     basic_string(basic_string&& _Right, const _Alloc& _Al) noexcept(
; 2502 :         _Alty_traits::is_always_equal::value) // strengthened
; 2503 :         : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2504 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2505 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2506 :         if _CONSTEXPR_IF (!_Alty_traits::is_always_equal::value) {
; 2507 :             if (_Getal() != _Right._Getal()) {
; 2508 :                 _Construct_lv_contents(_Right);
; 2509 :                 _Proxy._Release();
; 2510 :                 return;
; 2511 :             }
; 2512 :         }
; 2513 : 
; 2514 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});
; 2515 :         _Proxy._Release();
; 2516 :     }
; 2517 : 
; 2518 :     basic_string(_String_constructor_concat_tag, const basic_string& _Source_of_al, const _Elem* const _Left_ptr,
; 2519 :         const size_type _Left_size, const _Elem* const _Right_ptr, const size_type _Right_size)
; 2520 :         : _Mypair(

  00034	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 bc	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1344 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0003a	8b 45 bc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	89 45 d0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00040	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00047	8b 45 d0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 2199 : 
; 2200 :     // length of internal buffer, [1, 16]:
; 2201 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2202 :     // roundup mask for allocated buffers, [0, 15]:
; 2203 :     static constexpr size_type _ALLOC_MASK =
; 2204 :         sizeof(value_type) <= 1
; 2205 :             ? 15
; 2206 :             : sizeof(value_type) <= 2 ? 7 : sizeof(value_type) <= 4 ? 3 : sizeof(value_type) <= 8 ? 1 : 0;
; 2207 : 
; 2208 :     value_type* _Myptr() noexcept {
; 2209 :         value_type* _Result = _Bx._Buf;
; 2210 :         if (_Large_string_engaged()) {
; 2211 :             _Result = _Unfancy(_Bx._Ptr);
; 2212 :         }
; 2213 : 
; 2214 :         return _Result;
; 2215 :     }
; 2216 : 
; 2217 :     const value_type* _Myptr() const noexcept {
; 2218 :         const value_type* _Result = _Bx._Buf;
; 2219 :         if (_Large_string_engaged()) {
; 2220 :             _Result = _Unfancy(_Bx._Ptr);
; 2221 :         }
; 2222 : 
; 2223 :         return _Result;
; 2224 :     }
; 2225 : 
; 2226 :     bool _Large_string_engaged() const noexcept {
; 2227 :         return _BUF_SIZE <= _Myres;
; 2228 :     }
; 2229 : 
; 2230 :     void _Check_offset(const size_type _Off) const { // checks whether _Off is in the bounds of [0, size()]
; 2231 :         if (_Mysize < _Off) {
; 2232 :             _Xran();
; 2233 :         }
; 2234 :     }
; 2235 : 
; 2236 :     void _Check_offset_exclusive(const size_type _Off) const { // checks whether _Off is in the bounds of [0, size())
; 2237 :         if (_Mysize <= _Off) {
; 2238 :             _Xran();
; 2239 :         }
; 2240 :     }
; 2241 : 
; 2242 :     [[noreturn]] static void _Xran() {
; 2243 :         _Xout_of_range("invalid string position");
; 2244 :     }
; 2245 : 
; 2246 :     size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2247 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2248 :         return (_STD min)(_Size, _Mysize - _Off);
; 2249 :     }
; 2250 : 
; 2251 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2252 :         _Bxty() noexcept {} // user-provided, for fancy pointers
; 2253 : 
; 2254 :         ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2255 : 
; 2256 :         value_type _Buf[_BUF_SIZE];
; 2257 :         pointer _Ptr;
; 2258 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2259 :     } _Bx;
; 2260 : 
; 2261 :     size_type _Mysize; // current length of string
; 2262 :     size_type _Myres; // current storage reserved for string
; 2263 : };
; 2264 : 
; 2265 : // CLASS TEMPLATE basic_string
; 2266 : template <class _Ty>
; 2267 : constexpr size_t _Size_after_ebco_v = is_empty_v<_Ty> ? 0 : sizeof(_Ty); // get _Ty's size after being EBCO'd
; 2268 : 
; 2269 : struct _String_constructor_concat_tag {
; 2270 :     // tag to select constructors used by basic_string's concatenation operators (operator+)
; 2271 :     explicit _String_constructor_concat_tag() = default;
; 2272 : };
; 2273 : 
; 2274 : [[noreturn]] inline void _Xlen_string() {
; 2275 :     _Xlength_error("string too long");
; 2276 : }
; 2277 : 
; 2278 : template <class _Elem, class _Traits = char_traits<_Elem>, class _Alloc = allocator<_Elem>>
; 2279 : class basic_string { // null-terminated transparent array of elements
; 2280 : private:
; 2281 :     friend _Tidy_deallocate_guard<basic_string>;
; 2282 : 
; 2283 :     using _Alty        = _Rebind_alloc_t<_Alloc, _Elem>;
; 2284 :     using _Alty_traits = allocator_traits<_Alty>;
; 2285 : 
; 2286 :     using _Scary_val = _String_val<conditional_t<_Is_simple_alloc_v<_Alty>, _Simple_types<_Elem>,
; 2287 :         _String_iter_types<_Elem, typename _Alty_traits::size_type, typename _Alty_traits::difference_type,
; 2288 :             typename _Alty_traits::pointer, typename _Alty_traits::const_pointer, _Elem&, const _Elem&>>>;
; 2289 : 
; 2290 :     static_assert(!_ENFORCE_MATCHING_ALLOCATORS || is_same_v<_Elem, typename _Alloc::value_type>,
; 2291 :         _MISMATCHED_ALLOCATOR_MESSAGE("basic_string<T, Traits, Allocator>", "T"));
; 2292 : 
; 2293 :     static_assert(is_same_v<_Elem, typename _Traits::char_type>,
; 2294 :         "N4659 24.3.2.1 [string.require]/3 requires that the supplied "
; 2295 :         "char_traits character type match the string's character type.");
; 2296 : 
; 2297 :     static_assert(!is_array_v<_Elem> && is_trivial_v<_Elem> && is_standard_layout_v<_Elem>,
; 2298 :         "The character type of basic_string must be a non-array trivial standard-layout type. See N4861 "
; 2299 :         "[strings.general]/1.");
; 2300 : 
; 2301 : public:
; 2302 :     using traits_type    = _Traits;
; 2303 :     using allocator_type = _Alloc;
; 2304 : 
; 2305 :     using value_type      = _Elem;
; 2306 :     using size_type       = typename _Alty_traits::size_type;
; 2307 :     using difference_type = typename _Alty_traits::difference_type;
; 2308 :     using pointer         = typename _Alty_traits::pointer;
; 2309 :     using const_pointer   = typename _Alty_traits::const_pointer;
; 2310 :     using reference       = value_type&;
; 2311 :     using const_reference = const value_type&;
; 2312 : 
; 2313 :     using iterator       = _String_iterator<_Scary_val>;
; 2314 :     using const_iterator = _String_const_iterator<_Scary_val>;
; 2315 : 
; 2316 :     using reverse_iterator       = _STD reverse_iterator<iterator>;
; 2317 :     using const_reverse_iterator = _STD reverse_iterator<const_iterator>;
; 2318 : 
; 2319 : private:
; 2320 :     static constexpr auto _BUF_SIZE   = _Scary_val::_BUF_SIZE;
; 2321 :     static constexpr auto _ALLOC_MASK = _Scary_val::_ALLOC_MASK;
; 2322 : 
; 2323 :     // When doing _String_val operations by memcpy, we are touching:
; 2324 :     //   _String_val::_Bx::_Buf (type is array of _Elem)
; 2325 :     //   _String_val::_Bx::_Ptr (type is pointer)
; 2326 :     //   _String_val::_Mysize   (type is size_type)
; 2327 :     //   _String_val::_Myres    (type is size_type)
; 2328 :     // N4810 21.1 [strings.general]/1 says _Elem must be trivial standard-layout, so memcpy is safe.
; 2329 :     // We need to ask if pointer is safe to memcpy.
; 2330 :     // size_type must be an unsigned integral type so memcpy is safe.
; 2331 :     // We also need to disable memcpy if the user has supplied _Traits, since
; 2332 :     //   they can observe traits::assign and similar.
; 2333 :     static constexpr bool _Can_memcpy_val = _Is_specialization_v<_Traits, char_traits> && is_trivial_v<pointer>;
; 2334 :     // This offset skips over the _Container_base members, if any
; 2335 :     static constexpr size_t _Memcpy_val_offset = _Size_after_ebco_v<_Container_base>;
; 2336 :     static constexpr size_t _Memcpy_val_size   = sizeof(_Scary_val) - _Memcpy_val_offset;
; 2337 : 
; 2338 :     template <class _Iter>
; 2339 :     using _Is_elem_cptr = bool_constant<_Is_any_of_v<_Iter, const _Elem* const, _Elem* const, const _Elem*, _Elem*>>;
; 2340 : 
; 2341 : #if _HAS_CXX17
; 2342 :     template <class _StringViewIsh>
; 2343 :     using _Is_string_view_ish =
; 2344 :         enable_if_t<conjunction_v<is_convertible<const _StringViewIsh&, basic_string_view<_Elem, _Traits>>,
; 2345 :                         negation<is_convertible<const _StringViewIsh&, const _Elem*>>>,
; 2346 :             int>;
; 2347 : #endif // _HAS_CXX17
; 2348 : 
; 2349 : public:
; 2350 :     basic_string(const basic_string& _Right)
; 2351 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {
; 2352 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2353 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2354 :         _Construct_lv_contents(_Right);
; 2355 :         _Proxy._Release();
; 2356 :     }
; 2357 : 
; 2358 :     basic_string(const basic_string& _Right, const _Alloc& _Al) : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2359 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2360 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2361 :         _Construct_lv_contents(_Right);
; 2362 :         _Proxy._Release();
; 2363 :     }
; 2364 : 
; 2365 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {
; 2366 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2367 :         _Tidy_init();
; 2368 :     }
; 2369 : 
; 2370 :     explicit basic_string(const _Alloc& _Al) noexcept : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2371 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2372 :         _Tidy_init();
; 2373 :     }
; 2374 : 
; 2375 :     basic_string(const basic_string& _Right, const size_type _Roff, const _Alloc& _Al = _Alloc())
; 2376 :         : _Mypair(_One_then_variadic_args_t{}, _Al) { // construct from _Right [_Roff, <end>)
; 2377 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2378 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2379 :         _Tidy_init();
; 2380 :         assign(_Right, _Roff, npos);
; 2381 :         _Proxy._Release();
; 2382 :     }
; 2383 : 
; 2384 :     basic_string(
; 2385 :         const basic_string& _Right, const size_type _Roff, const size_type _Count, const _Alloc& _Al = _Alloc())
; 2386 :         : _Mypair(_One_then_variadic_args_t{}, _Al) { // construct from _Right [_Roff, _Roff + _Count)
; 2387 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2388 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2389 :         _Tidy_init();
; 2390 :         assign(_Right, _Roff, _Count);
; 2391 :         _Proxy._Release();
; 2392 :     }
; 2393 : 
; 2394 :     basic_string(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count)
; 2395 :         : _Mypair(_Zero_then_variadic_args_t{}) {
; 2396 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2397 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2398 :         _Tidy_init();
; 2399 :         assign(_Ptr, _Count);
; 2400 :         _Proxy._Release();
; 2401 :     }
; 2402 : 
; 2403 :     basic_string(
; 2404 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count, const _Alloc& _Al)
; 2405 :         : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2406 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2407 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2408 :         _Tidy_init();
; 2409 :         assign(_Ptr, _Count);
; 2410 :         _Proxy._Release();
; 2411 :     }
; 2412 : 
; 2413 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {
; 2414 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2415 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2416 :         _Tidy_init();
; 2417 :         assign(_Ptr);
; 2418 :         _Proxy._Release();
; 2419 :     }
; 2420 : 
; 2421 : #if _HAS_CXX17
; 2422 :     template <class _Alloc2 = _Alloc, enable_if_t<_Is_allocator<_Alloc2>::value, int> = 0>
; 2423 : #endif // _HAS_CXX17
; 2424 :     basic_string(_In_z_ const _Elem* const _Ptr, const _Alloc& _Al) : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2425 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2426 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2427 :         _Tidy_init();
; 2428 :         assign(_Ptr);
; 2429 :         _Proxy._Release();
; 2430 :     }
; 2431 : 
; 2432 :     basic_string(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) : _Mypair(_Zero_then_variadic_args_t{}) {
; 2433 :         // construct from _Count * _Ch
; 2434 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2435 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2436 :         _Tidy_init();
; 2437 :         assign(_Count, _Ch);
; 2438 :         _Proxy._Release();
; 2439 :     }
; 2440 : 
; 2441 : #if _HAS_CXX17
; 2442 :     template <class _Alloc2 = _Alloc, enable_if_t<_Is_allocator<_Alloc2>::value, int> = 0>
; 2443 : #endif // _HAS_CXX17
; 2444 :     basic_string(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch, const _Alloc& _Al)
; 2445 :         : _Mypair(_One_then_variadic_args_t{}, _Al) { // construct from _Count * _Ch with allocator
; 2446 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2447 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2448 :         _Tidy_init();
; 2449 :         assign(_Count, _Ch);
; 2450 :         _Proxy._Release();
; 2451 :     }
; 2452 : 
; 2453 :     template <class _Iter, enable_if_t<_Is_iterator_v<_Iter>, int> = 0>
; 2454 :     basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al = _Alloc()) : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2455 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2456 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2457 :         _Tidy_init();
; 2458 :         _Adl_verify_range(_First, _Last);
; 2459 :         _Construct(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Iter_cat_t<_Iter>{});
; 2460 :         _Proxy._Release();
; 2461 :     }
; 2462 : 
; 2463 :     template <class _Iter>
; 2464 :     void _Construct(_Iter _First, const _Iter _Last, input_iterator_tag) {
; 2465 :         // initialize from [_First, _Last), input iterators
; 2466 :         _Tidy_deallocate_guard<basic_string> _Guard{this};
; 2467 :         for (; _First != _Last; ++_First) {
; 2468 :             push_back(*_First);
; 2469 :         }
; 2470 : 
; 2471 :         _Guard._Target = nullptr;
; 2472 :     }
; 2473 : 
; 2474 :     template <class _Iter>
; 2475 :     void _Construct(const _Iter _First, const _Iter _Last, forward_iterator_tag) {
; 2476 :         // initialize from [_First, _Last), forward iterators
; 2477 :         const size_type _Count = _Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)));
; 2478 :         reserve(_Count);
; 2479 :         _Construct(_First, _Last, input_iterator_tag{});
; 2480 :     }
; 2481 : 
; 2482 :     void _Construct(_Elem* const _First, _Elem* const _Last, random_access_iterator_tag) {
; 2483 :         // initialize from [_First, _Last), pointers
; 2484 :         if (_First != _Last) {
; 2485 :             assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
; 2486 :         }
; 2487 :     }
; 2488 : 
; 2489 :     void _Construct(const _Elem* const _First, const _Elem* const _Last, random_access_iterator_tag) {
; 2490 :         // initialize from [_First, _Last), const pointers
; 2491 :         if (_First != _Last) {
; 2492 :             assign(_First, _Convert_size<size_type>(static_cast<size_t>(_Last - _First)));
; 2493 :         }
; 2494 :     }
; 2495 : 
; 2496 :     basic_string(basic_string&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {
; 2497 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2498 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});
; 2499 :     }
; 2500 : 
; 2501 :     basic_string(basic_string&& _Right, const _Alloc& _Al) noexcept(
; 2502 :         _Alty_traits::is_always_equal::value) // strengthened
; 2503 :         : _Mypair(_One_then_variadic_args_t{}, _Al) {
; 2504 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2505 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2506 :         if _CONSTEXPR_IF (!_Alty_traits::is_always_equal::value) {
; 2507 :             if (_Getal() != _Right._Getal()) {
; 2508 :                 _Construct_lv_contents(_Right);
; 2509 :                 _Proxy._Release();
; 2510 :                 return;
; 2511 :             }
; 2512 :         }
; 2513 : 
; 2514 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});
; 2515 :         _Proxy._Release();
; 2516 :     }
; 2517 : 
; 2518 :     basic_string(_String_constructor_concat_tag, const basic_string& _Source_of_al, const _Elem* const _Left_ptr,
; 2519 :         const size_type _Left_size, const _Elem* const _Right_ptr, const size_type _Right_size)
; 2520 :         : _Mypair(

  0004e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2522 :         _STL_INTERNAL_CHECK(_Left_size <= max_size());
; 2523 :         _STL_INTERNAL_CHECK(_Right_size <= max_size());
; 2524 :         _STL_INTERNAL_CHECK(_Right_size <= max_size() - _Left_size);
; 2525 :         const auto _New_size    = static_cast<size_type>(_Left_size + _Right_size);

  00052	8b 45 14	 mov	 eax, DWORD PTR __Left_size$[ebp]
  00055	03 45 1c	 add	 eax, DWORD PTR __Right_size$[ebp]
  00058	89 45 d8	 mov	 DWORD PTR __New_size$[ebp], eax

; 2526 :         size_type _New_capacity = _BUF_SIZE - 1;

  0005b	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __New_capacity$[ebp], 15 ; 0000000fH

; 2527 :         auto& _My_data          = _Mypair._Myval2;

  00062	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00065	89 45 e0	 mov	 DWORD PTR __My_data$[ebp], eax

; 2528 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  00068	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  0006b	89 45 dc	 mov	 DWORD PTR __Ptr$[ebp], eax

; 2529 :         auto&& _Alproxy         = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0006e	8d 45 f2	 lea	 eax, DWORD PTR _$S11$[ebp]
  00071	89 45 a0	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2530 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data); // throws
; 2531 :         if (_New_capacity < _New_size) {

  00074	8b 45 ec	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00077	3b 45 d8	 cmp	 eax, DWORD PTR __New_size$[ebp]
  0007a	0f 83 a8 00 00
	00		 jae	 $LN2@basic_stri

; 2532 :             _New_capacity           = _Calculate_growth(_New_size, _BUF_SIZE - 1, max_size());

  00080	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00088	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 4285 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0008b	8b 45 d8	 mov	 eax, DWORD PTR __New_size$[ebp]
  0008e	83 c8 0f	 or	 eax, 15			; 0000000fH
  00091	89 45 d4	 mov	 DWORD PTR __Masked$10[ebp], eax

; 4286 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00094	8b 45 d4	 mov	 eax, DWORD PTR __Masked$10[ebp]
  00097	3b 45 e4	 cmp	 eax, DWORD PTR __Max$[ebp]
  0009a	76 08		 jbe	 SHORT $LN54@basic_stri

; 4287 :             return _Max;

  0009c	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  0009f	89 45 ec	 mov	 DWORD PTR __New_capacity$[ebp], eax
  000a2	eb 4c		 jmp	 SHORT $LN56@basic_stri
$LN54@basic_stri:

; 4288 :         }
; 4289 : 
; 4290 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  000a4	6a 0f		 push	 15			; 0000000fH
  000a6	58		 pop	 eax
  000a7	d1 e8		 shr	 eax, 1
  000a9	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  000ac	2b c8		 sub	 ecx, eax
  000ae	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  000b1	73 08		 jae	 SHORT $LN55@basic_stri

; 4291 :             return _Max;

  000b3	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  000b6	89 45 ec	 mov	 DWORD PTR __New_capacity$[ebp], eax
  000b9	eb 35		 jmp	 SHORT $LN56@basic_stri
$LN55@basic_stri:

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000bb	6a 0f		 push	 15			; 0000000fH
  000bd	58		 pop	 eax
  000be	d1 e8		 shr	 eax, 1
  000c0	83 c0 0f	 add	 eax, 15			; 0000000fH
  000c3	89 45 cc	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  000c6	8b 45 d4	 mov	 eax, DWORD PTR __Masked$10[ebp]
  000c9	3b 45 cc	 cmp	 eax, DWORD PTR $T9[ebp]
  000cc	73 08		 jae	 SHORT $LN60@basic_stri
  000ce	8d 45 cc	 lea	 eax, DWORD PTR $T9[ebp]
  000d1	89 45 c8	 mov	 DWORD PTR tv190[ebp], eax
  000d4	eb 06		 jmp	 SHORT $LN61@basic_stri
$LN60@basic_stri:
  000d6	8d 45 d4	 lea	 eax, DWORD PTR __Masked$10[ebp]
  000d9	89 45 c8	 mov	 DWORD PTR tv190[ebp], eax
$LN61@basic_stri:
  000dc	8b 45 c8	 mov	 eax, DWORD PTR tv190[ebp]
  000df	89 45 b8	 mov	 DWORD PTR $T6[ebp], eax
  000e2	8b 45 b8	 mov	 eax, DWORD PTR $T6[ebp]
  000e5	89 45 b4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000e8	8b 45 b4	 mov	 eax, DWORD PTR $T5[ebp]
  000eb	8b 00		 mov	 eax, DWORD PTR [eax]
  000ed	89 45 ec	 mov	 DWORD PTR __New_capacity$[ebp], eax
$LN56@basic_stri:

; 4409 :         return _Mypair._Get_first();

  000f0	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000f3	89 45 b0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  000f6	8b 45 b0	 mov	 eax, DWORD PTR $T4[ebp]
  000f9	89 45 9c	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000fc	c6 45 f1 00	 mov	 BYTE PTR __Overflow_is_possible$11[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2533 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00100	8b 45 ec	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00103	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0010a	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2533 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  0010b	89 45 c4	 mov	 DWORD PTR __Fancyptr$8[ebp], eax

; 2534 :             _Ptr                    = _Unfancy(_Fancyptr);

  0010e	8b 45 c4	 mov	 eax, DWORD PTR __Fancyptr$8[ebp]
  00111	89 45 ac	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00114	8b 45 ac	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00117	89 45 dc	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2535 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0011a	8d 45 c4	 lea	 eax, DWORD PTR __Fancyptr$8[ebp]
  0011d	50		 push	 eax
  0011e	ff 75 e0	 push	 DWORD PTR __My_data$[ebp]
  00121	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00126	59		 pop	 ecx
  00127	59		 pop	 ecx
$LN2@basic_stri:

; 2536 :         }
; 2537 : 
; 2538 :         _My_data._Mysize = _New_size;

  00128	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  0012b	8b 4d d8	 mov	 ecx, DWORD PTR __New_size$[ebp]
  0012e	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2539 :         _My_data._Myres  = _New_capacity;

  00131	8b 45 e0	 mov	 eax, DWORD PTR __My_data$[ebp]
  00134	8b 4d ec	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00137	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0013a	ff 75 14	 push	 DWORD PTR __Left_size$[ebp]
  0013d	ff 75 10	 push	 DWORD PTR __Left_ptr$[ebp]
  00140	ff 75 dc	 push	 DWORD PTR __Ptr$[ebp]
  00143	e8 00 00 00 00	 call	 _memcpy
  00148	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2540 :         _Traits::copy(_Ptr, _Left_ptr, _Left_size);
; 2541 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  0014b	8b 45 dc	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0014e	03 45 14	 add	 eax, DWORD PTR __Left_size$[ebp]
  00151	89 45 a8	 mov	 DWORD PTR __First1$[ebp], eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00154	ff 75 1c	 push	 DWORD PTR __Right_size$[ebp]
  00157	ff 75 18	 push	 DWORD PTR __Right_ptr$[ebp]
  0015a	ff 75 a8	 push	 DWORD PTR __First1$[ebp]
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2542 :         _Traits::assign(_Ptr[_New_size], _Elem());

  00165	c6 45 f3 00	 mov	 BYTE PTR $T12[ebp], 0

; 428  :         _Left = _Right;

  00169	8b 45 dc	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0016c	03 45 d8	 add	 eax, DWORD PTR __New_size$[ebp]
  0016f	8a 4d f3	 mov	 cl, BYTE PTR $T12[ebp]
  00172	88 08		 mov	 BYTE PTR [eax], cl

; 2543 :         _Proxy._Release();
; 2544 :     }

  00174	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00178	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0017b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0017e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00185	59		 pop	 ecx
  00186	c9		 leave
  00187	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z$0:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@ABV01@QBDI2I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 4
__My_data_mem$2 = -36					; size = 4
__Right_data_mem$3 = -32				; size = 4
_this$ = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_this$ = -16						; size = 4
_this$ = -12						; size = 4
___formal$ = -8						; size = 1
$T6 = -1						; size = 1
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2496 :     basic_string(basic_string&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 4409 :         return _Mypair._Get_first();

  00009	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  0000f	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  00012	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00015	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00018	89 45 d8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2496 :     basic_string(basic_string&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

  0001b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1344 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00021	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00024	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00027	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  0002e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00031	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 2497 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2498 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  00035	33 c0		 xor	 eax, eax
  00037	88 45 ff	 mov	 BYTE PTR $T6[ebp], al
  0003a	8a 45 ff	 mov	 al, BYTE PTR $T6[ebp]
  0003d	88 45 f8	 mov	 BYTE PTR ___formal$[ebp], al

; 2680 :         const auto _My_data_mem =

  00040	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00043	89 45 dc	 mov	 DWORD PTR __My_data_mem$2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2682 :         const auto _Right_data_mem =

  00046	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00049	89 45 e0	 mov	 DWORD PTR __Right_data_mem$3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2684 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0004c	6a 18		 push	 24			; 00000018H
  0004e	ff 75 e0	 push	 DWORD PTR __Right_data_mem$3[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __My_data_mem$2[ebp]
  00054	e8 00 00 00 00	 call	 _memcpy
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2703 :         _Right._Tidy_init();

  0005c	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  0005f	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2499 :     }

  00064	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00067	c9		 leave
  00068	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__Alproxy$ = -40					; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
_this$ = -28						; size = 4
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_$S6$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2413 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0002e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00031	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00034	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  0003b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 2413 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00042	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2414 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00046	8d 45 f3	 lea	 eax, DWORD PTR _$S6$[ebp]
  00049	89 45 d8	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2415 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2416 :         _Tidy_init();

  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00054	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00057	e8 00 00 00 00	 call	 _strlen
  0005c	59		 pop	 ecx
  0005d	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  00060	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  00063	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00066	ff 75 dc	 push	 DWORD PTR $T2[ebp]
  00069	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0006c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2417 :         assign(_Ptr);
; 2418 :         _Proxy._Release();
; 2419 :     }

  00074	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00078	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	c9		 leave
  00087	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2365 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00015	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  0001c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 2366 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2367 :         _Tidy_init();

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2368 :     }

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c9		 leave
  0002f	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Alproxy$ = -40					; size = 4
$T2 = -36						; size = 4
_this$ = -32						; size = 4
$T3 = -28						; size = 4
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_$S9$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2351 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 4413 :         return _Mypair._Get_first();

  00028	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0002b	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4413 :         return _Mypair._Get_first();

  0002e	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00031	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax

; 2351 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00034	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 e0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1344 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0003a	8b 45 e0	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00040	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  00047	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 2351 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  0004e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2352 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00052	8d 45 f3	 lea	 eax, DWORD PTR _$S9$[ebp]
  00055	89 45 d8	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2353 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2354 :         _Construct_lv_contents(_Right);

  00058	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  0005b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents

; 2355 :         _Proxy._Release();
; 2356 :     }

  00063	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	c9		 leave
  00076	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__Result$ = -16						; size = 4
tv76 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2217 :     const value_type* _Myptr() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2218 :         const value_type* _Result = _Bx._Buf;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00016	72 09		 jb	 SHORT $LN6@Myptr
  00018	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  0001f	eb 04		 jmp	 SHORT $LN7@Myptr
$LN6@Myptr:
  00021	83 65 f4 00	 and	 DWORD PTR tv76[ebp], 0
$LN7@Myptr:
  00025	8a 45 f4	 mov	 al, BYTE PTR tv76[ebp]
  00028	88 45 ff	 mov	 BYTE PTR $T1[ebp], al

; 2219 :         if (_Large_string_engaged()) {

  0002b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0e		 je	 SHORT $LN2@Myptr

; 2220 :             _Result = _Unfancy(_Bx._Ptr);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0003b	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2223 :         return _Result;

  00041	8b 45 f0	 mov	 eax, DWORD PTR __Result$[ebp]

; 2224 :     }

  00044	c9		 leave
  00045	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__Result$ = -16						; size = 4
tv76 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2208 :     value_type* _Myptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2209 :         value_type* _Result = _Bx._Buf;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00016	72 09		 jb	 SHORT $LN6@Myptr
  00018	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  0001f	eb 04		 jmp	 SHORT $LN7@Myptr
$LN6@Myptr:
  00021	83 65 f4 00	 and	 DWORD PTR tv76[ebp], 0
$LN7@Myptr:
  00025	8a 45 f4	 mov	 al, BYTE PTR tv76[ebp]
  00028	88 45 ff	 mov	 BYTE PTR $T1[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  0002b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0e		 je	 SHORT $LN2@Myptr

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0003b	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  00041	8b 45 f0	 mov	 eax, DWORD PTR __Result$[ebp]

; 2215 :     }

  00044	c9		 leave
  00045	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 60 14 00	 and	 DWORD PTR [eax+20], 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c9		 leave
  00019	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2274 : [[noreturn]] inline void _Xlen_string() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2275 :     _Xlength_error("string too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2276 : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	83 c0 23	 add	 eax, 35			; 00000023H
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f4	 mov	 DWORD PTR __Ptr_user$[ebp], eax

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	6a 04		 push	 4
  0001d	58		 pop	 eax
  0001e	6b c0 ff	 imul	 eax, eax, -1
  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00024	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00027	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	2b 45 f8	 sub	 eax, DWORD PTR __Ptr_container$[ebp]
  00039	89 45 fc	 mov	 DWORD PTR __Back_shift$[ebp], eax
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00040	72 08		 jb	 SHORT $LN7@Adjust_man
  00042	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00046	77 02		 ja	 SHORT $LN7@Adjust_man
  00048	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0004f	33 c0		 xor	 eax, eax
  00051	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00053	33 c0		 xor	 eax, eax
  00055	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 130  :     {

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 141  :     {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c9		 leave
  0003d	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 0b		 je	 SHORT $LN3@what
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00023	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00026	c9		 leave
  00027	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 89   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx

; 91   :     }

  0001d	c9		 leave
  0001e	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx

; 74   :     }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_memcpy_s.h
;	COMDAT _memcpy_s
_TEXT	SEGMENT
__Expr_val$1 = -24					; size = 4
__Expr_val$2 = -20					; size = 4
__Expr_val$3 = -16					; size = 4
tv79 = -12						; size = 4
tv75 = -8						; size = 4
tv66 = -4						; size = 4
__Destination$ = 8					; size = 4
__DestinationSize$ = 12					; size = 4
__Source$ = 16						; size = 4
__SourceSize$ = 20					; size = 4
_memcpy_s PROC						; COMDAT

; 41   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 42   :         if (_SourceSize == 0)

  00006	83 7d 14 00	 cmp	 DWORD PTR __SourceSize$[ebp], 0
  0000a	75 07		 jne	 SHORT $LN2@memcpy_s

; 43   :         {
; 44   :             return 0;

  0000c	33 c0		 xor	 eax, eax
  0000e	e9 d7 00 00 00	 jmp	 $LN1@memcpy_s
$LN2@memcpy_s:

; 45   :         }
; 46   : 
; 47   :         _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Destination != NULL, EINVAL);

  00013	83 7d 08 00	 cmp	 DWORD PTR __Destination$[ebp], 0
  00017	74 09		 je	 SHORT $LN9@memcpy_s
  00019	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00020	eb 04		 jmp	 SHORT $LN10@memcpy_s
$LN9@memcpy_s:
  00022	83 65 fc 00	 and	 DWORD PTR tv66[ebp], 0
$LN10@memcpy_s:
  00026	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00029	89 45 f0	 mov	 DWORD PTR __Expr_val$3[ebp], eax
  0002c	83 7d f0 00	 cmp	 DWORD PTR __Expr_val$3[ebp], 0
  00030	75 18		 jne	 SHORT $LN3@memcpy_s
  00032	e8 00 00 00 00	 call	 __errno
  00037	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  0003d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00042	6a 16		 push	 22			; 00000016H
  00044	58		 pop	 eax
  00045	e9 a0 00 00 00	 jmp	 $LN1@memcpy_s
$LN3@memcpy_s:

; 48   :         if (_Source == NULL || _DestinationSize < _SourceSize)

  0004a	83 7d 10 00	 cmp	 DWORD PTR __Source$[ebp], 0
  0004e	74 08		 je	 SHORT $LN5@memcpy_s
  00050	8b 45 0c	 mov	 eax, DWORD PTR __DestinationSize$[ebp]
  00053	3b 45 14	 cmp	 eax, DWORD PTR __SourceSize$[ebp]
  00056	73 7f		 jae	 SHORT $LN4@memcpy_s
$LN5@memcpy_s:

; 49   :         {
; 50   :             memset(_Destination, 0, _DestinationSize);

  00058	ff 75 0c	 push	 DWORD PTR __DestinationSize$[ebp]
  0005b	6a 00		 push	 0
  0005d	ff 75 08	 push	 DWORD PTR __Destination$[ebp]
  00060	e8 00 00 00 00	 call	 _memset
  00065	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 
; 52   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_Source != NULL,                 EINVAL);

  00068	83 7d 10 00	 cmp	 DWORD PTR __Source$[ebp], 0
  0006c	74 09		 je	 SHORT $LN11@memcpy_s
  0006e	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
  00075	eb 04		 jmp	 SHORT $LN12@memcpy_s
$LN11@memcpy_s:
  00077	83 65 f8 00	 and	 DWORD PTR tv75[ebp], 0
$LN12@memcpy_s:
  0007b	8b 45 f8	 mov	 eax, DWORD PTR tv75[ebp]
  0007e	89 45 ec	 mov	 DWORD PTR __Expr_val$2[ebp], eax
  00081	83 7d ec 00	 cmp	 DWORD PTR __Expr_val$2[ebp], 0
  00085	75 15		 jne	 SHORT $LN6@memcpy_s
  00087	e8 00 00 00 00	 call	 __errno
  0008c	c7 00 16 00 00
	00		 mov	 DWORD PTR [eax], 22	; 00000016H
  00092	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  00097	6a 16		 push	 22			; 00000016H
  00099	58		 pop	 eax
  0009a	eb 4e		 jmp	 SHORT $LN1@memcpy_s
$LN6@memcpy_s:

; 53   :             _CRT_MEMCPY_S_VALIDATE_RETURN_ERRCODE(_DestinationSize >= _SourceSize, ERANGE);

  0009c	8b 45 0c	 mov	 eax, DWORD PTR __DestinationSize$[ebp]
  0009f	3b 45 14	 cmp	 eax, DWORD PTR __SourceSize$[ebp]
  000a2	72 09		 jb	 SHORT $LN13@memcpy_s
  000a4	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv79[ebp], 1
  000ab	eb 04		 jmp	 SHORT $LN14@memcpy_s
$LN13@memcpy_s:
  000ad	83 65 f4 00	 and	 DWORD PTR tv79[ebp], 0
$LN14@memcpy_s:
  000b1	8b 45 f4	 mov	 eax, DWORD PTR tv79[ebp]
  000b4	89 45 e8	 mov	 DWORD PTR __Expr_val$1[ebp], eax
  000b7	83 7d e8 00	 cmp	 DWORD PTR __Expr_val$1[ebp], 0
  000bb	75 15		 jne	 SHORT $LN7@memcpy_s
  000bd	e8 00 00 00 00	 call	 __errno
  000c2	c7 00 22 00 00
	00		 mov	 DWORD PTR [eax], 34	; 00000022H
  000c8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo
  000cd	6a 22		 push	 34			; 00000022H
  000cf	58		 pop	 eax
  000d0	eb 18		 jmp	 SHORT $LN1@memcpy_s
$LN7@memcpy_s:

; 54   : 
; 55   :             // Unreachable, but required to suppress /analyze warnings:
; 56   :             return EINVAL;

  000d2	6a 16		 push	 22			; 00000016H
  000d4	58		 pop	 eax
  000d5	eb 13		 jmp	 SHORT $LN1@memcpy_s
$LN4@memcpy_s:

; 57   :         }
; 58   : #pragma warning(suppress:4996) // Deprecation
; 59   :         memcpy(_Destination, _Source, _SourceSize);

  000d7	ff 75 14	 push	 DWORD PTR __SourceSize$[ebp]
  000da	ff 75 10	 push	 DWORD PTR __Source$[ebp]
  000dd	ff 75 08	 push	 DWORD PTR __Destination$[ebp]
  000e0	e8 00 00 00 00	 call	 _memcpy
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 60   :         return 0;

  000e8	33 c0		 xor	 eax, eax
$LN1@memcpy_s:

; 61   :     }

  000ea	c9		 leave
  000eb	c3		 ret	 0
_memcpy_s ENDP
_TEXT	ENDS
END
