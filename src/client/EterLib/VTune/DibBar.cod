; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CDibBar@@QAE@XZ				; CDibBar::CDibBar
PUBLIC	??1CDibBar@@UAE@XZ				; CDibBar::~CDibBar
PUBLIC	?Create@CDibBar@@QAE_NPAUHDC__@@KK@Z		; CDibBar::Create
PUBLIC	?Invalidate@CDibBar@@QAEXXZ			; CDibBar::Invalidate
PUBLIC	?SetClipRect@CDibBar@@QAEXABUtagRECT@@@Z	; CDibBar::SetClipRect
PUBLIC	?ClearBar@CDibBar@@QAEXXZ			; CDibBar::ClearBar
PUBLIC	?Render@CDibBar@@QAEXHH@Z			; CDibBar::Render
PUBLIC	?__NearTextureSize@CDibBar@@IAEKK@Z		; CDibBar::__NearTextureSize
PUBLIC	?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z	; CDibBar::__DivideTextureSize
PUBLIC	?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ; CDibBar::__BuildTextureBlock
PUBLIC	?__BuildTextureBlockList@CDibBar@@IAEXKKK@Z	; CDibBar::__BuildTextureBlockList
PUBLIC	?OnCreate@CDibBar@@MAEXXZ			; CDibBar::OnCreate
PUBLIC	?deallocate@?$allocator@PAVCBlockTexture@@@std@@QAEXQAPAVCBlockTexture@@I@Z ; std::allocator<CBlockTexture *>::deallocate
PUBLIC	?_Destroy@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXPAPAVCBlockTexture@@0@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@ABEII@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXQAPAVCBlockTexture@@II@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Change_array
PUBLIC	?_Tidy@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXXZ ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Tidy
PUBLIC	?_Xlength@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@CAXXZ ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Xlength
PUBLIC	??_GCDibBar@@UAEPAXI@Z				; CDibBar::`scalar deleting destructor'
PUBLIC	??$emplace_back@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEXABQAVCBlockTexture@@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::emplace_back<CBlockTexture * const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXABQAVCBlockTexture@@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_back_with_unused_capacity<CBlockTexture * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_reallocate<CBlockTexture * const &>
PUBLIC	??$_Destroy_range@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAXPAPAVCBlockTexture@@QAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Destroy_range<std::allocator<CBlockTexture *> >
PUBLIC	??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Uninitialized_move<CBlockTexture * *,std::allocator<CBlockTexture *> >
PUBLIC	??$_Copy_memmove@PAPAVCBlockTexture@@PAPAV1@@std@@YAPAPAVCBlockTexture@@PAPAV1@00@Z ; std::_Copy_memmove<CBlockTexture * *,CBlockTexture * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CDibBar@@6B@				; CDibBar::`vftable'
PUBLIC	??_C@_0BL@HNPOIOOA@?5Failed?5to?5create?5CDibBar?6@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CDibBar@@6B@				; CDibBar::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDibBar@@@8				; CDibBar `RTTI Type Descriptor'
PUBLIC	??_R3CDibBar@@8					; CDibBar::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDibBar@@8					; CDibBar::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDibBar@@8			; CDibBar::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	??0CGraphicDib@@QAE@XZ:PROC			; CGraphicDib::CGraphicDib
EXTRN	??1CGraphicDib@@UAE@XZ:PROC			; CGraphicDib::~CGraphicDib
EXTRN	?Create@CGraphicDib@@QAE_NPAUHDC__@@HH@Z:PROC	; CGraphicDib::Create
EXTRN	?GetWidth@CGraphicDib@@QAEHXZ:PROC		; CGraphicDib::GetWidth
EXTRN	?GetHeight@CGraphicDib@@QAEHXZ:PROC		; CGraphicDib::GetHeight
EXTRN	?GetPointer@CGraphicDib@@QAEPAXXZ:PROC		; CGraphicDib::GetPointer
EXTRN	??_ECDibBar@@UAEPAXI@Z:PROC			; CDibBar::`vector deleting destructor'
EXTRN	??0CBlockTexture@@QAE@XZ:PROC			; CBlockTexture::CBlockTexture
EXTRN	?Create@CBlockTexture@@QAE_NPAVCGraphicDib@@ABUtagRECT@@KK@Z:PROC ; CBlockTexture::Create
EXTRN	?SetClipRect@CBlockTexture@@QAEXABUtagRECT@@@Z:PROC ; CBlockTexture::SetClipRect
EXTRN	?Render@CBlockTexture@@QAEXHH@Z:PROC		; CBlockTexture::Render
EXTRN	?InvalidateRect@CBlockTexture@@QAEXABUtagRECT@@@Z:PROC ; CBlockTexture::InvalidateRect
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ??_R1A@?0A@EA@CDibBar@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDibBar@@8 DD FLAT:??_R0?AVCDibBar@@@8	; CDibBar::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDibBar@@8
rdata$r	ENDS
;	COMDAT ??_R2CDibBar@@8
rdata$r	SEGMENT
??_R2CDibBar@@8 DD FLAT:??_R1A@?0A@EA@CDibBar@@8	; CDibBar::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CDibBar@@8
rdata$r	SEGMENT
??_R3CDibBar@@8 DD 00H					; CDibBar::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CDibBar@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDibBar@@@8
data$rs	SEGMENT
??_R0?AVCDibBar@@@8 DD FLAT:??_7type_info@@6B@		; CDibBar `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDibBar@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CDibBar@@6B@
rdata$r	SEGMENT
??_R4CDibBar@@6B@ DD 00H				; CDibBar::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDibBar@@@8
	DD	FLAT:??_R3CDibBar@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HNPOIOOA@?5Failed?5to?5create?5CDibBar?6@
CONST	SEGMENT
??_C@_0BL@HNPOIOOA@?5Failed?5to?5create?5CDibBar?6@ DB ' Failed to create'
	DB	' CDibBar', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CDibBar@@6B@
CONST	SEGMENT
??_7CDibBar@@6B@ DD FLAT:??_R4CDibBar@@6B@		; CDibBar::`vftable'
	DD	FLAT:??_ECDibBar@@UAEPAXI@Z
	DD	FLAT:?OnCreate@CDibBar@@MAEXXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z$32 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z$32
__ehfuncinfo$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z$0
__ehfuncinfo$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCBlockTexture@@PAPAV1@@std@@YAPAPAVCBlockTexture@@PAPAV1@00@Z
_TEXT	SEGMENT
__Last_ch$ = -16					; size = 4
__Count$ = -12						; size = 4
__Dest_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCBlockTexture@@PAPAV1@@std@@YAPAPAVCBlockTexture@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CBlockTexture * *,CBlockTexture * *>, COMDAT

; 4360 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 4361 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 4362 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 f0	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 4363 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f8	 mov	 DWORD PTR __Dest_ch$[ebp], eax

; 4364 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00018	8b 45 f0	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0001b	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0001e	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax

; 4365 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00021	ff 75 f4	 push	 DWORD PTR __Count$[ebp]
  00024	ff 75 fc	 push	 DWORD PTR __First_ch$[ebp]
  00027	ff 75 f8	 push	 DWORD PTR __Dest_ch$[ebp]
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4366 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00035	03 45 f4	 add	 eax, DWORD PTR __Count$[ebp]

; 4367 : }

  00038	c9		 leave
  00039	c3		 ret	 0
??$_Copy_memmove@PAPAVCBlockTexture@@PAPAV1@@std@@YAPAPAVCBlockTexture@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CBlockTexture * *,CBlockTexture * *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__UFirst$ = -8						; size = 4
__ULast$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z PROC ; std::_Uninitialized_move<CBlockTexture * *,std::allocator<CBlockTexture *> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR __ULast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00018	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  0001b	ff 75 fc	 push	 DWORD PTR __ULast$[ebp]
  0001e	ff 75 f8	 push	 DWORD PTR __UFirst$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCBlockTexture@@PAPAV1@@std@@YAPAPAVCBlockTexture@@PAPAV1@00@Z ; std::_Copy_memmove<CBlockTexture * *,CBlockTexture * *>
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1694 :         return _Dest + (_ULast - _UFirst);

  00029	8b 45 fc	 mov	 eax, DWORD PTR __ULast$[ebp]
  0002c	2b 45 f8	 sub	 eax, DWORD PTR __UFirst$[ebp]
  0002f	c1 f8 02	 sar	 eax, 2
  00032	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00035	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1699 :         }
; 1700 : 
; 1701 :         return _Backout._Release();
; 1702 :     }
; 1703 : }

  00038	c9		 leave
  00039	c3		 ret	 0
??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ENDP ; std::_Uninitialized_move<CBlockTexture * *,std::allocator<CBlockTexture *> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAXPAPAVCBlockTexture@@QAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAXPAPAVCBlockTexture@@QAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CBlockTexture *> >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAXPAPAVCBlockTexture@@QAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CBlockTexture *> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Max_possible$2 = -68					; size = 4
$T3 = -64						; size = 4
__Al$ = -60						; size = 4
__Last$ = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
__First$ = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T8 = -24						; size = 4
$T9 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T10 = 0						; size = 4
$T11 = 4						; size = 4
$T12 = 8						; size = 4
$T13 = 12						; size = 4
$T14 = 16						; size = 4
$T15 = 20						; size = 4
$T16 = 24						; size = 4
$T17 = 28						; size = 4
$T18 = 32						; size = 4
$T19 = 36						; size = 4
$T20 = 40						; size = 4
__Newsize$ = 44						; size = 4
__Constructed_last$ = 48				; size = 4
__Oldsize$ = 52						; size = 4
tv172 = 56						; size = 4
$T21 = 60						; size = 4
$T22 = 64						; size = 4
__My_data$ = 68						; size = 4
__Constructed_first$ = 72				; size = 4
___formal$ = 76						; size = 1
__Overflow_is_possible$23 = 83				; size = 1
__Newcapacity$ = 84					; size = 4
__Mylast$ = 88						; size = 4
__Myfirst$ = 92						; size = 4
__Whereoff$ = 96					; size = 4
$T24 = 103						; size = 1
_this$ = 104						; size = 4
__Newvec$ = 108						; size = 4
__Whereptr$ = 120					; size = 4
_<_Val_0>$ = 124					; size = 4
??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_reallocate<CBlockTexture * const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	83 ec 70	 sub	 esp, 112		; 00000070H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	83 ec 34	 sub	 esp, 52			; 00000034H
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d 68	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00037	89 45 28	 mov	 DWORD PTR $T20[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0003a	8b 45 28	 mov	 eax, DWORD PTR $T20[ebp]
  0003d	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;

  00040	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
  00043	89 45 44	 mov	 DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

  00046	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  00049	89 45 5c	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

  0004c	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004f	83 c0 04	 add	 eax, 4
  00052	89 45 58	 mov	 DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00055	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00058	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0005b	2b 08		 sub	 ecx, DWORD PTR [eax]
  0005d	c1 f9 02	 sar	 ecx, 2
  00060	89 4d 60	 mov	 DWORD PTR __Whereoff$[ebp], ecx

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00063	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00066	8b 4d 5c	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  00069	8b 00		 mov	 eax, DWORD PTR [eax]
  0006b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0006d	c1 f8 02	 sar	 eax, 2
  00070	89 45 34	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00073	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00076	89 45 24	 mov	 DWORD PTR $T19[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00079	8b 45 24	 mov	 eax, DWORD PTR $T19[ebp]
  0007c	89 45 c0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0007f	c7 45 40 ff ff
	ff 3f		 mov	 DWORD PTR $T22[ebp], 1073741823 ; 3fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00086	c7 45 20 ff ff
	ff 7f		 mov	 DWORD PTR $T18[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0008d	8b 45 20	 mov	 eax, DWORD PTR $T18[ebp]
  00090	89 45 3c	 mov	 DWORD PTR $T21[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00093	8b 45 40	 mov	 eax, DWORD PTR $T22[ebp]
  00096	3b 45 3c	 cmp	 eax, DWORD PTR $T21[ebp]
  00099	73 08		 jae	 SHORT $LN34@Emplace_re
  0009b	8d 45 40	 lea	 eax, DWORD PTR $T22[ebp]
  0009e	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
  000a1	eb 06		 jmp	 SHORT $LN35@Emplace_re
$LN34@Emplace_re:
  000a3	8d 45 3c	 lea	 eax, DWORD PTR $T21[ebp]
  000a6	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
$LN35@Emplace_re:
  000a9	8b 45 38	 mov	 eax, DWORD PTR tv172[ebp]
  000ac	89 45 1c	 mov	 DWORD PTR $T17[ebp], eax
  000af	8b 45 1c	 mov	 eax, DWORD PTR $T17[ebp]
  000b2	89 45 18	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  000b5	8b 45 18	 mov	 eax, DWORD PTR $T16[ebp]
  000b8	8b 00		 mov	 eax, DWORD PTR [eax]
  000ba	89 45 14	 mov	 DWORD PTR $T15[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  000bd	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000c0	3b 45 14	 cmp	 eax, DWORD PTR $T15[ebp]
  000c3	75 05		 jne	 SHORT $LN2@Emplace_re

; 738  :             _Xlength();

  000c5	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@CAXXZ ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  000ca	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000cd	40		 inc	 eax
  000ce	89 45 2c	 mov	 DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000d1	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  000d4	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  000d7	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@ABEII@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Calculate_growth
  000dc	89 45 54	 mov	 DWORD PTR __Newcapacity$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000df	c6 45 53 01	 mov	 BYTE PTR __Overflow_is_possible$23[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000e3	c7 45 bc ff ff
	ff 3f		 mov	 DWORD PTR __Max_possible$2[ebp], 1073741823 ; 3fffffffH

; 60   :         if (_Count > _Max_possible) {

  000ea	81 7d 54 ff ff
	ff 3f		 cmp	 DWORD PTR __Newcapacity$[ebp], 1073741823 ; 3fffffffH
  000f1	76 05		 jbe	 SHORT $LN67@Emplace_re

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000f3	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN67@Emplace_re:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000f8	8b 45 54	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  000fb	c1 e0 02	 shl	 eax, 2
  000fe	89 45 10	 mov	 DWORD PTR $T14[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00101	ff 75 10	 push	 DWORD PTR $T14[ebp]
  00104	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00109	59		 pop	 ecx
  0010a	89 45 6c	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  0010d	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  00110	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00113	8d 44 81 04	 lea	 eax, DWORD PTR [ecx+eax*4+4]
  00117	89 45 30	 mov	 DWORD PTR __Constructed_last$[ebp], eax

; 746  :         pointer _Constructed_first      = _Constructed_last;

  0011a	8b 45 30	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  0011d	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

  00120	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00124	8b 45 7c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00127	89 45 08	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0012a	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  0012d	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00130	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00133	89 45 0c	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00136	8b 45 0c	 mov	 eax, DWORD PTR $T13[ebp]
  00139	89 45 04	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0013c	8b 45 08	 mov	 eax, DWORD PTR $T12[ebp]
  0013f	89 45 00	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00142	8b 45 04	 mov	 eax, DWORD PTR $T11[ebp]
  00145	8b 4d 00	 mov	 ecx, DWORD PTR $T10[ebp]
  00148	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0014a	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 750  :         _Constructed_first = _Newvec + _Whereoff;

  0014c	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  0014f	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00152	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00155	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00158	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0015b	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0015e	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00160	75 3d		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00162	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00165	8b 00		 mov	 eax, DWORD PTR [eax]
  00167	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  0016a	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0016d	8b 00		 mov	 eax, DWORD PTR [eax]
  0016f	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00172	33 c0		 xor	 eax, eax
  00174	88 45 67	 mov	 BYTE PTR $T24[ebp], al
  00177	8a 45 67	 mov	 al, BYTE PTR $T24[ebp]
  0017a	88 45 4c	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  0017d	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00180	89 45 ec	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00183	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp]
  00186	89 45 e8	 mov	 DWORD PTR $T8[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00189	ff 75 e8	 push	 DWORD PTR $T8[ebp]
  0018c	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  0018f	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  00192	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  00195	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Uninitialized_move<CBlockTexture * *,std::allocator<CBlockTexture *> >
  0019a	83 c4 10	 add	 esp, 16			; 00000010H

; 754  :         } else { // provide basic guarantee

  0019d	eb 5e		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  0019f	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  001a2	8b 00		 mov	 eax, DWORD PTR [eax]
  001a4	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001a7	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001aa	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001ad	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  001b0	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001b3	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  001b6	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  001b9	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001bc	ff 75 d4	 push	 DWORD PTR __First$[ebp]
  001bf	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Uninitialized_move<CBlockTexture * *,std::allocator<CBlockTexture *> >
  001c4	83 c4 10	 add	 esp, 16			; 00000010H

; 756  :             _Constructed_first = _Newvec;

  001c7	8b 45 6c	 mov	 eax, DWORD PTR __Newvec$[ebp]
  001ca	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001cd	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  001d0	8b 00		 mov	 eax, DWORD PTR [eax]
  001d2	89 45 c8	 mov	 DWORD PTR __Last$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001d5	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001d8	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001db	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  001de	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001e1	ff 75 cc	 push	 DWORD PTR $T4[ebp]

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001e4	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  001e7	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001ea	8d 44 81 04	 lea	 eax, DWORD PTR [ecx+eax*4+4]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001ee	50		 push	 eax
  001ef	ff 75 c8	 push	 DWORD PTR __Last$[ebp]
  001f2	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001f5	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAPAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAPAPAVCBlockTexture@@QAPAV1@0PAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Uninitialized_move<CBlockTexture * *,std::allocator<CBlockTexture *> >
  001fa	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Emplace_re:

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001fd	eb 2b		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  001ff	ff 75 30	 push	 DWORD PTR __Constructed_last$[ebp]
  00202	ff 75 48	 push	 DWORD PTR __Constructed_first$[ebp]
  00205	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  00208	e8 00 00 00 00	 call	 ?_Destroy@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXPAPAVCBlockTexture@@0@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  0020d	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  00210	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00213	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00216	e8 00 00 00 00	 call	 ?deallocate@?$allocator@PAVCBlockTexture@@@std@@QAEXQAPAVCBlockTexture@@I@Z ; std::allocator<CBlockTexture *>::deallocate

; 762  :         _RERAISE;

  0021b	6a 00		 push	 0
  0021d	6a 00		 push	 0
  0021f	e8 00 00 00 00	 call	 __CxxThrowException@8

; 763  :         _CATCH_END

  00224	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  00229	c3		 ret	 0
$LN7@Emplace_re:
  0022a	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  0022e	eb 04		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z$1
$LN10@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  00230	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00234	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  00237	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  0023a	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  0023d	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  00240	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXQAPAVCBlockTexture@@II@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  00245	8b 45 60	 mov	 eax, DWORD PTR __Whereoff$[ebp]
  00248	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0024b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
$LN70@Emplace_re:

; 767  :     }

  0024e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00251	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00258	59		 pop	 ecx
  00259	5f		 pop	 edi
  0025a	5e		 pop	 esi
  0025b	5b		 pop	 ebx
  0025c	83 c5 70	 add	 ebp, 112		; 00000070H
  0025f	c9		 leave
  00260	c2 08 00	 ret	 8
  00263	cc		 int	 3
  00264	cc		 int	 3
  00265	cc		 int	 3
  00266	cc		 int	 3
  00267	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_reallocate<CBlockTexture * const &>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXABQAVCBlockTexture@@@Z
_TEXT	SEGMENT
__Result$ = -44						; size = 4
$T1 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
__Ptr$ = -16						; size = 4
__My_data$ = -12					; size = 4
_this$ = -8						; size = 4
__Mylast$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXABQAVCBlockTexture@@@Z PROC ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_back_with_unused_capacity<CBlockTexture * const &>, COMDAT
; _this$ = ecx

; 682  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 683  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 684  :         auto& _My_data   = _Mypair._Myval2;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR __My_data$[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

  0000f	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	83 c0 04	 add	 eax, 4
  00015	89 45 fc	 mov	 DWORD PTR __Mylast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00018	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0001b	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	89 45 f0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00026	8b 45 f0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00029	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0002f	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00032	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp]
  00035	89 45 d8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00038	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0003b	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003e	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  00041	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00044	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  00047	8b 4d dc	 mov	 ecx, DWORD PTR $T2[ebp]
  0004a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004c	89 08		 mov	 DWORD PTR [eax], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 689  :         _Ty& _Result = *_Mylast;

  0004e	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00051	8b 00		 mov	 eax, DWORD PTR [eax]
  00053	89 45 d4	 mov	 DWORD PTR __Result$[ebp], eax

; 690  :         ++_Mylast;

  00056	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00059	8b 00		 mov	 eax, DWORD PTR [eax]
  0005b	83 c0 04	 add	 eax, 4
  0005e	8b 4d fc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00061	89 01		 mov	 DWORD PTR [ecx], eax

; 691  : #if _HAS_CXX17
; 692  :         return _Result;
; 693  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 694  :         (void) _Result;
; 695  : #endif // _HAS_CXX17
; 696  :     }

  00063	c9		 leave
  00064	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXABQAVCBlockTexture@@@Z ENDP ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_back_with_unused_capacity<CBlockTexture * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$emplace_back@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEXABQAVCBlockTexture@@@Z
_TEXT	SEGMENT
__Result$ = -24						; size = 4
$T1 = -20						; size = 4
$T2 = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEXABQAVCBlockTexture@@@Z PROC ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::emplace_back<CBlockTexture * const &>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	83 c0 04	 add	 eax, 4
  00015	89 45 f4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

  00018	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00023	74 13		 je	 SHORT $LN2@emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00025	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00028	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0002b	ff 75 f0	 push	 DWORD PTR $T2[ebp]
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXABQAVCBlockTexture@@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_back_with_unused_capacity<CBlockTexture * const &>
  00036	eb 19		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00038	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0003b	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0003e	ff 75 ec	 push	 DWORD PTR $T1[ebp]
  00041	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00044	ff 30		 push	 DWORD PTR [eax]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEPAPAVCBlockTexture@@QAPAV2@ABQAV2@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Emplace_reallocate<CBlockTexture * const &>
  0004e	89 45 e8	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  00051	c9		 leave
  00052	c2 04 00	 ret	 4
??$emplace_back@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEXABQAVCBlockTexture@@@Z ENDP ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::emplace_back<CBlockTexture * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GCDibBar@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDibBar@@UAEPAXI@Z PROC				; CDibBar::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CDibBar@@UAE@XZ	; CDibBar::~CDibBar
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 5c		 push	 92			; 0000005cH
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GCDibBar@@UAEPAXI@Z ENDP				; CDibBar::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@CAXXZ PROC ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 :         _Xlength_error("vector too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@CAXXZ ENDP ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
?_Tidy@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXXZ PROC ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1687 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();
; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 74		 je	 SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAXPAPAVCBlockTexture@@QAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Destroy_range<std::allocator<CBlockTexture *> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	c1 f8 02	 sar	 eax, 2
  00075	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00078	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00080	8b 45 d4	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	c1 e0 02	 shl	 eax, 2
  00086	50		 push	 eax
  00087	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008f	59		 pop	 ecx
  00090	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00091	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00094	83 20 00	 and	 DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

  00097	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0009a	83 20 00	 and	 DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

  0009d	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a0	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

  000a3	c9		 leave
  000a4	c3		 ret	 0
?_Tidy@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXXZ ENDP ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXQAPAVCBlockTexture@@II@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXQAPAVCBlockTexture@@II@Z PROC ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();
; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 62		 je	 SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAXPAPAVCBlockTexture@@QAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Destroy_range<std::allocator<CBlockTexture *> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	c1 f8 02	 sar	 eax, 2
  00075	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00078	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007b	8b 00		 mov	 eax, DWORD PTR [eax]
  0007d	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00080	8b 45 d4	 mov	 eax, DWORD PTR __Count$[ebp]
  00083	c1 e0 02	 shl	 eax, 2
  00086	50		 push	 eax
  00087	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0008f	59		 pop	 ecx
  00090	59		 pop	 ecx
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  00091	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00094	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00097	89 08		 mov	 DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  00099	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0009f	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000a2	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000a5	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000a7	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  000aa	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  000ad	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000b0	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b3	89 01		 mov	 DWORD PTR [ecx], eax

; 1684 :     }

  000b5	c9		 leave
  000b6	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXQAPAVCBlockTexture@@II@Z ENDP ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Geometric$ = -32					; size = 4
__Max$ = -28						; size = 4
tv82 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$8 = -8					; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@ABEII@Z PROC ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$8[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	c1 f8 02	 sar	 eax, 2
  0001d	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00020	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00023	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00026	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  00029	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0002c	c7 45 f0 ff ff
	ff 3f		 mov	 DWORD PTR $T7[ebp], 1073741823 ; 3fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00033	c7 45 d8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0003a	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  0003d	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00040	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00043	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  00046	73 08		 jae	 SHORT $LN25@Calculate_
  00048	8d 45 f0	 lea	 eax, DWORD PTR $T7[ebp]
  0004b	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
  0004e	eb 06		 jmp	 SHORT $LN26@Calculate_
$LN25@Calculate_:
  00050	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00053	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
$LN26@Calculate_:
  00056	8b 45 e8	 mov	 eax, DWORD PTR tv82[ebp]
  00059	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  0005c	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  0005f	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00062	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00065	8b 00		 mov	 eax, DWORD PTR [eax]
  00067	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 :         const auto _Max              = max_size();
; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006a	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  0006d	d1 e8		 shr	 eax, 1
  0006f	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  00072	2b c8		 sub	 ecx, eax
  00074	39 4d fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], ecx
  00077	76 05		 jbe	 SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

  00079	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  0007c	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0007e	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00081	d1 e8		 shr	 eax, 1
  00083	03 45 fc	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00086	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  00089	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0008c	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  0008f	73 05		 jae	 SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

  00091	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00094	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

  00096	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

  00099	c9		 leave
  0009a	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@ABEII@Z ENDP ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXPAPAVCBlockTexture@@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXPAPAVCBlockTexture@@0@Z PROC ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00015	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00018	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@PAVCBlockTexture@@@std@@@std@@YAXPAPAVCBlockTexture@@QAPAV1@AAV?$allocator@PAVCBlockTexture@@@0@@Z ; std::_Destroy_range<std::allocator<CBlockTexture *> >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00026	c9		 leave
  00027	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXPAPAVCBlockTexture@@0@Z ENDP ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@PAVCBlockTexture@@@std@@QAEXQAPAVCBlockTexture@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVCBlockTexture@@@std@@QAEXQAPAVCBlockTexture@@I@Z PROC ; std::allocator<CBlockTexture *>::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  0000a	c1 e0 02	 shl	 eax, 2
  0000d	50		 push	 eax
  0000e	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00011	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00016	59		 pop	 ecx
  00017	59		 pop	 ecx

; 811  :     }

  00018	c9		 leave
  00019	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCBlockTexture@@@std@@QAEXQAPAVCBlockTexture@@I@Z ENDP ; std::allocator<CBlockTexture *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.h
;	COMDAT ?OnCreate@CDibBar@@MAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnCreate@CDibBar@@MAEXXZ PROC				; CDibBar::OnCreate, COMDAT
; _this$ = ecx

; 25   : 		virtual void OnCreate(){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
?OnCreate@CDibBar@@MAEXXZ ENDP				; CDibBar::OnCreate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
;	COMDAT ?__BuildTextureBlockList@CDibBar@@IAEXKKK@Z
_TEXT	SEGMENT
_pTexture$1 = -64					; size = 4
_dwxTexRest$ = -60					; size = 4
_dwyTexRest$ = -56					; size = 4
_pTexture$2 = -52					; size = 4
_pTexture$3 = -48					; size = 4
_pTexture$4 = -44					; size = 4
_dwyCount$ = -40					; size = 4
_dwxCount$ = -36					; size = 4
_dwxRest$ = -32						; size = 4
_dwyRest$ = -28						; size = 4
_x$5 = -24						; size = 4
_x$6 = -20						; size = 4
_y$7 = -16						; size = 4
_dwxStep$ = -12						; size = 4
_dwyStep$ = -8						; size = 4
_this$ = -4						; size = 4
_dwWidth$ = 8						; size = 4
_dwHeight$ = 12						; size = 4
_dwMax$ = 16						; size = 4
?__BuildTextureBlockList@CDibBar@@IAEXKKK@Z PROC	; CDibBar::__BuildTextureBlockList, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   : 	DWORD dwxStep, dwyStep;
; 96   : 	DWORD dwxCount, dwyCount;
; 97   : 	DWORD dwxRest, dwyRest;
; 98   : 	__DivideTextureSize(dwWidth, dwMax, &dwxStep, &dwxCount, &dwxRest);

  00009	8d 45 e0	 lea	 eax, DWORD PTR _dwxRest$[ebp]
  0000c	50		 push	 eax
  0000d	8d 45 dc	 lea	 eax, DWORD PTR _dwxCount$[ebp]
  00010	50		 push	 eax
  00011	8d 45 f4	 lea	 eax, DWORD PTR _dwxStep$[ebp]
  00014	50		 push	 eax
  00015	ff 75 10	 push	 DWORD PTR _dwMax$[ebp]
  00018	ff 75 08	 push	 DWORD PTR _dwWidth$[ebp]
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z ; CDibBar::__DivideTextureSize

; 99   : 	__DivideTextureSize(dwHeight, dwMax, &dwyStep, &dwyCount, &dwyRest);

  00023	8d 45 e4	 lea	 eax, DWORD PTR _dwyRest$[ebp]
  00026	50		 push	 eax
  00027	8d 45 d8	 lea	 eax, DWORD PTR _dwyCount$[ebp]
  0002a	50		 push	 eax
  0002b	8d 45 f8	 lea	 eax, DWORD PTR _dwyStep$[ebp]
  0002e	50		 push	 eax
  0002f	ff 75 10	 push	 DWORD PTR _dwMax$[ebp]
  00032	ff 75 0c	 push	 DWORD PTR _dwHeight$[ebp]
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	e8 00 00 00 00	 call	 ?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z ; CDibBar::__DivideTextureSize

; 100  : 	DWORD dwxTexRest = __NearTextureSize(dwxRest);

  0003d	ff 75 e0	 push	 DWORD PTR _dwxRest$[ebp]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?__NearTextureSize@CDibBar@@IAEKK@Z ; CDibBar::__NearTextureSize
  00048	89 45 c4	 mov	 DWORD PTR _dwxTexRest$[ebp], eax

; 101  : 	DWORD dwyTexRest = __NearTextureSize(dwyRest);

  0004b	ff 75 e4	 push	 DWORD PTR _dwyRest$[ebp]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?__NearTextureSize@CDibBar@@IAEKK@Z ; CDibBar::__NearTextureSize
  00056	89 45 c8	 mov	 DWORD PTR _dwyTexRest$[ebp], eax

; 102  : 
; 103  : 	for (DWORD y = 0; y < dwyCount; ++y)

  00059	83 65 f0 00	 and	 DWORD PTR _y$7[ebp], 0
  0005d	eb 07		 jmp	 SHORT $LN4@BuildTextu
$LN2@BuildTextu:
  0005f	8b 45 f0	 mov	 eax, DWORD PTR _y$7[ebp]
  00062	40		 inc	 eax
  00063	89 45 f0	 mov	 DWORD PTR _y$7[ebp], eax
$LN4@BuildTextu:
  00066	8b 45 f0	 mov	 eax, DWORD PTR _y$7[ebp]
  00069	3b 45 d8	 cmp	 eax, DWORD PTR _dwyCount$[ebp]
  0006c	0f 83 94 00 00
	00		 jae	 $LN3@BuildTextu

; 104  : 	{
; 105  : 		for (DWORD x = 0; x < dwxCount; ++x)

  00072	83 65 ec 00	 and	 DWORD PTR _x$6[ebp], 0
  00076	eb 07		 jmp	 SHORT $LN7@BuildTextu
$LN5@BuildTextu:
  00078	8b 45 ec	 mov	 eax, DWORD PTR _x$6[ebp]
  0007b	40		 inc	 eax
  0007c	89 45 ec	 mov	 DWORD PTR _x$6[ebp], eax
$LN7@BuildTextu:
  0007f	8b 45 ec	 mov	 eax, DWORD PTR _x$6[ebp]
  00082	3b 45 dc	 cmp	 eax, DWORD PTR _dwxCount$[ebp]
  00085	73 3e		 jae	 SHORT $LN6@BuildTextu

; 106  : 		{
; 107  : 			CBlockTexture * pTexture = __BuildTextureBlock(x*dwxStep, y*dwyStep,

  00087	ff 75 10	 push	 DWORD PTR _dwMax$[ebp]
  0008a	ff 75 10	 push	 DWORD PTR _dwMax$[ebp]
  0008d	ff 75 f8	 push	 DWORD PTR _dwyStep$[ebp]
  00090	ff 75 f4	 push	 DWORD PTR _dwxStep$[ebp]
  00093	8b 45 f0	 mov	 eax, DWORD PTR _y$7[ebp]
  00096	0f af 45 f8	 imul	 eax, DWORD PTR _dwyStep$[ebp]
  0009a	50		 push	 eax
  0009b	8b 45 ec	 mov	 eax, DWORD PTR _x$6[ebp]
  0009e	0f af 45 f4	 imul	 eax, DWORD PTR _dwxStep$[ebp]
  000a2	50		 push	 eax
  000a3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a6	e8 00 00 00 00	 call	 ?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ; CDibBar::__BuildTextureBlock
  000ab	89 45 d4	 mov	 DWORD PTR _pTexture$4[ebp], eax

; 108  : 														   dwxStep, dwyStep,
; 109  : 														   dwMax, dwMax);
; 110  : 			if (pTexture)

  000ae	83 7d d4 00	 cmp	 DWORD PTR _pTexture$4[ebp], 0
  000b2	74 0f		 je	 SHORT $LN11@BuildTextu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  000b4	8d 45 d4	 lea	 eax, DWORD PTR _pTexture$4[ebp]
  000b7	50		 push	 eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 111  : 				m_kVec_pkBlockTexture.push_back(pTexture);

  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	83 c1 48	 add	 ecx, 72			; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  000be	e8 00 00 00 00	 call	 ??$emplace_back@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEXABQAVCBlockTexture@@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::emplace_back<CBlockTexture * const &>
$LN11@BuildTextu:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 112  : 		}

  000c3	eb b3		 jmp	 SHORT $LN5@BuildTextu
$LN6@BuildTextu:

; 113  : 		
; 114  : 		CBlockTexture * pTexture = __BuildTextureBlock(dwxCount*dwxStep, y*dwyStep,

  000c5	ff 75 10	 push	 DWORD PTR _dwMax$[ebp]
  000c8	ff 75 c4	 push	 DWORD PTR _dwxTexRest$[ebp]
  000cb	ff 75 f8	 push	 DWORD PTR _dwyStep$[ebp]
  000ce	ff 75 e0	 push	 DWORD PTR _dwxRest$[ebp]
  000d1	8b 45 f0	 mov	 eax, DWORD PTR _y$7[ebp]
  000d4	0f af 45 f8	 imul	 eax, DWORD PTR _dwyStep$[ebp]
  000d8	50		 push	 eax
  000d9	8b 45 dc	 mov	 eax, DWORD PTR _dwxCount$[ebp]
  000dc	0f af 45 f4	 imul	 eax, DWORD PTR _dwxStep$[ebp]
  000e0	50		 push	 eax
  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e4	e8 00 00 00 00	 call	 ?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ; CDibBar::__BuildTextureBlock
  000e9	89 45 d0	 mov	 DWORD PTR _pTexture$3[ebp], eax

; 115  : 													   dwxRest, dwyStep,
; 116  : 													   dwxTexRest, dwMax);
; 117  : 
; 118  : 		if (pTexture)

  000ec	83 7d d0 00	 cmp	 DWORD PTR _pTexture$3[ebp], 0
  000f0	74 0f		 je	 SHORT $LN12@BuildTextu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  000f2	8d 45 d0	 lea	 eax, DWORD PTR _pTexture$3[ebp]
  000f5	50		 push	 eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 119  : 			m_kVec_pkBlockTexture.push_back(pTexture);

  000f6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f9	83 c1 48	 add	 ecx, 72			; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  000fc	e8 00 00 00 00	 call	 ??$emplace_back@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEXABQAVCBlockTexture@@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::emplace_back<CBlockTexture * const &>
$LN12@BuildTextu:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 120  : 	}

  00101	e9 59 ff ff ff	 jmp	 $LN2@BuildTextu
$LN3@BuildTextu:

; 121  : 
; 122  : 	for (DWORD x = 0; x < dwxCount; ++x)

  00106	83 65 e8 00	 and	 DWORD PTR _x$5[ebp], 0
  0010a	eb 07		 jmp	 SHORT $LN10@BuildTextu
$LN8@BuildTextu:
  0010c	8b 45 e8	 mov	 eax, DWORD PTR _x$5[ebp]
  0010f	40		 inc	 eax
  00110	89 45 e8	 mov	 DWORD PTR _x$5[ebp], eax
$LN10@BuildTextu:
  00113	8b 45 e8	 mov	 eax, DWORD PTR _x$5[ebp]
  00116	3b 45 dc	 cmp	 eax, DWORD PTR _dwxCount$[ebp]
  00119	73 3e		 jae	 SHORT $LN9@BuildTextu

; 123  : 	{
; 124  : 		CBlockTexture * pTexture = __BuildTextureBlock(x*dwxStep, dwyCount*dwyStep,

  0011b	ff 75 c8	 push	 DWORD PTR _dwyTexRest$[ebp]
  0011e	ff 75 10	 push	 DWORD PTR _dwMax$[ebp]
  00121	ff 75 e4	 push	 DWORD PTR _dwyRest$[ebp]
  00124	ff 75 f4	 push	 DWORD PTR _dwxStep$[ebp]
  00127	8b 45 d8	 mov	 eax, DWORD PTR _dwyCount$[ebp]
  0012a	0f af 45 f8	 imul	 eax, DWORD PTR _dwyStep$[ebp]
  0012e	50		 push	 eax
  0012f	8b 45 e8	 mov	 eax, DWORD PTR _x$5[ebp]
  00132	0f af 45 f4	 imul	 eax, DWORD PTR _dwxStep$[ebp]
  00136	50		 push	 eax
  00137	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0013a	e8 00 00 00 00	 call	 ?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ; CDibBar::__BuildTextureBlock
  0013f	89 45 cc	 mov	 DWORD PTR _pTexture$2[ebp], eax

; 125  : 													   dwxStep, dwyRest,
; 126  : 													   dwMax, dwyTexRest);
; 127  : 		if (pTexture)

  00142	83 7d cc 00	 cmp	 DWORD PTR _pTexture$2[ebp], 0
  00146	74 0f		 je	 SHORT $LN13@BuildTextu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  00148	8d 45 cc	 lea	 eax, DWORD PTR _pTexture$2[ebp]
  0014b	50		 push	 eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 128  : 			m_kVec_pkBlockTexture.push_back(pTexture);

  0014c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0014f	83 c1 48	 add	 ecx, 72			; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  00152	e8 00 00 00 00	 call	 ??$emplace_back@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEXABQAVCBlockTexture@@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::emplace_back<CBlockTexture * const &>
$LN13@BuildTextu:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 129  : 	}

  00157	eb b3		 jmp	 SHORT $LN8@BuildTextu
$LN9@BuildTextu:

; 130  : 
; 131  : 	if (dwxRest > 0 && dwyRest > 0)

  00159	83 7d e0 00	 cmp	 DWORD PTR _dwxRest$[ebp], 0
  0015d	76 42		 jbe	 SHORT $LN1@BuildTextu
  0015f	83 7d e4 00	 cmp	 DWORD PTR _dwyRest$[ebp], 0
  00163	76 3c		 jbe	 SHORT $LN1@BuildTextu

; 132  : 	{
; 133  : 		CBlockTexture * pTexture = __BuildTextureBlock(dwxCount*dwxStep, dwyCount*dwyStep,

  00165	ff 75 c8	 push	 DWORD PTR _dwyTexRest$[ebp]
  00168	ff 75 c4	 push	 DWORD PTR _dwxTexRest$[ebp]
  0016b	ff 75 e4	 push	 DWORD PTR _dwyRest$[ebp]
  0016e	ff 75 e0	 push	 DWORD PTR _dwxRest$[ebp]
  00171	8b 45 d8	 mov	 eax, DWORD PTR _dwyCount$[ebp]
  00174	0f af 45 f8	 imul	 eax, DWORD PTR _dwyStep$[ebp]
  00178	50		 push	 eax
  00179	8b 45 dc	 mov	 eax, DWORD PTR _dwxCount$[ebp]
  0017c	0f af 45 f4	 imul	 eax, DWORD PTR _dwxStep$[ebp]
  00180	50		 push	 eax
  00181	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00184	e8 00 00 00 00	 call	 ?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ; CDibBar::__BuildTextureBlock
  00189	89 45 c0	 mov	 DWORD PTR _pTexture$1[ebp], eax

; 134  : 													   dwxRest, dwyRest,
; 135  : 													   dwxTexRest, dwyTexRest);
; 136  : 		if (pTexture)

  0018c	83 7d c0 00	 cmp	 DWORD PTR _pTexture$1[ebp], 0
  00190	74 0f		 je	 SHORT $LN1@BuildTextu
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  00192	8d 45 c0	 lea	 eax, DWORD PTR _pTexture$1[ebp]
  00195	50		 push	 eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 137  : 			m_kVec_pkBlockTexture.push_back(pTexture);

  00196	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00199	83 c1 48	 add	 ecx, 72			; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  0019c	e8 00 00 00 00	 call	 ??$emplace_back@ABQAVCBlockTexture@@@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@QAEXABQAVCBlockTexture@@@Z ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::emplace_back<CBlockTexture * const &>
$LN1@BuildTextu:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 139  : }

  001a1	c9		 leave
  001a2	c2 0c 00	 ret	 12			; 0000000cH
?__BuildTextureBlockList@CDibBar@@IAEXKKK@Z ENDP	; CDibBar::__BuildTextureBlockList
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
;	COMDAT ?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z
_TEXT	SEGMENT
tv130 = -60						; size = 4
_this$ = -56						; size = 4
$T2 = -52						; size = 4
tv79 = -48						; size = 4
$T3 = -44						; size = 4
_pBlockTexture$ = -40					; size = 4
$T4 = -36						; size = 4
_posRect$ = -32						; size = 16
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwxPos$ = 8						; size = 4
_dwyPos$ = 12						; size = 4
_dwImageWidth$ = 16					; size = 4
_dwImageHeight$ = 20					; size = 4
_dwTextureWidth$ = 24					; size = 4
_dwTextureHeight$ = 28					; size = 4
?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z PROC ; CDibBar::__BuildTextureBlock, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d c8	 mov	 DWORD PTR _this$[ebp], ecx

; 78   : 	if (dwTextureWidth == 0 || dwTextureHeight == 0)

  0002b	83 7d 18 00	 cmp	 DWORD PTR _dwTextureWidth$[ebp], 0
  0002f	74 06		 je	 SHORT $LN3@BuildTextu
  00031	83 7d 1c 00	 cmp	 DWORD PTR _dwTextureHeight$[ebp], 0
  00035	75 07		 jne	 SHORT $LN2@BuildTextu
$LN3@BuildTextu:

; 79   : 		return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	e9 9c 00 00 00	 jmp	 $LN1@BuildTextu
$LN2@BuildTextu:

; 80   : 
; 81   : 	RECT posRect = {dwxPos, dwyPos, dwxPos+dwImageWidth, dwyPos+dwImageHeight};

  0003e	8b 45 08	 mov	 eax, DWORD PTR _dwxPos$[ebp]
  00041	89 45 e0	 mov	 DWORD PTR _posRect$[ebp], eax
  00044	8b 45 0c	 mov	 eax, DWORD PTR _dwyPos$[ebp]
  00047	89 45 e4	 mov	 DWORD PTR _posRect$[ebp+4], eax
  0004a	8b 45 08	 mov	 eax, DWORD PTR _dwxPos$[ebp]
  0004d	03 45 10	 add	 eax, DWORD PTR _dwImageWidth$[ebp]
  00050	89 45 e8	 mov	 DWORD PTR _posRect$[ebp+8], eax
  00053	8b 45 0c	 mov	 eax, DWORD PTR _dwyPos$[ebp]
  00056	03 45 14	 add	 eax, DWORD PTR _dwImageHeight$[ebp]
  00059	89 45 ec	 mov	 DWORD PTR _posRect$[ebp+12], eax

; 82   : 
; 83   : 	CBlockTexture * pBlockTexture = new CBlockTexture;

  0005c	6a 38		 push	 56			; 00000038H
  0005e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00063	59		 pop	 ecx
  00064	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  00067	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  0006b	83 7d d4 00	 cmp	 DWORD PTR $T3[ebp], 0
  0006f	74 0d		 je	 SHORT $LN6@BuildTextu
  00071	8b 4d d4	 mov	 ecx, DWORD PTR $T3[ebp]
  00074	e8 00 00 00 00	 call	 ??0CBlockTexture@@QAE@XZ ; CBlockTexture::CBlockTexture
  00079	89 45 d0	 mov	 DWORD PTR tv79[ebp], eax
  0007c	eb 04		 jmp	 SHORT $LN7@BuildTextu
$LN6@BuildTextu:
  0007e	83 65 d0 00	 and	 DWORD PTR tv79[ebp], 0
$LN7@BuildTextu:
  00082	8b 45 d0	 mov	 eax, DWORD PTR tv79[ebp]
  00085	89 45 cc	 mov	 DWORD PTR $T2[ebp], eax
  00088	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  0008c	8b 45 cc	 mov	 eax, DWORD PTR $T2[ebp]
  0008f	89 45 d8	 mov	 DWORD PTR _pBlockTexture$[ebp], eax

; 84   : 	if (!pBlockTexture->Create(&m_dib, posRect, dwTextureWidth, dwTextureHeight))

  00092	ff 75 1c	 push	 DWORD PTR _dwTextureHeight$[ebp]
  00095	ff 75 18	 push	 DWORD PTR _dwTextureWidth$[ebp]
  00098	8d 45 e0	 lea	 eax, DWORD PTR _posRect$[ebp]
  0009b	50		 push	 eax
  0009c	8b 45 c8	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	83 c0 04	 add	 eax, 4
  000a2	50		 push	 eax
  000a3	8b 4d d8	 mov	 ecx, DWORD PTR _pBlockTexture$[ebp]
  000a6	e8 00 00 00 00	 call	 ?Create@CBlockTexture@@QAE_NPAVCGraphicDib@@ABUtagRECT@@KK@Z ; CBlockTexture::Create
  000ab	0f b6 c0	 movzx	 eax, al
  000ae	85 c0		 test	 eax, eax
  000b0	75 25		 jne	 SHORT $LN4@BuildTextu

; 85   : 	{
; 86   : 		delete pBlockTexture;

  000b2	8b 45 d8	 mov	 eax, DWORD PTR _pBlockTexture$[ebp]
  000b5	89 45 dc	 mov	 DWORD PTR $T4[ebp], eax
  000b8	83 7d dc 00	 cmp	 DWORD PTR $T4[ebp], 0
  000bc	74 11		 je	 SHORT $LN8@BuildTextu
  000be	6a 01		 push	 1
  000c0	8b 45 dc	 mov	 eax, DWORD PTR $T4[ebp]
  000c3	8b 00		 mov	 eax, DWORD PTR [eax]
  000c5	8b 4d dc	 mov	 ecx, DWORD PTR $T4[ebp]
  000c8	ff 10		 call	 DWORD PTR [eax]
  000ca	89 45 c4	 mov	 DWORD PTR tv130[ebp], eax
  000cd	eb 04		 jmp	 SHORT $LN9@BuildTextu
$LN8@BuildTextu:
  000cf	83 65 c4 00	 and	 DWORD PTR tv130[ebp], 0
$LN9@BuildTextu:

; 87   : 		return NULL;

  000d3	33 c0		 xor	 eax, eax
  000d5	eb 03		 jmp	 SHORT $LN1@BuildTextu
$LN4@BuildTextu:

; 88   : 	}
; 89   : 
; 90   : 	return pBlockTexture;

  000d7	8b 45 d8	 mov	 eax, DWORD PTR _pBlockTexture$[ebp]
$LN1@BuildTextu:

; 91   : }

  000da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e4	59		 pop	 ecx
  000e5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e8	33 cd		 xor	 ecx, ebp
  000ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ef	c9		 leave
  000f0	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z$0:
  00000	6a 38		 push	 56			; 00000038H
  00002	ff 75 d4	 push	 DWORD PTR $T3[ebp]
  00005	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000a	59		 pop	 ecx
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
__ehhandler$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z:
  00012	90		 npad	 1
  00013	90		 npad	 1
  00014	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00018	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001b	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001e	33 c8		 xor	 ecx, eax
  00020	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00025	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__BuildTextureBlock@CDibBar@@IAEPAVCBlockTexture@@KKKKKK@Z ENDP ; CDibBar::__BuildTextureBlock
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
;	COMDAT ?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dwSize$ = 8						; size = 4
_dwMax$ = 12						; size = 4
_pdwxStep$ = 16						; size = 4
_pdwxCount$ = 20					; size = 4
_pdwxRest$ = 24						; size = 4
?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z PROC	; CDibBar::__DivideTextureSize, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 63   : 	if (dwSize<dwMax)

  00007	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0000a	3b 45 0c	 cmp	 eax, DWORD PTR _dwMax$[ebp]
  0000d	73 1d		 jae	 SHORT $LN2@DivideText

; 64   : 	{
; 65   : 		*pdwxStep = dwMax;

  0000f	8b 45 10	 mov	 eax, DWORD PTR _pdwxStep$[ebp]
  00012	8b 4d 0c	 mov	 ecx, DWORD PTR _dwMax$[ebp]
  00015	89 08		 mov	 DWORD PTR [eax], ecx

; 66   : 		*pdwxCount = 0;

  00017	8b 45 14	 mov	 eax, DWORD PTR _pdwxCount$[ebp]
  0001a	83 20 00	 and	 DWORD PTR [eax], 0

; 67   : 		*pdwxRest = dwSize%dwMax;

  0001d	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00020	33 d2		 xor	 edx, edx
  00022	f7 75 0c	 div	 DWORD PTR _dwMax$[ebp]
  00025	8b 45 18	 mov	 eax, DWORD PTR _pdwxRest$[ebp]
  00028	89 10		 mov	 DWORD PTR [eax], edx

; 68   : 		return;

  0002a	eb 22		 jmp	 SHORT $LN1@DivideText
$LN2@DivideText:

; 69   : 	}
; 70   : 
; 71   : 	*pdwxStep = dwMax;

  0002c	8b 45 10	 mov	 eax, DWORD PTR _pdwxStep$[ebp]
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _dwMax$[ebp]
  00032	89 08		 mov	 DWORD PTR [eax], ecx

; 72   : 	*pdwxCount = dwSize/dwMax;

  00034	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00037	33 d2		 xor	 edx, edx
  00039	f7 75 0c	 div	 DWORD PTR _dwMax$[ebp]
  0003c	8b 4d 14	 mov	 ecx, DWORD PTR _pdwxCount$[ebp]
  0003f	89 01		 mov	 DWORD PTR [ecx], eax

; 73   : 	*pdwxRest = dwSize%dwMax;

  00041	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00044	33 d2		 xor	 edx, edx
  00046	f7 75 0c	 div	 DWORD PTR _dwMax$[ebp]
  00049	8b 45 18	 mov	 eax, DWORD PTR _pdwxRest$[ebp]
  0004c	89 10		 mov	 DWORD PTR [eax], edx
$LN1@DivideText:

; 74   : }

  0004e	c9		 leave
  0004f	c2 14 00	 ret	 20			; 00000014H
?__DivideTextureSize@CDibBar@@IAEXKKPAK00@Z ENDP	; CDibBar::__DivideTextureSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
;	COMDAT ?__NearTextureSize@CDibBar@@IAEKK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwRet$ = -4						; size = 4
_dwSize$ = 8						; size = 4
?__NearTextureSize@CDibBar@@IAEKK@Z PROC		; CDibBar::__NearTextureSize, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 49   : 	if ((dwSize & (dwSize-1)) == 0)

  00008	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0000b	48		 dec	 eax
  0000c	23 45 08	 and	 eax, DWORD PTR _dwSize$[ebp]
  0000f	75 05		 jne	 SHORT $LN4@NearTextur

; 50   : 		return dwSize;

  00011	8b 45 08	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00014	eb 1c		 jmp	 SHORT $LN1@NearTextur
$LN4@NearTextur:

; 51   : 
; 52   : 	DWORD dwRet = 2;

  00016	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _dwRet$[ebp], 2
$LN2@NearTextur:

; 53   : 	while (dwRet < dwSize)

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _dwRet$[ebp]
  00020	3b 45 08	 cmp	 eax, DWORD PTR _dwSize$[ebp]
  00023	73 0a		 jae	 SHORT $LN3@NearTextur

; 54   : 	{
; 55   : 		dwRet <<= 1;

  00025	8b 45 fc	 mov	 eax, DWORD PTR _dwRet$[ebp]
  00028	d1 e0		 shl	 eax, 1
  0002a	89 45 fc	 mov	 DWORD PTR _dwRet$[ebp], eax

; 56   : 	}

  0002d	eb ee		 jmp	 SHORT $LN2@NearTextur
$LN3@NearTextur:

; 57   : 
; 58   : 	return dwRet;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _dwRet$[ebp]
$LN1@NearTextur:

; 59   : }

  00032	c9		 leave
  00033	c2 04 00	 ret	 4
?__NearTextureSize@CDibBar@@IAEKK@Z ENDP		; CDibBar::__NearTextureSize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
;	COMDAT ?Render@CDibBar@@QAEXHH@Z
_TEXT	SEGMENT
$T1 = -64						; size = 4
$T2 = -60						; size = 4
_pTexture$3 = -56					; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
$T6 = -44						; size = 4
$T7 = -40						; size = 4
___param0$ = -36					; size = 4
___param0$ = -32					; size = 4
tv164 = -28						; size = 4
tv178 = -24						; size = 4
__My_data$8 = -20					; size = 4
_this$ = -16						; size = 4
__My_data$9 = -12					; size = 4
_itor$ = -8						; size = 4
$T10 = -2						; size = 1
$T11 = -1						; size = 1
_ix$ = 8						; size = 4
_iy$ = 12						; size = 4
?Render@CDibBar@@QAEXHH@Z PROC				; CDibBar::Render, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1410 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 48	 add	 eax, 72			; 00000048H
  0000f	89 45 f4	 mov	 DWORD PTR __My_data$9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00012	8b 45 f4	 mov	 eax, DWORD PTR __My_data$9[ebp]
  00015	89 45 c4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00018	8b 45 f4	 mov	 eax, DWORD PTR __My_data$9[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	89 45 e0	 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00020	8b 45 e0	 mov	 eax, DWORD PTR ___param0$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR _itor$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 40   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  00026	eb 09		 jmp	 SHORT $LN4@Render
$LN2@Render:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 75   :         ++_Ptr;

  00028	8b 45 f8	 mov	 eax, DWORD PTR _itor$[ebp]
  0002b	83 c0 04	 add	 eax, 4
  0002e	89 45 f8	 mov	 DWORD PTR _itor$[ebp], eax
$LN4@Render:

; 1420 :         auto& _My_data = _Mypair._Myval2;

  00031	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 c0 48	 add	 eax, 72			; 00000048H
  00037	89 45 ec	 mov	 DWORD PTR __My_data$8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0003a	8b 45 ec	 mov	 eax, DWORD PTR __My_data$8[ebp]
  0003d	89 45 c0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  00040	8b 45 ec	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00043	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00046	89 45 dc	 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00049	8b 45 dc	 mov	 eax, DWORD PTR ___param0$[ebp]
  0004c	89 45 d8	 mov	 DWORD PTR $T7[ebp], eax

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  0004f	8d 45 d8	 lea	 eax, DWORD PTR $T7[ebp]
  00052	89 45 d4	 mov	 DWORD PTR $T6[ebp], eax

; 149  :         return _Ptr == _Right._Ptr;

  00055	8b 45 d4	 mov	 eax, DWORD PTR $T6[ebp]
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _itor$[ebp]
  0005b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005d	75 09		 jne	 SHORT $LN49@Render
  0005f	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv178[ebp], 1
  00066	eb 04		 jmp	 SHORT $LN50@Render
$LN49@Render:
  00068	83 65 e8 00	 and	 DWORD PTR tv178[ebp], 0
$LN50@Render:
  0006c	8a 45 e8	 mov	 al, BYTE PTR tv178[ebp]
  0006f	88 45 ff	 mov	 BYTE PTR $T11[ebp], al

; 153  :         return !(*this == _Right);

  00072	0f b6 45 ff	 movzx	 eax, BYTE PTR $T11[ebp]
  00076	85 c0		 test	 eax, eax
  00078	75 09		 jne	 SHORT $LN44@Render
  0007a	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv164[ebp], 1
  00081	eb 04		 jmp	 SHORT $LN45@Render
$LN44@Render:
  00083	83 65 e4 00	 and	 DWORD PTR tv164[ebp], 0
$LN45@Render:
  00087	8a 45 e4	 mov	 al, BYTE PTR tv164[ebp]
  0008a	88 45 fe	 mov	 BYTE PTR $T10[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 40   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  0008d	0f b6 45 fe	 movzx	 eax, BYTE PTR $T10[ebp]
  00091	85 c0		 test	 eax, eax
  00093	74 27		 je	 SHORT $LN1@Render
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 54   :         return *_Ptr;

  00095	8b 45 f8	 mov	 eax, DWORD PTR _itor$[ebp]
  00098	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax

; 252  :         return const_cast<reference>(_Mybase::operator*());

  0009b	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  0009e	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 42   : 		CBlockTexture * pTexture = *itor;

  000a1	8b 45 cc	 mov	 eax, DWORD PTR $T4[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	89 45 c8	 mov	 DWORD PTR _pTexture$3[ebp], eax

; 43   : 		pTexture->Render(ix, iy);

  000a9	ff 75 0c	 push	 DWORD PTR _iy$[ebp]
  000ac	ff 75 08	 push	 DWORD PTR _ix$[ebp]
  000af	8b 4d c8	 mov	 ecx, DWORD PTR _pTexture$3[ebp]
  000b2	e8 00 00 00 00	 call	 ?Render@CBlockTexture@@QAEXHH@Z ; CBlockTexture::Render

; 44   : 	}

  000b7	e9 6c ff ff ff	 jmp	 $LN2@Render
$LN1@Render:

; 45   : }

  000bc	c9		 leave
  000bd	c2 08 00	 ret	 8
?Render@CDibBar@@QAEXHH@Z ENDP				; CDibBar::Render
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
;	COMDAT ?ClearBar@CDibBar@@QAEXXZ
_TEXT	SEGMENT
_pdwBuf$ = -8						; size = 4
_this$ = -4						; size = 4
?ClearBar@CDibBar@@QAEXXZ PROC				; CDibBar::ClearBar, COMDAT
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 	DWORD  * pdwBuf = (DWORD *)m_dib.GetPointer();

  00009	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	83 c1 04	 add	 ecx, 4
  0000f	e8 00 00 00 00	 call	 ?GetPointer@CGraphicDib@@QAEPAXXZ ; CGraphicDib::GetPointer
  00014	89 45 f8	 mov	 DWORD PTR _pdwBuf$[ebp], eax

; 33   : 	memset(pdwBuf, 0, m_dib.GetWidth()*m_dib.GetHeight()*4);

  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	83 c1 04	 add	 ecx, 4
  0001d	e8 00 00 00 00	 call	 ?GetWidth@CGraphicDib@@QAEHXZ ; CGraphicDib::GetWidth
  00022	8b f0		 mov	 esi, eax
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	83 c1 04	 add	 ecx, 4
  0002a	e8 00 00 00 00	 call	 ?GetHeight@CGraphicDib@@QAEHXZ ; CGraphicDib::GetHeight
  0002f	0f af f0	 imul	 esi, eax
  00032	c1 e6 02	 shl	 esi, 2
  00035	56		 push	 esi
  00036	6a 00		 push	 0
  00038	ff 75 f8	 push	 DWORD PTR _pdwBuf$[ebp]
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 34   : 	Invalidate();

  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?Invalidate@CDibBar@@QAEXXZ ; CDibBar::Invalidate

; 35   : }

  0004b	5e		 pop	 esi
  0004c	c9		 leave
  0004d	c3		 ret	 0
?ClearBar@CDibBar@@QAEXXZ ENDP				; CDibBar::ClearBar
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
;	COMDAT ?SetClipRect@CDibBar@@QAEXABUtagRECT@@@Z
_TEXT	SEGMENT
$T1 = -64						; size = 4
$T2 = -60						; size = 4
$T3 = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
$T6 = -44						; size = 4
___param0$ = -40					; size = 4
___param0$ = -36					; size = 4
_pTexture$7 = -32					; size = 4
tv164 = -28						; size = 4
tv178 = -24						; size = 4
__My_data$8 = -20					; size = 4
_this$ = -16						; size = 4
__My_data$9 = -12					; size = 4
_itor$ = -8						; size = 4
$T10 = -2						; size = 1
$T11 = -1						; size = 1
_c_rRect$ = 8						; size = 4
?SetClipRect@CDibBar@@QAEXABUtagRECT@@@Z PROC		; CDibBar::SetClipRect, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1410 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 c0 48	 add	 eax, 72			; 00000048H
  0000f	89 45 f4	 mov	 DWORD PTR __My_data$9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00012	8b 45 f4	 mov	 eax, DWORD PTR __My_data$9[ebp]
  00015	89 45 c4	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00018	8b 45 f4	 mov	 eax, DWORD PTR __My_data$9[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	89 45 dc	 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00020	8b 45 dc	 mov	 eax, DWORD PTR ___param0$[ebp]
  00023	89 45 f8	 mov	 DWORD PTR _itor$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 20   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  00026	eb 09		 jmp	 SHORT $LN4@SetClipRec
$LN2@SetClipRec:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 75   :         ++_Ptr;

  00028	8b 45 f8	 mov	 eax, DWORD PTR _itor$[ebp]
  0002b	83 c0 04	 add	 eax, 4
  0002e	89 45 f8	 mov	 DWORD PTR _itor$[ebp], eax
$LN4@SetClipRec:

; 1420 :         auto& _My_data = _Mypair._Myval2;

  00031	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00034	83 c0 48	 add	 eax, 72			; 00000048H
  00037	89 45 ec	 mov	 DWORD PTR __My_data$8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0003a	8b 45 ec	 mov	 eax, DWORD PTR __My_data$8[ebp]
  0003d	89 45 c0	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  00040	8b 45 ec	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00043	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00046	89 45 d8	 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00049	8b 45 d8	 mov	 eax, DWORD PTR ___param0$[ebp]
  0004c	89 45 d4	 mov	 DWORD PTR $T6[ebp], eax

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  0004f	8d 45 d4	 lea	 eax, DWORD PTR $T6[ebp]
  00052	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax

; 149  :         return _Ptr == _Right._Ptr;

  00055	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _itor$[ebp]
  0005b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0005d	75 09		 jne	 SHORT $LN50@SetClipRec
  0005f	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv178[ebp], 1
  00066	eb 04		 jmp	 SHORT $LN51@SetClipRec
$LN50@SetClipRec:
  00068	83 65 e8 00	 and	 DWORD PTR tv178[ebp], 0
$LN51@SetClipRec:
  0006c	8a 45 e8	 mov	 al, BYTE PTR tv178[ebp]
  0006f	88 45 ff	 mov	 BYTE PTR $T11[ebp], al

; 153  :         return !(*this == _Right);

  00072	0f b6 45 ff	 movzx	 eax, BYTE PTR $T11[ebp]
  00076	85 c0		 test	 eax, eax
  00078	75 09		 jne	 SHORT $LN45@SetClipRec
  0007a	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv164[ebp], 1
  00081	eb 04		 jmp	 SHORT $LN46@SetClipRec
$LN45@SetClipRec:
  00083	83 65 e4 00	 and	 DWORD PTR tv164[ebp], 0
$LN46@SetClipRec:
  00087	8a 45 e4	 mov	 al, BYTE PTR tv164[ebp]
  0008a	88 45 fe	 mov	 BYTE PTR $T10[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 20   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  0008d	0f b6 45 fe	 movzx	 eax, BYTE PTR $T10[ebp]
  00091	85 c0		 test	 eax, eax
  00093	74 2f		 je	 SHORT $LN1@SetClipRec
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 54   :         return *_Ptr;

  00095	8b 45 f8	 mov	 eax, DWORD PTR _itor$[ebp]
  00098	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax

; 252  :         return const_cast<reference>(_Mybase::operator*());

  0009b	8b 45 cc	 mov	 eax, DWORD PTR $T4[ebp]
  0009e	89 45 c8	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 22   : 		CBlockTexture * pTexture = *itor;

  000a1	8b 45 c8	 mov	 eax, DWORD PTR $T3[ebp]
  000a4	8b 00		 mov	 eax, DWORD PTR [eax]
  000a6	89 45 e0	 mov	 DWORD PTR _pTexture$7[ebp], eax

; 23   : 		assert(pTexture);
; 24   : 		if (!pTexture)

  000a9	83 7d e0 00	 cmp	 DWORD PTR _pTexture$7[ebp], 0
  000ad	75 05		 jne	 SHORT $LN5@SetClipRec

; 25   : 			continue;

  000af	e9 74 ff ff ff	 jmp	 $LN2@SetClipRec
$LN5@SetClipRec:

; 26   : 		pTexture->SetClipRect(c_rRect);

  000b4	ff 75 08	 push	 DWORD PTR _c_rRect$[ebp]
  000b7	8b 4d e0	 mov	 ecx, DWORD PTR _pTexture$7[ebp]
  000ba	e8 00 00 00 00	 call	 ?SetClipRect@CBlockTexture@@QAEXABUtagRECT@@@Z ; CBlockTexture::SetClipRect

; 27   : 	}

  000bf	e9 64 ff ff ff	 jmp	 $LN2@SetClipRec
$LN1@SetClipRec:

; 28   : }

  000c4	c9		 leave
  000c5	c2 04 00	 ret	 4
?SetClipRect@CDibBar@@QAEXABUtagRECT@@@Z ENDP		; CDibBar::SetClipRect
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
;	COMDAT ?Invalidate@CDibBar@@QAEXXZ
_TEXT	SEGMENT
$T1 = -84						; size = 4
$T2 = -80						; size = 4
_pTexture$3 = -76					; size = 4
$T4 = -72						; size = 4
$T5 = -68						; size = 4
$T6 = -64						; size = 4
$T7 = -60						; size = 4
___param0$ = -56					; size = 4
___param0$ = -52					; size = 4
tv165 = -48						; size = 4
tv179 = -44						; size = 4
__My_data$8 = -40					; size = 4
__My_data$9 = -36					; size = 4
_itor$ = -32						; size = 4
_this$ = -28						; size = 4
$T10 = -22						; size = 1
$T11 = -21						; size = 1
_rect$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?Invalidate@CDibBar@@QAEXXZ PROC			; CDibBar::Invalidate, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 7    : 	RECT rect = {0, 0, m_dwWidth, m_dwHeight};

  00013	83 65 ec 00	 and	 DWORD PTR _rect$[ebp], 0
  00017	83 65 f0 00	 and	 DWORD PTR _rect$[ebp+4], 0
  0001b	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00021	89 45 f4	 mov	 DWORD PTR _rect$[ebp+8], eax
  00024	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00027	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
  0002a	89 45 f8	 mov	 DWORD PTR _rect$[ebp+12], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1410 :         auto& _My_data = _Mypair._Myval2;

  0002d	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 c0 48	 add	 eax, 72			; 00000048H
  00033	89 45 dc	 mov	 DWORD PTR __My_data$9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00036	8b 45 dc	 mov	 eax, DWORD PTR __My_data$9[ebp]
  00039	89 45 b0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1411 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  0003c	8b 45 dc	 mov	 eax, DWORD PTR __My_data$9[ebp]
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	89 45 cc	 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00044	8b 45 cc	 mov	 eax, DWORD PTR ___param0$[ebp]
  00047	89 45 e0	 mov	 DWORD PTR _itor$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 10   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  0004a	eb 09		 jmp	 SHORT $LN4@Invalidate
$LN2@Invalidate:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 75   :         ++_Ptr;

  0004c	8b 45 e0	 mov	 eax, DWORD PTR _itor$[ebp]
  0004f	83 c0 04	 add	 eax, 4
  00052	89 45 e0	 mov	 DWORD PTR _itor$[ebp], eax
$LN4@Invalidate:

; 1420 :         auto& _My_data = _Mypair._Myval2;

  00055	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00058	83 c0 48	 add	 eax, 72			; 00000048H
  0005b	89 45 d8	 mov	 DWORD PTR __My_data$8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0005e	8b 45 d8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00061	89 45 ac	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  00064	8b 45 d8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00067	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006a	89 45 c8	 mov	 DWORD PTR ___param0$[ebp], eax

; 42   :     _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0006d	8b 45 c8	 mov	 eax, DWORD PTR ___param0$[ebp]
  00070	89 45 c4	 mov	 DWORD PTR $T7[ebp], eax

; 1421 :         return iterator(_My_data._Mylast, _STD addressof(_My_data));

  00073	8d 45 c4	 lea	 eax, DWORD PTR $T7[ebp]
  00076	89 45 c0	 mov	 DWORD PTR $T6[ebp], eax

; 149  :         return _Ptr == _Right._Ptr;

  00079	8b 45 c0	 mov	 eax, DWORD PTR $T6[ebp]
  0007c	8b 4d e0	 mov	 ecx, DWORD PTR _itor$[ebp]
  0007f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00081	75 09		 jne	 SHORT $LN49@Invalidate
  00083	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR tv179[ebp], 1
  0008a	eb 04		 jmp	 SHORT $LN50@Invalidate
$LN49@Invalidate:
  0008c	83 65 d4 00	 and	 DWORD PTR tv179[ebp], 0
$LN50@Invalidate:
  00090	8a 45 d4	 mov	 al, BYTE PTR tv179[ebp]
  00093	88 45 eb	 mov	 BYTE PTR $T11[ebp], al

; 153  :         return !(*this == _Right);

  00096	0f b6 45 eb	 movzx	 eax, BYTE PTR $T11[ebp]
  0009a	85 c0		 test	 eax, eax
  0009c	75 09		 jne	 SHORT $LN44@Invalidate
  0009e	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv165[ebp], 1
  000a5	eb 04		 jmp	 SHORT $LN45@Invalidate
$LN44@Invalidate:
  000a7	83 65 d0 00	 and	 DWORD PTR tv165[ebp], 0
$LN45@Invalidate:
  000ab	8a 45 d0	 mov	 al, BYTE PTR tv165[ebp]
  000ae	88 45 ea	 mov	 BYTE PTR $T10[ebp], al
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 10   : 	for (; itor != m_kVec_pkBlockTexture.end(); ++itor)

  000b1	0f b6 45 ea	 movzx	 eax, BYTE PTR $T10[ebp]
  000b5	85 c0		 test	 eax, eax
  000b7	74 25		 je	 SHORT $LN1@Invalidate
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 54   :         return *_Ptr;

  000b9	8b 45 e0	 mov	 eax, DWORD PTR _itor$[ebp]
  000bc	89 45 bc	 mov	 DWORD PTR $T5[ebp], eax

; 252  :         return const_cast<reference>(_Mybase::operator*());

  000bf	8b 45 bc	 mov	 eax, DWORD PTR $T5[ebp]
  000c2	89 45 b8	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 12   : 		CBlockTexture * pTexture = *itor;

  000c5	8b 45 b8	 mov	 eax, DWORD PTR $T4[ebp]
  000c8	8b 00		 mov	 eax, DWORD PTR [eax]
  000ca	89 45 b4	 mov	 DWORD PTR _pTexture$3[ebp], eax

; 13   : 		pTexture->InvalidateRect(rect);

  000cd	8d 45 ec	 lea	 eax, DWORD PTR _rect$[ebp]
  000d0	50		 push	 eax
  000d1	8b 4d b4	 mov	 ecx, DWORD PTR _pTexture$3[ebp]
  000d4	e8 00 00 00 00	 call	 ?InvalidateRect@CBlockTexture@@QAEXABUtagRECT@@@Z ; CBlockTexture::InvalidateRect

; 14   : 	}

  000d9	e9 6e ff ff ff	 jmp	 $LN2@Invalidate
$LN1@Invalidate:

; 15   : }

  000de	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e1	33 cd		 xor	 ecx, ebp
  000e3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e8	c9		 leave
  000e9	c3		 ret	 0
?Invalidate@CDibBar@@QAEXXZ ENDP			; CDibBar::Invalidate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
;	COMDAT ?Create@CDibBar@@QAE_NPAUHDC__@@KK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hdc$ = 8						; size = 4
_dwWidth$ = 12						; size = 4
_dwHeight$ = 16						; size = 4
?Create@CDibBar@@QAE_NPAUHDC__@@KK@Z PROC		; CDibBar::Create, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 143  : 	if (!m_dib.Create(hdc, dwWidth, dwHeight))

  00007	ff 75 10	 push	 DWORD PTR _dwHeight$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR _dwWidth$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR _hdc$[ebp]
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 04	 add	 ecx, 4
  00016	e8 00 00 00 00	 call	 ?Create@CGraphicDib@@QAE_NPAUHDC__@@HH@Z ; CGraphicDib::Create
  0001b	0f b6 c0	 movzx	 eax, al
  0001e	85 c0		 test	 eax, eax
  00020	75 0f		 jne	 SHORT $LN2@Create

; 144  : 	{
; 145  : 		Tracef(" Failed to create CDibBar\n");

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HNPOIOOA@?5Failed?5to?5create?5CDibBar?6@
  00027	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  0002c	59		 pop	 ecx

; 146  : 		return false;

  0002d	32 c0		 xor	 al, al
  0002f	eb 32		 jmp	 SHORT $LN1@Create
$LN2@Create:

; 147  : 	}
; 148  : 
; 149  : 	m_dwWidth = dwWidth;

  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR _dwWidth$[ebp]
  00037	89 48 54	 mov	 DWORD PTR [eax+84], ecx

; 150  : 	m_dwHeight = dwHeight;

  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 4d 10	 mov	 ecx, DWORD PTR _dwHeight$[ebp]
  00040	89 48 58	 mov	 DWORD PTR [eax+88], ecx

; 151  : 
; 152  : 	__BuildTextureBlockList(dwWidth, dwHeight);

  00043	68 00 01 00 00	 push	 256			; 00000100H
  00048	ff 75 10	 push	 DWORD PTR _dwHeight$[ebp]
  0004b	ff 75 0c	 push	 DWORD PTR _dwWidth$[ebp]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	e8 00 00 00 00	 call	 ?__BuildTextureBlockList@CDibBar@@IAEXKKK@Z ; CDibBar::__BuildTextureBlockList

; 153  : 	OnCreate();

  00056	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 00		 mov	 eax, DWORD PTR [eax]
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	ff 50 04	 call	 DWORD PTR [eax+4]

; 154  : 
; 155  : 	return true;

  00061	b0 01		 mov	 al, 1
$LN1@Create:

; 156  : }

  00063	c9		 leave
  00064	c2 0c 00	 ret	 12			; 0000000cH
?Create@CDibBar@@QAE_NPAUHDC__@@KK@Z ENDP		; CDibBar::Create
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
;	COMDAT ??1CDibBar@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDibBar@@UAE@XZ PROC					; CDibBar::~CDibBar, COMDAT
; _this$ = ecx

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDibBar@@6B@

; 163  : }

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 48	 add	 ecx, 72			; 00000048H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  00016	e8 00 00 00 00	 call	 ?_Tidy@?$vector@PAVCBlockTexture@@V?$allocator@PAVCBlockTexture@@@std@@@std@@AAEXXZ ; std::vector<CBlockTexture *,std::allocator<CBlockTexture *> >::_Tidy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 163  : }

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 04	 add	 ecx, 4
  00021	e8 00 00 00 00	 call	 ??1CGraphicDib@@UAE@XZ	; CGraphicDib::~CGraphicDib
  00026	c9		 leave
  00027	c3		 ret	 0
??1CDibBar@@UAE@XZ ENDP					; CDibBar::~CDibBar
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp
;	COMDAT ??0CDibBar@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_this$ = -12						; size = 4
_this$1 = -8						; size = 4
_this$ = -4						; size = 4
??0CDibBar@@QAE@XZ PROC					; CDibBar::CDibBar, COMDAT
; _this$ = ecx

; 159  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDibBar@@6B@
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	e8 00 00 00 00	 call	 ??0CGraphicDib@@QAE@XZ	; CGraphicDib::CGraphicDib
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 48	 add	 eax, 72			; 00000048H
  00023	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00026	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00029	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0002c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	89 45 f8	 mov	 DWORD PTR _this$1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$1[ebp]
  00035	83 20 00	 and	 DWORD PTR [eax], 0
  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$1[ebp]
  0003b	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$1[ebp]
  00042	83 60 08 00	 and	 DWORD PTR [eax+8], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\DibBar.cpp

; 160  : }

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c9		 leave
  0004a	c3		 ret	 0
??0CDibBar@@QAE@XZ ENDP					; CDibBar::CDibBar
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Block_size$ = -8					; size = 4
__Ptr_container$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00012	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00015	77 05		 ja	 SHORT $LN12@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  00017	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Allocate_m:

; 77   :         return ::operator new(_Bytes);

  0001c	ff 75 f8	 push	 DWORD PTR __Block_size$[ebp]
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	59		 pop	 ecx

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00025	89 45 fc	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00028	83 7d fc 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0002c	74 02		 je	 SHORT $LN7@Allocate_m
  0002e	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00035	33 c0		 xor	 eax, eax
  00037	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  00039	33 c0		 xor	 eax, eax
  0003b	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00040	83 c0 23	 add	 eax, 35			; 00000023H
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00046	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00049	6a 04		 push	 4
  0004b	58		 pop	 eax
  0004c	6b c0 ff	 imul	 eax, eax, -1
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00055	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0b		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00014	59		 pop	 ecx
  00015	eb 13		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00017	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001b	74 0b		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001d	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	59		 pop	 ecx

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00028	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 0f		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  0003a	ff 75 0c	 push	 DWORD PTR __Bytes$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 222  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	c9		 leave
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	83 c0 23	 add	 eax, 35			; 00000023H
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f4	 mov	 DWORD PTR __Ptr_user$[ebp], eax

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	6a 04		 push	 4
  0001d	58		 pop	 eax
  0001e	6b c0 ff	 imul	 eax, eax, -1
  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00024	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00027	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	2b 45 f8	 sub	 eax, DWORD PTR __Ptr_container$[ebp]
  00039	89 45 fc	 mov	 DWORD PTR __Back_shift$[ebp], eax
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00040	72 08		 jb	 SHORT $LN7@Adjust_man
  00042	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00046	77 02		 ja	 SHORT $LN7@Adjust_man
  00048	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0004f	33 c0		 xor	 eax, eax
  00051	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00053	33 c0		 xor	 eax, eax
  00055	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 130  :     {

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 141  :     {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c9		 leave
  0003d	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 0b		 je	 SHORT $LN3@what
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00023	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00026	c9		 leave
  00027	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx

; 74   :     }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
