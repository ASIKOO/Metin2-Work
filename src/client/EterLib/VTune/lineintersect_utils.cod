; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ; IntersectLineSegments
PUBLIC	?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z ; IntersectLineSegments
PUBLIC	?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z ; IntersectLineSegments
PUBLIC	?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
PUBLIC	?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
PUBLIC	?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
PUBLIC	__real@3c23d70b
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c23d70b
CONST	SEGMENT
__real@3c23d70b DD 03c23d70br			; 0.01
CONST	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z
_TEXT	SEGMENT
tv207 = -48						; size = 4
tv206 = -44						; size = 4
tv203 = -40						; size = 4
tv178 = -36						; size = 4
tv177 = -32						; size = 4
tv174 = -28						; size = 4
tv134 = -24						; size = 4
tv133 = -20						; size = 4
tv130 = -16						; size = 4
tv73 = -12						; size = 4
tv72 = -8						; size = 4
tv69 = -4						; size = 4
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_Lax$ = 20						; size = 4
_Lay$ = 24						; size = 4
_Laz$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_Lbx$ = 44						; size = 4
_Lby$ = 48						; size = 4
_Lbz$ = 52						; size = 4
_epsilon_squared$ = 56					; size = 4
_s$ = 60						; size = 4
_t$ = 64						; size = 4
_PointOnSegAx$ = 68					; size = 4
_PointOnSegAy$ = 72					; size = 4
_PointOnSegAz$ = 76					; size = 4
_PointOnSegBx$ = 80					; size = 4
_PointOnSegBy$ = 84					; size = 4
_PointOnSegBz$ = 88					; size = 4
?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z PROC	; AdjustNearestPoints, COMDAT

; 798  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H

; 799  : 	// handle the case where both parameter s and t are out of range
; 800  : 	if (OUT_OF_RANGE(s) && OUT_OF_RANGE(t))

  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	0f 2f 45 3c	 comiss	 xmm0, DWORD PTR _s$[ebp]
  0000d	77 12		 ja	 SHORT $LN4@AdjustNear
  0000f	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00014	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0001b	0f 86 4a 03 00
	00		 jbe	 $LN2@AdjustNear
$LN4@AdjustNear:
  00021	0f 57 c0	 xorps	 xmm0, xmm0
  00024	0f 2f 45 40	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00028	77 12		 ja	 SHORT $LN5@AdjustNear
  0002a	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  0002f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00036	0f 86 2f 03 00
	00		 jbe	 $LN2@AdjustNear
$LN5@AdjustNear:

; 801  : 	{
; 802  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  0003c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00044	0f 2f 45 3c	 comiss	 xmm0, DWORD PTR _s$[ebp]
  00048	76 0c		 jbe	 SHORT $LN15@AdjustNear
  0004a	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0004f	f3 0f 11 45 fc	 movss	 DWORD PTR tv69[ebp], xmm0
  00054	eb 0d		 jmp	 SHORT $LN16@AdjustNear
$LN15@AdjustNear:
  00056	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0005e	f3 0f 11 45 fc	 movss	 DWORD PTR tv69[ebp], xmm0
$LN16@AdjustNear:
  00063	0f 57 c0	 xorps	 xmm0, xmm0
  00066	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR tv69[ebp]
  0006a	76 0a		 jbe	 SHORT $LN19@AdjustNear
  0006c	0f 57 c0	 xorps	 xmm0, xmm0
  0006f	f3 0f 11 45 f4	 movss	 DWORD PTR tv73[ebp], xmm0
  00074	eb 31		 jmp	 SHORT $LN20@AdjustNear
$LN19@AdjustNear:
  00076	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0007e	0f 2f 45 3c	 comiss	 xmm0, DWORD PTR _s$[ebp]
  00082	76 0c		 jbe	 SHORT $LN17@AdjustNear
  00084	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00089	f3 0f 11 45 f8	 movss	 DWORD PTR tv72[ebp], xmm0
  0008e	eb 0d		 jmp	 SHORT $LN18@AdjustNear
$LN17@AdjustNear:
  00090	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00098	f3 0f 11 45 f8	 movss	 DWORD PTR tv72[ebp], xmm0
$LN18@AdjustNear:
  0009d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv72[ebp]
  000a2	f3 0f 11 45 f4	 movss	 DWORD PTR tv73[ebp], xmm0
$LN20@AdjustNear:
  000a7	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv73[ebp]
  000ac	f3 0f 11 45 3c	 movss	 DWORD PTR _s$[ebp], xmm0

; 803  : 		PointOnSegAx = (A1x + s * Lax);

  000b1	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  000b6	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  000bb	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  000c0	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  000c3	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 804  : 		PointOnSegAy = (A1y + s * Lay);

  000c7	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  000cc	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _Lay$[ebp]
  000d1	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  000d6	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  000d9	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 805  : 		PointOnSegAz = (A1z + s * Laz);

  000dd	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  000e2	f3 0f 59 45 1c	 mulss	 xmm0, DWORD PTR _Laz$[ebp]
  000e7	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  000ec	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  000ef	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 806  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,

  000f3	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  000f6	50		 push	 eax
  000f7	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  000fa	ff 75 54	 push	 DWORD PTR _PointOnSegBy$[ebp]
  000fd	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00100	51		 push	 ecx
  00101	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00106	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010b	6a 01		 push	 1
  0010d	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00110	51		 push	 ecx
  00111	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00115	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011a	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  0011d	51		 push	 ecx
  0011e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00122	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00127	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  0012a	51		 push	 ecx
  0012b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	51		 push	 ecx
  00135	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  0013a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013f	51		 push	 ecx
  00140	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	51		 push	 ecx
  0014b	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00150	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00155	51		 push	 ecx
  00156	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0015b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00160	51		 push	 ecx
  00161	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  00166	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016b	51		 push	 ecx
  0016c	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00171	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00176	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  0017b	83 c4 3c	 add	 esp, 60			; 0000003cH

; 807  : 			PointOnSegAy, PointOnSegAz, true, epsilon_squared,
; 808  : 			PointOnSegBx, PointOnSegBy, PointOnSegBz, t);
; 809  : 		if (OUT_OF_RANGE(t))

  0017e	0f 57 c0	 xorps	 xmm0, xmm0
  00181	0f 2f 45 40	 comiss	 xmm0, DWORD PTR _t$[ebp]
  00185	77 12		 ja	 SHORT $LN7@AdjustNear
  00187	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  0018c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00193	0f 86 cd 01 00
	00		 jbe	 $LN6@AdjustNear
$LN7@AdjustNear:

; 810  : 		{
; 811  : 			t = FMAX(0.0f, FMIN(1.0f, t));

  00199	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001a1	0f 2f 45 40	 comiss	 xmm0, DWORD PTR _t$[ebp]
  001a5	76 0c		 jbe	 SHORT $LN21@AdjustNear
  001a7	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  001ac	f3 0f 11 45 f0	 movss	 DWORD PTR tv130[ebp], xmm0
  001b1	eb 0d		 jmp	 SHORT $LN22@AdjustNear
$LN21@AdjustNear:
  001b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001bb	f3 0f 11 45 f0	 movss	 DWORD PTR tv130[ebp], xmm0
$LN22@AdjustNear:
  001c0	0f 57 c0	 xorps	 xmm0, xmm0
  001c3	0f 2f 45 f0	 comiss	 xmm0, DWORD PTR tv130[ebp]
  001c7	76 0a		 jbe	 SHORT $LN25@AdjustNear
  001c9	0f 57 c0	 xorps	 xmm0, xmm0
  001cc	f3 0f 11 45 e8	 movss	 DWORD PTR tv134[ebp], xmm0
  001d1	eb 31		 jmp	 SHORT $LN26@AdjustNear
$LN25@AdjustNear:
  001d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001db	0f 2f 45 40	 comiss	 xmm0, DWORD PTR _t$[ebp]
  001df	76 0c		 jbe	 SHORT $LN23@AdjustNear
  001e1	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  001e6	f3 0f 11 45 ec	 movss	 DWORD PTR tv133[ebp], xmm0
  001eb	eb 0d		 jmp	 SHORT $LN24@AdjustNear
$LN23@AdjustNear:
  001ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001f5	f3 0f 11 45 ec	 movss	 DWORD PTR tv133[ebp], xmm0
$LN24@AdjustNear:
  001fa	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv133[ebp]
  001ff	f3 0f 11 45 e8	 movss	 DWORD PTR tv134[ebp], xmm0
$LN26@AdjustNear:
  00204	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR tv134[ebp]
  00209	f3 0f 11 45 40	 movss	 DWORD PTR _t$[ebp], xmm0

; 812  : 			PointOnSegBx = (B1x + t * Lbx);

  0020e	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  00213	f3 0f 59 45 2c	 mulss	 xmm0, DWORD PTR _Lbx$[ebp]
  00218	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  0021d	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  00220	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 813  : 			PointOnSegBy = (B1y + t * Lby);

  00224	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  00229	f3 0f 59 45 30	 mulss	 xmm0, DWORD PTR _Lby$[ebp]
  0022e	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  00233	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  00236	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 814  : 			PointOnSegBz = (B1z + t * Lbz);

  0023a	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  0023f	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _Lbz$[ebp]
  00244	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00249	8b 45 58	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0024c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 815  : 			FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, PointOnSegBx,

  00250	8d 45 3c	 lea	 eax, DWORD PTR _s$[ebp]
  00253	50		 push	 eax
  00254	ff 75 4c	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00257	ff 75 48	 push	 DWORD PTR _PointOnSegAy$[ebp]
  0025a	ff 75 44	 push	 DWORD PTR _PointOnSegAx$[ebp]
  0025d	51		 push	 ecx
  0025e	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00263	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00268	6a 00		 push	 0
  0026a	8b 45 58	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0026d	51		 push	 ecx
  0026e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00272	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00277	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  0027a	51		 push	 ecx
  0027b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0027f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00284	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  00287	51		 push	 ecx
  00288	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0028c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00291	51		 push	 ecx
  00292	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  00297	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029c	51		 push	 ecx
  0029d	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  002a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a7	51		 push	 ecx
  002a8	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  002ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b2	51		 push	 ecx
  002b3	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  002b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bd	51		 push	 ecx
  002be	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  002c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c8	51		 push	 ecx
  002c9	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  002ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d3	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  002d8	83 c4 3c	 add	 esp, 60			; 0000003cH

; 816  : 				PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 817  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz, s);
; 818  : 			FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,

  002db	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  002de	50		 push	 eax
  002df	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  002e2	ff 75 54	 push	 DWORD PTR _PointOnSegBy$[ebp]
  002e5	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  002e8	51		 push	 ecx
  002e9	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  002ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f3	6a 00		 push	 0
  002f5	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  002f8	51		 push	 ecx
  002f9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00302	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  00305	51		 push	 ecx
  00306	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0030a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030f	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  00312	51		 push	 ecx
  00313	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00317	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031c	51		 push	 ecx
  0031d	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00322	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00327	51		 push	 ecx
  00328	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0032d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00332	51		 push	 ecx
  00333	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00338	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033d	51		 push	 ecx
  0033e	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00343	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00348	51		 push	 ecx
  00349	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0034e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00353	51		 push	 ecx
  00354	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00359	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035e	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00363	83 c4 3c	 add	 esp, 60			; 0000003cH
$LN6@AdjustNear:

; 819  : 				PointOnSegAy, PointOnSegAz, false, epsilon_squared,
; 820  : 				PointOnSegBx, PointOnSegBy, PointOnSegBz, t);
; 821  : 		}
; 822  : 	}

  00366	e9 bf 02 00 00	 jmp	 $LN11@AdjustNear
$LN2@AdjustNear:

; 823  : 	// otherwise, handle the case where the parameter for only one segment is
; 824  : 	// out of range
; 825  : 	else if (OUT_OF_RANGE(s))

  0036b	0f 57 c0	 xorps	 xmm0, xmm0
  0036e	0f 2f 45 3c	 comiss	 xmm0, DWORD PTR _s$[ebp]
  00372	77 12		 ja	 SHORT $LN10@AdjustNear
  00374	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00379	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00380	0f 86 47 01 00
	00		 jbe	 $LN8@AdjustNear
$LN10@AdjustNear:

; 826  : 	{
; 827  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  00386	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0038e	0f 2f 45 3c	 comiss	 xmm0, DWORD PTR _s$[ebp]
  00392	76 0c		 jbe	 SHORT $LN27@AdjustNear
  00394	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00399	f3 0f 11 45 e4	 movss	 DWORD PTR tv174[ebp], xmm0
  0039e	eb 0d		 jmp	 SHORT $LN28@AdjustNear
$LN27@AdjustNear:
  003a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003a8	f3 0f 11 45 e4	 movss	 DWORD PTR tv174[ebp], xmm0
$LN28@AdjustNear:
  003ad	0f 57 c0	 xorps	 xmm0, xmm0
  003b0	0f 2f 45 e4	 comiss	 xmm0, DWORD PTR tv174[ebp]
  003b4	76 0a		 jbe	 SHORT $LN31@AdjustNear
  003b6	0f 57 c0	 xorps	 xmm0, xmm0
  003b9	f3 0f 11 45 dc	 movss	 DWORD PTR tv178[ebp], xmm0
  003be	eb 31		 jmp	 SHORT $LN32@AdjustNear
$LN31@AdjustNear:
  003c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003c8	0f 2f 45 3c	 comiss	 xmm0, DWORD PTR _s$[ebp]
  003cc	76 0c		 jbe	 SHORT $LN29@AdjustNear
  003ce	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  003d3	f3 0f 11 45 e0	 movss	 DWORD PTR tv177[ebp], xmm0
  003d8	eb 0d		 jmp	 SHORT $LN30@AdjustNear
$LN29@AdjustNear:
  003da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003e2	f3 0f 11 45 e0	 movss	 DWORD PTR tv177[ebp], xmm0
$LN30@AdjustNear:
  003e7	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR tv177[ebp]
  003ec	f3 0f 11 45 dc	 movss	 DWORD PTR tv178[ebp], xmm0
$LN32@AdjustNear:
  003f1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv178[ebp]
  003f6	f3 0f 11 45 3c	 movss	 DWORD PTR _s$[ebp], xmm0

; 828  : 		PointOnSegAx = (A1x + s * Lax);

  003fb	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00400	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  00405	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  0040a	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  0040d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 829  : 		PointOnSegAy = (A1y + s * Lay);

  00411	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  00416	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _Lay$[ebp]
  0041b	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  00420	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  00423	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 830  : 		PointOnSegAz = (A1z + s * Laz);

  00427	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _s$[ebp]
  0042c	f3 0f 59 45 1c	 mulss	 xmm0, DWORD PTR _Laz$[ebp]
  00431	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  00436	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00439	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 831  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,

  0043d	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  00440	50		 push	 eax
  00441	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00444	ff 75 54	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00447	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  0044a	51		 push	 ecx
  0044b	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00450	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00455	6a 00		 push	 0
  00457	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  0045a	51		 push	 ecx
  0045b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0045f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00464	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  00467	51		 push	 ecx
  00468	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0046c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00471	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  00474	51		 push	 ecx
  00475	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00479	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047e	51		 push	 ecx
  0047f	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00484	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00489	51		 push	 ecx
  0048a	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0048f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00494	51		 push	 ecx
  00495	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  0049a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0049f	51		 push	 ecx
  004a0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  004a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004aa	51		 push	 ecx
  004ab	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  004b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b5	51		 push	 ecx
  004b6	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  004bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c0	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  004c5	83 c4 3c	 add	 esp, 60			; 0000003cH

; 832  : 			PointOnSegAy, PointOnSegAz, false, epsilon_squared,
; 833  : 			PointOnSegBx, PointOnSegBy, PointOnSegBz, t);
; 834  : 	}

  004c8	e9 5d 01 00 00	 jmp	 $LN11@AdjustNear
$LN8@AdjustNear:

; 835  : 	else if (OUT_OF_RANGE(t))

  004cd	0f 57 c0	 xorps	 xmm0, xmm0
  004d0	0f 2f 45 40	 comiss	 xmm0, DWORD PTR _t$[ebp]
  004d4	77 12		 ja	 SHORT $LN13@AdjustNear
  004d6	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  004db	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  004e2	0f 86 42 01 00
	00		 jbe	 $LN11@AdjustNear
$LN13@AdjustNear:

; 836  : 	{
; 837  : 		t = FMAX(0.0f, FMIN(1.0f, t));

  004e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004f0	0f 2f 45 40	 comiss	 xmm0, DWORD PTR _t$[ebp]
  004f4	76 0c		 jbe	 SHORT $LN33@AdjustNear
  004f6	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  004fb	f3 0f 11 45 d8	 movss	 DWORD PTR tv203[ebp], xmm0
  00500	eb 0d		 jmp	 SHORT $LN34@AdjustNear
$LN33@AdjustNear:
  00502	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0050a	f3 0f 11 45 d8	 movss	 DWORD PTR tv203[ebp], xmm0
$LN34@AdjustNear:
  0050f	0f 57 c0	 xorps	 xmm0, xmm0
  00512	0f 2f 45 d8	 comiss	 xmm0, DWORD PTR tv203[ebp]
  00516	76 0a		 jbe	 SHORT $LN37@AdjustNear
  00518	0f 57 c0	 xorps	 xmm0, xmm0
  0051b	f3 0f 11 45 d0	 movss	 DWORD PTR tv207[ebp], xmm0
  00520	eb 31		 jmp	 SHORT $LN38@AdjustNear
$LN37@AdjustNear:
  00522	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0052a	0f 2f 45 40	 comiss	 xmm0, DWORD PTR _t$[ebp]
  0052e	76 0c		 jbe	 SHORT $LN35@AdjustNear
  00530	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  00535	f3 0f 11 45 d4	 movss	 DWORD PTR tv206[ebp], xmm0
  0053a	eb 0d		 jmp	 SHORT $LN36@AdjustNear
$LN35@AdjustNear:
  0053c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00544	f3 0f 11 45 d4	 movss	 DWORD PTR tv206[ebp], xmm0
$LN36@AdjustNear:
  00549	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR tv206[ebp]
  0054e	f3 0f 11 45 d0	 movss	 DWORD PTR tv207[ebp], xmm0
$LN38@AdjustNear:
  00553	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR tv207[ebp]
  00558	f3 0f 11 45 40	 movss	 DWORD PTR _t$[ebp], xmm0

; 838  : 		PointOnSegBx = (B1x + t * Lbx);

  0055d	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  00562	f3 0f 59 45 2c	 mulss	 xmm0, DWORD PTR _Lbx$[ebp]
  00567	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  0056c	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  0056f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 839  : 		PointOnSegBy = (B1y + t * Lby);

  00573	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  00578	f3 0f 59 45 30	 mulss	 xmm0, DWORD PTR _Lby$[ebp]
  0057d	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  00582	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  00585	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 840  : 		PointOnSegBz = (B1z + t * Lbz);

  00589	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _t$[ebp]
  0058e	f3 0f 59 45 34	 mulss	 xmm0, DWORD PTR _Lbz$[ebp]
  00593	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00598	8b 45 58	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0059b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 841  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, PointOnSegBx,

  0059f	8d 45 3c	 lea	 eax, DWORD PTR _s$[ebp]
  005a2	50		 push	 eax
  005a3	ff 75 4c	 push	 DWORD PTR _PointOnSegAz$[ebp]
  005a6	ff 75 48	 push	 DWORD PTR _PointOnSegAy$[ebp]
  005a9	ff 75 44	 push	 DWORD PTR _PointOnSegAx$[ebp]
  005ac	51		 push	 ecx
  005ad	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  005b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b7	6a 00		 push	 0
  005b9	8b 45 58	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  005bc	51		 push	 ecx
  005bd	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  005c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c6	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  005c9	51		 push	 ecx
  005ca	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  005ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d3	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  005d6	51		 push	 ecx
  005d7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  005db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e0	51		 push	 ecx
  005e1	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  005e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005eb	51		 push	 ecx
  005ec	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  005f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f6	51		 push	 ecx
  005f7	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  005fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00601	51		 push	 ecx
  00602	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00607	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060c	51		 push	 ecx
  0060d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00612	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00617	51		 push	 ecx
  00618	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  0061d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00622	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00627	83 c4 3c	 add	 esp, 60			; 0000003cH
$LN11@AdjustNear:

; 842  : 			PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 843  : 			PointOnSegAx, PointOnSegAy, PointOnSegAz, s);
; 844  : 	}
; 845  : 	else
; 846  : 	{
; 847  : 		assert(0);
; 848  : 	}
; 849  : }

  0062a	c9		 leave
  0062b	c3		 ret	 0
?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ENDP	; AdjustNearestPoints
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z
_TEXT	SEGMENT
tv187 = -52						; size = 4
tv173 = -48						; size = 4
tv186 = -44						; size = 4
tv179 = -40						; size = 4
tv172 = -36						; size = 4
tv165 = -32						; size = 4
_temp$ = -28						; size = 4
_s$ = -24						; size = 8
_tp$1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_Lax$ = 32						; size = 4
_Lay$ = 36						; size = 4
_Laz$ = 40						; size = 4
_B1x$ = 44						; size = 4
_B1y$ = 48						; size = 4
_B1z$ = 52						; size = 4
_B2x$ = 56						; size = 4
_B2y$ = 60						; size = 4
_B2z$ = 64						; size = 4
_Lbx$ = 68						; size = 4
_Lby$ = 72						; size = 4
_Lbz$ = 76						; size = 4
_infinite_lines$ = 80					; size = 1
_epsilon_squared$ = 84					; size = 4
_PointOnSegAx$ = 88					; size = 4
_PointOnSegAy$ = 92					; size = 4
_PointOnSegAz$ = 96					; size = 4
_PointOnSegBx$ = 100					; size = 4
_PointOnSegBy$ = 104					; size = 4
_PointOnSegBz$ = 108					; size = 4
?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z PROC ; FindNearestPointOfParallelLineSegments, COMDAT

; 700  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 701  : 	float s[2], temp;
; 702  : 	FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,

  00010	6a 04		 push	 4
  00012	58		 pop	 eax
  00013	6b c0 00	 imul	 eax, eax, 0
  00016	8d 44 05 e8	 lea	 eax, DWORD PTR _s$[ebp+eax]
  0001a	50		 push	 eax
  0001b	ff 75 60	 push	 DWORD PTR _PointOnSegAz$[ebp]
  0001e	ff 75 5c	 push	 DWORD PTR _PointOnSegAy$[ebp]
  00021	ff 75 58	 push	 DWORD PTR _PointOnSegAx$[ebp]
  00024	51		 push	 ecx
  00025	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  0002a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002f	6a 01		 push	 1
  00031	51		 push	 ecx
  00032	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003c	51		 push	 ecx
  0003d	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  00042	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00047	51		 push	 ecx
  00048	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  0004d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00052	51		 push	 ecx
  00053	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	51		 push	 ecx
  0005e	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	51		 push	 ecx
  00069	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  0006e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00073	51		 push	 ecx
  00074	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	51		 push	 ecx
  0007f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00084	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00089	51		 push	 ecx
  0008a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  0008f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00094	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00099	83 c4 3c	 add	 esp, 60			; 0000003cH

; 703  : 		true, epsilon_squared, PointOnSegAx, PointOnSegAy, PointOnSegAz, s[0]);
; 704  : 	if (true == infinite_lines)

  0009c	0f b6 45 50	 movzx	 eax, BYTE PTR _infinite_lines$[ebp]
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	75 29		 jne	 SHORT $LN2@FindNeares

; 705  : 	{
; 706  : 		PointOnSegBx = B1x;

  000a5	8b 45 64	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  000a8	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  000ad	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 707  : 		PointOnSegBy = B1y;

  000b1	8b 45 68	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  000b4	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  000b9	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 708  : 		PointOnSegBz = B1z;

  000bd	8b 45 6c	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  000c0	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  000c5	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 709  : 	}

  000c9	e9 07 04 00 00	 jmp	 $LN9@FindNeares
$LN2@FindNeares:

; 710  : 	else
; 711  : 	{
; 712  : 		float tp[3];
; 713  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B2x, B2y, B2z,

  000ce	6a 04		 push	 4
  000d0	58		 pop	 eax
  000d1	c1 e0 00	 shl	 eax, 0
  000d4	8d 44 05 e8	 lea	 eax, DWORD PTR _s$[ebp+eax]
  000d8	50		 push	 eax
  000d9	6a 04		 push	 4
  000db	58		 pop	 eax
  000dc	d1 e0		 shl	 eax, 1
  000de	8d 44 05 f0	 lea	 eax, DWORD PTR _tp$1[ebp+eax]
  000e2	50		 push	 eax
  000e3	6a 04		 push	 4
  000e5	58		 pop	 eax
  000e6	c1 e0 00	 shl	 eax, 0
  000e9	8d 44 05 f0	 lea	 eax, DWORD PTR _tp$1[ebp+eax]
  000ed	50		 push	 eax
  000ee	6a 04		 push	 4
  000f0	58		 pop	 eax
  000f1	6b c0 00	 imul	 eax, eax, 0
  000f4	8d 44 05 f0	 lea	 eax, DWORD PTR _tp$1[ebp+eax]
  000f8	50		 push	 eax
  000f9	51		 push	 ecx
  000fa	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  000ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00104	6a 01		 push	 1
  00106	51		 push	 ecx
  00107	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  0010c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00111	51		 push	 ecx
  00112	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  00117	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011c	51		 push	 ecx
  0011d	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  00122	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00127	51		 push	 ecx
  00128	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  0012d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00132	51		 push	 ecx
  00133	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  00138	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013d	51		 push	 ecx
  0013e	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  00143	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00148	51		 push	 ecx
  00149	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0014e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00153	51		 push	 ecx
  00154	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00159	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015e	51		 push	 ecx
  0015f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00164	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00169	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  0016e	83 c4 3c	 add	 esp, 60			; 0000003cH

; 714  : 			true, epsilon_squared, tp[0], tp[1], tp[2], s[1]);
; 715  : 		if (s[0] < 0.f && s[1] < 0.f)

  00171	6a 04		 push	 4
  00173	58		 pop	 eax
  00174	6b c0 00	 imul	 eax, eax, 0
  00177	0f 57 c0	 xorps	 xmm0, xmm0
  0017a	0f 2f 44 05 e8	 comiss	 xmm0, DWORD PTR _s$[ebp+eax]
  0017f	0f 86 a0 00 00
	00		 jbe	 $LN4@FindNeares
  00185	6a 04		 push	 4
  00187	58		 pop	 eax
  00188	c1 e0 00	 shl	 eax, 0
  0018b	0f 57 c0	 xorps	 xmm0, xmm0
  0018e	0f 2f 44 05 e8	 comiss	 xmm0, DWORD PTR _s$[ebp+eax]
  00193	0f 86 8c 00 00
	00		 jbe	 $LN4@FindNeares

; 716  : 		{
; 717  : 			PointOnSegAx = A1x;

  00199	8b 45 58	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  0019c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  001a1	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 718  : 			PointOnSegAy = A1y;

  001a5	8b 45 5c	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  001a8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  001ad	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 719  : 			PointOnSegAz = A1z;

  001b1	8b 45 60	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  001b4	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  001b9	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 720  : 			if (s[0] < s[1])

  001bd	6a 04		 push	 4
  001bf	58		 pop	 eax
  001c0	6b c0 00	 imul	 eax, eax, 0
  001c3	6a 04		 push	 4
  001c5	59		 pop	 ecx
  001c6	c1 e1 00	 shl	 ecx, 0
  001c9	f3 0f 10 44 0d
	e8		 movss	 xmm0, DWORD PTR _s$[ebp+ecx]
  001cf	0f 2f 44 05 e8	 comiss	 xmm0, DWORD PTR _s$[ebp+eax]
  001d4	76 26		 jbe	 SHORT $LN6@FindNeares

; 721  : 			{
; 722  : 				PointOnSegBx = B2x;

  001d6	8b 45 64	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  001d9	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  001de	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 723  : 				PointOnSegBy = B2y;

  001e2	8b 45 68	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  001e5	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  001ea	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 724  : 				PointOnSegBz = B2z;

  001ee	8b 45 6c	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  001f1	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  001f6	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 725  : 			}

  001fa	eb 24		 jmp	 SHORT $LN7@FindNeares
$LN6@FindNeares:

; 726  : 			else
; 727  : 			{
; 728  : 				PointOnSegBx = B1x;

  001fc	8b 45 64	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  001ff	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00204	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 729  : 				PointOnSegBy = B1y;

  00208	8b 45 68	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  0020b	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  00210	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 730  : 				PointOnSegBz = B1z;

  00214	8b 45 6c	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  00217	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0021c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN7@FindNeares:

; 731  : 			}
; 732  : 		}

  00220	e9 b0 02 00 00	 jmp	 $LN9@FindNeares
$LN4@FindNeares:

; 733  : 		else if (s[0] > 1.f && s[1] > 1.f)

  00225	6a 04		 push	 4
  00227	58		 pop	 eax
  00228	6b c0 00	 imul	 eax, eax, 0
  0022b	f3 0f 10 44 05
	e8		 movss	 xmm0, DWORD PTR _s$[ebp+eax]
  00231	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00238	0f 86 a5 00 00
	00		 jbe	 $LN8@FindNeares
  0023e	6a 04		 push	 4
  00240	58		 pop	 eax
  00241	c1 e0 00	 shl	 eax, 0
  00244	f3 0f 10 44 05
	e8		 movss	 xmm0, DWORD PTR _s$[ebp+eax]
  0024a	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00251	0f 86 8c 00 00
	00		 jbe	 $LN8@FindNeares

; 734  : 		{
; 735  : 			PointOnSegAx = A2x;

  00257	8b 45 58	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  0025a	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  0025f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 736  : 			PointOnSegAy = A2y;

  00263	8b 45 5c	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  00266	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  0026b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 737  : 			PointOnSegAz = A2z;

  0026f	8b 45 60	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00272	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  00277	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 738  : 			if (s[0] < s[1])

  0027b	6a 04		 push	 4
  0027d	58		 pop	 eax
  0027e	6b c0 00	 imul	 eax, eax, 0
  00281	6a 04		 push	 4
  00283	59		 pop	 ecx
  00284	c1 e1 00	 shl	 ecx, 0
  00287	f3 0f 10 44 0d
	e8		 movss	 xmm0, DWORD PTR _s$[ebp+ecx]
  0028d	0f 2f 44 05 e8	 comiss	 xmm0, DWORD PTR _s$[ebp+eax]
  00292	76 26		 jbe	 SHORT $LN10@FindNeares

; 739  : 			{
; 740  : 				PointOnSegBx = B1x;

  00294	8b 45 64	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  00297	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  0029c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 741  : 				PointOnSegBy = B1y;

  002a0	8b 45 68	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  002a3	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  002a8	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 742  : 				PointOnSegBz = B1z;

  002ac	8b 45 6c	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  002af	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  002b4	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 743  : 			}

  002b8	eb 24		 jmp	 SHORT $LN11@FindNeares
$LN10@FindNeares:

; 744  : 			else
; 745  : 			{
; 746  : 				PointOnSegBx = B2x;

  002ba	8b 45 64	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  002bd	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  002c2	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 747  : 				PointOnSegBy = B2y;

  002c6	8b 45 68	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  002c9	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  002ce	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 748  : 				PointOnSegBz = B2z;

  002d2	8b 45 6c	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  002d5	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  002da	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN11@FindNeares:

; 749  : 			}
; 750  : 		}

  002de	e9 f2 01 00 00	 jmp	 $LN9@FindNeares
$LN8@FindNeares:

; 751  : 		else
; 752  : 		{
; 753  : 			temp = 0.5f*(FMAX(0.0f, FMIN(1.0f, s[0])) + FMAX(0.0f, FMIN(1.0f, s[1])));

  002e3	6a 04		 push	 4
  002e5	58		 pop	 eax
  002e6	6b c0 00	 imul	 eax, eax, 0
  002e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002f1	0f 2f 44 05 e8	 comiss	 xmm0, DWORD PTR _s$[ebp+eax]
  002f6	76 13		 jbe	 SHORT $LN13@FindNeares
  002f8	6a 04		 push	 4
  002fa	58		 pop	 eax
  002fb	6b c0 00	 imul	 eax, eax, 0
  002fe	f3 0f 10 44 05
	e8		 movss	 xmm0, DWORD PTR _s$[ebp+eax]
  00304	f3 0f 11 45 e0	 movss	 DWORD PTR tv165[ebp], xmm0
  00309	eb 0d		 jmp	 SHORT $LN14@FindNeares
$LN13@FindNeares:
  0030b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00313	f3 0f 11 45 e0	 movss	 DWORD PTR tv165[ebp], xmm0
$LN14@FindNeares:
  00318	0f 57 c0	 xorps	 xmm0, xmm0
  0031b	0f 2f 45 e0	 comiss	 xmm0, DWORD PTR tv165[ebp]
  0031f	76 0a		 jbe	 SHORT $LN17@FindNeares
  00321	0f 57 c0	 xorps	 xmm0, xmm0
  00324	f3 0f 11 45 d0	 movss	 DWORD PTR tv173[ebp], xmm0
  00329	eb 3f		 jmp	 SHORT $LN18@FindNeares
$LN17@FindNeares:
  0032b	6a 04		 push	 4
  0032d	58		 pop	 eax
  0032e	6b c0 00	 imul	 eax, eax, 0
  00331	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00339	0f 2f 44 05 e8	 comiss	 xmm0, DWORD PTR _s$[ebp+eax]
  0033e	76 13		 jbe	 SHORT $LN15@FindNeares
  00340	6a 04		 push	 4
  00342	58		 pop	 eax
  00343	6b c0 00	 imul	 eax, eax, 0
  00346	f3 0f 10 44 05
	e8		 movss	 xmm0, DWORD PTR _s$[ebp+eax]
  0034c	f3 0f 11 45 dc	 movss	 DWORD PTR tv172[ebp], xmm0
  00351	eb 0d		 jmp	 SHORT $LN16@FindNeares
$LN15@FindNeares:
  00353	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0035b	f3 0f 11 45 dc	 movss	 DWORD PTR tv172[ebp], xmm0
$LN16@FindNeares:
  00360	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv172[ebp]
  00365	f3 0f 11 45 d0	 movss	 DWORD PTR tv173[ebp], xmm0
$LN18@FindNeares:
  0036a	6a 04		 push	 4
  0036c	58		 pop	 eax
  0036d	c1 e0 00	 shl	 eax, 0
  00370	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00378	0f 2f 44 05 e8	 comiss	 xmm0, DWORD PTR _s$[ebp+eax]
  0037d	76 13		 jbe	 SHORT $LN19@FindNeares
  0037f	6a 04		 push	 4
  00381	58		 pop	 eax
  00382	c1 e0 00	 shl	 eax, 0
  00385	f3 0f 10 44 05
	e8		 movss	 xmm0, DWORD PTR _s$[ebp+eax]
  0038b	f3 0f 11 45 d8	 movss	 DWORD PTR tv179[ebp], xmm0
  00390	eb 0d		 jmp	 SHORT $LN20@FindNeares
$LN19@FindNeares:
  00392	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0039a	f3 0f 11 45 d8	 movss	 DWORD PTR tv179[ebp], xmm0
$LN20@FindNeares:
  0039f	0f 57 c0	 xorps	 xmm0, xmm0
  003a2	0f 2f 45 d8	 comiss	 xmm0, DWORD PTR tv179[ebp]
  003a6	76 0a		 jbe	 SHORT $LN23@FindNeares
  003a8	0f 57 c0	 xorps	 xmm0, xmm0
  003ab	f3 0f 11 45 cc	 movss	 DWORD PTR tv187[ebp], xmm0
  003b0	eb 3f		 jmp	 SHORT $LN24@FindNeares
$LN23@FindNeares:
  003b2	6a 04		 push	 4
  003b4	58		 pop	 eax
  003b5	c1 e0 00	 shl	 eax, 0
  003b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003c0	0f 2f 44 05 e8	 comiss	 xmm0, DWORD PTR _s$[ebp+eax]
  003c5	76 13		 jbe	 SHORT $LN21@FindNeares
  003c7	6a 04		 push	 4
  003c9	58		 pop	 eax
  003ca	c1 e0 00	 shl	 eax, 0
  003cd	f3 0f 10 44 05
	e8		 movss	 xmm0, DWORD PTR _s$[ebp+eax]
  003d3	f3 0f 11 45 d4	 movss	 DWORD PTR tv186[ebp], xmm0
  003d8	eb 0d		 jmp	 SHORT $LN22@FindNeares
$LN21@FindNeares:
  003da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  003e2	f3 0f 11 45 d4	 movss	 DWORD PTR tv186[ebp], xmm0
$LN22@FindNeares:
  003e7	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR tv186[ebp]
  003ec	f3 0f 11 45 cc	 movss	 DWORD PTR tv187[ebp], xmm0
$LN24@FindNeares:
  003f1	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR tv173[ebp]
  003f6	f3 0f 58 45 cc	 addss	 xmm0, DWORD PTR tv187[ebp]
  003fb	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00403	f3 0f 11 45 e4	 movss	 DWORD PTR _temp$[ebp], xmm0

; 754  : 			PointOnSegAx = (A1x + temp * Lax);

  00408	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _temp$[ebp]
  0040d	f3 0f 59 45 20	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  00412	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  00417	8b 45 58	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  0041a	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 755  : 			PointOnSegAy = (A1y + temp * Lay);

  0041e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _temp$[ebp]
  00423	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR _Lay$[ebp]
  00428	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  0042d	8b 45 5c	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  00430	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 756  : 			PointOnSegAz = (A1z + temp * Laz);

  00434	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _temp$[ebp]
  00439	f3 0f 59 45 28	 mulss	 xmm0, DWORD PTR _Laz$[ebp]
  0043e	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  00443	8b 45 60	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00446	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 757  : 			FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz,

  0044a	8d 45 e4	 lea	 eax, DWORD PTR _temp$[ebp]
  0044d	50		 push	 eax
  0044e	ff 75 6c	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00451	ff 75 68	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00454	ff 75 64	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00457	51		 push	 ecx
  00458	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  0045d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00462	6a 01		 push	 1
  00464	8b 45 60	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00467	51		 push	 ecx
  00468	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0046c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00471	8b 45 5c	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  00474	51		 push	 ecx
  00475	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00479	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047e	8b 45 58	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  00481	51		 push	 ecx
  00482	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00486	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048b	51		 push	 ecx
  0048c	f3 0f 10 45 4c	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00491	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00496	51		 push	 ecx
  00497	f3 0f 10 45 48	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0049c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a1	51		 push	 ecx
  004a2	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  004a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ac	51		 push	 ecx
  004ad	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  004b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b7	51		 push	 ecx
  004b8	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  004bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c2	51		 push	 ecx
  004c3	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  004c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cd	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  004d2	83 c4 3c	 add	 esp, 60			; 0000003cH
$LN9@FindNeares:

; 758  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz, true,
; 759  : 				epsilon_squared, PointOnSegBx, PointOnSegBy, PointOnSegBz, temp);
; 760  : 		}
; 761  : 	}
; 762  : }

  004d5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004d8	33 cd		 xor	 ecx, ebp
  004da	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004df	c9		 leave
  004e0	c3		 ret	 0
?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ENDP ; FindNearestPointOfParallelLineSegments
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z
_TEXT	SEGMENT
_ABz$ = -28						; size = 4
_ABy$ = -24						; size = 4
_ABx$ = -20						; size = 4
tv86 = -16						; size = 4
tv85 = -12						; size = 4
tv82 = -8						; size = 4
_D$ = -4						; size = 4
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_Lx$ = 20						; size = 4
_Ly$ = 24						; size = 4
_Lz$ = 28						; size = 4
_Bx$ = 32						; size = 4
_By$ = 36						; size = 4
_Bz$ = 40						; size = 4
_infinite_line$ = 44					; size = 1
_epsilon_squared$ = 48					; size = 4
_NearestPointX$ = 52					; size = 4
_NearestPointY$ = 56					; size = 4
_NearestPointZ$ = 60					; size = 4
_parameter$ = 64					; size = 4
?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z PROC ; FindNearestPointOnLineSegment, COMDAT

; 630  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 631  : 	// Line/Segment is degenerate --- special case #1
; 632  : 	float D = Lx * Lx + Ly * Ly + Lz * Lz;

  00006	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lx$[ebp]
  0000b	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _Lx$[ebp]
  00010	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _Ly$[ebp]
  00015	f3 0f 59 4d 18	 mulss	 xmm1, DWORD PTR _Ly$[ebp]
  0001a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0001e	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _Lz$[ebp]
  00023	f3 0f 59 4d 1c	 mulss	 xmm1, DWORD PTR _Lz$[ebp]
  00028	f3 0f 58 c1	 addss	 xmm0, xmm1
  0002c	f3 0f 11 45 fc	 movss	 DWORD PTR _D$[ebp], xmm0

; 633  : 	if (D < epsilon_squared)

  00031	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00036	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR _D$[ebp]
  0003a	76 29		 jbe	 SHORT $LN2@FindNeares

; 634  : 	{
; 635  : 		NearestPointX = A1x;

  0003c	8b 45 34	 mov	 eax, DWORD PTR _NearestPointX$[ebp]
  0003f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00044	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 636  : 		NearestPointY = A1y;

  00048	8b 45 38	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  0004b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00050	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 637  : 		NearestPointZ = A1z;

  00054	8b 45 3c	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  00057	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0005c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 638  : 		return;

  00060	e9 2e 01 00 00	 jmp	 $LN1@FindNeares
$LN2@FindNeares:

; 639  : 	}
; 640  : 	
; 641  : 	float ABx = Bx - A1x;

  00065	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _Bx$[ebp]
  0006a	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _A1x$[ebp]
  0006f	f3 0f 11 45 ec	 movss	 DWORD PTR _ABx$[ebp], xmm0

; 642  : 	float ABy = By - A1y;

  00074	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _By$[ebp]
  00079	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _A1y$[ebp]
  0007e	f3 0f 11 45 e8	 movss	 DWORD PTR _ABy$[ebp], xmm0

; 643  : 	float ABz = Bz - A1z;

  00083	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Bz$[ebp]
  00088	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  0008d	f3 0f 11 45 e4	 movss	 DWORD PTR _ABz$[ebp], xmm0

; 644  : 	
; 645  : 	// parameter is computed from Equation (20).
; 646  : 	parameter = (Lx * ABx + Ly * ABy + Lz * ABz) / D;

  00092	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lx$[ebp]
  00097	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _ABx$[ebp]
  0009c	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _Ly$[ebp]
  000a1	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _ABy$[ebp]
  000a6	f3 0f 58 c1	 addss	 xmm0, xmm1
  000aa	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _Lz$[ebp]
  000af	f3 0f 59 4d e4	 mulss	 xmm1, DWORD PTR _ABz$[ebp]
  000b4	f3 0f 58 c1	 addss	 xmm0, xmm1
  000b8	f3 0f 5e 45 fc	 divss	 xmm0, DWORD PTR _D$[ebp]
  000bd	8b 45 40	 mov	 eax, DWORD PTR _parameter$[ebp]
  000c0	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 647  : 	
; 648  : 	if (false == infinite_line) parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  000c4	0f b6 45 2c	 movzx	 eax, BYTE PTR _infinite_line$[ebp]
  000c8	85 c0		 test	 eax, eax
  000ca	75 7f		 jne	 SHORT $LN3@FindNeares
  000cc	8b 45 40	 mov	 eax, DWORD PTR _parameter$[ebp]
  000cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000d7	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  000da	76 0e		 jbe	 SHORT $LN5@FindNeares
  000dc	8b 45 40	 mov	 eax, DWORD PTR _parameter$[ebp]
  000df	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000e3	f3 0f 11 45 f8	 movss	 DWORD PTR tv82[ebp], xmm0
  000e8	eb 0d		 jmp	 SHORT $LN6@FindNeares
$LN5@FindNeares:
  000ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f2	f3 0f 11 45 f8	 movss	 DWORD PTR tv82[ebp], xmm0
$LN6@FindNeares:
  000f7	0f 57 c0	 xorps	 xmm0, xmm0
  000fa	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR tv82[ebp]
  000fe	76 0a		 jbe	 SHORT $LN9@FindNeares
  00100	0f 57 c0	 xorps	 xmm0, xmm0
  00103	f3 0f 11 45 f0	 movss	 DWORD PTR tv86[ebp], xmm0
  00108	eb 35		 jmp	 SHORT $LN10@FindNeares
$LN9@FindNeares:
  0010a	8b 45 40	 mov	 eax, DWORD PTR _parameter$[ebp]
  0010d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00115	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  00118	76 0e		 jbe	 SHORT $LN7@FindNeares
  0011a	8b 45 40	 mov	 eax, DWORD PTR _parameter$[ebp]
  0011d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00121	f3 0f 11 45 f4	 movss	 DWORD PTR tv85[ebp], xmm0
  00126	eb 0d		 jmp	 SHORT $LN8@FindNeares
$LN7@FindNeares:
  00128	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00130	f3 0f 11 45 f4	 movss	 DWORD PTR tv85[ebp], xmm0
$LN8@FindNeares:
  00135	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv85[ebp]
  0013a	f3 0f 11 45 f0	 movss	 DWORD PTR tv86[ebp], xmm0
$LN10@FindNeares:
  0013f	8b 45 40	 mov	 eax, DWORD PTR _parameter$[ebp]
  00142	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR tv86[ebp]
  00147	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN3@FindNeares:

; 649  : 	
; 650  : 	NearestPointX = A1x + parameter * Lx;

  0014b	8b 45 40	 mov	 eax, DWORD PTR _parameter$[ebp]
  0014e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00152	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _Lx$[ebp]
  00157	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  0015c	8b 45 34	 mov	 eax, DWORD PTR _NearestPointX$[ebp]
  0015f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 651  : 	NearestPointY = A1y + parameter * Ly;

  00163	8b 45 40	 mov	 eax, DWORD PTR _parameter$[ebp]
  00166	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0016a	f3 0f 59 45 18	 mulss	 xmm0, DWORD PTR _Ly$[ebp]
  0016f	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  00174	8b 45 38	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  00177	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 652  : 	NearestPointZ = A1z + parameter * Lz;

  0017b	8b 45 40	 mov	 eax, DWORD PTR _parameter$[ebp]
  0017e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00182	f3 0f 59 45 1c	 mulss	 xmm0, DWORD PTR _Lz$[ebp]
  00187	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  0018c	8b 45 3c	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  0018f	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN1@FindNeares:

; 653  : 	return;
; 654  : }

  00193	c9		 leave
  00194	c3		 ret	 0
?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ENDP ; FindNearestPointOnLineSegment
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z
_TEXT	SEGMENT
_rb$1 = -80						; size = 4
_ra$2 = -76						; size = 4
_ABz$3 = -72						; size = 4
_ABy$4 = -68						; size = 4
_ABx$5 = -64						; size = 4
tv192 = -60						; size = 4
_L22$ = -56						; size = 4
_temp$ = -52						; size = 4
_epsilon_squared$ = -48					; size = 4
_L11$ = -44						; size = 4
_L12$6 = -40						; size = 4
_DetL$7 = -36						; size = 4
_s$8 = -32						; size = 4
_t$9 = -28						; size = 4
_Lax$ = -24						; size = 4
_Lay$ = -20						; size = 4
_Laz$ = -16						; size = 4
_Lbx$ = -12						; size = 4
_Lby$ = -8						; size = 4
_Lbz$ = -4						; size = 4
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_B2x$ = 44						; size = 4
_B2y$ = 48						; size = 4
_B2z$ = 52						; size = 4
_infinite_lines$ = 56					; size = 1
_epsilon$ = 60						; size = 4
_PointOnSegAx$ = 64					; size = 4
_PointOnSegAy$ = 68					; size = 4
_PointOnSegAz$ = 72					; size = 4
_PointOnSegBx$ = 76					; size = 4
_PointOnSegBy$ = 80					; size = 4
_PointOnSegBz$ = 84					; size = 4
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z PROC ; IntersectLineSegments, COMDAT

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H

; 322  : 	float temp = 0.f;

  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	f3 0f 11 45 cc	 movss	 DWORD PTR _temp$[ebp], xmm0

; 323  : 	float epsilon_squared = epsilon * epsilon;

  0000e	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00013	f3 0f 59 45 3c	 mulss	 xmm0, DWORD PTR _epsilon$[ebp]
  00018	f3 0f 11 45 d0	 movss	 DWORD PTR _epsilon_squared$[ebp], xmm0

; 324  : 	
; 325  : 	// Compute parameters from Equations (1) and (2) in the text
; 326  : 	float Lax = A2x - A1x;

  0001d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  00022	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _A1x$[ebp]
  00027	f3 0f 11 45 e8	 movss	 DWORD PTR _Lax$[ebp], xmm0

; 327  : 	float Lay = A2y - A1y;

  0002c	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  00031	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _A1y$[ebp]
  00036	f3 0f 11 45 ec	 movss	 DWORD PTR _Lay$[ebp], xmm0

; 328  : 	float Laz = A2z - A1z;

  0003b	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  00040	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  00045	f3 0f 11 45 f0	 movss	 DWORD PTR _Laz$[ebp], xmm0

; 329  : 	float Lbx = B2x - B1x;

  0004a	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  0004f	f3 0f 5c 45 20	 subss	 xmm0, DWORD PTR _B1x$[ebp]
  00054	f3 0f 11 45 f4	 movss	 DWORD PTR _Lbx$[ebp], xmm0

; 330  : 	float Lby = B2y - B1y;

  00059	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  0005e	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR _B1y$[ebp]
  00063	f3 0f 11 45 f8	 movss	 DWORD PTR _Lby$[ebp], xmm0

; 331  : 	float Lbz = B2z - B1z;

  00068	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  0006d	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _B1z$[ebp]
  00072	f3 0f 11 45 fc	 movss	 DWORD PTR _Lbz$[ebp], xmm0

; 332  : 	// From Equation (15)
; 333  : 	float L11 =  (Lax * Lax) + (Lay * Lay) + (Laz * Laz);

  00077	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  0007c	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  00081	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _Lay$[ebp]
  00086	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _Lay$[ebp]
  0008b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0008f	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _Laz$[ebp]
  00094	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _Laz$[ebp]
  00099	f3 0f 58 c1	 addss	 xmm0, xmm1
  0009d	f3 0f 11 45 d4	 movss	 DWORD PTR _L11$[ebp], xmm0

; 334  : 	float L22 =  (Lbx * Lbx) + (Lby * Lby) + (Lbz * Lbz);

  000a2	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  000a7	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _Lbx$[ebp]
  000ac	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _Lby$[ebp]
  000b1	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _Lby$[ebp]
  000b6	f3 0f 58 c1	 addss	 xmm0, xmm1
  000ba	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _Lbz$[ebp]
  000bf	f3 0f 59 4d fc	 mulss	 xmm1, DWORD PTR _Lbz$[ebp]
  000c4	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c8	f3 0f 11 45 c8	 movss	 DWORD PTR _L22$[ebp], xmm0

; 335  : 	
; 336  : 	// Line/Segment A is degenerate ---- Special Case #1
; 337  : 	if (L11 < epsilon_squared)

  000cd	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  000d2	0f 2f 45 d4	 comiss	 xmm0, DWORD PTR _L11$[ebp]
  000d6	0f 86 af 00 00
	00		 jbe	 $LN2@IntersectL

; 338  : 	{
; 339  : 		PointOnSegAx = A1x;

  000dc	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  000df	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  000e4	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 340  : 		PointOnSegAy = A1y;

  000e8	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  000eb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  000f0	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 341  : 		PointOnSegAz = A1z;

  000f4	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  000f7	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  000fc	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 342  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, A1x, A1y, A1z,

  00100	8d 45 cc	 lea	 eax, DWORD PTR _temp$[ebp]
  00103	50		 push	 eax
  00104	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00107	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  0010a	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  0010d	51		 push	 ecx
  0010e	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  0011b	51		 push	 ecx
  0011c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00126	51		 push	 ecx
  00127	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  0012c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00131	51		 push	 ecx
  00132	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	51		 push	 ecx
  0013d	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00142	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00147	51		 push	 ecx
  00148	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0014d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00152	51		 push	 ecx
  00153	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	51		 push	 ecx
  0015e	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	51		 push	 ecx
  00169	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0016e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00173	51		 push	 ecx
  00174	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00183	83 c4 3c	 add	 esp, 60			; 0000003cH

; 343  : 			infinite_lines, epsilon, PointOnSegBx, PointOnSegBy,
; 344  : 			PointOnSegBz, temp);
; 345  : 	}

  00186	e9 7f 04 00 00	 jmp	 $LN8@IntersectL
$LN2@IntersectL:

; 346  : 	// Line/Segment B is degenerate ---- Special Case #1
; 347  : 	else if (L22 < epsilon_squared)

  0018b	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00190	0f 2f 45 c8	 comiss	 xmm0, DWORD PTR _L22$[ebp]
  00194	0f 86 af 00 00
	00		 jbe	 $LN4@IntersectL

; 348  : 	{
; 349  : 		PointOnSegBx = B1x;

  0019a	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  0019d	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  001a2	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 350  : 		PointOnSegBy = B1y;

  001a6	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  001a9	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  001ae	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 351  : 		PointOnSegBz = B1z;

  001b2	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  001b5	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  001ba	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 352  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,

  001be	8d 45 cc	 lea	 eax, DWORD PTR _temp$[ebp]
  001c1	50		 push	 eax
  001c2	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  001c5	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  001c8	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  001cb	51		 push	 ecx
  001cc	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  001d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d6	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  001d9	51		 push	 ecx
  001da	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  001df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e4	51		 push	 ecx
  001e5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	51		 push	 ecx
  001f0	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  001f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fa	51		 push	 ecx
  001fb	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  00200	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00205	51		 push	 ecx
  00206	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  0020b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00210	51		 push	 ecx
  00211	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	51		 push	 ecx
  0021c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00226	51		 push	 ecx
  00227	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  0022c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00231	51		 push	 ecx
  00232	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023c	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00241	83 c4 3c	 add	 esp, 60			; 0000003cH

; 353  : 			infinite_lines, epsilon, PointOnSegAx, PointOnSegAy,
; 354  : 			PointOnSegAz, temp);
; 355  : 	}

  00244	e9 c1 03 00 00	 jmp	 $LN8@IntersectL
$LN4@IntersectL:

; 356  : 	// Neither line/segment is degenerate
; 357  : 	else
; 358  : 	{
; 359  : 		// Compute more parameters from Equation (3) in the text.
; 360  : 		float ABx = B1x - A1x;

  00249	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  0024e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _A1x$[ebp]
  00253	f3 0f 11 45 c0	 movss	 DWORD PTR _ABx$5[ebp], xmm0

; 361  : 		float ABy = B1y - A1y;

  00258	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0025d	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _A1y$[ebp]
  00262	f3 0f 11 45 bc	 movss	 DWORD PTR _ABy$4[ebp], xmm0

; 362  : 		float ABz = B1z - A1z;

  00267	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0026c	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  00271	f3 0f 11 45 b8	 movss	 DWORD PTR _ABz$3[ebp], xmm0

; 363  : 		
; 364  : 		// and from Equation (15).
; 365  : 		float L12 = -(Lax * Lbx) - (Lay * Lby) - (Laz * Lbz);

  00276	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  0027b	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _Lbx$[ebp]
  00280	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00287	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _Lay$[ebp]
  0028c	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _Lby$[ebp]
  00291	f3 0f 5c c1	 subss	 xmm0, xmm1
  00295	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _Laz$[ebp]
  0029a	f3 0f 59 4d fc	 mulss	 xmm1, DWORD PTR _Lbz$[ebp]
  0029f	f3 0f 5c c1	 subss	 xmm0, xmm1
  002a3	f3 0f 11 45 d8	 movss	 DWORD PTR _L12$6[ebp], xmm0

; 366  : 		
; 367  : 		float DetL = L11 * L22 - L12 * L12;

  002a8	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _L11$[ebp]
  002ad	f3 0f 59 45 c8	 mulss	 xmm0, DWORD PTR _L22$[ebp]
  002b2	f3 0f 10 4d d8	 movss	 xmm1, DWORD PTR _L12$6[ebp]
  002b7	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _L12$6[ebp]
  002bc	f3 0f 5c c1	 subss	 xmm0, xmm1
  002c0	f3 0f 11 45 dc	 movss	 DWORD PTR _DetL$7[ebp], xmm0

; 368  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 369  : 		if (FABS(DetL) < epsilon)

  002c5	0f 57 c0	 xorps	 xmm0, xmm0
  002c8	0f 2f 45 dc	 comiss	 xmm0, DWORD PTR _DetL$7[ebp]
  002cc	76 13		 jbe	 SHORT $LN12@IntersectL
  002ce	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _DetL$7[ebp]
  002d3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002da	f3 0f 11 45 c4	 movss	 DWORD PTR tv192[ebp], xmm0
  002df	eb 0a		 jmp	 SHORT $LN13@IntersectL
$LN12@IntersectL:
  002e1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _DetL$7[ebp]
  002e6	f3 0f 11 45 c4	 movss	 DWORD PTR tv192[ebp], xmm0
$LN13@IntersectL:
  002eb	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  002f0	0f 2f 45 c4	 comiss	 xmm0, DWORD PTR tv192[ebp]
  002f4	0f 86 f3 00 00
	00		 jbe	 $LN6@IntersectL

; 370  : 		{
; 371  : 			FindNearestPointOfParallelLineSegments(A1x, A1y, A1z, A2x, A2y, A2z,

  002fa	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  002fd	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00300	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00303	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00306	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  00309	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  0030c	51		 push	 ecx
  0030d	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00312	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00317	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  0031a	51		 push	 ecx
  0031b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00320	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00325	51		 push	 ecx
  00326	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0032b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00330	51		 push	 ecx
  00331	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033b	51		 push	 ecx
  0033c	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  00341	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00346	51		 push	 ecx
  00347	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  0034c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00351	51		 push	 ecx
  00352	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  00357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035c	51		 push	 ecx
  0035d	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00362	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00367	51		 push	 ecx
  00368	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0036d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00372	51		 push	 ecx
  00373	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00378	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037d	51		 push	 ecx
  0037e	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  00383	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00388	51		 push	 ecx
  00389	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	51		 push	 ecx
  00394	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	51		 push	 ecx
  0039f	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  003a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a9	51		 push	 ecx
  003aa	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  003af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b4	51		 push	 ecx
  003b5	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  003ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bf	51		 push	 ecx
  003c0	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	51		 push	 ecx
  003cb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	51		 push	 ecx
  003d6	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  003db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e0	e8 00 00 00 00	 call	 ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
  003e5	83 c4 68	 add	 esp, 104		; 00000068H

; 372  : 				Lax, Lay, Laz,
; 373  : 				B1x, B1y, B1z, B2x, B2y, B2z,
; 374  : 				Lbx, Lby, Lbz,
; 375  : 				infinite_lines, epsilon,
; 376  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 377  : 				PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 378  : 		}

  003e8	e9 1d 02 00 00	 jmp	 $LN8@IntersectL
$LN6@IntersectL:

; 379  : 		// The general case
; 380  : 		else
; 381  : 		{
; 382  : 			// from Equation (15)
; 383  : 			float ra = Lax * ABx + Lay * ABy + Laz * ABz;

  003ed	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  003f2	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _ABx$5[ebp]
  003f7	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _Lay$[ebp]
  003fc	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _ABy$4[ebp]
  00401	f3 0f 58 c1	 addss	 xmm0, xmm1
  00405	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _Laz$[ebp]
  0040a	f3 0f 59 4d b8	 mulss	 xmm1, DWORD PTR _ABz$3[ebp]
  0040f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00413	f3 0f 11 45 b4	 movss	 DWORD PTR _ra$2[ebp], xmm0

; 384  : 			float rb = -Lbx * ABx - Lby * ABy - Lbz * ABz;

  00418	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  0041d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00424	f3 0f 59 45 c0	 mulss	 xmm0, DWORD PTR _ABx$5[ebp]
  00429	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _Lby$[ebp]
  0042e	f3 0f 59 4d bc	 mulss	 xmm1, DWORD PTR _ABy$4[ebp]
  00433	f3 0f 5c c1	 subss	 xmm0, xmm1
  00437	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _Lbz$[ebp]
  0043c	f3 0f 59 4d b8	 mulss	 xmm1, DWORD PTR _ABz$3[ebp]
  00441	f3 0f 5c c1	 subss	 xmm0, xmm1
  00445	f3 0f 11 45 b0	 movss	 DWORD PTR _rb$1[ebp], xmm0

; 385  : 			
; 386  : 			float t = (L11 * rb - ra * L12)/DetL; // Equation (12)

  0044a	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _L11$[ebp]
  0044f	f3 0f 59 45 b0	 mulss	 xmm0, DWORD PTR _rb$1[ebp]
  00454	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _ra$2[ebp]
  00459	f3 0f 59 4d d8	 mulss	 xmm1, DWORD PTR _L12$6[ebp]
  0045e	f3 0f 5c c1	 subss	 xmm0, xmm1
  00462	f3 0f 5e 45 dc	 divss	 xmm0, DWORD PTR _DetL$7[ebp]
  00467	f3 0f 11 45 e4	 movss	 DWORD PTR _t$9[ebp], xmm0

; 387  : 			
; 388  : #ifdef USE_CRAMERS_RULE
; 389  : 			float s = (L22 * ra - rb * L12)/DetL;
; 390  : #else
; 391  : 			float s = (ra-L12*t)/L11;             // Equation (13)

  0046c	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _L12$6[ebp]
  00471	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _t$9[ebp]
  00476	f3 0f 10 4d b4	 movss	 xmm1, DWORD PTR _ra$2[ebp]
  0047b	f3 0f 5c c8	 subss	 xmm1, xmm0
  0047f	f3 0f 5e 4d d4	 divss	 xmm1, DWORD PTR _L11$[ebp]
  00484	f3 0f 11 4d e0	 movss	 DWORD PTR _s$8[ebp], xmm1

; 392  : #endif // USE_CRAMERS_RULE
; 393  : 			
; 394  : #ifdef CHECK_ANSWERS
; 395  : 			float check_ra = s*L11 + t*L12;
; 396  : 			float check_rb = s*L12 + t*L22;
; 397  : 			assert(FABS(check_ra-ra) < epsilon);
; 398  : 			assert(FABS(check_rb-rb) < epsilon);
; 399  : #endif // CHECK_ANSWERS
; 400  : 			
; 401  : 			// if we are dealing with infinite lines or if parameters s and t both
; 402  : 			// lie in the range [0,1] then just compute the points using Equations
; 403  : 			// (1) and (2) from the text.
; 404  : 			PointOnSegAx = (A1x + s * Lax);

  00489	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _s$8[ebp]
  0048e	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  00493	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  00498	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  0049b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 405  : 			PointOnSegAy = (A1y + s * Lay);

  0049f	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _s$8[ebp]
  004a4	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lay$[ebp]
  004a9	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  004ae	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  004b1	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 406  : 			PointOnSegAz = (A1z + s * Laz);

  004b5	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _s$8[ebp]
  004ba	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _Laz$[ebp]
  004bf	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  004c4	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  004c7	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 407  : 			PointOnSegBx = (B1x + t * Lbx);

  004cb	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _t$9[ebp]
  004d0	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _Lbx$[ebp]
  004d5	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  004da	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  004dd	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 408  : 			PointOnSegBy = (B1y + t * Lby);

  004e1	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _t$9[ebp]
  004e6	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _Lby$[ebp]
  004eb	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  004f0	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  004f3	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 409  : 			PointOnSegBz = (B1z + t * Lbz);

  004f7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _t$9[ebp]
  004fc	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$[ebp]
  00501	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00506	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  00509	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 410  : 			// otherwise, at least one of s and t is outside of [0,1] and we have to
; 411  : 			// handle this case.
; 412  : 			if (false == infinite_lines && (OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  0050d	0f b6 45 38	 movzx	 eax, BYTE PTR _infinite_lines$[ebp]
  00511	85 c0		 test	 eax, eax
  00513	0f 85 f1 00 00
	00		 jne	 $LN8@IntersectL
  00519	0f 57 c0	 xorps	 xmm0, xmm0
  0051c	0f 2f 45 e0	 comiss	 xmm0, DWORD PTR _s$8[ebp]
  00520	77 29		 ja	 SHORT $LN10@IntersectL
  00522	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _s$8[ebp]
  00527	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0052e	77 1b		 ja	 SHORT $LN10@IntersectL
  00530	0f 57 c0	 xorps	 xmm0, xmm0
  00533	0f 2f 45 e4	 comiss	 xmm0, DWORD PTR _t$9[ebp]
  00537	77 12		 ja	 SHORT $LN10@IntersectL
  00539	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _t$9[ebp]
  0053e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00545	0f 86 bf 00 00
	00		 jbe	 $LN8@IntersectL
$LN10@IntersectL:

; 413  : 			{
; 414  : 				AdjustNearestPoints(A1x, A1y, A1z, Lax, Lay, Laz,

  0054b	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  0054e	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00551	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00554	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00557	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  0055a	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  0055d	51		 push	 ecx
  0055e	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _t$9[ebp]
  00563	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00568	51		 push	 ecx
  00569	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _s$8[ebp]
  0056e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00573	51		 push	 ecx
  00574	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	51		 push	 ecx
  0057f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	51		 push	 ecx
  0058a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0058f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00594	51		 push	 ecx
  00595	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  0059a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059f	51		 push	 ecx
  005a0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  005a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005aa	51		 push	 ecx
  005ab	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  005b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b5	51		 push	 ecx
  005b6	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  005bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c0	51		 push	 ecx
  005c1	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  005c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cb	51		 push	 ecx
  005cc	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  005d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d6	51		 push	 ecx
  005d7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  005dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e1	51		 push	 ecx
  005e2	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  005e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ec	51		 push	 ecx
  005ed	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	51		 push	 ecx
  005f8	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  005fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00602	e8 00 00 00 00	 call	 ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
  00607	83 c4 54	 add	 esp, 84			; 00000054H
$LN8@IntersectL:

; 415  : 					B1x, B1y, B1z, Lbx, Lby, Lbz,
; 416  : 					epsilon, s, t,
; 417  : 					PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 418  : 					PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 	
; 423  : }

  0060a	c9		 leave
  0060b	c3		 ret	 0
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z
_TEXT	SEGMENT
_rb$1 = -96						; size = 4
tv295 = -92						; size = 4
tv291 = -88						; size = 4
tv288 = -84						; size = 4
_ra$2 = -80						; size = 4
_ABz$3 = -76						; size = 4
_ABy$4 = -72						; size = 4
_ABx$5 = -68						; size = 4
tv192 = -64						; size = 4
_L22$ = -60						; size = 4
_temp$ = -56						; size = 4
_epsilon_squared$ = -52					; size = 4
_L11$ = -48						; size = 4
_L12$6 = -44						; size = 4
_DetL$7 = -40						; size = 4
_s$8 = -36						; size = 4
_t$9 = -32						; size = 4
_Lax$ = -28						; size = 4
_Lay$ = -24						; size = 4
_Laz$ = -20						; size = 4
_Lbx$ = -16						; size = 4
_Lby$ = -12						; size = 4
_Lbz$ = -8						; size = 4
tv298 = -1						; size = 1
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_B2x$ = 44						; size = 4
_B2y$ = 48						; size = 4
_B2z$ = 52						; size = 4
_infinite_lines$ = 56					; size = 1
_epsilon$ = 60						; size = 4
_PointOnSegAx$ = 64					; size = 4
_PointOnSegAy$ = 68					; size = 4
_PointOnSegAz$ = 72					; size = 4
_PointOnSegBx$ = 76					; size = 4
_PointOnSegBy$ = 80					; size = 4
_PointOnSegBz$ = 84					; size = 4
_NearestPointX$ = 88					; size = 4
_NearestPointY$ = 92					; size = 4
_NearestPointZ$ = 96					; size = 4
_NearestVectorX$ = 100					; size = 4
_NearestVectorY$ = 104					; size = 4
_NearestVectorZ$ = 108					; size = 4
_true_intersection$ = 112				; size = 4
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z PROC ; IntersectLineSegments, COMDAT

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H

; 481  : 	float temp = 0.f;

  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	f3 0f 11 45 c8	 movss	 DWORD PTR _temp$[ebp], xmm0

; 482  : 	float epsilon_squared = epsilon * epsilon;

  0000e	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00013	f3 0f 59 45 3c	 mulss	 xmm0, DWORD PTR _epsilon$[ebp]
  00018	f3 0f 11 45 cc	 movss	 DWORD PTR _epsilon_squared$[ebp], xmm0

; 483  : 	
; 484  : 	// Compute parameters from Equations (1) and (2) in the text
; 485  : 	float Lax = A2x - A1x;

  0001d	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  00022	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _A1x$[ebp]
  00027	f3 0f 11 45 e4	 movss	 DWORD PTR _Lax$[ebp], xmm0

; 486  : 	float Lay = A2y - A1y;

  0002c	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  00031	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _A1y$[ebp]
  00036	f3 0f 11 45 e8	 movss	 DWORD PTR _Lay$[ebp], xmm0

; 487  : 	float Laz = A2z - A1z;

  0003b	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  00040	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  00045	f3 0f 11 45 ec	 movss	 DWORD PTR _Laz$[ebp], xmm0

; 488  : 	float Lbx = B2x - B1x;

  0004a	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  0004f	f3 0f 5c 45 20	 subss	 xmm0, DWORD PTR _B1x$[ebp]
  00054	f3 0f 11 45 f0	 movss	 DWORD PTR _Lbx$[ebp], xmm0

; 489  : 	float Lby = B2y - B1y;

  00059	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  0005e	f3 0f 5c 45 24	 subss	 xmm0, DWORD PTR _B1y$[ebp]
  00063	f3 0f 11 45 f4	 movss	 DWORD PTR _Lby$[ebp], xmm0

; 490  : 	float Lbz = B2z - B1z;

  00068	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  0006d	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _B1z$[ebp]
  00072	f3 0f 11 45 f8	 movss	 DWORD PTR _Lbz$[ebp], xmm0

; 491  : 	// From Equation (15)
; 492  : 	float L11 =  (Lax * Lax) + (Lay * Lay) + (Laz * Laz);

  00077	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  0007c	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  00081	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Lay$[ebp]
  00086	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lay$[ebp]
  0008b	f3 0f 58 c1	 addss	 xmm0, xmm1
  0008f	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _Laz$[ebp]
  00094	f3 0f 59 4d ec	 mulss	 xmm1, DWORD PTR _Laz$[ebp]
  00099	f3 0f 58 c1	 addss	 xmm0, xmm1
  0009d	f3 0f 11 45 d0	 movss	 DWORD PTR _L11$[ebp], xmm0

; 493  : 	float L22 =  (Lbx * Lbx) + (Lby * Lby) + (Lbz * Lbz);

  000a2	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  000a7	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _Lbx$[ebp]
  000ac	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _Lby$[ebp]
  000b1	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _Lby$[ebp]
  000b6	f3 0f 58 c1	 addss	 xmm0, xmm1
  000ba	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _Lbz$[ebp]
  000bf	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _Lbz$[ebp]
  000c4	f3 0f 58 c1	 addss	 xmm0, xmm1
  000c8	f3 0f 11 45 c4	 movss	 DWORD PTR _L22$[ebp], xmm0

; 494  : 	
; 495  : 	// Line/Segment A is degenerate ---- Special Case #1
; 496  : 	if (L11 < epsilon_squared)

  000cd	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  000d2	0f 2f 45 d0	 comiss	 xmm0, DWORD PTR _L11$[ebp]
  000d6	0f 86 af 00 00
	00		 jbe	 $LN2@IntersectL

; 497  : 	{
; 498  : 		PointOnSegAx = A1x;

  000dc	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  000df	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  000e4	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 499  : 		PointOnSegAy = A1y;

  000e8	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  000eb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  000f0	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 500  : 		PointOnSegAz = A1z;

  000f4	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  000f7	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  000fc	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 501  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, A1x, A1y, A1z,

  00100	8d 45 c8	 lea	 eax, DWORD PTR _temp$[ebp]
  00103	50		 push	 eax
  00104	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00107	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  0010a	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  0010d	51		 push	 ecx
  0010e	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00113	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00118	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  0011b	51		 push	 ecx
  0011c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00121	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00126	51		 push	 ecx
  00127	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  0012c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00131	51		 push	 ecx
  00132	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	51		 push	 ecx
  0013d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00142	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00147	51		 push	 ecx
  00148	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0014d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00152	51		 push	 ecx
  00153	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	51		 push	 ecx
  0015e	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	51		 push	 ecx
  00169	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0016e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00173	51		 push	 ecx
  00174	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00179	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017e	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00183	83 c4 3c	 add	 esp, 60			; 0000003cH

; 502  : 			infinite_lines, epsilon, PointOnSegBx, PointOnSegBy,
; 503  : 			PointOnSegBz, temp);
; 504  : 	}

  00186	e9 7f 04 00 00	 jmp	 $LN8@IntersectL
$LN2@IntersectL:

; 505  : 	// Line/Segment B is degenerate ---- Special Case #1
; 506  : 	else if (L22 < epsilon_squared)

  0018b	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00190	0f 2f 45 c4	 comiss	 xmm0, DWORD PTR _L22$[ebp]
  00194	0f 86 af 00 00
	00		 jbe	 $LN4@IntersectL

; 507  : 	{
; 508  : 		PointOnSegBx = B1x;

  0019a	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  0019d	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  001a2	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 509  : 		PointOnSegBy = B1y;

  001a6	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  001a9	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  001ae	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 510  : 		PointOnSegBz = B1z;

  001b2	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  001b5	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  001ba	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 511  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,

  001be	8d 45 c8	 lea	 eax, DWORD PTR _temp$[ebp]
  001c1	50		 push	 eax
  001c2	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  001c5	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  001c8	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  001cb	51		 push	 ecx
  001cc	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  001d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d6	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  001d9	51		 push	 ecx
  001da	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  001df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e4	51		 push	 ecx
  001e5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  001ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ef	51		 push	 ecx
  001f0	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  001f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fa	51		 push	 ecx
  001fb	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  00200	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00205	51		 push	 ecx
  00206	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  0020b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00210	51		 push	 ecx
  00211	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	51		 push	 ecx
  0021c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00221	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00226	51		 push	 ecx
  00227	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  0022c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00231	51		 push	 ecx
  00232	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023c	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00241	83 c4 3c	 add	 esp, 60			; 0000003cH

; 512  : 			infinite_lines, epsilon, PointOnSegAx, PointOnSegAy,
; 513  : 			PointOnSegAz, temp);
; 514  : 	}

  00244	e9 c1 03 00 00	 jmp	 $LN8@IntersectL
$LN4@IntersectL:

; 515  : 	// Neither line/segment is degenerate
; 516  : 	else
; 517  : 	{
; 518  : 		// Compute more parameters from Equation (3) in the text.
; 519  : 		float ABx = B1x - A1x;

  00249	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  0024e	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _A1x$[ebp]
  00253	f3 0f 11 45 bc	 movss	 DWORD PTR _ABx$5[ebp], xmm0

; 520  : 		float ABy = B1y - A1y;

  00258	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0025d	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _A1y$[ebp]
  00262	f3 0f 11 45 b8	 movss	 DWORD PTR _ABy$4[ebp], xmm0

; 521  : 		float ABz = B1z - A1z;

  00267	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0026c	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  00271	f3 0f 11 45 b4	 movss	 DWORD PTR _ABz$3[ebp], xmm0

; 522  : 		
; 523  : 		// and from Equation (15).
; 524  : 		float L12 = -(Lax * Lbx) - (Lay * Lby) - (Laz * Lbz);

  00276	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  0027b	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _Lbx$[ebp]
  00280	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00287	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Lay$[ebp]
  0028c	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _Lby$[ebp]
  00291	f3 0f 5c c1	 subss	 xmm0, xmm1
  00295	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _Laz$[ebp]
  0029a	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _Lbz$[ebp]
  0029f	f3 0f 5c c1	 subss	 xmm0, xmm1
  002a3	f3 0f 11 45 d4	 movss	 DWORD PTR _L12$6[ebp], xmm0

; 525  : 		
; 526  : 		float DetL = L11 * L22 - L12 * L12;

  002a8	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _L11$[ebp]
  002ad	f3 0f 59 45 c4	 mulss	 xmm0, DWORD PTR _L22$[ebp]
  002b2	f3 0f 10 4d d4	 movss	 xmm1, DWORD PTR _L12$6[ebp]
  002b7	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _L12$6[ebp]
  002bc	f3 0f 5c c1	 subss	 xmm0, xmm1
  002c0	f3 0f 11 45 d8	 movss	 DWORD PTR _DetL$7[ebp], xmm0

; 527  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 528  : 		if (FABS(DetL) < epsilon)

  002c5	0f 57 c0	 xorps	 xmm0, xmm0
  002c8	0f 2f 45 d8	 comiss	 xmm0, DWORD PTR _DetL$7[ebp]
  002cc	76 13		 jbe	 SHORT $LN12@IntersectL
  002ce	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _DetL$7[ebp]
  002d3	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002da	f3 0f 11 45 c0	 movss	 DWORD PTR tv192[ebp], xmm0
  002df	eb 0a		 jmp	 SHORT $LN13@IntersectL
$LN12@IntersectL:
  002e1	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _DetL$7[ebp]
  002e6	f3 0f 11 45 c0	 movss	 DWORD PTR tv192[ebp], xmm0
$LN13@IntersectL:
  002eb	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  002f0	0f 2f 45 c0	 comiss	 xmm0, DWORD PTR tv192[ebp]
  002f4	0f 86 f3 00 00
	00		 jbe	 $LN6@IntersectL

; 529  : 		{
; 530  : 			FindNearestPointOfParallelLineSegments(A1x, A1y, A1z, A2x, A2y, A2z,

  002fa	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  002fd	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00300	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00303	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00306	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  00309	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  0030c	51		 push	 ecx
  0030d	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00312	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00317	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  0031a	51		 push	 ecx
  0031b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00320	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00325	51		 push	 ecx
  00326	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0032b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00330	51		 push	 ecx
  00331	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033b	51		 push	 ecx
  0033c	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  00341	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00346	51		 push	 ecx
  00347	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  0034c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00351	51		 push	 ecx
  00352	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  00357	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035c	51		 push	 ecx
  0035d	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00362	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00367	51		 push	 ecx
  00368	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0036d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00372	51		 push	 ecx
  00373	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00378	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037d	51		 push	 ecx
  0037e	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  00383	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00388	51		 push	 ecx
  00389	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  0038e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00393	51		 push	 ecx
  00394	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  00399	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039e	51		 push	 ecx
  0039f	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  003a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a9	51		 push	 ecx
  003aa	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  003af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b4	51		 push	 ecx
  003b5	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  003ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bf	51		 push	 ecx
  003c0	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	51		 push	 ecx
  003cb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	51		 push	 ecx
  003d6	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  003db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e0	e8 00 00 00 00	 call	 ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
  003e5	83 c4 68	 add	 esp, 104		; 00000068H

; 531  : 				Lax, Lay, Laz,
; 532  : 				B1x, B1y, B1z, B2x, B2y, B2z,
; 533  : 				Lbx, Lby, Lbz,
; 534  : 				infinite_lines, epsilon,
; 535  : 				PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 536  : 				PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 537  : 		}

  003e8	e9 1d 02 00 00	 jmp	 $LN8@IntersectL
$LN6@IntersectL:

; 538  : 		// The general case
; 539  : 		else
; 540  : 		{
; 541  : 			// from Equation (15)
; 542  : 			float ra = Lax * ABx + Lay * ABy + Laz * ABz;

  003ed	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  003f2	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _ABx$5[ebp]
  003f7	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Lay$[ebp]
  003fc	f3 0f 59 4d b8	 mulss	 xmm1, DWORD PTR _ABy$4[ebp]
  00401	f3 0f 58 c1	 addss	 xmm0, xmm1
  00405	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _Laz$[ebp]
  0040a	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _ABz$3[ebp]
  0040f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00413	f3 0f 11 45 b0	 movss	 DWORD PTR _ra$2[ebp], xmm0

; 543  : 			float rb = -Lbx * ABx - Lby * ABy - Lbz * ABz;

  00418	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  0041d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00424	f3 0f 59 45 bc	 mulss	 xmm0, DWORD PTR _ABx$5[ebp]
  00429	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _Lby$[ebp]
  0042e	f3 0f 59 4d b8	 mulss	 xmm1, DWORD PTR _ABy$4[ebp]
  00433	f3 0f 5c c1	 subss	 xmm0, xmm1
  00437	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _Lbz$[ebp]
  0043c	f3 0f 59 4d b4	 mulss	 xmm1, DWORD PTR _ABz$3[ebp]
  00441	f3 0f 5c c1	 subss	 xmm0, xmm1
  00445	f3 0f 11 45 a0	 movss	 DWORD PTR _rb$1[ebp], xmm0

; 544  : 			
; 545  : 			float t = (L11 * rb - ra * L12)/DetL; // Equation (12)

  0044a	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _L11$[ebp]
  0044f	f3 0f 59 45 a0	 mulss	 xmm0, DWORD PTR _rb$1[ebp]
  00454	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _ra$2[ebp]
  00459	f3 0f 59 4d d4	 mulss	 xmm1, DWORD PTR _L12$6[ebp]
  0045e	f3 0f 5c c1	 subss	 xmm0, xmm1
  00462	f3 0f 5e 45 d8	 divss	 xmm0, DWORD PTR _DetL$7[ebp]
  00467	f3 0f 11 45 e0	 movss	 DWORD PTR _t$9[ebp], xmm0

; 546  : 			
; 547  : #ifdef USE_CRAMERS_RULE
; 548  : 			float s = (L22 * ra - rb * L12)/DetL;
; 549  : #else
; 550  : 			float s = (ra-L12*t)/L11;             // Equation (13)

  0046c	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _L12$6[ebp]
  00471	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _t$9[ebp]
  00476	f3 0f 10 4d b0	 movss	 xmm1, DWORD PTR _ra$2[ebp]
  0047b	f3 0f 5c c8	 subss	 xmm1, xmm0
  0047f	f3 0f 5e 4d d0	 divss	 xmm1, DWORD PTR _L11$[ebp]
  00484	f3 0f 11 4d dc	 movss	 DWORD PTR _s$8[ebp], xmm1

; 551  : #endif // USE_CRAMERS_RULE
; 552  : 			
; 553  : #ifdef CHECK_ANSWERS
; 554  : 			float check_ra = s*L11 + t*L12;
; 555  : 			float check_rb = s*L12 + t*L22;
; 556  : 			assert(FABS(check_ra-ra) < epsilon);
; 557  : 			assert(FABS(check_rb-rb) < epsilon);
; 558  : #endif // CHECK_ANSWERS
; 559  : 			
; 560  : 			// if we are dealing with infinite lines or if parameters s and t both
; 561  : 			// lie in the range [0,1] then just compute the points using Equations
; 562  : 			// (1) and (2) from the text.
; 563  : 			PointOnSegAx = (A1x + s * Lax);

  00489	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _s$8[ebp]
  0048e	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  00493	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  00498	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  0049b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 564  : 			PointOnSegAy = (A1y + s * Lay);

  0049f	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _s$8[ebp]
  004a4	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _Lay$[ebp]
  004a9	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  004ae	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  004b1	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 565  : 			PointOnSegAz = (A1z + s * Laz);

  004b5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _s$8[ebp]
  004ba	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Laz$[ebp]
  004bf	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  004c4	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  004c7	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 566  : 			PointOnSegBx = (B1x + t * Lbx);

  004cb	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _t$9[ebp]
  004d0	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _Lbx$[ebp]
  004d5	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  004da	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  004dd	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 567  : 			PointOnSegBy = (B1y + t * Lby);

  004e1	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _t$9[ebp]
  004e6	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _Lby$[ebp]
  004eb	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  004f0	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  004f3	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 568  : 			PointOnSegBz = (B1z + t * Lbz);

  004f7	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _t$9[ebp]
  004fc	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _Lbz$[ebp]
  00501	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00506	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  00509	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 569  : 			// otherwise, at least one of s and t is outside of [0,1] and we have to
; 570  : 			// handle this case.
; 571  : 			if (false == infinite_lines && (OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  0050d	0f b6 45 38	 movzx	 eax, BYTE PTR _infinite_lines$[ebp]
  00511	85 c0		 test	 eax, eax
  00513	0f 85 f1 00 00
	00		 jne	 $LN8@IntersectL
  00519	0f 57 c0	 xorps	 xmm0, xmm0
  0051c	0f 2f 45 dc	 comiss	 xmm0, DWORD PTR _s$8[ebp]
  00520	77 29		 ja	 SHORT $LN10@IntersectL
  00522	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _s$8[ebp]
  00527	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0052e	77 1b		 ja	 SHORT $LN10@IntersectL
  00530	0f 57 c0	 xorps	 xmm0, xmm0
  00533	0f 2f 45 e0	 comiss	 xmm0, DWORD PTR _t$9[ebp]
  00537	77 12		 ja	 SHORT $LN10@IntersectL
  00539	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _t$9[ebp]
  0053e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00545	0f 86 bf 00 00
	00		 jbe	 $LN8@IntersectL
$LN10@IntersectL:

; 572  : 			{
; 573  : 				AdjustNearestPoints(A1x, A1y, A1z, Lax, Lay, Laz,

  0054b	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  0054e	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00551	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00554	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00557	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  0055a	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  0055d	51		 push	 ecx
  0055e	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _t$9[ebp]
  00563	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00568	51		 push	 ecx
  00569	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _s$8[ebp]
  0056e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00573	51		 push	 ecx
  00574	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057e	51		 push	 ecx
  0057f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00584	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00589	51		 push	 ecx
  0058a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0058f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00594	51		 push	 ecx
  00595	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  0059a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059f	51		 push	 ecx
  005a0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  005a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005aa	51		 push	 ecx
  005ab	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  005b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b5	51		 push	 ecx
  005b6	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  005bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005c0	51		 push	 ecx
  005c1	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  005c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005cb	51		 push	 ecx
  005cc	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  005d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005d6	51		 push	 ecx
  005d7	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  005dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e1	51		 push	 ecx
  005e2	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  005e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ec	51		 push	 ecx
  005ed	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  005f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f7	51		 push	 ecx
  005f8	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  005fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00602	e8 00 00 00 00	 call	 ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
  00607	83 c4 54	 add	 esp, 84			; 00000054H
$LN8@IntersectL:

; 574  : 					B1x, B1y, B1z, Lbx, Lby, Lbz,
; 575  : 					epsilon, s, t,
; 576  : 					PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 577  : 					PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 578  : 			}
; 579  : 		}
; 580  : 	}
; 581  : 	
; 582  : 	NearestPointX = 0.5f * (PointOnSegAx + PointOnSegBx);

  0060a	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  0060d	8b 4d 4c	 mov	 ecx, DWORD PTR _PointOnSegBx$[ebp]
  00610	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00614	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00618	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00620	8b 45 58	 mov	 eax, DWORD PTR _NearestPointX$[ebp]
  00623	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 583  : 	NearestPointY = 0.5f * (PointOnSegAy + PointOnSegBy);

  00627	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]
  0062a	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  0062d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00631	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00635	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0063d	8b 45 5c	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  00640	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 584  : 	NearestPointZ = 0.5f * (PointOnSegAz + PointOnSegBz);

  00644	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00647	8b 4d 54	 mov	 ecx, DWORD PTR _PointOnSegBz$[ebp]
  0064a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0064e	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00652	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0065a	8b 45 60	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  0065d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 585  : 	
; 586  : 	NearestVectorX = PointOnSegBx - PointOnSegAx;

  00661	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  00664	8b 4d 40	 mov	 ecx, DWORD PTR _PointOnSegAx$[ebp]
  00667	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0066b	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0066f	8b 45 64	 mov	 eax, DWORD PTR _NearestVectorX$[ebp]
  00672	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 587  : 	NearestVectorY = PointOnSegBy - PointOnSegAy;

  00676	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  00679	8b 4d 44	 mov	 ecx, DWORD PTR _PointOnSegAy$[ebp]
  0067c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00680	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00684	8b 45 68	 mov	 eax, DWORD PTR _NearestVectorY$[ebp]
  00687	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 588  : 	NearestVectorZ = PointOnSegBz - PointOnSegAz;

  0068b	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0068e	8b 4d 48	 mov	 ecx, DWORD PTR _PointOnSegAz$[ebp]
  00691	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00695	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00699	8b 45 6c	 mov	 eax, DWORD PTR _NearestVectorZ$[ebp]
  0069c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 589  : 	
; 590  : 	// optional check to indicate if the lines truly intersect
; 591  : 	true_intersection = (FABS(NearestVectorX) +

  006a0	8b 45 64	 mov	 eax, DWORD PTR _NearestVectorX$[ebp]
  006a3	0f 57 c0	 xorps	 xmm0, xmm0
  006a6	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  006a9	76 15		 jbe	 SHORT $LN14@IntersectL
  006ab	8b 45 64	 mov	 eax, DWORD PTR _NearestVectorX$[ebp]
  006ae	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006b2	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006b9	f3 0f 11 45 ac	 movss	 DWORD PTR tv288[ebp], xmm0
  006be	eb 0c		 jmp	 SHORT $LN15@IntersectL
$LN14@IntersectL:
  006c0	8b 45 64	 mov	 eax, DWORD PTR _NearestVectorX$[ebp]
  006c3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006c7	f3 0f 11 45 ac	 movss	 DWORD PTR tv288[ebp], xmm0
$LN15@IntersectL:
  006cc	8b 45 68	 mov	 eax, DWORD PTR _NearestVectorY$[ebp]
  006cf	0f 57 c0	 xorps	 xmm0, xmm0
  006d2	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  006d5	76 15		 jbe	 SHORT $LN16@IntersectL
  006d7	8b 45 68	 mov	 eax, DWORD PTR _NearestVectorY$[ebp]
  006da	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006de	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  006e5	f3 0f 11 45 a8	 movss	 DWORD PTR tv291[ebp], xmm0
  006ea	eb 0c		 jmp	 SHORT $LN17@IntersectL
$LN16@IntersectL:
  006ec	8b 45 68	 mov	 eax, DWORD PTR _NearestVectorY$[ebp]
  006ef	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006f3	f3 0f 11 45 a8	 movss	 DWORD PTR tv291[ebp], xmm0
$LN17@IntersectL:
  006f8	8b 45 6c	 mov	 eax, DWORD PTR _NearestVectorZ$[ebp]
  006fb	0f 57 c0	 xorps	 xmm0, xmm0
  006fe	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  00701	76 15		 jbe	 SHORT $LN18@IntersectL
  00703	8b 45 6c	 mov	 eax, DWORD PTR _NearestVectorZ$[ebp]
  00706	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0070a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00711	f3 0f 11 45 a4	 movss	 DWORD PTR tv295[ebp], xmm0
  00716	eb 0c		 jmp	 SHORT $LN19@IntersectL
$LN18@IntersectL:
  00718	8b 45 6c	 mov	 eax, DWORD PTR _NearestVectorZ$[ebp]
  0071b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0071f	f3 0f 11 45 a4	 movss	 DWORD PTR tv295[ebp], xmm0
$LN19@IntersectL:
  00724	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv288[ebp]
  00729	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR tv291[ebp]
  0072e	f3 0f 58 45 a4	 addss	 xmm0, DWORD PTR tv295[ebp]
  00733	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  00738	0f 2f c8	 comiss	 xmm1, xmm0
  0073b	76 06		 jbe	 SHORT $LN20@IntersectL
  0073d	c6 45 ff 01	 mov	 BYTE PTR tv298[ebp], 1
  00741	eb 04		 jmp	 SHORT $LN21@IntersectL
$LN20@IntersectL:
  00743	c6 45 ff 00	 mov	 BYTE PTR tv298[ebp], 0
$LN21@IntersectL:
  00747	8b 45 70	 mov	 eax, DWORD PTR _true_intersection$[ebp]
  0074a	8a 4d ff	 mov	 cl, BYTE PTR tv298[ebp]
  0074d	88 08		 mov	 BYTE PTR [eax], cl

; 592  : 		FABS(NearestVectorY) +
; 593  : 		FABS(NearestVectorZ)) < epsilon ? true : false;
; 594  : }

  0074f	c9		 leave
  00750	c3		 ret	 0
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z
_TEXT	SEGMENT
_epsilon$ = -1512					; size = 4
_epsilon_squared$ = -1508				; size = 4
_fy$1 = -1504						; size = 4
_fz$ = -1500						; size = 4
_fx$2 = -1496						; size = 4
_fy$3 = -1492						; size = 4
_fz$4 = -1488						; size = 4
_fx$5 = -1484						; size = 4
_fy$6 = -1480						; size = 4
_fz$7 = -1476						; size = 4
_fx$8 = -1472						; size = 4
_fy$9 = -1468						; size = 4
_fz$10 = -1464						; size = 4
_fx$11 = -1460						; size = 4
_fy$12 = -1456						; size = 4
_fz$13 = -1452						; size = 4
_fx$14 = -1448						; size = 4
_fy$15 = -1444						; size = 4
_fz$16 = -1440						; size = 4
_fx$17 = -1436						; size = 4
_fy$18 = -1432						; size = 4
_fz$19 = -1428						; size = 4
_fx$ = -1424						; size = 4
_fy$ = -1420						; size = 4
_fz$ = -1416						; size = 4
_fx$20 = -1412						; size = 4
_fy$21 = -1408						; size = 4
_fz$22 = -1404						; size = 4
_fx$23 = -1400						; size = 4
_fy$24 = -1396						; size = 4
_fz$25 = -1392						; size = 4
_fx$26 = -1388						; size = 4
_fy$27 = -1384						; size = 4
_fz$28 = -1380						; size = 4
_fx$29 = -1376						; size = 4
_fy$30 = -1372						; size = 4
_fz$31 = -1368						; size = 4
_fz$32 = -1364						; size = 4
_fx$33 = -1360						; size = 4
_fy$34 = -1356						; size = 4
_fz$35 = -1352						; size = 4
_fx$36 = -1348						; size = 4
_fy$37 = -1344						; size = 4
_fz$38 = -1340						; size = 4
_fx$39 = -1336						; size = 4
_fy$40 = -1332						; size = 4
_fz$41 = -1328						; size = 4
_fx$42 = -1324						; size = 4
_fy$43 = -1320						; size = 4
_fz$44 = -1316						; size = 4
_fx$45 = -1312						; size = 4
_fz$46 = -1308						; size = 4
_fy$47 = -1304						; size = 4
_fx$48 = -1300						; size = 4
_fz$49 = -1296						; size = 4
_fy$50 = -1292						; size = 4
_fx$51 = -1288						; size = 4
_fz$52 = -1284						; size = 4
_fy$53 = -1280						; size = 4
_fx$54 = -1276						; size = 4
_fz$55 = -1272						; size = 4
_fy$56 = -1268						; size = 4
_fx$57 = -1264						; size = 4
_fz$58 = -1260						; size = 4
_fy$59 = -1256						; size = 4
_fx$60 = -1252						; size = 4
_fz$61 = -1248						; size = 4
_fy$62 = -1244						; size = 4
_fx$63 = -1240						; size = 4
_fz$64 = -1236						; size = 4
_fy$65 = -1232						; size = 4
_fx$66 = -1228						; size = 4
_fz$67 = -1224						; size = 4
_fy$68 = -1220						; size = 4
_fx$69 = -1216						; size = 4
_fz$70 = -1212						; size = 4
_fy$71 = -1208						; size = 4
_fx$72 = -1204						; size = 4
_fz$73 = -1200						; size = 4
_fy$74 = -1196						; size = 4
_fx$75 = -1192						; size = 4
_fz$76 = -1188						; size = 4
_fy$77 = -1184						; size = 4
_fx$78 = -1180						; size = 4
_fz$79 = -1176						; size = 4
_fy$80 = -1172						; size = 4
_fx$81 = -1168						; size = 4
_fz$82 = -1164						; size = 4
_fy$83 = -1160						; size = 4
_fx$84 = -1156						; size = 4
_fz$85 = -1152						; size = 4
_fy$86 = -1148						; size = 4
_fx$87 = -1144						; size = 4
_fz$88 = -1140						; size = 4
_fy$89 = -1136						; size = 4
_fx$90 = -1132						; size = 4
_fz$91 = -1128						; size = 4
_fy$92 = -1124						; size = 4
_fx$93 = -1120						; size = 4
_fz$94 = -1116						; size = 4
_fy$95 = -1112						; size = 4
_fx$96 = -1108						; size = 4
_fz$97 = -1104						; size = 4
_fy$98 = -1100						; size = 4
_fx$99 = -1096						; size = 4
_fz$100 = -1092						; size = 4
_fy$101 = -1088						; size = 4
_fx$102 = -1084						; size = 4
_fz$103 = -1080						; size = 4
_fy$104 = -1076						; size = 4
_fx$105 = -1072						; size = 4
_fz$106 = -1068						; size = 4
_fy$107 = -1064						; size = 4
_fx$108 = -1060						; size = 4
_fz$109 = -1056						; size = 4
_fy$110 = -1052						; size = 4
_fx$111 = -1048						; size = 4
_fz$112 = -1044						; size = 4
_fy$113 = -1040						; size = 4
_fx$114 = -1036						; size = 4
_fz$ = -1032						; size = 4
_fy$ = -1028						; size = 4
_fx$ = -1024						; size = 4
_fz$ = -1020						; size = 4
_fy$ = -1016						; size = 4
_fx$ = -1012						; size = 4
_fz$ = -1008						; size = 4
_fy$ = -1004						; size = 4
_fx$ = -1000						; size = 4
_fz$ = -996						; size = 4
_fy$ = -992						; size = 4
_fx$ = -988						; size = 4
_rb$115 = -984						; size = 4
_fz$116 = -980						; size = 4
_fy$117 = -976						; size = 4
_fx$118 = -972						; size = 4
_fz$119 = -968						; size = 4
_fy$120 = -964						; size = 4
_fx$121 = -960						; size = 4
_fy$ = -956						; size = 4
_fx$ = -952						; size = 4
_fz$ = -948						; size = 4
_fy$ = -944						; size = 4
_fx$ = -940						; size = 4
tv132 = -936						; size = 4
tv3541 = -932						; size = 4
tv3540 = -928						; size = 4
tv3537 = -924						; size = 4
_D$122 = -920						; size = 4
tv2170 = -916						; size = 4
tv2169 = -912						; size = 4
tv2166 = -908						; size = 4
tv3206 = -904						; size = 4
tv3205 = -900						; size = 4
tv3202 = -896						; size = 4
_D$123 = -892						; size = 4
tv2148 = -888						; size = 4
tv2147 = -884						; size = 4
tv2144 = -880						; size = 4
tv2871 = -876						; size = 4
tv2870 = -872						; size = 4
tv2867 = -868						; size = 4
_D$124 = -864						; size = 4
tv2619 = -860						; size = 4
tv2618 = -856						; size = 4
tv2615 = -852						; size = 4
_D$125 = -848						; size = 4
tv2121 = -844						; size = 4
tv2120 = -840						; size = 4
tv2117 = -836						; size = 4
tv2284 = -832						; size = 4
tv2283 = -828						; size = 4
tv2280 = -824						; size = 4
_D$126 = -820						; size = 4
tv2099 = -816						; size = 4
tv2098 = -812						; size = 4
tv2066 = -808						; size = 4
_ra$127 = -804						; size = 4
tv1630 = -800						; size = 4
tv1629 = -796						; size = 4
tv1626 = -792						; size = 4
_D$128 = -788						; size = 4
tv1007 = -784						; size = 4
tv993 = -780						; size = 4
tv1006 = -776						; size = 4
tv999 = -772						; size = 4
tv992 = -768						; size = 4
tv985 = -764						; size = 4
tv1295 = -760						; size = 4
tv1294 = -756						; size = 4
tv1291 = -752						; size = 4
_D$129 = -748						; size = 4
tv1040 = -744						; size = 4
tv1039 = -740						; size = 4
tv1036 = -736						; size = 4
_D$130 = -732						; size = 4
_L22$ = -728						; size = 4
tv619 = -724						; size = 4
tv618 = -720						; size = 4
tv615 = -716						; size = 4
_D$131 = -712						; size = 4
tv399 = -708						; size = 4
tv398 = -704						; size = 4
tv395 = -700						; size = 4
_D$132 = -696						; size = 4
_f$133 = -692						; size = 4
_f$134 = -688						; size = 4
_f$ = -684						; size = 4
_f$135 = -680						; size = 4
_f$ = -676						; size = 4
_f$ = -672						; size = 4
_f$136 = -668						; size = 4
_f$137 = -664						; size = 4
_f$ = -660						; size = 4
_f$ = -656						; size = 4
_f$138 = -652						; size = 4
_f$ = -648						; size = 4
_f$ = -644						; size = 4
_f$139 = -640						; size = 4
_f$140 = -636						; size = 4
_DetL$141 = -632					; size = 4
_L11$ = -628						; size = 4
_L12$142 = -624						; size = 4
_s$143 = -620						; size = 4
_parameter$ = -616					; size = 4
_t$144 = -612						; size = 4
_parameter$ = -608					; size = 4
_s$145 = -604						; size = 8
_temp$146 = -596					; size = 4
_temp$ = -592						; size = 4
_s$ = -588						; size = 4
_t$ = -584						; size = 4
_tp$147 = -580						; size = 12
$T148 = -568						; size = 12
$T149 = -556						; size = 12
$T150 = -544						; size = 12
$T151 = -532						; size = 12
$T152 = -520						; size = 12
$T153 = -508						; size = 12
$T154 = -496						; size = 12
$T155 = -484						; size = 12
$T156 = -472						; size = 12
$T157 = -460						; size = 12
$T158 = -448						; size = 12
$T159 = -436						; size = 12
$T160 = -424						; size = 12
$T161 = -412						; size = 12
$T162 = -400						; size = 12
$T163 = -388						; size = 12
$T164 = -376						; size = 12
$T165 = -364						; size = 12
$T166 = -352						; size = 12
$T167 = -340						; size = 12
_AB$168 = -328						; size = 12
$T169 = -316						; size = 12
$T170 = -304						; size = 12
_AB$171 = -292						; size = 12
$T172 = -280						; size = 12
_AB$173 = -268						; size = 12
$T174 = -256						; size = 12
$T175 = -244						; size = 12
$T176 = -232						; size = 12
$T177 = -220						; size = 12
_AB$178 = -208						; size = 12
$T179 = -196						; size = 12
_AB$180 = -184						; size = 12
_AB$181 = -172						; size = 12
$T182 = -160						; size = 12
_AB$183 = -148						; size = 12
$T184 = -136						; size = 12
_AB$185 = -124						; size = 12
$T186 = -112						; size = 12
_AB$187 = -100						; size = 12
$T188 = -88						; size = 12
_AB$189 = -76						; size = 12
$T190 = -64						; size = 12
$T191 = -52						; size = 12
_AB$192 = -40						; size = 12
_Lb$ = -28						; size = 12
_La$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_A1$ = 8						; size = 4
_A2$ = 12						; size = 4
_B1$ = 16						; size = 4
_B2$ = 20						; size = 4
_OutA$ = 24						; size = 4
_OutB$ = 28						; size = 4
?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z PROC ; IntersectLineSegments, COMDAT

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 05 00
	00		 sub	 esp, 1512		; 000005e8H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi

; 230  : 	float temp = 0.f;

  00015	0f 57 c0	 xorps	 xmm0, xmm0
  00018	f3 0f 11 85 b0
	fd ff ff	 movss	 DWORD PTR _temp$[ebp], xmm0

; 231  : 	const float epsilon = MY_EPSILON;

  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00028	f3 0f 11 85 18
	fa ff ff	 movss	 DWORD PTR _epsilon$[ebp], xmm0

; 232  : 	const float epsilon_squared = MY_EPSILON*MY_EPSILON;

  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00038	f3 0f 11 85 1c
	fa ff ff	 movss	 DWORD PTR _epsilon_squared$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00040	8b 45 0c	 mov	 eax, DWORD PTR _A2$[ebp]
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  00046	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0004a	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  0004e	f3 0f 11 85 54
	fc ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  00056	8b 45 0c	 mov	 eax, DWORD PTR _A2$[ebp]
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  0005c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00061	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00066	f3 0f 11 85 50
	fc ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  0006e	8b 45 0c	 mov	 eax, DWORD PTR _A2$[ebp]
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  00074	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00079	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0007e	f3 0f 11 85 4c
	fc ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  00086	f3 0f 10 85 54
	fc ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0008e	f3 0f 11 45 f0	 movss	 DWORD PTR _La$[ebp], xmm0

; 181  :     y = fy;

  00093	f3 0f 10 85 50
	fc ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0009b	f3 0f 11 45 f4	 movss	 DWORD PTR _La$[ebp+4], xmm0

; 182  :     z = fz;

  000a0	f3 0f 10 85 4c
	fc ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  000a8	f3 0f 11 45 f8	 movss	 DWORD PTR _La$[ebp+8], xmm0

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000ad	8b 45 14	 mov	 eax, DWORD PTR _B2$[ebp]
  000b0	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  000b3	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000b7	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  000bb	f3 0f 11 85 48
	fc ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  000c3	8b 45 14	 mov	 eax, DWORD PTR _B2$[ebp]
  000c6	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  000c9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  000ce	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  000d3	f3 0f 11 85 44
	fc ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  000db	8b 45 14	 mov	 eax, DWORD PTR _B2$[ebp]
  000de	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  000e1	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  000e6	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  000eb	f3 0f 11 85 24
	fa ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  000f3	f3 0f 10 85 48
	fc ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  000fb	f3 0f 11 45 e4	 movss	 DWORD PTR _Lb$[ebp], xmm0

; 181  :     y = fy;

  00100	f3 0f 10 85 44
	fc ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00108	f3 0f 11 45 e8	 movss	 DWORD PTR _Lb$[ebp+4], xmm0

; 182  :     z = fz;

  0010d	f3 0f 10 85 24
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00115	f3 0f 11 45 ec	 movss	 DWORD PTR _Lb$[ebp+8], xmm0

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0011a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _La$[ebp+8]
  0011f	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  00124	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _La$[ebp+4]
  00129	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _La$[ebp+4]
  0012e	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$[ebp]
  00133	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$[ebp]
  00138	f3 0f 58 d1	 addss	 xmm2, xmm1
  0013c	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 238  : 	float L11 =  D3DXVec3LengthSq(&La);

  00140	f3 0f 11 95 8c
	fd ff ff	 movss	 DWORD PTR _L11$[ebp], xmm2
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00148	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Lb$[ebp+8]
  0014d	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  00152	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Lb$[ebp+4]
  00157	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  0015c	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _Lb$[ebp]
  00161	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  00166	f3 0f 58 d1	 addss	 xmm2, xmm1
  0016a	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 239  : 	float L22 =  D3DXVec3LengthSq(&Lb);

  0016e	f3 0f 11 95 28
	fd ff ff	 movss	 DWORD PTR _L22$[ebp], xmm2

; 240  : 	
; 241  : 	// Line/Segment A is degenerate ---- Special Case #1
; 242  : 	if (L11 < epsilon_squared)

  00176	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  0017e	0f 2f 85 8c fd
	ff ff		 comiss	 xmm0, DWORD PTR _L11$[ebp]
  00185	0f 86 b1 02 00
	00		 jbe	 $LN2@IntersectL

; 243  : 	{
; 244  : 		OutA = A1;

  0018b	8b 75 08	 mov	 esi, DWORD PTR _A1$[ebp]
  0018e	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  00191	a5		 movsd
  00192	a5		 movsd
  00193	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00194	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Lb$[ebp+8]
  00199	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  0019e	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Lb$[ebp+4]
  001a3	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  001a8	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _Lb$[ebp]
  001ad	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  001b2	f3 0f 58 d1	 addss	 xmm2, xmm1
  001b6	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 34   : 	float D = D3DXVec3LengthSq(&L);

  001ba	f3 0f 11 95 48
	fd ff ff	 movss	 DWORD PTR _D$132[ebp], xmm2

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  001c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  001ca	0f 2f 85 48 fd
	ff ff		 comiss	 xmm0, DWORD PTR _D$132[ebp]
  001d1	76 0e		 jbe	 SHORT $LN27@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  001d3	8b 75 10	 mov	 esi, DWORD PTR _B1$[ebp]
  001d6	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  001d9	a5		 movsd
  001da	a5		 movsd
  001db	a5		 movsd

; 38   : 		return;

  001dc	e9 56 02 00 00	 jmp	 $LN26@IntersectL
$LN27@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001e1	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  001e4	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  001e7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001eb	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  001ef	f3 0f 11 85 28
	fa ff ff	 movss	 DWORD PTR _fx$2[ebp], xmm0
  001f7	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  001fa	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  001fd	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00202	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00207	f3 0f 11 85 2c
	fa ff ff	 movss	 DWORD PTR _fy$3[ebp], xmm0
  0020f	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  00212	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  00215	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0021a	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0021f	f3 0f 11 85 30
	fa ff ff	 movss	 DWORD PTR _fz$4[ebp], xmm0

; 180  :     x = fx;

  00227	f3 0f 10 85 28
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$2[ebp]
  0022f	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _AB$183[ebp], xmm0

; 181  :     y = fy;

  00237	f3 0f 10 85 2c
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$3[ebp]
  0023f	f3 0f 11 85 70
	ff ff ff	 movss	 DWORD PTR _AB$183[ebp+4], xmm0

; 182  :     z = fz;

  00247	f3 0f 10 85 30
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$4[ebp]
  0024f	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _AB$183[ebp+8], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00257	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _AB$183[ebp+8]
  0025f	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  00264	f3 0f 10 8d 70
	ff ff ff	 movss	 xmm1, DWORD PTR _AB$183[ebp+4]
  0026c	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  00271	f3 0f 10 95 6c
	ff ff ff	 movss	 xmm2, DWORD PTR _AB$183[ebp]
  00279	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  0027e	f3 0f 58 d1	 addss	 xmm2, xmm1
  00282	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00286	f3 0f 5e 95 48
	fd ff ff	 divss	 xmm2, DWORD PTR _D$132[ebp]
  0028e	f3 0f 11 95 b0
	fd ff ff	 movss	 DWORD PTR _temp$[ebp], xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00296	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0029e	0f 2f 85 b0 fd
	ff ff		 comiss	 xmm0, DWORD PTR _temp$[ebp]
  002a5	76 12		 jbe	 SHORT $LN29@IntersectL
  002a7	f3 0f 10 85 b0
	fd ff ff	 movss	 xmm0, DWORD PTR _temp$[ebp]
  002af	f3 0f 11 85 44
	fd ff ff	 movss	 DWORD PTR tv395[ebp], xmm0
  002b7	eb 10		 jmp	 SHORT $LN30@IntersectL
$LN29@IntersectL:
  002b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002c1	f3 0f 11 85 44
	fd ff ff	 movss	 DWORD PTR tv395[ebp], xmm0
$LN30@IntersectL:
  002c9	0f 57 c0	 xorps	 xmm0, xmm0
  002cc	0f 2f 85 44 fd
	ff ff		 comiss	 xmm0, DWORD PTR tv395[ebp]
  002d3	76 0d		 jbe	 SHORT $LN33@IntersectL
  002d5	0f 57 c0	 xorps	 xmm0, xmm0
  002d8	f3 0f 11 85 3c
	fd ff ff	 movss	 DWORD PTR tv399[ebp], xmm0
  002e0	eb 43		 jmp	 SHORT $LN34@IntersectL
$LN33@IntersectL:
  002e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002ea	0f 2f 85 b0 fd
	ff ff		 comiss	 xmm0, DWORD PTR _temp$[ebp]
  002f1	76 12		 jbe	 SHORT $LN31@IntersectL
  002f3	f3 0f 10 85 b0
	fd ff ff	 movss	 xmm0, DWORD PTR _temp$[ebp]
  002fb	f3 0f 11 85 40
	fd ff ff	 movss	 DWORD PTR tv398[ebp], xmm0
  00303	eb 10		 jmp	 SHORT $LN32@IntersectL
$LN31@IntersectL:
  00305	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0030d	f3 0f 11 85 40
	fd ff ff	 movss	 DWORD PTR tv398[ebp], xmm0
$LN32@IntersectL:
  00315	f3 0f 10 85 40
	fd ff ff	 movss	 xmm0, DWORD PTR tv398[ebp]
  0031d	f3 0f 11 85 3c
	fd ff ff	 movss	 DWORD PTR tv399[ebp], xmm0
$LN34@IntersectL:
  00325	f3 0f 10 85 3c
	fd ff ff	 movss	 xmm0, DWORD PTR tv399[ebp]
  0032d	f3 0f 11 85 b0
	fd ff ff	 movss	 DWORD PTR _temp$[ebp], xmm0

; 49   : 	Nearest = A1 + parameter * L;

  00335	f3 0f 10 85 b0
	fd ff ff	 movss	 xmm0, DWORD PTR _temp$[ebp]
  0033d	f3 0f 11 85 5c
	fd ff ff	 movss	 DWORD PTR _f$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00345	f3 0f 10 85 5c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  0034d	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _Lb$[ebp]
  00352	f3 0f 11 85 34
	fa ff ff	 movss	 DWORD PTR _fx$5[ebp], xmm0
  0035a	f3 0f 10 85 5c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  00362	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _Lb$[ebp+4]
  00367	f3 0f 11 85 38
	fa ff ff	 movss	 DWORD PTR _fy$6[ebp], xmm0
  0036f	f3 0f 10 85 5c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  00377	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  0037c	f3 0f 11 85 3c
	fa ff ff	 movss	 DWORD PTR _fz$7[ebp], xmm0

; 180  :     x = fx;

  00384	f3 0f 10 85 34
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$5[ebp]
  0038c	f3 0f 11 85 60
	ff ff ff	 movss	 DWORD PTR $T182[ebp], xmm0

; 181  :     y = fy;

  00394	f3 0f 10 85 38
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$6[ebp]
  0039c	f3 0f 11 85 64
	ff ff ff	 movss	 DWORD PTR $T182[ebp+4], xmm0

; 182  :     z = fz;

  003a4	f3 0f 10 85 3c
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$7[ebp]
  003ac	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR $T182[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  003b4	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  003b7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003bb	f3 0f 58 85 60
	ff ff ff	 addss	 xmm0, DWORD PTR $T182[ebp]
  003c3	f3 0f 11 85 40
	fa ff ff	 movss	 DWORD PTR _fx$8[ebp], xmm0
  003cb	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  003ce	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  003d3	f3 0f 58 85 64
	ff ff ff	 addss	 xmm0, DWORD PTR $T182[ebp+4]
  003db	f3 0f 11 85 44
	fa ff ff	 movss	 DWORD PTR _fy$9[ebp], xmm0
  003e3	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  003e6	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  003eb	f3 0f 58 85 68
	ff ff ff	 addss	 xmm0, DWORD PTR $T182[ebp+8]
  003f3	f3 0f 11 85 48
	fa ff ff	 movss	 DWORD PTR _fz$10[ebp], xmm0

; 180  :     x = fx;

  003fb	f3 0f 10 85 40
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$8[ebp]
  00403	f3 0f 11 85 1c
	fe ff ff	 movss	 DWORD PTR $T155[ebp], xmm0

; 181  :     y = fy;

  0040b	f3 0f 10 85 44
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$9[ebp]
  00413	f3 0f 11 85 20
	fe ff ff	 movss	 DWORD PTR $T155[ebp+4], xmm0

; 182  :     z = fz;

  0041b	f3 0f 10 85 48
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$10[ebp]
  00423	f3 0f 11 85 24
	fe ff ff	 movss	 DWORD PTR $T155[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0042b	8d b5 1c fe ff
	ff		 lea	 esi, DWORD PTR $T155[ebp]
  00431	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  00434	a5		 movsd
  00435	a5		 movsd
  00436	a5		 movsd
$LN26@IntersectL:

; 245  : 		FindNearestPointOnLineSegment(B1, Lb, A1,
; 246  : 			OutB, temp);
; 247  : 	}

  00437	e9 40 26 00 00	 jmp	 $LN209@IntersectL
$LN2@IntersectL:

; 248  : 	// Line/Segment B is degenerate ---- Special Case #1
; 249  : 	else if (L22 < epsilon_squared)

  0043c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00444	0f 2f 85 28 fd
	ff ff		 comiss	 xmm0, DWORD PTR _L22$[ebp]
  0044b	0f 86 8d 02 00
	00		 jbe	 $LN4@IntersectL

; 250  : 	{
; 251  : 		OutB = B1;

  00451	8b 75 10	 mov	 esi, DWORD PTR _B1$[ebp]
  00454	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  00457	a5		 movsd
  00458	a5		 movsd
  00459	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0045a	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _La$[ebp+8]
  0045f	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  00464	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _La$[ebp+4]
  00469	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _La$[ebp+4]
  0046e	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$[ebp]
  00473	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$[ebp]
  00478	f3 0f 58 d1	 addss	 xmm2, xmm1
  0047c	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 34   : 	float D = D3DXVec3LengthSq(&L);

  00480	f3 0f 11 95 38
	fd ff ff	 movss	 DWORD PTR _D$131[ebp], xmm2

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00488	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00490	0f 2f 85 38 fd
	ff ff		 comiss	 xmm0, DWORD PTR _D$131[ebp]
  00497	76 0e		 jbe	 SHORT $LN52@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  00499	8b 75 08	 mov	 esi, DWORD PTR _A1$[ebp]
  0049c	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  0049f	a5		 movsd
  004a0	a5		 movsd
  004a1	a5		 movsd

; 38   : 		return;

  004a2	e9 32 02 00 00	 jmp	 $LN51@IntersectL
$LN52@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  004a7	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  004aa	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  004ad	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  004b1	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  004b5	f3 0f 11 85 4c
	fa ff ff	 movss	 DWORD PTR _fx$11[ebp], xmm0
  004bd	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  004c0	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  004c3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  004c8	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  004cd	f3 0f 11 85 50
	fa ff ff	 movss	 DWORD PTR _fy$12[ebp], xmm0
  004d5	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  004d8	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  004db	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  004e0	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  004e5	f3 0f 11 85 54
	fa ff ff	 movss	 DWORD PTR _fz$13[ebp], xmm0

; 180  :     x = fx;

  004ed	f3 0f 10 85 4c
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$11[ebp]
  004f5	f3 0f 11 45 84	 movss	 DWORD PTR _AB$185[ebp], xmm0

; 181  :     y = fy;

  004fa	f3 0f 10 85 50
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$12[ebp]
  00502	f3 0f 11 45 88	 movss	 DWORD PTR _AB$185[ebp+4], xmm0

; 182  :     z = fz;

  00507	f3 0f 10 85 54
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$13[ebp]
  0050f	f3 0f 11 45 8c	 movss	 DWORD PTR _AB$185[ebp+8], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00514	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _AB$185[ebp+8]
  00519	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  0051e	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _AB$185[ebp+4]
  00523	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _La$[ebp+4]
  00528	f3 0f 10 55 84	 movss	 xmm2, DWORD PTR _AB$185[ebp]
  0052d	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$[ebp]
  00532	f3 0f 58 d1	 addss	 xmm2, xmm1
  00536	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  0053a	f3 0f 5e 95 38
	fd ff ff	 divss	 xmm2, DWORD PTR _D$131[ebp]
  00542	f3 0f 11 95 b0
	fd ff ff	 movss	 DWORD PTR _temp$[ebp], xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  0054a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00552	0f 2f 85 b0 fd
	ff ff		 comiss	 xmm0, DWORD PTR _temp$[ebp]
  00559	76 12		 jbe	 SHORT $LN54@IntersectL
  0055b	f3 0f 10 85 b0
	fd ff ff	 movss	 xmm0, DWORD PTR _temp$[ebp]
  00563	f3 0f 11 85 34
	fd ff ff	 movss	 DWORD PTR tv615[ebp], xmm0
  0056b	eb 10		 jmp	 SHORT $LN55@IntersectL
$LN54@IntersectL:
  0056d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00575	f3 0f 11 85 34
	fd ff ff	 movss	 DWORD PTR tv615[ebp], xmm0
$LN55@IntersectL:
  0057d	0f 57 c0	 xorps	 xmm0, xmm0
  00580	0f 2f 85 34 fd
	ff ff		 comiss	 xmm0, DWORD PTR tv615[ebp]
  00587	76 0d		 jbe	 SHORT $LN58@IntersectL
  00589	0f 57 c0	 xorps	 xmm0, xmm0
  0058c	f3 0f 11 85 2c
	fd ff ff	 movss	 DWORD PTR tv619[ebp], xmm0
  00594	eb 43		 jmp	 SHORT $LN59@IntersectL
$LN58@IntersectL:
  00596	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0059e	0f 2f 85 b0 fd
	ff ff		 comiss	 xmm0, DWORD PTR _temp$[ebp]
  005a5	76 12		 jbe	 SHORT $LN56@IntersectL
  005a7	f3 0f 10 85 b0
	fd ff ff	 movss	 xmm0, DWORD PTR _temp$[ebp]
  005af	f3 0f 11 85 30
	fd ff ff	 movss	 DWORD PTR tv618[ebp], xmm0
  005b7	eb 10		 jmp	 SHORT $LN57@IntersectL
$LN56@IntersectL:
  005b9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005c1	f3 0f 11 85 30
	fd ff ff	 movss	 DWORD PTR tv618[ebp], xmm0
$LN57@IntersectL:
  005c9	f3 0f 10 85 30
	fd ff ff	 movss	 xmm0, DWORD PTR tv618[ebp]
  005d1	f3 0f 11 85 2c
	fd ff ff	 movss	 DWORD PTR tv619[ebp], xmm0
$LN59@IntersectL:
  005d9	f3 0f 10 85 2c
	fd ff ff	 movss	 xmm0, DWORD PTR tv619[ebp]
  005e1	f3 0f 11 85 b0
	fd ff ff	 movss	 DWORD PTR _temp$[ebp], xmm0

; 49   : 	Nearest = A1 + parameter * L;

  005e9	f3 0f 10 85 b0
	fd ff ff	 movss	 xmm0, DWORD PTR _temp$[ebp]
  005f1	f3 0f 11 85 60
	fd ff ff	 movss	 DWORD PTR _f$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005f9	f3 0f 10 85 60
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  00601	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _La$[ebp]
  00606	f3 0f 11 85 58
	fa ff ff	 movss	 DWORD PTR _fx$14[ebp], xmm0
  0060e	f3 0f 10 85 60
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  00616	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _La$[ebp+4]
  0061b	f3 0f 11 85 5c
	fa ff ff	 movss	 DWORD PTR _fy$15[ebp], xmm0
  00623	f3 0f 10 85 60
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  0062b	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  00630	f3 0f 11 85 60
	fa ff ff	 movss	 DWORD PTR _fz$16[ebp], xmm0

; 180  :     x = fx;

  00638	f3 0f 10 85 58
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$14[ebp]
  00640	f3 0f 11 45 90	 movss	 DWORD PTR $T186[ebp], xmm0

; 181  :     y = fy;

  00645	f3 0f 10 85 5c
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$15[ebp]
  0064d	f3 0f 11 45 94	 movss	 DWORD PTR $T186[ebp+4], xmm0

; 182  :     z = fz;

  00652	f3 0f 10 85 60
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$16[ebp]
  0065a	f3 0f 11 45 98	 movss	 DWORD PTR $T186[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0065f	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  00662	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00666	f3 0f 58 45 90	 addss	 xmm0, DWORD PTR $T186[ebp]
  0066b	f3 0f 11 85 64
	fa ff ff	 movss	 DWORD PTR _fx$17[ebp], xmm0
  00673	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  00676	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0067b	f3 0f 58 45 94	 addss	 xmm0, DWORD PTR $T186[ebp+4]
  00680	f3 0f 11 85 68
	fa ff ff	 movss	 DWORD PTR _fy$18[ebp], xmm0
  00688	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  0068b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00690	f3 0f 58 45 98	 addss	 xmm0, DWORD PTR $T186[ebp+8]
  00695	f3 0f 11 85 6c
	fa ff ff	 movss	 DWORD PTR _fz$19[ebp], xmm0

; 180  :     x = fx;

  0069d	f3 0f 10 85 64
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$17[ebp]
  006a5	f3 0f 11 85 10
	fe ff ff	 movss	 DWORD PTR $T154[ebp], xmm0

; 181  :     y = fy;

  006ad	f3 0f 10 85 68
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$18[ebp]
  006b5	f3 0f 11 85 14
	fe ff ff	 movss	 DWORD PTR $T154[ebp+4], xmm0

; 182  :     z = fz;

  006bd	f3 0f 10 85 6c
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$19[ebp]
  006c5	f3 0f 11 85 18
	fe ff ff	 movss	 DWORD PTR $T154[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  006cd	8d b5 10 fe ff
	ff		 lea	 esi, DWORD PTR $T154[ebp]
  006d3	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  006d6	a5		 movsd
  006d7	a5		 movsd
  006d8	a5		 movsd
$LN51@IntersectL:

; 252  : 		FindNearestPointOnLineSegment(A1, La, B1,
; 253  : 			OutA, temp);
; 254  : 	}

  006d9	e9 9e 23 00 00	 jmp	 $LN209@IntersectL
$LN4@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  006de	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  006e1	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  006e4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  006e8	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  006ec	f3 0f 11 85 70
	fa ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  006f4	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  006f7	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  006fa	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  006ff	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00704	f3 0f 11 85 74
	fa ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  0070c	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  0070f	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  00712	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00717	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  0071c	f3 0f 11 85 78
	fa ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  00724	f3 0f 10 85 70
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0072c	f3 0f 11 45 d8	 movss	 DWORD PTR _AB$192[ebp], xmm0

; 181  :     y = fy;

  00731	f3 0f 10 85 74
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00739	f3 0f 11 45 dc	 movss	 DWORD PTR _AB$192[ebp+4], xmm0

; 182  :     z = fz;

  0073e	f3 0f 10 85 78
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00746	f3 0f 11 45 e0	 movss	 DWORD PTR _AB$192[ebp+8], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0074b	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _La$[ebp+8]
  00750	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  00755	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _La$[ebp+4]
  0075a	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  0075f	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$[ebp]
  00764	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  00769	f3 0f 58 d1	 addss	 xmm2, xmm1
  0076d	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 262  : 		float L12 = -D3DXVec3Dot(&La, &Lb);

  00771	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00778	f3 0f 11 95 90
	fd ff ff	 movss	 DWORD PTR _L12$142[ebp], xmm2

; 263  : 		
; 264  : 		float DetL = L11 * L22 - L12 * L12;

  00780	f3 0f 10 85 8c
	fd ff ff	 movss	 xmm0, DWORD PTR _L11$[ebp]
  00788	f3 0f 59 85 28
	fd ff ff	 mulss	 xmm0, DWORD PTR _L22$[ebp]
  00790	f3 0f 10 8d 90
	fd ff ff	 movss	 xmm1, DWORD PTR _L12$142[ebp]
  00798	f3 0f 59 8d 90
	fd ff ff	 mulss	 xmm1, DWORD PTR _L12$142[ebp]
  007a0	f3 0f 5c c1	 subss	 xmm0, xmm1
  007a4	f3 0f 11 85 88
	fd ff ff	 movss	 DWORD PTR _DetL$141[ebp], xmm0

; 265  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 266  : 		if (FABS(DetL) < epsilon)

  007ac	0f 57 c0	 xorps	 xmm0, xmm0
  007af	0f 2f 85 88 fd
	ff ff		 comiss	 xmm0, DWORD PTR _DetL$141[ebp]
  007b6	76 19		 jbe	 SHORT $LN12@IntersectL
  007b8	f3 0f 10 85 88
	fd ff ff	 movss	 xmm0, DWORD PTR _DetL$141[ebp]
  007c0	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  007c7	f3 0f 11 85 58
	fc ff ff	 movss	 DWORD PTR tv132[ebp], xmm0
  007cf	eb 10		 jmp	 SHORT $LN13@IntersectL
$LN12@IntersectL:
  007d1	f3 0f 10 85 88
	fd ff ff	 movss	 xmm0, DWORD PTR _DetL$141[ebp]
  007d9	f3 0f 11 85 58
	fc ff ff	 movss	 DWORD PTR tv132[ebp], xmm0
$LN13@IntersectL:
  007e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  007e9	0f 2f 85 58 fc
	ff ff		 comiss	 xmm0, DWORD PTR tv132[ebp]
  007f0	0f 86 2c 0b 00
	00		 jbe	 $LN6@IntersectL

; 99   : 	FindNearestPointOnLineSegment(A1, La, B1, OutA, s[0]);

  007f6	6a 04		 push	 4
  007f8	58		 pop	 eax
  007f9	6b c0 00	 imul	 eax, eax, 0
  007fc	8d 84 05 a4 fd
	ff ff		 lea	 eax, DWORD PTR _s$145[ebp+eax]
  00803	89 85 a0 fd ff
	ff		 mov	 DWORD PTR _parameter$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00809	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _La$[ebp+8]
  0080e	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  00813	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _La$[ebp+4]
  00818	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _La$[ebp+4]
  0081d	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$[ebp]
  00822	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$[ebp]
  00827	f3 0f 58 d1	 addss	 xmm2, xmm1
  0082b	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 34   : 	float D = D3DXVec3LengthSq(&L);

  0082f	f3 0f 11 95 24
	fd ff ff	 movss	 DWORD PTR _D$130[ebp], xmm2

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00837	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  0083f	0f 2f 85 24 fd
	ff ff		 comiss	 xmm0, DWORD PTR _D$130[ebp]
  00846	76 0e		 jbe	 SHORT $LN105@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  00848	8b 75 08	 mov	 esi, DWORD PTR _A1$[ebp]
  0084b	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  0084e	a5		 movsd
  0084f	a5		 movsd
  00850	a5		 movsd

; 38   : 		return;

  00851	e9 40 02 00 00	 jmp	 $LN104@IntersectL
$LN105@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00856	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  00859	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  0085c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00860	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00864	f3 0f 11 85 7c
	fa ff ff	 movss	 DWORD PTR _fx$20[ebp], xmm0
  0086c	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  0086f	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  00872	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00877	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  0087c	f3 0f 11 85 80
	fa ff ff	 movss	 DWORD PTR _fy$21[ebp], xmm0
  00884	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  00887	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  0088a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0088f	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00894	f3 0f 11 85 84
	fa ff ff	 movss	 DWORD PTR _fz$22[ebp], xmm0

; 180  :     x = fx;

  0089c	f3 0f 10 85 7c
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$20[ebp]
  008a4	f3 0f 11 45 9c	 movss	 DWORD PTR _AB$187[ebp], xmm0

; 181  :     y = fy;

  008a9	f3 0f 10 85 80
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$21[ebp]
  008b1	f3 0f 11 45 a0	 movss	 DWORD PTR _AB$187[ebp+4], xmm0

; 182  :     z = fz;

  008b6	f3 0f 10 85 84
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$22[ebp]
  008be	f3 0f 11 45 a4	 movss	 DWORD PTR _AB$187[ebp+8], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  008c3	f3 0f 10 45 a4	 movss	 xmm0, DWORD PTR _AB$187[ebp+8]
  008c8	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  008cd	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR _AB$187[ebp+4]
  008d2	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _La$[ebp+4]
  008d7	f3 0f 10 55 9c	 movss	 xmm2, DWORD PTR _AB$187[ebp]
  008dc	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$[ebp]
  008e1	f3 0f 58 d1	 addss	 xmm2, xmm1
  008e5	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  008e9	f3 0f 5e 95 24
	fd ff ff	 divss	 xmm2, DWORD PTR _D$130[ebp]
  008f1	8b 85 a0 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  008f7	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  008fb	8b 85 a0 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00901	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00909	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  0090c	76 14		 jbe	 SHORT $LN107@IntersectL
  0090e	8b 85 a0 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00914	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00918	f3 0f 11 85 20
	fd ff ff	 movss	 DWORD PTR tv1036[ebp], xmm0
  00920	eb 10		 jmp	 SHORT $LN108@IntersectL
$LN107@IntersectL:
  00922	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0092a	f3 0f 11 85 20
	fd ff ff	 movss	 DWORD PTR tv1036[ebp], xmm0
$LN108@IntersectL:
  00932	0f 57 c0	 xorps	 xmm0, xmm0
  00935	0f 2f 85 20 fd
	ff ff		 comiss	 xmm0, DWORD PTR tv1036[ebp]
  0093c	76 0d		 jbe	 SHORT $LN111@IntersectL
  0093e	0f 57 c0	 xorps	 xmm0, xmm0
  00941	f3 0f 11 85 18
	fd ff ff	 movss	 DWORD PTR tv1040[ebp], xmm0
  00949	eb 47		 jmp	 SHORT $LN112@IntersectL
$LN111@IntersectL:
  0094b	8b 85 a0 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00951	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00959	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  0095c	76 14		 jbe	 SHORT $LN109@IntersectL
  0095e	8b 85 a0 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00964	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00968	f3 0f 11 85 1c
	fd ff ff	 movss	 DWORD PTR tv1039[ebp], xmm0
  00970	eb 10		 jmp	 SHORT $LN110@IntersectL
$LN109@IntersectL:
  00972	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0097a	f3 0f 11 85 1c
	fd ff ff	 movss	 DWORD PTR tv1039[ebp], xmm0
$LN110@IntersectL:
  00982	f3 0f 10 85 1c
	fd ff ff	 movss	 xmm0, DWORD PTR tv1039[ebp]
  0098a	f3 0f 11 85 18
	fd ff ff	 movss	 DWORD PTR tv1040[ebp], xmm0
$LN112@IntersectL:
  00992	8b 85 a0 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00998	f3 0f 10 85 18
	fd ff ff	 movss	 xmm0, DWORD PTR tv1040[ebp]
  009a0	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 49   : 	Nearest = A1 + parameter * L;

  009a4	8b 85 a0 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  009aa	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  009ae	f3 0f 11 85 64
	fd ff ff	 movss	 DWORD PTR _f$136[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  009b6	f3 0f 10 85 64
	fd ff ff	 movss	 xmm0, DWORD PTR _f$136[ebp]
  009be	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _La$[ebp]
  009c3	f3 0f 11 85 88
	fa ff ff	 movss	 DWORD PTR _fx$23[ebp], xmm0
  009cb	f3 0f 10 85 64
	fd ff ff	 movss	 xmm0, DWORD PTR _f$136[ebp]
  009d3	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _La$[ebp+4]
  009d8	f3 0f 11 85 8c
	fa ff ff	 movss	 DWORD PTR _fy$24[ebp], xmm0
  009e0	f3 0f 10 85 64
	fd ff ff	 movss	 xmm0, DWORD PTR _f$136[ebp]
  009e8	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  009ed	f3 0f 11 85 90
	fa ff ff	 movss	 DWORD PTR _fz$25[ebp], xmm0

; 180  :     x = fx;

  009f5	f3 0f 10 85 88
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$23[ebp]
  009fd	f3 0f 11 45 a8	 movss	 DWORD PTR $T188[ebp], xmm0

; 181  :     y = fy;

  00a02	f3 0f 10 85 8c
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$24[ebp]
  00a0a	f3 0f 11 45 ac	 movss	 DWORD PTR $T188[ebp+4], xmm0

; 182  :     z = fz;

  00a0f	f3 0f 10 85 90
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$25[ebp]
  00a17	f3 0f 11 45 b0	 movss	 DWORD PTR $T188[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a1c	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  00a1f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00a23	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR $T188[ebp]
  00a28	f3 0f 11 85 94
	fa ff ff	 movss	 DWORD PTR _fx$26[ebp], xmm0
  00a30	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  00a33	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00a38	f3 0f 58 45 ac	 addss	 xmm0, DWORD PTR $T188[ebp+4]
  00a3d	f3 0f 11 85 98
	fa ff ff	 movss	 DWORD PTR _fy$27[ebp], xmm0
  00a45	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  00a48	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00a4d	f3 0f 58 45 b0	 addss	 xmm0, DWORD PTR $T188[ebp+8]
  00a52	f3 0f 11 85 9c
	fa ff ff	 movss	 DWORD PTR _fz$28[ebp], xmm0

; 180  :     x = fx;

  00a5a	f3 0f 10 85 94
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$26[ebp]
  00a62	f3 0f 11 85 f8
	fd ff ff	 movss	 DWORD PTR $T152[ebp], xmm0

; 181  :     y = fy;

  00a6a	f3 0f 10 85 98
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$27[ebp]
  00a72	f3 0f 11 85 fc
	fd ff ff	 movss	 DWORD PTR $T152[ebp+4], xmm0

; 182  :     z = fz;

  00a7a	f3 0f 10 85 9c
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$28[ebp]
  00a82	f3 0f 11 85 00
	fe ff ff	 movss	 DWORD PTR $T152[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00a8a	8d b5 f8 fd ff
	ff		 lea	 esi, DWORD PTR $T152[ebp]
  00a90	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  00a93	a5		 movsd
  00a94	a5		 movsd
  00a95	a5		 movsd
$LN104@IntersectL:

; 110  : 		FindNearestPointOnLineSegment(A1, La, B2,

  00a96	6a 04		 push	 4
  00a98	58		 pop	 eax
  00a99	c1 e0 00	 shl	 eax, 0
  00a9c	8d 84 05 a4 fd
	ff ff		 lea	 eax, DWORD PTR _s$145[ebp+eax]
  00aa3	89 85 98 fd ff
	ff		 mov	 DWORD PTR _parameter$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00aa9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _La$[ebp+8]
  00aae	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  00ab3	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _La$[ebp+4]
  00ab8	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _La$[ebp+4]
  00abd	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$[ebp]
  00ac2	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$[ebp]
  00ac7	f3 0f 58 d1	 addss	 xmm2, xmm1
  00acb	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 34   : 	float D = D3DXVec3LengthSq(&L);

  00acf	f3 0f 11 95 14
	fd ff ff	 movss	 DWORD PTR _D$129[ebp], xmm2

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  00ad7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00adf	0f 2f 85 14 fd
	ff ff		 comiss	 xmm0, DWORD PTR _D$129[ebp]
  00ae6	76 11		 jbe	 SHORT $LN132@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  00ae8	8b 75 08	 mov	 esi, DWORD PTR _A1$[ebp]
  00aeb	8d bd bc fd ff
	ff		 lea	 edi, DWORD PTR _tp$147[ebp]
  00af1	a5		 movsd
  00af2	a5		 movsd
  00af3	a5		 movsd

; 38   : 		return;

  00af4	e9 43 02 00 00	 jmp	 $LN131@IntersectL
$LN132@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00af9	8b 45 14	 mov	 eax, DWORD PTR _B2$[ebp]
  00afc	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  00aff	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00b03	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  00b07	f3 0f 11 85 a0
	fa ff ff	 movss	 DWORD PTR _fx$29[ebp], xmm0
  00b0f	8b 45 14	 mov	 eax, DWORD PTR _B2$[ebp]
  00b12	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  00b15	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00b1a	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  00b1f	f3 0f 11 85 a4
	fa ff ff	 movss	 DWORD PTR _fy$30[ebp], xmm0
  00b27	8b 45 14	 mov	 eax, DWORD PTR _B2$[ebp]
  00b2a	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  00b2d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00b32	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  00b37	f3 0f 11 85 a8
	fa ff ff	 movss	 DWORD PTR _fz$31[ebp], xmm0

; 180  :     x = fx;

  00b3f	f3 0f 10 85 a0
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$29[ebp]
  00b47	f3 0f 11 45 b4	 movss	 DWORD PTR _AB$189[ebp], xmm0

; 181  :     y = fy;

  00b4c	f3 0f 10 85 a4
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$30[ebp]
  00b54	f3 0f 11 45 b8	 movss	 DWORD PTR _AB$189[ebp+4], xmm0

; 182  :     z = fz;

  00b59	f3 0f 10 85 a8
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$31[ebp]
  00b61	f3 0f 11 45 bc	 movss	 DWORD PTR _AB$189[ebp+8], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00b66	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _AB$189[ebp+8]
  00b6b	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  00b70	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _AB$189[ebp+4]
  00b75	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _La$[ebp+4]
  00b7a	f3 0f 10 55 b4	 movss	 xmm2, DWORD PTR _AB$189[ebp]
  00b7f	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$[ebp]
  00b84	f3 0f 58 d1	 addss	 xmm2, xmm1
  00b88	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  00b8c	f3 0f 5e 95 14
	fd ff ff	 divss	 xmm2, DWORD PTR _D$129[ebp]
  00b94	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00b9a	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00b9e	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00ba4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00bac	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  00baf	76 14		 jbe	 SHORT $LN134@IntersectL
  00bb1	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00bb7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00bbb	f3 0f 11 85 10
	fd ff ff	 movss	 DWORD PTR tv1291[ebp], xmm0
  00bc3	eb 10		 jmp	 SHORT $LN135@IntersectL
$LN134@IntersectL:
  00bc5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00bcd	f3 0f 11 85 10
	fd ff ff	 movss	 DWORD PTR tv1291[ebp], xmm0
$LN135@IntersectL:
  00bd5	0f 57 c0	 xorps	 xmm0, xmm0
  00bd8	0f 2f 85 10 fd
	ff ff		 comiss	 xmm0, DWORD PTR tv1291[ebp]
  00bdf	76 0d		 jbe	 SHORT $LN138@IntersectL
  00be1	0f 57 c0	 xorps	 xmm0, xmm0
  00be4	f3 0f 11 85 08
	fd ff ff	 movss	 DWORD PTR tv1295[ebp], xmm0
  00bec	eb 47		 jmp	 SHORT $LN139@IntersectL
$LN138@IntersectL:
  00bee	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00bf4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00bfc	0f 2f 00	 comiss	 xmm0, DWORD PTR [eax]
  00bff	76 14		 jbe	 SHORT $LN136@IntersectL
  00c01	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00c07	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00c0b	f3 0f 11 85 0c
	fd ff ff	 movss	 DWORD PTR tv1294[ebp], xmm0
  00c13	eb 10		 jmp	 SHORT $LN137@IntersectL
$LN136@IntersectL:
  00c15	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00c1d	f3 0f 11 85 0c
	fd ff ff	 movss	 DWORD PTR tv1294[ebp], xmm0
$LN137@IntersectL:
  00c25	f3 0f 10 85 0c
	fd ff ff	 movss	 xmm0, DWORD PTR tv1294[ebp]
  00c2d	f3 0f 11 85 08
	fd ff ff	 movss	 DWORD PTR tv1295[ebp], xmm0
$LN139@IntersectL:
  00c35	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00c3b	f3 0f 10 85 08
	fd ff ff	 movss	 xmm0, DWORD PTR tv1295[ebp]
  00c43	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 49   : 	Nearest = A1 + parameter * L;

  00c47	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _parameter$[ebp]
  00c4d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00c51	f3 0f 11 85 68
	fd ff ff	 movss	 DWORD PTR _f$137[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00c59	f3 0f 10 85 68
	fd ff ff	 movss	 xmm0, DWORD PTR _f$137[ebp]
  00c61	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _La$[ebp]
  00c66	f3 0f 11 85 b0
	fa ff ff	 movss	 DWORD PTR _fx$33[ebp], xmm0
  00c6e	f3 0f 10 85 68
	fd ff ff	 movss	 xmm0, DWORD PTR _f$137[ebp]
  00c76	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _La$[ebp+4]
  00c7b	f3 0f 11 85 b4
	fa ff ff	 movss	 DWORD PTR _fy$34[ebp], xmm0
  00c83	f3 0f 10 85 68
	fd ff ff	 movss	 xmm0, DWORD PTR _f$137[ebp]
  00c8b	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  00c90	f3 0f 11 85 b8
	fa ff ff	 movss	 DWORD PTR _fz$35[ebp], xmm0

; 180  :     x = fx;

  00c98	f3 0f 10 85 b0
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$33[ebp]
  00ca0	f3 0f 11 45 c0	 movss	 DWORD PTR $T190[ebp], xmm0

; 181  :     y = fy;

  00ca5	f3 0f 10 85 b4
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$34[ebp]
  00cad	f3 0f 11 45 c4	 movss	 DWORD PTR $T190[ebp+4], xmm0

; 182  :     z = fz;

  00cb2	f3 0f 10 85 b8
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$35[ebp]
  00cba	f3 0f 11 45 c8	 movss	 DWORD PTR $T190[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00cbf	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  00cc2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00cc6	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR $T190[ebp]
  00ccb	f3 0f 11 85 bc
	fa ff ff	 movss	 DWORD PTR _fx$36[ebp], xmm0
  00cd3	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  00cd6	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00cdb	f3 0f 58 45 c4	 addss	 xmm0, DWORD PTR $T190[ebp+4]
  00ce0	f3 0f 11 85 c0
	fa ff ff	 movss	 DWORD PTR _fy$37[ebp], xmm0
  00ce8	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  00ceb	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00cf0	f3 0f 58 45 c8	 addss	 xmm0, DWORD PTR $T190[ebp+8]
  00cf5	f3 0f 11 85 c4
	fa ff ff	 movss	 DWORD PTR _fz$38[ebp], xmm0

; 180  :     x = fx;

  00cfd	f3 0f 10 85 bc
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$36[ebp]
  00d05	f3 0f 11 85 04
	fe ff ff	 movss	 DWORD PTR $T153[ebp], xmm0

; 181  :     y = fy;

  00d0d	f3 0f 10 85 c0
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$37[ebp]
  00d15	f3 0f 11 85 08
	fe ff ff	 movss	 DWORD PTR $T153[ebp+4], xmm0

; 182  :     z = fz;

  00d1d	f3 0f 10 85 c4
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$38[ebp]
  00d25	f3 0f 11 85 0c
	fe ff ff	 movss	 DWORD PTR $T153[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00d2d	8d b5 04 fe ff
	ff		 lea	 esi, DWORD PTR $T153[ebp]
  00d33	8d bd bc fd ff
	ff		 lea	 edi, DWORD PTR _tp$147[ebp]
  00d39	a5		 movsd
  00d3a	a5		 movsd
  00d3b	a5		 movsd
$LN131@IntersectL:

; 112  : 		if (s[0] < 0.f && s[1] < 0.f)

  00d3c	6a 04		 push	 4
  00d3e	58		 pop	 eax
  00d3f	6b c0 00	 imul	 eax, eax, 0
  00d42	0f 57 c0	 xorps	 xmm0, xmm0
  00d45	0f 2f 84 05 a4
	fd ff ff	 comiss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00d4d	76 54		 jbe	 SHORT $LN83@IntersectL
  00d4f	6a 04		 push	 4
  00d51	58		 pop	 eax
  00d52	c1 e0 00	 shl	 eax, 0
  00d55	0f 57 c0	 xorps	 xmm0, xmm0
  00d58	0f 2f 84 05 a4
	fd ff ff	 comiss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00d60	76 41		 jbe	 SHORT $LN83@IntersectL

; 113  : 		{
; 114  : 			OutA = A1;

  00d62	8b 75 08	 mov	 esi, DWORD PTR _A1$[ebp]
  00d65	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  00d68	a5		 movsd
  00d69	a5		 movsd
  00d6a	a5		 movsd

; 115  : 			if (s[0] < s[1])

  00d6b	6a 04		 push	 4
  00d6d	58		 pop	 eax
  00d6e	6b c0 00	 imul	 eax, eax, 0
  00d71	6a 04		 push	 4
  00d73	59		 pop	 ecx
  00d74	c1 e1 00	 shl	 ecx, 0
  00d77	f3 0f 10 84 0d
	a4 fd ff ff	 movss	 xmm0, DWORD PTR _s$145[ebp+ecx]
  00d80	0f 2f 84 05 a4
	fd ff ff	 comiss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00d88	76 0b		 jbe	 SHORT $LN85@IntersectL

; 116  : 			{
; 117  : 				OutB =B2;

  00d8a	8b 75 14	 mov	 esi, DWORD PTR _B2$[ebp]
  00d8d	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  00d90	a5		 movsd
  00d91	a5		 movsd
  00d92	a5		 movsd

; 118  : 			}

  00d93	eb 09		 jmp	 SHORT $LN86@IntersectL
$LN85@IntersectL:

; 119  : 			else
; 120  : 			{
; 121  : 				OutB = B1;

  00d95	8b 75 10	 mov	 esi, DWORD PTR _B1$[ebp]
  00d98	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  00d9b	a5		 movsd
  00d9c	a5		 movsd
  00d9d	a5		 movsd
$LN86@IntersectL:

; 122  : 			}
; 123  : 		}

  00d9e	e9 7a 05 00 00	 jmp	 $LN164@IntersectL
$LN83@IntersectL:

; 124  : 		else if (s[0] > 1.f && s[1] > 1.f)

  00da3	6a 04		 push	 4
  00da5	58		 pop	 eax
  00da6	6b c0 00	 imul	 eax, eax, 0
  00da9	f3 0f 10 84 05
	a4 fd ff ff	 movss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00db2	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00db9	76 59		 jbe	 SHORT $LN87@IntersectL
  00dbb	6a 04		 push	 4
  00dbd	58		 pop	 eax
  00dbe	c1 e0 00	 shl	 eax, 0
  00dc1	f3 0f 10 84 05
	a4 fd ff ff	 movss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00dca	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00dd1	76 41		 jbe	 SHORT $LN87@IntersectL

; 125  : 		{
; 126  : 			OutA = A2;

  00dd3	8b 75 0c	 mov	 esi, DWORD PTR _A2$[ebp]
  00dd6	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  00dd9	a5		 movsd
  00dda	a5		 movsd
  00ddb	a5		 movsd

; 127  : 			if (s[0] < s[1])

  00ddc	6a 04		 push	 4
  00dde	58		 pop	 eax
  00ddf	6b c0 00	 imul	 eax, eax, 0
  00de2	6a 04		 push	 4
  00de4	59		 pop	 ecx
  00de5	c1 e1 00	 shl	 ecx, 0
  00de8	f3 0f 10 84 0d
	a4 fd ff ff	 movss	 xmm0, DWORD PTR _s$145[ebp+ecx]
  00df1	0f 2f 84 05 a4
	fd ff ff	 comiss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00df9	76 0b		 jbe	 SHORT $LN89@IntersectL

; 128  : 			{
; 129  : 				OutB = B1;

  00dfb	8b 75 10	 mov	 esi, DWORD PTR _B1$[ebp]
  00dfe	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  00e01	a5		 movsd
  00e02	a5		 movsd
  00e03	a5		 movsd

; 130  : 			}

  00e04	eb 09		 jmp	 SHORT $LN90@IntersectL
$LN89@IntersectL:

; 131  : 			else
; 132  : 			{
; 133  : 				OutB = B2;

  00e06	8b 75 14	 mov	 esi, DWORD PTR _B2$[ebp]
  00e09	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  00e0c	a5		 movsd
  00e0d	a5		 movsd
  00e0e	a5		 movsd
$LN90@IntersectL:

; 134  : 			}
; 135  : 		}

  00e0f	e9 09 05 00 00	 jmp	 $LN164@IntersectL
$LN87@IntersectL:

; 136  : 		else
; 137  : 		{
; 138  : 			temp = 0.5f*(FMAX(0.0f, FMIN(1.0f, s[0])) + FMAX(0.0f, FMIN(1.0f, s[1])));

  00e14	6a 04		 push	 4
  00e16	58		 pop	 eax
  00e17	6b c0 00	 imul	 eax, eax, 0
  00e1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e22	0f 2f 84 05 a4
	fd ff ff	 comiss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00e2a	76 19		 jbe	 SHORT $LN92@IntersectL
  00e2c	6a 04		 push	 4
  00e2e	58		 pop	 eax
  00e2f	6b c0 00	 imul	 eax, eax, 0
  00e32	f3 0f 10 84 05
	a4 fd ff ff	 movss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00e3b	f3 0f 11 85 04
	fd ff ff	 movss	 DWORD PTR tv985[ebp], xmm0
  00e43	eb 10		 jmp	 SHORT $LN93@IntersectL
$LN92@IntersectL:
  00e45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e4d	f3 0f 11 85 04
	fd ff ff	 movss	 DWORD PTR tv985[ebp], xmm0
$LN93@IntersectL:
  00e55	0f 57 c0	 xorps	 xmm0, xmm0
  00e58	0f 2f 85 04 fd
	ff ff		 comiss	 xmm0, DWORD PTR tv985[ebp]
  00e5f	76 0d		 jbe	 SHORT $LN96@IntersectL
  00e61	0f 57 c0	 xorps	 xmm0, xmm0
  00e64	f3 0f 11 85 f4
	fc ff ff	 movss	 DWORD PTR tv993[ebp], xmm0
  00e6c	eb 51		 jmp	 SHORT $LN97@IntersectL
$LN96@IntersectL:
  00e6e	6a 04		 push	 4
  00e70	58		 pop	 eax
  00e71	6b c0 00	 imul	 eax, eax, 0
  00e74	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e7c	0f 2f 84 05 a4
	fd ff ff	 comiss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00e84	76 19		 jbe	 SHORT $LN94@IntersectL
  00e86	6a 04		 push	 4
  00e88	58		 pop	 eax
  00e89	6b c0 00	 imul	 eax, eax, 0
  00e8c	f3 0f 10 84 05
	a4 fd ff ff	 movss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00e95	f3 0f 11 85 00
	fd ff ff	 movss	 DWORD PTR tv992[ebp], xmm0
  00e9d	eb 10		 jmp	 SHORT $LN95@IntersectL
$LN94@IntersectL:
  00e9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ea7	f3 0f 11 85 00
	fd ff ff	 movss	 DWORD PTR tv992[ebp], xmm0
$LN95@IntersectL:
  00eaf	f3 0f 10 85 00
	fd ff ff	 movss	 xmm0, DWORD PTR tv992[ebp]
  00eb7	f3 0f 11 85 f4
	fc ff ff	 movss	 DWORD PTR tv993[ebp], xmm0
$LN97@IntersectL:
  00ebf	6a 04		 push	 4
  00ec1	58		 pop	 eax
  00ec2	c1 e0 00	 shl	 eax, 0
  00ec5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ecd	0f 2f 84 05 a4
	fd ff ff	 comiss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00ed5	76 19		 jbe	 SHORT $LN98@IntersectL
  00ed7	6a 04		 push	 4
  00ed9	58		 pop	 eax
  00eda	c1 e0 00	 shl	 eax, 0
  00edd	f3 0f 10 84 05
	a4 fd ff ff	 movss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00ee6	f3 0f 11 85 fc
	fc ff ff	 movss	 DWORD PTR tv999[ebp], xmm0
  00eee	eb 10		 jmp	 SHORT $LN99@IntersectL
$LN98@IntersectL:
  00ef0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00ef8	f3 0f 11 85 fc
	fc ff ff	 movss	 DWORD PTR tv999[ebp], xmm0
$LN99@IntersectL:
  00f00	0f 57 c0	 xorps	 xmm0, xmm0
  00f03	0f 2f 85 fc fc
	ff ff		 comiss	 xmm0, DWORD PTR tv999[ebp]
  00f0a	76 0d		 jbe	 SHORT $LN102@IntersectL
  00f0c	0f 57 c0	 xorps	 xmm0, xmm0
  00f0f	f3 0f 11 85 f0
	fc ff ff	 movss	 DWORD PTR tv1007[ebp], xmm0
  00f17	eb 51		 jmp	 SHORT $LN103@IntersectL
$LN102@IntersectL:
  00f19	6a 04		 push	 4
  00f1b	58		 pop	 eax
  00f1c	c1 e0 00	 shl	 eax, 0
  00f1f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f27	0f 2f 84 05 a4
	fd ff ff	 comiss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00f2f	76 19		 jbe	 SHORT $LN100@IntersectL
  00f31	6a 04		 push	 4
  00f33	58		 pop	 eax
  00f34	c1 e0 00	 shl	 eax, 0
  00f37	f3 0f 10 84 05
	a4 fd ff ff	 movss	 xmm0, DWORD PTR _s$145[ebp+eax]
  00f40	f3 0f 11 85 f8
	fc ff ff	 movss	 DWORD PTR tv1006[ebp], xmm0
  00f48	eb 10		 jmp	 SHORT $LN101@IntersectL
$LN100@IntersectL:
  00f4a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f52	f3 0f 11 85 f8
	fc ff ff	 movss	 DWORD PTR tv1006[ebp], xmm0
$LN101@IntersectL:
  00f5a	f3 0f 10 85 f8
	fc ff ff	 movss	 xmm0, DWORD PTR tv1006[ebp]
  00f62	f3 0f 11 85 f0
	fc ff ff	 movss	 DWORD PTR tv1007[ebp], xmm0
$LN103@IntersectL:
  00f6a	f3 0f 10 85 f4
	fc ff ff	 movss	 xmm0, DWORD PTR tv993[ebp]
  00f72	f3 0f 58 85 f0
	fc ff ff	 addss	 xmm0, DWORD PTR tv1007[ebp]
  00f7a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00f82	f3 0f 11 85 ac
	fd ff ff	 movss	 DWORD PTR _temp$146[ebp], xmm0

; 139  : 			OutA = A1 + temp * La;

  00f8a	f3 0f 10 85 ac
	fd ff ff	 movss	 xmm0, DWORD PTR _temp$146[ebp]
  00f92	f3 0f 11 85 6c
	fd ff ff	 movss	 DWORD PTR _f$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00f9a	f3 0f 10 85 6c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  00fa2	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _La$[ebp]
  00fa7	f3 0f 11 85 c8
	fa ff ff	 movss	 DWORD PTR _fx$39[ebp], xmm0
  00faf	f3 0f 10 85 6c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  00fb7	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _La$[ebp+4]
  00fbc	f3 0f 11 85 cc
	fa ff ff	 movss	 DWORD PTR _fy$40[ebp], xmm0
  00fc4	f3 0f 10 85 6c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  00fcc	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  00fd1	f3 0f 11 85 d0
	fa ff ff	 movss	 DWORD PTR _fz$41[ebp], xmm0

; 180  :     x = fx;

  00fd9	f3 0f 10 85 c8
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$39[ebp]
  00fe1	f3 0f 11 45 cc	 movss	 DWORD PTR $T191[ebp], xmm0

; 181  :     y = fy;

  00fe6	f3 0f 10 85 cc
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$40[ebp]
  00fee	f3 0f 11 45 d0	 movss	 DWORD PTR $T191[ebp+4], xmm0

; 182  :     z = fz;

  00ff3	f3 0f 10 85 d0
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$41[ebp]
  00ffb	f3 0f 11 45 d4	 movss	 DWORD PTR $T191[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  01000	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  01003	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01007	f3 0f 58 45 cc	 addss	 xmm0, DWORD PTR $T191[ebp]
  0100c	f3 0f 11 85 d4
	fa ff ff	 movss	 DWORD PTR _fx$42[ebp], xmm0
  01014	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  01017	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0101c	f3 0f 58 45 d0	 addss	 xmm0, DWORD PTR $T191[ebp+4]
  01021	f3 0f 11 85 d8
	fa ff ff	 movss	 DWORD PTR _fy$43[ebp], xmm0
  01029	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  0102c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01031	f3 0f 58 45 d4	 addss	 xmm0, DWORD PTR $T191[ebp+8]
  01036	f3 0f 11 85 dc
	fa ff ff	 movss	 DWORD PTR _fz$44[ebp], xmm0

; 180  :     x = fx;

  0103e	f3 0f 10 85 d4
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$42[ebp]
  01046	f3 0f 11 85 c8
	fd ff ff	 movss	 DWORD PTR $T148[ebp], xmm0

; 181  :     y = fy;

  0104e	f3 0f 10 85 d8
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$43[ebp]
  01056	f3 0f 11 85 cc
	fd ff ff	 movss	 DWORD PTR $T148[ebp+4], xmm0

; 182  :     z = fz;

  0105e	f3 0f 10 85 dc
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$44[ebp]
  01066	f3 0f 11 85 d0
	fd ff ff	 movss	 DWORD PTR $T148[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 139  : 			OutA = A1 + temp * La;

  0106e	8d b5 c8 fd ff
	ff		 lea	 esi, DWORD PTR $T148[ebp]
  01074	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  01077	a5		 movsd
  01078	a5		 movsd
  01079	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0107a	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Lb$[ebp+8]
  0107f	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  01084	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Lb$[ebp+4]
  01089	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  0108e	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _Lb$[ebp]
  01093	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  01098	f3 0f 58 d1	 addss	 xmm2, xmm1
  0109c	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 34   : 	float D = D3DXVec3LengthSq(&L);

  010a0	f3 0f 11 95 ec
	fc ff ff	 movss	 DWORD PTR _D$128[ebp], xmm2

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  010a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  010b0	0f 2f 85 ec fc
	ff ff		 comiss	 xmm0, DWORD PTR _D$128[ebp]
  010b7	76 0e		 jbe	 SHORT $LN165@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  010b9	8b 75 10	 mov	 esi, DWORD PTR _B1$[ebp]
  010bc	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  010bf	a5		 movsd
  010c0	a5		 movsd
  010c1	a5		 movsd

; 38   : 		return;

  010c2	e9 56 02 00 00	 jmp	 $LN164@IntersectL
$LN165@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  010c7	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  010ca	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  010cd	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  010d1	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  010d5	f3 0f 11 85 e0
	fa ff ff	 movss	 DWORD PTR _fx$45[ebp], xmm0
  010dd	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  010e0	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  010e3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  010e8	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  010ed	f3 0f 11 85 30
	fb ff ff	 movss	 DWORD PTR _fy$65[ebp], xmm0
  010f5	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  010f8	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  010fb	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01100	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01105	f3 0f 11 85 ac
	fa ff ff	 movss	 DWORD PTR _fz$32[ebp], xmm0

; 180  :     x = fx;

  0110d	f3 0f 10 85 e0
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$45[ebp]
  01115	f3 0f 11 85 54
	ff ff ff	 movss	 DWORD PTR _AB$181[ebp], xmm0

; 181  :     y = fy;

  0111d	f3 0f 10 85 30
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$65[ebp]
  01125	f3 0f 11 85 58
	ff ff ff	 movss	 DWORD PTR _AB$181[ebp+4], xmm0

; 182  :     z = fz;

  0112d	f3 0f 10 85 ac
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$32[ebp]
  01135	f3 0f 11 85 5c
	ff ff ff	 movss	 DWORD PTR _AB$181[ebp+8], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0113d	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _AB$181[ebp+8]
  01145	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  0114a	f3 0f 10 8d 58
	ff ff ff	 movss	 xmm1, DWORD PTR _AB$181[ebp+4]
  01152	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  01157	f3 0f 10 95 54
	ff ff ff	 movss	 xmm2, DWORD PTR _AB$181[ebp]
  0115f	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  01164	f3 0f 58 d1	 addss	 xmm2, xmm1
  01168	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  0116c	f3 0f 5e 95 ec
	fc ff ff	 divss	 xmm2, DWORD PTR _D$128[ebp]
  01174	f3 0f 11 95 ac
	fd ff ff	 movss	 DWORD PTR _temp$146[ebp], xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  0117c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01184	0f 2f 85 ac fd
	ff ff		 comiss	 xmm0, DWORD PTR _temp$146[ebp]
  0118b	76 12		 jbe	 SHORT $LN167@IntersectL
  0118d	f3 0f 10 85 ac
	fd ff ff	 movss	 xmm0, DWORD PTR _temp$146[ebp]
  01195	f3 0f 11 85 e8
	fc ff ff	 movss	 DWORD PTR tv1626[ebp], xmm0
  0119d	eb 10		 jmp	 SHORT $LN168@IntersectL
$LN167@IntersectL:
  0119f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  011a7	f3 0f 11 85 e8
	fc ff ff	 movss	 DWORD PTR tv1626[ebp], xmm0
$LN168@IntersectL:
  011af	0f 57 c0	 xorps	 xmm0, xmm0
  011b2	0f 2f 85 e8 fc
	ff ff		 comiss	 xmm0, DWORD PTR tv1626[ebp]
  011b9	76 0d		 jbe	 SHORT $LN171@IntersectL
  011bb	0f 57 c0	 xorps	 xmm0, xmm0
  011be	f3 0f 11 85 e0
	fc ff ff	 movss	 DWORD PTR tv1630[ebp], xmm0
  011c6	eb 43		 jmp	 SHORT $LN172@IntersectL
$LN171@IntersectL:
  011c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  011d0	0f 2f 85 ac fd
	ff ff		 comiss	 xmm0, DWORD PTR _temp$146[ebp]
  011d7	76 12		 jbe	 SHORT $LN169@IntersectL
  011d9	f3 0f 10 85 ac
	fd ff ff	 movss	 xmm0, DWORD PTR _temp$146[ebp]
  011e1	f3 0f 11 85 e4
	fc ff ff	 movss	 DWORD PTR tv1629[ebp], xmm0
  011e9	eb 10		 jmp	 SHORT $LN170@IntersectL
$LN169@IntersectL:
  011eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  011f3	f3 0f 11 85 e4
	fc ff ff	 movss	 DWORD PTR tv1629[ebp], xmm0
$LN170@IntersectL:
  011fb	f3 0f 10 85 e4
	fc ff ff	 movss	 xmm0, DWORD PTR tv1629[ebp]
  01203	f3 0f 11 85 e0
	fc ff ff	 movss	 DWORD PTR tv1630[ebp], xmm0
$LN172@IntersectL:
  0120b	f3 0f 10 85 e0
	fc ff ff	 movss	 xmm0, DWORD PTR tv1630[ebp]
  01213	f3 0f 11 85 ac
	fd ff ff	 movss	 DWORD PTR _temp$146[ebp], xmm0

; 49   : 	Nearest = A1 + parameter * L;

  0121b	f3 0f 10 85 ac
	fd ff ff	 movss	 xmm0, DWORD PTR _temp$146[ebp]
  01223	f3 0f 11 85 74
	fd ff ff	 movss	 DWORD PTR _f$138[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0122b	f3 0f 10 85 74
	fd ff ff	 movss	 xmm0, DWORD PTR _f$138[ebp]
  01233	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _Lb$[ebp]
  01238	f3 0f 11 85 40
	fc ff ff	 movss	 DWORD PTR _fx$121[ebp], xmm0
  01240	f3 0f 10 85 74
	fd ff ff	 movss	 xmm0, DWORD PTR _f$138[ebp]
  01248	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _Lb$[ebp+4]
  0124d	f3 0f 11 85 3c
	fc ff ff	 movss	 DWORD PTR _fy$120[ebp], xmm0
  01255	f3 0f 10 85 74
	fd ff ff	 movss	 xmm0, DWORD PTR _f$138[ebp]
  0125d	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  01262	f3 0f 11 85 38
	fc ff ff	 movss	 DWORD PTR _fz$119[ebp], xmm0

; 180  :     x = fx;

  0126a	f3 0f 10 85 40
	fc ff ff	 movss	 xmm0, DWORD PTR _fx$121[ebp]
  01272	f3 0f 11 85 94
	fe ff ff	 movss	 DWORD PTR $T165[ebp], xmm0

; 181  :     y = fy;

  0127a	f3 0f 10 85 3c
	fc ff ff	 movss	 xmm0, DWORD PTR _fy$120[ebp]
  01282	f3 0f 11 85 98
	fe ff ff	 movss	 DWORD PTR $T165[ebp+4], xmm0

; 182  :     z = fz;

  0128a	f3 0f 10 85 38
	fc ff ff	 movss	 xmm0, DWORD PTR _fz$119[ebp]
  01292	f3 0f 11 85 9c
	fe ff ff	 movss	 DWORD PTR $T165[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0129a	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  0129d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  012a1	f3 0f 58 85 94
	fe ff ff	 addss	 xmm0, DWORD PTR $T165[ebp]
  012a9	f3 0f 11 85 34
	fc ff ff	 movss	 DWORD PTR _fx$118[ebp], xmm0
  012b1	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  012b4	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  012b9	f3 0f 58 85 98
	fe ff ff	 addss	 xmm0, DWORD PTR $T165[ebp+4]
  012c1	f3 0f 11 85 30
	fc ff ff	 movss	 DWORD PTR _fy$117[ebp], xmm0
  012c9	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  012cc	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  012d1	f3 0f 58 85 9c
	fe ff ff	 addss	 xmm0, DWORD PTR $T165[ebp+8]
  012d9	f3 0f 11 85 2c
	fc ff ff	 movss	 DWORD PTR _fz$116[ebp], xmm0

; 180  :     x = fx;

  012e1	f3 0f 10 85 34
	fc ff ff	 movss	 xmm0, DWORD PTR _fx$118[ebp]
  012e9	f3 0f 11 85 ec
	fd ff ff	 movss	 DWORD PTR $T151[ebp], xmm0

; 181  :     y = fy;

  012f1	f3 0f 10 85 30
	fc ff ff	 movss	 xmm0, DWORD PTR _fy$117[ebp]
  012f9	f3 0f 11 85 f0
	fd ff ff	 movss	 DWORD PTR $T151[ebp+4], xmm0

; 182  :     z = fz;

  01301	f3 0f 10 85 2c
	fc ff ff	 movss	 xmm0, DWORD PTR _fz$116[ebp]
  01309	f3 0f 11 85 f4
	fd ff ff	 movss	 DWORD PTR $T151[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  01311	8d b5 ec fd ff
	ff		 lea	 esi, DWORD PTR $T151[ebp]
  01317	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  0131a	a5		 movsd
  0131b	a5		 movsd
  0131c	a5		 movsd
$LN164@IntersectL:

; 267  : 		{
; 268  : 			FindNearestPointOfParallelLineSegments(A1, A2,
; 269  : 				La,
; 270  : 				B1, B2,
; 271  : 				Lb,
; 272  : 				OutA, OutB);
; 273  : 		}

  0131d	e9 5a 17 00 00	 jmp	 $LN209@IntersectL
$LN6@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  01322	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _La$[ebp+8]
  01327	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _AB$192[ebp+8]
  0132c	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _La$[ebp+4]
  01331	f3 0f 59 4d dc	 mulss	 xmm1, DWORD PTR _AB$192[ebp+4]
  01336	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$[ebp]
  0133b	f3 0f 59 55 d8	 mulss	 xmm2, DWORD PTR _AB$192[ebp]
  01340	f3 0f 58 d1	 addss	 xmm2, xmm1
  01344	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 278  : 			float ra = D3DXVec3Dot(&La, &AB);//Lax * ABx + Lay * ABy + Laz * ABz;

  01348	f3 0f 11 95 dc
	fc ff ff	 movss	 DWORD PTR _ra$127[ebp], xmm2
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  01350	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Lb$[ebp+8]
  01355	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _AB$192[ebp+8]
  0135a	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Lb$[ebp+4]
  0135f	f3 0f 59 4d dc	 mulss	 xmm1, DWORD PTR _AB$192[ebp+4]
  01364	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _Lb$[ebp]
  01369	f3 0f 59 55 d8	 mulss	 xmm2, DWORD PTR _AB$192[ebp]
  0136e	f3 0f 58 d1	 addss	 xmm2, xmm1
  01372	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 279  : 			float rb = D3DXVec3Dot(&Lb, &AB);//-Lbx * ABx - Lby * ABy - Lbz * ABz;

  01376	f3 0f 11 95 28
	fc ff ff	 movss	 DWORD PTR _rb$115[ebp], xmm2

; 280  : 			
; 281  : 			float t = (L11 * rb - ra * L12)/DetL; // Equation (12)

  0137e	f3 0f 10 85 8c
	fd ff ff	 movss	 xmm0, DWORD PTR _L11$[ebp]
  01386	f3 0f 59 85 28
	fc ff ff	 mulss	 xmm0, DWORD PTR _rb$115[ebp]
  0138e	f3 0f 10 8d dc
	fc ff ff	 movss	 xmm1, DWORD PTR _ra$127[ebp]
  01396	f3 0f 59 8d 90
	fd ff ff	 mulss	 xmm1, DWORD PTR _L12$142[ebp]
  0139e	f3 0f 5c c1	 subss	 xmm0, xmm1
  013a2	f3 0f 5e 85 88
	fd ff ff	 divss	 xmm0, DWORD PTR _DetL$141[ebp]
  013aa	f3 0f 11 85 9c
	fd ff ff	 movss	 DWORD PTR _t$144[ebp], xmm0

; 282  : 			
; 283  : #ifdef USE_CRAMERS_RULE
; 284  : 			float s = (L22 * ra - rb * L12)/DetL;
; 285  : #else
; 286  : 			float s = (ra-L12*t)/L11;             // Equation (13)

  013b2	f3 0f 10 85 90
	fd ff ff	 movss	 xmm0, DWORD PTR _L12$142[ebp]
  013ba	f3 0f 59 85 9c
	fd ff ff	 mulss	 xmm0, DWORD PTR _t$144[ebp]
  013c2	f3 0f 10 8d dc
	fc ff ff	 movss	 xmm1, DWORD PTR _ra$127[ebp]
  013ca	f3 0f 5c c8	 subss	 xmm1, xmm0
  013ce	f3 0f 5e 8d 8c
	fd ff ff	 divss	 xmm1, DWORD PTR _L11$[ebp]
  013d6	f3 0f 11 8d 94
	fd ff ff	 movss	 DWORD PTR _s$143[ebp], xmm1
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  013de	f3 0f 10 85 94
	fd ff ff	 movss	 xmm0, DWORD PTR _s$143[ebp]
  013e6	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _La$[ebp]
  013eb	f3 0f 11 85 24
	fc ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  013f3	f3 0f 10 85 94
	fd ff ff	 movss	 xmm0, DWORD PTR _s$143[ebp]
  013fb	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _La$[ebp+4]
  01400	f3 0f 11 85 20
	fc ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  01408	f3 0f 10 85 94
	fd ff ff	 movss	 xmm0, DWORD PTR _s$143[ebp]
  01410	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  01415	f3 0f 11 85 1c
	fc ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  0141d	f3 0f 10 85 24
	fc ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  01425	f3 0f 11 85 a0
	fe ff ff	 movss	 DWORD PTR $T166[ebp], xmm0

; 181  :     y = fy;

  0142d	f3 0f 10 85 20
	fc ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  01435	f3 0f 11 85 a4
	fe ff ff	 movss	 DWORD PTR $T166[ebp+4], xmm0

; 182  :     z = fz;

  0143d	f3 0f 10 85 1c
	fc ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  01445	f3 0f 11 85 a8
	fe ff ff	 movss	 DWORD PTR $T166[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0144d	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  01450	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01454	f3 0f 58 85 a0
	fe ff ff	 addss	 xmm0, DWORD PTR $T166[ebp]
  0145c	f3 0f 11 85 18
	fc ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  01464	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  01467	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0146c	f3 0f 58 85 a4
	fe ff ff	 addss	 xmm0, DWORD PTR $T166[ebp+4]
  01474	f3 0f 11 85 14
	fc ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  0147c	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  0147f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01484	f3 0f 58 85 a8
	fe ff ff	 addss	 xmm0, DWORD PTR $T166[ebp+8]
  0148c	f3 0f 11 85 10
	fc ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  01494	f3 0f 10 85 18
	fc ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0149c	f3 0f 11 85 88
	fe ff ff	 movss	 DWORD PTR $T164[ebp], xmm0

; 181  :     y = fy;

  014a4	f3 0f 10 85 14
	fc ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  014ac	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR $T164[ebp+4], xmm0

; 182  :     z = fz;

  014b4	f3 0f 10 85 10
	fc ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  014bc	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR $T164[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  014c4	8d b5 88 fe ff
	ff		 lea	 esi, DWORD PTR $T164[ebp]
  014ca	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  014cd	a5		 movsd
  014ce	a5		 movsd
  014cf	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  014d0	f3 0f 10 85 9c
	fd ff ff	 movss	 xmm0, DWORD PTR _t$144[ebp]
  014d8	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _Lb$[ebp]
  014dd	f3 0f 11 85 0c
	fc ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  014e5	f3 0f 10 85 9c
	fd ff ff	 movss	 xmm0, DWORD PTR _t$144[ebp]
  014ed	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _Lb$[ebp+4]
  014f2	f3 0f 11 85 08
	fc ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  014fa	f3 0f 10 85 9c
	fd ff ff	 movss	 xmm0, DWORD PTR _t$144[ebp]
  01502	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  01507	f3 0f 11 85 04
	fc ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  0150f	f3 0f 10 85 0c
	fc ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  01517	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR $T167[ebp], xmm0

; 181  :     y = fy;

  0151f	f3 0f 10 85 08
	fc ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  01527	f3 0f 11 85 b0
	fe ff ff	 movss	 DWORD PTR $T167[ebp+4], xmm0

; 182  :     z = fz;

  0152f	f3 0f 10 85 04
	fc ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  01537	f3 0f 11 85 b4
	fe ff ff	 movss	 DWORD PTR $T167[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0153f	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  01542	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01546	f3 0f 58 85 ac
	fe ff ff	 addss	 xmm0, DWORD PTR $T167[ebp]
  0154e	f3 0f 11 85 00
	fc ff ff	 movss	 DWORD PTR _fx$[ebp], xmm0
  01556	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  01559	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0155e	f3 0f 58 85 b0
	fe ff ff	 addss	 xmm0, DWORD PTR $T167[ebp+4]
  01566	f3 0f 11 85 fc
	fb ff ff	 movss	 DWORD PTR _fy$[ebp], xmm0
  0156e	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  01571	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01576	f3 0f 58 85 b4
	fe ff ff	 addss	 xmm0, DWORD PTR $T167[ebp+8]
  0157e	f3 0f 11 85 f8
	fb ff ff	 movss	 DWORD PTR _fz$[ebp], xmm0

; 180  :     x = fx;

  01586	f3 0f 10 85 00
	fc ff ff	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0158e	f3 0f 11 85 70
	fe ff ff	 movss	 DWORD PTR $T162[ebp], xmm0

; 181  :     y = fy;

  01596	f3 0f 10 85 fc
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0159e	f3 0f 11 85 74
	fe ff ff	 movss	 DWORD PTR $T162[ebp+4], xmm0

; 182  :     z = fz;

  015a6	f3 0f 10 85 f8
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$[ebp]
  015ae	f3 0f 11 85 78
	fe ff ff	 movss	 DWORD PTR $T162[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 300  : 			OutB = (B1 + t * Lb);

  015b6	8d b5 70 fe ff
	ff		 lea	 esi, DWORD PTR $T162[ebp]
  015bc	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  015bf	a5		 movsd
  015c0	a5		 movsd
  015c1	a5		 movsd

; 301  : 			// otherwise, at least one of s and t is outside of [0,1] and we have to
; 302  : 			// handle this case.
; 303  : 			if ((OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  015c2	0f 57 c0	 xorps	 xmm0, xmm0
  015c5	0f 2f 85 94 fd
	ff ff		 comiss	 xmm0, DWORD PTR _s$143[ebp]
  015cc	77 32		 ja	 SHORT $LN10@IntersectL
  015ce	f3 0f 10 85 94
	fd ff ff	 movss	 xmm0, DWORD PTR _s$143[ebp]
  015d6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  015dd	77 21		 ja	 SHORT $LN10@IntersectL
  015df	0f 57 c0	 xorps	 xmm0, xmm0
  015e2	0f 2f 85 9c fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$144[ebp]
  015e9	77 15		 ja	 SHORT $LN10@IntersectL
  015eb	f3 0f 10 85 9c
	fd ff ff	 movss	 xmm0, DWORD PTR _t$144[ebp]
  015f3	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  015fa	0f 86 7c 14 00
	00		 jbe	 $LN209@IntersectL
$LN10@IntersectL:

; 304  : 			{
; 305  : 				AdjustNearestPoints(A1,La,B1,Lb,

  01600	f3 0f 10 85 94
	fd ff ff	 movss	 xmm0, DWORD PTR _s$143[ebp]
  01608	f3 0f 11 85 b4
	fd ff ff	 movss	 DWORD PTR _s$[ebp], xmm0
  01610	f3 0f 10 85 9c
	fd ff ff	 movss	 xmm0, DWORD PTR _t$144[ebp]
  01618	f3 0f 11 85 b8
	fd ff ff	 movss	 DWORD PTR _t$[ebp], xmm0

; 182  : 	if (OUT_OF_RANGE(s) && OUT_OF_RANGE(t))

  01620	0f 57 c0	 xorps	 xmm0, xmm0
  01623	0f 2f 85 b4 fd
	ff ff		 comiss	 xmm0, DWORD PTR _s$[ebp]
  0162a	77 15		 ja	 SHORT $LN212@IntersectL
  0162c	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  01634	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0163b	0f 86 6c 0b 00
	00		 jbe	 $LN210@IntersectL
$LN212@IntersectL:
  01641	0f 57 c0	 xorps	 xmm0, xmm0
  01644	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  0164b	77 15		 ja	 SHORT $LN213@IntersectL
  0164d	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  01655	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0165c	0f 86 4b 0b 00
	00		 jbe	 $LN210@IntersectL
$LN213@IntersectL:

; 183  : 	{
; 184  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  01662	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0166a	0f 2f 85 b4 fd
	ff ff		 comiss	 xmm0, DWORD PTR _s$[ebp]
  01671	76 12		 jbe	 SHORT $LN223@IntersectL
  01673	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  0167b	f3 0f 11 85 d8
	fc ff ff	 movss	 DWORD PTR tv2066[ebp], xmm0
  01683	eb 10		 jmp	 SHORT $LN224@IntersectL
$LN223@IntersectL:
  01685	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0168d	f3 0f 11 85 d8
	fc ff ff	 movss	 DWORD PTR tv2066[ebp], xmm0
$LN224@IntersectL:
  01695	0f 57 c0	 xorps	 xmm0, xmm0
  01698	0f 2f 85 d8 fc
	ff ff		 comiss	 xmm0, DWORD PTR tv2066[ebp]
  0169f	76 0d		 jbe	 SHORT $LN227@IntersectL
  016a1	0f 57 c0	 xorps	 xmm0, xmm0
  016a4	f3 0f 11 85 d0
	fc ff ff	 movss	 DWORD PTR tv2099[ebp], xmm0
  016ac	eb 43		 jmp	 SHORT $LN228@IntersectL
$LN227@IntersectL:
  016ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  016b6	0f 2f 85 b4 fd
	ff ff		 comiss	 xmm0, DWORD PTR _s$[ebp]
  016bd	76 12		 jbe	 SHORT $LN225@IntersectL
  016bf	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  016c7	f3 0f 11 85 d4
	fc ff ff	 movss	 DWORD PTR tv2098[ebp], xmm0
  016cf	eb 10		 jmp	 SHORT $LN226@IntersectL
$LN225@IntersectL:
  016d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  016d9	f3 0f 11 85 d4
	fc ff ff	 movss	 DWORD PTR tv2098[ebp], xmm0
$LN226@IntersectL:
  016e1	f3 0f 10 85 d4
	fc ff ff	 movss	 xmm0, DWORD PTR tv2098[ebp]
  016e9	f3 0f 11 85 d0
	fc ff ff	 movss	 DWORD PTR tv2099[ebp], xmm0
$LN228@IntersectL:
  016f1	f3 0f 10 85 d0
	fc ff ff	 movss	 xmm0, DWORD PTR tv2099[ebp]
  016f9	f3 0f 11 85 b4
	fd ff ff	 movss	 DWORD PTR _s$[ebp], xmm0

; 185  : 		OutA = A1 + s*La;

  01701	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  01709	f3 0f 11 85 78
	fd ff ff	 movss	 DWORD PTR _f$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  01711	f3 0f 10 85 78
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  01719	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _La$[ebp]
  0171e	f3 0f 11 85 f4
	fb ff ff	 movss	 DWORD PTR _fx$114[ebp], xmm0
  01726	f3 0f 10 85 78
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  0172e	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _La$[ebp+4]
  01733	f3 0f 11 85 f0
	fb ff ff	 movss	 DWORD PTR _fy$113[ebp], xmm0
  0173b	f3 0f 10 85 78
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  01743	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  01748	f3 0f 11 85 ec
	fb ff ff	 movss	 DWORD PTR _fz$112[ebp], xmm0

; 180  :     x = fx;

  01750	f3 0f 10 85 f4
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$114[ebp]
  01758	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR $T184[ebp], xmm0

; 181  :     y = fy;

  01760	f3 0f 10 85 f0
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$113[ebp]
  01768	f3 0f 11 85 7c
	ff ff ff	 movss	 DWORD PTR $T184[ebp+4], xmm0

; 182  :     z = fz;

  01770	f3 0f 10 85 ec
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$112[ebp]
  01778	f3 0f 11 45 80	 movss	 DWORD PTR $T184[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0177d	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  01780	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01784	f3 0f 58 85 78
	ff ff ff	 addss	 xmm0, DWORD PTR $T184[ebp]
  0178c	f3 0f 11 85 e8
	fb ff ff	 movss	 DWORD PTR _fx$111[ebp], xmm0
  01794	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  01797	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0179c	f3 0f 58 85 7c
	ff ff ff	 addss	 xmm0, DWORD PTR $T184[ebp+4]
  017a4	f3 0f 11 85 e4
	fb ff ff	 movss	 DWORD PTR _fy$110[ebp], xmm0
  017ac	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  017af	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  017b4	f3 0f 58 45 80	 addss	 xmm0, DWORD PTR $T184[ebp+8]
  017b9	f3 0f 11 85 e0
	fb ff ff	 movss	 DWORD PTR _fz$109[ebp], xmm0

; 180  :     x = fx;

  017c1	f3 0f 10 85 e8
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$111[ebp]
  017c9	f3 0f 11 85 d4
	fd ff ff	 movss	 DWORD PTR $T149[ebp], xmm0

; 181  :     y = fy;

  017d1	f3 0f 10 85 e4
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$110[ebp]
  017d9	f3 0f 11 85 d8
	fd ff ff	 movss	 DWORD PTR $T149[ebp+4], xmm0

; 182  :     z = fz;

  017e1	f3 0f 10 85 e0
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$109[ebp]
  017e9	f3 0f 11 85 dc
	fd ff ff	 movss	 DWORD PTR $T149[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 185  : 		OutA = A1 + s*La;

  017f1	8d b5 d4 fd ff
	ff		 lea	 esi, DWORD PTR $T149[ebp]
  017f7	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  017fa	a5		 movsd
  017fb	a5		 movsd
  017fc	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  017fd	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Lb$[ebp+8]
  01802	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  01807	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Lb$[ebp+4]
  0180c	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  01811	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _Lb$[ebp]
  01816	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  0181b	f3 0f 58 d1	 addss	 xmm2, xmm1
  0181f	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 34   : 	float D = D3DXVec3LengthSq(&L);

  01823	f3 0f 11 95 cc
	fc ff ff	 movss	 DWORD PTR _D$126[ebp], xmm2

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0182b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  01833	0f 2f 85 cc fc
	ff ff		 comiss	 xmm0, DWORD PTR _D$126[ebp]
  0183a	76 0e		 jbe	 SHORT $LN256@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  0183c	8b 75 10	 mov	 esi, DWORD PTR _B1$[ebp]
  0183f	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  01842	a5		 movsd
  01843	a5		 movsd
  01844	a5		 movsd

; 38   : 		return;

  01845	e9 56 02 00 00	 jmp	 $LN255@IntersectL
$LN256@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0184a	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  0184d	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  01850	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01854	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01858	f3 0f 11 85 dc
	fb ff ff	 movss	 DWORD PTR _fx$108[ebp], xmm0
  01860	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  01863	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  01866	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0186b	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  01870	f3 0f 11 85 d8
	fb ff ff	 movss	 DWORD PTR _fy$107[ebp], xmm0
  01878	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  0187b	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  0187e	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01883	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01888	f3 0f 11 85 d4
	fb ff ff	 movss	 DWORD PTR _fz$106[ebp], xmm0

; 180  :     x = fx;

  01890	f3 0f 10 85 dc
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$108[ebp]
  01898	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _AB$168[ebp], xmm0

; 181  :     y = fy;

  018a0	f3 0f 10 85 d8
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$107[ebp]
  018a8	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR _AB$168[ebp+4], xmm0

; 182  :     z = fz;

  018b0	f3 0f 10 85 d4
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$106[ebp]
  018b8	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR _AB$168[ebp+8], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  018c0	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _AB$168[ebp+8]
  018c8	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  018cd	f3 0f 10 8d bc
	fe ff ff	 movss	 xmm1, DWORD PTR _AB$168[ebp+4]
  018d5	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  018da	f3 0f 10 95 b8
	fe ff ff	 movss	 xmm2, DWORD PTR _AB$168[ebp]
  018e2	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  018e7	f3 0f 58 d1	 addss	 xmm2, xmm1
  018eb	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  018ef	f3 0f 5e 95 cc
	fc ff ff	 divss	 xmm2, DWORD PTR _D$126[ebp]
  018f7	f3 0f 11 95 b8
	fd ff ff	 movss	 DWORD PTR _t$[ebp], xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  018ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01907	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  0190e	76 12		 jbe	 SHORT $LN258@IntersectL
  01910	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  01918	f3 0f 11 85 c8
	fc ff ff	 movss	 DWORD PTR tv2280[ebp], xmm0
  01920	eb 10		 jmp	 SHORT $LN259@IntersectL
$LN258@IntersectL:
  01922	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0192a	f3 0f 11 85 c8
	fc ff ff	 movss	 DWORD PTR tv2280[ebp], xmm0
$LN259@IntersectL:
  01932	0f 57 c0	 xorps	 xmm0, xmm0
  01935	0f 2f 85 c8 fc
	ff ff		 comiss	 xmm0, DWORD PTR tv2280[ebp]
  0193c	76 0d		 jbe	 SHORT $LN262@IntersectL
  0193e	0f 57 c0	 xorps	 xmm0, xmm0
  01941	f3 0f 11 85 c0
	fc ff ff	 movss	 DWORD PTR tv2284[ebp], xmm0
  01949	eb 43		 jmp	 SHORT $LN263@IntersectL
$LN262@IntersectL:
  0194b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01953	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  0195a	76 12		 jbe	 SHORT $LN260@IntersectL
  0195c	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  01964	f3 0f 11 85 c4
	fc ff ff	 movss	 DWORD PTR tv2283[ebp], xmm0
  0196c	eb 10		 jmp	 SHORT $LN261@IntersectL
$LN260@IntersectL:
  0196e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01976	f3 0f 11 85 c4
	fc ff ff	 movss	 DWORD PTR tv2283[ebp], xmm0
$LN261@IntersectL:
  0197e	f3 0f 10 85 c4
	fc ff ff	 movss	 xmm0, DWORD PTR tv2283[ebp]
  01986	f3 0f 11 85 c0
	fc ff ff	 movss	 DWORD PTR tv2284[ebp], xmm0
$LN263@IntersectL:
  0198e	f3 0f 10 85 c0
	fc ff ff	 movss	 xmm0, DWORD PTR tv2284[ebp]
  01996	f3 0f 11 85 b8
	fd ff ff	 movss	 DWORD PTR _t$[ebp], xmm0

; 49   : 	Nearest = A1 + parameter * L;

  0199e	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  019a6	f3 0f 11 85 58
	fd ff ff	 movss	 DWORD PTR _f$135[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  019ae	f3 0f 10 85 58
	fd ff ff	 movss	 xmm0, DWORD PTR _f$135[ebp]
  019b6	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _Lb$[ebp]
  019bb	f3 0f 11 85 d0
	fb ff ff	 movss	 DWORD PTR _fx$105[ebp], xmm0
  019c3	f3 0f 10 85 58
	fd ff ff	 movss	 xmm0, DWORD PTR _f$135[ebp]
  019cb	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _Lb$[ebp+4]
  019d0	f3 0f 11 85 cc
	fb ff ff	 movss	 DWORD PTR _fy$104[ebp], xmm0
  019d8	f3 0f 10 85 58
	fd ff ff	 movss	 xmm0, DWORD PTR _f$135[ebp]
  019e0	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  019e5	f3 0f 11 85 c8
	fb ff ff	 movss	 DWORD PTR _fz$103[ebp], xmm0

; 180  :     x = fx;

  019ed	f3 0f 10 85 d0
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$105[ebp]
  019f5	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR $T169[ebp], xmm0

; 181  :     y = fy;

  019fd	f3 0f 10 85 cc
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$104[ebp]
  01a05	f3 0f 11 85 c8
	fe ff ff	 movss	 DWORD PTR $T169[ebp+4], xmm0

; 182  :     z = fz;

  01a0d	f3 0f 10 85 c8
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$103[ebp]
  01a15	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR $T169[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  01a1d	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  01a20	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01a24	f3 0f 58 85 c4
	fe ff ff	 addss	 xmm0, DWORD PTR $T169[ebp]
  01a2c	f3 0f 11 85 c4
	fb ff ff	 movss	 DWORD PTR _fx$102[ebp], xmm0
  01a34	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  01a37	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01a3c	f3 0f 58 85 c8
	fe ff ff	 addss	 xmm0, DWORD PTR $T169[ebp+4]
  01a44	f3 0f 11 85 c0
	fb ff ff	 movss	 DWORD PTR _fy$101[ebp], xmm0
  01a4c	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  01a4f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01a54	f3 0f 58 85 cc
	fe ff ff	 addss	 xmm0, DWORD PTR $T169[ebp+8]
  01a5c	f3 0f 11 85 bc
	fb ff ff	 movss	 DWORD PTR _fz$100[ebp], xmm0

; 180  :     x = fx;

  01a64	f3 0f 10 85 c4
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$102[ebp]
  01a6c	f3 0f 11 85 e0
	fd ff ff	 movss	 DWORD PTR $T150[ebp], xmm0

; 181  :     y = fy;

  01a74	f3 0f 10 85 c0
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$101[ebp]
  01a7c	f3 0f 11 85 e4
	fd ff ff	 movss	 DWORD PTR $T150[ebp+4], xmm0

; 182  :     z = fz;

  01a84	f3 0f 10 85 bc
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$100[ebp]
  01a8c	f3 0f 11 85 e8
	fd ff ff	 movss	 DWORD PTR $T150[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  01a94	8d b5 e0 fd ff
	ff		 lea	 esi, DWORD PTR $T150[ebp]
  01a9a	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  01a9d	a5		 movsd
  01a9e	a5		 movsd
  01a9f	a5		 movsd
$LN255@IntersectL:

; 189  : 		if (OUT_OF_RANGE(t))

  01aa0	0f 57 c0	 xorps	 xmm0, xmm0
  01aa3	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  01aaa	77 15		 ja	 SHORT $LN215@IntersectL
  01aac	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  01ab4	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  01abb	0f 86 e7 06 00
	00		 jbe	 $LN313@IntersectL
$LN215@IntersectL:

; 190  : 		{
; 191  : 			t = FMAX(0.0f, FMIN(1.0f, t));

  01ac1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ac9	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  01ad0	76 12		 jbe	 SHORT $LN229@IntersectL
  01ad2	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  01ada	f3 0f 11 85 bc
	fc ff ff	 movss	 DWORD PTR tv2117[ebp], xmm0
  01ae2	eb 10		 jmp	 SHORT $LN230@IntersectL
$LN229@IntersectL:
  01ae4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01aec	f3 0f 11 85 bc
	fc ff ff	 movss	 DWORD PTR tv2117[ebp], xmm0
$LN230@IntersectL:
  01af4	0f 57 c0	 xorps	 xmm0, xmm0
  01af7	0f 2f 85 bc fc
	ff ff		 comiss	 xmm0, DWORD PTR tv2117[ebp]
  01afe	76 0d		 jbe	 SHORT $LN233@IntersectL
  01b00	0f 57 c0	 xorps	 xmm0, xmm0
  01b03	f3 0f 11 85 b4
	fc ff ff	 movss	 DWORD PTR tv2121[ebp], xmm0
  01b0b	eb 43		 jmp	 SHORT $LN234@IntersectL
$LN233@IntersectL:
  01b0d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b15	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  01b1c	76 12		 jbe	 SHORT $LN231@IntersectL
  01b1e	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  01b26	f3 0f 11 85 b8
	fc ff ff	 movss	 DWORD PTR tv2120[ebp], xmm0
  01b2e	eb 10		 jmp	 SHORT $LN232@IntersectL
$LN231@IntersectL:
  01b30	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b38	f3 0f 11 85 b8
	fc ff ff	 movss	 DWORD PTR tv2120[ebp], xmm0
$LN232@IntersectL:
  01b40	f3 0f 10 85 b8
	fc ff ff	 movss	 xmm0, DWORD PTR tv2120[ebp]
  01b48	f3 0f 11 85 b4
	fc ff ff	 movss	 DWORD PTR tv2121[ebp], xmm0
$LN234@IntersectL:
  01b50	f3 0f 10 85 b4
	fc ff ff	 movss	 xmm0, DWORD PTR tv2121[ebp]
  01b58	f3 0f 11 85 b8
	fd ff ff	 movss	 DWORD PTR _t$[ebp], xmm0

; 192  : 			OutB = B1 + t*Lb;

  01b60	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  01b68	f3 0f 11 85 7c
	fd ff ff	 movss	 DWORD PTR _f$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  01b70	f3 0f 10 85 7c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  01b78	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _Lb$[ebp]
  01b7d	f3 0f 11 85 b8
	fb ff ff	 movss	 DWORD PTR _fx$99[ebp], xmm0
  01b85	f3 0f 10 85 7c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  01b8d	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _Lb$[ebp+4]
  01b92	f3 0f 11 85 b4
	fb ff ff	 movss	 DWORD PTR _fy$98[ebp], xmm0
  01b9a	f3 0f 10 85 7c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  01ba2	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  01ba7	f3 0f 11 85 b0
	fb ff ff	 movss	 DWORD PTR _fz$97[ebp], xmm0

; 180  :     x = fx;

  01baf	f3 0f 10 85 b8
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$99[ebp]
  01bb7	f3 0f 11 85 d0
	fe ff ff	 movss	 DWORD PTR $T170[ebp], xmm0

; 181  :     y = fy;

  01bbf	f3 0f 10 85 b4
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$98[ebp]
  01bc7	f3 0f 11 85 d4
	fe ff ff	 movss	 DWORD PTR $T170[ebp+4], xmm0

; 182  :     z = fz;

  01bcf	f3 0f 10 85 b0
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$97[ebp]
  01bd7	f3 0f 11 85 d8
	fe ff ff	 movss	 DWORD PTR $T170[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  01bdf	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  01be2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01be6	f3 0f 58 85 d0
	fe ff ff	 addss	 xmm0, DWORD PTR $T170[ebp]
  01bee	f3 0f 11 85 ac
	fb ff ff	 movss	 DWORD PTR _fx$96[ebp], xmm0
  01bf6	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  01bf9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01bfe	f3 0f 58 85 d4
	fe ff ff	 addss	 xmm0, DWORD PTR $T170[ebp+4]
  01c06	f3 0f 11 85 a8
	fb ff ff	 movss	 DWORD PTR _fy$95[ebp], xmm0
  01c0e	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  01c11	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01c16	f3 0f 58 85 d8
	fe ff ff	 addss	 xmm0, DWORD PTR $T170[ebp+8]
  01c1e	f3 0f 11 85 a4
	fb ff ff	 movss	 DWORD PTR _fz$94[ebp], xmm0

; 180  :     x = fx;

  01c26	f3 0f 10 85 ac
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$96[ebp]
  01c2e	f3 0f 11 85 64
	fe ff ff	 movss	 DWORD PTR $T161[ebp], xmm0

; 181  :     y = fy;

  01c36	f3 0f 10 85 a8
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$95[ebp]
  01c3e	f3 0f 11 85 68
	fe ff ff	 movss	 DWORD PTR $T161[ebp+4], xmm0

; 182  :     z = fz;

  01c46	f3 0f 10 85 a4
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$94[ebp]
  01c4e	f3 0f 11 85 6c
	fe ff ff	 movss	 DWORD PTR $T161[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 192  : 			OutB = B1 + t*Lb;

  01c56	8d b5 64 fe ff
	ff		 lea	 esi, DWORD PTR $T161[ebp]
  01c5c	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  01c5f	a5		 movsd
  01c60	a5		 movsd
  01c61	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  01c62	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _La$[ebp+8]
  01c67	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  01c6c	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _La$[ebp+4]
  01c71	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _La$[ebp+4]
  01c76	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$[ebp]
  01c7b	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$[ebp]
  01c80	f3 0f 58 d1	 addss	 xmm2, xmm1
  01c84	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 34   : 	float D = D3DXVec3LengthSq(&L);

  01c88	f3 0f 11 95 b0
	fc ff ff	 movss	 DWORD PTR _D$125[ebp], xmm2

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  01c90	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  01c98	0f 2f 85 b0 fc
	ff ff		 comiss	 xmm0, DWORD PTR _D$125[ebp]
  01c9f	76 0e		 jbe	 SHORT $LN289@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  01ca1	8b 75 08	 mov	 esi, DWORD PTR _A1$[ebp]
  01ca4	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  01ca7	a5		 movsd
  01ca8	a5		 movsd
  01ca9	a5		 movsd

; 38   : 		return;

  01caa	e9 56 02 00 00	 jmp	 $LN288@IntersectL
$LN289@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  01caf	8b 45 1c	 mov	 eax, DWORD PTR _OutB$[ebp]
  01cb2	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  01cb5	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01cb9	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01cbd	f3 0f 11 85 a0
	fb ff ff	 movss	 DWORD PTR _fx$93[ebp], xmm0
  01cc5	8b 45 1c	 mov	 eax, DWORD PTR _OutB$[ebp]
  01cc8	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  01ccb	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01cd0	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  01cd5	f3 0f 11 85 9c
	fb ff ff	 movss	 DWORD PTR _fy$92[ebp], xmm0
  01cdd	8b 45 1c	 mov	 eax, DWORD PTR _OutB$[ebp]
  01ce0	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  01ce3	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01ce8	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01ced	f3 0f 11 85 98
	fb ff ff	 movss	 DWORD PTR _fz$91[ebp], xmm0

; 180  :     x = fx;

  01cf5	f3 0f 10 85 a0
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$93[ebp]
  01cfd	f3 0f 11 85 dc
	fe ff ff	 movss	 DWORD PTR _AB$171[ebp], xmm0

; 181  :     y = fy;

  01d05	f3 0f 10 85 9c
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$92[ebp]
  01d0d	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _AB$171[ebp+4], xmm0

; 182  :     z = fz;

  01d15	f3 0f 10 85 98
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$91[ebp]
  01d1d	f3 0f 11 85 e4
	fe ff ff	 movss	 DWORD PTR _AB$171[ebp+8], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  01d25	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _AB$171[ebp+8]
  01d2d	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  01d32	f3 0f 10 8d e0
	fe ff ff	 movss	 xmm1, DWORD PTR _AB$171[ebp+4]
  01d3a	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _La$[ebp+4]
  01d3f	f3 0f 10 95 dc
	fe ff ff	 movss	 xmm2, DWORD PTR _AB$171[ebp]
  01d47	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$[ebp]
  01d4c	f3 0f 58 d1	 addss	 xmm2, xmm1
  01d50	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  01d54	f3 0f 5e 95 b0
	fc ff ff	 divss	 xmm2, DWORD PTR _D$125[ebp]
  01d5c	f3 0f 11 95 b4
	fd ff ff	 movss	 DWORD PTR _s$[ebp], xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  01d64	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01d6c	0f 2f 85 b4 fd
	ff ff		 comiss	 xmm0, DWORD PTR _s$[ebp]
  01d73	76 12		 jbe	 SHORT $LN291@IntersectL
  01d75	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  01d7d	f3 0f 11 85 ac
	fc ff ff	 movss	 DWORD PTR tv2615[ebp], xmm0
  01d85	eb 10		 jmp	 SHORT $LN292@IntersectL
$LN291@IntersectL:
  01d87	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01d8f	f3 0f 11 85 ac
	fc ff ff	 movss	 DWORD PTR tv2615[ebp], xmm0
$LN292@IntersectL:
  01d97	0f 57 c0	 xorps	 xmm0, xmm0
  01d9a	0f 2f 85 ac fc
	ff ff		 comiss	 xmm0, DWORD PTR tv2615[ebp]
  01da1	76 0d		 jbe	 SHORT $LN295@IntersectL
  01da3	0f 57 c0	 xorps	 xmm0, xmm0
  01da6	f3 0f 11 85 a4
	fc ff ff	 movss	 DWORD PTR tv2619[ebp], xmm0
  01dae	eb 43		 jmp	 SHORT $LN296@IntersectL
$LN295@IntersectL:
  01db0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01db8	0f 2f 85 b4 fd
	ff ff		 comiss	 xmm0, DWORD PTR _s$[ebp]
  01dbf	76 12		 jbe	 SHORT $LN293@IntersectL
  01dc1	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  01dc9	f3 0f 11 85 a8
	fc ff ff	 movss	 DWORD PTR tv2618[ebp], xmm0
  01dd1	eb 10		 jmp	 SHORT $LN294@IntersectL
$LN293@IntersectL:
  01dd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ddb	f3 0f 11 85 a8
	fc ff ff	 movss	 DWORD PTR tv2618[ebp], xmm0
$LN294@IntersectL:
  01de3	f3 0f 10 85 a8
	fc ff ff	 movss	 xmm0, DWORD PTR tv2618[ebp]
  01deb	f3 0f 11 85 a4
	fc ff ff	 movss	 DWORD PTR tv2619[ebp], xmm0
$LN296@IntersectL:
  01df3	f3 0f 10 85 a4
	fc ff ff	 movss	 xmm0, DWORD PTR tv2619[ebp]
  01dfb	f3 0f 11 85 b4
	fd ff ff	 movss	 DWORD PTR _s$[ebp], xmm0

; 49   : 	Nearest = A1 + parameter * L;

  01e03	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  01e0b	f3 0f 11 85 4c
	fd ff ff	 movss	 DWORD PTR _f$133[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  01e13	f3 0f 10 85 4c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$133[ebp]
  01e1b	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _La$[ebp]
  01e20	f3 0f 11 85 94
	fb ff ff	 movss	 DWORD PTR _fx$90[ebp], xmm0
  01e28	f3 0f 10 85 4c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$133[ebp]
  01e30	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _La$[ebp+4]
  01e35	f3 0f 11 85 90
	fb ff ff	 movss	 DWORD PTR _fy$89[ebp], xmm0
  01e3d	f3 0f 10 85 4c
	fd ff ff	 movss	 xmm0, DWORD PTR _f$133[ebp]
  01e45	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  01e4a	f3 0f 11 85 8c
	fb ff ff	 movss	 DWORD PTR _fz$88[ebp], xmm0

; 180  :     x = fx;

  01e52	f3 0f 10 85 94
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$90[ebp]
  01e5a	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR $T172[ebp], xmm0

; 181  :     y = fy;

  01e62	f3 0f 10 85 90
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$89[ebp]
  01e6a	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR $T172[ebp+4], xmm0

; 182  :     z = fz;

  01e72	f3 0f 10 85 8c
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$88[ebp]
  01e7a	f3 0f 11 85 f0
	fe ff ff	 movss	 DWORD PTR $T172[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  01e82	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  01e85	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01e89	f3 0f 58 85 e8
	fe ff ff	 addss	 xmm0, DWORD PTR $T172[ebp]
  01e91	f3 0f 11 85 88
	fb ff ff	 movss	 DWORD PTR _fx$87[ebp], xmm0
  01e99	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  01e9c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01ea1	f3 0f 58 85 ec
	fe ff ff	 addss	 xmm0, DWORD PTR $T172[ebp+4]
  01ea9	f3 0f 11 85 84
	fb ff ff	 movss	 DWORD PTR _fy$86[ebp], xmm0
  01eb1	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  01eb4	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01eb9	f3 0f 58 85 f0
	fe ff ff	 addss	 xmm0, DWORD PTR $T172[ebp+8]
  01ec1	f3 0f 11 85 80
	fb ff ff	 movss	 DWORD PTR _fz$85[ebp], xmm0

; 180  :     x = fx;

  01ec9	f3 0f 10 85 88
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$87[ebp]
  01ed1	f3 0f 11 85 58
	fe ff ff	 movss	 DWORD PTR $T160[ebp], xmm0

; 181  :     y = fy;

  01ed9	f3 0f 10 85 84
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$86[ebp]
  01ee1	f3 0f 11 85 5c
	fe ff ff	 movss	 DWORD PTR $T160[ebp+4], xmm0

; 182  :     z = fz;

  01ee9	f3 0f 10 85 80
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$85[ebp]
  01ef1	f3 0f 11 85 60
	fe ff ff	 movss	 DWORD PTR $T160[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  01ef9	8d b5 58 fe ff
	ff		 lea	 esi, DWORD PTR $T160[ebp]
  01eff	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  01f02	a5		 movsd
  01f03	a5		 movsd
  01f04	a5		 movsd
$LN288@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  01f05	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Lb$[ebp+8]
  01f0a	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  01f0f	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Lb$[ebp+4]
  01f14	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  01f19	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _Lb$[ebp]
  01f1e	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  01f23	f3 0f 58 d1	 addss	 xmm2, xmm1
  01f27	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 34   : 	float D = D3DXVec3LengthSq(&L);

  01f2b	f3 0f 11 95 a0
	fc ff ff	 movss	 DWORD PTR _D$124[ebp], xmm2

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  01f33	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  01f3b	0f 2f 85 a0 fc
	ff ff		 comiss	 xmm0, DWORD PTR _D$124[ebp]
  01f42	76 0e		 jbe	 SHORT $LN314@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  01f44	8b 75 10	 mov	 esi, DWORD PTR _B1$[ebp]
  01f47	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  01f4a	a5		 movsd
  01f4b	a5		 movsd
  01f4c	a5		 movsd

; 38   : 		return;

  01f4d	e9 56 02 00 00	 jmp	 $LN313@IntersectL
$LN314@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  01f52	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  01f55	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  01f58	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  01f5c	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  01f60	f3 0f 11 85 7c
	fb ff ff	 movss	 DWORD PTR _fx$84[ebp], xmm0
  01f68	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  01f6b	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  01f6e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  01f73	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  01f78	f3 0f 11 85 78
	fb ff ff	 movss	 DWORD PTR _fy$83[ebp], xmm0
  01f80	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  01f83	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  01f86	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  01f8b	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  01f90	f3 0f 11 85 74
	fb ff ff	 movss	 DWORD PTR _fz$82[ebp], xmm0

; 180  :     x = fx;

  01f98	f3 0f 10 85 7c
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$84[ebp]
  01fa0	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _AB$173[ebp], xmm0

; 181  :     y = fy;

  01fa8	f3 0f 10 85 78
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$83[ebp]
  01fb0	f3 0f 11 85 f8
	fe ff ff	 movss	 DWORD PTR _AB$173[ebp+4], xmm0

; 182  :     z = fz;

  01fb8	f3 0f 10 85 74
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$82[ebp]
  01fc0	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR _AB$173[ebp+8], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  01fc8	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR _AB$173[ebp+8]
  01fd0	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  01fd5	f3 0f 10 8d f8
	fe ff ff	 movss	 xmm1, DWORD PTR _AB$173[ebp+4]
  01fdd	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  01fe2	f3 0f 10 95 f4
	fe ff ff	 movss	 xmm2, DWORD PTR _AB$173[ebp]
  01fea	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  01fef	f3 0f 58 d1	 addss	 xmm2, xmm1
  01ff3	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  01ff7	f3 0f 5e 95 a0
	fc ff ff	 divss	 xmm2, DWORD PTR _D$124[ebp]
  01fff	f3 0f 11 95 b8
	fd ff ff	 movss	 DWORD PTR _t$[ebp], xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  02007	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0200f	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  02016	76 12		 jbe	 SHORT $LN316@IntersectL
  02018	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  02020	f3 0f 11 85 9c
	fc ff ff	 movss	 DWORD PTR tv2867[ebp], xmm0
  02028	eb 10		 jmp	 SHORT $LN317@IntersectL
$LN316@IntersectL:
  0202a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02032	f3 0f 11 85 9c
	fc ff ff	 movss	 DWORD PTR tv2867[ebp], xmm0
$LN317@IntersectL:
  0203a	0f 57 c0	 xorps	 xmm0, xmm0
  0203d	0f 2f 85 9c fc
	ff ff		 comiss	 xmm0, DWORD PTR tv2867[ebp]
  02044	76 0d		 jbe	 SHORT $LN320@IntersectL
  02046	0f 57 c0	 xorps	 xmm0, xmm0
  02049	f3 0f 11 85 94
	fc ff ff	 movss	 DWORD PTR tv2871[ebp], xmm0
  02051	eb 43		 jmp	 SHORT $LN321@IntersectL
$LN320@IntersectL:
  02053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0205b	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  02062	76 12		 jbe	 SHORT $LN318@IntersectL
  02064	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  0206c	f3 0f 11 85 98
	fc ff ff	 movss	 DWORD PTR tv2870[ebp], xmm0
  02074	eb 10		 jmp	 SHORT $LN319@IntersectL
$LN318@IntersectL:
  02076	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0207e	f3 0f 11 85 98
	fc ff ff	 movss	 DWORD PTR tv2870[ebp], xmm0
$LN319@IntersectL:
  02086	f3 0f 10 85 98
	fc ff ff	 movss	 xmm0, DWORD PTR tv2870[ebp]
  0208e	f3 0f 11 85 94
	fc ff ff	 movss	 DWORD PTR tv2871[ebp], xmm0
$LN321@IntersectL:
  02096	f3 0f 10 85 94
	fc ff ff	 movss	 xmm0, DWORD PTR tv2871[ebp]
  0209e	f3 0f 11 85 b8
	fd ff ff	 movss	 DWORD PTR _t$[ebp], xmm0

; 49   : 	Nearest = A1 + parameter * L;

  020a6	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  020ae	f3 0f 11 85 50
	fd ff ff	 movss	 DWORD PTR _f$134[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  020b6	f3 0f 10 85 50
	fd ff ff	 movss	 xmm0, DWORD PTR _f$134[ebp]
  020be	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _Lb$[ebp]
  020c3	f3 0f 11 85 70
	fb ff ff	 movss	 DWORD PTR _fx$81[ebp], xmm0
  020cb	f3 0f 10 85 50
	fd ff ff	 movss	 xmm0, DWORD PTR _f$134[ebp]
  020d3	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _Lb$[ebp+4]
  020d8	f3 0f 11 85 6c
	fb ff ff	 movss	 DWORD PTR _fy$80[ebp], xmm0
  020e0	f3 0f 10 85 50
	fd ff ff	 movss	 xmm0, DWORD PTR _f$134[ebp]
  020e8	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  020ed	f3 0f 11 85 68
	fb ff ff	 movss	 DWORD PTR _fz$79[ebp], xmm0

; 180  :     x = fx;

  020f5	f3 0f 10 85 70
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$81[ebp]
  020fd	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR $T174[ebp], xmm0

; 181  :     y = fy;

  02105	f3 0f 10 85 6c
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$80[ebp]
  0210d	f3 0f 11 85 04
	ff ff ff	 movss	 DWORD PTR $T174[ebp+4], xmm0

; 182  :     z = fz;

  02115	f3 0f 10 85 68
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$79[ebp]
  0211d	f3 0f 11 85 08
	ff ff ff	 movss	 DWORD PTR $T174[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  02125	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  02128	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0212c	f3 0f 58 85 00
	ff ff ff	 addss	 xmm0, DWORD PTR $T174[ebp]
  02134	f3 0f 11 85 64
	fb ff ff	 movss	 DWORD PTR _fx$78[ebp], xmm0
  0213c	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  0213f	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  02144	f3 0f 58 85 04
	ff ff ff	 addss	 xmm0, DWORD PTR $T174[ebp+4]
  0214c	f3 0f 11 85 60
	fb ff ff	 movss	 DWORD PTR _fy$77[ebp], xmm0
  02154	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  02157	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0215c	f3 0f 58 85 08
	ff ff ff	 addss	 xmm0, DWORD PTR $T174[ebp+8]
  02164	f3 0f 11 85 5c
	fb ff ff	 movss	 DWORD PTR _fz$76[ebp], xmm0

; 180  :     x = fx;

  0216c	f3 0f 10 85 64
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$78[ebp]
  02174	f3 0f 11 85 7c
	fe ff ff	 movss	 DWORD PTR $T163[ebp], xmm0

; 181  :     y = fy;

  0217c	f3 0f 10 85 60
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$77[ebp]
  02184	f3 0f 11 85 80
	fe ff ff	 movss	 DWORD PTR $T163[ebp+4], xmm0

; 182  :     z = fz;

  0218c	f3 0f 10 85 5c
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$76[ebp]
  02194	f3 0f 11 85 84
	fe ff ff	 movss	 DWORD PTR $T163[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0219c	8d b5 7c fe ff
	ff		 lea	 esi, DWORD PTR $T163[ebp]
  021a2	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  021a5	a5		 movsd
  021a6	a5		 movsd
  021a7	a5		 movsd
$LN313@IntersectL:

; 198  : 	}

  021a8	e9 cf 08 00 00	 jmp	 $LN219@IntersectL
$LN210@IntersectL:

; 199  : 	// otherwise, handle the case where the parameter for only one segment is
; 200  : 	// out of range
; 201  : 	else if (OUT_OF_RANGE(s))

  021ad	0f 57 c0	 xorps	 xmm0, xmm0
  021b0	0f 2f 85 b4 fd
	ff ff		 comiss	 xmm0, DWORD PTR _s$[ebp]
  021b7	77 15		 ja	 SHORT $LN218@IntersectL
  021b9	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  021c1	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  021c8	0f 86 49 04 00
	00		 jbe	 $LN216@IntersectL
$LN218@IntersectL:

; 202  : 	{
; 203  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  021ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  021d6	0f 2f 85 b4 fd
	ff ff		 comiss	 xmm0, DWORD PTR _s$[ebp]
  021dd	76 12		 jbe	 SHORT $LN235@IntersectL
  021df	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  021e7	f3 0f 11 85 90
	fc ff ff	 movss	 DWORD PTR tv2144[ebp], xmm0
  021ef	eb 10		 jmp	 SHORT $LN236@IntersectL
$LN235@IntersectL:
  021f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  021f9	f3 0f 11 85 90
	fc ff ff	 movss	 DWORD PTR tv2144[ebp], xmm0
$LN236@IntersectL:
  02201	0f 57 c0	 xorps	 xmm0, xmm0
  02204	0f 2f 85 90 fc
	ff ff		 comiss	 xmm0, DWORD PTR tv2144[ebp]
  0220b	76 0d		 jbe	 SHORT $LN239@IntersectL
  0220d	0f 57 c0	 xorps	 xmm0, xmm0
  02210	f3 0f 11 85 88
	fc ff ff	 movss	 DWORD PTR tv2148[ebp], xmm0
  02218	eb 43		 jmp	 SHORT $LN240@IntersectL
$LN239@IntersectL:
  0221a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02222	0f 2f 85 b4 fd
	ff ff		 comiss	 xmm0, DWORD PTR _s$[ebp]
  02229	76 12		 jbe	 SHORT $LN237@IntersectL
  0222b	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  02233	f3 0f 11 85 8c
	fc ff ff	 movss	 DWORD PTR tv2147[ebp], xmm0
  0223b	eb 10		 jmp	 SHORT $LN238@IntersectL
$LN237@IntersectL:
  0223d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02245	f3 0f 11 85 8c
	fc ff ff	 movss	 DWORD PTR tv2147[ebp], xmm0
$LN238@IntersectL:
  0224d	f3 0f 10 85 8c
	fc ff ff	 movss	 xmm0, DWORD PTR tv2147[ebp]
  02255	f3 0f 11 85 88
	fc ff ff	 movss	 DWORD PTR tv2148[ebp], xmm0
$LN240@IntersectL:
  0225d	f3 0f 10 85 88
	fc ff ff	 movss	 xmm0, DWORD PTR tv2148[ebp]
  02265	f3 0f 11 85 b4
	fd ff ff	 movss	 DWORD PTR _s$[ebp], xmm0

; 204  : 		OutA = A1 + s*La;

  0226d	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  02275	f3 0f 11 85 54
	fd ff ff	 movss	 DWORD PTR _f$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0227d	f3 0f 10 85 54
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  02285	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _La$[ebp]
  0228a	f3 0f 11 85 58
	fb ff ff	 movss	 DWORD PTR _fx$75[ebp], xmm0
  02292	f3 0f 10 85 54
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  0229a	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _La$[ebp+4]
  0229f	f3 0f 11 85 54
	fb ff ff	 movss	 DWORD PTR _fy$74[ebp], xmm0
  022a7	f3 0f 10 85 54
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  022af	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  022b4	f3 0f 11 85 50
	fb ff ff	 movss	 DWORD PTR _fz$73[ebp], xmm0

; 180  :     x = fx;

  022bc	f3 0f 10 85 58
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$75[ebp]
  022c4	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR $T175[ebp], xmm0

; 181  :     y = fy;

  022cc	f3 0f 10 85 54
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$74[ebp]
  022d4	f3 0f 11 85 10
	ff ff ff	 movss	 DWORD PTR $T175[ebp+4], xmm0

; 182  :     z = fz;

  022dc	f3 0f 10 85 50
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$73[ebp]
  022e4	f3 0f 11 85 14
	ff ff ff	 movss	 DWORD PTR $T175[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  022ec	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  022ef	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  022f3	f3 0f 58 85 0c
	ff ff ff	 addss	 xmm0, DWORD PTR $T175[ebp]
  022fb	f3 0f 11 85 4c
	fb ff ff	 movss	 DWORD PTR _fx$72[ebp], xmm0
  02303	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  02306	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0230b	f3 0f 58 85 10
	ff ff ff	 addss	 xmm0, DWORD PTR $T175[ebp+4]
  02313	f3 0f 11 85 48
	fb ff ff	 movss	 DWORD PTR _fy$71[ebp], xmm0
  0231b	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  0231e	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  02323	f3 0f 58 85 14
	ff ff ff	 addss	 xmm0, DWORD PTR $T175[ebp+8]
  0232b	f3 0f 11 85 44
	fb ff ff	 movss	 DWORD PTR _fz$70[ebp], xmm0

; 180  :     x = fx;

  02333	f3 0f 10 85 4c
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$72[ebp]
  0233b	f3 0f 11 85 4c
	fe ff ff	 movss	 DWORD PTR $T159[ebp], xmm0

; 181  :     y = fy;

  02343	f3 0f 10 85 48
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$71[ebp]
  0234b	f3 0f 11 85 50
	fe ff ff	 movss	 DWORD PTR $T159[ebp+4], xmm0

; 182  :     z = fz;

  02353	f3 0f 10 85 44
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$70[ebp]
  0235b	f3 0f 11 85 54
	fe ff ff	 movss	 DWORD PTR $T159[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 204  : 		OutA = A1 + s*La;

  02363	8d b5 4c fe ff
	ff		 lea	 esi, DWORD PTR $T159[ebp]
  02369	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  0236c	a5		 movsd
  0236d	a5		 movsd
  0236e	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0236f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Lb$[ebp+8]
  02374	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  02379	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Lb$[ebp+4]
  0237e	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  02383	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _Lb$[ebp]
  02388	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  0238d	f3 0f 58 d1	 addss	 xmm2, xmm1
  02391	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 34   : 	float D = D3DXVec3LengthSq(&L);

  02395	f3 0f 11 95 84
	fc ff ff	 movss	 DWORD PTR _D$123[ebp], xmm2

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  0239d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  023a5	0f 2f 85 84 fc
	ff ff		 comiss	 xmm0, DWORD PTR _D$123[ebp]
  023ac	76 0e		 jbe	 SHORT $LN347@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  023ae	8b 75 10	 mov	 esi, DWORD PTR _B1$[ebp]
  023b1	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  023b4	a5		 movsd
  023b5	a5		 movsd
  023b6	a5		 movsd

; 38   : 		return;

  023b7	e9 56 02 00 00	 jmp	 $LN346@IntersectL
$LN347@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  023bc	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  023bf	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  023c2	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  023c6	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  023ca	f3 0f 11 85 40
	fb ff ff	 movss	 DWORD PTR _fx$69[ebp], xmm0
  023d2	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  023d5	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  023d8	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  023dd	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  023e2	f3 0f 11 85 3c
	fb ff ff	 movss	 DWORD PTR _fy$68[ebp], xmm0
  023ea	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  023ed	8b 4d 10	 mov	 ecx, DWORD PTR _B1$[ebp]
  023f0	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  023f5	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  023fa	f3 0f 11 85 38
	fb ff ff	 movss	 DWORD PTR _fz$67[ebp], xmm0

; 180  :     x = fx;

  02402	f3 0f 10 85 40
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$69[ebp]
  0240a	f3 0f 11 85 48
	ff ff ff	 movss	 DWORD PTR _AB$180[ebp], xmm0

; 181  :     y = fy;

  02412	f3 0f 10 85 3c
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$68[ebp]
  0241a	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _AB$180[ebp+4], xmm0

; 182  :     z = fz;

  02422	f3 0f 10 85 38
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$67[ebp]
  0242a	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _AB$180[ebp+8], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  02432	f3 0f 10 85 50
	ff ff ff	 movss	 xmm0, DWORD PTR _AB$180[ebp+8]
  0243a	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  0243f	f3 0f 10 8d 4c
	ff ff ff	 movss	 xmm1, DWORD PTR _AB$180[ebp+4]
  02447	f3 0f 59 4d e8	 mulss	 xmm1, DWORD PTR _Lb$[ebp+4]
  0244c	f3 0f 10 95 48
	ff ff ff	 movss	 xmm2, DWORD PTR _AB$180[ebp]
  02454	f3 0f 59 55 e4	 mulss	 xmm2, DWORD PTR _Lb$[ebp]
  02459	f3 0f 58 d1	 addss	 xmm2, xmm1
  0245d	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  02461	f3 0f 5e 95 84
	fc ff ff	 divss	 xmm2, DWORD PTR _D$123[ebp]
  02469	f3 0f 11 95 b8
	fd ff ff	 movss	 DWORD PTR _t$[ebp], xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  02471	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02479	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  02480	76 12		 jbe	 SHORT $LN349@IntersectL
  02482	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  0248a	f3 0f 11 85 80
	fc ff ff	 movss	 DWORD PTR tv3202[ebp], xmm0
  02492	eb 10		 jmp	 SHORT $LN350@IntersectL
$LN349@IntersectL:
  02494	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0249c	f3 0f 11 85 80
	fc ff ff	 movss	 DWORD PTR tv3202[ebp], xmm0
$LN350@IntersectL:
  024a4	0f 57 c0	 xorps	 xmm0, xmm0
  024a7	0f 2f 85 80 fc
	ff ff		 comiss	 xmm0, DWORD PTR tv3202[ebp]
  024ae	76 0d		 jbe	 SHORT $LN353@IntersectL
  024b0	0f 57 c0	 xorps	 xmm0, xmm0
  024b3	f3 0f 11 85 78
	fc ff ff	 movss	 DWORD PTR tv3206[ebp], xmm0
  024bb	eb 43		 jmp	 SHORT $LN354@IntersectL
$LN353@IntersectL:
  024bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024c5	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  024cc	76 12		 jbe	 SHORT $LN351@IntersectL
  024ce	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  024d6	f3 0f 11 85 7c
	fc ff ff	 movss	 DWORD PTR tv3205[ebp], xmm0
  024de	eb 10		 jmp	 SHORT $LN352@IntersectL
$LN351@IntersectL:
  024e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024e8	f3 0f 11 85 7c
	fc ff ff	 movss	 DWORD PTR tv3205[ebp], xmm0
$LN352@IntersectL:
  024f0	f3 0f 10 85 7c
	fc ff ff	 movss	 xmm0, DWORD PTR tv3205[ebp]
  024f8	f3 0f 11 85 78
	fc ff ff	 movss	 DWORD PTR tv3206[ebp], xmm0
$LN354@IntersectL:
  02500	f3 0f 10 85 78
	fc ff ff	 movss	 xmm0, DWORD PTR tv3206[ebp]
  02508	f3 0f 11 85 b8
	fd ff ff	 movss	 DWORD PTR _t$[ebp], xmm0

; 49   : 	Nearest = A1 + parameter * L;

  02510	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  02518	f3 0f 11 85 80
	fd ff ff	 movss	 DWORD PTR _f$139[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  02520	f3 0f 10 85 80
	fd ff ff	 movss	 xmm0, DWORD PTR _f$139[ebp]
  02528	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _Lb$[ebp]
  0252d	f3 0f 11 85 34
	fb ff ff	 movss	 DWORD PTR _fx$66[ebp], xmm0
  02535	f3 0f 10 85 80
	fd ff ff	 movss	 xmm0, DWORD PTR _f$139[ebp]
  0253d	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _Lb$[ebp+4]
  02542	f3 0f 11 85 20
	fa ff ff	 movss	 DWORD PTR _fy$1[ebp], xmm0
  0254a	f3 0f 10 85 80
	fd ff ff	 movss	 xmm0, DWORD PTR _f$139[ebp]
  02552	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  02557	f3 0f 11 85 2c
	fb ff ff	 movss	 DWORD PTR _fz$64[ebp], xmm0

; 180  :     x = fx;

  0255f	f3 0f 10 85 34
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$66[ebp]
  02567	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR $T176[ebp], xmm0

; 181  :     y = fy;

  0256f	f3 0f 10 85 20
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$1[ebp]
  02577	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR $T176[ebp+4], xmm0

; 182  :     z = fz;

  0257f	f3 0f 10 85 2c
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$64[ebp]
  02587	f3 0f 11 85 20
	ff ff ff	 movss	 DWORD PTR $T176[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0258f	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  02592	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  02596	f3 0f 58 85 18
	ff ff ff	 addss	 xmm0, DWORD PTR $T176[ebp]
  0259e	f3 0f 11 85 28
	fb ff ff	 movss	 DWORD PTR _fx$63[ebp], xmm0
  025a6	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  025a9	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  025ae	f3 0f 58 85 1c
	ff ff ff	 addss	 xmm0, DWORD PTR $T176[ebp+4]
  025b6	f3 0f 11 85 24
	fb ff ff	 movss	 DWORD PTR _fy$62[ebp], xmm0
  025be	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  025c1	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  025c6	f3 0f 58 85 20
	ff ff ff	 addss	 xmm0, DWORD PTR $T176[ebp+8]
  025ce	f3 0f 11 85 20
	fb ff ff	 movss	 DWORD PTR _fz$61[ebp], xmm0

; 180  :     x = fx;

  025d6	f3 0f 10 85 28
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$63[ebp]
  025de	f3 0f 11 85 40
	fe ff ff	 movss	 DWORD PTR $T158[ebp], xmm0

; 181  :     y = fy;

  025e6	f3 0f 10 85 24
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$62[ebp]
  025ee	f3 0f 11 85 44
	fe ff ff	 movss	 DWORD PTR $T158[ebp+4], xmm0

; 182  :     z = fz;

  025f6	f3 0f 10 85 20
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$61[ebp]
  025fe	f3 0f 11 85 48
	fe ff ff	 movss	 DWORD PTR $T158[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  02606	8d b5 40 fe ff
	ff		 lea	 esi, DWORD PTR $T158[ebp]
  0260c	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  0260f	a5		 movsd
  02610	a5		 movsd
  02611	a5		 movsd
$LN346@IntersectL:

; 208  : 	}

  02612	e9 65 04 00 00	 jmp	 $LN219@IntersectL
$LN216@IntersectL:

; 209  : 	else if (OUT_OF_RANGE(t))

  02617	0f 57 c0	 xorps	 xmm0, xmm0
  0261a	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  02621	77 15		 ja	 SHORT $LN221@IntersectL
  02623	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  0262b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  02632	0f 86 44 04 00
	00		 jbe	 $LN219@IntersectL
$LN221@IntersectL:

; 210  : 	{
; 211  : 		t = FMAX(0.0f, FMIN(1.0f, t));

  02638	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02640	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  02647	76 12		 jbe	 SHORT $LN241@IntersectL
  02649	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  02651	f3 0f 11 85 74
	fc ff ff	 movss	 DWORD PTR tv2166[ebp], xmm0
  02659	eb 10		 jmp	 SHORT $LN242@IntersectL
$LN241@IntersectL:
  0265b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02663	f3 0f 11 85 74
	fc ff ff	 movss	 DWORD PTR tv2166[ebp], xmm0
$LN242@IntersectL:
  0266b	0f 57 c0	 xorps	 xmm0, xmm0
  0266e	0f 2f 85 74 fc
	ff ff		 comiss	 xmm0, DWORD PTR tv2166[ebp]
  02675	76 0d		 jbe	 SHORT $LN245@IntersectL
  02677	0f 57 c0	 xorps	 xmm0, xmm0
  0267a	f3 0f 11 85 6c
	fc ff ff	 movss	 DWORD PTR tv2170[ebp], xmm0
  02682	eb 43		 jmp	 SHORT $LN246@IntersectL
$LN245@IntersectL:
  02684	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0268c	0f 2f 85 b8 fd
	ff ff		 comiss	 xmm0, DWORD PTR _t$[ebp]
  02693	76 12		 jbe	 SHORT $LN243@IntersectL
  02695	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  0269d	f3 0f 11 85 70
	fc ff ff	 movss	 DWORD PTR tv2169[ebp], xmm0
  026a5	eb 10		 jmp	 SHORT $LN244@IntersectL
$LN243@IntersectL:
  026a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  026af	f3 0f 11 85 70
	fc ff ff	 movss	 DWORD PTR tv2169[ebp], xmm0
$LN244@IntersectL:
  026b7	f3 0f 10 85 70
	fc ff ff	 movss	 xmm0, DWORD PTR tv2169[ebp]
  026bf	f3 0f 11 85 6c
	fc ff ff	 movss	 DWORD PTR tv2170[ebp], xmm0
$LN246@IntersectL:
  026c7	f3 0f 10 85 6c
	fc ff ff	 movss	 xmm0, DWORD PTR tv2170[ebp]
  026cf	f3 0f 11 85 b8
	fd ff ff	 movss	 DWORD PTR _t$[ebp], xmm0

; 212  : 		OutB = B1 + t*Lb;

  026d7	f3 0f 10 85 b8
	fd ff ff	 movss	 xmm0, DWORD PTR _t$[ebp]
  026df	f3 0f 11 85 70
	fd ff ff	 movss	 DWORD PTR _f$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  026e7	f3 0f 10 85 70
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  026ef	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _Lb$[ebp]
  026f4	f3 0f 11 85 1c
	fb ff ff	 movss	 DWORD PTR _fx$60[ebp], xmm0
  026fc	f3 0f 10 85 70
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  02704	f3 0f 59 45 e8	 mulss	 xmm0, DWORD PTR _Lb$[ebp+4]
  02709	f3 0f 11 85 18
	fb ff ff	 movss	 DWORD PTR _fy$59[ebp], xmm0
  02711	f3 0f 10 85 70
	fd ff ff	 movss	 xmm0, DWORD PTR _f$[ebp]
  02719	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _Lb$[ebp+8]
  0271e	f3 0f 11 85 14
	fb ff ff	 movss	 DWORD PTR _fz$58[ebp], xmm0

; 180  :     x = fx;

  02726	f3 0f 10 85 1c
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$60[ebp]
  0272e	f3 0f 11 85 24
	ff ff ff	 movss	 DWORD PTR $T177[ebp], xmm0

; 181  :     y = fy;

  02736	f3 0f 10 85 18
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$59[ebp]
  0273e	f3 0f 11 85 28
	ff ff ff	 movss	 DWORD PTR $T177[ebp+4], xmm0

; 182  :     z = fz;

  02746	f3 0f 10 85 14
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$58[ebp]
  0274e	f3 0f 11 85 2c
	ff ff ff	 movss	 DWORD PTR $T177[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  02756	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  02759	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0275d	f3 0f 58 85 24
	ff ff ff	 addss	 xmm0, DWORD PTR $T177[ebp]
  02765	f3 0f 11 85 10
	fb ff ff	 movss	 DWORD PTR _fx$57[ebp], xmm0
  0276d	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  02770	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  02775	f3 0f 58 85 28
	ff ff ff	 addss	 xmm0, DWORD PTR $T177[ebp+4]
  0277d	f3 0f 11 85 0c
	fb ff ff	 movss	 DWORD PTR _fy$56[ebp], xmm0
  02785	8b 45 10	 mov	 eax, DWORD PTR _B1$[ebp]
  02788	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0278d	f3 0f 58 85 2c
	ff ff ff	 addss	 xmm0, DWORD PTR $T177[ebp+8]
  02795	f3 0f 11 85 08
	fb ff ff	 movss	 DWORD PTR _fz$55[ebp], xmm0

; 180  :     x = fx;

  0279d	f3 0f 10 85 10
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$57[ebp]
  027a5	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR $T157[ebp], xmm0

; 181  :     y = fy;

  027ad	f3 0f 10 85 0c
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$56[ebp]
  027b5	f3 0f 11 85 38
	fe ff ff	 movss	 DWORD PTR $T157[ebp+4], xmm0

; 182  :     z = fz;

  027bd	f3 0f 10 85 08
	fb ff ff	 movss	 xmm0, DWORD PTR _fz$55[ebp]
  027c5	f3 0f 11 85 3c
	fe ff ff	 movss	 DWORD PTR $T157[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 212  : 		OutB = B1 + t*Lb;

  027cd	8d b5 34 fe ff
	ff		 lea	 esi, DWORD PTR $T157[ebp]
  027d3	8b 7d 1c	 mov	 edi, DWORD PTR _OutB$[ebp]
  027d6	a5		 movsd
  027d7	a5		 movsd
  027d8	a5		 movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 1253 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  027d9	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _La$[ebp+8]
  027de	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  027e3	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _La$[ebp+4]
  027e8	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _La$[ebp+4]
  027ed	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$[ebp]
  027f2	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$[ebp]
  027f7	f3 0f 58 d1	 addss	 xmm2, xmm1
  027fb	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 34   : 	float D = D3DXVec3LengthSq(&L);

  027ff	f3 0f 11 95 68
	fc ff ff	 movss	 DWORD PTR _D$122[ebp], xmm2

; 35   : 	if (D < MY_EPSILON*MY_EPSILON)

  02807	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  0280f	0f 2f 85 68 fc
	ff ff		 comiss	 xmm0, DWORD PTR _D$122[ebp]
  02816	76 0e		 jbe	 SHORT $LN380@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  02818	8b 75 08	 mov	 esi, DWORD PTR _A1$[ebp]
  0281b	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  0281e	a5		 movsd
  0281f	a5		 movsd
  02820	a5		 movsd

; 38   : 		return;

  02821	e9 56 02 00 00	 jmp	 $LN379@IntersectL
$LN380@IntersectL:
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  02826	8b 45 1c	 mov	 eax, DWORD PTR _OutB$[ebp]
  02829	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  0282c	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  02830	f3 0f 5c 01	 subss	 xmm0, DWORD PTR [ecx]
  02834	f3 0f 11 85 04
	fb ff ff	 movss	 DWORD PTR _fx$54[ebp], xmm0
  0283c	8b 45 1c	 mov	 eax, DWORD PTR _OutB$[ebp]
  0283f	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  02842	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  02847	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]
  0284c	f3 0f 11 85 00
	fb ff ff	 movss	 DWORD PTR _fy$53[ebp], xmm0
  02854	8b 45 1c	 mov	 eax, DWORD PTR _OutB$[ebp]
  02857	8b 4d 08	 mov	 ecx, DWORD PTR _A1$[ebp]
  0285a	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0285f	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]
  02864	f3 0f 11 85 fc
	fa ff ff	 movss	 DWORD PTR _fz$52[ebp], xmm0

; 180  :     x = fx;

  0286c	f3 0f 10 85 04
	fb ff ff	 movss	 xmm0, DWORD PTR _fx$54[ebp]
  02874	f3 0f 11 85 30
	ff ff ff	 movss	 DWORD PTR _AB$178[ebp], xmm0

; 181  :     y = fy;

  0287c	f3 0f 10 85 00
	fb ff ff	 movss	 xmm0, DWORD PTR _fy$53[ebp]
  02884	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR _AB$178[ebp+4], xmm0

; 182  :     z = fz;

  0288c	f3 0f 10 85 fc
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$52[ebp]
  02894	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _AB$178[ebp+8], xmm0

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0289c	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _AB$178[ebp+8]
  028a4	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  028a9	f3 0f 10 8d 34
	ff ff ff	 movss	 xmm1, DWORD PTR _AB$178[ebp+4]
  028b1	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _La$[ebp+4]
  028b6	f3 0f 10 95 30
	ff ff ff	 movss	 xmm2, DWORD PTR _AB$178[ebp]
  028be	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$[ebp]
  028c3	f3 0f 58 d1	 addss	 xmm2, xmm1
  028c7	f3 0f 58 d0	 addss	 xmm2, xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB,&L)) / D;

  028cb	f3 0f 5e 95 68
	fc ff ff	 divss	 xmm2, DWORD PTR _D$122[ebp]
  028d3	f3 0f 11 95 b4
	fd ff ff	 movss	 DWORD PTR _s$[ebp], xmm2

; 45   : 	
; 46   : 	//if (false == infinite_line) 
; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  028db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  028e3	0f 2f 85 b4 fd
	ff ff		 comiss	 xmm0, DWORD PTR _s$[ebp]
  028ea	76 12		 jbe	 SHORT $LN382@IntersectL
  028ec	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  028f4	f3 0f 11 85 64
	fc ff ff	 movss	 DWORD PTR tv3537[ebp], xmm0
  028fc	eb 10		 jmp	 SHORT $LN383@IntersectL
$LN382@IntersectL:
  028fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02906	f3 0f 11 85 64
	fc ff ff	 movss	 DWORD PTR tv3537[ebp], xmm0
$LN383@IntersectL:
  0290e	0f 57 c0	 xorps	 xmm0, xmm0
  02911	0f 2f 85 64 fc
	ff ff		 comiss	 xmm0, DWORD PTR tv3537[ebp]
  02918	76 0d		 jbe	 SHORT $LN386@IntersectL
  0291a	0f 57 c0	 xorps	 xmm0, xmm0
  0291d	f3 0f 11 85 5c
	fc ff ff	 movss	 DWORD PTR tv3541[ebp], xmm0
  02925	eb 43		 jmp	 SHORT $LN387@IntersectL
$LN386@IntersectL:
  02927	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0292f	0f 2f 85 b4 fd
	ff ff		 comiss	 xmm0, DWORD PTR _s$[ebp]
  02936	76 12		 jbe	 SHORT $LN384@IntersectL
  02938	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  02940	f3 0f 11 85 60
	fc ff ff	 movss	 DWORD PTR tv3540[ebp], xmm0
  02948	eb 10		 jmp	 SHORT $LN385@IntersectL
$LN384@IntersectL:
  0294a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02952	f3 0f 11 85 60
	fc ff ff	 movss	 DWORD PTR tv3540[ebp], xmm0
$LN385@IntersectL:
  0295a	f3 0f 10 85 60
	fc ff ff	 movss	 xmm0, DWORD PTR tv3540[ebp]
  02962	f3 0f 11 85 5c
	fc ff ff	 movss	 DWORD PTR tv3541[ebp], xmm0
$LN387@IntersectL:
  0296a	f3 0f 10 85 5c
	fc ff ff	 movss	 xmm0, DWORD PTR tv3541[ebp]
  02972	f3 0f 11 85 b4
	fd ff ff	 movss	 DWORD PTR _s$[ebp], xmm0

; 49   : 	Nearest = A1 + parameter * L;

  0297a	f3 0f 10 85 b4
	fd ff ff	 movss	 xmm0, DWORD PTR _s$[ebp]
  02982	f3 0f 11 85 84
	fd ff ff	 movss	 DWORD PTR _f$140[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 283  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0298a	f3 0f 10 85 84
	fd ff ff	 movss	 xmm0, DWORD PTR _f$140[ebp]
  02992	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _La$[ebp]
  02997	f3 0f 11 85 f8
	fa ff ff	 movss	 DWORD PTR _fx$51[ebp], xmm0
  0299f	f3 0f 10 85 84
	fd ff ff	 movss	 xmm0, DWORD PTR _f$140[ebp]
  029a7	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _La$[ebp+4]
  029ac	f3 0f 11 85 f4
	fa ff ff	 movss	 DWORD PTR _fy$50[ebp], xmm0
  029b4	f3 0f 10 85 84
	fd ff ff	 movss	 xmm0, DWORD PTR _f$140[ebp]
  029bc	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _La$[ebp+8]
  029c1	f3 0f 11 85 f0
	fa ff ff	 movss	 DWORD PTR _fz$49[ebp], xmm0

; 180  :     x = fx;

  029c9	f3 0f 10 85 f8
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$51[ebp]
  029d1	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR $T179[ebp], xmm0

; 181  :     y = fy;

  029d9	f3 0f 10 85 f4
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$50[ebp]
  029e1	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR $T179[ebp+4], xmm0

; 182  :     z = fz;

  029e9	f3 0f 10 85 f0
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$49[ebp]
  029f1	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR $T179[ebp+8], xmm0

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  029f9	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  029fc	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  02a00	f3 0f 58 85 3c
	ff ff ff	 addss	 xmm0, DWORD PTR $T179[ebp]
  02a08	f3 0f 11 85 ec
	fa ff ff	 movss	 DWORD PTR _fx$48[ebp], xmm0
  02a10	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  02a13	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  02a18	f3 0f 58 85 40
	ff ff ff	 addss	 xmm0, DWORD PTR $T179[ebp+4]
  02a20	f3 0f 11 85 e8
	fa ff ff	 movss	 DWORD PTR _fy$47[ebp], xmm0
  02a28	8b 45 08	 mov	 eax, DWORD PTR _A1$[ebp]
  02a2b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  02a30	f3 0f 58 85 44
	ff ff ff	 addss	 xmm0, DWORD PTR $T179[ebp+8]
  02a38	f3 0f 11 85 e4
	fa ff ff	 movss	 DWORD PTR _fz$46[ebp], xmm0

; 180  :     x = fx;

  02a40	f3 0f 10 85 ec
	fa ff ff	 movss	 xmm0, DWORD PTR _fx$48[ebp]
  02a48	f3 0f 11 85 28
	fe ff ff	 movss	 DWORD PTR $T156[ebp], xmm0

; 181  :     y = fy;

  02a50	f3 0f 10 85 e8
	fa ff ff	 movss	 xmm0, DWORD PTR _fy$47[ebp]
  02a58	f3 0f 11 85 2c
	fe ff ff	 movss	 DWORD PTR $T156[ebp+4], xmm0

; 182  :     z = fz;

  02a60	f3 0f 10 85 e4
	fa ff ff	 movss	 xmm0, DWORD PTR _fz$46[ebp]
  02a68	f3 0f 11 85 30
	fe ff ff	 movss	 DWORD PTR $T156[ebp+8], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  02a70	8d b5 28 fe ff
	ff		 lea	 esi, DWORD PTR $T156[ebp]
  02a76	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
  02a79	a5		 movsd
  02a7a	a5		 movsd
  02a7b	a5		 movsd
$LN379@IntersectL:
$LN219@IntersectL:
$LN209@IntersectL:

; 306  : 					s, t,
; 307  : 					OutA,
; 308  : 					OutB);
; 309  : 			}
; 310  : 		}
; 311  : 	}	
; 312  : }

  02a7c	5f		 pop	 edi
  02a7d	5e		 pop	 esi
  02a7e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  02a81	33 cd		 xor	 ecx, ebp
  02a83	e8 00 00 00 00	 call	 @__security_check_cookie@4
  02a88	c9		 leave
  02a89	c3		 ret	 0
?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
END
