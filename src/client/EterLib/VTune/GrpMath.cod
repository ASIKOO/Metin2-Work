; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?CrossProduct2D@@YAMMMMM@Z			; CrossProduct2D
PUBLIC	?IsInTriangle2D@@YA_NMMMMMMMM@Z			; IsInTriangle2D
PUBLIC	?D3DXVec3Rotation@@YAPAUD3DXVECTOR3@@PAU1@PBU1@PBUD3DXQUATERNION@@@Z ; D3DXVec3Rotation
PUBLIC	?GetRotationFromMatrix@@YAXPAUD3DXVECTOR3@@PBUD3DXMATRIX@@@Z ; GetRotationFromMatrix
PUBLIC	?GetPivotAndRotationFromMatrix@@YAXPAUD3DXMATRIX@@PAUD3DXVECTOR3@@1@Z ; GetPivotAndRotationFromMatrix
PUBLIC	?ExtractMovement@@YAXPAUD3DXMATRIX@@0@Z		; ExtractMovement
PUBLIC	__real@00000000
PUBLIC	__real@3727c5ac
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@bfc90fdb
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_atan2:PROC
EXTRN	_sqrt:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixRotationX@8:PROC
EXTRN	_D3DXMatrixRotationY@8:PROC
EXTRN	_D3DXMatrixRotationZ@8:PROC
EXTRN	_D3DXQuaternionMultiply@12:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bfc90fdb
CONST	SEGMENT
__real@bfc90fdb DD 0bfc90fdbr			; -1.5708
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
;	COMDAT ?ExtractMovement@@YAXPAUD3DXMATRIX@@0@Z
_TEXT	SEGMENT
$T1 = -556						; size = 64
_matT$2 = -492						; size = 64
$T3 = -428						; size = 64
_matTranslation$ = -364					; size = 64
_matT$4 = -300						; size = 64
$T5 = -236						; size = 64
_matRotationZ$ = -172					; size = 64
_matT$6 = -108						; size = 64
_matRotationX$ = -44					; size = 64
_matRotationY$ = 20					; size = 64
_v3Pivot$ = 84						; size = 12
_v3Rotation$ = 96					; size = 12
__$ArrayPad$ = 108					; size = 4
_pTargetMatrix$ = 120					; size = 4
_pSourceMatrix$ = 124					; size = 4
?ExtractMovement@@YAXPAUD3DXMATRIX@@0@Z PROC		; ExtractMovement, COMDAT

; 120  : {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	81 ec 9c 02 00
	00		 sub	 esp, 668		; 0000029cH
  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00010	33 c5		 xor	 eax, ebp
  00012	89 45 6c	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00015	56		 push	 esi
  00016	57		 push	 edi

; 121  : 	D3DXVECTOR3 v3Pivot;
; 122  : 	D3DXVECTOR3 v3Rotation;
; 123  : 	GetPivotAndRotationFromMatrix(pSourceMatrix, &v3Pivot, &v3Rotation);

  00017	8d 45 60	 lea	 eax, DWORD PTR _v3Rotation$[ebp]
  0001a	50		 push	 eax
  0001b	8d 45 54	 lea	 eax, DWORD PTR _v3Pivot$[ebp]
  0001e	50		 push	 eax
  0001f	ff 75 7c	 push	 DWORD PTR _pSourceMatrix$[ebp]
  00022	e8 00 00 00 00	 call	 ?GetPivotAndRotationFromMatrix@@YAXPAUD3DXMATRIX@@PAUD3DXVECTOR3@@1@Z ; GetPivotAndRotationFromMatrix
  00027	83 c4 0c	 add	 esp, 12			; 0000000cH

; 124  : 
; 125  : 	D3DXMATRIX matRotationX;
; 126  : 	D3DXMatrixRotationX(&matRotationX, v3Rotation.x);

  0002a	51		 push	 ecx
  0002b	f3 0f 10 45 60	 movss	 xmm0, DWORD PTR _v3Rotation$[ebp]
  00030	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00035	8d 45 d4	 lea	 eax, DWORD PTR _matRotationX$[ebp]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _D3DXMatrixRotationX@8

; 127  : 	D3DXMATRIX matRotationY;
; 128  : 	D3DXMatrixRotationY(&matRotationY, v3Rotation.y);

  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 64	 movss	 xmm0, DWORD PTR _v3Rotation$[ebp+4]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	8d 45 14	 lea	 eax, DWORD PTR _matRotationY$[ebp]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _D3DXMatrixRotationY@8

; 129  : 	D3DXMATRIX matRotationZ;
; 130  : 	D3DXMatrixRotationZ(&matRotationZ, v3Rotation.z);

  00052	51		 push	 ecx
  00053	f3 0f 10 45 68	 movss	 xmm0, DWORD PTR _v3Rotation$[ebp+8]
  00058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005d	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _matRotationZ$[ebp]
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _D3DXMatrixRotationZ@8

; 131  : 
; 132  : 	D3DXMATRIX matTranslation;
; 133  : 	D3DXMatrixTranslation(&matTranslation, v3Pivot.x, v3Pivot.y, v3Pivot.z);

  00069	51		 push	 ecx
  0006a	f3 0f 10 45 5c	 movss	 xmm0, DWORD PTR _v3Pivot$[ebp+8]
  0006f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00074	51		 push	 ecx
  00075	f3 0f 10 45 58	 movss	 xmm0, DWORD PTR _v3Pivot$[ebp+4]
  0007a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007f	51		 push	 ecx
  00080	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _v3Pivot$[ebp]
  00085	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008a	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _matTranslation$[ebp]
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  00096	8d 45 14	 lea	 eax, DWORD PTR _matRotationY$[ebp]
  00099	50		 push	 eax
  0009a	8d 45 d4	 lea	 eax, DWORD PTR _matRotationX$[ebp]
  0009d	50		 push	 eax
  0009e	8d 45 94	 lea	 eax, DWORD PTR _matT$6[ebp]
  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 581  :     return matT;

  000a7	6a 10		 push	 16			; 00000010H
  000a9	59		 pop	 ecx
  000aa	8d 75 94	 lea	 esi, DWORD PTR _matT$6[ebp]
  000ad	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR $T5[ebp]
  000b3	f3 a5		 rep movsd

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  000b5	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _matRotationZ$[ebp]
  000bb	50		 push	 eax
  000bc	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  000c2	50		 push	 eax
  000c3	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _matT$4[ebp]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 581  :     return matT;

  000cf	6a 10		 push	 16			; 00000010H
  000d1	59		 pop	 ecx
  000d2	8d b5 d4 fe ff
	ff		 lea	 esi, DWORD PTR _matT$4[ebp]
  000d8	8d bd 54 fe ff
	ff		 lea	 edi, DWORD PTR $T3[ebp]
  000de	f3 a5		 rep movsd

; 580  :     D3DXMatrixMultiply(&matT, this, &mat);

  000e0	8d 85 94 fe ff
	ff		 lea	 eax, DWORD PTR _matTranslation$[ebp]
  000e6	50		 push	 eax
  000e7	8d 85 54 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000ed	50		 push	 eax
  000ee	8d 85 14 fe ff
	ff		 lea	 eax, DWORD PTR _matT$2[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 581  :     return matT;

  000fa	6a 10		 push	 16			; 00000010H
  000fc	59		 pop	 ecx
  000fd	8d b5 14 fe ff
	ff		 lea	 esi, DWORD PTR _matT$2[ebp]
  00103	8d bd d4 fd ff
	ff		 lea	 edi, DWORD PTR $T1[ebp]
  00109	f3 a5		 rep movsd
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 135  : 	*pTargetMatrix = matRotationX * matRotationY * matRotationZ * matTranslation;

  0010b	6a 10		 push	 16			; 00000010H
  0010d	59		 pop	 ecx
  0010e	8d b5 d4 fd ff
	ff		 lea	 esi, DWORD PTR $T1[ebp]
  00114	8b 7d 78	 mov	 edi, DWORD PTR _pTargetMatrix$[ebp]
  00117	f3 a5		 rep movsd

; 136  : }

  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	8b 4d 6c	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0011e	33 cd		 xor	 ecx, ebp
  00120	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00125	83 c5 70	 add	 ebp, 112		; 00000070H
  00128	c9		 leave
  00129	c3		 ret	 0
?ExtractMovement@@YAXPAUD3DXMATRIX@@0@Z ENDP		; ExtractMovement
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
;	COMDAT ?GetPivotAndRotationFromMatrix@@YAXPAUD3DXMATRIX@@PAUD3DXVECTOR3@@1@Z
_TEXT	SEGMENT
__Y$ = -44						; size = 4
__X$ = -40						; size = 4
__Y$ = -36						; size = 4
__X$ = -32						; size = 4
__Y$ = -28						; size = 4
__X$ = -24						; size = 4
_z$ = -20						; size = 4
_y$ = -16						; size = 4
_cx$ = -12						; size = 4
_x$ = -8						; size = 4
_sx$ = -4						; size = 4
_pMatrix$ = 8						; size = 4
_pPivot$ = 12						; size = 4
_pRotation$ = 16					; size = 4
?GetPivotAndRotationFromMatrix@@YAXPAUD3DXMATRIX@@PAUD3DXVECTOR3@@1@Z PROC ; GetPivotAndRotationFromMatrix, COMDAT

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 88   : 	float sx = pMatrix->_32;

  00006	8b 45 08	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  00009	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  0000e	f3 0f 11 45 fc	 movss	 DWORD PTR _sx$[ebp], xmm0

; 89   : 	float cx = sqrtf(1.0f - sx * sx);

  00013	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00018	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  0001d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00025	f3 0f 5c c8	 subss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00029	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  0002d	51		 push	 ecx
  0002e	51		 push	 ecx
  0002f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00034	e8 00 00 00 00	 call	 _sqrt
  00039	59		 pop	 ecx
  0003a	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 89   : 	float cx = sqrtf(1.0f - sx * sx);

  0003b	d9 5d f4	 fstp	 DWORD PTR _cx$[ebp]

; 90   : 	float x, y, z;
; 91   : 
; 92   : 	if (cx < 0.00001f)

  0003e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3727c5ac
  00046	0f 2f 45 f4	 comiss	 xmm0, DWORD PTR _cx$[ebp]
  0004a	76 73		 jbe	 SHORT $LN2@GetPivotAn

; 93   : 	{
; 94   : 		if (sx > 0)

  0004c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00051	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00058	76 0f		 jbe	 SHORT $LN4@GetPivotAn

; 95   : 			x = D3DX_PI / 2;

  0005a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00062	f3 0f 11 45 f8	 movss	 DWORD PTR _x$[ebp], xmm0
  00067	eb 0d		 jmp	 SHORT $LN5@GetPivotAn
$LN4@GetPivotAn:

; 96   : 		else
; 97   : 			x = -D3DX_PI / 2;

  00069	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00071	f3 0f 11 45 f8	 movss	 DWORD PTR _x$[ebp], xmm0
$LN5@GetPivotAn:

; 99   : 		y = atan2f(pMatrix->_31, pMatrix->_11);

  00076	8b 45 08	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  00079	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  0007e	f3 0f 11 45 e4	 movss	 DWORD PTR __Y$[ebp], xmm0
  00083	8b 45 08	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  00086	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008a	f3 0f 11 45 e8	 movss	 DWORD PTR __X$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  0008f	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  00094	51		 push	 ecx
  00095	51		 push	 ecx
  00096	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0009b	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  000a0	51		 push	 ecx
  000a1	51		 push	 ecx
  000a2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000a7	e8 00 00 00 00	 call	 _atan2
  000ac	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 99   : 		y = atan2f(pMatrix->_31, pMatrix->_11);

  000af	d9 5d f0	 fstp	 DWORD PTR _y$[ebp]

; 100  : 		z = 0.0f;

  000b2	0f 57 c0	 xorps	 xmm0, xmm0
  000b5	f3 0f 11 45 ec	 movss	 DWORD PTR _z$[ebp], xmm0

; 101  : 	}

  000ba	e9 ab 00 00 00	 jmp	 $LN3@GetPivotAn
$LN2@GetPivotAn:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  000bf	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR _cx$[ebp]
  000c4	51		 push	 ecx
  000c5	51		 push	 ecx
  000c6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000cb	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _sx$[ebp]
  000d0	51		 push	 ecx
  000d1	51		 push	 ecx
  000d2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000d7	e8 00 00 00 00	 call	 _atan2
  000dc	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 104  : 		x = atan2f(sx, cx);

  000df	d9 5d f8	 fstp	 DWORD PTR _x$[ebp]

; 105  : 		y = atan2f(-pMatrix->_31, pMatrix->_33);

  000e2	8b 45 08	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  000e5	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  000ea	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000f1	f3 0f 11 45 dc	 movss	 DWORD PTR __Y$[ebp], xmm0
  000f6	8b 45 08	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  000f9	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  000fe	f3 0f 11 45 e0	 movss	 DWORD PTR __X$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  00103	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  00108	51		 push	 ecx
  00109	51		 push	 ecx
  0010a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0010f	f3 0f 5a 45 dc	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  00114	51		 push	 ecx
  00115	51		 push	 ecx
  00116	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011b	e8 00 00 00 00	 call	 _atan2
  00120	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 105  : 		y = atan2f(-pMatrix->_31, pMatrix->_33);

  00123	d9 5d f0	 fstp	 DWORD PTR _y$[ebp]

; 106  : 		z = atan2f(-pMatrix->_12, pMatrix->_22);

  00126	8b 45 08	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  00129	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0012e	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00135	f3 0f 11 45 d4	 movss	 DWORD PTR __Y$[ebp], xmm0
  0013a	8b 45 08	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  0013d	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00142	f3 0f 11 45 d8	 movss	 DWORD PTR __X$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  00147	f3 0f 5a 45 d8	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0014c	51		 push	 ecx
  0014d	51		 push	 ecx
  0014e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00153	f3 0f 5a 45 d4	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  00158	51		 push	 ecx
  00159	51		 push	 ecx
  0015a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0015f	e8 00 00 00 00	 call	 _atan2
  00164	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 106  : 		z = atan2f(-pMatrix->_12, pMatrix->_22);

  00167	d9 5d ec	 fstp	 DWORD PTR _z$[ebp]
$LN3@GetPivotAn:

; 107  : 	}
; 108  : 
; 109  : 	pRotation->x = x;

  0016a	8b 45 10	 mov	 eax, DWORD PTR _pRotation$[ebp]
  0016d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _x$[ebp]
  00172	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 110  : 	pRotation->y = y;

  00176	8b 45 10	 mov	 eax, DWORD PTR _pRotation$[ebp]
  00179	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _y$[ebp]
  0017e	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 111  : 	pRotation->z = z;

  00183	8b 45 10	 mov	 eax, DWORD PTR _pRotation$[ebp]
  00186	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _z$[ebp]
  0018b	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 112  : 
; 113  : 	pPivot->x = pMatrix->_41;

  00190	8b 45 0c	 mov	 eax, DWORD PTR _pPivot$[ebp]
  00193	8b 4d 08	 mov	 ecx, DWORD PTR _pMatrix$[ebp]
  00196	8b 49 30	 mov	 ecx, DWORD PTR [ecx+48]
  00199	89 08		 mov	 DWORD PTR [eax], ecx

; 114  : 	pPivot->y = pMatrix->_42;

  0019b	8b 45 0c	 mov	 eax, DWORD PTR _pPivot$[ebp]
  0019e	8b 4d 08	 mov	 ecx, DWORD PTR _pMatrix$[ebp]
  001a1	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  001a4	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 115  : 	pPivot->z = pMatrix->_43;

  001a7	8b 45 0c	 mov	 eax, DWORD PTR _pPivot$[ebp]
  001aa	8b 4d 08	 mov	 ecx, DWORD PTR _pMatrix$[ebp]
  001ad	8b 49 38	 mov	 ecx, DWORD PTR [ecx+56]
  001b0	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 116  : }

  001b3	c9		 leave
  001b4	c3		 ret	 0
?GetPivotAndRotationFromMatrix@@YAXPAUD3DXMATRIX@@PAUD3DXVECTOR3@@1@Z ENDP ; GetPivotAndRotationFromMatrix
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
;	COMDAT ?GetRotationFromMatrix@@YAXPAUD3DXVECTOR3@@PBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
__Y$ = -32						; size = 4
__X$ = -28						; size = 4
__Y$ = -24						; size = 4
__X$ = -20						; size = 4
__Y$ = -16						; size = 4
__X$ = -12						; size = 4
_cx$ = -8						; size = 4
_sx$ = -4						; size = 4
_pRotation$ = 8						; size = 4
_c_pMatrix$ = 12					; size = 4
?GetRotationFromMatrix@@YAXPAUD3DXVECTOR3@@PBUD3DXMATRIX@@@Z PROC ; GetRotationFromMatrix, COMDAT

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 65   : 	float sx = c_pMatrix->_32;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _c_pMatrix$[ebp]
  00009	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  0000e	f3 0f 11 45 fc	 movss	 DWORD PTR _sx$[ebp], xmm0

; 66   : 	float cx = sqrtf(1.0f - sx * sx);

  00013	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00018	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _sx$[ebp]
  0001d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00025	f3 0f 5c c8	 subss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 760  :             return (float)sqrt(_X);

  00029	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  0002d	51		 push	 ecx
  0002e	51		 push	 ecx
  0002f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00034	e8 00 00 00 00	 call	 _sqrt
  00039	59		 pop	 ecx
  0003a	59		 pop	 ecx
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 66   : 	float cx = sqrtf(1.0f - sx * sx);

  0003b	d9 5d f8	 fstp	 DWORD PTR _cx$[ebp]

; 67   : 
; 68   : 	if (cx < 0.00001f)

  0003e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3727c5ac
  00046	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR _cx$[ebp]
  0004a	76 7d		 jbe	 SHORT $LN2@GetRotatio

; 69   : 	{
; 70   : 		if (sx > 0)

  0004c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00051	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00058	76 11		 jbe	 SHORT $LN4@GetRotatio

; 71   : 			pRotation->x = D3DX_PI / 2;

  0005a	8b 45 08	 mov	 eax, DWORD PTR _pRotation$[ebp]
  0005d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00065	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00069	eb 0f		 jmp	 SHORT $LN5@GetRotatio
$LN4@GetRotatio:

; 72   : 		else
; 73   : 			pRotation->x = -D3DX_PI / 2;

  0006b	8b 45 08	 mov	 eax, DWORD PTR _pRotation$[ebp]
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bfc90fdb
  00076	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
$LN5@GetRotatio:

; 75   : 		pRotation->y = atan2f(c_pMatrix->_31, c_pMatrix->_11);

  0007a	8b 45 0c	 mov	 eax, DWORD PTR _c_pMatrix$[ebp]
  0007d	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00082	f3 0f 11 45 f0	 movss	 DWORD PTR __Y$[ebp], xmm0
  00087	8b 45 0c	 mov	 eax, DWORD PTR _c_pMatrix$[ebp]
  0008a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0008e	f3 0f 11 45 f4	 movss	 DWORD PTR __X$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  00093	f3 0f 5a 45 f4	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  00098	51		 push	 ecx
  00099	51		 push	 ecx
  0009a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0009f	f3 0f 5a 45 f0	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  000a4	51		 push	 ecx
  000a5	51		 push	 ecx
  000a6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000ab	e8 00 00 00 00	 call	 _atan2
  000b0	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 75   : 		pRotation->y = atan2f(c_pMatrix->_31, c_pMatrix->_11);

  000b3	8b 45 08	 mov	 eax, DWORD PTR _pRotation$[ebp]
  000b6	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 76   : 		pRotation->z = 0.0f;

  000b9	8b 45 08	 mov	 eax, DWORD PTR _pRotation$[ebp]
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 77   : 	}

  000c4	e9 b3 00 00 00	 jmp	 $LN3@GetRotatio
$LN2@GetRotatio:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  000c9	f3 0f 5a 45 f8	 cvtss2sd xmm0, DWORD PTR _cx$[ebp]
  000ce	51		 push	 ecx
  000cf	51		 push	 ecx
  000d0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000d5	f3 0f 5a 45 fc	 cvtss2sd xmm0, DWORD PTR _sx$[ebp]
  000da	51		 push	 ecx
  000db	51		 push	 ecx
  000dc	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000e1	e8 00 00 00 00	 call	 _atan2
  000e6	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 80   : 		pRotation->x = atan2f(sx, cx);

  000e9	8b 45 08	 mov	 eax, DWORD PTR _pRotation$[ebp]
  000ec	d9 18		 fstp	 DWORD PTR [eax]

; 81   : 		pRotation->y = atan2f(-c_pMatrix->_31, c_pMatrix->_33);

  000ee	8b 45 0c	 mov	 eax, DWORD PTR _c_pMatrix$[ebp]
  000f1	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  000f6	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000fd	f3 0f 11 45 e8	 movss	 DWORD PTR __Y$[ebp], xmm0
  00102	8b 45 0c	 mov	 eax, DWORD PTR _c_pMatrix$[ebp]
  00105	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  0010a	f3 0f 11 45 ec	 movss	 DWORD PTR __X$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  0010f	f3 0f 5a 45 ec	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  00114	51		 push	 ecx
  00115	51		 push	 ecx
  00116	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011b	f3 0f 5a 45 e8	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  00120	51		 push	 ecx
  00121	51		 push	 ecx
  00122	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00127	e8 00 00 00 00	 call	 _atan2
  0012c	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 81   : 		pRotation->y = atan2f(-c_pMatrix->_31, c_pMatrix->_33);

  0012f	8b 45 08	 mov	 eax, DWORD PTR _pRotation$[ebp]
  00132	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 82   : 		pRotation->z = atan2f(-c_pMatrix->_12, c_pMatrix->_22);

  00135	8b 45 0c	 mov	 eax, DWORD PTR _c_pMatrix$[ebp]
  00138	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0013d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00144	f3 0f 11 45 e0	 movss	 DWORD PTR __Y$[ebp], xmm0
  00149	8b 45 0c	 mov	 eax, DWORD PTR _c_pMatrix$[ebp]
  0014c	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00151	f3 0f 11 45 e4	 movss	 DWORD PTR __X$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h

; 634  :             return (float)atan2(_Y, _X);

  00156	f3 0f 5a 45 e4	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0015b	51		 push	 ecx
  0015c	51		 push	 ecx
  0015d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00162	f3 0f 5a 45 e0	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  00167	51		 push	 ecx
  00168	51		 push	 ecx
  00169	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0016e	e8 00 00 00 00	 call	 _atan2
  00173	83 c4 10	 add	 esp, 16			; 00000010H
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 82   : 		pRotation->z = atan2f(-c_pMatrix->_12, c_pMatrix->_22);

  00176	8b 45 08	 mov	 eax, DWORD PTR _pRotation$[ebp]
  00179	d9 58 08	 fstp	 DWORD PTR [eax+8]
$LN3@GetRotatio:

; 83   : 	}
; 84   : }

  0017c	c9		 leave
  0017d	c3		 ret	 0
?GetRotationFromMatrix@@YAXPAUD3DXVECTOR3@@PBUD3DXMATRIX@@@Z ENDP ; GetRotationFromMatrix
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
;	COMDAT ?D3DXVec3Rotation@@YAPAUD3DXVECTOR3@@PAU1@PBU1@PBUD3DXQUATERNION@@@Z
_TEXT	SEGMENT
_qtSrc$ = -44						; size = 16
_qtRet$ = -28						; size = 16
_fz$ = -12						; size = 4
_fy$ = -8						; size = 4
_fx$ = -4						; size = 4
_pvtOut$ = 8						; size = 4
_c_pvtSrc$ = 12						; size = 4
_c_pqtRot$ = 16						; size = 4
?D3DXVec3Rotation@@YAPAUD3DXVECTOR3@@PAU1@PBU1@PBUD3DXQUATERNION@@@Z PROC ; D3DXVec3Rotation, COMDAT

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 48   : 	D3DXQUATERNION qtSrc(c_pvtSrc->x, c_pvtSrc->y, c_pvtSrc->z, 0);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _c_pvtSrc$[ebp]
  00009	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0000d	f3 0f 11 45 fc	 movss	 DWORD PTR _fx$[ebp], xmm0
  00012	8b 45 0c	 mov	 eax, DWORD PTR _c_pvtSrc$[ebp]
  00015	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0001a	f3 0f 11 45 f8	 movss	 DWORD PTR _fy$[ebp], xmm0
  0001f	8b 45 0c	 mov	 eax, DWORD PTR _c_pvtSrc$[ebp]
  00022	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00027	f3 0f 11 45 f4	 movss	 DWORD PTR _fz$[ebp], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\M2Data\include\d3dx8math.inl

; 667  :     x = fx;

  0002c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00031	f3 0f 11 45 d4	 movss	 DWORD PTR _qtSrc$[ebp], xmm0

; 668  :     y = fy;

  00036	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0003b	f3 0f 11 45 d8	 movss	 DWORD PTR _qtSrc$[ebp+4], xmm0

; 669  :     z = fz;

  00040	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00045	f3 0f 11 45 dc	 movss	 DWORD PTR _qtSrc$[ebp+8], xmm0

; 670  :     w = fw;

  0004a	0f 57 c0	 xorps	 xmm0, xmm0
  0004d	f3 0f 11 45 e0	 movss	 DWORD PTR _qtSrc$[ebp+12], xmm0

; 1616 :     pOut->x = -pQ->x;

  00052	8b 45 10	 mov	 eax, DWORD PTR _c_pqtRot$[ebp]
  00055	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00059	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00060	f3 0f 11 45 e4	 movss	 DWORD PTR _qtRet$[ebp], xmm0

; 1617 :     pOut->y = -pQ->y;

  00065	8b 45 10	 mov	 eax, DWORD PTR _c_pqtRot$[ebp]
  00068	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0006d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00074	f3 0f 11 45 e8	 movss	 DWORD PTR _qtRet$[ebp+4], xmm0

; 1618 :     pOut->z = -pQ->z;

  00079	8b 45 10	 mov	 eax, DWORD PTR _c_pqtRot$[ebp]
  0007c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00081	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00088	f3 0f 11 45 ec	 movss	 DWORD PTR _qtRet$[ebp+8], xmm0

; 1619 :     pOut->w =  pQ->w;

  0008d	8b 45 10	 mov	 eax, DWORD PTR _c_pqtRot$[ebp]
  00090	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  00095	f3 0f 11 45 f0	 movss	 DWORD PTR _qtRet$[ebp+12], xmm0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp

; 51   : 	D3DXQuaternionMultiply(&qtRet, &qtSrc, &qtRet);

  0009a	8d 45 e4	 lea	 eax, DWORD PTR _qtRet$[ebp]
  0009d	50		 push	 eax
  0009e	8d 45 d4	 lea	 eax, DWORD PTR _qtSrc$[ebp]
  000a1	50		 push	 eax
  000a2	8d 45 e4	 lea	 eax, DWORD PTR _qtRet$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 52   : 	D3DXQuaternionMultiply(&qtRet, c_pqtRot, &qtRet);

  000ab	8d 45 e4	 lea	 eax, DWORD PTR _qtRet$[ebp]
  000ae	50		 push	 eax
  000af	ff 75 10	 push	 DWORD PTR _c_pqtRot$[ebp]
  000b2	8d 45 e4	 lea	 eax, DWORD PTR _qtRet$[ebp]
  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 53   : 
; 54   : 	pvtOut->x=qtRet.x;

  000bb	8b 45 08	 mov	 eax, DWORD PTR _pvtOut$[ebp]
  000be	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _qtRet$[ebp]
  000c3	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 55   : 	pvtOut->y=qtRet.y;

  000c7	8b 45 08	 mov	 eax, DWORD PTR _pvtOut$[ebp]
  000ca	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _qtRet$[ebp+4]
  000cf	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 56   : 	pvtOut->z=qtRet.z;

  000d4	8b 45 08	 mov	 eax, DWORD PTR _pvtOut$[ebp]
  000d7	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _qtRet$[ebp+8]
  000dc	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 57   : 
; 58   : 	return pvtOut;

  000e1	8b 45 08	 mov	 eax, DWORD PTR _pvtOut$[ebp]

; 59   : }

  000e4	c9		 leave
  000e5	c3		 ret	 0
?D3DXVec3Rotation@@YAPAUD3DXVECTOR3@@PAU1@PBU1@PBUD3DXQUATERNION@@@Z ENDP ; D3DXVec3Rotation
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
;	COMDAT ?IsInTriangle2D@@YA_NMMMMMMMM@Z
_TEXT	SEGMENT
_c3$ = -12						; size = 4
_c2$ = -8						; size = 4
_c1$ = -4						; size = 4
_ax$ = 8						; size = 4
_ay$ = 12						; size = 4
_bx$ = 16						; size = 4
_by$ = 20						; size = 4
_cx$ = 24						; size = 4
_cy$ = 28						; size = 4
_tx$ = 32						; size = 4
_ty$ = 36						; size = 4
?IsInTriangle2D@@YA_NMMMMMMMM@Z PROC			; IsInTriangle2D, COMDAT

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 11   : 	float c1 = CrossProduct2D(bx-ax, by-ay, tx-ax, ty-ay);

  00006	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _ty$[ebp]
  0000b	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _ay$[ebp]
  00010	51		 push	 ecx
  00011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00016	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _tx$[ebp]
  0001b	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _ax$[ebp]
  00020	51		 push	 ecx
  00021	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00026	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _by$[ebp]
  0002b	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _ay$[ebp]
  00030	51		 push	 ecx
  00031	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00036	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _bx$[ebp]
  0003b	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _ax$[ebp]
  00040	51		 push	 ecx
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	e8 00 00 00 00	 call	 ?CrossProduct2D@@YAMMMMM@Z ; CrossProduct2D
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	d9 5d fc	 fstp	 DWORD PTR _c1$[ebp]

; 12   : 	float c2 = CrossProduct2D(cx-bx, cy-by, tx-bx, ty-by);

  00051	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _ty$[ebp]
  00056	f3 0f 5c 45 14	 subss	 xmm0, DWORD PTR _by$[ebp]
  0005b	51		 push	 ecx
  0005c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00061	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _tx$[ebp]
  00066	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _bx$[ebp]
  0006b	51		 push	 ecx
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _cy$[ebp]
  00076	f3 0f 5c 45 14	 subss	 xmm0, DWORD PTR _by$[ebp]
  0007b	51		 push	 ecx
  0007c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00081	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _cx$[ebp]
  00086	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _bx$[ebp]
  0008b	51		 push	 ecx
  0008c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00091	e8 00 00 00 00	 call	 ?CrossProduct2D@@YAMMMMM@Z ; CrossProduct2D
  00096	83 c4 10	 add	 esp, 16			; 00000010H
  00099	d9 5d f8	 fstp	 DWORD PTR _c2$[ebp]

; 13   : 	float c3 = CrossProduct2D(ax-cx, ay-cy, tx-cx, ty-cy);

  0009c	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _ty$[ebp]
  000a1	f3 0f 5c 45 1c	 subss	 xmm0, DWORD PTR _cy$[ebp]
  000a6	51		 push	 ecx
  000a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ac	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _tx$[ebp]
  000b1	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _cx$[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bc	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _ay$[ebp]
  000c1	f3 0f 5c 45 1c	 subss	 xmm0, DWORD PTR _cy$[ebp]
  000c6	51		 push	 ecx
  000c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cc	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _ax$[ebp]
  000d1	f3 0f 5c 45 18	 subss	 xmm0, DWORD PTR _cx$[ebp]
  000d6	51		 push	 ecx
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	e8 00 00 00 00	 call	 ?CrossProduct2D@@YAMMMMM@Z ; CrossProduct2D
  000e1	83 c4 10	 add	 esp, 16			; 00000010H
  000e4	d9 5d f4	 fstp	 DWORD PTR _c3$[ebp]

; 14   : 	
; 15   : 	if (c1 * c2 > 0.0f && c1 * c3 > 0.0f)

  000e7	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _c1$[ebp]
  000ec	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _c2$[ebp]
  000f1	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  000f8	76 1a		 jbe	 SHORT $LN2@IsInTriang
  000fa	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _c1$[ebp]
  000ff	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _c3$[ebp]
  00104	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0010b	76 07		 jbe	 SHORT $LN2@IsInTriang

; 16   : 		return true;

  0010d	b0 01		 mov	 al, 1
  0010f	e9 ba 00 00 00	 jmp	 $LN1@IsInTriang
$LN2@IsInTriang:

; 17   : 
; 18   : 	if (c1 * c2 * c3 == 0.0f)

  00114	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _c1$[ebp]
  00119	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _c2$[ebp]
  0011e	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _c3$[ebp]
  00123	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  0012a	9f		 lahf
  0012b	f6 c4 44	 test	 ah, 68			; 00000044H
  0012e	0f 8a 98 00 00
	00		 jp	 $LN3@IsInTriang

; 19   : 	{
; 20   : 		if (tx < ax)

  00134	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _ax$[ebp]
  00139	0f 2f 45 20	 comiss	 xmm0, DWORD PTR _tx$[ebp]
  0013d	76 1a		 jbe	 SHORT $LN6@IsInTriang

; 21   : 			if (tx < bx)

  0013f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _bx$[ebp]
  00144	0f 2f 45 20	 comiss	 xmm0, DWORD PTR _tx$[ebp]
  00148	76 0f		 jbe	 SHORT $LN6@IsInTriang

; 22   : 				if (tx < cx)

  0014a	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _cx$[ebp]
  0014f	0f 2f 45 20	 comiss	 xmm0, DWORD PTR _tx$[ebp]
  00153	76 04		 jbe	 SHORT $LN6@IsInTriang

; 23   : 					return false;

  00155	32 c0		 xor	 al, al
  00157	eb 75		 jmp	 SHORT $LN1@IsInTriang
$LN6@IsInTriang:

; 24   : 
; 25   : 		if (tx > ax)

  00159	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _tx$[ebp]
  0015e	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _ax$[ebp]
  00162	76 1a		 jbe	 SHORT $LN9@IsInTriang

; 26   : 			if (tx > bx)

  00164	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _tx$[ebp]
  00169	0f 2f 45 10	 comiss	 xmm0, DWORD PTR _bx$[ebp]
  0016d	76 0f		 jbe	 SHORT $LN9@IsInTriang

; 27   : 				if (tx > cx)

  0016f	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _tx$[ebp]
  00174	0f 2f 45 18	 comiss	 xmm0, DWORD PTR _cx$[ebp]
  00178	76 04		 jbe	 SHORT $LN9@IsInTriang

; 28   : 					return false;

  0017a	32 c0		 xor	 al, al
  0017c	eb 50		 jmp	 SHORT $LN1@IsInTriang
$LN9@IsInTriang:

; 29   : 
; 30   : 		if (ty < ay)

  0017e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _ay$[ebp]
  00183	0f 2f 45 24	 comiss	 xmm0, DWORD PTR _ty$[ebp]
  00187	76 1a		 jbe	 SHORT $LN12@IsInTriang

; 31   : 			if (ty < by)

  00189	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _by$[ebp]
  0018e	0f 2f 45 24	 comiss	 xmm0, DWORD PTR _ty$[ebp]
  00192	76 0f		 jbe	 SHORT $LN12@IsInTriang

; 32   : 				if (ty < cy)

  00194	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _cy$[ebp]
  00199	0f 2f 45 24	 comiss	 xmm0, DWORD PTR _ty$[ebp]
  0019d	76 04		 jbe	 SHORT $LN12@IsInTriang

; 33   : 					return false;

  0019f	32 c0		 xor	 al, al
  001a1	eb 2b		 jmp	 SHORT $LN1@IsInTriang
$LN12@IsInTriang:

; 34   : 
; 35   : 		if (ty > ay)

  001a3	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _ty$[ebp]
  001a8	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _ay$[ebp]
  001ac	76 1a		 jbe	 SHORT $LN15@IsInTriang

; 36   : 			if (ty > by)

  001ae	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _ty$[ebp]
  001b3	0f 2f 45 14	 comiss	 xmm0, DWORD PTR _by$[ebp]
  001b7	76 0f		 jbe	 SHORT $LN15@IsInTriang

; 37   : 				if (ty > cy)

  001b9	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _ty$[ebp]
  001be	0f 2f 45 1c	 comiss	 xmm0, DWORD PTR _cy$[ebp]
  001c2	76 04		 jbe	 SHORT $LN15@IsInTriang

; 38   : 					return false;

  001c4	32 c0		 xor	 al, al
  001c6	eb 06		 jmp	 SHORT $LN1@IsInTriang
$LN15@IsInTriang:

; 39   : 
; 40   : 		return true;

  001c8	b0 01		 mov	 al, 1
  001ca	eb 02		 jmp	 SHORT $LN1@IsInTriang
$LN3@IsInTriang:

; 41   : 	}
; 42   : 
; 43   : 	return false;

  001cc	32 c0		 xor	 al, al
$LN1@IsInTriang:

; 44   : }

  001ce	c9		 leave
  001cf	c3		 ret	 0
?IsInTriangle2D@@YA_NMMMMMMMM@Z ENDP			; IsInTriangle2D
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpMath.cpp
;	COMDAT ?CrossProduct2D@@YAMMMMM@Z
_TEXT	SEGMENT
tv70 = -4						; size = 4
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
?CrossProduct2D@@YAMMMMM@Z PROC				; CrossProduct2D, COMDAT

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 6    : 	return x1*y2-y1*x2;

  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x1$[ebp]
  00009	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _y2$[ebp]
  0000e	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _y1$[ebp]
  00013	f3 0f 59 4d 10	 mulss	 xmm1, DWORD PTR _x2$[ebp]
  00018	f3 0f 5c c1	 subss	 xmm0, xmm1
  0001c	f3 0f 11 45 fc	 movss	 DWORD PTR tv70[ebp], xmm0
  00021	d9 45 fc	 fld	 DWORD PTR tv70[ebp]

; 7    : }

  00024	c9		 leave
  00025	c3		 ret	 0
?CrossProduct2D@@YAMMMMM@Z ENDP				; CrossProduct2D
_TEXT	ENDS
END
