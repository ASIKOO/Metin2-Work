; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0CGraphicIndexBuffer@@QAE@XZ			; CGraphicIndexBuffer::CGraphicIndexBuffer
PUBLIC	??1CGraphicIndexBuffer@@UAE@XZ			; CGraphicIndexBuffer::~CGraphicIndexBuffer
PUBLIC	?Destroy@CGraphicIndexBuffer@@QAEXXZ		; CGraphicIndexBuffer::Destroy
PUBLIC	?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z ; CGraphicIndexBuffer::Create
PUBLIC	?Create@CGraphicIndexBuffer@@QAE_NHPAUSFace@@@Z	; CGraphicIndexBuffer::Create
PUBLIC	?CreateDeviceObjects@CGraphicIndexBuffer@@QAE_NXZ ; CGraphicIndexBuffer::CreateDeviceObjects
PUBLIC	?DestroyDeviceObjects@CGraphicIndexBuffer@@QAEXXZ ; CGraphicIndexBuffer::DestroyDeviceObjects
PUBLIC	?Copy@CGraphicIndexBuffer@@QAE_NHPBX@Z		; CGraphicIndexBuffer::Copy
PUBLIC	?Lock@CGraphicIndexBuffer@@QBE_NPAPAX@Z		; CGraphicIndexBuffer::Lock
PUBLIC	?Unlock@CGraphicIndexBuffer@@QBEXXZ		; CGraphicIndexBuffer::Unlock
PUBLIC	?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z		; CGraphicIndexBuffer::Lock
PUBLIC	?Unlock@CGraphicIndexBuffer@@QAEXXZ		; CGraphicIndexBuffer::Unlock
PUBLIC	?SetIndices@CGraphicIndexBuffer@@QBEXH@Z	; CGraphicIndexBuffer::SetIndices
PUBLIC	?GetD3DIndexBuffer@CGraphicIndexBuffer@@QBEPAUIDirect3DIndexBuffer8@@XZ ; CGraphicIndexBuffer::GetD3DIndexBuffer
PUBLIC	?Initialize@CGraphicIndexBuffer@@IAEXXZ		; CGraphicIndexBuffer::Initialize
PUBLIC	??_GCGraphicIndexBuffer@@UAEPAXI@Z		; CGraphicIndexBuffer::`scalar deleting destructor'
PUBLIC	??_7CGraphicIndexBuffer@@6B@			; CGraphicIndexBuffer::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_R4CGraphicIndexBuffer@@6B@			; CGraphicIndexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicIndexBuffer@@@8			; CGraphicIndexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicIndexBuffer@@8			; CGraphicIndexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicIndexBuffer@@8			; CGraphicIndexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicIndexBuffer@@8		; CGraphicIndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	??_ECGraphicIndexBuffer@@UAEPAXI@Z:PROC		; CGraphicIndexBuffer::`vector deleting destructor'
EXTRN	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z:PROC ; CStateManager::SetIndices
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	___security_cookie:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicIndexBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicIndexBuffer@@8 DD FLAT:??_R0?AVCGraphicIndexBuffer@@@8 ; CGraphicIndexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicIndexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicIndexBuffer@@8
rdata$r	SEGMENT
??_R2CGraphicIndexBuffer@@8 DD FLAT:??_R1A@?0A@EA@CGraphicIndexBuffer@@8 ; CGraphicIndexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicIndexBuffer@@8
rdata$r	SEGMENT
??_R3CGraphicIndexBuffer@@8 DD 00H			; CGraphicIndexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicIndexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicIndexBuffer@@@8
data$rs	SEGMENT
??_R0?AVCGraphicIndexBuffer@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicIndexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicIndexBuffer@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicIndexBuffer@@6B@
rdata$r	SEGMENT
??_R4CGraphicIndexBuffer@@6B@ DD 00H			; CGraphicIndexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicIndexBuffer@@@8
	DD	FLAT:??_R3CGraphicIndexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_7CGraphicIndexBuffer@@6B@
CONST	SEGMENT
??_7CGraphicIndexBuffer@@6B@ DD FLAT:??_R4CGraphicIndexBuffer@@6B@ ; CGraphicIndexBuffer::`vftable'
	DD	FLAT:??_ECGraphicIndexBuffer@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicIndexBuffer@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphicIndexBuffer@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicIndexBuffer@@QAE@XZ$0
__ehfuncinfo$??0CGraphicIndexBuffer@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CGraphicIndexBuffer@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GCGraphicIndexBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCGraphicIndexBuffer@@UAEPAXI@Z PROC			; CGraphicIndexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CGraphicIndexBuffer@@UAE@XZ ; CGraphicIndexBuffer::~CGraphicIndexBuffer
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 14		 push	 20			; 00000014H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GCGraphicIndexBuffer@@UAEPAXI@Z ENDP			; CGraphicIndexBuffer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Initialize@CGraphicIndexBuffer@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Initialize@CGraphicIndexBuffer@@IAEXXZ PROC		; CGraphicIndexBuffer::Initialize, COMDAT
; _this$ = ecx

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 128  : 	m_lpd3dIdxBuf=NULL;	

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 129  : }

  0000e	c9		 leave
  0000f	c3		 ret	 0
?Initialize@CGraphicIndexBuffer@@IAEXXZ ENDP		; CGraphicIndexBuffer::Initialize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?GetD3DIndexBuffer@CGraphicIndexBuffer@@QBEPAUIDirect3DIndexBuffer8@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetD3DIndexBuffer@CGraphicIndexBuffer@@QBEPAUIDirect3DIndexBuffer8@@XZ PROC ; CGraphicIndexBuffer::GetD3DIndexBuffer, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 8    : 	assert(m_lpd3dIdxBuf!=NULL);
; 9    : 	return m_lpd3dIdxBuf;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 10   : }

  0000d	c9		 leave
  0000e	c3		 ret	 0
?GetD3DIndexBuffer@CGraphicIndexBuffer@@QBEPAUIDirect3DIndexBuffer8@@XZ ENDP ; CGraphicIndexBuffer::GetD3DIndexBuffer
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?SetIndices@CGraphicIndexBuffer@@QBEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_startIndex$ = 8					; size = 4
?SetIndices@CGraphicIndexBuffer@@QBEXH@Z PROC		; CGraphicIndexBuffer::SetIndices, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 14   : 	assert(ms_lpd3dDevice!=NULL);
; 15   : 	STATEMANAGER.SetIndices(m_lpd3dIdxBuf, startIndex);	

  00007	ff 75 08	 push	 DWORD PTR _startIndex$[ebp]
  0000a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000d	ff 70 04	 push	 DWORD PTR [eax+4]
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00016	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer8@@I@Z ; CStateManager::SetIndices

; 16   : }

  0001b	c9		 leave
  0001c	c2 04 00	 ret	 4
?SetIndices@CGraphicIndexBuffer@@QBEXH@Z ENDP		; CGraphicIndexBuffer::SetIndices
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Unlock@CGraphicIndexBuffer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@CGraphicIndexBuffer@@QAEXXZ PROC		; CGraphicIndexBuffer::Unlock, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : 	assert(m_lpd3dIdxBuf!=NULL);
; 49   : 
; 50   : 	m_lpd3dIdxBuf->Unlock();

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	ff 71 04	 push	 DWORD PTR [ecx+4]
  00015	ff 50 30	 call	 DWORD PTR [eax+48]

; 51   : }

  00018	c9		 leave
  00019	c3		 ret	 0
?Unlock@CGraphicIndexBuffer@@QAEXXZ ENDP		; CGraphicIndexBuffer::Unlock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pretIndices$ = 8					; size = 4
?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z PROC		; CGraphicIndexBuffer::Lock, COMDAT
; _this$ = ecx

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 38   : 	assert(m_lpd3dIdxBuf!=NULL);
; 39   : 
; 40   : 	if (FAILED(m_lpd3dIdxBuf->Lock(0, 0, (BYTE**)pretIndices, 0)))

  00007	6a 00		 push	 0
  00009	ff 75 08	 push	 DWORD PTR _pretIndices$[ebp]
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	ff 71 04	 push	 DWORD PTR [ecx+4]
  0001e	ff 50 2c	 call	 DWORD PTR [eax+44]
  00021	85 c0		 test	 eax, eax
  00023	7d 04		 jge	 SHORT $LN2@Lock

; 41   : 		return false;

  00025	32 c0		 xor	 al, al
  00027	eb 02		 jmp	 SHORT $LN1@Lock
$LN2@Lock:

; 42   : 
; 43   : 	return true;

  00029	b0 01		 mov	 al, 1
$LN1@Lock:

; 44   : }

  0002b	c9		 leave
  0002c	c2 04 00	 ret	 4
?Lock@CGraphicIndexBuffer@@QAE_NPAPAX@Z ENDP		; CGraphicIndexBuffer::Lock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Unlock@CGraphicIndexBuffer@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@CGraphicIndexBuffer@@QBEXXZ PROC		; CGraphicIndexBuffer::Unlock, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   : 	assert(m_lpd3dIdxBuf!=NULL);
; 32   : 
; 33   : 	m_lpd3dIdxBuf->Unlock();

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	ff 71 04	 push	 DWORD PTR [ecx+4]
  00015	ff 50 30	 call	 DWORD PTR [eax+48]

; 34   : }

  00018	c9		 leave
  00019	c3		 ret	 0
?Unlock@CGraphicIndexBuffer@@QBEXXZ ENDP		; CGraphicIndexBuffer::Unlock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Lock@CGraphicIndexBuffer@@QBE_NPAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pretIndices$ = 8					; size = 4
?Lock@CGraphicIndexBuffer@@QBE_NPAPAX@Z PROC		; CGraphicIndexBuffer::Lock, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	assert(m_lpd3dIdxBuf!=NULL);
; 22   : 
; 23   : 	if (FAILED(m_lpd3dIdxBuf->Lock(0, 0, (BYTE**)pretIndices, 0)))

  00007	6a 00		 push	 0
  00009	ff 75 08	 push	 DWORD PTR _pretIndices$[ebp]
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 00		 mov	 eax, DWORD PTR [eax]
  0001b	ff 71 04	 push	 DWORD PTR [ecx+4]
  0001e	ff 50 2c	 call	 DWORD PTR [eax+44]
  00021	85 c0		 test	 eax, eax
  00023	7d 04		 jge	 SHORT $LN2@Lock

; 24   : 		return false;

  00025	32 c0		 xor	 al, al
  00027	eb 02		 jmp	 SHORT $LN1@Lock
$LN2@Lock:

; 25   : 
; 26   : 	return true;

  00029	b0 01		 mov	 al, 1
$LN1@Lock:

; 27   : }

  0002b	c9		 leave
  0002c	c2 04 00	 ret	 4
?Lock@CGraphicIndexBuffer@@QBE_NPAPAX@Z ENDP		; CGraphicIndexBuffer::Lock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Copy@CGraphicIndexBuffer@@QAE_NHPBX@Z
_TEXT	SEGMENT
_dstIndices$ = -8					; size = 4
_this$ = -4						; size = 4
_bufSize$ = 8						; size = 4
_srcIndices$ = 12					; size = 4
?Copy@CGraphicIndexBuffer@@QAE_NHPBX@Z PROC		; CGraphicIndexBuffer::Copy, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 55   : 	assert(m_lpd3dIdxBuf!=NULL);
; 56   : 
; 57   : 	BYTE* dstIndices;
; 58   : 	if (FAILED(m_lpd3dIdxBuf->Lock(0, 0, &dstIndices, 0)))

  00008	6a 00		 push	 0
  0000a	8d 45 f8	 lea	 eax, DWORD PTR _dstIndices$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	6a 00		 push	 0
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
  0001d	ff 71 04	 push	 DWORD PTR [ecx+4]
  00020	ff 50 2c	 call	 DWORD PTR [eax+44]
  00023	85 c0		 test	 eax, eax
  00025	7d 04		 jge	 SHORT $LN2@Copy

; 59   : 		return false;

  00027	32 c0		 xor	 al, al
  00029	eb 24		 jmp	 SHORT $LN1@Copy
$LN2@Copy:

; 60   : 
; 61   : 	memcpy(dstIndices, srcIndices, bufSize);

  0002b	ff 75 08	 push	 DWORD PTR _bufSize$[ebp]
  0002e	ff 75 0c	 push	 DWORD PTR _srcIndices$[ebp]
  00031	ff 75 f8	 push	 DWORD PTR _dstIndices$[ebp]
  00034	e8 00 00 00 00	 call	 _memcpy
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH

; 62   : 
; 63   : 	m_lpd3dIdxBuf->Unlock();

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	ff 71 04	 push	 DWORD PTR [ecx+4]
  0004a	ff 50 30	 call	 DWORD PTR [eax+48]

; 64   : 
; 65   : 	return true;

  0004d	b0 01		 mov	 al, 1
$LN1@Copy:

; 66   : }

  0004f	c9		 leave
  00050	c2 08 00	 ret	 8
?Copy@CGraphicIndexBuffer@@QAE_NHPBX@Z ENDP		; CGraphicIndexBuffer::Copy
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?DestroyDeviceObjects@CGraphicIndexBuffer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rpObject$ = -4						; size = 4
?DestroyDeviceObjects@CGraphicIndexBuffer@@QAEXXZ PROC	; CGraphicIndexBuffer::DestroyDeviceObjects, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 107  : 	safe_release(m_lpd3dIdxBuf);

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 c0 04	 add	 eax, 4
  0000e	89 45 fc	 mov	 DWORD PTR _rpObject$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h

; 138  : 	if (!rpObject)

  00011	8b 45 fc	 mov	 eax, DWORD PTR _rpObject$[ebp]
  00014	83 38 00	 cmp	 DWORD PTR [eax], 0
  00017	75 02		 jne	 SHORT $LN4@DestroyDev

; 139  : 		return;

  00019	eb 15		 jmp	 SHORT $LN1@DestroyDev
$LN4@DestroyDev:

; 140  : 	
; 141  : 	rpObject->Release();

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _rpObject$[ebp]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _rpObject$[ebp]
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
  00025	ff 31		 push	 DWORD PTR [ecx]
  00027	ff 50 08	 call	 DWORD PTR [eax+8]

; 142  : 	rpObject = NULL;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _rpObject$[ebp]
  0002d	83 20 00	 and	 DWORD PTR [eax], 0
$LN1@DestroyDev:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp

; 108  : }

  00030	c9		 leave
  00031	c3		 ret	 0
?DestroyDeviceObjects@CGraphicIndexBuffer@@QAEXXZ ENDP	; CGraphicIndexBuffer::DestroyDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?CreateDeviceObjects@CGraphicIndexBuffer@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreateDeviceObjects@CGraphicIndexBuffer@@QAE_NXZ PROC	; CGraphicIndexBuffer::CreateDeviceObjects, COMDAT
; _this$ = ecx

; 92   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 93   : 	if (FAILED(ms_lpd3dDevice->CreateIndexBuffer(

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	50		 push	 eax
  0000e	6a 01		 push	 1
  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	ff 70 0c	 push	 DWORD PTR [eax+12]
  00016	6a 08		 push	 8
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	ff 70 08	 push	 DWORD PTR [eax+8]
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
  00025	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0002b	ff 50 60	 call	 DWORD PTR [eax+96]
  0002e	85 c0		 test	 eax, eax
  00030	7d 04		 jge	 SHORT $LN2@CreateDevi

; 94   : 		m_dwBufferSize, 
; 95   : 		D3DUSAGE_WRITEONLY, 
; 96   : 		m_d3dFmt,
; 97   : 		D3DPOOL_MANAGED, 
; 98   : 		&m_lpd3dIdxBuf)
; 99   : 		))
; 100  : 		return false;

  00032	32 c0		 xor	 al, al
  00034	eb 02		 jmp	 SHORT $LN1@CreateDevi
$LN2@CreateDevi:

; 101  : 
; 102  : 	return true;

  00036	b0 01		 mov	 al, 1
$LN1@CreateDevi:

; 103  : }

  00038	c9		 leave
  00039	c3		 ret	 0
?CreateDeviceObjects@CGraphicIndexBuffer@@QAE_NXZ ENDP	; CGraphicIndexBuffer::CreateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Create@CGraphicIndexBuffer@@QAE_NHPAUSFace@@@Z
_TEXT	SEGMENT
_idxCount$ = -20					; size = 4
_curFace$1 = -16					; size = 4
_i$2 = -12						; size = 4
_dstIndices$ = -8					; size = 4
_this$ = -4						; size = 4
_faceCount$ = 8						; size = 4
_faces$ = 12						; size = 4
?Create@CGraphicIndexBuffer@@QAE_NHPAUSFace@@@Z PROC	; CGraphicIndexBuffer::Create, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 70   : 	int idxCount = faceCount * 3;

  0000a	6b 45 08 03	 imul	 eax, DWORD PTR _faceCount$[ebp], 3
  0000e	89 45 ec	 mov	 DWORD PTR _idxCount$[ebp], eax

; 71   : 	m_iidxCount = idxCount;

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d ec	 mov	 ecx, DWORD PTR _idxCount$[ebp]
  00017	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 72   : 	if (!Create(idxCount, D3DFMT_INDEX16))

  0001a	6a 65		 push	 101			; 00000065H
  0001c	ff 75 ec	 push	 DWORD PTR _idxCount$[ebp]
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z ; CGraphicIndexBuffer::Create
  00027	0f b6 c0	 movzx	 eax, al
  0002a	85 c0		 test	 eax, eax
  0002c	75 07		 jne	 SHORT $LN5@Create

; 73   : 		return false;

  0002e	32 c0		 xor	 al, al
  00030	e9 af 00 00 00	 jmp	 $LN1@Create
$LN5@Create:

; 74   : 
; 75   : 	WORD* dstIndices;
; 76   : 	if (FAILED(m_lpd3dIdxBuf->Lock(0, 0, (BYTE**)&dstIndices, 0)))

  00035	6a 00		 push	 0
  00037	8d 45 f8	 lea	 eax, DWORD PTR _dstIndices$[ebp]
  0003a	50		 push	 eax
  0003b	6a 00		 push	 0
  0003d	6a 00		 push	 0
  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	8b 00		 mov	 eax, DWORD PTR [eax]
  0004a	ff 71 04	 push	 DWORD PTR [ecx+4]
  0004d	ff 50 2c	 call	 DWORD PTR [eax+44]
  00050	85 c0		 test	 eax, eax
  00052	7d 07		 jge	 SHORT $LN6@Create

; 77   : 		return false;

  00054	32 c0		 xor	 al, al
  00056	e9 89 00 00 00	 jmp	 $LN1@Create
$LN6@Create:

; 78   : 
; 79   : 	for (int i = 0; i<faceCount; ++i, dstIndices+=3)

  0005b	83 65 f4 00	 and	 DWORD PTR _i$2[ebp], 0
  0005f	eb 10		 jmp	 SHORT $LN4@Create
$LN2@Create:
  00061	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00064	40		 inc	 eax
  00065	89 45 f4	 mov	 DWORD PTR _i$2[ebp], eax
  00068	8b 45 f8	 mov	 eax, DWORD PTR _dstIndices$[ebp]
  0006b	83 c0 06	 add	 eax, 6
  0006e	89 45 f8	 mov	 DWORD PTR _dstIndices$[ebp], eax
$LN4@Create:
  00071	8b 45 f4	 mov	 eax, DWORD PTR _i$2[ebp]
  00074	3b 45 08	 cmp	 eax, DWORD PTR _faceCount$[ebp]
  00077	7d 58		 jge	 SHORT $LN3@Create

; 80   : 	{		
; 81   : 		TFace * curFace=faces+i;

  00079	6b 45 f4 06	 imul	 eax, DWORD PTR _i$2[ebp], 6
  0007d	03 45 0c	 add	 eax, DWORD PTR _faces$[ebp]
  00080	89 45 f0	 mov	 DWORD PTR _curFace$1[ebp], eax

; 82   : 		dstIndices[0]=curFace->indices[0];

  00083	6a 02		 push	 2
  00085	58		 pop	 eax
  00086	6b c0 00	 imul	 eax, eax, 0
  00089	6a 02		 push	 2
  0008b	59		 pop	 ecx
  0008c	6b c9 00	 imul	 ecx, ecx, 0
  0008f	8b 55 f8	 mov	 edx, DWORD PTR _dstIndices$[ebp]
  00092	8b 75 f0	 mov	 esi, DWORD PTR _curFace$1[ebp]
  00095	66 8b 04 06	 mov	 ax, WORD PTR [esi+eax]
  00099	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax

; 83   : 		dstIndices[1]=curFace->indices[1];

  0009d	6a 02		 push	 2
  0009f	58		 pop	 eax
  000a0	c1 e0 00	 shl	 eax, 0
  000a3	6a 02		 push	 2
  000a5	59		 pop	 ecx
  000a6	c1 e1 00	 shl	 ecx, 0
  000a9	8b 55 f8	 mov	 edx, DWORD PTR _dstIndices$[ebp]
  000ac	8b 75 f0	 mov	 esi, DWORD PTR _curFace$1[ebp]
  000af	66 8b 04 06	 mov	 ax, WORD PTR [esi+eax]
  000b3	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax

; 84   : 		dstIndices[2]=curFace->indices[2];

  000b7	6a 02		 push	 2
  000b9	58		 pop	 eax
  000ba	d1 e0		 shl	 eax, 1
  000bc	6a 02		 push	 2
  000be	59		 pop	 ecx
  000bf	d1 e1		 shl	 ecx, 1
  000c1	8b 55 f8	 mov	 edx, DWORD PTR _dstIndices$[ebp]
  000c4	8b 75 f0	 mov	 esi, DWORD PTR _curFace$1[ebp]
  000c7	66 8b 04 06	 mov	 ax, WORD PTR [esi+eax]
  000cb	66 89 04 0a	 mov	 WORD PTR [edx+ecx], ax

; 85   : 	}

  000cf	eb 90		 jmp	 SHORT $LN2@Create
$LN3@Create:

; 86   : 
; 87   : 	m_lpd3dIdxBuf->Unlock();

  000d1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d4	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	8b 00		 mov	 eax, DWORD PTR [eax]
  000dc	ff 71 04	 push	 DWORD PTR [ecx+4]
  000df	ff 50 30	 call	 DWORD PTR [eax+48]

; 88   : 	return true;

  000e2	b0 01		 mov	 al, 1
$LN1@Create:

; 89   : }

  000e4	5e		 pop	 esi
  000e5	c9		 leave
  000e6	c2 08 00	 ret	 8
?Create@CGraphicIndexBuffer@@QAE_NHPAUSFace@@@Z ENDP	; CGraphicIndexBuffer::Create
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_idxCount$ = 8						; size = 4
_d3dFmt$ = 12						; size = 4
?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z PROC ; CGraphicIndexBuffer::Create, COMDAT
; _this$ = ecx

; 111  : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 112  : 	Destroy();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Destroy@CGraphicIndexBuffer@@QAEXXZ ; CGraphicIndexBuffer::Destroy

; 113  : 	
; 114  : 	m_iidxCount = idxCount;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _idxCount$[ebp]
  00015	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 115  : 	m_dwBufferSize = sizeof(WORD) * idxCount;

  00018	8b 45 08	 mov	 eax, DWORD PTR _idxCount$[ebp]
  0001b	d1 e0		 shl	 eax, 1
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 116  : 	m_d3dFmt = d3dFmt;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _d3dFmt$[ebp]
  00029	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 117  : 
; 118  : 	return CreateDeviceObjects();

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?CreateDeviceObjects@CGraphicIndexBuffer@@QAE_NXZ ; CGraphicIndexBuffer::CreateDeviceObjects

; 119  : }

  00034	c9		 leave
  00035	c2 08 00	 ret	 8
?Create@CGraphicIndexBuffer@@QAE_NHW4_D3DFORMAT@@@Z ENDP ; CGraphicIndexBuffer::Create
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ?Destroy@CGraphicIndexBuffer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Destroy@CGraphicIndexBuffer@@QAEXXZ PROC		; CGraphicIndexBuffer::Destroy, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 123  : 	DestroyDeviceObjects();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?DestroyDeviceObjects@CGraphicIndexBuffer@@QAEXXZ ; CGraphicIndexBuffer::DestroyDeviceObjects

; 124  : }

  0000f	c9		 leave
  00010	c3		 ret	 0
?Destroy@CGraphicIndexBuffer@@QAEXXZ ENDP		; CGraphicIndexBuffer::Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ??1CGraphicIndexBuffer@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CGraphicIndexBuffer@@UAE@XZ PROC			; CGraphicIndexBuffer::~CGraphicIndexBuffer, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicIndexBuffer@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGraphicIndexBuffer@@6B@

; 138  : 	Destroy();

  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?Destroy@CGraphicIndexBuffer@@QAEXXZ ; CGraphicIndexBuffer::Destroy

; 139  : }

  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	c9		 leave
  0004b	c3		 ret	 0
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
  0004f	cc		 int	 3
  00050	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicIndexBuffer@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicIndexBuffer@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicIndexBuffer@@UAE@XZ ENDP			; CGraphicIndexBuffer::~CGraphicIndexBuffer
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpIndexBuffer.cpp
;	COMDAT ??0CGraphicIndexBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphicIndexBuffer@@QAE@XZ PROC			; CGraphicIndexBuffer::CGraphicIndexBuffer, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicIndexBuffer@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
  0002e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGraphicIndexBuffer@@6B@

; 133  : 	Initialize();

  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?Initialize@CGraphicIndexBuffer@@IAEXXZ ; CGraphicIndexBuffer::Initialize

; 134  : }

  00043	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	c9		 leave
  00056	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicIndexBuffer@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CGraphicIndexBuffer@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicIndexBuffer@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicIndexBuffer@@QAE@XZ ENDP			; CGraphicIndexBuffer::CGraphicIndexBuffer
; Function compile flags: /Odspy
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN2@vector:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0000a	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000d	48		 dec	 eax
  0000e	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00011	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00015	76 11		 jbe	 SHORT $LN1@vector
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001a	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00020	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00023	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00026	eb dc		 jmp	 SHORT $LN2@vector
$LN1@vector:
  00028	c9		 leave
  00029	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
