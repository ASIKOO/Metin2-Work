; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0CGraphicVertexBuffer@@QAE@XZ			; CGraphicVertexBuffer::CGraphicVertexBuffer
PUBLIC	??1CGraphicVertexBuffer@@UAE@XZ			; CGraphicVertexBuffer::~CGraphicVertexBuffer
PUBLIC	?Destroy@CGraphicVertexBuffer@@QAEXXZ		; CGraphicVertexBuffer::Destroy
PUBLIC	?Create@CGraphicVertexBuffer@@UAE_NHKKW4_D3DPOOL@@@Z ; CGraphicVertexBuffer::Create
PUBLIC	?CreateDeviceObjects@CGraphicVertexBuffer@@QAE_NXZ ; CGraphicVertexBuffer::CreateDeviceObjects
PUBLIC	?DestroyDeviceObjects@CGraphicVertexBuffer@@QAEXXZ ; CGraphicVertexBuffer::DestroyDeviceObjects
PUBLIC	?Copy@CGraphicVertexBuffer@@QAE_NHPBX@Z		; CGraphicVertexBuffer::Copy
PUBLIC	?LockRange@CGraphicVertexBuffer@@QBE_NIPAPAX@Z	; CGraphicVertexBuffer::LockRange
PUBLIC	?Lock@CGraphicVertexBuffer@@QBE_NPAPAX@Z	; CGraphicVertexBuffer::Lock
PUBLIC	?Unlock@CGraphicVertexBuffer@@QBE_NXZ		; CGraphicVertexBuffer::Unlock
PUBLIC	?LockDynamic@CGraphicVertexBuffer@@QAE_NPAPAX@Z	; CGraphicVertexBuffer::LockDynamic
PUBLIC	?Lock@CGraphicVertexBuffer@@UAE_NPAPAX@Z	; CGraphicVertexBuffer::Lock
PUBLIC	?Unlock@CGraphicVertexBuffer@@QAE_NXZ		; CGraphicVertexBuffer::Unlock
PUBLIC	?SetStream@CGraphicVertexBuffer@@QBEXHH@Z	; CGraphicVertexBuffer::SetStream
PUBLIC	?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ	; CGraphicVertexBuffer::GetVertexCount
PUBLIC	?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ	; CGraphicVertexBuffer::GetVertexStride
PUBLIC	?GetFlexibleVertexFormat@CGraphicVertexBuffer@@QBEKXZ ; CGraphicVertexBuffer::GetFlexibleVertexFormat
PUBLIC	?IsEmpty@CGraphicVertexBuffer@@QBE_NXZ		; CGraphicVertexBuffer::IsEmpty
PUBLIC	?Initialize@CGraphicVertexBuffer@@IAEXXZ	; CGraphicVertexBuffer::Initialize
PUBLIC	??_GCGraphicVertexBuffer@@UAEPAXI@Z		; CGraphicVertexBuffer::`scalar deleting destructor'
PUBLIC	??_7CGraphicVertexBuffer@@6B@			; CGraphicVertexBuffer::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_R4CGraphicVertexBuffer@@6B@			; CGraphicVertexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicVertexBuffer@@@8		; CGraphicVertexBuffer `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicVertexBuffer@@8			; CGraphicVertexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicVertexBuffer@@8			; CGraphicVertexBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicVertexBuffer@@8		; CGraphicVertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	_D3DXGetFVFVertexSize@4:PROC
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	??_ECGraphicVertexBuffer@@UAEPAXI@Z:PROC	; CGraphicVertexBuffer::`vector deleting destructor'
EXTRN	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z:PROC ; CStateManager::SetStreamSource
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	___security_cookie:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicVertexBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicVertexBuffer@@8 DD FLAT:??_R0?AVCGraphicVertexBuffer@@@8 ; CGraphicVertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicVertexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicVertexBuffer@@8
rdata$r	SEGMENT
??_R2CGraphicVertexBuffer@@8 DD FLAT:??_R1A@?0A@EA@CGraphicVertexBuffer@@8 ; CGraphicVertexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicVertexBuffer@@8
rdata$r	SEGMENT
??_R3CGraphicVertexBuffer@@8 DD 00H			; CGraphicVertexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicVertexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicVertexBuffer@@@8
data$rs	SEGMENT
??_R0?AVCGraphicVertexBuffer@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicVertexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicVertexBuffer@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicVertexBuffer@@6B@
rdata$r	SEGMENT
??_R4CGraphicVertexBuffer@@6B@ DD 00H			; CGraphicVertexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicVertexBuffer@@@8
	DD	FLAT:??_R3CGraphicVertexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_7CGraphicVertexBuffer@@6B@
CONST	SEGMENT
??_7CGraphicVertexBuffer@@6B@ DD FLAT:??_R4CGraphicVertexBuffer@@6B@ ; CGraphicVertexBuffer::`vftable'
	DD	FLAT:??_ECGraphicVertexBuffer@@UAEPAXI@Z
	DD	FLAT:?Create@CGraphicVertexBuffer@@UAE_NHKKW4_D3DPOOL@@@Z
	DD	FLAT:?Lock@CGraphicVertexBuffer@@UAE_NPAPAX@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CGraphicVertexBuffer@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CGraphicVertexBuffer@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGraphicVertexBuffer@@QAE@XZ$0
__ehfuncinfo$??0CGraphicVertexBuffer@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CGraphicVertexBuffer@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GCGraphicVertexBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCGraphicVertexBuffer@@UAEPAXI@Z PROC		; CGraphicVertexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CGraphicVertexBuffer@@UAE@XZ ; CGraphicVertexBuffer::~CGraphicVertexBuffer
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 20		 push	 32			; 00000020H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GCGraphicVertexBuffer@@UAEPAXI@Z ENDP		; CGraphicVertexBuffer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Initialize@CGraphicVertexBuffer@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Initialize@CGraphicVertexBuffer@@IAEXXZ PROC		; CGraphicVertexBuffer::Initialize, COMDAT
; _this$ = ecx

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 	m_lpd3dVB = NULL;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 167  : 	m_vtxCount = 0;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 60 18 00	 and	 DWORD PTR [eax+24], 0

; 168  : 	m_dwBufferSize = 0;

  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 60 08 00	 and	 DWORD PTR [eax+8], 0

; 169  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?Initialize@CGraphicVertexBuffer@@IAEXXZ ENDP		; CGraphicVertexBuffer::Initialize
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?IsEmpty@CGraphicVertexBuffer@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@CGraphicVertexBuffer@@QBE_NXZ PROC		; CGraphicVertexBuffer::IsEmpty, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 64   : 	if (m_lpd3dVB)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	74 06		 je	 SHORT $LN2@IsEmpty

; 65   : 		return true;

  00010	b0 01		 mov	 al, 1
  00012	eb 04		 jmp	 SHORT $LN1@IsEmpty
  00014	eb 02		 jmp	 SHORT $LN1@IsEmpty
$LN2@IsEmpty:

; 66   : 	else
; 67   : 		return false;

  00016	32 c0		 xor	 al, al
$LN1@IsEmpty:

; 68   : }

  00018	c9		 leave
  00019	c3		 ret	 0
?IsEmpty@CGraphicVertexBuffer@@QBE_NXZ ENDP		; CGraphicVertexBuffer::IsEmpty
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?GetFlexibleVertexFormat@CGraphicVertexBuffer@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFlexibleVertexFormat@CGraphicVertexBuffer@@QBEKXZ PROC ; CGraphicVertexBuffer::GetFlexibleVertexFormat, COMDAT
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 14   : 	return m_dwFVF;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 15   : }

  0000d	c9		 leave
  0000e	c3		 ret	 0
?GetFlexibleVertexFormat@CGraphicVertexBuffer@@QBEKXZ ENDP ; CGraphicVertexBuffer::GetFlexibleVertexFormat
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ
_TEXT	SEGMENT
_retSize$ = -8						; size = 4
_this$ = -4						; size = 4
?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ PROC	; CGraphicVertexBuffer::GetVertexStride, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 8    : 	int retSize = D3DXGetFVFVertexSize(m_dwFVF);

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	ff 70 0c	 push	 DWORD PTR [eax+12]
  0000e	e8 00 00 00 00	 call	 _D3DXGetFVFVertexSize@4
  00013	89 45 f8	 mov	 DWORD PTR _retSize$[ebp], eax

; 9    : 	return retSize;

  00016	8b 45 f8	 mov	 eax, DWORD PTR _retSize$[ebp]

; 10   : }

  00019	c9		 leave
  0001a	c3		 ret	 0
?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ ENDP	; CGraphicVertexBuffer::GetVertexStride
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ PROC	; CGraphicVertexBuffer::GetVertexCount, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 19   : 	return m_vtxCount;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 18	 mov	 eax, DWORD PTR [eax+24]

; 20   : }

  0000d	c9		 leave
  0000e	c3		 ret	 0
?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ ENDP	; CGraphicVertexBuffer::GetVertexCount
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?SetStream@CGraphicVertexBuffer@@QBEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stride$ = 8						; size = 4
_layer$ = 12						; size = 4
?SetStream@CGraphicVertexBuffer@@QBEXHH@Z PROC		; CGraphicVertexBuffer::SetStream, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 24   : 	assert(ms_lpd3dDevice != NULL);
; 25   : 	STATEMANAGER.SetStreamSource(layer, m_lpd3dVB, stride);	

  00007	ff 75 08	 push	 DWORD PTR _stride$[ebp]
  0000a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000d	ff 70 04	 push	 DWORD PTR [eax+4]
  00010	ff 75 0c	 push	 DWORD PTR _layer$[ebp]
  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00019	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer8@@I@Z ; CStateManager::SetStreamSource

; 26   : }

  0001e	c9		 leave
  0001f	c2 08 00	 ret	 8
?SetStream@CGraphicVertexBuffer@@QBEXHH@Z ENDP		; CGraphicVertexBuffer::SetStream
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Unlock@CGraphicVertexBuffer@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@CGraphicVertexBuffer@@QAE_NXZ PROC		; CGraphicVertexBuffer::Unlock, COMDAT
; _this$ = ecx

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 94   : 	if (!m_lpd3dVB)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	75 04		 jne	 SHORT $LN2@Unlock

; 95   : 		return false;

  00010	32 c0		 xor	 al, al
  00012	eb 1b		 jmp	 SHORT $LN1@Unlock
$LN2@Unlock:

; 96   : 
; 97   : 	if ( FAILED(m_lpd3dVB->Unlock()) )

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
  0001f	ff 71 04	 push	 DWORD PTR [ecx+4]
  00022	ff 50 30	 call	 DWORD PTR [eax+48]
  00025	85 c0		 test	 eax, eax
  00027	7d 04		 jge	 SHORT $LN3@Unlock

; 98   : 		return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 02		 jmp	 SHORT $LN1@Unlock
$LN3@Unlock:

; 99   : 	return true;

  0002d	b0 01		 mov	 al, 1
$LN1@Unlock:

; 100  : }

  0002f	c9		 leave
  00030	c3		 ret	 0
?Unlock@CGraphicVertexBuffer@@QAE_NXZ ENDP		; CGraphicVertexBuffer::Unlock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Lock@CGraphicVertexBuffer@@UAE_NPAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pretVertices$ = 8					; size = 4
?Lock@CGraphicVertexBuffer@@UAE_NPAPAX@Z PROC		; CGraphicVertexBuffer::Lock, COMDAT
; _this$ = ecx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 83   : 	if (!m_lpd3dVB)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	75 04		 jne	 SHORT $LN2@Lock

; 84   : 		return false;

  00010	32 c0		 xor	 al, al
  00012	eb 28		 jmp	 SHORT $LN1@Lock
$LN2@Lock:

; 85   : 
; 86   : 	if (FAILED(m_lpd3dVB->Lock(0, 0, (BYTE**)pretVertices, m_dwLockFlag)))

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	ff 70 1c	 push	 DWORD PTR [eax+28]
  0001a	ff 75 08	 push	 DWORD PTR _pretVertices$[ebp]
  0001d	6a 00		 push	 0
  0001f	6a 00		 push	 0
  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	ff 71 04	 push	 DWORD PTR [ecx+4]
  0002f	ff 50 2c	 call	 DWORD PTR [eax+44]
  00032	85 c0		 test	 eax, eax
  00034	7d 04		 jge	 SHORT $LN3@Lock

; 87   : 		return false;

  00036	32 c0		 xor	 al, al
  00038	eb 02		 jmp	 SHORT $LN1@Lock
$LN3@Lock:

; 88   : 
; 89   : 	return true;

  0003a	b0 01		 mov	 al, 1
$LN1@Lock:

; 90   : }

  0003c	c9		 leave
  0003d	c2 04 00	 ret	 4
?Lock@CGraphicVertexBuffer@@UAE_NPAPAX@Z ENDP		; CGraphicVertexBuffer::Lock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?LockDynamic@CGraphicVertexBuffer@@QAE_NPAPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pretVertices$ = 8					; size = 4
?LockDynamic@CGraphicVertexBuffer@@QAE_NPAPAX@Z PROC	; CGraphicVertexBuffer::LockDynamic, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 72   : 	if (!m_lpd3dVB)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	75 04		 jne	 SHORT $LN2@LockDynami

; 73   : 		return false;

  00010	32 c0		 xor	 al, al
  00012	eb 24		 jmp	 SHORT $LN1@LockDynami
$LN2@LockDynami:

; 74   : 
; 75   : 	if (FAILED(m_lpd3dVB->Lock(0, 0, (BYTE**)pretVertices, 0)))

  00014	6a 00		 push	 0
  00016	ff 75 08	 push	 DWORD PTR _pretVertices$[ebp]
  00019	6a 00		 push	 0
  0001b	6a 00		 push	 0
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	ff 71 04	 push	 DWORD PTR [ecx+4]
  0002b	ff 50 2c	 call	 DWORD PTR [eax+44]
  0002e	85 c0		 test	 eax, eax
  00030	7d 04		 jge	 SHORT $LN3@LockDynami

; 76   : 		return false;

  00032	32 c0		 xor	 al, al
  00034	eb 02		 jmp	 SHORT $LN1@LockDynami
$LN3@LockDynami:

; 77   : 
; 78   : 	return true;

  00036	b0 01		 mov	 al, 1
$LN1@LockDynami:

; 79   : }

  00038	c9		 leave
  00039	c2 04 00	 ret	 4
?LockDynamic@CGraphicVertexBuffer@@QAE_NPAPAX@Z ENDP	; CGraphicVertexBuffer::LockDynamic
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Unlock@CGraphicVertexBuffer@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unlock@CGraphicVertexBuffer@@QBE_NXZ PROC		; CGraphicVertexBuffer::Unlock, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 54   : 	if (!m_lpd3dVB)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000e	75 04		 jne	 SHORT $LN2@Unlock

; 55   : 		return false;

  00010	32 c0		 xor	 al, al
  00012	eb 1b		 jmp	 SHORT $LN1@Unlock
$LN2@Unlock:

; 56   : 
; 57   : 	if ( FAILED(m_lpd3dVB->Unlock()) )

  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 00		 mov	 eax, DWORD PTR [eax]
  0001f	ff 71 04	 push	 DWORD PTR [ecx+4]
  00022	ff 50 30	 call	 DWORD PTR [eax+48]
  00025	85 c0		 test	 eax, eax
  00027	7d 04		 jge	 SHORT $LN3@Unlock

; 58   : 		return false;

  00029	32 c0		 xor	 al, al
  0002b	eb 02		 jmp	 SHORT $LN1@Unlock
$LN3@Unlock:

; 59   : 	return true;

  0002d	b0 01		 mov	 al, 1
$LN1@Unlock:

; 60   : }

  0002f	c9		 leave
  00030	c3		 ret	 0
?Unlock@CGraphicVertexBuffer@@QBE_NXZ ENDP		; CGraphicVertexBuffer::Unlock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Lock@CGraphicVertexBuffer@@QBE_NPAPAX@Z
_TEXT	SEGMENT
_dwLockSize$ = -8					; size = 4
_this$ = -4						; size = 4
_pretVertices$ = 8					; size = 4
?Lock@CGraphicVertexBuffer@@QBE_NPAPAX@Z PROC		; CGraphicVertexBuffer::Lock, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	56		 push	 esi
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	if (!m_lpd3dVB)

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	75 04		 jne	 SHORT $LN2@Lock

; 43   : 		return false;

  00012	32 c0		 xor	 al, al
  00014	eb 41		 jmp	 SHORT $LN1@Lock
$LN2@Lock:

; 44   : 
; 45   : 	DWORD dwLockSize=GetVertexStride()*GetVertexCount();

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	e8 00 00 00 00	 call	 ?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ ; CGraphicVertexBuffer::GetVertexStride
  0001e	8b f0		 mov	 esi, eax
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	e8 00 00 00 00	 call	 ?GetVertexCount@CGraphicVertexBuffer@@QBEHXZ ; CGraphicVertexBuffer::GetVertexCount
  00028	0f af f0	 imul	 esi, eax
  0002b	89 75 f8	 mov	 DWORD PTR _dwLockSize$[ebp], esi

; 46   : 	if (FAILED(m_lpd3dVB->Lock(0, dwLockSize, (BYTE **) pretVertices, m_dwLockFlag)))

  0002e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00031	ff 70 1c	 push	 DWORD PTR [eax+28]
  00034	ff 75 08	 push	 DWORD PTR _pretVertices$[ebp]
  00037	ff 75 f8	 push	 DWORD PTR _dwLockSize$[ebp]
  0003a	6a 00		 push	 0
  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	ff 71 04	 push	 DWORD PTR [ecx+4]
  0004a	ff 50 2c	 call	 DWORD PTR [eax+44]
  0004d	85 c0		 test	 eax, eax
  0004f	7d 04		 jge	 SHORT $LN3@Lock

; 47   : 		return false;

  00051	32 c0		 xor	 al, al
  00053	eb 02		 jmp	 SHORT $LN1@Lock
$LN3@Lock:

; 48   : 
; 49   : 	return true;

  00055	b0 01		 mov	 al, 1
$LN1@Lock:

; 50   : }

  00057	5e		 pop	 esi
  00058	c9		 leave
  00059	c2 04 00	 ret	 4
?Lock@CGraphicVertexBuffer@@QBE_NPAPAX@Z ENDP		; CGraphicVertexBuffer::Lock
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?LockRange@CGraphicVertexBuffer@@QBE_NIPAPAX@Z
_TEXT	SEGMENT
_dwLockSize$ = -8					; size = 4
_this$ = -4						; size = 4
_count$ = 8						; size = 4
_pretVertices$ = 12					; size = 4
?LockRange@CGraphicVertexBuffer@@QBE_NIPAPAX@Z PROC	; CGraphicVertexBuffer::LockRange, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 30   : 	if (!m_lpd3dVB)

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	75 04		 jne	 SHORT $LN2@LockRange

; 31   : 		return false;

  00011	32 c0		 xor	 al, al
  00013	eb 38		 jmp	 SHORT $LN1@LockRange
$LN2@LockRange:

; 32   : 
; 33   : 	DWORD dwLockSize=GetVertexStride() * count;

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?GetVertexStride@CGraphicVertexBuffer@@QBEHXZ ; CGraphicVertexBuffer::GetVertexStride
  0001d	0f af 45 08	 imul	 eax, DWORD PTR _count$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR _dwLockSize$[ebp], eax

; 34   : 	if (FAILED(m_lpd3dVB->Lock(0, dwLockSize, (BYTE **) pretVertices, m_dwLockFlag)))

  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	ff 70 1c	 push	 DWORD PTR [eax+28]
  0002a	ff 75 0c	 push	 DWORD PTR _pretVertices$[ebp]
  0002d	ff 75 f8	 push	 DWORD PTR _dwLockSize$[ebp]
  00030	6a 00		 push	 0
  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
  0003d	ff 71 04	 push	 DWORD PTR [ecx+4]
  00040	ff 50 2c	 call	 DWORD PTR [eax+44]
  00043	85 c0		 test	 eax, eax
  00045	7d 04		 jge	 SHORT $LN3@LockRange

; 35   : 		return false;

  00047	32 c0		 xor	 al, al
  00049	eb 02		 jmp	 SHORT $LN1@LockRange
$LN3@LockRange:

; 36   : 
; 37   : 	return true;

  0004b	b0 01		 mov	 al, 1
$LN1@LockRange:

; 38   : }

  0004d	c9		 leave
  0004e	c2 08 00	 ret	 8
?LockRange@CGraphicVertexBuffer@@QBE_NIPAPAX@Z ENDP	; CGraphicVertexBuffer::LockRange
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Copy@CGraphicVertexBuffer@@QAE_NHPBX@Z
_TEXT	SEGMENT
_dstVertices$ = -8					; size = 4
_this$ = -4						; size = 4
_bufSize$ = 8						; size = 4
_srcVertices$ = 12					; size = 4
?Copy@CGraphicVertexBuffer@@QAE_NHPBX@Z PROC		; CGraphicVertexBuffer::Copy, COMDAT
; _this$ = ecx

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 104  : 	void * dstVertices;
; 105  : 
; 106  : 	if (!Lock(&dstVertices))

  00008	8d 45 f8	 lea	 eax, DWORD PTR _dstVertices$[ebp]
  0000b	50		 push	 eax
  0000c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	ff 50 08	 call	 DWORD PTR [eax+8]
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	75 04		 jne	 SHORT $LN2@Copy

; 107  : 		return false;

  0001e	32 c0		 xor	 al, al
  00020	eb 1b		 jmp	 SHORT $LN1@Copy
$LN2@Copy:

; 108  : 
; 109  : 	memcpy(dstVertices, srcVertices, bufSize);

  00022	ff 75 08	 push	 DWORD PTR _bufSize$[ebp]
  00025	ff 75 0c	 push	 DWORD PTR _srcVertices$[ebp]
  00028	ff 75 f8	 push	 DWORD PTR _dstVertices$[ebp]
  0002b	e8 00 00 00 00	 call	 _memcpy
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 110  : 	
; 111  : 	Unlock();

  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	e8 00 00 00 00	 call	 ?Unlock@CGraphicVertexBuffer@@QAE_NXZ ; CGraphicVertexBuffer::Unlock

; 112  : 	return true;

  0003b	b0 01		 mov	 al, 1
$LN1@Copy:

; 113  : }

  0003d	c9		 leave
  0003e	c2 08 00	 ret	 8
?Copy@CGraphicVertexBuffer@@QAE_NHPBX@Z ENDP		; CGraphicVertexBuffer::Copy
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?DestroyDeviceObjects@CGraphicVertexBuffer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_rpObject$ = -4						; size = 4
?DestroyDeviceObjects@CGraphicVertexBuffer@@QAEXXZ PROC	; CGraphicVertexBuffer::DestroyDeviceObjects, COMDAT
; _this$ = ecx

; 134  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 135  : 	safe_release(m_lpd3dVB);

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 c0 04	 add	 eax, 4
  0000e	89 45 fc	 mov	 DWORD PTR _rpObject$[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\eterBase\Stl.h

; 138  : 	if (!rpObject)

  00011	8b 45 fc	 mov	 eax, DWORD PTR _rpObject$[ebp]
  00014	83 38 00	 cmp	 DWORD PTR [eax], 0
  00017	75 02		 jne	 SHORT $LN4@DestroyDev

; 139  : 		return;

  00019	eb 15		 jmp	 SHORT $LN1@DestroyDev
$LN4@DestroyDev:

; 140  : 	
; 141  : 	rpObject->Release();

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _rpObject$[ebp]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _rpObject$[ebp]
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
  00025	ff 31		 push	 DWORD PTR [ecx]
  00027	ff 50 08	 call	 DWORD PTR [eax+8]

; 142  : 	rpObject = NULL;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _rpObject$[ebp]
  0002d	83 20 00	 and	 DWORD PTR [eax], 0
$LN1@DestroyDev:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp

; 136  : }

  00030	c9		 leave
  00031	c3		 ret	 0
?DestroyDeviceObjects@CGraphicVertexBuffer@@QAEXXZ ENDP	; CGraphicVertexBuffer::DestroyDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?CreateDeviceObjects@CGraphicVertexBuffer@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CreateDeviceObjects@CGraphicVertexBuffer@@QAE_NXZ PROC	; CGraphicVertexBuffer::CreateDeviceObjects, COMDAT
; _this$ = ecx

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 117  : 	assert(ms_lpd3dDevice != NULL);
; 118  : 	assert(m_lpd3dVB == NULL);
; 119  : 
; 120  : 	if (FAILED(

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	50		 push	 eax
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	ff 70 14	 push	 DWORD PTR [eax+20]
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	ff 70 0c	 push	 DWORD PTR [eax+12]
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	ff 70 10	 push	 DWORD PTR [eax+16]
  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	ff 70 08	 push	 DWORD PTR [eax+8]
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  0002b	8b 00		 mov	 eax, DWORD PTR [eax]
  0002d	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice8@@A ; CGraphicBase::ms_lpd3dDevice
  00033	ff 50 5c	 call	 DWORD PTR [eax+92]
  00036	85 c0		 test	 eax, eax
  00038	7d 04		 jge	 SHORT $LN2@CreateDevi

; 121  : 		ms_lpd3dDevice->CreateVertexBuffer(
; 122  : 		m_dwBufferSize, 
; 123  : 		m_dwUsage, 
; 124  : 		m_dwFVF, 
; 125  : 		m_d3dPool, 
; 126  : 		&m_lpd3dVB)
; 127  : 		))
; 128  : 		return false;

  0003a	32 c0		 xor	 al, al
  0003c	eb 02		 jmp	 SHORT $LN1@CreateDevi
$LN2@CreateDevi:

; 129  : 
; 130  : 	return true;

  0003e	b0 01		 mov	 al, 1
$LN1@CreateDevi:

; 131  : }

  00040	c9		 leave
  00041	c3		 ret	 0
?CreateDeviceObjects@CGraphicVertexBuffer@@QAE_NXZ ENDP	; CGraphicVertexBuffer::CreateDeviceObjects
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Create@CGraphicVertexBuffer@@UAE_NHKKW4_D3DPOOL@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vtxCount$ = 8						; size = 4
_fvf$ = 12						; size = 4
_usage$ = 16						; size = 4
_d3dPool$ = 20						; size = 4
?Create@CGraphicVertexBuffer@@UAE_NHKKW4_D3DPOOL@@@Z PROC ; CGraphicVertexBuffer::Create, COMDAT
; _this$ = ecx

; 139  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 140  : 	assert(ms_lpd3dDevice != NULL);
; 141  : 	assert(vtxCount > 0);
; 142  : 
; 143  : 	Destroy();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?Destroy@CGraphicVertexBuffer@@QAEXXZ ; CGraphicVertexBuffer::Destroy

; 144  : 
; 145  : 	m_vtxCount = vtxCount;

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _vtxCount$[ebp]
  00015	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 146  : 	m_dwBufferSize = D3DXGetFVFVertexSize(fvf) * m_vtxCount;

  00018	ff 75 0c	 push	 DWORD PTR _fvf$[ebp]
  0001b	e8 00 00 00 00	 call	 _D3DXGetFVFVertexSize@4
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	0f af 41 18	 imul	 eax, DWORD PTR [ecx+24]
  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 147  : 	m_d3dPool = d3dPool;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 14	 mov	 ecx, DWORD PTR _d3dPool$[ebp]
  00033	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 148  : 	m_dwUsage = usage;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 4d 10	 mov	 ecx, DWORD PTR _usage$[ebp]
  0003c	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 149  : 	m_dwFVF = fvf;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _fvf$[ebp]
  00045	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 150  : 
; 151  : 	if (usage == D3DUSAGE_WRITEONLY || usage == D3DUSAGE_DYNAMIC)

  00048	83 7d 10 08	 cmp	 DWORD PTR _usage$[ebp], 8
  0004c	74 09		 je	 SHORT $LN4@Create
  0004e	81 7d 10 00 02
	00 00		 cmp	 DWORD PTR _usage$[ebp], 512 ; 00000200H
  00055	75 09		 jne	 SHORT $LN2@Create
$LN4@Create:

; 152  : 		m_dwLockFlag = 0;

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	83 60 1c 00	 and	 DWORD PTR [eax+28], 0
  0005e	eb 0a		 jmp	 SHORT $LN3@Create
$LN2@Create:

; 153  : 	else
; 154  : 		m_dwLockFlag = D3DLOCK_READONLY;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	c7 40 1c 10 00
	00 00		 mov	 DWORD PTR [eax+28], 16	; 00000010H
$LN3@Create:

; 155  : 
; 156  : 	return CreateDeviceObjects();

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	e8 00 00 00 00	 call	 ?CreateDeviceObjects@CGraphicVertexBuffer@@QAE_NXZ ; CGraphicVertexBuffer::CreateDeviceObjects

; 157  : }

  00072	c9		 leave
  00073	c2 10 00	 ret	 16			; 00000010H
?Create@CGraphicVertexBuffer@@UAE_NHKKW4_D3DPOOL@@@Z ENDP ; CGraphicVertexBuffer::Create
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ?Destroy@CGraphicVertexBuffer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Destroy@CGraphicVertexBuffer@@QAEXXZ PROC		; CGraphicVertexBuffer::Destroy, COMDAT
; _this$ = ecx

; 160  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 161  : 	DestroyDeviceObjects();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?DestroyDeviceObjects@CGraphicVertexBuffer@@QAEXXZ ; CGraphicVertexBuffer::DestroyDeviceObjects

; 162  : }

  0000f	c9		 leave
  00010	c3		 ret	 0
?Destroy@CGraphicVertexBuffer@@QAEXXZ ENDP		; CGraphicVertexBuffer::Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ??1CGraphicVertexBuffer@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CGraphicVertexBuffer@@UAE@XZ PROC			; CGraphicVertexBuffer::~CGraphicVertexBuffer, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicVertexBuffer@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00029	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGraphicVertexBuffer@@6B@

; 178  : 	Destroy();

  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?Destroy@CGraphicVertexBuffer@@QAEXXZ ; CGraphicVertexBuffer::Destroy

; 179  : }

  00037	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  0003f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00042	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00049	59		 pop	 ecx
  0004a	c9		 leave
  0004b	c3		 ret	 0
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
  0004f	cc		 int	 3
  00050	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicVertexBuffer@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicVertexBuffer@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicVertexBuffer@@UAE@XZ ENDP			; CGraphicVertexBuffer::~CGraphicVertexBuffer
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\EterLib\GrpVertexBuffer.cpp
;	COMDAT ??0CGraphicVertexBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGraphicVertexBuffer@@QAE@XZ PROC			; CGraphicVertexBuffer::CGraphicVertexBuffer, COMDAT
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CGraphicVertexBuffer@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00026	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
  0002e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0
  00032	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CGraphicVertexBuffer@@6B@

; 173  : 	Initialize();

  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	e8 00 00 00 00	 call	 ?Initialize@CGraphicVertexBuffer@@IAEXXZ ; CGraphicVertexBuffer::Initialize

; 174  : }

  00043	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	c9		 leave
  00056	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGraphicVertexBuffer@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CGraphicVertexBuffer@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CGraphicVertexBuffer@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CGraphicVertexBuffer@@QAE@XZ ENDP			; CGraphicVertexBuffer::CGraphicVertexBuffer
; Function compile flags: /Odspy
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
$LN2@vector:
  00004	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0000a	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  0000d	48		 dec	 eax
  0000e	89 45 10	 mov	 DWORD PTR ___n$[ebp], eax
  00011	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00015	76 11		 jbe	 SHORT $LN1@vector
  00017	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  0001a	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___t$[ebp]
  00020	03 45 0c	 add	 eax, DWORD PTR ___s$[ebp]
  00023	89 45 08	 mov	 DWORD PTR ___t$[ebp], eax
  00026	eb dc		 jmp	 SHORT $LN2@vector
$LN1@vector:
  00028	c9		 leave
  00029	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
