; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TITLE	D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
PUBLIC	?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate
PUBLIC	??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	?_Destroy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@0@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@ABEII@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Calculate_growth
PUBLIC	?_Buy_raw@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXI@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Buy_raw
PUBLIC	?_Change_array@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@II@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Change_array
PUBLIC	?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
PUBLIC	??0?$_Vector_val@U?$_Simple_types@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::vector<SPoint,std::allocator<SPoint> > > >::_Vector_val<std::_Simple_types<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??1SBoundaryShape@@QAE@XZ			; SBoundaryShape::~SBoundaryShape
PUBLIC	??0CBoundaryShapeManager@@QAE@XZ		; CBoundaryShapeManager::CBoundaryShapeManager
PUBLIC	??1CBoundaryShapeManager@@UAE@XZ		; CBoundaryShapeManager::~CBoundaryShapeManager
PUBLIC	?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z	; CBoundaryShapeManager::LoadBsfFile
PUBLIC	?PointInside@CBoundaryShapeManager@@QAE_NMM@Z	; CBoundaryShapeManager::PointInside
PUBLIC	?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z	; CBoundaryShapeManager::RandomPoint
PUBLIC	?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape
PUBLIC	?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z ; std::allocator<SBoundaryShape>::deallocate
PUBLIC	?_Destroy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXPAUSBoundaryShape@@0@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@ABEII@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXQAUSBoundaryShape@@II@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Change_array
PUBLIC	?_Tidy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXXZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Tidy
PUBLIC	?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
PUBLIC	??_GCBoundaryShapeManager@@UAEPAXI@Z		; CBoundaryShapeManager::`scalar deleting destructor'
PUBLIC	?deallocate@?$allocator@USPoint@@@std@@QAEXQAUSPoint@@I@Z ; std::allocator<SPoint>::deallocate
PUBLIC	??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
PUBLIC	??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
PUBLIC	??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
PUBLIC	?_Destroy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXPAUSPoint@@0@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABEII@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Calculate_growth
PUBLIC	?_Buy_raw@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXI@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Buy_raw
PUBLIC	?_Change_array@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXQAUSPoint@@II@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Change_array
PUBLIC	?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
PUBLIC	?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
PUBLIC	??0?$_Vector_val@U?$_Simple_types@USPoint@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SPoint> >::_Vector_val<std::_Simple_types<SPoint> >
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$emplace_back@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEXABUSPoint@@@Z ; std::vector<SPoint,std::allocator<SPoint> >::emplace_back<SPoint const &>
PUBLIC	??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
PUBLIC	??$emplace_back@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEXABUSBoundaryShape@@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::emplace_back<SBoundaryShape const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXABUSBoundaryShape@@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_back_with_unused_capacity<SBoundaryShape const &>
PUBLIC	??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
PUBLIC	??$emplace_back@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEXABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::emplace_back<std::vector<SPoint,std::allocator<SPoint> > const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back_with_unused_capacity<std::vector<SPoint,std::allocator<SPoint> > const &>
PUBLIC	??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Destroy_range@V?$allocator@USPoint@@@std@@@std@@YAXPAUSPoint@@QAU1@AAV?$allocator@USPoint@@@0@@Z ; std::_Destroy_range<std::allocator<SPoint> >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundaryShape> >
PUBLIC	??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Uninitialized_move@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z ; std::_Uninitialized_move<SPoint *,std::allocator<SPoint> >
PUBLIC	??1?$_Tidy_guard@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<SPoint,std::allocator<SPoint> > >::~_Tidy_guard<std::vector<SPoint,std::allocator<SPoint> > >
PUBLIC	??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
PUBLIC	??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
PUBLIC	??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>
PUBLIC	??$_Uninitialized_copy@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z ; std::_Uninitialized_copy<SPoint *,std::allocator<SPoint> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<SBoundaryShape> >::~_Uninitialized_backout_al<std::allocator<SBoundaryShape> >
PUBLIC	??$_Emplace_back@USBoundaryShape@@@?$_Uninitialized_backout_al@V?$allocator@USBoundaryShape@@@std@@@std@@QAEX$$QAUSBoundaryShape@@@Z ; std::_Uninitialized_backout_al<std::allocator<SBoundaryShape> >::_Emplace_back<SBoundaryShape>
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??$_Emplace_back@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAEX$$QAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back<std::vector<SPoint,std::allocator<SPoint> > >
PUBLIC	??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_copy<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??$_Emplace_back@AAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAEXAAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back<std::vector<SPoint,std::allocator<SPoint> > &>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7CBoundaryShapeManager@@6B@			; CBoundaryShapeManager::`vftable'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CBoundaryShapeManager@@6B@			; CBoundaryShapeManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBoundaryShapeManager@@@8		; CBoundaryShapeManager `RTTI Type Descriptor'
PUBLIC	??_R3CBoundaryShapeManager@@8			; CBoundaryShapeManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBoundaryShapeManager@@8			; CBoundaryShapeManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBoundaryShapeManager@@8		; CBoundaryShapeManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_strlen:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?frandom@@YAMMM@Z:PROC				; frandom
EXTRN	?random_range@@YAJJJ@Z:PROC			; random_range
EXTRN	??_ECBoundaryShapeManager@@UAEPAXI@Z:PROC	; CBoundaryShapeManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBoundaryShapeManager@@8 DD FLAT:??_R0?AVCBoundaryShapeManager@@@8 ; CBoundaryShapeManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R2CBoundaryShapeManager@@8 DD FLAT:??_R1A@?0A@EA@CBoundaryShapeManager@@8 ; CBoundaryShapeManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R3CBoundaryShapeManager@@8 DD 00H			; CBoundaryShapeManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBoundaryShapeManager@@@8
data$rs	SEGMENT
??_R0?AVCBoundaryShapeManager@@@8 DD FLAT:??_7type_info@@6B@ ; CBoundaryShapeManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBoundaryShapeManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CBoundaryShapeManager@@6B@
rdata$r	SEGMENT
??_R4CBoundaryShapeManager@@6B@ DD 00H			; CBoundaryShapeManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBoundaryShapeManager@@@8
	DD	FLAT:??_R3CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Could not open ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of bou'
	DB	'ndaries', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of con'
	DB	'tours', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of poi'
	DB	'nts', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CBoundaryShapeManager@@6B@
CONST	SEGMENT
??_7CBoundaryShapeManager@@6B@ DD FLAT:??_R4CBoundaryShapeManager@@6B@ ; CBoundaryShapeManager::`vftable'
	DD	FLAT:??_ECBoundaryShapeManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$32 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$0
__unwindtable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$32
__ehfuncinfo$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z$33 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z$33
__ehfuncinfo$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z$32 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z$32
__ehfuncinfo$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$72 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$0
__tryblocktable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 00H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$72
__ehfuncinfo$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$5
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Emplace_back@AAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAEXAAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = -28					; size = 4
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
$T4 = -12						; size = 4
__Ptr$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAEXAAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back<std::vector<SPoint,std::allocator<SPoint> > &>, COMDAT
; _this$ = ecx

; 1545 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00018	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0001b	89 45 f4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00024	89 45 e4	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00027	8b 45 f4	 mov	 eax, DWORD PTR $T4[ebp]
  0002a	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0002d	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00030	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00033	ff 75 ec	 push	 DWORD PTR $T2[ebp]
  00036	8b 4d e8	 mov	 ecx, DWORD PTR $T1[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >

; 1547 :         ++_Last;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	83 c0 0c	 add	 eax, 12			; 0000000cH
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1548 :     }

  0004d	c9		 leave
  0004e	c2 04 00	 ret	 4
??$_Emplace_back@AAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAEXAAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back<std::vector<SPoint,std::allocator<SPoint> > &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Backout$2 = -32					; size = 12
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT

; 1565 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1566 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1567 :     // note: only called internally from elsewhere in the STL
; 1568 :     using _Ptrval = typename _Alloc::value_type*;
; 1569 : 
; 1570 :     auto _UFirst      = _Get_unwrapped(_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1571 :     const auto _ULast = _Get_unwrapped(_Last);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0002e	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00031	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00034	89 45 e0	 mov	 DWORD PTR __Backout$2[ebp], eax
  00037	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003a	89 45 e4	 mov	 DWORD PTR __Backout$2[ebp+4], eax
  0003d	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00040	89 45 e8	 mov	 DWORD PTR __Backout$2[ebp+8], eax

; 1572 : 
; 1573 :     if constexpr (conjunction_v<bool_constant<_Ptr_copy_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1574 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1575 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1576 :         _Dest += _ULast - _UFirst;
; 1577 :     } else {
; 1578 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  00043	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 1579 :         for (; _UFirst != _ULast; ++_UFirst) {

  00047	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00049	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0004c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0004f	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
  00052	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00055	3b 45 ec	 cmp	 eax, DWORD PTR __ULast$[ebp]
  00058	74 0d		 je	 SHORT $LN3@Uninitiali

; 1580 :             _Backout._Emplace_back(*_UFirst);

  0005a	ff 75 f0	 push	 DWORD PTR __UFirst$[ebp]
  0005d	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00060	e8 00 00 00 00	 call	 ??$_Emplace_back@AAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAEXAAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back<std::vector<SPoint,std::allocator<SPoint> > &>

; 1581 :         }

  00065	eb e2		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1551 :         _First = _Last;

  00067	8b 45 e4	 mov	 eax, DWORD PTR __Backout$2[ebp+4]
  0006a	89 45 e0	 mov	 DWORD PTR __Backout$2[ebp], eax

; 1552 :         return _Last;

  0006d	8b 45 e4	 mov	 eax, DWORD PTR __Backout$2[ebp+4]
  00070	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax

; 1582 : 
; 1583 :         _Dest = _Backout._Release();
; 1584 :     }

  00073	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1

; 1541 :         _Destroy_range(_First, _Last, _Al);

  00077	ff 75 e8	 push	 DWORD PTR __Backout$2[ebp+8]
  0007a	ff 75 e4	 push	 DWORD PTR __Backout$2[ebp+4]
  0007d	ff 75 e0	 push	 DWORD PTR __Backout$2[ebp]
  00080	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1585 : 
; 1586 :     return _Dest;

  00088	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1587 : }

  0008b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00095	59		 pop	 ecx
  00096	c9		 leave
  00097	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z$0:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Emplace_back@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAEX$$QAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = -28					; size = 4
$T1 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
$T4 = -12						; size = 4
__Ptr$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAEX$$QAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back<std::vector<SPoint,std::allocator<SPoint> > >, COMDAT
; _this$ = ecx

; 1545 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00009	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00015	89 45 f8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00018	8b 45 f8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0001b	89 45 f4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00024	89 45 e4	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00027	8b 45 f4	 mov	 eax, DWORD PTR $T4[ebp]
  0002a	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0002d	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  00030	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00033	ff 75 ec	 push	 DWORD PTR $T2[ebp]
  00036	8b 4d e8	 mov	 ecx, DWORD PTR $T1[ebp]
  00039	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >

; 1547 :         ++_Last;

  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	83 c0 0c	 add	 eax, 12			; 0000000cH
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1548 :     }

  0004d	c9		 leave
  0004e	c2 04 00	 ret	 4
??$_Emplace_back@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAEX$$QAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back<std::vector<SPoint,std::allocator<SPoint> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT
; _this$ = ecx

; 1540 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1541 :         _Destroy_range(_First, _Last, _Al);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	ff 70 08	 push	 DWORD PTR [eax+8]
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	ff 70 04	 push	 DWORD PTR [eax+4]
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	ff 30		 push	 DWORD PTR [eax]
  00018	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1542 :     }

  00020	c9		 leave
  00021	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Emplace_back@USBoundaryShape@@@?$_Uninitialized_backout_al@V?$allocator@USBoundaryShape@@@std@@@std@@QAEX$$QAUSBoundaryShape@@@Z
_TEXT	SEGMENT
___formal$ = -28					; size = 4
$T1 = -24						; size = 4
$T2 = -20						; size = 4
__Ptr$ = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@USBoundaryShape@@@?$_Uninitialized_backout_al@V?$allocator@USBoundaryShape@@@std@@@std@@QAEX$$QAUSBoundaryShape@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<SBoundaryShape> >::_Emplace_back<SBoundaryShape>, COMDAT
; _this$ = ecx

; 1545 :     void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0000b	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  0000e	89 45 e8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0001a	8b 45 f0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0001d	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1546 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00026	89 45 e4	 mov	 DWORD PTR ___formal$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00029	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0002c	89 45 f4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0002f	8b 45 e8	 mov	 eax, DWORD PTR $T1[ebp]
  00032	89 45 f8	 mov	 DWORD PTR $T4[ebp], eax
  00035	ff 75 f8	 push	 DWORD PTR $T4[ebp]
  00038	8b 4d f4	 mov	 ecx, DWORD PTR $T3[ebp]
  0003b	e8 00 00 00 00	 call	 ??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@$$QAV01@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00040	8b 75 f8	 mov	 esi, DWORD PTR $T4[ebp]
  00043	83 c6 0c	 add	 esi, 12			; 0000000cH
  00046	8b 7d f4	 mov	 edi, DWORD PTR $T3[ebp]
  00049	83 c7 0c	 add	 edi, 12			; 0000000cH
  0004c	a5		 movsd
  0004d	a5		 movsd
  0004e	a5		 movsd
  0004f	8b 75 f8	 mov	 esi, DWORD PTR $T4[ebp]
  00052	83 c6 18	 add	 esi, 24			; 00000018H
  00055	8b 7d f4	 mov	 edi, DWORD PTR $T3[ebp]
  00058	83 c7 18	 add	 edi, 24			; 00000018H
  0005b	a5		 movsd
  0005c	a5		 movsd
  0005d	a5		 movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1547 :         ++_Last;

  0005e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00061	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00064	83 c0 24	 add	 eax, 36			; 00000024H
  00067	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1548 :     }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	c9		 leave
  00070	c2 04 00	 ret	 4
??$_Emplace_back@USBoundaryShape@@@?$_Uninitialized_backout_al@V?$allocator@USBoundaryShape@@@std@@@std@@QAEX$$QAUSBoundaryShape@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<SBoundaryShape> >::_Emplace_back<SBoundaryShape>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<SBoundaryShape> >::~_Uninitialized_backout_al<std::allocator<SBoundaryShape> >, COMDAT
; _this$ = ecx

; 1540 :     ~_Uninitialized_backout_al() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1541 :         _Destroy_range(_First, _Last, _Al);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	ff 70 08	 push	 DWORD PTR [eax+8]
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	ff 70 04	 push	 DWORD PTR [eax+4]
  00013	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00016	ff 30		 push	 DWORD PTR [eax]
  00018	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundaryShape> >
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1542 :     }

  00020	c9		 leave
  00021	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<SBoundaryShape> >::~_Uninitialized_backout_al<std::allocator<SBoundaryShape> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__UFirst$ = -8						; size = 4
__ULast$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z PROC ; std::_Uninitialized_copy<SPoint *,std::allocator<SPoint> >, COMDAT

; 1565 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1566 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1567 :     // note: only called internally from elsewhere in the STL
; 1568 :     using _Ptrval = typename _Alloc::value_type*;
; 1569 : 
; 1570 :     auto _UFirst      = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1571 :     const auto _ULast = _Get_unwrapped(_Last);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR __ULast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1575 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00018	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  0001b	ff 75 fc	 push	 DWORD PTR __ULast$[ebp]
  0001e	ff 75 f8	 push	 DWORD PTR __UFirst$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1576 :         _Dest += _ULast - _UFirst;

  00029	8b 45 fc	 mov	 eax, DWORD PTR __ULast$[ebp]
  0002c	2b 45 f8	 sub	 eax, DWORD PTR __UFirst$[ebp]
  0002f	99		 cdq
  00030	6a 0c		 push	 12			; 0000000cH
  00032	59		 pop	 ecx
  00033	f7 f9		 idiv	 ecx
  00035	6b c0 0c	 imul	 eax, eax, 12
  00038	03 45 10	 add	 eax, DWORD PTR __Dest$[ebp]
  0003b	89 45 10	 mov	 DWORD PTR __Dest$[ebp], eax

; 1577 :     } else {
; 1578 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1579 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1580 :             _Backout._Emplace_back(*_UFirst);
; 1581 :         }
; 1582 : 
; 1583 :         _Dest = _Backout._Release();
; 1584 :     }
; 1585 : 
; 1586 :     return _Dest;

  0003e	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]

; 1587 : }

  00041	c9		 leave
  00042	c3		 ret	 0
??$_Uninitialized_copy@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z ENDP ; std::_Uninitialized_copy<SPoint *,std::allocator<SPoint> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z
_TEXT	SEGMENT
__Last_ch$ = -16					; size = 4
__Count$ = -12						; size = 4
__Dest_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z PROC ; std::_Copy_memmove<SPoint *,SPoint *>, COMDAT

; 4360 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 4361 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR __First_ch$[ebp], eax

; 4362 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 f0	 mov	 DWORD PTR __Last_ch$[ebp], eax

; 4363 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f8	 mov	 DWORD PTR __Dest_ch$[ebp], eax

; 4364 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00018	8b 45 f0	 mov	 eax, DWORD PTR __Last_ch$[ebp]
  0001b	2b 45 fc	 sub	 eax, DWORD PTR __First_ch$[ebp]
  0001e	89 45 f4	 mov	 DWORD PTR __Count$[ebp], eax

; 4365 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00021	ff 75 f4	 push	 DWORD PTR __Count$[ebp]
  00024	ff 75 fc	 push	 DWORD PTR __First_ch$[ebp]
  00027	ff 75 f8	 push	 DWORD PTR __Dest_ch$[ebp]
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4366 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  00032	8b 45 f8	 mov	 eax, DWORD PTR __Dest_ch$[ebp]
  00035	03 45 f4	 add	 eax, DWORD PTR __Count$[ebp]

; 4367 : }

  00038	c9		 leave
  00039	c3		 ret	 0
??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ENDP ; std::_Copy_memmove<SPoint *,SPoint *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >, COMDAT
; _this$ = ecx

; 30   :     ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   :         if (_Target) {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 0a		 je	 SHORT $LN3@Tidy_guard

; 32   :             _Target->_Tidy();

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
$LN3@Tidy_guard:

; 33   :         }
; 34   :     }

  00019	c9		 leave
  0001a	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Backout$2 = -40					; size = 12
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0002e	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00031	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00034	89 45 d8	 mov	 DWORD PTR __Backout$2[ebp], eax
  00037	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003a	89 45 dc	 mov	 DWORD PTR __Backout$2[ebp+4], eax
  0003d	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00040	89 45 e0	 mov	 DWORD PTR __Backout$2[ebp+8], eax

; 1691 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1692 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1694 :         return _Dest + (_ULast - _UFirst);
; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  00043	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {

  00047	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00049	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0004c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0004f	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
  00052	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00055	3b 45 ec	 cmp	 eax, DWORD PTR __ULast$[ebp]
  00058	74 13		 je	 SHORT $LN3@Uninitiali
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0005a	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0005d	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));

  00060	ff 75 e8	 push	 DWORD PTR $T4[ebp]
  00063	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00066	e8 00 00 00 00	 call	 ??$_Emplace_back@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAEX$$QAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back<std::vector<SPoint,std::allocator<SPoint> > >

; 1699 :         }

  0006b	eb dc		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1551 :         _First = _Last;

  0006d	8b 45 dc	 mov	 eax, DWORD PTR __Backout$2[ebp+4]
  00070	89 45 d8	 mov	 DWORD PTR __Backout$2[ebp], eax

; 1552 :         return _Last;

  00073	8b 45 dc	 mov	 eax, DWORD PTR __Backout$2[ebp+4]
  00076	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1700 : 
; 1701 :         return _Backout._Release();

  00079	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1

; 1541 :         _Destroy_range(_First, _Last, _Al);

  0007d	ff 75 e0	 push	 DWORD PTR __Backout$2[ebp+8]
  00080	ff 75 dc	 push	 DWORD PTR __Backout$2[ebp+4]
  00083	ff 75 d8	 push	 DWORD PTR __Backout$2[ebp]
  00086	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1700 : 
; 1701 :         return _Backout._Release();

  0008e	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]

; 1702 :     }
; 1703 : }

  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	c9		 leave
  0009d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z
_TEXT	SEGMENT
__Backout$2 = -40					; size = 12
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__ULast$ = -20						; size = 4
__UFirst$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z PROC ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

  00025	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00028	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0002e	89 45 ec	 mov	 DWORD PTR __ULast$[ebp], eax

; 1535 :     _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00031	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00034	89 45 d8	 mov	 DWORD PTR __Backout$2[ebp], eax
  00037	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  0003a	89 45 dc	 mov	 DWORD PTR __Backout$2[ebp+4], eax
  0003d	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
  00040	89 45 e0	 mov	 DWORD PTR __Backout$2[ebp+8], eax

; 1691 :     if constexpr (conjunction_v<bool_constant<_Ptr_move_cat<decltype(_UFirst), _Ptrval>::_Really_trivial>,
; 1692 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1694 :         return _Dest + (_ULast - _UFirst);
; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  00043	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {

  00047	eb 09		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00049	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0004c	83 c0 24	 add	 eax, 36			; 00000024H
  0004f	89 45 f0	 mov	 DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
  00052	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  00055	3b 45 ec	 cmp	 eax, DWORD PTR __ULast$[ebp]
  00058	74 13		 je	 SHORT $LN3@Uninitiali
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0005a	8b 45 f0	 mov	 eax, DWORD PTR __UFirst$[ebp]
  0005d	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));

  00060	ff 75 e8	 push	 DWORD PTR $T4[ebp]
  00063	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00066	e8 00 00 00 00	 call	 ??$_Emplace_back@USBoundaryShape@@@?$_Uninitialized_backout_al@V?$allocator@USBoundaryShape@@@std@@@std@@QAEX$$QAUSBoundaryShape@@@Z ; std::_Uninitialized_backout_al<std::allocator<SBoundaryShape> >::_Emplace_back<SBoundaryShape>

; 1699 :         }

  0006b	eb dc		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1551 :         _First = _Last;

  0006d	8b 45 dc	 mov	 eax, DWORD PTR __Backout$2[ebp+4]
  00070	89 45 d8	 mov	 DWORD PTR __Backout$2[ebp], eax

; 1552 :         return _Last;

  00073	8b 45 dc	 mov	 eax, DWORD PTR __Backout$2[ebp+4]
  00076	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1700 : 
; 1701 :         return _Backout._Release();

  00079	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1

; 1541 :         _Destroy_range(_First, _Last, _Al);

  0007d	ff 75 e0	 push	 DWORD PTR __Backout$2[ebp+8]
  00080	ff 75 dc	 push	 DWORD PTR __Backout$2[ebp+4]
  00083	ff 75 d8	 push	 DWORD PTR __Backout$2[ebp]
  00086	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundaryShape> >
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1700 : 
; 1701 :         return _Backout._Release();

  0008e	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]

; 1702 :     }
; 1703 : }

  00091	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00094	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0009b	59		 pop	 ecx
  0009c	c9		 leave
  0009d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<SBoundaryShape> >::~_Uninitialized_backout_al<std::allocator<SBoundaryShape> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ENDP ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Tidy_guard@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<SPoint,std::allocator<SPoint> > >::~_Tidy_guard<std::vector<SPoint,std::allocator<SPoint> > >, COMDAT
; _this$ = ecx

; 30   :     ~_Tidy_guard() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 31   :         if (_Target) {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000d	74 0a		 je	 SHORT $LN3@Tidy_guard

; 32   :             _Target->_Tidy();

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
$LN3@Tidy_guard:

; 33   :         }
; 34   :     }

  00019	c9		 leave
  0001a	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<SPoint,std::allocator<SPoint> > >::~_Tidy_guard<std::vector<SPoint,std::allocator<SPoint> > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
__UFirst$ = -8						; size = 4
__ULast$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z PROC ; std::_Uninitialized_move<SPoint *,std::allocator<SPoint> >, COMDAT

; 1685 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1686 :     // move [_First, _Last) to raw _Dest, using _Al
; 1687 :     // note: only called internally from elsewhere in the STL
; 1688 :     using _Ptrval     = typename _Alloc::value_type*;
; 1689 :     auto _UFirst      = _Get_unwrapped(_First);

  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR __UFirst$[ebp], eax

; 1690 :     const auto _ULast = _Get_unwrapped(_Last);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR __ULast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00012	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1693 :         _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00018	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  0001b	ff 75 fc	 push	 DWORD PTR __ULast$[ebp]
  0001e	ff 75 f8	 push	 DWORD PTR __UFirst$[ebp]
  00021	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1694 :         return _Dest + (_ULast - _UFirst);

  00029	8b 45 fc	 mov	 eax, DWORD PTR __ULast$[ebp]
  0002c	2b 45 f8	 sub	 eax, DWORD PTR __UFirst$[ebp]
  0002f	99		 cdq
  00030	6a 0c		 push	 12			; 0000000cH
  00032	59		 pop	 ecx
  00033	f7 f9		 idiv	 ecx
  00035	6b c0 0c	 imul	 eax, eax, 12
  00038	03 45 10	 add	 eax, DWORD PTR __Dest$[ebp]

; 1695 :     } else {
; 1696 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1697 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1698 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1699 :         }
; 1700 : 
; 1701 :         return _Backout._Release();
; 1702 :     }
; 1703 : }

  0003b	c9		 leave
  0003c	c3		 ret	 0
??$_Uninitialized_move@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z ENDP ; std::_Uninitialized_move<SPoint *,std::allocator<SPoint> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Block_size$ = -8					; size = 4
__Ptr_container$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 113  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 114  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 115  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00006	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	83 c0 23	 add	 eax, 35			; 00000023H
  0000c	89 45 f8	 mov	 DWORD PTR __Block_size$[ebp], eax

; 116  :     if (_Block_size <= _Bytes) {

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __Block_size$[ebp]
  00012	3b 45 08	 cmp	 eax, DWORD PTR __Bytes$[ebp]
  00015	77 05		 ja	 SHORT $LN12@Allocate_m

; 117  :         _Throw_bad_array_new_length(); // add overflow

  00017	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Allocate_m:

; 77   :         return ::operator new(_Bytes);

  0001c	ff 75 f8	 push	 DWORD PTR __Block_size$[ebp]
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00024	59		 pop	 ecx

; 118  :     }
; 119  : 
; 120  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00025	89 45 fc	 mov	 DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 121  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00028	83 7d fc 00	 cmp	 DWORD PTR __Ptr_container$[ebp], 0
  0002c	74 02		 je	 SHORT $LN7@Allocate_m
  0002e	eb 09		 jmp	 SHORT $LN2@Allocate_m
$LN7@Allocate_m:
  00030	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  00035	33 c0		 xor	 eax, eax
  00037	75 f7		 jne	 SHORT $LN7@Allocate_m
$LN2@Allocate_m:
  00039	33 c0		 xor	 eax, eax
  0003b	75 eb		 jne	 SHORT $LN4@Allocate_m

; 122  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0003d	8b 45 fc	 mov	 eax, DWORD PTR __Ptr_container$[ebp]
  00040	83 c0 23	 add	 eax, 35			; 00000023H
  00043	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00046	89 45 f4	 mov	 DWORD PTR __Ptr$[ebp], eax

; 123  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00049	6a 04		 push	 4
  0004b	58		 pop	 eax
  0004c	6b c0 ff	 imul	 eax, eax, -1
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00052	8b 55 fc	 mov	 edx, DWORD PTR __Ptr_container$[ebp]
  00055	89 14 01	 mov	 DWORD PTR [ecx+eax], edx

; 124  : 
; 125  : #ifdef _DEBUG
; 126  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 127  : #endif // _DEBUG
; 128  :     return _Ptr;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Ptr$[ebp]
$LN11@Allocate_m:

; 129  : }

  0005b	c9		 leave
  0005c	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 197  : __declspec(allocator) void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 199  : #if defined(_M_IX86) || defined(_M_X64)
; 200  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00003	81 7d 08 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  0000a	72 0b		 jb	 SHORT $LN2@Allocate

; 201  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0000c	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00014	59		 pop	 ecx
  00015	eb 13		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 202  :     }
; 203  : #endif // defined(_M_IX86) || defined(_M_X64)
; 204  : 
; 205  :     if (_Bytes != 0) {

  00017	83 7d 08 00	 cmp	 DWORD PTR __Bytes$[ebp], 0
  0001b	74 0b		 je	 SHORT $LN3@Allocate

; 77   :         return ::operator new(_Bytes);

  0001d	ff 75 08	 push	 DWORD PTR __Bytes$[ebp]
  00020	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00025	59		 pop	 ecx

; 206  :         return _Traits::_Allocate(_Bytes);

  00026	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 207  :     }
; 208  : 
; 209  :     return nullptr;

  00028	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 210  : }

  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {

  00004	eb 09		 jmp	 SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	83 c0 0c	 add	 eax, 12			; 0000000cH
  0000c	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
  0000f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00012	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00015	74 23		 je	 SHORT $LN5@Destroy_ra
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00017	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001a	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00020	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
  00025	33 c0		 xor	 eax, eax
  00027	83 e0 01	 and	 eax, 1
  0002a	74 0c		 je	 SHORT $LN9@Destroy_ra
  0002c	6a 0c		 push	 12			; 0000000cH
  0002e	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	59		 pop	 ecx
  00037	59		 pop	 ecx
$LN9@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 968  :         }

  00038	eb cc		 jmp	 SHORT $LN2@Destroy_ra
$LN5@Destroy_ra:

; 969  :     }
; 970  : }

  0003a	c9		 leave
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SBoundaryShape> >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {

  00004	eb 09		 jmp	 SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	83 c0 24	 add	 eax, 36			; 00000024H
  0000c	89 45 08	 mov	 DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
  0000f	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00012	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  00015	74 23		 je	 SHORT $LN5@Destroy_ra
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00017	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0001a	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  00020	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
  00025	33 c0		 xor	 eax, eax
  00027	83 e0 01	 and	 eax, 1
  0002a	74 0c		 je	 SHORT $LN9@Destroy_ra
  0002c	6a 24		 push	 36			; 00000024H
  0002e	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	59		 pop	 ecx
  00037	59		 pop	 ecx
$LN9@Destroy_ra:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 968  :         }

  00038	eb cc		 jmp	 SHORT $LN2@Destroy_ra
$LN5@Destroy_ra:

; 969  :     }
; 970  : }

  0003a	c9		 leave
  0003b	c3		 ret	 0
??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SBoundaryShape> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 213  : void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 214  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 215  : #if defined(_M_IX86) || defined(_M_X64)
; 216  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00022	81 7d 0c 00 10
	00 00		 cmp	 DWORD PTR __Bytes$[ebp], 4096 ; 00001000H
  00029	72 0f		 jb	 SHORT $LN2@Deallocate

; 217  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR __Bytes$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Ptr$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
  00038	59		 pop	 ecx
  00039	59		 pop	 ecx
$LN2@Deallocate:

; 218  :     }
; 219  : #endif // defined(_M_IX86) || defined(_M_X64)
; 220  : 
; 221  :     ::operator delete(_Ptr, _Bytes);

  0003a	ff 75 0c	 push	 DWORD PTR __Bytes$[ebp]
  0003d	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00040	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00045	59		 pop	 ecx
  00046	59		 pop	 ecx

; 222  : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	c9		 leave
  00053	c3		 ret	 0
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USPoint@@@std@@@std@@YAXPAUSPoint@@QAU1@AAV?$allocator@USPoint@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USPoint@@@std@@@std@@YAXPAUSPoint@@QAU1@AAV?$allocator@USPoint@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SPoint> >, COMDAT

; 962  :     _Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 963  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 964  :     using _Ty = typename _Alloc::value_type;
; 965  :     if _CONSTEXPR_IF (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 966  :         for (; _First != _Last; ++_First) {
; 967  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 968  :         }
; 969  :     }
; 970  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_range@V?$allocator@USPoint@@@std@@@std@@YAXPAUSPoint@@QAU1@AAV?$allocator@USPoint@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SPoint> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 908  : void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept { // (maybe) propagate on container move assignment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 909  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 910  :         _Left = _STD move(_Right);
; 911  :     }
; 912  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -4						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 228  : void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(is_nothrow_constructible_v<_Ty, _Types...>) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Obj$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0000c	8b 45 fc	 mov	 eax, DWORD PTR $T3[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00012	8b 45 0c	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00015	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 229  :     ::new (const_cast<void*>(static_cast<const volatile void*>(_STD addressof(_Obj))))

  00018	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  0001b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00020	89 08		 mov	 DWORD PTR [eax], ecx

; 230  :         _Ty(_STD forward<_Types>(_Args)...);
; 231  : }

  00022	c9		 leave
  00023	c3		 ret	 0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Al$ = -40						; size = 4
__Ptr$ = -36						; size = 4
__Ptr$ = -32						; size = 4
$T1 = -28						; size = 4
__Old_capacity$ = -24					; size = 4
$T2 = -20						; size = 4
__New_capacity$ = -16					; size = 4
__New_ptr$ = -12					; size = 4
_this$ = -8						; size = 4
__Overflow_is_possible$3 = -2				; size = 1
$T4 = -1						; size = 1
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4302 :     basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4303 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4304 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4305 :         if (_New_size > max_size()) {

  00009	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	39 45 08	 cmp	 DWORD PTR __New_size$[ebp], eax
  00014	76 05		 jbe	 SHORT $LN2@Reallocate

; 4306 :             _Xlen_string(); // result too long

  00016	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4307 :         }
; 4308 : 
; 4309 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0001b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00021	89 45 e8	 mov	 DWORD PTR __Old_capacity$[ebp], eax

; 4310 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00024	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0002f	89 45 f0	 mov	 DWORD PTR __New_capacity$[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00032	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00035	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00038	8b 45 e4	 mov	 eax, DWORD PTR $T1[ebp]
  0003b	89 45 d8	 mov	 DWORD PTR __Al$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0003e	c6 45 fe 00	 mov	 BYTE PTR __Overflow_is_possible$3[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00042	8b 45 f0	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00045	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0004c	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4312 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0004d	89 45 f4	 mov	 DWORD PTR __New_ptr$[ebp], eax

; 4313 :         _Mypair._Myval2._Orphan_all();
; 4314 :         _Mypair._Myval2._Mysize = _New_size;

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00053	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00056	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 4315 :         _Mypair._Myval2._Myres  = _New_capacity;

  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 4d f0	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  0005f	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 4316 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  00062	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$[ebp]
  00065	89 45 e0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00068	8b 45 e0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0006b	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006e	ff 75 08	 push	 DWORD PTR __New_size$[ebp]
  00071	ff 75 10	 push	 DWORD PTR _<_Args_0>$[ebp]
  00074	ff 75 ec	 push	 DWORD PTR $T2[ebp]
  00077	e8 00 00 00 00	 call	 _memcpy
  0007c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0007f	c6 45 ff 00	 mov	 BYTE PTR $T4[ebp], 0

; 428  :         _Left = _Right;

  00083	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  00086	03 45 08	 add	 eax, DWORD PTR __New_size$[ebp]
  00089	8a 4d ff	 mov	 cl, BYTE PTR $T4[ebp]
  0008c	88 08		 mov	 BYTE PTR [eax], cl

; 4317 :         if (_BUF_SIZE <= _Old_capacity) {

  0008e	83 7d e8 10	 cmp	 DWORD PTR __Old_capacity$[ebp], 16 ; 00000010H
  00092	72 21		 jb	 SHORT $LN3@Reallocate

; 4318 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 00		 mov	 eax, DWORD PTR [eax]
  00099	89 45 dc	 mov	 DWORD PTR __Ptr$[ebp], eax
  0009c	8b 45 e8	 mov	 eax, DWORD PTR __Old_capacity$[ebp]
  0009f	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a0	50		 push	 eax
  000a1	ff 75 dc	 push	 DWORD PTR __Ptr$[ebp]
  000a4	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  000a9	59		 pop	 ecx
  000aa	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4319 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000ab	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __New_ptr$[ebp]
  000b1	89 08		 mov	 DWORD PTR [eax], ecx

; 4320 :         } else {

  000b3	eb 0e		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4321 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000b5	8d 45 f4	 lea	 eax, DWORD PTR __New_ptr$[ebp]
  000b8	50		 push	 eax
  000b9	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  000bc	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  000c1	59		 pop	 ecx
  000c2	59		 pop	 ecx
$LN4@Reallocate:

; 4322 :         }
; 4323 : 
; 4324 :         return *this;

  000c3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 4325 :     }

  000c6	c9		 leave
  000c7	c2 0c 00	 ret	 12			; 0000000cH
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 270  : /* _CONSTEXPR20_DYNALLOC */ void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 271  : #if _HAS_IF_CONSTEXPR
; 272  :     if constexpr (is_array_v<_Ty>) {
; 273  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 274  :     } else
; 275  : #endif // _HAS_IF_CONSTEXPR
; 276  :     {
; 277  :         _Obj.~_Ty();
; 278  :     }
; 279  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
__Max_possible$2 = -68					; size = 4
$T3 = -64						; size = 4
__Al$ = -60						; size = 4
__Last$ = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
__First$ = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T8 = -24						; size = 4
$T9 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T10 = 0						; size = 4
$T11 = 4						; size = 4
$T12 = 8						; size = 4
$T13 = 12						; size = 4
$T14 = 16						; size = 4
$T15 = 20						; size = 4
$T16 = 24						; size = 4
$T17 = 28						; size = 4
$T18 = 32						; size = 4
$T19 = 36						; size = 4
$T20 = 40						; size = 4
__Newsize$ = 44						; size = 4
__Constructed_last$ = 48				; size = 4
__Oldsize$ = 52						; size = 4
tv172 = 56						; size = 4
$T21 = 60						; size = 4
$T22 = 64						; size = 4
__My_data$ = 68						; size = 4
__Constructed_first$ = 72				; size = 4
___formal$ = 76						; size = 1
__Overflow_is_possible$23 = 83				; size = 1
__Newcapacity$ = 84					; size = 4
__Mylast$ = 88						; size = 4
__Myfirst$ = 92						; size = 4
__Whereoff$ = 96					; size = 4
$T24 = 103						; size = 1
_this$ = 104						; size = 4
__Newvec$ = 108						; size = 4
__Whereptr$ = 120					; size = 4
_<_Val_0>$ = 124					; size = 4
??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	83 ec 70	 sub	 esp, 112		; 00000070H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	83 ec 34	 sub	 esp, 52			; 00000034H
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d 68	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00037	89 45 28	 mov	 DWORD PTR $T20[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0003a	8b 45 28	 mov	 eax, DWORD PTR $T20[ebp]
  0003d	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;

  00040	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
  00043	89 45 44	 mov	 DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

  00046	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  00049	89 45 5c	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

  0004c	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004f	83 c0 04	 add	 eax, 4
  00052	89 45 58	 mov	 DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00055	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00058	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0005b	2b 08		 sub	 ecx, DWORD PTR [eax]
  0005d	8b c1		 mov	 eax, ecx
  0005f	99		 cdq
  00060	6a 0c		 push	 12			; 0000000cH
  00062	59		 pop	 ecx
  00063	f7 f9		 idiv	 ecx
  00065	89 45 60	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00068	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006b	8b 4d 5c	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 0c		 push	 12			; 0000000cH
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 34	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  0007b	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0007e	89 45 24	 mov	 DWORD PTR $T19[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00081	8b 45 24	 mov	 eax, DWORD PTR $T19[ebp]
  00084	89 45 c0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00087	c7 45 40 55 55
	55 15		 mov	 DWORD PTR $T22[ebp], 357913941 ; 15555555H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  0008e	c7 45 20 ff ff
	ff 7f		 mov	 DWORD PTR $T18[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00095	8b 45 20	 mov	 eax, DWORD PTR $T18[ebp]
  00098	89 45 3c	 mov	 DWORD PTR $T21[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0009b	8b 45 40	 mov	 eax, DWORD PTR $T22[ebp]
  0009e	3b 45 3c	 cmp	 eax, DWORD PTR $T21[ebp]
  000a1	73 08		 jae	 SHORT $LN34@Emplace_re
  000a3	8d 45 40	 lea	 eax, DWORD PTR $T22[ebp]
  000a6	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
  000a9	eb 06		 jmp	 SHORT $LN35@Emplace_re
$LN34@Emplace_re:
  000ab	8d 45 3c	 lea	 eax, DWORD PTR $T21[ebp]
  000ae	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
$LN35@Emplace_re:
  000b1	8b 45 38	 mov	 eax, DWORD PTR tv172[ebp]
  000b4	89 45 1c	 mov	 DWORD PTR $T17[ebp], eax
  000b7	8b 45 1c	 mov	 eax, DWORD PTR $T17[ebp]
  000ba	89 45 18	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  000bd	8b 45 18	 mov	 eax, DWORD PTR $T16[ebp]
  000c0	8b 00		 mov	 eax, DWORD PTR [eax]
  000c2	89 45 14	 mov	 DWORD PTR $T15[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  000c5	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000c8	3b 45 14	 cmp	 eax, DWORD PTR $T15[ebp]
  000cb	75 05		 jne	 SHORT $LN2@Emplace_re

; 738  :             _Xlength();

  000cd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  000d2	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000d5	40		 inc	 eax
  000d6	89 45 2c	 mov	 DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000d9	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  000dc	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@ABEII@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Calculate_growth
  000e4	89 45 54	 mov	 DWORD PTR __Newcapacity$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000e7	c6 45 53 01	 mov	 BYTE PTR __Overflow_is_possible$23[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000eb	c7 45 bc 55 55
	55 15		 mov	 DWORD PTR __Max_possible$2[ebp], 357913941 ; 15555555H

; 60   :         if (_Count > _Max_possible) {

  000f2	81 7d 54 55 55
	55 15		 cmp	 DWORD PTR __Newcapacity$[ebp], 357913941 ; 15555555H
  000f9	76 05		 jbe	 SHORT $LN67@Emplace_re

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000fb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN67@Emplace_re:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00100	6b 45 54 0c	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 12
  00104	89 45 10	 mov	 DWORD PTR $T14[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00107	ff 75 10	 push	 DWORD PTR $T14[ebp]
  0010a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0010f	59		 pop	 ecx
  00110	89 45 6c	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00113	6b 45 60 0c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 12
  00117	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0011a	8d 44 01 0c	 lea	 eax, DWORD PTR [ecx+eax+12]
  0011e	89 45 30	 mov	 DWORD PTR __Constructed_last$[ebp], eax

; 746  :         pointer _Constructed_first      = _Constructed_last;

  00121	8b 45 30	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00124	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

  00127	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0012b	8b 45 7c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0012e	89 45 08	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00131	6b 45 60 0c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 12
  00135	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00138	89 45 0c	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0013b	8b 45 0c	 mov	 eax, DWORD PTR $T13[ebp]
  0013e	89 45 00	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00141	8b 45 08	 mov	 eax, DWORD PTR $T12[ebp]
  00144	89 45 04	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00147	ff 75 04	 push	 DWORD PTR $T11[ebp]
  0014a	8b 4d 00	 mov	 ecx, DWORD PTR $T10[ebp]
  0014d	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 750  :         _Constructed_first = _Newvec + _Whereoff;

  00152	6b 45 60 0c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 12
  00156	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
  00159	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0015c	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0015f	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00162	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00164	75 3d		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00166	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00169	8b 00		 mov	 eax, DWORD PTR [eax]
  0016b	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  0016e	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00171	8b 00		 mov	 eax, DWORD PTR [eax]
  00173	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00176	33 c0		 xor	 eax, eax
  00178	88 45 67	 mov	 BYTE PTR $T24[ebp], al
  0017b	8a 45 67	 mov	 al, BYTE PTR $T24[ebp]
  0017e	88 45 4c	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  00181	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00184	89 45 ec	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00187	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp]
  0018a	89 45 e8	 mov	 DWORD PTR $T8[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0018d	ff 75 e8	 push	 DWORD PTR $T8[ebp]
  00190	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00193	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  00196	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  00199	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  0019e	83 c4 10	 add	 esp, 16			; 00000010H

; 754  :         } else { // provide basic guarantee

  001a1	eb 5f		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  001a3	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  001a6	8b 00		 mov	 eax, DWORD PTR [eax]
  001a8	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001ab	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001ae	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001b1	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  001b4	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001b7	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  001ba	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  001bd	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001c0	ff 75 d4	 push	 DWORD PTR __First$[ebp]
  001c3	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  001c8	83 c4 10	 add	 esp, 16			; 00000010H

; 756  :             _Constructed_first = _Newvec;

  001cb	8b 45 6c	 mov	 eax, DWORD PTR __Newvec$[ebp]
  001ce	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001d1	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  001d4	8b 00		 mov	 eax, DWORD PTR [eax]
  001d6	89 45 c8	 mov	 DWORD PTR __Last$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001d9	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001dc	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001df	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  001e2	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001e5	ff 75 cc	 push	 DWORD PTR $T4[ebp]

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001e8	6b 45 60 0c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 12
  001ec	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001ef	8d 44 01 0c	 lea	 eax, DWORD PTR [ecx+eax+12]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001f3	50		 push	 eax
  001f4	ff 75 c8	 push	 DWORD PTR __Last$[ebp]
  001f7	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001fa	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  001ff	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Emplace_re:

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00202	eb 2b		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  00204	ff 75 30	 push	 DWORD PTR __Constructed_last$[ebp]
  00207	ff 75 48	 push	 DWORD PTR __Constructed_first$[ebp]
  0020a	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  0020d	e8 00 00 00 00	 call	 ?_Destroy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@0@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  00212	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  00215	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00218	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  0021b	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate

; 762  :         _RERAISE;

  00220	6a 00		 push	 0
  00222	6a 00		 push	 0
  00224	e8 00 00 00 00	 call	 __CxxThrowException@8

; 763  :         _CATCH_END

  00229	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  0022e	c3		 ret	 0
$LN7@Emplace_re:
  0022f	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00233	eb 04		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$1
$LN10@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  00235	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00239	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  0023c	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  0023f	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00242	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  00245	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@II@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  0024a	6b 45 60 0c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 12
  0024e	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN70@Emplace_re:

; 767  :     }

  00251	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00254	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025b	59		 pop	 ecx
  0025c	5f		 pop	 edi
  0025d	5e		 pop	 esi
  0025e	5b		 pop	 ebx
  0025f	83 c5 70	 add	 ebp, 112		; 00000070H
  00262	c9		 leave
  00263	c2 08 00	 ret	 8
  00266	cc		 int	 3
  00267	cc		 int	 3
  00268	cc		 int	 3
  00269	cc		 int	 3
  0026a	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z
_TEXT	SEGMENT
__Result$ = -44						; size = 4
$T1 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
$T5 = -24						; size = 4
$T6 = -20						; size = 4
__Ptr$ = -16						; size = 4
__My_data$ = -12					; size = 4
_this$ = -8						; size = 4
__Mylast$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back_with_unused_capacity<std::vector<SPoint,std::allocator<SPoint> > const &>, COMDAT
; _this$ = ecx

; 682  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 683  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 684  :         auto& _My_data   = _Mypair._Myval2;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR __My_data$[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

  0000f	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	83 c0 04	 add	 eax, 4
  00015	89 45 fc	 mov	 DWORD PTR __Mylast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00018	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0001b	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0001e	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	89 45 f0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00026	8b 45 f0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00029	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0002f	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00032	8b 45 ec	 mov	 eax, DWORD PTR $T6[ebp]
  00035	89 45 d8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  00038	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0003b	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003e	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  00041	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00044	ff 75 e0	 push	 DWORD PTR $T3[ebp]
  00047	8b 4d dc	 mov	 ecx, DWORD PTR $T2[ebp]
  0004a	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 689  :         _Ty& _Result = *_Mylast;

  0004f	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00052	8b 00		 mov	 eax, DWORD PTR [eax]
  00054	89 45 d4	 mov	 DWORD PTR __Result$[ebp], eax

; 690  :         ++_Mylast;

  00057	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0005a	8b 00		 mov	 eax, DWORD PTR [eax]
  0005c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0005f	8b 4d fc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00062	89 01		 mov	 DWORD PTR [ecx], eax

; 691  : #if _HAS_CXX17
; 692  :         return _Result;
; 693  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 694  :         (void) _Result;
; 695  : #endif // _HAS_CXX17
; 696  :     }

  00064	c9		 leave
  00065	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back_with_unused_capacity<std::vector<SPoint,std::allocator<SPoint> > const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$emplace_back@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEXABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z
_TEXT	SEGMENT
__Result$ = -24						; size = 4
$T1 = -20						; size = 4
$T2 = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEXABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::emplace_back<std::vector<SPoint,std::allocator<SPoint> > const &>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	83 c0 04	 add	 eax, 4
  00015	89 45 f4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

  00018	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00023	74 13		 je	 SHORT $LN2@emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00025	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00028	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0002b	ff 75 f0	 push	 DWORD PTR $T2[ebp]
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_back_with_unused_capacity<std::vector<SPoint,std::allocator<SPoint> > const &>
  00036	eb 19		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00038	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0003b	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0003e	ff 75 ec	 push	 DWORD PTR $T1[ebp]
  00041	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00044	ff 30		 push	 DWORD PTR [eax]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
  0004e	89 45 e8	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  00051	c9		 leave
  00052	c2 04 00	 ret	 4
??$emplace_back@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEXABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::emplace_back<std::vector<SPoint,std::allocator<SPoint> > const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Max_possible$2 = -68					; size = 4
$T3 = -64						; size = 4
__Al$ = -60						; size = 4
__Last$ = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
__First$ = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T8 = -24						; size = 4
$T9 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T10 = 0						; size = 4
$T11 = 4						; size = 4
$T12 = 8						; size = 4
$T13 = 12						; size = 4
$T14 = 16						; size = 4
$T15 = 20						; size = 4
$T16 = 24						; size = 4
$T17 = 28						; size = 4
$T18 = 32						; size = 4
__Newsize$ = 36						; size = 4
__Constructed_last$ = 40				; size = 4
__Oldsize$ = 44						; size = 4
tv172 = 48						; size = 4
$T19 = 52						; size = 4
$T20 = 56						; size = 4
__My_data$ = 60						; size = 4
__Constructed_first$ = 64				; size = 4
$T21 = 68						; size = 4
$T22 = 72						; size = 4
___formal$ = 76						; size = 1
__Overflow_is_possible$23 = 83				; size = 1
__Newcapacity$ = 84					; size = 4
__Mylast$ = 88						; size = 4
__Myfirst$ = 92						; size = 4
__Whereoff$ = 96					; size = 4
$T24 = 103						; size = 1
_this$ = 104						; size = 4
__Newvec$ = 108						; size = 4
__Whereptr$ = 120					; size = 4
_<_Val_0>$ = 124					; size = 4
??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	83 ec 70	 sub	 esp, 112		; 00000070H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	83 ec 34	 sub	 esp, 52			; 00000034H
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d 68	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00037	89 45 20	 mov	 DWORD PTR $T18[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0003a	8b 45 20	 mov	 eax, DWORD PTR $T18[ebp]
  0003d	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;

  00040	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
  00043	89 45 3c	 mov	 DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

  00046	8b 45 3c	 mov	 eax, DWORD PTR __My_data$[ebp]
  00049	89 45 5c	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

  0004c	8b 45 3c	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004f	83 c0 04	 add	 eax, 4
  00052	89 45 58	 mov	 DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00055	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00058	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0005b	2b 08		 sub	 ecx, DWORD PTR [eax]
  0005d	8b c1		 mov	 eax, ecx
  0005f	99		 cdq
  00060	6a 24		 push	 36			; 00000024H
  00062	59		 pop	 ecx
  00063	f7 f9		 idiv	 ecx
  00065	89 45 60	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00068	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006b	8b 4d 5c	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 24		 push	 36			; 00000024H
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 2c	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  0007b	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0007e	89 45 1c	 mov	 DWORD PTR $T17[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00081	8b 45 1c	 mov	 eax, DWORD PTR $T17[ebp]
  00084	89 45 c0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00087	c7 45 38 c7 71
	1c 07		 mov	 DWORD PTR $T20[ebp], 119304647 ; 071c71c7H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  0008e	c7 45 18 ff ff
	ff 7f		 mov	 DWORD PTR $T16[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00095	8b 45 18	 mov	 eax, DWORD PTR $T16[ebp]
  00098	89 45 34	 mov	 DWORD PTR $T19[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0009b	8b 45 38	 mov	 eax, DWORD PTR $T20[ebp]
  0009e	3b 45 34	 cmp	 eax, DWORD PTR $T19[ebp]
  000a1	73 08		 jae	 SHORT $LN34@Emplace_re
  000a3	8d 45 38	 lea	 eax, DWORD PTR $T20[ebp]
  000a6	89 45 30	 mov	 DWORD PTR tv172[ebp], eax
  000a9	eb 06		 jmp	 SHORT $LN35@Emplace_re
$LN34@Emplace_re:
  000ab	8d 45 34	 lea	 eax, DWORD PTR $T19[ebp]
  000ae	89 45 30	 mov	 DWORD PTR tv172[ebp], eax
$LN35@Emplace_re:
  000b1	8b 45 30	 mov	 eax, DWORD PTR tv172[ebp]
  000b4	89 45 14	 mov	 DWORD PTR $T15[ebp], eax
  000b7	8b 45 14	 mov	 eax, DWORD PTR $T15[ebp]
  000ba	89 45 10	 mov	 DWORD PTR $T14[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  000bd	8b 45 10	 mov	 eax, DWORD PTR $T14[ebp]
  000c0	8b 00		 mov	 eax, DWORD PTR [eax]
  000c2	89 45 0c	 mov	 DWORD PTR $T13[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  000c5	8b 45 2c	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000c8	3b 45 0c	 cmp	 eax, DWORD PTR $T13[ebp]
  000cb	75 05		 jne	 SHORT $LN2@Emplace_re

; 738  :             _Xlength();

  000cd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  000d2	8b 45 2c	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000d5	40		 inc	 eax
  000d6	89 45 24	 mov	 DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000d9	ff 75 24	 push	 DWORD PTR __Newsize$[ebp]
  000dc	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@ABEII@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Calculate_growth
  000e4	89 45 54	 mov	 DWORD PTR __Newcapacity$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000e7	c6 45 53 01	 mov	 BYTE PTR __Overflow_is_possible$23[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000eb	c7 45 bc c7 71
	1c 07		 mov	 DWORD PTR __Max_possible$2[ebp], 119304647 ; 071c71c7H

; 60   :         if (_Count > _Max_possible) {

  000f2	81 7d 54 c7 71
	1c 07		 cmp	 DWORD PTR __Newcapacity$[ebp], 119304647 ; 071c71c7H
  000f9	76 05		 jbe	 SHORT $LN67@Emplace_re

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000fb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN67@Emplace_re:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00100	6b 45 54 24	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 36
  00104	89 45 08	 mov	 DWORD PTR $T12[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00107	ff 75 08	 push	 DWORD PTR $T12[ebp]
  0010a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0010f	59		 pop	 ecx
  00110	89 45 6c	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00113	6b 45 60 24	 imul	 eax, DWORD PTR __Whereoff$[ebp], 36
  00117	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0011a	8d 44 01 24	 lea	 eax, DWORD PTR [ecx+eax+36]
  0011e	89 45 28	 mov	 DWORD PTR __Constructed_last$[ebp], eax

; 746  :         pointer _Constructed_first      = _Constructed_last;

  00121	8b 45 28	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00124	89 45 40	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

  00127	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0012b	8b 45 7c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0012e	89 45 00	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00131	6b 45 60 24	 imul	 eax, DWORD PTR __Whereoff$[ebp], 36
  00135	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00138	89 45 04	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0013b	8b 45 04	 mov	 eax, DWORD PTR $T11[ebp]
  0013e	89 45 48	 mov	 DWORD PTR $T22[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00141	8b 45 00	 mov	 eax, DWORD PTR $T10[ebp]
  00144	89 45 44	 mov	 DWORD PTR $T21[ebp], eax
  00147	ff 75 44	 push	 DWORD PTR $T21[ebp]
  0014a	8b 4d 48	 mov	 ecx, DWORD PTR $T22[ebp]
  0014d	e8 00 00 00 00	 call	 ??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00152	8b 7d 48	 mov	 edi, DWORD PTR $T22[ebp]
  00155	83 c7 0c	 add	 edi, 12			; 0000000cH
  00158	8b 75 44	 mov	 esi, DWORD PTR $T21[ebp]
  0015b	83 c6 0c	 add	 esi, 12			; 0000000cH
  0015e	a5		 movsd
  0015f	a5		 movsd
  00160	a5		 movsd
  00161	8b 7d 48	 mov	 edi, DWORD PTR $T22[ebp]
  00164	83 c7 18	 add	 edi, 24			; 00000018H
  00167	8b 75 44	 mov	 esi, DWORD PTR $T21[ebp]
  0016a	83 c6 18	 add	 esi, 24			; 00000018H
  0016d	a5		 movsd
  0016e	a5		 movsd
  0016f	a5		 movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 750  :         _Constructed_first = _Newvec + _Whereoff;

  00170	6b 45 60 24	 imul	 eax, DWORD PTR __Whereoff$[ebp], 36
  00174	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
  00177	89 45 40	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0017a	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0017d	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00180	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00182	75 3d		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00184	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00187	8b 00		 mov	 eax, DWORD PTR [eax]
  00189	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  0018c	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0018f	8b 00		 mov	 eax, DWORD PTR [eax]
  00191	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00194	33 c0		 xor	 eax, eax
  00196	88 45 67	 mov	 BYTE PTR $T24[ebp], al
  00199	8a 45 67	 mov	 al, BYTE PTR $T24[ebp]
  0019c	88 45 4c	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  0019f	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001a2	89 45 ec	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001a5	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp]
  001a8	89 45 e8	 mov	 DWORD PTR $T8[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001ab	ff 75 e8	 push	 DWORD PTR $T8[ebp]
  001ae	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  001b1	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  001b4	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  001b7	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
  001bc	83 c4 10	 add	 esp, 16			; 00000010H

; 754  :         } else { // provide basic guarantee

  001bf	eb 5f		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  001c1	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  001c4	8b 00		 mov	 eax, DWORD PTR [eax]
  001c6	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001c9	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001cc	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001cf	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  001d2	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001d5	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  001d8	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  001db	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001de	ff 75 d4	 push	 DWORD PTR __First$[ebp]
  001e1	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
  001e6	83 c4 10	 add	 esp, 16			; 00000010H

; 756  :             _Constructed_first = _Newvec;

  001e9	8b 45 6c	 mov	 eax, DWORD PTR __Newvec$[ebp]
  001ec	89 45 40	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001ef	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  001f2	8b 00		 mov	 eax, DWORD PTR [eax]
  001f4	89 45 c8	 mov	 DWORD PTR __Last$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001f7	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001fa	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001fd	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  00200	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00203	ff 75 cc	 push	 DWORD PTR $T4[ebp]

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00206	6b 45 60 24	 imul	 eax, DWORD PTR __Whereoff$[ebp], 36
  0020a	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0020d	8d 44 01 24	 lea	 eax, DWORD PTR [ecx+eax+36]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00211	50		 push	 eax
  00212	ff 75 c8	 push	 DWORD PTR __Last$[ebp]
  00215	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  00218	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
  0021d	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Emplace_re:

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00220	eb 2b		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  00222	ff 75 28	 push	 DWORD PTR __Constructed_last$[ebp]
  00225	ff 75 40	 push	 DWORD PTR __Constructed_first$[ebp]
  00228	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  0022b	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXPAUSBoundaryShape@@0@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  00230	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  00233	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00236	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00239	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z ; std::allocator<SBoundaryShape>::deallocate

; 762  :         _RERAISE;

  0023e	6a 00		 push	 0
  00240	6a 00		 push	 0
  00242	e8 00 00 00 00	 call	 __CxxThrowException@8

; 763  :         _CATCH_END

  00247	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  0024c	c3		 ret	 0
$LN7@Emplace_re:
  0024d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00251	eb 04		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z$1
$LN10@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  00253	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00257	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  0025a	ff 75 24	 push	 DWORD PTR __Newsize$[ebp]
  0025d	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00260	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  00263	e8 00 00 00 00	 call	 ?_Change_array@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXQAUSBoundaryShape@@II@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  00268	6b 45 60 24	 imul	 eax, DWORD PTR __Whereoff$[ebp], 36
  0026c	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN70@Emplace_re:

; 767  :     }

  0026f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00272	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00279	59		 pop	 ecx
  0027a	5f		 pop	 edi
  0027b	5e		 pop	 esi
  0027c	5b		 pop	 ebx
  0027d	83 c5 70	 add	 ebp, 112		; 00000070H
  00280	c9		 leave
  00281	c2 08 00	 ret	 8
  00284	cc		 int	 3
  00285	cc		 int	 3
  00286	cc		 int	 3
  00287	cc		 int	 3
  00288	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXABUSBoundaryShape@@@Z
_TEXT	SEGMENT
__Result$ = -44						; size = 4
$T1 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 4
__Ptr$ = -24						; size = 4
__My_data$ = -20					; size = 4
_this$ = -16						; size = 4
$T5 = -12						; size = 4
$T6 = -8						; size = 4
__Mylast$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXABUSBoundaryShape@@@Z PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_back_with_unused_capacity<SBoundaryShape const &>, COMDAT
; _this$ = ecx

; 682  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 683  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 684  :         auto& _My_data   = _Mypair._Myval2;

  0000b	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	89 45 ec	 mov	 DWORD PTR __My_data$[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

  00011	8b 45 ec	 mov	 eax, DWORD PTR __My_data$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	89 45 fc	 mov	 DWORD PTR __Mylast$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0001a	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0001d	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00020	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00023	8b 00		 mov	 eax, DWORD PTR [eax]
  00025	89 45 e8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00028	8b 45 e8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0002b	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0002e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00031	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  00037	89 45 d8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0003a	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  0003d	89 45 f4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00040	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]
  00043	89 45 f8	 mov	 DWORD PTR $T6[ebp], eax
  00046	ff 75 f8	 push	 DWORD PTR $T6[ebp]
  00049	8b 4d f4	 mov	 ecx, DWORD PTR $T5[ebp]
  0004c	e8 00 00 00 00	 call	 ??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00051	8b 75 f8	 mov	 esi, DWORD PTR $T6[ebp]
  00054	83 c6 0c	 add	 esi, 12			; 0000000cH
  00057	8b 7d f4	 mov	 edi, DWORD PTR $T5[ebp]
  0005a	83 c7 0c	 add	 edi, 12			; 0000000cH
  0005d	a5		 movsd
  0005e	a5		 movsd
  0005f	a5		 movsd
  00060	8b 75 f8	 mov	 esi, DWORD PTR $T6[ebp]
  00063	83 c6 18	 add	 esi, 24			; 00000018H
  00066	8b 7d f4	 mov	 edi, DWORD PTR $T5[ebp]
  00069	83 c7 18	 add	 edi, 24			; 00000018H
  0006c	a5		 movsd
  0006d	a5		 movsd
  0006e	a5		 movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 689  :         _Ty& _Result = *_Mylast;

  0006f	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00072	8b 00		 mov	 eax, DWORD PTR [eax]
  00074	89 45 d4	 mov	 DWORD PTR __Result$[ebp], eax

; 690  :         ++_Mylast;

  00077	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0007a	8b 00		 mov	 eax, DWORD PTR [eax]
  0007c	83 c0 24	 add	 eax, 36			; 00000024H
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  00082	89 01		 mov	 DWORD PTR [ecx], eax

; 691  : #if _HAS_CXX17
; 692  :         return _Result;
; 693  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 694  :         (void) _Result;
; 695  : #endif // _HAS_CXX17
; 696  :     }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	c9		 leave
  00087	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXABUSBoundaryShape@@@Z ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_back_with_unused_capacity<SBoundaryShape const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$emplace_back@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEXABUSBoundaryShape@@@Z
_TEXT	SEGMENT
__Result$ = -24						; size = 4
$T1 = -20						; size = 4
$T2 = -16						; size = 4
__Mylast$ = -12						; size = 4
__My_data$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEXABUSBoundaryShape@@@Z PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::emplace_back<SBoundaryShape const &>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	83 c0 04	 add	 eax, 4
  00015	89 45 f4	 mov	 DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

  00018	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0001b	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$[ebp]
  0001e	8b 00		 mov	 eax, DWORD PTR [eax]
  00020	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00023	74 13		 je	 SHORT $LN2@emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00025	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00028	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0002b	ff 75 f0	 push	 DWORD PTR $T2[ebp]
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	e8 00 00 00 00	 call	 ??$_Emplace_back_with_unused_capacity@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXABUSBoundaryShape@@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_back_with_unused_capacity<SBoundaryShape const &>
  00036	eb 19		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00038	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0003b	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0003e	ff 75 ec	 push	 DWORD PTR $T1[ebp]
  00041	8b 45 f4	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00044	ff 30		 push	 DWORD PTR [eax]
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEPAUSBoundaryShape@@QAU2@ABU2@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
  0004e	89 45 e8	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  00051	c9		 leave
  00052	c2 04 00	 ret	 4
??$emplace_back@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEXABUSBoundaryShape@@@Z ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::emplace_back<SBoundaryShape const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Max_possible$2 = -68					; size = 4
$T3 = -64						; size = 4
__Al$ = -60						; size = 4
__Last$ = -56						; size = 4
$T4 = -52						; size = 4
$T5 = -48						; size = 4
__First$ = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
__First$ = -32						; size = 4
__Last$ = -28						; size = 4
$T8 = -24						; size = 4
$T9 = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T10 = 0						; size = 4
$T11 = 4						; size = 4
$T12 = 8						; size = 4
$T13 = 12						; size = 4
$T14 = 16						; size = 4
$T15 = 20						; size = 4
$T16 = 24						; size = 4
$T17 = 28						; size = 4
$T18 = 32						; size = 4
$T19 = 36						; size = 4
$T20 = 40						; size = 4
__Newsize$ = 44						; size = 4
__Constructed_last$ = 48				; size = 4
__Oldsize$ = 52						; size = 4
tv172 = 56						; size = 4
$T21 = 60						; size = 4
$T22 = 64						; size = 4
__My_data$ = 68						; size = 4
__Constructed_first$ = 72				; size = 4
___formal$ = 76						; size = 1
__Overflow_is_possible$23 = 83				; size = 1
__Newcapacity$ = 84					; size = 4
__Mylast$ = 88						; size = 4
__Myfirst$ = 92						; size = 4
__Whereoff$ = 96					; size = 4
$T24 = 103						; size = 1
_this$ = 104						; size = 4
__Newvec$ = 108						; size = 4
__Whereptr$ = 120					; size = 4
_<_Val_0>$ = 124					; size = 4
??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8d 6c 24 90	 lea	 ebp, DWORD PTR [esp-112]
  00005	83 ec 70	 sub	 esp, 112		; 00000070H
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	83 ec 34	 sub	 esp, 52			; 00000034H
  0001a	53		 push	 ebx
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d 68	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00034	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00037	89 45 28	 mov	 DWORD PTR $T20[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0003a	8b 45 28	 mov	 eax, DWORD PTR $T20[ebp]
  0003d	89 45 c4	 mov	 DWORD PTR __Al$[ebp], eax

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;

  00040	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
  00043	89 45 44	 mov	 DWORD PTR __My_data$[ebp], eax

; 729  :         pointer& _Myfirst = _My_data._Myfirst;

  00046	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  00049	89 45 5c	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 730  :         pointer& _Mylast  = _My_data._Mylast;

  0004c	8b 45 44	 mov	 eax, DWORD PTR __My_data$[ebp]
  0004f	83 c0 04	 add	 eax, 4
  00052	89 45 58	 mov	 DWORD PTR __Mylast$[ebp], eax

; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00055	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00058	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0005b	2b 08		 sub	 ecx, DWORD PTR [eax]
  0005d	8b c1		 mov	 eax, ecx
  0005f	99		 cdq
  00060	6a 0c		 push	 12			; 0000000cH
  00062	59		 pop	 ecx
  00063	f7 f9		 idiv	 ecx
  00065	89 45 60	 mov	 DWORD PTR __Whereoff$[ebp], eax

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00068	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006b	8b 4d 5c	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 0c		 push	 12			; 0000000cH
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 34	 mov	 DWORD PTR __Oldsize$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  0007b	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0007e	89 45 24	 mov	 DWORD PTR $T19[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00081	8b 45 24	 mov	 eax, DWORD PTR $T19[ebp]
  00084	89 45 c0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00087	c7 45 40 55 55
	55 15		 mov	 DWORD PTR $T22[ebp], 357913941 ; 15555555H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  0008e	c7 45 20 ff ff
	ff 7f		 mov	 DWORD PTR $T18[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00095	8b 45 20	 mov	 eax, DWORD PTR $T18[ebp]
  00098	89 45 3c	 mov	 DWORD PTR $T21[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0009b	8b 45 40	 mov	 eax, DWORD PTR $T22[ebp]
  0009e	3b 45 3c	 cmp	 eax, DWORD PTR $T21[ebp]
  000a1	73 08		 jae	 SHORT $LN34@Emplace_re
  000a3	8d 45 40	 lea	 eax, DWORD PTR $T22[ebp]
  000a6	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
  000a9	eb 06		 jmp	 SHORT $LN35@Emplace_re
$LN34@Emplace_re:
  000ab	8d 45 3c	 lea	 eax, DWORD PTR $T21[ebp]
  000ae	89 45 38	 mov	 DWORD PTR tv172[ebp], eax
$LN35@Emplace_re:
  000b1	8b 45 38	 mov	 eax, DWORD PTR tv172[ebp]
  000b4	89 45 1c	 mov	 DWORD PTR $T17[ebp], eax
  000b7	8b 45 1c	 mov	 eax, DWORD PTR $T17[ebp]
  000ba	89 45 18	 mov	 DWORD PTR $T16[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  000bd	8b 45 18	 mov	 eax, DWORD PTR $T16[ebp]
  000c0	8b 00		 mov	 eax, DWORD PTR [eax]
  000c2	89 45 14	 mov	 DWORD PTR $T15[ebp], eax

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  000c5	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000c8	3b 45 14	 cmp	 eax, DWORD PTR $T15[ebp]
  000cb	75 05		 jne	 SHORT $LN2@Emplace_re

; 738  :             _Xlength();

  000cd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
$LN2@Emplace_re:

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  000d2	8b 45 34	 mov	 eax, DWORD PTR __Oldsize$[ebp]
  000d5	40		 inc	 eax
  000d6	89 45 2c	 mov	 DWORD PTR __Newsize$[ebp], eax

; 742  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

  000d9	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  000dc	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  000df	e8 00 00 00 00	 call	 ?_Calculate_growth@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABEII@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Calculate_growth
  000e4	89 45 54	 mov	 DWORD PTR __Newcapacity$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  000e7	c6 45 53 01	 mov	 BYTE PTR __Overflow_is_possible$23[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  000eb	c7 45 bc 55 55
	55 15		 mov	 DWORD PTR __Max_possible$2[ebp], 357913941 ; 15555555H

; 60   :         if (_Count > _Max_possible) {

  000f2	81 7d 54 55 55
	55 15		 cmp	 DWORD PTR __Newcapacity$[ebp], 357913941 ; 15555555H
  000f9	76 05		 jbe	 SHORT $LN67@Emplace_re

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000fb	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN67@Emplace_re:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00100	6b 45 54 0c	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 12
  00104	89 45 10	 mov	 DWORD PTR $T14[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00107	ff 75 10	 push	 DWORD PTR $T14[ebp]
  0010a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0010f	59		 pop	 ecx
  00110	89 45 6c	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 745  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00113	6b 45 60 0c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 12
  00117	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0011a	8d 44 01 0c	 lea	 eax, DWORD PTR [ecx+eax+12]
  0011e	89 45 30	 mov	 DWORD PTR __Constructed_last$[ebp], eax

; 746  :         pointer _Constructed_first      = _Constructed_last;

  00121	8b 45 30	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  00124	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 747  : 
; 748  :         _TRY_BEGIN

  00127	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0012b	8b 45 7c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0012e	89 45 08	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00131	6b 45 60 0c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 12
  00135	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00138	89 45 0c	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0013b	8b 45 0c	 mov	 eax, DWORD PTR $T13[ebp]
  0013e	89 45 00	 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00141	8b 45 08	 mov	 eax, DWORD PTR $T12[ebp]
  00144	89 45 04	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00147	8b 75 04	 mov	 esi, DWORD PTR $T11[ebp]
  0014a	8b 7d 00	 mov	 edi, DWORD PTR $T10[ebp]
  0014d	a5		 movsd
  0014e	a5		 movsd
  0014f	a5		 movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 750  :         _Constructed_first = _Newvec + _Whereoff;

  00150	6b 45 60 0c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 12
  00154	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
  00157	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0015a	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0015d	8b 4d 78	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00160	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00162	75 3d		 jne	 SHORT $LN4@Emplace_re

; 753  :             _Umove_if_noexcept(_Myfirst, _Mylast, _Newvec);

  00164	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00167	8b 00		 mov	 eax, DWORD PTR [eax]
  00169	89 45 e4	 mov	 DWORD PTR __Last$[ebp], eax
  0016c	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0016f	8b 00		 mov	 eax, DWORD PTR [eax]
  00171	89 45 e0	 mov	 DWORD PTR __First$[ebp], eax

; 1607 :         _Umove_if_noexcept1(_First, _Last, _Dest,

  00174	33 c0		 xor	 eax, eax
  00176	88 45 67	 mov	 BYTE PTR $T24[ebp], al
  00179	8a 45 67	 mov	 al, BYTE PTR $T24[ebp]
  0017c	88 45 4c	 mov	 BYTE PTR ___formal$[ebp], al

; 1733 :         return _Mypair._Get_first();

  0017f	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00182	89 45 ec	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00185	8b 45 ec	 mov	 eax, DWORD PTR $T9[ebp]
  00188	89 45 e8	 mov	 DWORD PTR $T8[ebp], eax

; 1597 :         _Uninitialized_move(_First, _Last, _Dest, _Getal());

  0018b	ff 75 e8	 push	 DWORD PTR $T8[ebp]
  0018e	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00191	ff 75 e4	 push	 DWORD PTR __Last$[ebp]
  00194	ff 75 e0	 push	 DWORD PTR __First$[ebp]
  00197	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z ; std::_Uninitialized_move<SPoint *,std::allocator<SPoint> >
  0019c	83 c4 10	 add	 esp, 16			; 00000010H

; 754  :         } else { // provide basic guarantee

  0019f	eb 5f		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 755  :             _Umove(_Myfirst, _Whereptr, _Newvec);

  001a1	8b 45 5c	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  001a4	8b 00		 mov	 eax, DWORD PTR [eax]
  001a6	89 45 d4	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001a9	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001ac	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001af	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  001b2	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001b5	ff 75 d8	 push	 DWORD PTR $T6[ebp]
  001b8	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  001bb	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001be	ff 75 d4	 push	 DWORD PTR __First$[ebp]
  001c1	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z ; std::_Uninitialized_move<SPoint *,std::allocator<SPoint> >
  001c6	83 c4 10	 add	 esp, 16			; 00000010H

; 756  :             _Constructed_first = _Newvec;

  001c9	8b 45 6c	 mov	 eax, DWORD PTR __Newvec$[ebp]
  001cc	89 45 48	 mov	 DWORD PTR __Constructed_first$[ebp], eax

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001cf	8b 45 58	 mov	 eax, DWORD PTR __Mylast$[ebp]
  001d2	8b 00		 mov	 eax, DWORD PTR [eax]
  001d4	89 45 c8	 mov	 DWORD PTR __Last$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  001d7	8b 45 68	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001da	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  001dd	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  001e0	89 45 cc	 mov	 DWORD PTR $T4[ebp], eax

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001e3	ff 75 cc	 push	 DWORD PTR $T4[ebp]

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  001e6	6b 45 60 0c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 12
  001ea	8b 4d 6c	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  001ed	8d 44 01 0c	 lea	 eax, DWORD PTR [ecx+eax+12]

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  001f1	50		 push	 eax
  001f2	ff 75 c8	 push	 DWORD PTR __Last$[ebp]
  001f5	ff 75 78	 push	 DWORD PTR __Whereptr$[ebp]
  001f8	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z ; std::_Uninitialized_move<SPoint *,std::allocator<SPoint> >
  001fd	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@Emplace_re:

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  00200	eb 2b		 jmp	 SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z$0:

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);

  00202	ff 75 30	 push	 DWORD PTR __Constructed_last$[ebp]
  00205	ff 75 48	 push	 DWORD PTR __Constructed_first$[ebp]
  00208	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  0020b	e8 00 00 00 00	 call	 ?_Destroy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXPAUSPoint@@0@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Destroy

; 761  :         _Al.deallocate(_Newvec, _Newcapacity);

  00210	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  00213	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00216	8b 4d c4	 mov	 ecx, DWORD PTR __Al$[ebp]
  00219	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USPoint@@@std@@QAEXQAUSPoint@@I@Z ; std::allocator<SPoint>::deallocate

; 762  :         _RERAISE;

  0021e	6a 00		 push	 0
  00220	6a 00		 push	 0
  00222	e8 00 00 00 00	 call	 __CxxThrowException@8

; 763  :         _CATCH_END

  00227	b8 00 00 00 00	 mov	 eax, $LN10@Emplace_re
  0022c	c3		 ret	 0
$LN7@Emplace_re:
  0022d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  00231	eb 04		 jmp	 SHORT __tryend$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z$1
$LN10@Emplace_re:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  00233	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z$1:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00237	ff 75 54	 push	 DWORD PTR __Newcapacity$[ebp]
  0023a	ff 75 2c	 push	 DWORD PTR __Newsize$[ebp]
  0023d	ff 75 6c	 push	 DWORD PTR __Newvec$[ebp]
  00240	8b 4d 68	 mov	 ecx, DWORD PTR _this$[ebp]
  00243	e8 00 00 00 00	 call	 ?_Change_array@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXQAUSPoint@@II@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Change_array

; 766  :         return _Newvec + _Whereoff;

  00248	6b 45 60 0c	 imul	 eax, DWORD PTR __Whereoff$[ebp], 12
  0024c	03 45 6c	 add	 eax, DWORD PTR __Newvec$[ebp]
$LN70@Emplace_re:

; 767  :     }

  0024f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00252	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00259	59		 pop	 ecx
  0025a	5f		 pop	 edi
  0025b	5e		 pop	 esi
  0025c	5b		 pop	 ebx
  0025d	83 c5 70	 add	 ebp, 112		; 00000070H
  00260	c9		 leave
  00261	c2 08 00	 ret	 8
  00264	cc		 int	 3
  00265	cc		 int	 3
  00266	cc		 int	 3
  00267	cc		 int	 3
  00268	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??$emplace_back@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEXABUSPoint@@@Z
_TEXT	SEGMENT
__Result$ = -64						; size = 4
__Result$1 = -60					; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
$T7 = -36						; size = 4
$T8 = -32						; size = 4
__Ptr$ = -28						; size = 4
$T9 = -24						; size = 4
__My_data$10 = -20					; size = 4
__Mylast$ = -16						; size = 4
__My_data$ = -12					; size = 4
_this$ = -8						; size = 4
__Mylast$11 = -4					; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEXABUSPoint@@@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::emplace_back<SPoint const &>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;

  0000b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000e	89 45 f4	 mov	 DWORD PTR __My_data$[ebp], eax

; 703  :         pointer& _Mylast = _My_data._Mylast;

  00011	8b 45 f4	 mov	 eax, DWORD PTR __My_data$[ebp]
  00014	83 c0 04	 add	 eax, 4
  00017	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 704  :         if (_Mylast != _My_data._Myend) {

  0001a	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0001d	8b 4d f4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
  00022	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00025	74 61		 je	 SHORT $LN2@emplace_ba
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00027	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0002a	89 45 e8	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 684  :         auto& _My_data   = _Mypair._Myval2;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	89 45 ec	 mov	 DWORD PTR __My_data$10[ebp], eax

; 685  :         pointer& _Mylast = _My_data._Mylast;

  00033	8b 45 ec	 mov	 eax, DWORD PTR __My_data$10[ebp]
  00036	83 c0 04	 add	 eax, 4
  00039	89 45 fc	 mov	 DWORD PTR __Mylast$11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  0003c	8b 45 e8	 mov	 eax, DWORD PTR $T9[ebp]
  0003f	89 45 d8	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00042	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 e4	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0004a	8b 45 e4	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0004d	89 45 dc	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00050	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00053	89 45 e0	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00056	8b 45 e0	 mov	 eax, DWORD PTR $T8[ebp]
  00059	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_new.h

; 169  :         return _Where;

  0005c	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  0005f	89 45 d0	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T6[ebp]
  00065	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 701  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

  00068	8b 75 d4	 mov	 esi, DWORD PTR $T5[ebp]
  0006b	8b 7d d0	 mov	 edi, DWORD PTR $T4[ebp]
  0006e	a5		 movsd
  0006f	a5		 movsd
  00070	a5		 movsd
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 689  :         _Ty& _Result = *_Mylast;

  00071	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  00074	8b 00		 mov	 eax, DWORD PTR [eax]
  00076	89 45 c4	 mov	 DWORD PTR __Result$1[ebp], eax

; 690  :         ++_Mylast;

  00079	8b 45 fc	 mov	 eax, DWORD PTR __Mylast$11[ebp]
  0007c	8b 00		 mov	 eax, DWORD PTR [eax]
  0007e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00081	8b 4d fc	 mov	 ecx, DWORD PTR __Mylast$11[ebp]
  00084	89 01		 mov	 DWORD PTR [ecx], eax

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00086	eb 19		 jmp	 SHORT $LN1@emplace_ba
$LN2@emplace_ba:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1443 :     return static_cast<_Ty&&>(_Arg);

  00088	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  0008b	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0008e	ff 75 cc	 push	 DWORD PTR $T3[ebp]
  00091	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00094	ff 30		 push	 DWORD PTR [eax]
  00096	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEPAUSPoint@@QAU2@ABU2@@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
  0009e	89 45 c0	 mov	 DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	c9		 leave
  000a4	c2 04 00	 ret	 4
??$emplace_back@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEXABUSPoint@@@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::emplace_back<SPoint const &>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z
_TEXT	SEGMENT
$T1 = -8						; size = 1
$T2 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4516 :     basic_string<_Elem, _Traits, _Alloc>&& _Left, basic_string<_Elem, _Traits, _Alloc>&& _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	83 65 fc 00	 and	 DWORD PTR $T2[ebp], 0

; 4517 : #if _ITERATOR_DEBUG_LEVEL == 2
; 4518 :     _STL_VERIFY(_STD addressof(_Left) != _STD addressof(_Right),
; 4519 :         "You cannot concatenate the same moved string to itself. See "
; 4520 :         "N4849 [res.on.arguments]/1.3: If a function argument binds to an rvalue reference "
; 4521 :         "parameter, the implementation may assume that this parameter is a unique reference "
; 4522 :         "to this argument");
; 4523 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 4524 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00009	ff 75 10	 push	 DWORD PTR __Right$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __Left$[ebp]
  0000f	ff 75 f8	 push	 DWORD PTR $T1[ebp]
  00012	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00015	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
  0001d	83 c8 01	 or	 eax, 1
  00020	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  00023	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 4525 : }

  00026	c9		 leave
  00027	c3		 ret	 0
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@USPoint@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@USPoint@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SPoint> >::_Vector_val<std::_Simple_types<SPoint> >, COMDAT
; _this$ = ecx

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 20 00	 and	 DWORD PTR [eax], 0
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 60 08 00	 and	 DWORD PTR [eax+8], 0
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@USPoint@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SPoint> >::_Vector_val<std::_Simple_types<SPoint> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 :         _Xlength_error("vector too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1687 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();
; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 75		 je	 SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USPoint@@@std@@@std@@YAXPAUSPoint@@QAU1@AAV?$allocator@USPoint@@@0@@Z ; std::_Destroy_range<std::allocator<SPoint> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 0c		 push	 12			; 0000000cH
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	6b 45 d4 0c	 imul	 eax, DWORD PTR __Count$[ebp], 12
  00087	50		 push	 eax
  00088	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	59		 pop	 ecx
  00091	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00092	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00095	83 20 00	 and	 DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

  00098	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0009b	83 20 00	 and	 DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

  0009e	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a1	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

  000a4	c9		 leave
  000a5	c3		 ret	 0
?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXQAUSPoint@@II@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXQAUSPoint@@II@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();
; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 63		 je	 SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USPoint@@@std@@@std@@YAXPAUSPoint@@QAU1@AAV?$allocator@USPoint@@@0@@Z ; std::_Destroy_range<std::allocator<SPoint> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 0c		 push	 12			; 0000000cH
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	6b 45 d4 0c	 imul	 eax, DWORD PTR __Count$[ebp], 12
  00087	50		 push	 eax
  00088	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	59		 pop	 ecx
  00091	59		 pop	 ecx
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  00092	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00098	89 08		 mov	 DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  0009a	6b 45 0c 0c	 imul	 eax, DWORD PTR __Newsize$[ebp], 12
  0009e	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000a1	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000a4	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000a6	6b 45 10 0c	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 12
  000aa	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000ad	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b0	89 01		 mov	 DWORD PTR [ecx], eax

; 1684 :     }

  000b2	c9		 leave
  000b3	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXQAUSPoint@@II@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Buy_raw@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Max_possible$1 = -44					; size = 4
$T2 = -40						; size = 4
__Myend$ = -36						; size = 4
__Mylast$ = -32						; size = 4
__Myfirst$ = -28					; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
_this$ = -16						; size = 4
__Newvec$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Overflow_is_possible$5 = -1				; size = 1
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXI@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1633 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1634 :         // allocate array with _Newcapacity elements
; 1635 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1636 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 e4	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1637 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 e0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1638 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 dc	 mov	 DWORD PTR __Myend$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  00027	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0002a	89 45 ec	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0002d	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
  00030	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00033	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$5[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00037	c7 45 d4 55 55
	55 15		 mov	 DWORD PTR __Max_possible$1[ebp], 357913941 ; 15555555H

; 60   :         if (_Count > _Max_possible) {

  0003e	81 7d 08 55 55
	55 15		 cmp	 DWORD PTR __Newcapacity$[ebp], 357913941 ; 15555555H
  00045	76 05		 jbe	 SHORT $LN12@Buy_raw

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00047	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Buy_raw:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0004c	6b 45 08 0c	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 12
  00050	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00053	ff 75 e8	 push	 DWORD PTR $T3[ebp]
  00056	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0005b	59		 pop	 ecx
  0005c	89 45 f4	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1644 :         _Myfirst           = _Newvec;

  0005f	8b 45 e4	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00062	8b 4d f4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00065	89 08		 mov	 DWORD PTR [eax], ecx

; 1645 :         _Mylast            = _Newvec;

  00067	8b 45 e0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0006d	89 08		 mov	 DWORD PTR [eax], ecx

; 1646 :         _Myend             = _Newvec + _Newcapacity;

  0006f	6b 45 08 0c	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 12
  00073	03 45 f4	 add	 eax, DWORD PTR __Newvec$[ebp]
  00076	8b 4d dc	 mov	 ecx, DWORD PTR __Myend$[ebp]
  00079	89 01		 mov	 DWORD PTR [ecx], eax
$LN15@Buy_raw:

; 1647 :     }

  0007b	c9		 leave
  0007c	c2 04 00	 ret	 4
?_Buy_raw@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXI@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Geometric$ = -32					; size = 4
__Max$ = -28						; size = 4
tv82 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$8 = -8					; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABEII@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$8[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	99		 cdq
  0001b	6a 0c		 push	 12			; 0000000cH
  0001d	59		 pop	 ecx
  0001e	f7 f9		 idiv	 ecx
  00020	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00023	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00026	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00029	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  0002c	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0002f	c7 45 f0 55 55
	55 15		 mov	 DWORD PTR $T7[ebp], 357913941 ; 15555555H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00036	c7 45 d8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0003d	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  00040	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00043	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00046	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  00049	73 08		 jae	 SHORT $LN25@Calculate_
  0004b	8d 45 f0	 lea	 eax, DWORD PTR $T7[ebp]
  0004e	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
  00051	eb 06		 jmp	 SHORT $LN26@Calculate_
$LN25@Calculate_:
  00053	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00056	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
$LN26@Calculate_:
  00059	8b 45 e8	 mov	 eax, DWORD PTR tv82[ebp]
  0005c	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  0005f	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  00062	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00065	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00068	8b 00		 mov	 eax, DWORD PTR [eax]
  0006a	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 :         const auto _Max              = max_size();
; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006d	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00070	d1 e8		 shr	 eax, 1
  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  00075	2b c8		 sub	 ecx, eax
  00077	39 4d fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], ecx
  0007a	76 05		 jbe	 SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

  0007c	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  0007f	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00081	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00084	d1 e8		 shr	 eax, 1
  00086	03 45 fc	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00089	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  0008c	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0008f	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00092	73 05		 jae	 SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

  00094	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00097	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

  00099	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

  0009c	c9		 leave
  0009d	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABEII@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXPAUSPoint@@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXPAUSPoint@@0@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00015	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00018	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USPoint@@@std@@@std@@YAXPAUSPoint@@QAU1@AAV?$allocator@USPoint@@@0@@Z ; std::_Destroy_range<std::allocator<SPoint> >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00026	c9		 leave
  00027	c2 08 00	 ret	 8
?_Destroy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXPAUSPoint@@0@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 673  :         _Tidy();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy

; 674  : #if _ITERATOR_DEBUG_LEVEL != 0
; 675  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 676  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));
; 677  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 678  :     }

  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 4
_this$ = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__Right$ = -12						; size = 4
___formal$ = -8						; size = 1
$T4 = -1						; size = 1
__Right$ = 8						; size = 4
??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >, COMDAT
; _this$ = ecx

; 581  :     vector(vector&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00012	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00015	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00018	89 45 d8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 581  :     vector(vector&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

  0001b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 dc	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1344 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00021	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00027	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 20 00	 and	 DWORD PTR [eax], 0
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00034	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 60 08 00	 and	 DWORD PTR [eax+8], 0

; 582  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 583  :         _Move_construct(_Right, true_type{});

  0003b	33 c0		 xor	 eax, eax
  0003d	88 45 ff	 mov	 BYTE PTR $T4[ebp], al
  00040	8a 45 ff	 mov	 al, BYTE PTR $T4[ebp]
  00043	88 45 f8	 mov	 BYTE PTR ___formal$[ebp], al

; 557  :         _Mypair._Myval2._Take_contents(_Right._Mypair._Myval2);

  00046	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00049	89 45 f4	 mov	 DWORD PTR __Right$[ebp], eax
  0004c	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 386  :         _Myfirst = _Right._Myfirst;

  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __Right$[ebp]
  00058	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005a	89 08		 mov	 DWORD PTR [eax], ecx

; 387  :         _Mylast  = _Right._Mylast;

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __Right$[ebp]
  00062	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00065	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 388  :         _Myend   = _Right._Myend;

  00068	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __Right$[ebp]
  0006e	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00071	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 389  : 
; 390  :         _Right._Myfirst = pointer();

  00074	8b 45 f4	 mov	 eax, DWORD PTR __Right$[ebp]
  00077	83 20 00	 and	 DWORD PTR [eax], 0

; 391  :         _Right._Mylast  = pointer();

  0007a	8b 45 f4	 mov	 eax, DWORD PTR __Right$[ebp]
  0007d	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 392  :         _Right._Myend   = pointer();

  00081	8b 45 f4	 mov	 eax, DWORD PTR __Right$[ebp]
  00084	83 60 08 00	 and	 DWORD PTR [eax+8], 0

; 584  :     }

  00088	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	c9		 leave
  0008c	c2 04 00	 ret	 4
??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Alproxy$ = -72					; size = 4
$T2 = -68						; size = 4
__Dest$ = -64						; size = 4
$T3 = -60						; size = 4
$T4 = -56						; size = 4
_this$ = -52						; size = 4
$T5 = -48						; size = 4
__My_data$ = -44					; size = 4
__Right_data$ = -40					; size = 4
__Guard$6 = -36						; size = 4
__Rightfirst$ = -32					; size = 4
__Rightlast$ = -28					; size = 4
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_$S10$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >, COMDAT
; _this$ = ecx

; 521  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1737 :         return _Mypair._Get_first();

  00028	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0002b	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  0002e	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  00031	89 45 bc	 mov	 DWORD PTR $T2[ebp], eax

; 521  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00034	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 cc	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1344 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0003a	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00040	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 20 00	 and	 DWORD PTR [eax], 0
  00046	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00049	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  0004d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00050	83 60 08 00	 and	 DWORD PTR [eax+8], 0

; 522  :         auto&& _Alproxy           = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00054	8d 45 f3	 lea	 eax, DWORD PTR _$S10$[ebp]
  00057	89 45 b8	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 523  :         auto& _My_data            = _Mypair._Myval2;

  0005a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	89 45 d4	 mov	 DWORD PTR __My_data$[ebp], eax

; 524  :         const auto& _Right_data   = _Right._Mypair._Myval2;

  00060	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00063	89 45 d8	 mov	 DWORD PTR __Right_data$[ebp], eax

; 525  :         const pointer _Rightfirst = _Right_data._Myfirst;

  00066	8b 45 d8	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00069	8b 00		 mov	 eax, DWORD PTR [eax]
  0006b	89 45 e0	 mov	 DWORD PTR __Rightfirst$[ebp], eax

; 526  :         const pointer _Rightlast  = _Right_data._Mylast;

  0006e	8b 45 d8	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00071	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00074	89 45 e4	 mov	 DWORD PTR __Rightlast$[ebp], eax

; 527  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 528  :         if (_Rightfirst != _Rightlast) {

  00077	8b 45 e0	 mov	 eax, DWORD PTR __Rightfirst$[ebp]
  0007a	3b 45 e4	 cmp	 eax, DWORD PTR __Rightlast$[ebp]
  0007d	74 63		 je	 SHORT $LN1@vector

; 529  :             _Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));

  0007f	8b 45 e4	 mov	 eax, DWORD PTR __Rightlast$[ebp]
  00082	2b 45 e0	 sub	 eax, DWORD PTR __Rightfirst$[ebp]
  00085	99		 cdq
  00086	6a 0c		 push	 12			; 0000000cH
  00088	59		 pop	 ecx
  00089	f7 f9		 idiv	 ecx
  0008b	50		 push	 eax
  0008c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXI@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Buy_raw

; 530  :             _Tidy_guard<vector> _Guard{this};

  00094	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00097	89 45 dc	 mov	 DWORD PTR __Guard$6[ebp], eax
  0009a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 531  :             _My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);

  0009e	8b 45 d4	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a1	8b 00		 mov	 eax, DWORD PTR [eax]
  000a3	89 45 c0	 mov	 DWORD PTR __Dest$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  000a6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000a9	89 45 c8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  000ac	8b 45 c8	 mov	 eax, DWORD PTR $T4[ebp]
  000af	89 45 c4	 mov	 DWORD PTR $T3[ebp], eax

; 1588 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  000b2	ff 75 c4	 push	 DWORD PTR $T3[ebp]
  000b5	ff 75 c0	 push	 DWORD PTR __Dest$[ebp]
  000b8	ff 75 e4	 push	 DWORD PTR __Rightlast$[ebp]
  000bb	ff 75 e0	 push	 DWORD PTR __Rightfirst$[ebp]
  000be	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAUSPoint@@V?$allocator@USPoint@@@std@@@std@@YAPAUSPoint@@QAU1@0PAU1@AAV?$allocator@USPoint@@@0@@Z ; std::_Uninitialized_copy<SPoint *,std::allocator<SPoint> >
  000c3	83 c4 10	 add	 esp, 16			; 00000010H

; 531  :             _My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);

  000c6	8b 4d d4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000c9	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 532  :             _Guard._Target   = nullptr;

  000cc	83 65 dc 00	 and	 DWORD PTR __Guard$6[ebp], 0

; 533  :         }

  000d0	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 31   :         if (_Target) {

  000d4	83 7d dc 00	 cmp	 DWORD PTR __Guard$6[ebp], 0
  000d8	74 08		 je	 SHORT $LN1@vector

; 32   :             _Target->_Tidy();

  000da	8b 4d dc	 mov	 ecx, DWORD PTR __Guard$6[ebp]
  000dd	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
$LN1@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 536  :     }

  000e2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	c9		 leave
  000f1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Guard$6[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<SPoint,std::allocator<SPoint> > >::~_Tidy_guard<std::vector<SPoint,std::allocator<SPoint> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@USPoint@@@std@@QAEXQAUSPoint@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USPoint@@@std@@QAEXQAUSPoint@@I@Z PROC ; std::allocator<SPoint>::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6b 45 0c 0c	 imul	 eax, DWORD PTR __Count$[ebp], 12
  0000b	50		 push	 eax
  0000c	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	59		 pop	 ecx
  00015	59		 pop	 ecx

; 811  :     }

  00016	c9		 leave
  00017	c2 08 00	 ret	 8
?deallocate@?$allocator@USPoint@@@std@@QAEXQAUSPoint@@I@Z ENDP ; std::allocator<SPoint>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??_GCBoundaryShapeManager@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBoundaryShapeManager@@UAEPAXI@Z PROC		; CBoundaryShapeManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ??1CBoundaryShapeManager@@UAE@XZ ; CBoundaryShapeManager::~CBoundaryShapeManager
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	74 0c		 je	 SHORT $LN2@scalar
  00017	6a 28		 push	 40			; 00000028H
  00019	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00021	59		 pop	 ecx
  00022	59		 pop	 ecx
$LN2@scalar:
  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	c9		 leave
  00027	c2 04 00	 ret	 4
??_GCBoundaryShapeManager@@UAEPAXI@Z ENDP		; CBoundaryShapeManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 :         _Xlength_error("vector too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
?_Tidy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXXZ PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1687 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();
; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 75		 je	 SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundaryShape> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 24		 push	 36			; 00000024H
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	6b 45 d4 24	 imul	 eax, DWORD PTR __Count$[ebp], 36
  00087	50		 push	 eax
  00088	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	59		 pop	 ecx
  00091	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00092	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00095	83 20 00	 and	 DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

  00098	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0009b	83 20 00	 and	 DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

  0009e	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a1	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

  000a4	c9		 leave
  000a5	c3		 ret	 0
?_Tidy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXXZ ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXQAUSBoundaryShape@@II@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXQAUSBoundaryShape@@II@Z PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();
; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 63		 je	 SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundaryShape> >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 24		 push	 36			; 00000024H
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	6b 45 d4 24	 imul	 eax, DWORD PTR __Count$[ebp], 36
  00087	50		 push	 eax
  00088	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	59		 pop	 ecx
  00091	59		 pop	 ecx
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  00092	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00098	89 08		 mov	 DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  0009a	6b 45 0c 24	 imul	 eax, DWORD PTR __Newsize$[ebp], 36
  0009e	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000a1	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000a4	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000a6	6b 45 10 24	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 36
  000aa	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000ad	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b0	89 01		 mov	 DWORD PTR [ecx], eax

; 1684 :     }

  000b2	c9		 leave
  000b3	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXQAUSBoundaryShape@@II@Z ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Geometric$ = -32					; size = 4
__Max$ = -28						; size = 4
tv82 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$8 = -8					; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@ABEII@Z PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$8[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	99		 cdq
  0001b	6a 24		 push	 36			; 00000024H
  0001d	59		 pop	 ecx
  0001e	f7 f9		 idiv	 ecx
  00020	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00023	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00026	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00029	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  0002c	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0002f	c7 45 f0 c7 71
	1c 07		 mov	 DWORD PTR $T7[ebp], 119304647 ; 071c71c7H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00036	c7 45 d8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0003d	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  00040	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00043	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00046	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  00049	73 08		 jae	 SHORT $LN25@Calculate_
  0004b	8d 45 f0	 lea	 eax, DWORD PTR $T7[ebp]
  0004e	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
  00051	eb 06		 jmp	 SHORT $LN26@Calculate_
$LN25@Calculate_:
  00053	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00056	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
$LN26@Calculate_:
  00059	8b 45 e8	 mov	 eax, DWORD PTR tv82[ebp]
  0005c	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  0005f	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  00062	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00065	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00068	8b 00		 mov	 eax, DWORD PTR [eax]
  0006a	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 :         const auto _Max              = max_size();
; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006d	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00070	d1 e8		 shr	 eax, 1
  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  00075	2b c8		 sub	 ecx, eax
  00077	39 4d fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], ecx
  0007a	76 05		 jbe	 SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

  0007c	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  0007f	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00081	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00084	d1 e8		 shr	 eax, 1
  00086	03 45 fc	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00089	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  0008c	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0008f	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00092	73 05		 jae	 SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

  00094	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00097	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

  00099	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

  0009c	c9		 leave
  0009d	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@ABEII@Z ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXPAUSBoundaryShape@@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXPAUSBoundaryShape@@0@Z PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00015	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00018	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundaryShape> >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00026	c9		 leave
  00027	c2 08 00	 ret	 8
?_Destroy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXPAUSBoundaryShape@@0@Z ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z PROC ; std::allocator<SBoundaryShape>::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6b 45 0c 24	 imul	 eax, DWORD PTR __Count$[ebp], 36
  0000b	50		 push	 eax
  0000c	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	59		 pop	 ecx
  00015	59		 pop	 ecx

; 811  :     }

  00016	c9		 leave
  00017	c2 08 00	 ret	 8
?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z ENDP ; std::allocator<SBoundaryShape>::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z
_TEXT	SEGMENT
_this$ = -116						; size = 4
$T1 = -112						; size = 4
$T2 = -108						; size = 4
$T3 = -104						; size = 4
$T4 = -100						; size = 4
$T5 = -96						; size = 4
$T6 = -92						; size = 4
__My_data$7 = -88					; size = 4
$T8 = -84						; size = 4
__My_data$9 = -80					; size = 4
__My_data$10 = -76					; size = 4
$T11 = -72						; size = 4
__My_data$12 = -68					; size = 4
__My_data$13 = -64					; size = 4
$T14 = -60						; size = 4
__My_data$15 = -56					; size = 4
__My_data$16 = -52					; size = 4
$T17 = -48						; size = 4
__My_data$18 = -44					; size = 4
__My_data$19 = -40					; size = 4
$T20 = -36						; size = 4
__My_data$21 = -32					; size = 4
__My_data$22 = -28					; size = 4
$T23 = -24						; size = 4
__My_data$24 = -20					; size = 4
$T25 = -16						; size = 4
__My_data$26 = -12					; size = 4
$T27 = -8						; size = 4
__My_data$28 = -4					; size = 4
$T29 = 0						; size = 4
__My_data$30 = 4					; size = 4
$T31 = 8						; size = 4
__My_data$32 = 12					; size = 4
$T33 = 16						; size = 4
__My_data$34 = 20					; size = 4
$T35 = 24						; size = 4
__My_data$36 = 28					; size = 4
$T37 = 32						; size = 4
__My_data$38 = 36					; size = 4
$T39 = 40						; size = 4
__My_data$40 = 44					; size = 4
$T41 = 48						; size = 4
$T42 = 52						; size = 4
__My_data$43 = 56					; size = 4
$T44 = 60						; size = 4
$T45 = 64						; size = 4
__My_data$46 = 68					; size = 4
$T47 = 72						; size = 4
tv229 = 76						; size = 4
__My_data$48 = 80					; size = 4
__My_data$49 = 84					; size = 4
__My_data$50 = 88					; size = 4
_j$51 = 92						; size = 4
_i$52 = 96						; size = 4
_k$53 = 100						; size = 4
_bInside$ = 107						; size = 1
_sShape$ = 116						; size = 4
_fX$ = 120						; size = 4
_fY$ = 124						; size = 4
?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z PROC ; CBoundaryShapeManager::PointInShape, COMDAT
; _this$ = ecx

; 171  : {

  00000	55		 push	 ebp
  00001	8d 6c 24 94	 lea	 ebp, DWORD PTR [esp-108]
  00005	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  0000b	56		 push	 esi
  0000c	89 4d 8c	 mov	 DWORD PTR _this$[ebp], ecx

; 172  : 	bool bInside = false;

  0000f	c6 45 6b 00	 mov	 BYTE PTR _bInside$[ebp], 0

; 174  : 	for (DWORD k = 0; k < sShape.m_vContours.size(); ++k)

  00013	83 65 64 00	 and	 DWORD PTR _k$53[ebp], 0
  00017	eb 07		 jmp	 SHORT $LN4@PointInSha
$LN2@PointInSha:
  00019	8b 45 64	 mov	 eax, DWORD PTR _k$53[ebp]
  0001c	40		 inc	 eax
  0001d	89 45 64	 mov	 DWORD PTR _k$53[ebp], eax
$LN4@PointInSha:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  00020	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  00023	89 45 58	 mov	 DWORD PTR __My_data$50[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00026	8b 45 58	 mov	 eax, DWORD PTR __My_data$50[ebp]
  00029	8b 4d 58	 mov	 ecx, DWORD PTR __My_data$50[ebp]
  0002c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002f	2b 01		 sub	 eax, DWORD PTR [ecx]
  00031	99		 cdq
  00032	6a 0c		 push	 12			; 0000000cH
  00034	59		 pop	 ecx
  00035	f7 f9		 idiv	 ecx
  00037	89 45 48	 mov	 DWORD PTR $T47[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 174  : 	for (DWORD k = 0; k < sShape.m_vContours.size(); ++k)

  0003a	8b 45 64	 mov	 eax, DWORD PTR _k$53[ebp]
  0003d	3b 45 48	 cmp	 eax, DWORD PTR $T47[ebp]
  00040	0f 83 c7 02 00
	00		 jae	 $LN3@PointInSha

; 176  : 		for (DWORD i = 0, j = sShape.m_vContours[k].size() - 1; i < sShape.m_vContours[k].size(); j = i++)

  00046	83 65 60 00	 and	 DWORD PTR _i$52[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  0004a	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  0004d	89 45 44	 mov	 DWORD PTR __My_data$46[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00050	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  00054	8b 4d 44	 mov	 ecx, DWORD PTR __My_data$46[ebp]
  00057	03 01		 add	 eax, DWORD PTR [ecx]
  00059	89 45 40	 mov	 DWORD PTR $T45[ebp], eax

; 1483 :         auto& _My_data = _Mypair._Myval2;

  0005c	8b 45 40	 mov	 eax, DWORD PTR $T45[ebp]
  0005f	89 45 54	 mov	 DWORD PTR __My_data$49[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00062	8b 45 54	 mov	 eax, DWORD PTR __My_data$49[ebp]
  00065	8b 4d 54	 mov	 ecx, DWORD PTR __My_data$49[ebp]
  00068	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006b	2b 01		 sub	 eax, DWORD PTR [ecx]
  0006d	99		 cdq
  0006e	6a 0c		 push	 12			; 0000000cH
  00070	59		 pop	 ecx
  00071	f7 f9		 idiv	 ecx
  00073	89 45 3c	 mov	 DWORD PTR $T44[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 176  : 		for (DWORD i = 0, j = sShape.m_vContours[k].size() - 1; i < sShape.m_vContours[k].size(); j = i++)

  00076	8b 45 3c	 mov	 eax, DWORD PTR $T44[ebp]
  00079	48		 dec	 eax
  0007a	89 45 5c	 mov	 DWORD PTR _j$51[ebp], eax
  0007d	eb 0d		 jmp	 SHORT $LN7@PointInSha
$LN5@PointInSha:
  0007f	8b 45 60	 mov	 eax, DWORD PTR _i$52[ebp]
  00082	89 45 5c	 mov	 DWORD PTR _j$51[ebp], eax
  00085	8b 45 60	 mov	 eax, DWORD PTR _i$52[ebp]
  00088	40		 inc	 eax
  00089	89 45 60	 mov	 DWORD PTR _i$52[ebp], eax
$LN7@PointInSha:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  0008c	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  0008f	89 45 38	 mov	 DWORD PTR __My_data$43[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00092	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  00096	8b 4d 38	 mov	 ecx, DWORD PTR __My_data$43[ebp]
  00099	03 01		 add	 eax, DWORD PTR [ecx]
  0009b	89 45 34	 mov	 DWORD PTR $T42[ebp], eax

; 1483 :         auto& _My_data = _Mypair._Myval2;

  0009e	8b 45 34	 mov	 eax, DWORD PTR $T42[ebp]
  000a1	89 45 50	 mov	 DWORD PTR __My_data$48[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000a4	8b 45 50	 mov	 eax, DWORD PTR __My_data$48[ebp]
  000a7	8b 4d 50	 mov	 ecx, DWORD PTR __My_data$48[ebp]
  000aa	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ad	2b 01		 sub	 eax, DWORD PTR [ecx]
  000af	99		 cdq
  000b0	6a 0c		 push	 12			; 0000000cH
  000b2	59		 pop	 ecx
  000b3	f7 f9		 idiv	 ecx
  000b5	89 45 30	 mov	 DWORD PTR $T41[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 176  : 		for (DWORD i = 0, j = sShape.m_vContours[k].size() - 1; i < sShape.m_vContours[k].size(); j = i++)

  000b8	8b 45 60	 mov	 eax, DWORD PTR _i$52[ebp]
  000bb	3b 45 30	 cmp	 eax, DWORD PTR $T41[ebp]
  000be	0f 83 44 02 00
	00		 jae	 $LN6@PointInSha
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  000c4	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  000c7	89 45 2c	 mov	 DWORD PTR __My_data$40[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  000ca	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  000ce	8b 4d 2c	 mov	 ecx, DWORD PTR __My_data$40[ebp]
  000d1	03 01		 add	 eax, DWORD PTR [ecx]
  000d3	89 45 28	 mov	 DWORD PTR $T39[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  000d6	8b 45 28	 mov	 eax, DWORD PTR $T39[ebp]
  000d9	89 45 24	 mov	 DWORD PTR __My_data$38[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  000dc	6b 45 60 0c	 imul	 eax, DWORD PTR _i$52[ebp], 12
  000e0	8b 4d 24	 mov	 ecx, DWORD PTR __My_data$38[ebp]
  000e3	03 01		 add	 eax, DWORD PTR [ecx]
  000e5	89 45 20	 mov	 DWORD PTR $T37[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h

; 32   : 		float&      operator[](int i) { return m_afData[i]; }     

  000e8	33 c0		 xor	 eax, eax
  000ea	40		 inc	 eax
  000eb	c1 e0 02	 shl	 eax, 2
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 179  : 				 ((sShape.m_vContours[k][j][1] <= fY) && (fY < sShape.m_vContours[k][i][1]))) &&

  000ee	8b 4d 20	 mov	 ecx, DWORD PTR $T37[ebp]
  000f1	f3 0f 10 45 7c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  000f6	0f 2f 04 01	 comiss	 xmm0, DWORD PTR [ecx+eax]
  000fa	72 38		 jb	 SHORT $LN10@PointInSha
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  000fc	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  000ff	89 45 1c	 mov	 DWORD PTR __My_data$36[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00102	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  00106	8b 4d 1c	 mov	 ecx, DWORD PTR __My_data$36[ebp]
  00109	03 01		 add	 eax, DWORD PTR [ecx]
  0010b	89 45 18	 mov	 DWORD PTR $T35[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  0010e	8b 45 18	 mov	 eax, DWORD PTR $T35[ebp]
  00111	89 45 14	 mov	 DWORD PTR __My_data$34[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00114	6b 45 5c 0c	 imul	 eax, DWORD PTR _j$51[ebp], 12
  00118	8b 4d 14	 mov	 ecx, DWORD PTR __My_data$34[ebp]
  0011b	03 01		 add	 eax, DWORD PTR [ecx]
  0011d	89 45 10	 mov	 DWORD PTR $T33[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h

; 32   : 		float&      operator[](int i) { return m_afData[i]; }     

  00120	33 c0		 xor	 eax, eax
  00122	40		 inc	 eax
  00123	c1 e0 02	 shl	 eax, 2
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 179  : 				 ((sShape.m_vContours[k][j][1] <= fY) && (fY < sShape.m_vContours[k][i][1]))) &&

  00126	8b 4d 10	 mov	 ecx, DWORD PTR $T33[ebp]
  00129	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  0012e	0f 2f 45 7c	 comiss	 xmm0, DWORD PTR _fY$[ebp]
  00132	77 78		 ja	 SHORT $LN9@PointInSha
$LN10@PointInSha:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00134	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  00137	89 45 0c	 mov	 DWORD PTR __My_data$32[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  0013a	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  0013e	8b 4d 0c	 mov	 ecx, DWORD PTR __My_data$32[ebp]
  00141	03 01		 add	 eax, DWORD PTR [ecx]
  00143	89 45 08	 mov	 DWORD PTR $T31[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00146	8b 45 08	 mov	 eax, DWORD PTR $T31[ebp]
  00149	89 45 04	 mov	 DWORD PTR __My_data$30[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  0014c	6b 45 5c 0c	 imul	 eax, DWORD PTR _j$51[ebp], 12
  00150	8b 4d 04	 mov	 ecx, DWORD PTR __My_data$30[ebp]
  00153	03 01		 add	 eax, DWORD PTR [ecx]
  00155	89 45 00	 mov	 DWORD PTR $T29[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h

; 32   : 		float&      operator[](int i) { return m_afData[i]; }     

  00158	33 c0		 xor	 eax, eax
  0015a	40		 inc	 eax
  0015b	c1 e0 02	 shl	 eax, 2
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 179  : 				 ((sShape.m_vContours[k][j][1] <= fY) && (fY < sShape.m_vContours[k][i][1]))) &&

  0015e	8b 4d 00	 mov	 ecx, DWORD PTR $T29[ebp]
  00161	f3 0f 10 45 7c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  00166	0f 2f 04 01	 comiss	 xmm0, DWORD PTR [ecx+eax]
  0016a	0f 82 93 01 00
	00		 jb	 $LN8@PointInSha
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00170	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  00173	89 45 fc	 mov	 DWORD PTR __My_data$28[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00176	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  0017a	8b 4d fc	 mov	 ecx, DWORD PTR __My_data$28[ebp]
  0017d	03 01		 add	 eax, DWORD PTR [ecx]
  0017f	89 45 f8	 mov	 DWORD PTR $T27[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00182	8b 45 f8	 mov	 eax, DWORD PTR $T27[ebp]
  00185	89 45 f4	 mov	 DWORD PTR __My_data$26[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00188	6b 45 60 0c	 imul	 eax, DWORD PTR _i$52[ebp], 12
  0018c	8b 4d f4	 mov	 ecx, DWORD PTR __My_data$26[ebp]
  0018f	03 01		 add	 eax, DWORD PTR [ecx]
  00191	89 45 f0	 mov	 DWORD PTR $T25[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h

; 32   : 		float&      operator[](int i) { return m_afData[i]; }     

  00194	33 c0		 xor	 eax, eax
  00196	40		 inc	 eax
  00197	c1 e0 02	 shl	 eax, 2
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 179  : 				 ((sShape.m_vContours[k][j][1] <= fY) && (fY < sShape.m_vContours[k][i][1]))) &&

  0019a	8b 4d f0	 mov	 ecx, DWORD PTR $T25[ebp]
  0019d	f3 0f 10 04 01	 movss	 xmm0, DWORD PTR [ecx+eax]
  001a2	0f 2f 45 7c	 comiss	 xmm0, DWORD PTR _fY$[ebp]
  001a6	0f 86 57 01 00
	00		 jbe	 $LN8@PointInSha
$LN9@PointInSha:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  001ac	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  001af	89 45 ec	 mov	 DWORD PTR __My_data$24[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  001b2	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  001b6	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$24[ebp]
  001b9	03 01		 add	 eax, DWORD PTR [ecx]
  001bb	89 45 e8	 mov	 DWORD PTR $T23[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  001be	8b 45 e8	 mov	 eax, DWORD PTR $T23[ebp]
  001c1	89 45 e4	 mov	 DWORD PTR __My_data$22[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  001c4	6b 45 60 0c	 imul	 eax, DWORD PTR _i$52[ebp], 12
  001c8	8b 4d e4	 mov	 ecx, DWORD PTR __My_data$22[ebp]
  001cb	03 01		 add	 eax, DWORD PTR [ecx]
  001cd	89 45 a4	 mov	 DWORD PTR $T6[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  001d0	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  001d3	89 45 e0	 mov	 DWORD PTR __My_data$21[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  001d6	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  001da	8b 4d e0	 mov	 ecx, DWORD PTR __My_data$21[ebp]
  001dd	03 01		 add	 eax, DWORD PTR [ecx]
  001df	89 45 dc	 mov	 DWORD PTR $T20[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  001e2	8b 45 dc	 mov	 eax, DWORD PTR $T20[ebp]
  001e5	89 45 d8	 mov	 DWORD PTR __My_data$19[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  001e8	6b 45 60 0c	 imul	 eax, DWORD PTR _i$52[ebp], 12
  001ec	8b 4d d8	 mov	 ecx, DWORD PTR __My_data$19[ebp]
  001ef	03 01		 add	 eax, DWORD PTR [ecx]
  001f1	89 45 a0	 mov	 DWORD PTR $T5[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  001f4	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  001f7	89 45 d4	 mov	 DWORD PTR __My_data$18[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  001fa	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  001fe	8b 4d d4	 mov	 ecx, DWORD PTR __My_data$18[ebp]
  00201	03 01		 add	 eax, DWORD PTR [ecx]
  00203	89 45 d0	 mov	 DWORD PTR $T17[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00206	8b 45 d0	 mov	 eax, DWORD PTR $T17[ebp]
  00209	89 45 cc	 mov	 DWORD PTR __My_data$16[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  0020c	6b 45 60 0c	 imul	 eax, DWORD PTR _i$52[ebp], 12
  00210	8b 4d cc	 mov	 ecx, DWORD PTR __My_data$16[ebp]
  00213	03 01		 add	 eax, DWORD PTR [ecx]
  00215	89 45 9c	 mov	 DWORD PTR $T4[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00218	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  0021b	89 45 c8	 mov	 DWORD PTR __My_data$15[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  0021e	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  00222	8b 4d c8	 mov	 ecx, DWORD PTR __My_data$15[ebp]
  00225	03 01		 add	 eax, DWORD PTR [ecx]
  00227	89 45 c4	 mov	 DWORD PTR $T14[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  0022a	8b 45 c4	 mov	 eax, DWORD PTR $T14[ebp]
  0022d	89 45 c0	 mov	 DWORD PTR __My_data$13[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00230	6b 45 5c 0c	 imul	 eax, DWORD PTR _j$51[ebp], 12
  00234	8b 4d c0	 mov	 ecx, DWORD PTR __My_data$13[ebp]
  00237	03 01		 add	 eax, DWORD PTR [ecx]
  00239	89 45 98	 mov	 DWORD PTR $T3[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  0023c	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  0023f	89 45 bc	 mov	 DWORD PTR __My_data$12[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00242	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  00246	8b 4d bc	 mov	 ecx, DWORD PTR __My_data$12[ebp]
  00249	03 01		 add	 eax, DWORD PTR [ecx]
  0024b	89 45 b8	 mov	 DWORD PTR $T11[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  0024e	8b 45 b8	 mov	 eax, DWORD PTR $T11[ebp]
  00251	89 45 b4	 mov	 DWORD PTR __My_data$10[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00254	6b 45 60 0c	 imul	 eax, DWORD PTR _i$52[ebp], 12
  00258	8b 4d b4	 mov	 ecx, DWORD PTR __My_data$10[ebp]
  0025b	03 01		 add	 eax, DWORD PTR [ecx]
  0025d	89 45 94	 mov	 DWORD PTR $T2[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00260	8b 45 74	 mov	 eax, DWORD PTR _sShape$[ebp]
  00263	89 45 b0	 mov	 DWORD PTR __My_data$9[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00266	6b 45 64 0c	 imul	 eax, DWORD PTR _k$53[ebp], 12
  0026a	8b 4d b0	 mov	 ecx, DWORD PTR __My_data$9[ebp]
  0026d	03 01		 add	 eax, DWORD PTR [ecx]
  0026f	89 45 ac	 mov	 DWORD PTR $T8[ebp], eax

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00272	8b 45 ac	 mov	 eax, DWORD PTR $T8[ebp]
  00275	89 45 a8	 mov	 DWORD PTR __My_data$7[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00278	6b 45 60 0c	 imul	 eax, DWORD PTR _i$52[ebp], 12
  0027c	8b 4d a8	 mov	 ecx, DWORD PTR __My_data$7[ebp]
  0027f	03 01		 add	 eax, DWORD PTR [ecx]
  00281	89 45 90	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h

; 32   : 		float&      operator[](int i) { return m_afData[i]; }     

  00284	33 c0		 xor	 eax, eax
  00286	c1 e0 02	 shl	 eax, 2
  00289	33 c9		 xor	 ecx, ecx
  0028b	c1 e1 02	 shl	 ecx, 2
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 179  : 				 ((sShape.m_vContours[k][j][1] <= fY) && (fY < sShape.m_vContours[k][i][1]))) &&

  0028e	8b 55 a4	 mov	 edx, DWORD PTR $T6[ebp]
  00291	8b 75 a0	 mov	 esi, DWORD PTR $T5[ebp]
  00294	f3 0f 10 04 02	 movss	 xmm0, DWORD PTR [edx+eax]
  00299	f3 0f 5c 04 0e	 subss	 xmm0, DWORD PTR [esi+ecx]
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h

; 32   : 		float&      operator[](int i) { return m_afData[i]; }     

  0029e	33 c0		 xor	 eax, eax
  002a0	40		 inc	 eax
  002a1	c1 e0 02	 shl	 eax, 2
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 179  : 				 ((sShape.m_vContours[k][j][1] <= fY) && (fY < sShape.m_vContours[k][i][1]))) &&

  002a4	8b 4d 9c	 mov	 ecx, DWORD PTR $T4[ebp]
  002a7	f3 0f 10 4d 7c	 movss	 xmm1, DWORD PTR _fY$[ebp]
  002ac	f3 0f 5c 0c 01	 subss	 xmm1, DWORD PTR [ecx+eax]
  002b1	f3 0f 59 c1	 mulss	 xmm0, xmm1
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h

; 32   : 		float&      operator[](int i) { return m_afData[i]; }     

  002b5	33 c0		 xor	 eax, eax
  002b7	40		 inc	 eax
  002b8	c1 e0 02	 shl	 eax, 2
  002bb	33 c9		 xor	 ecx, ecx
  002bd	41		 inc	 ecx
  002be	c1 e1 02	 shl	 ecx, 2
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 179  : 				 ((sShape.m_vContours[k][j][1] <= fY) && (fY < sShape.m_vContours[k][i][1]))) &&

  002c1	8b 55 98	 mov	 edx, DWORD PTR $T3[ebp]
  002c4	8b 75 94	 mov	 esi, DWORD PTR $T2[ebp]
  002c7	f3 0f 10 0c 02	 movss	 xmm1, DWORD PTR [edx+eax]
  002cc	f3 0f 5c 0c 0e	 subss	 xmm1, DWORD PTR [esi+ecx]
  002d1	f3 0f 5e c1	 divss	 xmm0, xmm1
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.h

; 32   : 		float&      operator[](int i) { return m_afData[i]; }     

  002d5	33 c0		 xor	 eax, eax
  002d7	c1 e0 02	 shl	 eax, 2
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 179  : 				 ((sShape.m_vContours[k][j][1] <= fY) && (fY < sShape.m_vContours[k][i][1]))) &&

  002da	8b 4d 90	 mov	 ecx, DWORD PTR $T1[ebp]
  002dd	f3 0f 58 04 01	 addss	 xmm0, DWORD PTR [ecx+eax]
  002e2	0f 2f 45 78	 comiss	 xmm0, DWORD PTR _fX$[ebp]
  002e6	76 1b		 jbe	 SHORT $LN8@PointInSha

; 180  : 				  (fX < (sShape.m_vContours[k][i][0] - sShape.m_vContours[k][i][0]) * (fY - sShape.m_vContours[k][i][1]) / (sShape.m_vContours[k][j][1] - sShape.m_vContours[k][i][1]) + sShape.m_vContours[k][i][0]))
; 181  : 			{
; 182  : 				bInside = !bInside;

  002e8	0f b6 45 6b	 movzx	 eax, BYTE PTR _bInside$[ebp]
  002ec	85 c0		 test	 eax, eax
  002ee	75 09		 jne	 SHORT $LN12@PointInSha
  002f0	c7 45 4c 01 00
	00 00		 mov	 DWORD PTR tv229[ebp], 1
  002f7	eb 04		 jmp	 SHORT $LN13@PointInSha
$LN12@PointInSha:
  002f9	83 65 4c 00	 and	 DWORD PTR tv229[ebp], 0
$LN13@PointInSha:
  002fd	8a 45 4c	 mov	 al, BYTE PTR tv229[ebp]
  00300	88 45 6b	 mov	 BYTE PTR _bInside$[ebp], al
$LN8@PointInSha:

; 183  : 			}
; 184  : 		}

  00303	e9 77 fd ff ff	 jmp	 $LN5@PointInSha
$LN6@PointInSha:

; 185  : 	}

  00308	e9 0c fd ff ff	 jmp	 $LN2@PointInSha
$LN3@PointInSha:

; 186  : 
; 187  : 	return bInside;

  0030d	8a 45 6b	 mov	 al, BYTE PTR _bInside$[ebp]

; 188  : }

  00310	5e		 pop	 esi
  00311	83 c5 6c	 add	 ebp, 108		; 0000006cH
  00314	c9		 leave
  00315	c2 0c 00	 ret	 12			; 0000000cH
?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ENDP ; CBoundaryShapeManager::PointInShape
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z
_TEXT	SEGMENT
__My_data$1 = -36					; size = 4
_nIndex$2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__My_data$5 = -20					; size = 4
__My_data$6 = -16					; size = 4
_this$ = -12						; size = 4
_sShape$7 = -8						; size = 4
_bSuccess$ = -1						; size = 1
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z PROC	; CBoundaryShapeManager::RandomPoint, COMDAT
; _this$ = ecx

; 195  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 196  : 	bool bSuccess = false;

  00009	c6 45 ff 00	 mov	 BYTE PTR _bSuccess$[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  0000d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 c0 04	 add	 eax, 4
  00013	89 45 f0	 mov	 DWORD PTR __My_data$6[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00016	8b 45 f0	 mov	 eax, DWORD PTR __My_data$6[ebp]
  00019	8b 4d f0	 mov	 ecx, DWORD PTR __My_data$6[ebp]
  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001f	2b 01		 sub	 eax, DWORD PTR [ecx]
  00021	99		 cdq
  00022	6a 24		 push	 36			; 00000024H
  00024	59		 pop	 ecx
  00025	f7 f9		 idiv	 ecx
  00027	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 198  : 	if (m_vBoundaries.size() > 0)

  0002a	83 7d e8 00	 cmp	 DWORD PTR $T4[ebp], 0
  0002e	0f 86 d7 00 00
	00		 jbe	 $LN2@RandomPoin
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  00034	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 c0 04	 add	 eax, 4
  0003a	89 45 ec	 mov	 DWORD PTR __My_data$5[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0003d	8b 45 ec	 mov	 eax, DWORD PTR __My_data$5[ebp]
  00040	8b 4d ec	 mov	 ecx, DWORD PTR __My_data$5[ebp]
  00043	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00046	2b 01		 sub	 eax, DWORD PTR [ecx]
  00048	99		 cdq
  00049	6a 24		 push	 36			; 00000024H
  0004b	59		 pop	 ecx
  0004c	f7 f9		 idiv	 ecx
  0004e	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 201  : 		int nIndex = random_range(0, m_vBoundaries.size() - 1);

  00051	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00054	48		 dec	 eax
  00055	50		 push	 eax
  00056	6a 00		 push	 0
  00058	e8 00 00 00 00	 call	 ?random_range@@YAJJJ@Z	; random_range
  0005d	59		 pop	 ecx
  0005e	59		 pop	 ecx
  0005f	89 45 e0	 mov	 DWORD PTR _nIndex$2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00062	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00065	83 c0 04	 add	 eax, 4
  00068	89 45 dc	 mov	 DWORD PTR __My_data$1[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  0006b	6b 45 e0 24	 imul	 eax, DWORD PTR _nIndex$2[ebp], 36
  0006f	8b 4d dc	 mov	 ecx, DWORD PTR __My_data$1[ebp]
  00072	03 01		 add	 eax, DWORD PTR [ecx]
  00074	89 45 f8	 mov	 DWORD PTR _sShape$7[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 205  : 		fX = frandom(sShape.m_afMin[0], sShape.m_afMax[0]);

  00077	6a 04		 push	 4
  00079	58		 pop	 eax
  0007a	6b c0 00	 imul	 eax, eax, 0
  0007d	8b 4d f8	 mov	 ecx, DWORD PTR _sShape$7[ebp]
  00080	51		 push	 ecx
  00081	f3 0f 10 44 01
	18		 movss	 xmm0, DWORD PTR [ecx+eax+24]
  00087	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008c	6a 04		 push	 4
  0008e	58		 pop	 eax
  0008f	6b c0 00	 imul	 eax, eax, 0
  00092	8b 4d f8	 mov	 ecx, DWORD PTR _sShape$7[ebp]
  00095	51		 push	 ecx
  00096	f3 0f 10 44 01
	0c		 movss	 xmm0, DWORD PTR [ecx+eax+12]
  0009c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a1	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000a6	59		 pop	 ecx
  000a7	59		 pop	 ecx
  000a8	8b 45 08	 mov	 eax, DWORD PTR _fX$[ebp]
  000ab	d9 18		 fstp	 DWORD PTR [eax]

; 206  : 		fY = frandom(sShape.m_afMin[1], sShape.m_afMax[1]);

  000ad	6a 04		 push	 4
  000af	58		 pop	 eax
  000b0	c1 e0 00	 shl	 eax, 0
  000b3	8b 4d f8	 mov	 ecx, DWORD PTR _sShape$7[ebp]
  000b6	51		 push	 ecx
  000b7	f3 0f 10 44 01
	18		 movss	 xmm0, DWORD PTR [ecx+eax+24]
  000bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c2	6a 04		 push	 4
  000c4	58		 pop	 eax
  000c5	c1 e0 00	 shl	 eax, 0
  000c8	8b 4d f8	 mov	 ecx, DWORD PTR _sShape$7[ebp]
  000cb	51		 push	 ecx
  000cc	f3 0f 10 44 01
	0c		 movss	 xmm0, DWORD PTR [ecx+eax+12]
  000d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d7	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  000dc	59		 pop	 ecx
  000dd	59		 pop	 ecx
  000de	8b 45 0c	 mov	 eax, DWORD PTR _fY$[ebp]
  000e1	d9 18		 fstp	 DWORD PTR [eax]

; 207  : 
; 208  : 		// try it
; 209  : 		bSuccess = PointInShape(sShape, fX, fY);

  000e3	8b 45 0c	 mov	 eax, DWORD PTR _fY$[ebp]
  000e6	51		 push	 ecx
  000e7	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f0	8b 45 08	 mov	 eax, DWORD PTR _fX$[ebp]
  000f3	51		 push	 ecx
  000f4	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fd	ff 75 f8	 push	 DWORD PTR _sShape$7[ebp]
  00100	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00103	e8 00 00 00 00	 call	 ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape
  00108	88 45 ff	 mov	 BYTE PTR _bSuccess$[ebp], al
$LN2@RandomPoin:

; 210  : 	}
; 211  : 
; 212  : 	return bSuccess;

  0010b	8a 45 ff	 mov	 al, BYTE PTR _bSuccess$[ebp]

; 213  : }

  0010e	c9		 leave
  0010f	c2 08 00	 ret	 8
?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z ENDP	; CBoundaryShapeManager::RandomPoint
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?PointInside@CBoundaryShapeManager@@QAE_NMM@Z
_TEXT	SEGMENT
$T1 = -28						; size = 4
__My_data$2 = -24					; size = 4
$T3 = -20						; size = 4
__My_data$4 = -16					; size = 4
_this$ = -12						; size = 4
_i$5 = -8						; size = 4
_bInside$ = -1						; size = 1
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
?PointInside@CBoundaryShapeManager@@QAE_NMM@Z PROC	; CBoundaryShapeManager::PointInside, COMDAT
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 158  : 	bool bInside = false;

  00009	c6 45 ff 00	 mov	 BYTE PTR _bInside$[ebp], 0

; 160  : 	for (DWORD i = 0; i < m_vBoundaries.size() && !bInside; ++i)

  0000d	83 65 f8 00	 and	 DWORD PTR _i$5[ebp], 0
  00011	eb 07		 jmp	 SHORT $LN4@PointInsid
$LN2@PointInsid:
  00013	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  00016	40		 inc	 eax
  00017	89 45 f8	 mov	 DWORD PTR _i$5[ebp], eax
$LN4@PointInsid:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1483 :         auto& _My_data = _Mypair._Myval2;

  0001a	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c0 04	 add	 eax, 4
  00020	89 45 f0	 mov	 DWORD PTR __My_data$4[ebp], eax

; 1484 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00023	8b 45 f0	 mov	 eax, DWORD PTR __My_data$4[ebp]
  00026	8b 4d f0	 mov	 ecx, DWORD PTR __My_data$4[ebp]
  00029	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002c	2b 01		 sub	 eax, DWORD PTR [ecx]
  0002e	99		 cdq
  0002f	6a 24		 push	 36			; 00000024H
  00031	59		 pop	 ecx
  00032	f7 f9		 idiv	 ecx
  00034	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 160  : 	for (DWORD i = 0; i < m_vBoundaries.size() && !bInside; ++i)

  00037	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  0003a	3b 45 ec	 cmp	 eax, DWORD PTR $T3[ebp]
  0003d	73 43		 jae	 SHORT $LN3@PointInsid
  0003f	0f b6 45 ff	 movzx	 eax, BYTE PTR _bInside$[ebp]
  00043	85 c0		 test	 eax, eax
  00045	75 3b		 jne	 SHORT $LN3@PointInsid
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1498 :         auto& _My_data = _Mypair._Myval2;

  00047	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	83 c0 04	 add	 eax, 4
  0004d	89 45 e8	 mov	 DWORD PTR __My_data$2[ebp], eax

; 1499 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1500 :         _STL_VERIFY(
; 1501 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1502 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1503 : 
; 1504 :         return _My_data._Myfirst[_Pos];

  00050	6b 45 f8 24	 imul	 eax, DWORD PTR _i$5[ebp], 36
  00054	8b 4d e8	 mov	 ecx, DWORD PTR __My_data$2[ebp]
  00057	03 01		 add	 eax, DWORD PTR [ecx]
  00059	89 45 e4	 mov	 DWORD PTR $T1[ebp], eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 161  : 		bInside = PointInShape(m_vBoundaries[i], fX, fY);

  0005c	51		 push	 ecx
  0005d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  00062	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00067	51		 push	 ecx
  00068	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fX$[ebp]
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	ff 75 e4	 push	 DWORD PTR $T1[ebp]
  00075	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape
  0007d	88 45 ff	 mov	 BYTE PTR _bInside$[ebp], al
  00080	eb 91		 jmp	 SHORT $LN2@PointInsid
$LN3@PointInsid:

; 162  : 
; 163  : 	return bInside;

  00082	8a 45 ff	 mov	 al, BYTE PTR _bInside$[ebp]

; 164  : }

  00085	c9		 leave
  00086	c2 08 00	 ret	 8
?PointInside@CBoundaryShapeManager@@QAE_NMM@Z ENDP	; CBoundaryShapeManager::PointInside
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_vPoints$2 = -152					; size = 12
$T3 = -140						; size = 4
_nNumPoints$4 = -136					; size = 4
$T5 = -132						; size = 4
$T6 = -128						; size = 4
$T7 = -124						; size = 4
$T8 = -120						; size = 4
$T9 = -116						; size = 4
$T10 = -112						; size = 1
$T11 = -108						; size = 4
tv217 = -104						; size = 4
tv215 = -100						; size = 4
tv212 = -96						; size = 4
tv338 = -92						; size = 4
$T12 = -88						; size = 4
$T13 = -84						; size = 4
$T14 = -80						; size = 4
$T15 = -76						; size = 4
_this$ = -72						; size = 4
_nNumContours$16 = -68					; size = 4
_this$17 = -64						; size = 4
_this$ = -60						; size = 4
_nNumBoundaries$18 = -56				; size = 4
_this$ = -52						; size = 4
$T19 = -48						; size = 4
_i$20 = -44						; size = 4
_k$21 = -40						; size = 4
_j$22 = -36						; size = 4
_pFile$23 = -32						; size = 4
_this$ = -28						; size = 4
_l$24 = -24						; size = 4
_bSuccess$ = -17					; size = 1
__$EHRec$ = -16						; size = 16
$T25 = 0						; size = 24
$T26 = 24						; size = 24
$T27 = 48						; size = 24
_sShape$28 = 72						; size = 36
_sPoint$29 = 108					; size = 12
__$ArrayPad$ = 120					; size = 4
_pszFilename$ = 132					; size = 4
?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z PROC	; CBoundaryShapeManager::LoadBsfFile, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8d 6c 24 84	 lea	 ebp, DWORD PTR [esp-124]
  00005	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	51		 push	 ecx
  00017	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 78	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	53		 push	 ebx
  00028	56		 push	 esi
  00029	57		 push	 edi
  0002a	50		 push	 eax
  0002b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0002e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00034	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00037	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 52   : 	bool bSuccess = true;

  0003a	c6 45 ef 01	 mov	 BYTE PTR _bSuccess$[ebp], 1

; 53   : 	try

  0003e	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+12], 0

; 54   : 	{
; 55   : 		FILE* pFile = fopen(pszFilename, "rb");

  00042	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00047	ff b5 84 00 00
	00		 push	 DWORD PTR _pszFilename$[ebp]
  0004d	e8 00 00 00 00	 call	 _fopen
  00052	59		 pop	 ecx
  00053	59		 pop	 ecx
  00054	89 45 e0	 mov	 DWORD PTR _pFile$23[ebp], eax

; 56   : 		if (pFile)

  00057	83 7d e0 00	 cmp	 DWORD PTR _pFile$23[ebp], 0
  0005b	0f 84 c2 02 00
	00		 je	 $LN15@LoadBsfFil

; 57   : 		{
; 58   : 			// number of boundary shapes
; 59   : 			unsigned int nNumBoundaries;
; 60   : 			if (fread(&nNumBoundaries, sizeof(unsigned int), 1, pFile) == 1)

  00061	ff 75 e0	 push	 DWORD PTR _pFile$23[ebp]
  00064	6a 01		 push	 1
  00066	6a 04		 push	 4
  00068	8d 45 c8	 lea	 eax, DWORD PTR _nNumBoundaries$18[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 _fread
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	83 f8 01	 cmp	 eax, 1
  00077	0f 85 6d 02 00
	00		 jne	 $LN17@LoadBsfFil

; 61   : 			{
; 62   : 				for (unsigned int i = 0; i < nNumBoundaries && bSuccess; ++i)

  0007d	83 65 d4 00	 and	 DWORD PTR _i$20[ebp], 0
  00081	eb 07		 jmp	 SHORT $LN4@LoadBsfFil
$LN2@LoadBsfFil:
  00083	8b 45 d4	 mov	 eax, DWORD PTR _i$20[ebp]
  00086	40		 inc	 eax
  00087	89 45 d4	 mov	 DWORD PTR _i$20[ebp], eax
$LN4@LoadBsfFil:
  0008a	8b 45 d4	 mov	 eax, DWORD PTR _i$20[ebp]
  0008d	3b 45 c8	 cmp	 eax, DWORD PTR _nNumBoundaries$18[ebp]
  00090	0f 83 52 02 00
	00		 jae	 $LN3@LoadBsfFil
  00096	0f b6 45 ef	 movzx	 eax, BYTE PTR _bSuccess$[ebp]
  0009a	85 c0		 test	 eax, eax
  0009c	0f 84 46 02 00
	00		 je	 $LN3@LoadBsfFil
  000a2	8d 45 48	 lea	 eax, DWORD PTR _sShape$28[ebp]
  000a5	89 45 c4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  000a8	8b 45 c4	 mov	 eax, DWORD PTR _this$[ebp]
  000ab	89 45 c0	 mov	 DWORD PTR _this$17[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  000ae	8b 4d c0	 mov	 ecx, DWORD PTR _this$17[ebp]
  000b1	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::vector<SPoint,std::allocator<SPoint> > > >::_Vector_val<std::_Simple_types<std::vector<SPoint,std::allocator<SPoint> > > >
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 64   : 					SBoundaryShape sShape;

  000b6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 65   : 					
; 66   : 					// number of contours for this shape
; 67   : 					unsigned int nNumContours;
; 68   : 					if (fread(&nNumContours, sizeof(unsigned int), 1, pFile) == 1)

  000ba	ff 75 e0	 push	 DWORD PTR _pFile$23[ebp]
  000bd	6a 01		 push	 1
  000bf	6a 04		 push	 4
  000c1	8d 45 bc	 lea	 eax, DWORD PTR _nNumContours$16[ebp]
  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 _fread
  000ca	83 c4 10	 add	 esp, 16			; 00000010H
  000cd	83 f8 01	 cmp	 eax, 1
  000d0	0f 85 d6 01 00
	00		 jne	 $LN19@LoadBsfFil

; 69   : 					{
; 70   : 						for (unsigned int j = 0; j < nNumContours && bSuccess; ++j)

  000d6	83 65 dc 00	 and	 DWORD PTR _j$22[ebp], 0
  000da	eb 07		 jmp	 SHORT $LN7@LoadBsfFil
$LN5@LoadBsfFil:
  000dc	8b 45 dc	 mov	 eax, DWORD PTR _j$22[ebp]
  000df	40		 inc	 eax
  000e0	89 45 dc	 mov	 DWORD PTR _j$22[ebp], eax
$LN7@LoadBsfFil:
  000e3	8b 45 dc	 mov	 eax, DWORD PTR _j$22[ebp]
  000e6	3b 45 bc	 cmp	 eax, DWORD PTR _nNumContours$16[ebp]
  000e9	0f 83 ac 01 00
	00		 jae	 $LN6@LoadBsfFil
  000ef	0f b6 45 ef	 movzx	 eax, BYTE PTR _bSuccess$[ebp]
  000f3	85 c0		 test	 eax, eax
  000f5	0f 84 a0 01 00
	00		 je	 $LN6@LoadBsfFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  000fb	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _vPoints$2[ebp]
  00101	89 45 b8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00104	8b 4d b8	 mov	 ecx, DWORD PTR _this$[ebp]
  00107	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@USPoint@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SPoint> >::_Vector_val<std::_Simple_types<SPoint> >
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 73   : 							vector<SPoint> vPoints;

  0010c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 74   : 							unsigned int nNumPoints;
; 75   : 							if (fread(&nNumPoints, sizeof(unsigned int), 1, pFile) == 1)

  00110	ff 75 e0	 push	 DWORD PTR _pFile$23[ebp]
  00113	6a 01		 push	 1
  00115	6a 04		 push	 4
  00117	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _nNumPoints$4[ebp]
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _fread
  00123	83 c4 10	 add	 esp, 16			; 00000010H
  00126	83 f8 01	 cmp	 eax, 1
  00129	0f 85 27 01 00
	00		 jne	 $LN21@LoadBsfFil

; 76   : 							{
; 77   : 								// read the points
; 78   : 								for (unsigned int k = 0; k < nNumPoints && bSuccess; ++k)

  0012f	83 65 d8 00	 and	 DWORD PTR _k$21[ebp], 0
  00133	eb 07		 jmp	 SHORT $LN10@LoadBsfFil
$LN8@LoadBsfFil:
  00135	8b 45 d8	 mov	 eax, DWORD PTR _k$21[ebp]
  00138	40		 inc	 eax
  00139	89 45 d8	 mov	 DWORD PTR _k$21[ebp], eax
$LN10@LoadBsfFil:
  0013c	8b 45 d8	 mov	 eax, DWORD PTR _k$21[ebp]
  0013f	3b 85 78 ff ff
	ff		 cmp	 eax, DWORD PTR _nNumPoints$4[ebp]
  00145	0f 83 fa 00 00
	00		 jae	 $LN9@LoadBsfFil
  0014b	0f b6 45 ef	 movzx	 eax, BYTE PTR _bSuccess$[ebp]
  0014f	85 c0		 test	 eax, eax
  00151	0f 84 ee 00 00
	00		 je	 $LN9@LoadBsfFil

; 79   : 								{
; 80   : 									SPoint sPoint;
; 81   : 
; 82   : 									if (fread(sPoint.m_afData, sizeof(float), 3, pFile) == 3)

  00157	ff 75 e0	 push	 DWORD PTR _pFile$23[ebp]
  0015a	6a 03		 push	 3
  0015c	6a 04		 push	 4
  0015e	8d 45 6c	 lea	 eax, DWORD PTR _sPoint$29[ebp]
  00161	50		 push	 eax
  00162	e8 00 00 00 00	 call	 _fread
  00167	83 c4 10	 add	 esp, 16			; 00000010H
  0016a	83 f8 03	 cmp	 eax, 3
  0016d	0f 85 9c 00 00
	00		 jne	 $LN23@LoadBsfFil
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  00173	8d 45 6c	 lea	 eax, DWORD PTR _sPoint$29[ebp]
  00176	50		 push	 eax
  00177	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _vPoints$2[ebp]
  0017d	e8 00 00 00 00	 call	 ??$emplace_back@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAEXABUSPoint@@@Z ; std::vector<SPoint,std::allocator<SPoint> >::emplace_back<SPoint const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 87   : 										if (j == 0 && k == 0)

  00182	83 7d dc 00	 cmp	 DWORD PTR _j$22[ebp], 0
  00186	75 2c		 jne	 SHORT $LN25@LoadBsfFil
  00188	83 7d d8 00	 cmp	 DWORD PTR _k$21[ebp], 0
  0018c	75 26		 jne	 SHORT $LN25@LoadBsfFil

; 88   : 										{
; 89   : 											// first point of this shape
; 90   : 											memcpy(sShape.m_afMin, sPoint.m_afData, 3 * sizeof(float));

  0018e	6a 0c		 push	 12			; 0000000cH
  00190	8d 45 6c	 lea	 eax, DWORD PTR _sPoint$29[ebp]
  00193	50		 push	 eax
  00194	8d 45 54	 lea	 eax, DWORD PTR _sShape$28[ebp+12]
  00197	50		 push	 eax
  00198	e8 00 00 00 00	 call	 _memcpy
  0019d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 91   : 											memcpy(sShape.m_afMax, sPoint.m_afData, 3 * sizeof(float));

  001a0	6a 0c		 push	 12			; 0000000cH
  001a2	8d 45 6c	 lea	 eax, DWORD PTR _sPoint$29[ebp]
  001a5	50		 push	 eax
  001a6	8d 45 60	 lea	 eax, DWORD PTR _sShape$28[ebp+24]
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 _memcpy
  001af	83 c4 0c	 add	 esp, 12			; 0000000cH

; 92   : 										}

  001b2	eb 59		 jmp	 SHORT $LN12@LoadBsfFil
$LN25@LoadBsfFil:

; 93   : 										else
; 94   : 										{
; 95   : 											// check extents
; 96   : 											for (int l = 0; l < 3; ++l)

  001b4	83 65 e8 00	 and	 DWORD PTR _l$24[ebp], 0
  001b8	eb 07		 jmp	 SHORT $LN13@LoadBsfFil
$LN11@LoadBsfFil:
  001ba	8b 45 e8	 mov	 eax, DWORD PTR _l$24[ebp]
  001bd	40		 inc	 eax
  001be	89 45 e8	 mov	 DWORD PTR _l$24[ebp], eax
$LN13@LoadBsfFil:
  001c1	83 7d e8 03	 cmp	 DWORD PTR _l$24[ebp], 3
  001c5	7d 46		 jge	 SHORT $LN12@LoadBsfFil

; 97   : 											{
; 98   : 												if (sPoint.m_afData[l] < sShape.m_afMin[l])

  001c7	8b 45 e8	 mov	 eax, DWORD PTR _l$24[ebp]
  001ca	8b 4d e8	 mov	 ecx, DWORD PTR _l$24[ebp]
  001cd	f3 0f 10 44 85
	54		 movss	 xmm0, DWORD PTR _sShape$28[ebp+eax*4+12]
  001d3	0f 2f 44 8d 6c	 comiss	 xmm0, DWORD PTR _sPoint$29[ebp+ecx*4]
  001d8	76 10		 jbe	 SHORT $LN27@LoadBsfFil

; 99   : 													sShape.m_afMin[l] = sPoint.m_afData[l];

  001da	8b 45 e8	 mov	 eax, DWORD PTR _l$24[ebp]
  001dd	8b 4d e8	 mov	 ecx, DWORD PTR _l$24[ebp]
  001e0	8b 4c 8d 6c	 mov	 ecx, DWORD PTR _sPoint$29[ebp+ecx*4]
  001e4	89 4c 85 54	 mov	 DWORD PTR _sShape$28[ebp+eax*4+12], ecx
  001e8	eb 21		 jmp	 SHORT $LN29@LoadBsfFil
$LN27@LoadBsfFil:

; 100  : 												else if (sPoint.m_afData[l] > sShape.m_afMax[l])

  001ea	8b 45 e8	 mov	 eax, DWORD PTR _l$24[ebp]
  001ed	8b 4d e8	 mov	 ecx, DWORD PTR _l$24[ebp]
  001f0	f3 0f 10 44 85
	6c		 movss	 xmm0, DWORD PTR _sPoint$29[ebp+eax*4]
  001f6	0f 2f 44 8d 60	 comiss	 xmm0, DWORD PTR _sShape$28[ebp+ecx*4+24]
  001fb	76 0e		 jbe	 SHORT $LN29@LoadBsfFil

; 101  : 													sShape.m_afMax[l] = sPoint.m_afData[l];

  001fd	8b 45 e8	 mov	 eax, DWORD PTR _l$24[ebp]
  00200	8b 4d e8	 mov	 ecx, DWORD PTR _l$24[ebp]
  00203	8b 4c 8d 6c	 mov	 ecx, DWORD PTR _sPoint$29[ebp+ecx*4]
  00207	89 4c 85 60	 mov	 DWORD PTR _sShape$28[ebp+eax*4+24], ecx
$LN29@LoadBsfFil:

; 102  : 											}

  0020b	eb ad		 jmp	 SHORT $LN11@LoadBsfFil
$LN12@LoadBsfFil:

; 103  : 										}
; 104  : 									}

  0020d	eb 31		 jmp	 SHORT $LN24@LoadBsfFil
$LN23@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@
  00214	e8 00 00 00 00	 call	 _strlen
  00219	59		 pop	 ecx
  0021a	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  00220	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00226	89 45 80	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00229	ff 75 80	 push	 DWORD PTR $T6[ebp]
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 107  : 										m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read point";

  00231	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00234	83 c1 10	 add	 ecx, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00237	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 108  : 										bSuccess = false;

  0023c	c6 45 ef 00	 mov	 BYTE PTR _bSuccess$[ebp], 0
$LN24@LoadBsfFil:

; 109  : 									}
; 110  : 
; 111  : 								}

  00240	e9 f0 fe ff ff	 jmp	 $LN8@LoadBsfFil
$LN9@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  00245	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _vPoints$2[ebp]
  0024b	50		 push	 eax
  0024c	8d 4d 48	 lea	 ecx, DWORD PTR _sShape$28[ebp]
  0024f	e8 00 00 00 00	 call	 ??$emplace_back@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAEXABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::emplace_back<std::vector<SPoint,std::allocator<SPoint> > const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 113  : 							}

  00254	eb 31		 jmp	 SHORT $LN22@LoadBsfFil
$LN21@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00256	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@
  0025b	e8 00 00 00 00	 call	 _strlen
  00260	59		 pop	 ecx
  00261	89 45 84	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  00264	8b 45 84	 mov	 eax, DWORD PTR $T7[ebp]
  00267	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0026d	ff b5 74 ff ff
	ff		 push	 DWORD PTR $T3[ebp]
  00273	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 116  : 								m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of points";

  00278	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  0027b	83 c1 10	 add	 ecx, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0027e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 117  : 								bSuccess = false;

  00283	c6 45 ef 00	 mov	 BYTE PTR _bSuccess$[ebp], 0
$LN22@LoadBsfFil:

; 120  : 						}

  00287	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  0028b	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _vPoints$2[ebp]
  00291	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 120  : 						}

  00296	e9 41 fe ff ff	 jmp	 $LN5@LoadBsfFil
$LN6@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  0029b	8d 45 48	 lea	 eax, DWORD PTR _sShape$28[ebp]
  0029e	50		 push	 eax
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 121  : 						m_vBoundaries.push_back(sShape);

  0029f	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  002a2	83 c1 04	 add	 ecx, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 717  :         emplace_back(_Val);

  002a5	e8 00 00 00 00	 call	 ??$emplace_back@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAEXABUSBoundaryShape@@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::emplace_back<SBoundaryShape const &>
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 122  : 					}

  002aa	eb 2b		 jmp	 SHORT $LN20@LoadBsfFil
$LN19@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  002ac	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@
  002b1	e8 00 00 00 00	 call	 _strlen
  002b6	59		 pop	 ecx
  002b7	89 45 b4	 mov	 DWORD PTR $T15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  002ba	8b 45 b4	 mov	 eax, DWORD PTR $T15[ebp]
  002bd	89 45 b0	 mov	 DWORD PTR $T14[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002c0	ff 75 b0	 push	 DWORD PTR $T14[ebp]
  002c3	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 125  : 						m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of contours";

  002c8	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  002cb	83 c1 10	 add	 ecx, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002ce	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 126  : 						bSuccess = false;

  002d3	c6 45 ef 00	 mov	 BYTE PTR _bSuccess$[ebp], 0
$LN20@LoadBsfFil:

; 128  : 				}

  002d7	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  002db	8d 4d 48	 lea	 ecx, DWORD PTR _sShape$28[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  002de	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 128  : 				}

  002e3	e9 9b fd ff ff	 jmp	 $LN2@LoadBsfFil
$LN3@LoadBsfFil:

; 129  : 			}

  002e8	eb 2b		 jmp	 SHORT $LN18@LoadBsfFil
$LN17@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  002ea	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@
  002ef	e8 00 00 00 00	 call	 _strlen
  002f4	59		 pop	 ecx
  002f5	89 45 ac	 mov	 DWORD PTR $T13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  002f8	8b 45 ac	 mov	 eax, DWORD PTR $T13[ebp]
  002fb	89 45 a8	 mov	 DWORD PTR $T12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002fe	ff 75 a8	 push	 DWORD PTR $T12[ebp]
  00301	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 132  : 				m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of boundaries";

  00306	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  00309	83 c1 10	 add	 ecx, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0030c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 133  : 				bSuccess = false;

  00311	c6 45 ef 00	 mov	 BYTE PTR _bSuccess$[ebp], 0
$LN18@LoadBsfFil:

; 134  : 			}
; 135  : 			fclose(pFile);

  00315	ff 75 e0	 push	 DWORD PTR _pFile$23[ebp]
  00318	e8 00 00 00 00	 call	 _fclose
  0031d	59		 pop	 ecx

; 136  : 		}

  0031e	e9 98 00 00 00	 jmp	 $LN16@LoadBsfFil
$LN15@LoadBsfFil:

; 139  : 			m_strCurrentError = string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + string(pszFilename);

  00323	ff b5 84 00 00
	00		 push	 DWORD PTR _pszFilename$[ebp]
  00329	8d 4d 30	 lea	 ecx, DWORD PTR $T27[ebp]
  0032c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00331	89 45 a4	 mov	 DWORD PTR tv338[ebp], eax
  00334	8b 45 a4	 mov	 eax, DWORD PTR tv338[ebp]
  00337	89 45 9c	 mov	 DWORD PTR tv215[ebp], eax
  0033a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  0033e	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@
  00343	8d 4d 18	 lea	 ecx, DWORD PTR $T26[ebp]
  00346	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0034b	89 45 a0	 mov	 DWORD PTR tv212[ebp], eax
  0034e	8b 45 a0	 mov	 eax, DWORD PTR tv212[ebp]
  00351	89 45 98	 mov	 DWORD PTR tv217[ebp], eax
  00354	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
  00358	ff 75 9c	 push	 DWORD PTR tv215[ebp]
  0035b	ff 75 98	 push	 DWORD PTR tv217[ebp]
  0035e	8d 45 00	 lea	 eax, DWORD PTR $T25[ebp]
  00361	50		 push	 eax
  00362	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@$$QAV10@0@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00367	83 c4 0c	 add	 esp, 12			; 0000000cH
  0036a	89 45 d0	 mov	 DWORD PTR $T19[ebp], eax
  0036d	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00370	83 c0 10	 add	 eax, 16			; 00000010H
  00373	89 45 cc	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00376	8b 45 d0	 mov	 eax, DWORD PTR $T19[ebp]
  00379	89 45 94	 mov	 DWORD PTR $T11[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2665 :         if (this != _STD addressof(_Right)) {

  0037c	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0037f	3b 45 94	 cmp	 eax, DWORD PTR $T11[ebp]
  00382	74 13		 je	 SHORT $LN187@LoadBsfFil

; 2666 :             _Move_assign(_Right, _Choose_pocma<_Alty>{});

  00384	33 c0		 xor	 eax, eax
  00386	88 45 90	 mov	 BYTE PTR $T10[ebp], al
  00389	ff 75 90	 push	 DWORD PTR $T10[ebp]
  0038c	ff 75 d0	 push	 DWORD PTR $T19[ebp]
  0038f	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00392	e8 00 00 00 00	 call	 ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
$LN187@LoadBsfFil:

; 2801 :         _Tidy_deallocate();

  00397	8d 4d 00	 lea	 ecx, DWORD PTR $T25[ebp]
  0039a	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 139  : 			m_strCurrentError = string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + string(pszFilename);

  0039f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  003a3	8d 4d 18	 lea	 ecx, DWORD PTR $T26[ebp]
  003a6	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 139  : 			m_strCurrentError = string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + string(pszFilename);

  003ab	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  003af	8d 4d 30	 lea	 ecx, DWORD PTR $T27[ebp]
  003b2	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 140  : 			bSuccess = false;

  003b7	c6 45 ef 00	 mov	 BYTE PTR _bSuccess$[ebp], 0
$LN16@LoadBsfFil:

; 141  : 		}
; 142  : 	}

  003bb	eb 2d		 jmp	 SHORT $LN31@LoadBsfFil
__catch$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$0:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  003bd	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@
  003c2	e8 00 00 00 00	 call	 _strlen
  003c7	59		 pop	 ecx
  003c8	89 45 8c	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  003cb	8b 45 8c	 mov	 eax, DWORD PTR $T9[ebp]
  003ce	89 45 88	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003d1	ff 75 88	 push	 DWORD PTR $T8[ebp]
  003d4	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 146  : 		m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Unknown exception";

  003d9	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  003dc	83 c1 10	 add	 ecx, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003df	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 147  : 	}

  003e4	b8 00 00 00 00	 mov	 eax, $LN39@LoadBsfFil
  003e9	c3		 ret	 0
$LN31@LoadBsfFil:
  003ea	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
  003ee	eb 04		 jmp	 SHORT $LN38@LoadBsfFil
$LN39@LoadBsfFil:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
  003f0	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+12], -1
$LN38@LoadBsfFil:
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 148  : 
; 149  : 	return bSuccess;

  003f4	8a 45 ef	 mov	 al, BYTE PTR _bSuccess$[ebp]

; 150  : }

  003f7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  003fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00401	59		 pop	 ecx
  00402	5f		 pop	 edi
  00403	5e		 pop	 esi
  00404	5b		 pop	 ebx
  00405	8b 4d 78	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00408	33 cd		 xor	 ecx, ebp
  0040a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0040f	83 c5 7c	 add	 ebp, 124		; 0000007cH
  00412	c9		 leave
  00413	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$2:
  00000	8d 4d 48	 lea	 ecx, DWORD PTR _sShape$28[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SBoundaryShape@@QAE@XZ
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$3:
  00008	8d 8d 68 ff ff
	ff		 lea	 ecx, DWORD PTR _vPoints$2[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$4:
  00013	8d 4d 30	 lea	 ecx, DWORD PTR $T27[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$5:
  0001b	8d 4d 18	 lea	 ecx, DWORD PTR $T26[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
  00026	cc		 int	 3
  00027	cc		 int	 3
__ehhandler$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z:
  00028	90		 npad	 1
  00029	90		 npad	 1
  0002a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00031	8b 8a 64 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-156]
  00037	33 c8		 xor	 ecx, eax
  00039	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003e	8b 8a 84 00 00
	00		 mov	 ecx, DWORD PTR [edx+132]
  00044	33 c8		 xor	 ecx, eax
  00046	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
  00050	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z ENDP	; CBoundaryShapeManager::LoadBsfFile
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ??1CBoundaryShapeManager@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBoundaryShapeManager@@UAE@XZ PROC			; CBoundaryShapeManager::~CBoundaryShapeManager, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CBoundaryShapeManager@@6B@

; 44   : }

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 10	 add	 ecx, 16			; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2801 :         _Tidy_deallocate();

  00016	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 44   : }

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 c1 04	 add	 ecx, 4
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 673  :         _Tidy();

  00021	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEXXZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Tidy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 44   : }

  00026	c9		 leave
  00027	c3		 ret	 0
??1CBoundaryShapeManager@@UAE@XZ ENDP			; CBoundaryShapeManager::~CBoundaryShapeManager
_TEXT	ENDS
; Function compile flags: /Odspy
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ??0CBoundaryShapeManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
_this$ = -12						; size = 4
_this$1 = -8						; size = 4
_this$ = -4						; size = 4
??0CBoundaryShapeManager@@QAE@XZ PROC			; CBoundaryShapeManager::CBoundaryShapeManager, COMDAT
; _this$ = ecx

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CBoundaryShapeManager@@6B@
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	83 c0 04	 add	 eax, 4
  00018	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 445  :     vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  0001b	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00021	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00024	89 45 f8	 mov	 DWORD PTR _this$1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$1[ebp]
  0002a	83 20 00	 and	 DWORD PTR [eax], 0
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$1[ebp]
  00030	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$1[ebp]
  00037	83 60 08 00	 and	 DWORD PTR [eax+8], 0
; File D:\Metin2 Server Files\mainline\SRC_2014\Metin2Client\SpeedTreeLib\BoundaryShapeManager.cpp

; 35   : {

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003e	83 c1 10	 add	 ecx, 16			; 00000010H
  00041	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 36   : }

  00046	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00049	c9		 leave
  0004a	c3		 ret	 0
??0CBoundaryShapeManager@@QAE@XZ ENDP			; CBoundaryShapeManager::CBoundaryShapeManager
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??1SBoundaryShape@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SBoundaryShape@@QAE@XZ PROC				; SBoundaryShape::~SBoundaryShape, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 673  :         _Tidy();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
  0000f	c9		 leave
  00010	c3		 ret	 0
??1SBoundaryShape@@QAE@XZ ENDP				; SBoundaryShape::~SBoundaryShape
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::vector<SPoint,std::allocator<SPoint> > > >::_Vector_val<std::_Simple_types<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT
; _this$ = ecx

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 20 00	 and	 DWORD PTR [eax], 0
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00010	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00014	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00017	83 60 08 00	 and	 DWORD PTR [eax+8], 0
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::vector<SPoint,std::allocator<SPoint> > > >::_Vector_val<std::_Simple_types<std::vector<SPoint,std::allocator<SPoint> > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength, COMDAT

; 1704 :     [[noreturn]] static void _Xlength() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1705 :         _Xlength_error("vector too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlength:

; 1706 :     }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1686 :     void _Tidy() noexcept { // free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1687 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1688 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1689 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1690 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1691 : 
; 1692 :         _My_data._Orphan_all();
; 1693 : 
; 1694 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 75		 je	 SHORT $LN3@Tidy

; 1695 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1696 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 0c		 push	 12			; 0000000cH
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	6b 45 d4 0c	 imul	 eax, DWORD PTR __Count$[ebp], 12
  00087	50		 push	 eax
  00088	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	59		 pop	 ecx
  00091	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1698 :             _Myfirst = pointer();

  00092	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00095	83 20 00	 and	 DWORD PTR [eax], 0

; 1699 :             _Mylast  = pointer();

  00098	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0009b	83 20 00	 and	 DWORD PTR [eax], 0

; 1700 :             _Myend   = pointer();

  0009e	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  000a1	83 20 00	 and	 DWORD PTR [eax], 0
$LN3@Tidy:

; 1701 :         }
; 1702 :     }

  000a4	c9		 leave
  000a5	c3		 ret	 0
?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Change_array@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@II@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
__Ptr$ = -48						; size = 4
__Count$ = -44						; size = 4
$T2 = -40						; size = 4
__First$ = -36						; size = 4
__Last$ = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
__Myend$ = -20						; size = 4
__Mylast$ = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Myfirst$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@II@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1667 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1668 :         // orphan all iterators, discard old array, acquire new array
; 1669 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1670 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 fc	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1671 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 f0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1672 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 ec	 mov	 DWORD PTR __Myend$[ebp], eax

; 1673 : 
; 1674 :         _My_data._Orphan_all();
; 1675 : 
; 1676 :         if (_Myfirst) { // destroy and deallocate old array

  00027	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0002a	83 38 00	 cmp	 DWORD PTR [eax], 0
  0002d	74 63		 je	 SHORT $LN2@Change_arr

; 1677 :             _Destroy(_Myfirst, _Mylast);

  0002f	8b 45 f0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	89 45 e0	 mov	 DWORD PTR __Last$[ebp], eax
  00037	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0003a	8b 00		 mov	 eax, DWORD PTR [eax]
  0003c	89 45 dc	 mov	 DWORD PTR __First$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  0003f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00042	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00045	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00048	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  0004b	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0004e	ff 75 e0	 push	 DWORD PTR __Last$[ebp]
  00051	ff 75 dc	 push	 DWORD PTR __First$[ebp]
  00054	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1733 :         return _Mypair._Get_first();

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0005f	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  00062	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00065	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax

; 1678 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00068	8b 45 ec	 mov	 eax, DWORD PTR __Myend$[ebp]
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __Myfirst$[ebp]
  0006e	8b 00		 mov	 eax, DWORD PTR [eax]
  00070	2b 01		 sub	 eax, DWORD PTR [ecx]
  00072	99		 cdq
  00073	6a 0c		 push	 12			; 0000000cH
  00075	59		 pop	 ecx
  00076	f7 f9		 idiv	 ecx
  00078	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  0007b	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  0007e	8b 00		 mov	 eax, DWORD PTR [eax]
  00080	89 45 d0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00083	6b 45 d4 0c	 imul	 eax, DWORD PTR __Count$[ebp], 12
  00087	50		 push	 eax
  00088	ff 75 d0	 push	 DWORD PTR __Ptr$[ebp]
  0008b	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00090	59		 pop	 ecx
  00091	59		 pop	 ecx
$LN2@Change_arr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1681 :         _Myfirst = _Newvec;

  00092	8b 45 fc	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00098	89 08		 mov	 DWORD PTR [eax], ecx

; 1682 :         _Mylast  = _Newvec + _Newsize;

  0009a	6b 45 0c 0c	 imul	 eax, DWORD PTR __Newsize$[ebp], 12
  0009e	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000a1	8b 4d f0	 mov	 ecx, DWORD PTR __Mylast$[ebp]
  000a4	89 01		 mov	 DWORD PTR [ecx], eax

; 1683 :         _Myend   = _Newvec + _Newcapacity;

  000a6	6b 45 10 0c	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 12
  000aa	03 45 08	 add	 eax, DWORD PTR __Newvec$[ebp]
  000ad	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$[ebp]
  000b0	89 01		 mov	 DWORD PTR [ecx], eax

; 1684 :     }

  000b2	c9		 leave
  000b3	c2 0c 00	 ret	 12			; 0000000cH
?_Change_array@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@II@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Buy_raw@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXI@Z
_TEXT	SEGMENT
__Max_possible$1 = -44					; size = 4
$T2 = -40						; size = 4
__Myend$ = -36						; size = 4
__Mylast$ = -32						; size = 4
__Myfirst$ = -28					; size = 4
$T3 = -24						; size = 4
$T4 = -20						; size = 4
_this$ = -16						; size = 4
__Newvec$ = -12						; size = 4
__My_data$ = -8						; size = 4
__Overflow_is_possible$5 = -1				; size = 1
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXI@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Buy_raw, COMDAT
; _this$ = ecx

; 1633 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 1634 :         // allocate array with _Newcapacity elements
; 1635 :         auto& _My_data    = _Mypair._Myval2;

  00009	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$[ebp], eax

; 1636 :         pointer& _Myfirst = _My_data._Myfirst;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00012	89 45 e4	 mov	 DWORD PTR __Myfirst$[ebp], eax

; 1637 :         pointer& _Mylast  = _My_data._Mylast;

  00015	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00018	83 c0 04	 add	 eax, 4
  0001b	89 45 e0	 mov	 DWORD PTR __Mylast$[ebp], eax

; 1638 :         pointer& _Myend   = _My_data._Myend;

  0001e	8b 45 f8	 mov	 eax, DWORD PTR __My_data$[ebp]
  00021	83 c0 08	 add	 eax, 8
  00024	89 45 dc	 mov	 DWORD PTR __Myend$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  00027	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0002a	89 45 ec	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0002d	8b 45 ec	 mov	 eax, DWORD PTR $T4[ebp]
  00030	89 45 d8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00033	c6 45 ff 01	 mov	 BYTE PTR __Overflow_is_possible$5[ebp], 1

; 57   : 
; 58   :     if _CONSTEXPR_IF (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00037	c7 45 d4 55 55
	55 15		 mov	 DWORD PTR __Max_possible$1[ebp], 357913941 ; 15555555H

; 60   :         if (_Count > _Max_possible) {

  0003e	81 7d 08 55 55
	55 15		 cmp	 DWORD PTR __Newcapacity$[ebp], 357913941 ; 15555555H
  00045	76 05		 jbe	 SHORT $LN12@Buy_raw

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00047	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN12@Buy_raw:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0004c	6b 45 08 0c	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 12
  00050	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00053	ff 75 e8	 push	 DWORD PTR $T3[ebp]
  00056	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  0005b	59		 pop	 ecx
  0005c	89 45 f4	 mov	 DWORD PTR __Newvec$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1644 :         _Myfirst           = _Newvec;

  0005f	8b 45 e4	 mov	 eax, DWORD PTR __Myfirst$[ebp]
  00062	8b 4d f4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00065	89 08		 mov	 DWORD PTR [eax], ecx

; 1645 :         _Mylast            = _Newvec;

  00067	8b 45 e0	 mov	 eax, DWORD PTR __Mylast$[ebp]
  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  0006d	89 08		 mov	 DWORD PTR [eax], ecx

; 1646 :         _Myend             = _Newvec + _Newcapacity;

  0006f	6b 45 08 0c	 imul	 eax, DWORD PTR __Newcapacity$[ebp], 12
  00073	03 45 f4	 add	 eax, DWORD PTR __Newvec$[ebp]
  00076	8b 4d dc	 mov	 ecx, DWORD PTR __Myend$[ebp]
  00079	89 01		 mov	 DWORD PTR [ecx], eax
$LN15@Buy_raw:

; 1647 :     }

  0007b	c9		 leave
  0007c	c2 04 00	 ret	 4
?_Buy_raw@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXI@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Calculate_growth@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -52						; size = 4
$T2 = -48						; size = 4
$T3 = -44						; size = 4
$T4 = -40						; size = 4
$T5 = -36						; size = 4
__Geometric$ = -32					; size = 4
__Max$ = -28						; size = 4
tv82 = -24						; size = 4
$T6 = -20						; size = 4
$T7 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$8 = -8					; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@ABEII@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;

  00009	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f8	 mov	 DWORD PTR __My_data$8[ebp], eax

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000f	8b 45 f8	 mov	 eax, DWORD PTR __My_data$8[ebp]
  00012	8b 4d f8	 mov	 ecx, DWORD PTR __My_data$8[ebp]
  00015	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00018	2b 01		 sub	 eax, DWORD PTR [ecx]
  0001a	99		 cdq
  0001b	6a 0c		 push	 12			; 0000000cH
  0001d	59		 pop	 ecx
  0001e	f7 f9		 idiv	 ecx
  00020	89 45 fc	 mov	 DWORD PTR __Oldcapacity$[ebp], eax

; 1737 :         return _Mypair._Get_first();

  00023	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  00026	89 45 dc	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  00029	8b 45 dc	 mov	 eax, DWORD PTR $T5[ebp]
  0002c	89 45 cc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0002f	c7 45 f0 55 55
	55 15		 mov	 DWORD PTR $T7[ebp], 357913941 ; 15555555H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00036	c7 45 d8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  0003d	8b 45 d8	 mov	 eax, DWORD PTR $T4[ebp]
  00040	89 45 ec	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  00043	8b 45 f0	 mov	 eax, DWORD PTR $T7[ebp]
  00046	3b 45 ec	 cmp	 eax, DWORD PTR $T6[ebp]
  00049	73 08		 jae	 SHORT $LN25@Calculate_
  0004b	8d 45 f0	 lea	 eax, DWORD PTR $T7[ebp]
  0004e	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
  00051	eb 06		 jmp	 SHORT $LN26@Calculate_
$LN25@Calculate_:
  00053	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00056	89 45 e8	 mov	 DWORD PTR tv82[ebp], eax
$LN26@Calculate_:
  00059	8b 45 e8	 mov	 eax, DWORD PTR tv82[ebp]
  0005c	89 45 d4	 mov	 DWORD PTR $T3[ebp], eax
  0005f	8b 45 d4	 mov	 eax, DWORD PTR $T3[ebp]
  00062	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1488 :         return (_STD min)(

  00065	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00068	8b 00		 mov	 eax, DWORD PTR [eax]
  0006a	89 45 e4	 mov	 DWORD PTR __Max$[ebp], eax

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 :         const auto _Max              = max_size();
; 1619 : 
; 1620 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006d	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00070	d1 e8		 shr	 eax, 1
  00072	8b 4d e4	 mov	 ecx, DWORD PTR __Max$[ebp]
  00075	2b c8		 sub	 ecx, eax
  00077	39 4d fc	 cmp	 DWORD PTR __Oldcapacity$[ebp], ecx
  0007a	76 05		 jbe	 SHORT $LN2@Calculate_

; 1621 :             return _Max; // geometric growth would overflow

  0007c	8b 45 e4	 mov	 eax, DWORD PTR __Max$[ebp]
  0007f	eb 1b		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1622 :         }
; 1623 : 
; 1624 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00081	8b 45 fc	 mov	 eax, DWORD PTR __Oldcapacity$[ebp]
  00084	d1 e8		 shr	 eax, 1
  00086	03 45 fc	 add	 eax, DWORD PTR __Oldcapacity$[ebp]
  00089	89 45 e0	 mov	 DWORD PTR __Geometric$[ebp], eax

; 1625 : 
; 1626 :         if (_Geometric < _Newsize) {

  0008c	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
  0008f	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00092	73 05		 jae	 SHORT $LN3@Calculate_

; 1627 :             return _Newsize; // geometric growth would be insufficient

  00094	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00097	eb 03		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1628 :         }
; 1629 : 
; 1630 :         return _Geometric; // geometric growth is sufficient

  00099	8b 45 e0	 mov	 eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1631 :     }

  0009c	c9		 leave
  0009d	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@ABEII@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ?_Destroy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@0@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@0@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Destroy, COMDAT
; _this$ = ecx

; 1611 :     void _Destroy(pointer _First, pointer _Last) { // destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 f8	 mov	 eax, DWORD PTR $T2[ebp]
  00012	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 1612 :         _Destroy_range(_First, _Last, _Getal());

  00015	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00018	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0001b	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0001e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1613 :     }

  00026	c9		 leave
  00027	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@0@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 4
_this$ = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__Right$ = -12						; size = 4
___formal$ = -8						; size = 1
$T4 = -1						; size = 1
__Right$ = 8						; size = 4
??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@$$QAV01@@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT
; _this$ = ecx

; 581  :     vector(vector&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx

; 1733 :         return _Mypair._Get_first();

  00009	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0000c	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  0000f	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  00012	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits

; 1455 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00015	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00018	89 45 d8	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 581  :     vector(vector&& _Right) noexcept : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

  0001b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	89 45 dc	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1344 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00021	8b 45 dc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	89 45 f0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00027	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	83 20 00	 and	 DWORD PTR [eax], 0
  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  00034	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 60 08 00	 and	 DWORD PTR [eax+8], 0

; 582  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 583  :         _Move_construct(_Right, true_type{});

  0003b	33 c0		 xor	 eax, eax
  0003d	88 45 ff	 mov	 BYTE PTR $T4[ebp], al
  00040	8a 45 ff	 mov	 al, BYTE PTR $T4[ebp]
  00043	88 45 f8	 mov	 BYTE PTR ___formal$[ebp], al

; 557  :         _Mypair._Myval2._Take_contents(_Right._Mypair._Myval2);

  00046	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00049	89 45 f4	 mov	 DWORD PTR __Right$[ebp], eax
  0004c	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	89 45 ec	 mov	 DWORD PTR _this$[ebp], eax

; 386  :         _Myfirst = _Right._Myfirst;

  00052	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 4d f4	 mov	 ecx, DWORD PTR __Right$[ebp]
  00058	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0005a	89 08		 mov	 DWORD PTR [eax], ecx

; 387  :         _Mylast  = _Right._Mylast;

  0005c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __Right$[ebp]
  00062	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00065	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 388  :         _Myend   = _Right._Myend;

  00068	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	8b 4d f4	 mov	 ecx, DWORD PTR __Right$[ebp]
  0006e	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00071	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 389  : 
; 390  :         _Right._Myfirst = pointer();

  00074	8b 45 f4	 mov	 eax, DWORD PTR __Right$[ebp]
  00077	83 20 00	 and	 DWORD PTR [eax], 0

; 391  :         _Right._Mylast  = pointer();

  0007a	8b 45 f4	 mov	 eax, DWORD PTR __Right$[ebp]
  0007d	83 60 04 00	 and	 DWORD PTR [eax+4], 0

; 392  :         _Right._Myend   = pointer();

  00081	8b 45 f4	 mov	 eax, DWORD PTR __Right$[ebp]
  00084	83 60 08 00	 and	 DWORD PTR [eax+8], 0

; 584  :     }

  00088	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	c9		 leave
  0008c	c2 04 00	 ret	 4
??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector
;	COMDAT ??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Alproxy$ = -72					; size = 4
$T2 = -68						; size = 4
__Dest$ = -64						; size = 4
$T3 = -60						; size = 4
$T4 = -56						; size = 4
_this$ = -52						; size = 4
$T5 = -48						; size = 4
__My_data$ = -44					; size = 4
__Right_data$ = -40					; size = 4
__Guard$6 = -36						; size = 4
__Rightfirst$ = -32					; size = 4
__Rightlast$ = -28					; size = 4
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_$S11$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT
; _this$ = ecx

; 521  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1737 :         return _Mypair._Get_first();

  00028	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0002b	89 45 d0	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1737 :         return _Mypair._Get_first();

  0002e	8b 45 d0	 mov	 eax, DWORD PTR $T5[ebp]
  00031	89 45 bc	 mov	 DWORD PTR $T2[ebp], eax

; 521  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00034	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 cc	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1344 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0003a	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 375  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00040	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	83 20 00	 and	 DWORD PTR [eax], 0
  00046	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00049	83 60 04 00	 and	 DWORD PTR [eax+4], 0
  0004d	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00050	83 60 08 00	 and	 DWORD PTR [eax+8], 0

; 522  :         auto&& _Alproxy           = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00054	8d 45 f3	 lea	 eax, DWORD PTR _$S11$[ebp]
  00057	89 45 b8	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 523  :         auto& _My_data            = _Mypair._Myval2;

  0005a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	89 45 d4	 mov	 DWORD PTR __My_data$[ebp], eax

; 524  :         const auto& _Right_data   = _Right._Mypair._Myval2;

  00060	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00063	89 45 d8	 mov	 DWORD PTR __Right_data$[ebp], eax

; 525  :         const pointer _Rightfirst = _Right_data._Myfirst;

  00066	8b 45 d8	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00069	8b 00		 mov	 eax, DWORD PTR [eax]
  0006b	89 45 e0	 mov	 DWORD PTR __Rightfirst$[ebp], eax

; 526  :         const pointer _Rightlast  = _Right_data._Mylast;

  0006e	8b 45 d8	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00071	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00074	89 45 e4	 mov	 DWORD PTR __Rightlast$[ebp], eax

; 527  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 528  :         if (_Rightfirst != _Rightlast) {

  00077	8b 45 e0	 mov	 eax, DWORD PTR __Rightfirst$[ebp]
  0007a	3b 45 e4	 cmp	 eax, DWORD PTR __Rightlast$[ebp]
  0007d	74 63		 je	 SHORT $LN1@vector

; 529  :             _Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));

  0007f	8b 45 e4	 mov	 eax, DWORD PTR __Rightlast$[ebp]
  00082	2b 45 e0	 sub	 eax, DWORD PTR __Rightfirst$[ebp]
  00085	99		 cdq
  00086	6a 0c		 push	 12			; 0000000cH
  00088	59		 pop	 ecx
  00089	f7 f9		 idiv	 ecx
  0008b	50		 push	 eax
  0008c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXI@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Buy_raw

; 530  :             _Tidy_guard<vector> _Guard{this};

  00094	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00097	89 45 dc	 mov	 DWORD PTR __Guard$6[ebp], eax
  0009a	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 531  :             _My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);

  0009e	8b 45 d4	 mov	 eax, DWORD PTR __My_data$[ebp]
  000a1	8b 00		 mov	 eax, DWORD PTR [eax]
  000a3	89 45 c0	 mov	 DWORD PTR __Dest$[ebp], eax

; 1733 :         return _Mypair._Get_first();

  000a6	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  000a9	89 45 c8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 1733 :         return _Mypair._Get_first();

  000ac	8b 45 c8	 mov	 eax, DWORD PTR $T4[ebp]
  000af	89 45 c4	 mov	 DWORD PTR $T3[ebp], eax

; 1588 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  000b2	ff 75 c4	 push	 DWORD PTR $T3[ebp]
  000b5	ff 75 c0	 push	 DWORD PTR __Dest$[ebp]
  000b8	ff 75 e4	 push	 DWORD PTR __Rightlast$[ebp]
  000bb	ff 75 e0	 push	 DWORD PTR __Rightfirst$[ebp]
  000be	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_copy<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  000c3	83 c4 10	 add	 esp, 16			; 00000010H

; 531  :             _My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);

  000c6	8b 4d d4	 mov	 ecx, DWORD PTR __My_data$[ebp]
  000c9	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 532  :             _Guard._Target   = nullptr;

  000cc	83 65 dc 00	 and	 DWORD PTR __Guard$6[ebp], 0

; 533  :         }

  000d0	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 31   :         if (_Target) {

  000d4	83 7d dc 00	 cmp	 DWORD PTR __Guard$6[ebp], 0
  000d8	74 08		 je	 SHORT $LN1@vector

; 32   :             _Target->_Tidy();

  000da	8b 4d dc	 mov	 ecx, DWORD PTR __Guard$6[ebp]
  000dd	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
$LN1@vector:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vector

; 536  :     }

  000e2	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ef	59		 pop	 ecx
  000f0	c9		 leave
  000f1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z$0:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Guard$6[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z PROC ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate, COMDAT
; _this$ = ecx

; 808  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 809  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00007	6b 45 0c 0c	 imul	 eax, DWORD PTR __Count$[ebp], 12
  0000b	50		 push	 eax
  0000c	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0000f	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  00014	59		 pop	 ecx
  00015	59		 pop	 ecx

; 811  :     }

  00016	c9		 leave
  00017	c2 08 00	 ret	 8
?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z ENDP ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	c9		 leave
  00008	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
__Al$1 = -28						; size = 4
__Ptr$2 = -24						; size = 4
__Count$ = -20						; size = 4
$T3 = -16						; size = 4
tv68 = -12						; size = 4
_this$ = -8						; size = 4
$T4 = -2						; size = 1
$T5 = -1						; size = 1
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4383 :     void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2227 :         return _BUF_SIZE <= _Myres;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00010	72 09		 jb	 SHORT $LN9@Tidy_deall
  00012	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00019	eb 04		 jmp	 SHORT $LN10@Tidy_deall
$LN9@Tidy_deall:
  0001b	83 65 f4 00	 and	 DWORD PTR tv68[ebp], 0
$LN10@Tidy_deall:
  0001f	8a 45 f4	 mov	 al, BYTE PTR tv68[ebp]
  00022	88 45 ff	 mov	 BYTE PTR $T5[ebp], al

; 4384 :         _Mypair._Myval2._Orphan_all();
; 4385 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00025	0f b6 45 ff	 movzx	 eax, BYTE PTR $T5[ebp]
  00029	85 c0		 test	 eax, eax
  0002b	74 34		 je	 SHORT $LN2@Tidy_deall

; 4386 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	89 45 e8	 mov	 DWORD PTR __Ptr$2[ebp], eax

; 4409 :         return _Mypair._Get_first();

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00038	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  0003b	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0003e	89 45 e4	 mov	 DWORD PTR __Al$1[ebp], eax

; 4387 :             auto& _Al          = _Getal();
; 4388 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00041	ff 75 f8	 push	 DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
  00049	59		 pop	 ecx

; 4389 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00050	40		 inc	 eax
  00051	89 45 ec	 mov	 DWORD PTR __Count$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 810  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00054	ff 75 ec	 push	 DWORD PTR __Count$[ebp]
  00057	ff 75 e8	 push	 DWORD PTR __Ptr$2[ebp]
  0005a	e8 00 00 00 00	 call	 ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ; std::_Deallocate<8,0>
  0005f	59		 pop	 ecx
  00060	59		 pop	 ecx
$LN2@Tidy_deall:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4392 :         _Mypair._Myval2._Mysize = 0;

  00061	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00064	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 4393 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  00068	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4394 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4395 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00072	c6 45 fe 00	 mov	 BYTE PTR $T4[ebp], 0
  00076	33 c0		 xor	 eax, eax
  00078	40		 inc	 eax
  00079	6b c0 00	 imul	 eax, eax, 0

; 428  :         _Left = _Right;

  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	8a 55 fe	 mov	 dl, BYTE PTR $T4[ebp]
  00082	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4396 :     }

  00085	c9		 leave
  00086	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 4376 :     void _Tidy_init() noexcept { // initialize basic_string data members

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 4377 :         _Mypair._Myval2._Mysize = 0;

  00008	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 60 10 00	 and	 DWORD PTR [eax+16], 0

; 4378 :         _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 4379 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4380 :         _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  00019	c6 45 ff 00	 mov	 BYTE PTR $T1[ebp], 0
  0001d	33 c0		 xor	 eax, eax
  0001f	40		 inc	 eax
  00020	6b c0 00	 imul	 eax, eax, 0

; 428  :         _Left = _Right;

  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8a 55 ff	 mov	 dl, BYTE PTR $T1[ebp]
  00029	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 4381 :     }

  0002c	c9		 leave
  0002d	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
$T1 = -36						; size = 4
$T2 = -32						; size = 4
tv93 = -28						; size = 4
$T3 = -24						; size = 4
_this$ = -20						; size = 4
$T4 = -16						; size = 4
__Masked$5 = -12					; size = 4
__Old$ = -8						; size = 4
__Max$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4297 :     _NODISCARD size_type _Calculate_growth(const size_type _Requested) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00009	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00011	89 45 fc	 mov	 DWORD PTR __Max$[ebp], eax
  00014	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00017	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0001a	89 45 f8	 mov	 DWORD PTR __Old$[ebp], eax

; 4285 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0001d	8b 45 08	 mov	 eax, DWORD PTR __Requested$[ebp]
  00020	83 c8 0f	 or	 eax, 15			; 0000000fH
  00023	89 45 f4	 mov	 DWORD PTR __Masked$5[ebp], eax

; 4286 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00026	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  00029	3b 45 fc	 cmp	 eax, DWORD PTR __Max$[ebp]
  0002c	76 08		 jbe	 SHORT $LN29@Calculate_

; 4287 :             return _Max;

  0002e	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00031	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  00034	eb 4c		 jmp	 SHORT $LN31@Calculate_
$LN29@Calculate_:

; 4288 :         }
; 4289 : 
; 4290 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00036	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00039	d1 e8		 shr	 eax, 1
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __Max$[ebp]
  0003e	2b c8		 sub	 ecx, eax
  00040	39 4d f8	 cmp	 DWORD PTR __Old$[ebp], ecx
  00043	76 08		 jbe	 SHORT $LN30@Calculate_

; 4291 :             return _Max;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Max$[ebp]
  00048	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
  0004b	eb 35		 jmp	 SHORT $LN31@Calculate_
$LN30@Calculate_:

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0004d	8b 45 f8	 mov	 eax, DWORD PTR __Old$[ebp]
  00050	d1 e8		 shr	 eax, 1
  00052	03 45 f8	 add	 eax, DWORD PTR __Old$[ebp]
  00055	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00058	8b 45 f4	 mov	 eax, DWORD PTR __Masked$5[ebp]
  0005b	3b 45 e8	 cmp	 eax, DWORD PTR $T3[ebp]
  0005e	73 08		 jae	 SHORT $LN35@Calculate_
  00060	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00063	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
  00066	eb 06		 jmp	 SHORT $LN36@Calculate_
$LN35@Calculate_:
  00068	8d 45 f4	 lea	 eax, DWORD PTR __Masked$5[ebp]
  0006b	89 45 e4	 mov	 DWORD PTR tv93[ebp], eax
$LN36@Calculate_:
  0006e	8b 45 e4	 mov	 eax, DWORD PTR tv93[ebp]
  00071	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00074	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00077	89 45 dc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0007a	8b 45 dc	 mov	 eax, DWORD PTR $T1[ebp]
  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	89 45 f0	 mov	 DWORD PTR $T4[ebp], eax
$LN31@Calculate_:

; 4298 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00082	8b 45 f0	 mov	 eax, DWORD PTR $T4[ebp]

; 4299 :     }

  00085	c9		 leave
  00086	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -60						; size = 4
$T2 = -56						; size = 4
$T3 = -52						; size = 4
$T4 = -48						; size = 4
__Storage_max$ = -44					; size = 4
$T5 = -40						; size = 4
$T6 = -36						; size = 4
$T7 = -32						; size = 4
_this$ = -28						; size = 4
tv70 = -24						; size = 4
$T8 = -20						; size = 4
$T9 = -16						; size = 4
tv67 = -12						; size = 4
__Alloc_max$ = -8					; size = 4
$T10 = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3773 :     _NODISCARD size_type max_size() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	89 4d e4	 mov	 DWORD PTR _this$[ebp], ecx

; 4413 :         return _Mypair._Get_first();

  00009	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1351 :         return *this;

  0000c	89 45 e0	 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4413 :         return _Mypair._Get_first();

  0000f	8b 45 e0	 mov	 eax, DWORD PTR $T7[ebp]
  00012	89 45 c4	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 710  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00015	83 4d f8 ff	 or	 DWORD PTR __Alloc_max$[ebp], -1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00019	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR $T10[ebp], 16	; 00000010H
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  00020	8b 45 f8	 mov	 eax, DWORD PTR __Alloc_max$[ebp]
  00023	3b 45 fc	 cmp	 eax, DWORD PTR $T10[ebp]
  00026	73 08		 jae	 SHORT $LN14@max_size
  00028	8d 45 fc	 lea	 eax, DWORD PTR $T10[ebp]
  0002b	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
  0002e	eb 06		 jmp	 SHORT $LN15@max_size
$LN14@max_size:
  00030	8d 45 f8	 lea	 eax, DWORD PTR __Alloc_max$[ebp]
  00033	89 45 f4	 mov	 DWORD PTR tv67[ebp], eax
$LN15@max_size:
  00036	8b 45 f4	 mov	 eax, DWORD PTR tv67[ebp]
  00039	89 45 dc	 mov	 DWORD PTR $T6[ebp], eax
  0003c	8b 45 dc	 mov	 eax, DWORD PTR $T6[ebp]
  0003f	89 45 d8	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3775 :         const size_type _Storage_max = // can always store small string

  00042	8b 45 d8	 mov	 eax, DWORD PTR $T5[ebp]
  00045	8b 00		 mov	 eax, DWORD PTR [eax]
  00047	89 45 d4	 mov	 DWORD PTR __Storage_max$[ebp], eax

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  0004a	8b 45 d4	 mov	 eax, DWORD PTR __Storage_max$[ebp]
  0004d	48		 dec	 eax
  0004e	89 45 f0	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\limits

; 557  :         return INT_MAX;

  00051	c7 45 d0 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00058	8b 45 d0	 mov	 eax, DWORD PTR $T4[ebp]
  0005b	89 45 ec	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 68   :     return _Right < _Left ? _Right : _Left;

  0005e	8b 45 f0	 mov	 eax, DWORD PTR $T9[ebp]
  00061	3b 45 ec	 cmp	 eax, DWORD PTR $T8[ebp]
  00064	73 08		 jae	 SHORT $LN22@max_size
  00066	8d 45 f0	 lea	 eax, DWORD PTR $T9[ebp]
  00069	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
  0006c	eb 06		 jmp	 SHORT $LN23@max_size
$LN22@max_size:
  0006e	8d 45 ec	 lea	 eax, DWORD PTR $T8[ebp]
  00071	89 45 e8	 mov	 DWORD PTR tv70[ebp], eax
$LN23@max_size:
  00074	8b 45 e8	 mov	 eax, DWORD PTR tv70[ebp]
  00077	89 45 cc	 mov	 DWORD PTR $T3[ebp], eax
  0007a	8b 45 cc	 mov	 eax, DWORD PTR $T3[ebp]
  0007d	89 45 c8	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3777 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00080	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp]
  00083	8b 00		 mov	 eax, DWORD PTR [eax]

; 3778 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3779 :         );
; 3780 :     }

  00085	c9		 leave
  00086	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -16						; size = 1
__Old_ptr$2 = -12					; size = 4
_this$ = -8						; size = 4
$T3 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3042 :     basic_string& assign(_In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 3043 :         // assign [_Ptr, _Ptr + _Count)
; 3044 :         if (_Count <= _Mypair._Myval2._Myres) {

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000f	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00012	77 39		 ja	 SHORT $LN2@assign

; 3045 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00014	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001c	89 45 f4	 mov	 DWORD PTR __Old_ptr$2[ebp], eax

; 3046 :             _Mypair._Myval2._Mysize = _Count;

  0001f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00025	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00028	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0002b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0002e	ff 75 f4	 push	 DWORD PTR __Old_ptr$2[ebp]
  00031	e8 00 00 00 00	 call	 _memmove
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3047 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3048 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00039	c6 45 ff 00	 mov	 BYTE PTR $T3[ebp], 0

; 428  :         _Left = _Right;

  0003d	8b 45 f4	 mov	 eax, DWORD PTR __Old_ptr$2[ebp]
  00040	03 45 0c	 add	 eax, DWORD PTR __Count$[ebp]
  00043	8a 4d ff	 mov	 cl, BYTE PTR $T3[ebp]
  00046	88 08		 mov	 BYTE PTR [eax], cl

; 3049 :             return *this;

  00048	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	eb 16		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3050 :         }
; 3051 : 
; 3052 :         return _Reallocate_for(

  0004d	33 c0		 xor	 eax, eax
  0004f	88 45 f0	 mov	 BYTE PTR $T1[ebp], al
  00052	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00055	ff 75 f0	 push	 DWORD PTR $T1[ebp]
  00058	ff 75 0c	 push	 DWORD PTR __Count$[ebp]
  0005b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 3053 :             _Count,
; 3054 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3055 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3056 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3057 :             },
; 3058 :             _Ptr);
; 3059 :     }

  00063	c9		 leave
  00064	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2800 :     ~basic_string() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2801 :         _Tidy_deallocate();

  00007	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000a	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2802 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2803 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2804 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 2805 :         _Mypair._Myval2._Myproxy = nullptr;
; 2806 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 2807 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2808 :     }

  0000f	c9		 leave
  00010	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z
_TEXT	SEGMENT
__My_data_mem$ = -12					; size = 4
__Right_data_mem$ = -8					; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from, COMDAT
; _this$ = ecx

; 2678 :     void _Memcpy_val_from(const basic_string& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2679 :         _STL_INTERNAL_CHECK(_Can_memcpy_val); // TRANSITION, if constexpr
; 2680 :         const auto _My_data_mem =

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0000c	89 45 f4	 mov	 DWORD PTR __My_data_mem$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2682 :         const auto _Right_data_mem =

  0000f	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00012	89 45 f8	 mov	 DWORD PTR __Right_data_mem$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2684 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00015	6a 18		 push	 24			; 00000018H
  00017	ff 75 f8	 push	 DWORD PTR __Right_data_mem$[ebp]
  0001a	ff 75 f4	 push	 DWORD PTR __My_data_mem$[ebp]
  0001d	e8 00 00 00 00	 call	 _memcpy
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2685 :     }

  00025	c9		 leave
  00026	c2 04 00	 ret	 4
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z
_TEXT	SEGMENT
__My_data_mem$1 = -36					; size = 4
__Right_data_mem$2 = -32				; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
$T6 = -16						; size = 4
_this$ = -12						; size = 4
___formal$ = -8						; size = 1
$T7 = -1						; size = 1
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign, COMDAT
; _this$ = ecx

; 2636 :     void _Move_assign(basic_string& _Right, _Equal_allocators) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	89 4d f4	 mov	 DWORD PTR _this$[ebp], ecx

; 2637 :         _Tidy_deallocate();

  00009	8b 4d f4	 mov	 ecx, DWORD PTR _this$[ebp]
  0000c	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 4409 :         return _Mypair._Get_first();

  00011	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00014	89 45 f0	 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00017	8b 45 f0	 mov	 eax, DWORD PTR $T6[ebp]
  0001a	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
  0001d	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00020	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00023	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  00026	89 45 e4	 mov	 DWORD PTR $T3[ebp], eax

; 2638 :         _Pocma(_Getal(), _Right._Getal());

  00029	ff 75 e8	 push	 DWORD PTR $T4[ebp]
  0002c	ff 75 e4	 push	 DWORD PTR $T3[ebp]
  0002f	e8 00 00 00 00	 call	 ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
  00034	59		 pop	 ecx
  00035	59		 pop	 ecx

; 2639 :         _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  00036	33 c0		 xor	 eax, eax
  00038	88 45 ff	 mov	 BYTE PTR $T7[ebp], al
  0003b	8a 45 ff	 mov	 al, BYTE PTR $T7[ebp]
  0003e	88 45 f8	 mov	 BYTE PTR ___formal$[ebp], al

; 2680 :         const auto _My_data_mem =

  00041	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  00044	89 45 dc	 mov	 DWORD PTR __My_data_mem$1[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2682 :         const auto _Right_data_mem =

  00047	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  0004a	89 45 e0	 mov	 DWORD PTR __Right_data_mem$2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2684 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0004d	6a 18		 push	 24			; 00000018H
  0004f	ff 75 e0	 push	 DWORD PTR __Right_data_mem$2[ebp]
  00052	ff 75 dc	 push	 DWORD PTR __My_data_mem$1[ebp]
  00055	e8 00 00 00 00	 call	 _memcpy
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2703 :         _Right._Tidy_init();

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR __Right$[ebp]
  00060	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2640 :     }

  00065	c9		 leave
  00066	c2 08 00	 ret	 8
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@U_Equal_allocators@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
$T2 = -156						; size = 4
__Alproxy$ = -152					; size = 4
$T3 = -148						; size = 4
$T4 = -144						; size = 4
$T5 = -140						; size = 4
__First1$ = -136					; size = 4
$T6 = -132						; size = 4
__Ptr$ = -128						; size = 4
$T7 = -124						; size = 4
__Ptr$ = -120						; size = 4
__Ptr$ = -116						; size = 4
$T8 = -112						; size = 4
$T9 = -108						; size = 4
$T10 = -104						; size = 4
$T11 = -100						; size = 4
__Ptr$ = -96						; size = 4
__First1$ = -92						; size = 4
__Ptr$ = -88						; size = 4
__My_data_mem$12 = -84					; size = 4
__Right_data_mem$13 = -80				; size = 4
$T14 = -76						; size = 4
$T15 = -72						; size = 4
__First1$ = -68						; size = 4
$T16 = -64						; size = 4
__Ptr$17 = -60						; size = 4
__Ptr$ = -56						; size = 4
__Ptr$ = -52						; size = 4
_this$ = -48						; size = 4
$T18 = -44						; size = 4
__Ptr$ = -40						; size = 4
__Result$19 = -36					; size = 4
tv391 = -32						; size = 4
__Result$20 = -28					; size = 4
tv349 = -24						; size = 4
__Fancyptr$ = -20					; size = 4
tv338 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T21 = 0						; size = 4
__Result$22 = 4						; size = 4
tv320 = 8						; size = 4
__Right_capacity$ = 12					; size = 4
__Result$23 = 16					; size = 4
tv301 = 20						; size = 4
__Result$24 = 24					; size = 4
tv292 = 28						; size = 4
__Left_capacity$ = 32					; size = 4
__Masked$25 = 36					; size = 4
__Ptr$26 = 40						; size = 4
__Overflow_is_possible$27 = 46				; size = 1
_$S12$ = 47						; size = 1
___formal$ = 48						; size = 1
___formal$ = 52						; size = 1
__New_capacity$ = 56					; size = 4
__New_size$ = 60					; size = 4
__Max$ = 64						; size = 4
__Right_size$ = 68					; size = 4
$T28 = 74						; size = 1
$T29 = 75						; size = 1
$T30 = 76						; size = 1
$T31 = 77						; size = 1
__Fits_in_right$ = 78					; size = 1
$T32 = 79						; size = 1
$T33 = 80						; size = 1
$T34 = 81						; size = 1
$T35 = 82						; size = 1
__Fits_in_left$ = 83					; size = 1
_this$ = 84						; size = 4
__Right_data$ = 88					; size = 4
__Left_data$ = 92					; size = 4
__Left_size$ = 96					; size = 4
__My_data$ = 100					; size = 4
tv156 = 106						; size = 1
tv128 = 107						; size = 1
___formal$ = 116					; size = 1
__Left$ = 120						; size = 4
__Right$ = 124						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2547 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8d 6c 24 94	 lea	 ebp, DWORD PTR [esp-108]
  00005	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00008	6a ff		 push	 -1
  0000a	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
  0000f	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00015	50		 push	 eax
  00016	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 4d 54	 mov	 DWORD PTR _this$[ebp], ecx

; 4409 :         return _Mypair._Get_first();

  00030	8b 45 78	 mov	 eax, DWORD PTR __Left$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  00033	89 45 d4	 mov	 DWORD PTR $T18[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00036	8b 45 d4	 mov	 eax, DWORD PTR $T18[ebp]
  00039	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax

; 2547 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  0003f	8b 45 54	 mov	 eax, DWORD PTR _this$[ebp]
  00042	89 45 d0	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1344 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00045	8b 4d d0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2547 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  0004d	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2548 :         auto& _My_data    = _Mypair._Myval2;

  00051	8b 45 54	 mov	 eax, DWORD PTR _this$[ebp]
  00054	89 45 64	 mov	 DWORD PTR __My_data$[ebp], eax

; 2549 :         auto& _Left_data  = _Left._Mypair._Myval2;

  00057	8b 45 78	 mov	 eax, DWORD PTR __Left$[ebp]
  0005a	89 45 5c	 mov	 DWORD PTR __Left_data$[ebp], eax

; 2550 :         auto& _Right_data = _Right._Mypair._Myval2;

  0005d	8b 45 7c	 mov	 eax, DWORD PTR __Right$[ebp]
  00060	89 45 58	 mov	 DWORD PTR __Right_data$[ebp], eax

; 2551 :         _Left_data._Orphan_all();
; 2552 :         _Right_data._Orphan_all();
; 2553 :         const auto _Left_size  = _Left_data._Mysize;

  00063	8b 45 5c	 mov	 eax, DWORD PTR __Left_data$[ebp]
  00066	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00069	89 45 60	 mov	 DWORD PTR __Left_size$[ebp], eax

; 2554 :         const auto _Right_size = _Right_data._Mysize;

  0006c	8b 45 58	 mov	 eax, DWORD PTR __Right_data$[ebp]
  0006f	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00072	89 45 44	 mov	 DWORD PTR __Right_size$[ebp], eax

; 2555 : 
; 2556 :         const auto _Left_capacity  = _Left_data._Myres;

  00075	8b 45 5c	 mov	 eax, DWORD PTR __Left_data$[ebp]
  00078	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0007b	89 45 20	 mov	 DWORD PTR __Left_capacity$[ebp], eax

; 2557 :         const auto _Right_capacity = _Right_data._Myres;

  0007e	8b 45 58	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00081	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00084	89 45 0c	 mov	 DWORD PTR __Right_capacity$[ebp], eax

; 2558 :         // overflow is OK due to max_size() checks:
; 2559 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00087	8b 45 60	 mov	 eax, DWORD PTR __Left_size$[ebp]
  0008a	03 45 44	 add	 eax, DWORD PTR __Right_size$[ebp]
  0008d	89 45 3c	 mov	 DWORD PTR __New_size$[ebp], eax

; 2560 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00090	8b 45 20	 mov	 eax, DWORD PTR __Left_capacity$[ebp]
  00093	2b 45 60	 sub	 eax, DWORD PTR __Left_size$[ebp]
  00096	39 45 44	 cmp	 DWORD PTR __Right_size$[ebp], eax
  00099	77 06		 ja	 SHORT $LN6@basic_stri
  0009b	c6 45 6b 01	 mov	 BYTE PTR tv128[ebp], 1
  0009f	eb 04		 jmp	 SHORT $LN7@basic_stri
$LN6@basic_stri:
  000a1	c6 45 6b 00	 mov	 BYTE PTR tv128[ebp], 0
$LN7@basic_stri:
  000a5	8a 45 6b	 mov	 al, BYTE PTR tv128[ebp]
  000a8	88 45 53	 mov	 BYTE PTR __Fits_in_left$[ebp], al

; 2561 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  000ab	0f b6 45 53	 movzx	 eax, BYTE PTR __Fits_in_left$[ebp]
  000af	85 c0		 test	 eax, eax
  000b1	0f 84 d0 00 00
	00		 je	 $LN2@basic_stri
  000b7	8b 45 0c	 mov	 eax, DWORD PTR __Right_capacity$[ebp]
  000ba	3b 45 20	 cmp	 eax, DWORD PTR __Left_capacity$[ebp]
  000bd	0f 87 c4 00 00
	00		 ja	 $LN2@basic_stri

; 2562 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2563 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2564 :             _Take_contents(_Left, bool_constant<_Can_memcpy_val>{});

  000c3	33 c0		 xor	 eax, eax
  000c5	88 45 52	 mov	 BYTE PTR $T35[ebp], al
  000c8	8a 45 52	 mov	 al, BYTE PTR $T35[ebp]
  000cb	88 45 34	 mov	 BYTE PTR ___formal$[ebp], al

; 2702 :         _Memcpy_val_from(_Right);

  000ce	ff 75 78	 push	 DWORD PTR __Left$[ebp]
  000d1	8b 4d 54	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	e8 00 00 00 00	 call	 ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from

; 2703 :         _Right._Tidy_init();

  000d9	8b 4d 78	 mov	 ecx, DWORD PTR __Left$[ebp]
  000dc	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2209 :         value_type* _Result = _Bx._Buf;

  000e1	8b 45 64	 mov	 eax, DWORD PTR __My_data$[ebp]
  000e4	89 45 18	 mov	 DWORD PTR __Result$24[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  000e7	8b 45 64	 mov	 eax, DWORD PTR __My_data$[ebp]
  000ea	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  000ee	72 09		 jb	 SHORT $LN41@basic_stri
  000f0	c7 45 1c 01 00
	00 00		 mov	 DWORD PTR tv292[ebp], 1
  000f7	eb 04		 jmp	 SHORT $LN42@basic_stri
$LN41@basic_stri:
  000f9	83 65 1c 00	 and	 DWORD PTR tv292[ebp], 0
$LN42@basic_stri:
  000fd	8a 45 1c	 mov	 al, BYTE PTR tv292[ebp]
  00100	88 45 51	 mov	 BYTE PTR $T34[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  00103	0f b6 45 51	 movzx	 eax, BYTE PTR $T34[ebp]
  00107	85 c0		 test	 eax, eax
  00109	74 0e		 je	 SHORT $LN36@basic_stri

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  0010b	8b 45 64	 mov	 eax, DWORD PTR __My_data$[ebp]
  0010e	8b 00		 mov	 eax, DWORD PTR [eax]
  00110	89 45 cc	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00113	8b 45 cc	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00116	89 45 18	 mov	 DWORD PTR __Result$24[ebp], eax
$LN36@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  00119	8b 45 18	 mov	 eax, DWORD PTR __Result$24[ebp]
  0011c	89 45 c4	 mov	 DWORD PTR __Ptr$17[ebp], eax

; 2209 :         value_type* _Result = _Bx._Buf;

  0011f	8b 45 58	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00122	89 45 10	 mov	 DWORD PTR __Result$23[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  00125	8b 45 58	 mov	 eax, DWORD PTR __Right_data$[ebp]
  00128	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  0012c	72 09		 jb	 SHORT $LN53@basic_stri
  0012e	c7 45 14 01 00
	00 00		 mov	 DWORD PTR tv301[ebp], 1
  00135	eb 04		 jmp	 SHORT $LN54@basic_stri
$LN53@basic_stri:
  00137	83 65 14 00	 and	 DWORD PTR tv301[ebp], 0
$LN54@basic_stri:
  0013b	8a 45 14	 mov	 al, BYTE PTR tv301[ebp]
  0013e	88 45 50	 mov	 BYTE PTR $T33[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  00141	0f b6 45 50	 movzx	 eax, BYTE PTR $T33[ebp]
  00145	85 c0		 test	 eax, eax
  00147	74 0e		 je	 SHORT $LN48@basic_stri

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  00149	8b 45 58	 mov	 eax, DWORD PTR __Right_data$[ebp]
  0014c	8b 00		 mov	 eax, DWORD PTR [eax]
  0014e	89 45 c8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00151	8b 45 c8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00154	89 45 10	 mov	 DWORD PTR __Result$23[ebp], eax
$LN48@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  00157	8b 45 10	 mov	 eax, DWORD PTR __Result$23[ebp]
  0015a	89 45 c0	 mov	 DWORD PTR $T16[ebp], eax

; 2565 :             const auto _Ptr = _My_data._Myptr();
; 2566 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0015d	8b 45 c4	 mov	 eax, DWORD PTR __Ptr$17[ebp]
  00160	03 45 60	 add	 eax, DWORD PTR __Left_size$[ebp]
  00163	89 45 bc	 mov	 DWORD PTR __First1$[ebp], eax
  00166	8b 45 44	 mov	 eax, DWORD PTR __Right_size$[ebp]
  00169	40		 inc	 eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016a	50		 push	 eax
  0016b	ff 75 c0	 push	 DWORD PTR $T16[ebp]
  0016e	ff 75 bc	 push	 DWORD PTR __First1$[ebp]
  00171	e8 00 00 00 00	 call	 _memcpy
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2567 :             _My_data._Mysize = _New_size;

  00179	8b 45 64	 mov	 eax, DWORD PTR __My_data$[ebp]
  0017c	8b 4d 3c	 mov	 ecx, DWORD PTR __New_size$[ebp]
  0017f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2568 :             return;

  00182	e9 96 02 00 00	 jmp	 $LN1@basic_stri
$LN2@basic_stri:

; 2569 :         }
; 2570 : 
; 2571 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  00187	8b 45 0c	 mov	 eax, DWORD PTR __Right_capacity$[ebp]
  0018a	2b 45 44	 sub	 eax, DWORD PTR __Right_size$[ebp]
  0018d	39 45 60	 cmp	 DWORD PTR __Left_size$[ebp], eax
  00190	77 06		 ja	 SHORT $LN8@basic_stri
  00192	c6 45 6a 01	 mov	 BYTE PTR tv156[ebp], 1
  00196	eb 04		 jmp	 SHORT $LN9@basic_stri
$LN8@basic_stri:
  00198	c6 45 6a 00	 mov	 BYTE PTR tv156[ebp], 0
$LN9@basic_stri:
  0019c	8a 45 6a	 mov	 al, BYTE PTR tv156[ebp]
  0019f	88 45 4e	 mov	 BYTE PTR __Fits_in_right$[ebp], al

; 4409 :         return _Mypair._Get_first();

  001a2	8b 45 7c	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001a5	89 45 b8	 mov	 DWORD PTR $T15[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  001a8	8b 45 b8	 mov	 eax, DWORD PTR $T15[ebp]
  001ab	89 85 70 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  001b1	8b 45 54	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  001b4	89 45 b4	 mov	 DWORD PTR $T14[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  001b7	8b 45 b4	 mov	 eax, DWORD PTR $T14[ebp]
  001ba	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 2039 :         return true;

  001c0	c6 45 4f 01	 mov	 BYTE PTR $T32[ebp], 1
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2572 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  001c4	0f b6 45 4f	 movzx	 eax, BYTE PTR $T32[ebp]
  001c8	85 c0		 test	 eax, eax
  001ca	0f 84 c2 00 00
	00		 je	 $LN3@basic_stri
  001d0	0f b6 45 4e	 movzx	 eax, BYTE PTR __Fits_in_right$[ebp]
  001d4	85 c0		 test	 eax, eax
  001d6	0f 84 b6 00 00
	00		 je	 $LN3@basic_stri

; 2573 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 2574 :             // At this point, we have tested:
; 2575 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 2576 :             // therefore: (by De Morgan's Laws)
; 2577 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 2578 :             // therefore: (by the distributive property)
; 2579 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 2580 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 2581 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_string_engaged()
; 2582 :             _STL_INTERNAL_CHECK(_Right_data._Large_string_engaged());
; 2583 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2584 :             _Take_contents(_Right, bool_constant<_Can_memcpy_val>{});

  001dc	33 c0		 xor	 eax, eax
  001de	88 45 4d	 mov	 BYTE PTR $T31[ebp], al
  001e1	8a 45 4d	 mov	 al, BYTE PTR $T31[ebp]
  001e4	88 45 30	 mov	 BYTE PTR ___formal$[ebp], al

; 2680 :         const auto _My_data_mem =

  001e7	8b 45 54	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  001ea	89 45 ac	 mov	 DWORD PTR __My_data_mem$12[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2682 :         const auto _Right_data_mem =

  001ed	8b 45 7c	 mov	 eax, DWORD PTR __Right$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 275  :     return __builtin_addressof(_Val);

  001f0	89 45 b0	 mov	 DWORD PTR __Right_data_mem$13[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2684 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  001f3	6a 18		 push	 24			; 00000018H
  001f5	ff 75 b0	 push	 DWORD PTR __Right_data_mem$13[ebp]
  001f8	ff 75 ac	 push	 DWORD PTR __My_data_mem$12[ebp]
  001fb	e8 00 00 00 00	 call	 _memcpy
  00200	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2703 :         _Right._Tidy_init();

  00203	8b 4d 7c	 mov	 ecx, DWORD PTR __Right$[ebp]
  00206	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2585 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  0020b	8b 45 64	 mov	 eax, DWORD PTR __My_data$[ebp]
  0020e	8b 00		 mov	 eax, DWORD PTR [eax]
  00210	89 45 a8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00213	8b 45 a8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00216	89 45 28	 mov	 DWORD PTR __Ptr$26[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2586 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  00219	8b 45 28	 mov	 eax, DWORD PTR __Ptr$26[ebp]
  0021c	03 45 60	 add	 eax, DWORD PTR __Left_size$[ebp]
  0021f	89 45 a4	 mov	 DWORD PTR __First1$[ebp], eax
  00222	8b 45 44	 mov	 eax, DWORD PTR __Right_size$[ebp]
  00225	40		 inc	 eax

; 119  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00226	50		 push	 eax
  00227	ff 75 28	 push	 DWORD PTR __Ptr$26[ebp]
  0022a	ff 75 a4	 push	 DWORD PTR __First1$[ebp]
  0022d	e8 00 00 00 00	 call	 _memmove
  00232	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2209 :         value_type* _Result = _Bx._Buf;

  00235	8b 45 5c	 mov	 eax, DWORD PTR __Left_data$[ebp]
  00238	89 45 04	 mov	 DWORD PTR __Result$22[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0023b	8b 45 5c	 mov	 eax, DWORD PTR __Left_data$[ebp]
  0023e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00242	72 09		 jb	 SHORT $LN104@basic_stri
  00244	c7 45 08 01 00
	00 00		 mov	 DWORD PTR tv320[ebp], 1
  0024b	eb 04		 jmp	 SHORT $LN105@basic_stri
$LN104@basic_stri:
  0024d	83 65 08 00	 and	 DWORD PTR tv320[ebp], 0
$LN105@basic_stri:
  00251	8a 45 08	 mov	 al, BYTE PTR tv320[ebp]
  00254	88 45 4a	 mov	 BYTE PTR $T28[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  00257	0f b6 45 4a	 movzx	 eax, BYTE PTR $T28[ebp]
  0025b	85 c0		 test	 eax, eax
  0025d	74 0e		 je	 SHORT $LN99@basic_stri

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  0025f	8b 45 5c	 mov	 eax, DWORD PTR __Left_data$[ebp]
  00262	8b 00		 mov	 eax, DWORD PTR [eax]
  00264	89 45 a0	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00267	8b 45 a0	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0026a	89 45 04	 mov	 DWORD PTR __Result$22[ebp], eax
$LN99@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  0026d	8b 45 04	 mov	 eax, DWORD PTR __Result$22[ebp]
  00270	89 45 9c	 mov	 DWORD PTR $T11[ebp], eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00273	ff 75 60	 push	 DWORD PTR __Left_size$[ebp]
  00276	ff 75 9c	 push	 DWORD PTR $T11[ebp]
  00279	ff 75 28	 push	 DWORD PTR __Ptr$26[ebp]
  0027c	e8 00 00 00 00	 call	 _memcpy
  00281	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2587 :             _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2588 :             _My_data._Mysize = _New_size;

  00284	8b 45 64	 mov	 eax, DWORD PTR __My_data$[ebp]
  00287	8b 4d 3c	 mov	 ecx, DWORD PTR __New_size$[ebp]
  0028a	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2589 :             return;

  0028d	e9 8b 01 00 00	 jmp	 $LN1@basic_stri
$LN3@basic_stri:

; 2590 :         }
; 2591 : 
; 2592 :         // can't use either buffer, reallocate
; 2593 :         const auto _Max = max_size();

  00292	8b 4d 54	 mov	 ecx, DWORD PTR _this$[ebp]
  00295	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0029a	89 45 40	 mov	 DWORD PTR __Max$[ebp], eax

; 2594 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  0029d	8b 45 40	 mov	 eax, DWORD PTR __Max$[ebp]
  002a0	2b 45 60	 sub	 eax, DWORD PTR __Left_size$[ebp]
  002a3	3b 45 44	 cmp	 eax, DWORD PTR __Right_size$[ebp]
  002a6	73 05		 jae	 SHORT $LN4@basic_stri

; 2595 :             _Xlen_string();

  002a8	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN4@basic_stri:

; 4285 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  002ad	8b 45 3c	 mov	 eax, DWORD PTR __New_size$[ebp]
  002b0	83 c8 0f	 or	 eax, 15			; 0000000fH
  002b3	89 45 24	 mov	 DWORD PTR __Masked$25[ebp], eax

; 4286 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  002b6	8b 45 24	 mov	 eax, DWORD PTR __Masked$25[ebp]
  002b9	3b 45 40	 cmp	 eax, DWORD PTR __Max$[ebp]
  002bc	76 08		 jbe	 SHORT $LN139@basic_stri

; 4287 :             return _Max;

  002be	8b 45 40	 mov	 eax, DWORD PTR __Max$[ebp]
  002c1	89 45 38	 mov	 DWORD PTR __New_capacity$[ebp], eax
  002c4	eb 4c		 jmp	 SHORT $LN141@basic_stri
$LN139@basic_stri:

; 4288 :         }
; 4289 : 
; 4290 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  002c6	6a 0f		 push	 15			; 0000000fH
  002c8	58		 pop	 eax
  002c9	d1 e8		 shr	 eax, 1
  002cb	8b 4d 40	 mov	 ecx, DWORD PTR __Max$[ebp]
  002ce	2b c8		 sub	 ecx, eax
  002d0	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  002d3	73 08		 jae	 SHORT $LN140@basic_stri

; 4291 :             return _Max;

  002d5	8b 45 40	 mov	 eax, DWORD PTR __Max$[ebp]
  002d8	89 45 38	 mov	 DWORD PTR __New_capacity$[ebp], eax
  002db	eb 35		 jmp	 SHORT $LN141@basic_stri
$LN140@basic_stri:

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  002dd	6a 0f		 push	 15			; 0000000fH
  002df	58		 pop	 eax
  002e0	d1 e8		 shr	 eax, 1
  002e2	83 c0 0f	 add	 eax, 15			; 0000000fH
  002e5	89 45 00	 mov	 DWORD PTR $T21[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\utility

; 44   :     return _Left < _Right ? _Right : _Left;

  002e8	8b 45 24	 mov	 eax, DWORD PTR __Masked$25[ebp]
  002eb	3b 45 00	 cmp	 eax, DWORD PTR $T21[ebp]
  002ee	73 08		 jae	 SHORT $LN145@basic_stri
  002f0	8d 45 00	 lea	 eax, DWORD PTR $T21[ebp]
  002f3	89 45 f0	 mov	 DWORD PTR tv338[ebp], eax
  002f6	eb 06		 jmp	 SHORT $LN146@basic_stri
$LN145@basic_stri:
  002f8	8d 45 24	 lea	 eax, DWORD PTR __Masked$25[ebp]
  002fb	89 45 f0	 mov	 DWORD PTR tv338[ebp], eax
$LN146@basic_stri:
  002fe	8b 45 f0	 mov	 eax, DWORD PTR tv338[ebp]
  00301	89 45 98	 mov	 DWORD PTR $T10[ebp], eax
  00304	8b 45 98	 mov	 eax, DWORD PTR $T10[ebp]
  00307	89 45 94	 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4294 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0030a	8b 45 94	 mov	 eax, DWORD PTR $T9[ebp]
  0030d	8b 00		 mov	 eax, DWORD PTR [eax]
  0030f	89 45 38	 mov	 DWORD PTR __New_capacity$[ebp], eax
$LN141@basic_stri:

; 2596 :         }
; 2597 : 
; 2598 :         const auto _New_capacity = _Calculate_growth(_New_size, _BUF_SIZE - 1, _Max);
; 2599 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00312	8d 45 2f	 lea	 eax, DWORD PTR _$S12$[ebp]
  00315	89 85 68 ff ff
	ff		 mov	 DWORD PTR __Alproxy$[ebp], eax

; 4409 :         return _Mypair._Get_first();

  0031b	8b 45 54	 mov	 eax, DWORD PTR _this$[ebp]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1347 :         return *this;

  0031e	89 45 90	 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 4409 :         return _Mypair._Get_first();

  00321	8b 45 90	 mov	 eax, DWORD PTR $T8[ebp]
  00324	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0032a	c6 45 2e 00	 mov	 BYTE PTR __Overflow_is_possible$27[ebp], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2601 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  0032e	8b 45 38	 mov	 eax, DWORD PTR __New_capacity$[ebp]
  00331	40		 inc	 eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 814  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00332	50		 push	 eax
  00333	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
  00338	59		 pop	 ecx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2601 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00339	89 45 ec	 mov	 DWORD PTR __Fancyptr$[ebp], eax

; 2602 :         // nothrow hereafter
; 2603 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0033c	8d 45 ec	 lea	 eax, DWORD PTR __Fancyptr$[ebp]
  0033f	50		 push	 eax
  00340	ff 75 64	 push	 DWORD PTR __My_data$[ebp]
  00343	e8 00 00 00 00	 call	 ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
  00348	59		 pop	 ecx
  00349	59		 pop	 ecx

; 2604 :         _My_data._Mysize = _New_size;

  0034a	8b 45 64	 mov	 eax, DWORD PTR __My_data$[ebp]
  0034d	8b 4d 3c	 mov	 ecx, DWORD PTR __New_size$[ebp]
  00350	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2605 :         _My_data._Myres  = _New_capacity;

  00353	8b 45 64	 mov	 eax, DWORD PTR __My_data$[ebp]
  00356	8b 4d 38	 mov	 ecx, DWORD PTR __New_capacity$[ebp]
  00359	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2606 :         const auto _Ptr  = _Unfancy(_Fancyptr);

  0035c	8b 45 ec	 mov	 eax, DWORD PTR __Fancyptr$[ebp]
  0035f	89 45 8c	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  00362	8b 45 8c	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00365	89 45 d8	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2209 :         value_type* _Result = _Bx._Buf;

  00368	8b 45 5c	 mov	 eax, DWORD PTR __Left_data$[ebp]
  0036b	89 45 e4	 mov	 DWORD PTR __Result$20[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0036e	8b 45 5c	 mov	 eax, DWORD PTR __Left_data$[ebp]
  00371	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00375	72 09		 jb	 SHORT $LN170@basic_stri
  00377	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv349[ebp], 1
  0037e	eb 04		 jmp	 SHORT $LN171@basic_stri
$LN170@basic_stri:
  00380	83 65 e8 00	 and	 DWORD PTR tv349[ebp], 0
$LN171@basic_stri:
  00384	8a 45 e8	 mov	 al, BYTE PTR tv349[ebp]
  00387	88 45 4c	 mov	 BYTE PTR $T30[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  0038a	0f b6 45 4c	 movzx	 eax, BYTE PTR $T30[ebp]
  0038e	85 c0		 test	 eax, eax
  00390	74 0e		 je	 SHORT $LN165@basic_stri

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  00392	8b 45 5c	 mov	 eax, DWORD PTR __Left_data$[ebp]
  00395	8b 00		 mov	 eax, DWORD PTR [eax]
  00397	89 45 88	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0039a	8b 45 88	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0039d	89 45 e4	 mov	 DWORD PTR __Result$20[ebp], eax
$LN165@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  003a0	8b 45 e4	 mov	 eax, DWORD PTR __Result$20[ebp]
  003a3	89 45 84	 mov	 DWORD PTR $T7[ebp], eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  003a6	ff 75 60	 push	 DWORD PTR __Left_size$[ebp]
  003a9	ff 75 84	 push	 DWORD PTR $T7[ebp]
  003ac	ff 75 d8	 push	 DWORD PTR __Ptr$[ebp]
  003af	e8 00 00 00 00	 call	 _memcpy
  003b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2209 :         value_type* _Result = _Bx._Buf;

  003b7	8b 45 58	 mov	 eax, DWORD PTR __Right_data$[ebp]
  003ba	89 45 dc	 mov	 DWORD PTR __Result$19[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  003bd	8b 45 58	 mov	 eax, DWORD PTR __Right_data$[ebp]
  003c0	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  003c4	72 09		 jb	 SHORT $LN185@basic_stri
  003c6	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv391[ebp], 1
  003cd	eb 04		 jmp	 SHORT $LN186@basic_stri
$LN185@basic_stri:
  003cf	83 65 e0 00	 and	 DWORD PTR tv391[ebp], 0
$LN186@basic_stri:
  003d3	8a 45 e0	 mov	 al, BYTE PTR tv391[ebp]
  003d6	88 45 4b	 mov	 BYTE PTR $T29[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  003d9	0f b6 45 4b	 movzx	 eax, BYTE PTR $T29[ebp]
  003dd	85 c0		 test	 eax, eax
  003df	74 0e		 je	 SHORT $LN180@basic_stri

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  003e1	8b 45 58	 mov	 eax, DWORD PTR __Right_data$[ebp]
  003e4	8b 00		 mov	 eax, DWORD PTR [eax]
  003e6	89 45 80	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  003e9	8b 45 80	 mov	 eax, DWORD PTR __Ptr$[ebp]
  003ec	89 45 dc	 mov	 DWORD PTR __Result$19[ebp], eax
$LN180@basic_stri:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  003ef	8b 45 dc	 mov	 eax, DWORD PTR __Result$19[ebp]
  003f2	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax

; 2607 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2608 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  003f8	8b 45 d8	 mov	 eax, DWORD PTR __Ptr$[ebp]
  003fb	03 45 60	 add	 eax, DWORD PTR __Left_size$[ebp]
  003fe	89 85 78 ff ff
	ff		 mov	 DWORD PTR __First1$[ebp], eax
  00404	8b 45 44	 mov	 eax, DWORD PTR __Right_size$[ebp]
  00407	40		 inc	 eax

; 62   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00408	50		 push	 eax
  00409	ff b5 7c ff ff
	ff		 push	 DWORD PTR $T6[ebp]
  0040f	ff b5 78 ff ff
	ff		 push	 DWORD PTR __First1$[ebp]
  00415	e8 00 00 00 00	 call	 _memcpy
  0041a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@basic_stri:

; 2609 :         _Proxy._Release();
; 2610 :     }

  0041d	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00421	8b 45 54	 mov	 eax, DWORD PTR _this$[ebp]
$LN5@basic_stri:
  00424	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00427	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0042e	59		 pop	 ecx
  0042f	83 c5 6c	 add	 ebp, 108		; 0000006cH
  00432	c9		 leave
  00433	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z$0:
  00000	8b 4d 54	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 6c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-148]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__Alproxy$ = -40					; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
_this$ = -28						; size = 4
_this$ = -24						; size = 4
_this$ = -20						; size = 4
_$S6$ = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2413 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00028	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	89 45 e4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0002e	8b 45 e4	 mov	 eax, DWORD PTR _this$[ebp]
  00031	89 45 e8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00034	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  0003b	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 2413 :     basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00042	83 65 fc 00	 and	 DWORD PTR __$EHRec$[ebp+8], 0

; 2414 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00046	8d 45 f3	 lea	 eax, DWORD PTR _$S6$[ebp]
  00049	89 45 d8	 mov	 DWORD PTR __Alproxy$[ebp], eax

; 2415 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);
; 2416 :         _Tidy_init();

  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00054	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00057	e8 00 00 00 00	 call	 _strlen
  0005c	59		 pop	 ecx
  0005d	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 997  :     return _Len;

  00060	8b 45 e0	 mov	 eax, DWORD PTR $T3[ebp]
  00063	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 3062 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00066	ff 75 dc	 push	 DWORD PTR $T2[ebp]
  00069	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0006c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2417 :         assign(_Ptr);
; 2418 :         _Proxy._Release();
; 2419 :     }

  00074	83 4d fc ff	 or	 DWORD PTR __$EHRec$[ebp+8], -1
  00078	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	c9		 leave
  00087	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_this$ = -8						; size = 4
_this$ = -4						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2365 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f4	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory

; 1339 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000f	8b 45 f4	 mov	 eax, DWORD PTR _this$[ebp]
  00012	89 45 f8	 mov	 DWORD PTR _this$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00015	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00018	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  0001c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 60 14 00	 and	 DWORD PTR [eax+20], 0

; 2366 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 2367 :         _Tidy_init();

  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2368 :     }

  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c9		 leave
  0002f	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Ptr$ = -20						; size = 4
__Result$ = -16						; size = 4
tv76 = -12						; size = 4
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2208 :     value_type* _Myptr() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 2209 :         value_type* _Result = _Bx._Buf;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax

; 2227 :         return _BUF_SIZE <= _Myres;

  0000f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00016	72 09		 jb	 SHORT $LN6@Myptr
  00018	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv76[ebp], 1
  0001f	eb 04		 jmp	 SHORT $LN7@Myptr
$LN6@Myptr:
  00021	83 65 f4 00	 and	 DWORD PTR tv76[ebp], 0
$LN7@Myptr:
  00025	8a 45 f4	 mov	 al, BYTE PTR tv76[ebp]
  00028	88 45 ff	 mov	 BYTE PTR $T1[ebp], al

; 2210 :         if (_Large_string_engaged()) {

  0002b	0f b6 45 ff	 movzx	 eax, BYTE PTR $T1[ebp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0e		 je	 SHORT $LN2@Myptr

; 2211 :             _Result = _Unfancy(_Bx._Ptr);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 00		 mov	 eax, DWORD PTR [eax]
  00038	89 45 ec	 mov	 DWORD PTR __Ptr$[ebp], eax
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstddef

; 289  :     return _Ptr;

  0003b	8b 45 ec	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0003e	89 45 f0	 mov	 DWORD PTR __Result$[ebp], eax
$LN2@Myptr:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 2214 :         return _Result;

  00041	8b 45 f0	 mov	 eax, DWORD PTR __Result$[ebp]

; 2215 :     }

  00044	c9		 leave
  00045	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2198 :     _String_val() noexcept : _Bx(), _Mysize(0), _Myres(0) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 60 10 00	 and	 DWORD PTR [eax+16], 0
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 60 14 00	 and	 DWORD PTR [eax+20], 0
  00015	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00018	c9		 leave
  00019	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2274 : [[noreturn]] inline void _Xlen_string() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2275 :     _Xlength_error("string too long");

  00003	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00008	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2276 : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_user$ = -12					; size = 4
__Ptr_container$ = -8					; size = 4
__Back_shift$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 132  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 133  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 134  :     _Bytes += _Non_user_size;

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	83 c0 23	 add	 eax, 35			; 00000023H
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR __Bytes$[ebp]
  00011	89 01		 mov	 DWORD PTR [ecx], eax

; 135  : 
; 136  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00013	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00016	8b 00		 mov	 eax, DWORD PTR [eax]
  00018	89 45 f4	 mov	 DWORD PTR __Ptr_user$[ebp], eax

; 137  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001b	6a 04		 push	 4
  0001d	58		 pop	 eax
  0001e	6b c0 ff	 imul	 eax, eax, -1
  00021	8b 4d f4	 mov	 ecx, DWORD PTR __Ptr_user$[ebp]
  00024	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00027	89 45 f8	 mov	 DWORD PTR __Ptr_container$[ebp], eax

; 138  : 
; 139  :     // If the following asserts, it likely means that we are performing
; 140  :     // an aligned delete on memory coming from an unaligned allocation.
; 141  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 142  : 
; 143  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 144  :     // in range [_Min_back_shift, _Non_user_size]
; 145  : #ifdef _DEBUG
; 146  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 147  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 148  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  0002a	c7 45 f0 04 00
	00 00		 mov	 DWORD PTR __Min_back_shift$[ebp], 4

; 149  : #endif // _DEBUG
; 150  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00031	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	2b 45 f8	 sub	 eax, DWORD PTR __Ptr_container$[ebp]
  00039	89 45 fc	 mov	 DWORD PTR __Back_shift$[ebp], eax
$LN4@Adjust_man:

; 151  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 7d fc 04	 cmp	 DWORD PTR __Back_shift$[ebp], 4
  00040	72 08		 jb	 SHORT $LN7@Adjust_man
  00042	83 7d fc 23	 cmp	 DWORD PTR __Back_shift$[ebp], 35 ; 00000023H
  00046	77 02		 ja	 SHORT $LN7@Adjust_man
  00048	eb 09		 jmp	 SHORT $LN2@Adjust_man
$LN7@Adjust_man:
  0004a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
  0004f	33 c0		 xor	 eax, eax
  00051	75 f7		 jne	 SHORT $LN7@Adjust_man
$LN2@Adjust_man:
  00053	33 c0		 xor	 eax, eax
  00055	75 e5		 jne	 SHORT $LN4@Adjust_man

; 152  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR __Ptr_container$[ebp]
  0005d	89 08		 mov	 DWORD PTR [eax], ecx
$LN10@Adjust_man:

; 153  : }

  0005f	c9		 leave
  00060	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 321  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN2@Throw_bad_:

; 322  : }

  0001c	c9		 leave
  0001d	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
  00024	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00027	c9		 leave
  00028	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	c9		 leave
  0001e	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 66   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 65   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 67   :         _Data._What = _Message;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 130  :     {

  00027	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 141  :     {

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	c9		 leave
  0003d	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	ff 75 08	 push	 DWORD PTR ___that$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	e8 00 00 00 00	 call	 ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception
  00012	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c9		 leave
  0001f	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 89   :     {

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 90   :         __std_exception_destroy(&_Data);

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	83 c0 04	 add	 eax, 4
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ___std_exception_destroy
  0001c	59		 pop	 ecx
  0001d	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00020	83 e0 01	 and	 eax, 1
  00023	74 0c		 je	 SHORT $LN2@scalar
  00025	6a 0c		 push	 12			; 0000000cH
  00027	ff 75 fc	 push	 DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	59		 pop	 ecx
  00030	59		 pop	 ecx
$LN2@scalar:
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c9		 leave
  00035	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 94   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00008	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000f	74 0b		 je	 SHORT $LN3@what
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  0001a	eb 07		 jmp	 SHORT $LN4@what
$LN3@what:
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
  00023	8b 45 f8	 mov	 eax, DWORD PTR tv69[ebp]

; 96   :     }

  00026	c9		 leave
  00027	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odspy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 71   :         : _Data()

  00010	33 c0		 xor	 eax, eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	83 c1 04	 add	 ecx, 4
  00018	89 01		 mov	 DWORD PTR [ecx], eax
  0001a	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	83 c0 04	 add	 eax, 4
  00023	50		 push	 eax
  00024	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  00027	83 c0 04	 add	 eax, 4
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ___std_exception_copy
  00030	59		 pop	 ecx
  00031	59		 pop	 ecx

; 74   :     }

  00032	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00035	c9		 leave
  00036	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
